/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "hc.h"
#include "hcsp_bridge.h"

typedef jobject StringBuffer;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1key_1out_1of_1range_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1non_1circle_1key_1out_1of_1range_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1key_1does_1not_1exist_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1unable_1to_1determine_1entity_1class_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1non_1mappable_1entity_1class_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1unknown_1entity_1class_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1not_1implemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1hoops_1key_1maps_1to_1invalid_1entity_1class_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1ERROR_1incorrect_1face_1tag_1mapping_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int) -9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2, jboolean jarg3) {
  char *arg1 = (char *) 0 ;
  unsigned char arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  arg2 = (unsigned char)jarg2; 
  arg3 = jarg3 ? true : false; 
  HP_Init((char const *)arg1,arg2,arg3);
  if (arg1) (jenv)->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jshort jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  arg2 = (unsigned char)jarg2; 
  HP_Init((char const *)arg1,arg2);
  if (arg1) (jenv)->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Update(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  HP_Update();
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Close(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  HP_Close();
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Delete_1Entity_1Geometry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2, jboolean jarg3) {
  unsigned long arg1 ;
  int *arg2 = (int *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (int *) jenv->GetIntArrayElements(jarg2, 0); 
  }
  arg3 = jarg3 ? true : false; 
  HP_Delete_Entity_Geometry(arg1,arg2,arg3);
  {
    jenv->ReleaseIntArrayElements(jarg2, (jint *)arg2, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Delete_1Entity_1Geometry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  unsigned long arg1 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (int *) jenv->GetIntArrayElements(jarg2, 0); 
  }
  HP_Delete_Entity_Geometry(arg1,arg2);
  {
    jenv->ReleaseIntArrayElements(jarg2, (jint *)arg2, 0); 
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_techsoft_hoops_HJPJNI_Update_1Entity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)HP_Update_Entity(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_techsoft_hoops_HJPJNI_Update_1Entity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)HP_Update_Entity(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_techsoft_hoops_HJPJNI_Update_1Entity_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)HP_Update_Entity(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_Compute_1Geometry_1Keys(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jintArray jarg3, jstring jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  HLONG *arg3 = (HLONG *) 0 ;
  char *arg4 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg3 = (HLONG *) jenv->GetIntArrayElements(jarg3, 0); 
  }
  {
    if (jarg4) {
      arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    }
  }
  result = (long)HP_Compute_Geometry_Keys(arg1,arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg3, (jint *)arg3, 0); 
  }
  
  if (arg4) (jenv)->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_Compute_1Geometry_1Key_1Count(JNIEnv *jenv, jclass jcls, jint jarg1, StringBuffer jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (jarg2) {
      arg2 = (char *)jenv->GetStringUTFChars((jstring)jarg2, 0);
    }
  }
  result = (long)HP_Compute_Geometry_Key_Count(arg1,arg2);
  jresult = (jint)result; 
  {
    jmethodID method_arg2;
    jstring jstring_arg2;
    
    method_arg2 = (jenv)->GetMethodID(jenv->GetObjectClass(jarg2),
      "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
    if(method_arg2) 
    {
      jstring_arg2 = jenv->NewStringUTF((const char *) arg2);
      (jenv)->CallObjectMethod ( jarg2, method_arg2, jstring_arg2);
    };
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_Compute_1TagID(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  HLONG arg1 ;
  int arg2 ;
  HLONG *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(HLONG **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null HLONG");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (int)HP_Compute_TagID(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Set_1Rendering_1Options(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  HP_Set_Rendering_Options((char const *)arg1);
  if (arg1) (jenv)->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Show_1Rendering_1Options(JNIEnv *jenv, jclass jcls, StringBuffer jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars((jstring)jarg1, 0);
    }
  }
  HP_Show_Rendering_Options(arg1);
  {
    jmethodID method_arg1;
    jstring jstring_arg1;
    
    method_arg1 = (jenv)->GetMethodID(jenv->GetObjectClass(jarg1),
      "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
    if(method_arg1) 
    {
      jstring_arg1 = jenv->NewStringUTF((const char *) arg1);
      (jenv)->CallObjectMethod ( jarg1, method_arg1, jstring_arg1);
    };
  }
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Show_1One_1Rendering_1Option(JNIEnv *jenv, jclass jcls, jstring jarg1, StringBuffer jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  {
    if (jarg2) {
      arg2 = (char *)jenv->GetStringUTFChars((jstring)jarg2, 0);
    }
  }
  HP_Show_One_Rendering_Option((char const *)arg1,arg2);
  if (arg1) (jenv)->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
  {
    jmethodID method_arg2;
    jstring jstring_arg2;
    
    method_arg2 = (jenv)->GetMethodID(jenv->GetObjectClass(jarg2),
      "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
    if(method_arg2) 
    {
      jstring_arg2 = jenv->NewStringUTF((const char *) arg2);
      (jenv)->CallObjectMethod ( jarg2, method_arg2, jstring_arg2);
    };
  }
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Set_1Schema_1Path(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  HP_Set_Schema_Path((char const *)arg1);
  if (arg1) (jenv)->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Set_1Hash_1Level(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  unsigned char arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  HP_Set_Hash_Level(arg1);
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Set_1Instances_1To_1Bodies(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  HP_Set_Instances_To_Bodies(arg1);
}


SWIGEXPORT jboolean JNICALL Java_com_techsoft_hoops_HJPJNI_Get_1Instances_1To_1Bodies(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)HP_Get_Instances_To_Bodies();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_techsoft_hoops_HJPJNI_Check_1Consistency(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)HP_Check_Consistency();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_techsoft_hoops_HJPJNI_Associate_1Key_1To_1Entity(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  HLONG arg2 ;
  HLONG *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  argp2 = *(HLONG **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null HLONG");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)HP_Associate_Key_To_Entity(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_Compute_1Selected_1Entity_1List(JNIEnv *jenv, jclass jcls, jlong jarg1, jintArray jarg2) {
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (int *) jenv->GetIntArrayElements(jarg2, 0); 
  }
  HP_Compute_Selected_Entity_List(arg1,arg2);
  {
    jenv->ReleaseIntArrayElements(jarg2, (jint *)arg2, 0); 
  }
  
}


SWIGEXPORT jshort JNICALL Java_com_techsoft_hoops_HJPJNI_Get_1Hash_1Level(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char)HP_Get_Hash_Level();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_techsoft_hoops_HJPJNI_Get_1Schema_1Path(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  wchar_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (wchar_t *)HP_Get_Schema_Path();
  *(wchar_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1Internal_1Open_1Assembly(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jint jarg3) {
  int arg1 ;
  bool arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  HP_Internal_Open_Assembly(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_HP_1Internal_1Merge_1Body_1Faces(JNIEnv *jenv, jclass jcls, jintArray jarg1, jlong jarg2) {
  int *arg1 = (int *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (int *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  arg2 = (unsigned long)jarg2; 
  HP_Internal_Merge_Body_Faces(arg1,arg2);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_com_techsoft_hoops_HJPJNI_insert_1vertices_1for_1body(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  insert_vertices_for_body(arg1);
}


#ifdef __cplusplus
}
#endif

