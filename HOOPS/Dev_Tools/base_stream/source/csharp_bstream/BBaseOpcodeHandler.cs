/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif


public class BBaseOpcodeHandler : BControlledMemoryObject {
  private HandleRef swigCPtr;

  internal BBaseOpcodeHandler(IntPtr cPtr, bool cMemoryOwn) : base(HCSBSTREAMPINVOKE.BBaseOpcodeHandlerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BBaseOpcodeHandler obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BBaseOpcodeHandler() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSBSTREAMPINVOKE.delete_BBaseOpcodeHandler(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TK_Status Execute(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Execute(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TK_Status Interpret(BStreamFileToolkit tk, int key, int variant) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Interpret__SWIG_0(swigCPtr, BStreamFileToolkit.getCPtr(tk), key, variant);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TK_Status Interpret(BStreamFileToolkit tk, int key) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Interpret__SWIG_1(swigCPtr, BStreamFileToolkit.getCPtr(tk), key);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TK_Status Interpret_special(BStreamFileToolkit tk, int key, string special) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Interpret_special(swigCPtr, BStreamFileToolkit.getCPtr(tk), key, special);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Reset() {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Reset(swigCPtr);
  }

  public virtual bool Match_Instance(BStreamFileToolkit tk, Recorded_Instance instance) {
    bool ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Match_Instance(swigCPtr, BStreamFileToolkit.getCPtr(tk), Recorded_Instance.getCPtr(instance));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public byte Opcode() {
    byte ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Opcode(swigCPtr);
    return ret;
  }

  public byte General_Flags() {
    byte ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_General_Flags(swigCPtr);
    return ret;
  }

  public void Set_General_Flags(int f) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Set_General_Flags(swigCPtr, f);
  }

  public int Pass(BStreamFileToolkit tk) {
    int ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Pass(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status Tag(BStreamFileToolkit tk, int variant) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Tag__SWIG_0(swigCPtr, BStreamFileToolkit.getCPtr(tk), variant);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status Tag(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Tag__SWIG_1(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Tagging(BStreamFileToolkit tk) {
    bool ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Tagging(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNeedsTag(bool n) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_SetNeedsTag(swigCPtr, n);
  }

  public bool NeedsTag() {
    bool ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_NeedsTag(swigCPtr);
    return ret;
  }

  public virtual TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BBaseOpcodeHandler_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool NeedsContext(BStreamFileToolkit tk) {
    bool ret = HCSBSTREAMPINVOKE.BBaseOpcodeHandler_NeedsContext(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLoggingString(string segment) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_SetLoggingString__SWIG_0(swigCPtr, segment);
  }

  public void SetLoggingString(int length) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_SetLoggingString__SWIG_1(swigCPtr, length);
  }

  public string GetLoggingString() {return HCSBSTREAMPINVOKE.BBaseOpcodeHandler_GetLoggingString__SWIG_0(swigCPtr);}

  public void LogDebug(BStreamFileToolkit tk, string arg1) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_LogDebug__SWIG_0(swigCPtr, BStreamFileToolkit.getCPtr(tk), arg1);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogDebug(BStreamFileToolkit tk) {
    HCSBSTREAMPINVOKE.BBaseOpcodeHandler_LogDebug__SWIG_1(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
  }

}
