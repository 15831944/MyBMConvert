/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif


public class TK_Text_Font : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  internal TK_Text_Font(IntPtr cPtr, bool cMemoryOwn) : base(HCSBSTREAMPINVOKE.TK_Text_FontUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TK_Text_Font obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Text_Font() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSBSTREAMPINVOKE.delete_TK_Text_Font(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Text_Font() : this(HCSBSTREAMPINVOKE.new_TK_Text_Font(), true) {
    SwigDirectorConnect();
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Text_Font)) ? HCSBSTREAMPINVOKE.TK_Text_Font_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSBSTREAMPINVOKE.TK_Text_Font_ReadSwigExplicitTK_Text_Font(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Text_Font)) ? HCSBSTREAMPINVOKE.TK_Text_Font_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSBSTREAMPINVOKE.TK_Text_Font_WriteSwigExplicitTK_Text_Font(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Text_Font)) ? HCSBSTREAMPINVOKE.TK_Text_Font_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HCSBSTREAMPINVOKE.TK_Text_Font_CloneSwigExplicitTK_Text_Font(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Text_Font_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Text_Font_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    if (this.GetType() == typeof(TK_Text_Font)) HCSBSTREAMPINVOKE.TK_Text_Font_Reset(swigCPtr); else HCSBSTREAMPINVOKE.TK_Text_Font_ResetSwigExplicitTK_Text_Font(swigCPtr);
  }

  public void SetMask(int m) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetMask(swigCPtr, m);
  }

  public int GetMask() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetMask(swigCPtr);
    return ret;
  }

  public void SetValue(int v) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetValue(swigCPtr, v);
  }

  public int GetValue() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetValue(swigCPtr);
    return ret;
  }

  public void SetNames(string names) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetNames__SWIG_0(swigCPtr, names);
  }

  public void SetNames(int length) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetNames__SWIG_1(swigCPtr, length);
  }

  public string GetNames() {return HCSBSTREAMPINVOKE.TK_Text_Font_GetNames__SWIG_0(swigCPtr);}

  public void SetSize(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetSize(swigCPtr, s);
  }

  public float GetSize() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetSize(swigCPtr);
    return ret;
  }

  public void SetSizeUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetSizeUnits(swigCPtr, u);
  }

  public int GetSizeUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetSizeUnits(swigCPtr);
    return ret;
  }

  public void SetTolerance(float t) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetTolerance(swigCPtr, t);
  }

  public float GetTolerance() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetTolerance(swigCPtr);
    return ret;
  }

  public void SetToleranceUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetToleranceUnits(swigCPtr, u);
  }

  public int GetToleranceUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetToleranceUnits(swigCPtr);
    return ret;
  }

  public void SetRotation(float r) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetRotation(swigCPtr, r);
  }

  public float GetRotation() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetRotation(swigCPtr);
    return ret;
  }

  public void SetSlant(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetSlant(swigCPtr, s);
  }

  public float GetSlant() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetSlant(swigCPtr);
    return ret;
  }

  public void SetWidthScale(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetWidthScale(swigCPtr, s);
  }

  public float GetWidthScale() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetWidthScale(swigCPtr);
    return ret;
  }

  public void SetExtraSpace(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetExtraSpace(swigCPtr, s);
  }

  public float GetExtraSpace() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetExtraSpace(swigCPtr);
    return ret;
  }

  public void SetExtraSpaceUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetExtraSpaceUnits(swigCPtr, u);
  }

  public int GetExtraSpaceUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetExtraSpaceUnits(swigCPtr);
    return ret;
  }

  public void SetLineSpacing(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetLineSpacing(swigCPtr, s);
  }

  public float GetLineSpacing() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetLineSpacing(swigCPtr);
    return ret;
  }

  public void SetTransforms(int t) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetTransforms(swigCPtr, t);
  }

  public int GetTransforms() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetTransforms(swigCPtr);
    return ret;
  }

  public void SetGreekingLimit(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetGreekingLimit(swigCPtr, s);
  }

  public float GetGreekingLimit() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetGreekingLimit(swigCPtr);
    return ret;
  }

  public void SetGreekingLimitUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetGreekingLimitUnits(swigCPtr, u);
  }

  public int GetGreekingLimitUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetGreekingLimitUnits(swigCPtr);
    return ret;
  }

  public void SetGreekingMode(int m) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetGreekingMode(swigCPtr, m);
  }

  public int GetGreekingMode() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetGreekingMode(swigCPtr);
    return ret;
  }

  public void SetRenderer(int r) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetRenderer(swigCPtr, r);
  }

  public int GetRenderer() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetRenderer(swigCPtr);
    return ret;
  }

  public void SetRenderers(int r1, int r2) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetRenderers(swigCPtr, r1, r2);
  }

  public IntPtr GetRenderers() {return HCSBSTREAMPINVOKE.TK_Text_Font_GetRenderers(swigCPtr);}

  public void SetRendererCutoff(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetRendererCutoff(swigCPtr, s);
  }

  public float GetRendererCutoff() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetRendererCutoff(swigCPtr);
    return ret;
  }

  public void SetRendererCutoffUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetRendererCutoffUnits(swigCPtr, u);
  }

  public int GetRendererCutoffUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetRendererCutoffUnits(swigCPtr);
    return ret;
  }

  public void SetPreference(int r) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetPreference(swigCPtr, r);
  }

  public int GetPreference() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetPreference(swigCPtr);
    return ret;
  }

  public void SetPreferences(int r1, int r2) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetPreferences(swigCPtr, r1, r2);
  }

  public IntPtr GetPreferences() {return HCSBSTREAMPINVOKE.TK_Text_Font_GetPreferences(swigCPtr);}

  public void SetPreferenceCutoff(float s) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetPreferenceCutoff(swigCPtr, s);
  }

  public float GetPreferenceCutoff() {
    float ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetPreferenceCutoff(swigCPtr);
    return ret;
  }

  public void SetPreferenceCutoffUnits(int u) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetPreferenceCutoffUnits(swigCPtr, u);
  }

  public int GetPreferenceCutoffUnits() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetPreferenceCutoffUnits(swigCPtr);
    return ret;
  }

  public void SetLayout(int l) {
    HCSBSTREAMPINVOKE.TK_Text_Font_SetLayout(swigCPtr, l);
  }

  public int GetLayout() {
    int ret = HCSBSTREAMPINVOKE.TK_Text_Font_GetLayout(swigCPtr);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTK_Text_Font_0(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTK_Text_Font_1(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTK_Text_Font_2(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTK_Text_Font_3(SwigDirectorInterpret__SWIG_0);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTK_Text_Font_4(SwigDirectorInterpret__SWIG_1);
    if (SwigDerivedClassHasMethod("Interpret_special", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTK_Text_Font_5(SwigDirectorInterpret_special);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTK_Text_Font_6(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("Match_Instance", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTK_Text_Font_7(SwigDirectorMatch_Instance);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTK_Text_Font_8(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("NeedsContext", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTK_Text_Font_9(SwigDirectorNeedsContext);
    HCSBSTREAMPINVOKE.TK_Text_Font_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TK_Text_Font));
    return hasDerivedMethod;
  }

  private int SwigDirectorRead(IntPtr tk) {
    return (int)Read(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorWrite(IntPtr tk) {
    return (int)Write(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorExecute(IntPtr tk) {
    return (int)Execute(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorInterpret__SWIG_0(IntPtr tk, int key, int variant) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key, variant);
  }

  private int SwigDirectorInterpret__SWIG_1(IntPtr tk, int key) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key);
  }

  private int SwigDirectorInterpret_special(IntPtr tk, int key, string special) {
    return (int)Interpret_special(new BStreamFileToolkit(tk, false), key, special);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorMatch_Instance(IntPtr tk, IntPtr instance) {
    return Match_Instance(new BStreamFileToolkit(tk, false), (instance == IntPtr.Zero) ? null : new Recorded_Instance(instance, false));
  }

  private int SwigDirectorClone(IntPtr tk, IntPtr handler) {
    return (int)Clone(new BStreamFileToolkit(tk, false), (handler == IntPtr.Zero) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false));
  }

  private bool SwigDirectorNeedsContext(IntPtr tk) {
    return NeedsContext(new BStreamFileToolkit(tk, false));
  }

  public delegate int SwigDelegateTK_Text_Font_0(IntPtr tk);
  public delegate int SwigDelegateTK_Text_Font_1(IntPtr tk);
  public delegate int SwigDelegateTK_Text_Font_2(IntPtr tk);
  public delegate int SwigDelegateTK_Text_Font_3(IntPtr tk, int key, int variant);
  public delegate int SwigDelegateTK_Text_Font_4(IntPtr tk, int key);
  public delegate int SwigDelegateTK_Text_Font_5(IntPtr tk, int key, string special);
  public delegate void SwigDelegateTK_Text_Font_6();
  public delegate bool SwigDelegateTK_Text_Font_7(IntPtr tk, IntPtr instance);
  public delegate int SwigDelegateTK_Text_Font_8(IntPtr tk, IntPtr handler);
  public delegate bool SwigDelegateTK_Text_Font_9(IntPtr tk);

  private SwigDelegateTK_Text_Font_0 swigDelegate0;
  private SwigDelegateTK_Text_Font_1 swigDelegate1;
  private SwigDelegateTK_Text_Font_2 swigDelegate2;
  private SwigDelegateTK_Text_Font_3 swigDelegate3;
  private SwigDelegateTK_Text_Font_4 swigDelegate4;
  private SwigDelegateTK_Text_Font_5 swigDelegate5;
  private SwigDelegateTK_Text_Font_6 swigDelegate6;
  private SwigDelegateTK_Text_Font_7 swigDelegate7;
  private SwigDelegateTK_Text_Font_8 swigDelegate8;
  private SwigDelegateTK_Text_Font_9 swigDelegate9;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(BStreamFileToolkit), typeof(int), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(BStreamFileToolkit), typeof(int) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(BStreamFileToolkit), typeof(int), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(BStreamFileToolkit), typeof(Recorded_Instance) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(BStreamFileToolkit), typeof(SWIGTYPE_p_p_BBaseOpcodeHandler) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(BStreamFileToolkit) };
}
