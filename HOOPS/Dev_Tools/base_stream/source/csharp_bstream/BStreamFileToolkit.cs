/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif


public class BStreamFileToolkit : BControlledMemoryObject {
  private HandleRef swigCPtr;

  internal BStreamFileToolkit(IntPtr cPtr, bool cMemoryOwn) : base(HCSBSTREAMPINVOKE.BStreamFileToolkitUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BStreamFileToolkit obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BStreamFileToolkit() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSBSTREAMPINVOKE.delete_BStreamFileToolkit(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BStreamFileToolkit() : this(HCSBSTREAMPINVOKE.new_BStreamFileToolkit(), true) {
  }

  public static bool SupportsAsciiMode() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_SupportsAsciiMode();
    return ret;
  }

  public TK_Status SetAsciiMode(bool whether) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_SetAsciiMode(swigCPtr, whether);
    return ret;
  }

  public bool GetAsciiMode() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetAsciiMode(swigCPtr);
    return ret;
  }

  public void SetTabs(int arg0) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetTabs(swigCPtr, arg0);
  }

  public int GetTabs() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetTabs(swigCPtr);
    return ret;
  }

  public static int ParseVersion(string block) {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_ParseVersion(block);
    return ret;
  }

  public TK_Status ParseBuffer(string b, int s, TK_Status mode) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_ParseBuffer__SWIG_0(swigCPtr, b, s, (int)mode);
    return ret;
  }

  public TK_Status ParseBuffer(string b, int s) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_ParseBuffer__SWIG_1(swigCPtr, b, s);
    return ret;
  }

  public TK_Status PrepareBuffer(byte[] b, int s) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_PrepareBuffer(swigCPtr, b, s);
    return ret;
  }

  public int CurrentBufferLength() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_CurrentBufferLength(swigCPtr);
    return ret;
  }

  public virtual void ActivateContext(int key) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ActivateContext(swigCPtr, key);
  }

  public virtual void DeactivateContext(int key) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_DeactivateContext(swigCPtr, key);
  }

  public virtual void NewFileContext(int key) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_NewFileContext(swigCPtr, key);
  }

  public int GeneratedSoFar() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GeneratedSoFar(swigCPtr);
    return ret;
  }

  public uint ObjectsSoFar() {
    uint ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_ObjectsSoFar(swigCPtr);
    return ret;
  }

  public void SetOpcodeHandler(int which, BBaseOpcodeHandler handler) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetOpcodeHandler(swigCPtr, which, BBaseOpcodeHandler.getCPtr(handler));
  }

  public void SetPrewalkHandler(BBaseOpcodeHandler handler) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetPrewalkHandler(swigCPtr, BBaseOpcodeHandler.getCPtr(handler));
  }

  public void SetPostwalkHandler(BBaseOpcodeHandler handler) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetPostwalkHandler(swigCPtr, BBaseOpcodeHandler.getCPtr(handler));
  }

  public BBaseOpcodeHandler GetOpcodeHandler(int which) {
    IntPtr cPtr = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetOpcodeHandler(swigCPtr, which);
    BBaseOpcodeHandler ret = (cPtr == IntPtr.Zero) ? null : new BBaseOpcodeHandler(cPtr, false);
    return ret;
  }

  public virtual void Restart() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_Restart(swigCPtr);
  }

  public TK_Status IndexToKey(int index, int[] key) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_IndexToKey(swigCPtr, index, key);
    return ret;
  }

  public TK_Status KeyToIndex(int key, int[] index) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_KeyToIndex(swigCPtr, key, index);
    return ret;
  }

  public TK_Status AddIndexKeyPair(int index, int key) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_AddIndexKeyPair(swigCPtr, index, key);
    return ret;
  }

  public TK_Status AddVariant(int key, int variant, int value1, int value2) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_AddVariant__SWIG_0(swigCPtr, key, variant, value1, value2);
    return ret;
  }

  public TK_Status AddVariant(int key, int variant, int value1) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_AddVariant__SWIG_1(swigCPtr, key, variant, value1);
    return ret;
  }

  public TK_Status AddBounds(int key, float[] bounds) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_AddBounds(swigCPtr, key, bounds);
    return ret;
  }

  public TK_Status GetOffset(int key, int variant, int[] offset) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetOffset__SWIG_0(swigCPtr, key, variant, offset);
    return ret;
  }

  public TK_Status GetOffset(int key, int variant, int[] offset, int[] length) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetOffset__SWIG_1(swigCPtr, key, variant, offset, length);
    return ret;
  }

  public TK_Status GetOffset(int key, int variant, int[] offset, int[] length, SWIGTYPE_p_wchar_t filename) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetOffset__SWIG_2(swigCPtr, key, variant, offset, length, SWIGTYPE_p_wchar_t.getCPtr(filename));
    return ret;
  }

  public TK_Status GetBounds(int key, float[] bounds) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetBounds(swigCPtr, key, bounds);
    return ret;
  }

  public int NextTagIndex() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_NextTagIndex(swigCPtr);
    return ret;
  }

  public int PeekTagIndex() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_PeekTagIndex(swigCPtr);
    return ret;
  }

  public void SetFilename(SWIGTYPE_p_wchar_t name) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetFilename(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(name));
  }

  public TK_Status Read_Stream_File() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_Read_Stream_File(swigCPtr);
    return ret;
  }

  public void SetNewFile(SWIGTYPE_p_wchar_t name) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNewFile(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(name));
  }

  public SWIGTYPE_p_wchar_t GetCurrentFile() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetCurrentFile__SWIG_0(swigCPtr);
    SWIGTYPE_p_wchar_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public void GetCurrentFile(SWIGTYPE_p_wchar_t filename) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_GetCurrentFile__SWIG_1(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(filename));
  }

  public TK_Status SelectFile(SWIGTYPE_p_wchar_t name) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_SelectFile(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(name));
    return ret;
  }

  public virtual TK_Status OpenFile(SWIGTYPE_p_wchar_t name, bool write) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_OpenFile__SWIG_0(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(name), write);
    return ret;
  }

  public virtual TK_Status OpenFile(SWIGTYPE_p_wchar_t name) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_OpenFile__SWIG_1(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(name));
    return ret;
  }

  public virtual TK_Status CloseFile() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_CloseFile(swigCPtr);
    return ret;
  }

  public virtual TK_Status ReadBuffer(byte[] buffer, int size, int[] amount_read) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_ReadBuffer(swigCPtr, buffer, size, amount_read);
    return ret;
  }

  public virtual TK_Status WriteBuffer(byte[] buffer, int size) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_WriteBuffer(swigCPtr, buffer, size);
    return ret;
  }

  public virtual TK_Status PositionFile(int offset) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_PositionFile(swigCPtr, offset);
    return ret;
  }

  public virtual TK_Status GetFileSize(uint[] size) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetFileSize(swigCPtr, size);
    return ret;
  }

  public virtual TK_Status LocateDictionary() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_LocateDictionary(swigCPtr);
    return ret;
  }

  public virtual TK_Status LocateEntity(int key, int variant) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_LocateEntity(swigCPtr, key, variant);
    return ret;
  }

  public int GetFlags() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetFlags(swigCPtr);
    return ret;
  }

  public void SetFlags(int flags) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetFlags(swigCPtr, flags);
  }

  public void SetWriteFlags(int flags) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetWriteFlags(swigCPtr, flags);
  }

  public int GetWriteFlags(int mask) {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetWriteFlags__SWIG_0(swigCPtr, mask);
    return ret;
  }

  public int GetWriteFlags() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetWriteFlags__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetReadFlags(int flags) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetReadFlags(swigCPtr, flags);
  }

  public int GetReadFlags(int mask) {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetReadFlags__SWIG_0(swigCPtr, mask);
    return ret;
  }

  public int GetReadFlags() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetReadFlags__SWIG_1(swigCPtr);
    return ret;
  }

  public int GetNumNormalBits() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetNumNormalBits(swigCPtr);
    return ret;
  }

  public void SetNumNormalBits(int numbits) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNumNormalBits(swigCPtr, numbits);
  }

  public int GetNumVertexBits() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetNumVertexBits(swigCPtr);
    return ret;
  }

  public void SetNumVertexBits(int numbits) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNumVertexBits(swigCPtr, numbits);
  }

  public int GetNumParameterBits() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetNumParameterBits(swigCPtr);
    return ret;
  }

  public void SetNumParameterBits(int numbits) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNumParameterBits(swigCPtr, numbits);
  }

  public int GetNumColorBits() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetNumColorBits(swigCPtr);
    return ret;
  }

  public void SetNumColorBits(int numbits) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNumColorBits(swigCPtr, numbits);
  }

  public int GetNumIndexBits() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetNumIndexBits(swigCPtr);
    return ret;
  }

  public void SetNumIndexBits(int numbits) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetNumIndexBits(swigCPtr, numbits);
  }

  public void SetJpegQuality(int quality) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetJpegQuality__SWIG_0(swigCPtr, quality);
  }

  public void SetJpegQuality() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetJpegQuality__SWIG_1(swigCPtr);
  }

  public int GetJpegQuality() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetJpegQuality(swigCPtr);
    return ret;
  }

  public int GetVersion() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetVersion(swigCPtr);
    return ret;
  }

  public void SetReadVersion(int version) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetReadVersion(swigCPtr, version);
  }

  public void SetTargetVersion(int version) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetTargetVersion(swigCPtr, version);
  }

  public int GetTargetVersion() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetTargetVersion(swigCPtr);
    return ret;
  }

  public uint GetFileOffset() {
    uint ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetFileOffset(swigCPtr);
    return ret;
  }

  public void SetFileOffset(uint offset) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetFileOffset(swigCPtr, offset);
  }

  public int Unused() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_Unused(swigCPtr);
    return ret;
  }

  public virtual TK_Status Error(string msg) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_Error__SWIG_0(swigCPtr, msg);
    return ret;
  }

  public virtual TK_Status Error() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_Error__SWIG_1(swigCPtr);
    return ret;
  }

  public string GetLogFile() {return HCSBSTREAMPINVOKE.BStreamFileToolkit_GetLogFile(swigCPtr);}

  public void SetLogFile(string filename) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLogFile__SWIG_0(swigCPtr, filename);
  }

  public void SetLogFile() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLogFile__SWIG_1(swigCPtr);
  }

  public bool GetLogging() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetLogging(swigCPtr);
    return ret;
  }

  public void SetLogging(bool setting) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLogging(swigCPtr, setting);
  }

  public uint GetLoggingOptions(uint mask) {
    uint ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetLoggingOptions__SWIG_0(swigCPtr, mask);
    return ret;
  }

  public uint GetLoggingOptions() {
    uint ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetLoggingOptions__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetLoggingOptions(uint options) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLoggingOptions__SWIG_0(swigCPtr, options);
  }

  public void SetLoggingOptions() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLoggingOptions__SWIG_1(swigCPtr);
  }

  public TK_Status OpenLogFile(string filename, string mode) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_OpenLogFile(swigCPtr, filename, mode);
    return ret;
  }

  public void LogEntry(SWIGTYPE_p_wchar_t arg0) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_LogEntry(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(arg0));
  }

  public void CloseLogFile() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_CloseLogFile(swigCPtr);
  }

  public uint NextOpcodeSequence() {
    uint ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_NextOpcodeSequence(swigCPtr);
    return ret;
  }

  public void SetOpcodeSequence(uint seq) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetOpcodeSequence__SWIG_0(swigCPtr, seq);
  }

  public void SetOpcodeSequence() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetOpcodeSequence__SWIG_1(swigCPtr);
  }

  public bool HeaderCommentSeen() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_HeaderCommentSeen(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_f_unsigned_long_unsigned_long_p_void__bool GetProgressCallback() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetProgressCallback(swigCPtr);
    SWIGTYPE_p_f_unsigned_long_unsigned_long_p_void__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_unsigned_long_unsigned_long_p_void__bool(cPtr, false);
    return ret;
  }

  public void SetProgressCallback(SWIGTYPE_p_f_unsigned_long_unsigned_long_p_void__bool cb) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetProgressCallback__SWIG_0(swigCPtr, SWIGTYPE_p_f_unsigned_long_unsigned_long_p_void__bool.getCPtr(cb));
  }

  public void SetProgressCallback() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetProgressCallback__SWIG_1(swigCPtr);
  }

  public SWIGTYPE_p_void GetProgressValue() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetProgressValue(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void SetProgressValue(SWIGTYPE_p_void value) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetProgressValue(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
  }

  public int GetBufferLimit() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetBufferLimit(swigCPtr);
    return ret;
  }

  public void SetBufferLimit(int limit) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetBufferLimit(swigCPtr, limit);
  }

  public void SetLastKey(int key) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetLastKey(swigCPtr, key);
  }

  public TK_Status AppendLastKey(int key) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_AppendLastKey(swigCPtr, key);
    return ret;
  }

  public void ClearLastKey() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ClearLastKey(swigCPtr);
  }

  public TK_Status GetLastKey(int[] key) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_GetLastKey(swigCPtr, key);
    return ret;
  }

  public void SetDictionaryFormat(int format, int options) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetDictionaryFormat__SWIG_0(swigCPtr, format, options);
  }

  public void SetDictionaryFormat(int format) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetDictionaryFormat__SWIG_1(swigCPtr, format);
  }

  public void SetDictionaryFormat() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetDictionaryFormat__SWIG_2(swigCPtr);
  }

  public int GetDictionaryFormat() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetDictionaryFormat(swigCPtr);
    return ret;
  }

  public int GetDictionaryOptions() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetDictionaryOptions(swigCPtr);
    return ret;
  }

  public void SetDictionaryOffset(int offset) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetDictionaryOffset(swigCPtr, offset);
  }

  public int GetDictionaryOffset() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetDictionaryOffset(swigCPtr);
    return ret;
  }

  public void SetDictionarySize(int size) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetDictionarySize(swigCPtr, size);
  }

  public int GetDictionarySize() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetDictionarySize(swigCPtr);
    return ret;
  }

  public void RecordPause(int offset) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_RecordPause(swigCPtr, offset);
  }

  public void ClearPauses() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ClearPauses(swigCPtr);
  }

  public int GetPauseCount() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetPauseCount(swigCPtr);
    return ret;
  }

  public IntPtr GetPauseTable() {return HCSBSTREAMPINVOKE.BStreamFileToolkit_GetPauseTable(swigCPtr);}

  public void SetFirstPause(int offset) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetFirstPause(swigCPtr, offset);
  }

  public int GetFirstPause() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetFirstPause(swigCPtr);
    return ret;
  }

  public int GetPosition() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetPosition(swigCPtr);
    return ret;
  }

  public void SetWorldBounding(float[] bbox) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetWorldBounding(swigCPtr, bbox);
  }

  public void SetWorldBoundingBySphere(float[] pt, float radius) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_SetWorldBoundingBySphere(swigCPtr, pt, radius);
  }

  public IntPtr GetWorldBounding() {return HCSBSTREAMPINVOKE.BStreamFileToolkit_GetWorldBounding(swigCPtr);}

  public bool AddExternalReference(SWIGTYPE_p_wchar_t arg0, int context) {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_AddExternalReference(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(arg0), context);
    return ret;
  }

  public bool NextExternalReference() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_NextExternalReference(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_wchar_t GetExternalReference() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetExternalReference__SWIG_0(swigCPtr);
    SWIGTYPE_p_wchar_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    return ret;
  }

  public void GetExternalReference(SWIGTYPE_p_wchar_t exref) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_GetExternalReference__SWIG_1(swigCPtr, SWIGTYPE_p_wchar_t.getCPtr(exref));
  }

  public int GetExternalReferenceContext() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetExternalReferenceContext(swigCPtr);
    return ret;
  }

  public virtual bool MatchPreviousExRef() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_MatchPreviousExRef(swigCPtr);
    return ret;
  }

  public void AddSegment(int key) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_AddSegment(swigCPtr, key);
  }

  public int RemoveSegment() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_RemoveSegment(swigCPtr);
    return ret;
  }

  public int CurrentSegment() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_CurrentSegment(swigCPtr);
    return ret;
  }

  public void ResetQuantizationError() {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ResetQuantizationError(swigCPtr);
  }

  public void ReportQuantizationError(float error) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ReportQuantizationError__SWIG_0(swigCPtr, error);
  }

  public void ReportQuantizationError(int bits_per_sample, float[] bounding, int num_dimensions) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ReportQuantizationError__SWIG_1(swigCPtr, bits_per_sample, bounding, num_dimensions);
  }

  public void ReportQuantizationError(int bits_per_sample, float[] bounding) {
    HCSBSTREAMPINVOKE.BStreamFileToolkit_ReportQuantizationError__SWIG_2(swigCPtr, bits_per_sample, bounding);
  }

  public float GetQuantizationError() {
    float ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GetQuantizationError(swigCPtr);
    return ret;
  }

  public TK_Status OpenGeometry() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_OpenGeometry(swigCPtr);
    return ret;
  }

  public TK_Status CloseGeometry() {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.BStreamFileToolkit_CloseGeometry(swigCPtr);
    return ret;
  }

  public bool GeometryIsOpen() {
    bool ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_GeometryIsOpen(swigCPtr);
    return ret;
  }

  public int RevisitKey() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_RevisitKey(swigCPtr);
    return ret;
  }

  public int RevisitOwner() {
    int ret = HCSBSTREAMPINVOKE.BStreamFileToolkit_RevisitOwner(swigCPtr);
    return ret;
  }

}
