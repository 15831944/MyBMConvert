/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif


public class HT_NURBS_Trim : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  internal HT_NURBS_Trim(IntPtr cPtr, bool cMemoryOwn) : base(HCSBSTREAMPINVOKE.HT_NURBS_TrimUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(HT_NURBS_Trim obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HT_NURBS_Trim() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSBSTREAMPINVOKE.delete_HT_NURBS_Trim(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void SetPoly(int count, float[] points) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetPoly__SWIG_0(swigCPtr, count, points);
  }

  public void SetPoly(int count) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetPoly__SWIG_1(swigCPtr, count);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start_u, float end_u) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_0(swigCPtr, degree, control_count, points, weights, knots, start_u, end_u);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start_u) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_1(swigCPtr, degree, control_count, points, weights, knots, start_u);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_2(swigCPtr, degree, control_count, points, weights, knots);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_3(swigCPtr, degree, control_count, points, weights);
  }

  public void SetCurve(int degree, int control_count, float[] points) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_4(swigCPtr, degree, control_count, points);
  }

  public void SetCurve(int degree, int control_count) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCurve__SWIG_5(swigCPtr, degree, control_count);
  }

  public void SetCollection() {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetCollection(swigCPtr);
  }

  public void SetOptions(int o) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetOptions(swigCPtr, o);
  }

  public void SetList(HT_NURBS_Trim node) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetList(swigCPtr, HT_NURBS_Trim.getCPtr(node));
  }

  public void SetNext(HT_NURBS_Trim next) {
    HCSBSTREAMPINVOKE.HT_NURBS_Trim_SetNext(swigCPtr, HT_NURBS_Trim.getCPtr(next));
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status read_collection_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_read_collection_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status write_collection_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.HT_NURBS_Trim_write_collection_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HT_NURBS_Trim GetNext() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetNext(swigCPtr);
    HT_NURBS_Trim ret = (cPtr == IntPtr.Zero) ? null : new HT_NURBS_Trim(cPtr, false);
    return ret;
  }

  public int GetTKType() {
    int ret = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetTKType(swigCPtr);
    return ret;
  }

  public int GetCount() {
    int ret = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetCount(swigCPtr);
    return ret;
  }

  public IntPtr GetPoints() {return HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetPoints__SWIG_0(swigCPtr);}

  public int GetDegree() {
    int ret = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetDegree(swigCPtr);
    return ret;
  }

  public int GetOptions() {
    int ret = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetOptions(swigCPtr);
    return ret;
  }

  public IntPtr GetWeights() {return HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetWeights__SWIG_0(swigCPtr);}

  public IntPtr GetKnots() {return HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetKnots__SWIG_0(swigCPtr);}

  public HT_NURBS_Trim GetList() {
    IntPtr cPtr = HCSBSTREAMPINVOKE.HT_NURBS_Trim_GetList__SWIG_0(swigCPtr);
    HT_NURBS_Trim ret = (cPtr == IntPtr.Zero) ? null : new HT_NURBS_Trim(cPtr, false);
    return ret;
  }

}
