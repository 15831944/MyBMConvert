/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;


#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif
public class  HCSBSTREAM {

    public static float[] ExtractFloatArray(IntPtr source, int count)
    {
        float[] array = new float[count];
        Marshal.Copy(source, array, 0, count);
        return array;
    }

    public static int[] ExtractIntArray(IntPtr source, int count)
    {
        int[] array = new int[count];
        Marshal.Copy(source, array, 0, count);
        return array;
    }

    public static T[] ExtractArray<T>(IntPtr source, int count)
    {   
        // This function can handle everything to two above can, but it copies elements one at a
        // time so it's not very efficient to use for copying raw floats or ints.
        Type type = typeof(T);
        int size = Marshal.SizeOf(type);
        T[] array = new T[count];

        IntPtr ptr = source;

        for (int i = 0; i < count; i++)
        {
            array[i] = (T)Marshal.PtrToStructure(ptr, type);
            ptr = new IntPtr((long)ptr + size);
        }

        return array;
    }

  public static TK_Status TK_Read_Stream_File(SWIGTYPE_p_wchar_t filename, BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Read_Stream_File__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(filename), BStreamFileToolkit.getCPtr(tk));
    return ret;
  }

  public static TK_Status TK_Read_Stream_File(SWIGTYPE_p_wchar_t filename, int flags) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Read_Stream_File__SWIG_1(SWIGTYPE_p_wchar_t.getCPtr(filename), flags);
    return ret;
  }

  public static TK_Status TK_Read_Stream_File(SWIGTYPE_p_wchar_t filename) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Read_Stream_File__SWIG_2(SWIGTYPE_p_wchar_t.getCPtr(filename));
    return ret;
  }

  public static void dprintf(string format) {
    HCSBSTREAMPINVOKE.dprintf(format);
  }

  public static void wcsstrcpy(SWIGTYPE_p_wchar_t dp, string sp) {
    HCSBSTREAMPINVOKE.wcsstrcpy(SWIGTYPE_p_wchar_t.getCPtr(dp), sp);
  }

  public static SWIGTYPE_p_wchar_t wcschr2(SWIGTYPE_p_wchar_t str, SWIGTYPE_p_wchar_t c1, SWIGTYPE_p_wchar_t c2) {
    IntPtr cPtr = HCSBSTREAMPINVOKE.wcschr2__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(str), SWIGTYPE_p_wchar_t.getCPtr(c1), SWIGTYPE_p_wchar_t.getCPtr(c2));
    SWIGTYPE_p_wchar_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_wchar_t wcsrchr2(SWIGTYPE_p_wchar_t str, SWIGTYPE_p_wchar_t c1, SWIGTYPE_p_wchar_t c2) {
    IntPtr cPtr = HCSBSTREAMPINVOKE.wcsrchr2__SWIG_0(SWIGTYPE_p_wchar_t.getCPtr(str), SWIGTYPE_p_wchar_t.getCPtr(c1), SWIGTYPE_p_wchar_t.getCPtr(c2));
    SWIGTYPE_p_wchar_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_wchar_t(cPtr, false);
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int TK_File_Format_Version = HCSBSTREAMPINVOKE.TK_File_Format_Version_get();
  public static readonly int TK_DEFAULT_BUFFER_SIZE = HCSBSTREAMPINVOKE.TK_DEFAULT_BUFFER_SIZE_get();
  public static readonly int STATUS_ERROR = HCSBSTREAMPINVOKE.STATUS_ERROR_get();
  public static readonly int STATUS_NORMAL = HCSBSTREAMPINVOKE.STATUS_NORMAL_get();
  public static readonly int CS_INVALID = HCSBSTREAMPINVOKE.CS_INVALID_get();
  public static readonly int CS_TRIVIAL = HCSBSTREAMPINVOKE.CS_TRIVIAL_get();
  public static readonly int CS_TRIVIAL_IMPLICIT = HCSBSTREAMPINVOKE.CS_TRIVIAL_IMPLICIT_get();
  public static readonly int CS_REPULSE = HCSBSTREAMPINVOKE.CS_REPULSE_get();
  public static readonly int CS_NONE = HCSBSTREAMPINVOKE.CS_NONE_get();
  public static readonly int CS_EDGEBREAKER = HCSBSTREAMPINVOKE.CS_EDGEBREAKER_get();
  public static readonly int CS_LINE_EXTEND = HCSBSTREAMPINVOKE.CS_LINE_EXTEND_get();
  public static readonly int CS_TRIVIAL_POLAR = HCSBSTREAMPINVOKE.CS_TRIVIAL_POLAR_get();
  public static readonly int MAXU10 = HCSBSTREAMPINVOKE.MAXU10_get();
  public static readonly int MAXV10 = HCSBSTREAMPINVOKE.MAXV10_get();
  public static readonly int MAXU8 = HCSBSTREAMPINVOKE.MAXU8_get();
  public static readonly int MAXV8 = HCSBSTREAMPINVOKE.MAXV8_get();
  public static readonly int EB_DEFAULT = HCSBSTREAMPINVOKE.EB_DEFAULT_get();
  public static readonly int HINT_ONE_PIECE = HCSBSTREAMPINVOKE.HINT_ONE_PIECE_get();
  public static readonly int HINT_WATERTIGHT = HCSBSTREAMPINVOKE.HINT_WATERTIGHT_get();
  public static readonly int HINT_MANIFOLD = HCSBSTREAMPINVOKE.HINT_MANIFOLD_get();
  public static readonly int HINT_NO_HANDLES = HCSBSTREAMPINVOKE.HINT_NO_HANDLES_get();
  public static readonly int HINT_NO_BACKWARDS_OR_HOLES = HCSBSTREAMPINVOKE.HINT_NO_BACKWARDS_OR_HOLES_get();
  public static readonly int HINT_INPUT_BY_TRISTRIPS = HCSBSTREAMPINVOKE.HINT_INPUT_BY_TRISTRIPS_get();
  public static readonly int STATUS_COMPLETE = HCSBSTREAMPINVOKE.STATUS_COMPLETE_get();
  public static readonly int STATUS_WATERTIGHT = HCSBSTREAMPINVOKE.STATUS_WATERTIGHT_get();
  public static readonly int STATUS_TRY_AGAIN = HCSBSTREAMPINVOKE.STATUS_TRY_AGAIN_get();
  public static readonly int MTABLE_HAS_LENGTHS = HCSBSTREAMPINVOKE.MTABLE_HAS_LENGTHS_get();
  public static readonly int MTABLE_HAS_M2STACKOFFSETS = HCSBSTREAMPINVOKE.MTABLE_HAS_M2STACKOFFSETS_get();
  public static readonly int MTABLE_HAS_M2GATEOFFSETS = HCSBSTREAMPINVOKE.MTABLE_HAS_M2GATEOFFSETS_get();
  public static readonly int MTABLE_HAS_DUMMIES = HCSBSTREAMPINVOKE.MTABLE_HAS_DUMMIES_get();
  public static readonly int MTABLE_HAS_PATCHES = HCSBSTREAMPINVOKE.MTABLE_HAS_PATCHES_get();
  public static readonly int MTABLE_HAS_BOUNDING = HCSBSTREAMPINVOKE.MTABLE_HAS_BOUNDING_get();
  public static readonly int MTABLE_HAS_QUANTIZATION = HCSBSTREAMPINVOKE.MTABLE_HAS_QUANTIZATION_get();
  public static readonly int MTABLE_HAS_QUANTIZATION_NORMALS = HCSBSTREAMPINVOKE.MTABLE_HAS_QUANTIZATION_NORMALS_get();
  public static readonly int CASE_C = HCSBSTREAMPINVOKE.CASE_C_get();
  public static readonly int CASE_L = HCSBSTREAMPINVOKE.CASE_L_get();
  public static readonly int CASE_E = HCSBSTREAMPINVOKE.CASE_E_get();
  public static readonly int CASE_R = HCSBSTREAMPINVOKE.CASE_R_get();
  public static readonly int CASE_S = HCSBSTREAMPINVOKE.CASE_S_get();
  public static readonly int CASE_M = HCSBSTREAMPINVOKE.CASE_M_get();
  public static readonly int CASE_M2 = HCSBSTREAMPINVOKE.CASE_M2_get();
  public static readonly double BIG_FLOAT = HCSBSTREAMPINVOKE.BIG_FLOAT_get();
  public static readonly int DEFAULT_QUANTIZATION = HCSBSTREAMPINVOKE.DEFAULT_QUANTIZATION_get();
  public static readonly double DEFAULT_POINT_FACTOR = HCSBSTREAMPINVOKE.DEFAULT_POINT_FACTOR_get();
  public static readonly int DEFAULT_HINTS = HCSBSTREAMPINVOKE.DEFAULT_HINTS_get();
  public static readonly int POINTSIZE = HCSBSTREAMPINVOKE.POINTSIZE_get();
  public static readonly int TKLOD_ESCAPE = HCSBSTREAMPINVOKE.TKLOD_ESCAPE_get();
  public static readonly int NC_HAS_WEIGHTS = HCSBSTREAMPINVOKE.NC_HAS_WEIGHTS_get();
  public static readonly int NC_HAS_KNOTS = HCSBSTREAMPINVOKE.NC_HAS_KNOTS_get();
  public static readonly int NC_HAS_START = HCSBSTREAMPINVOKE.NC_HAS_START_get();
  public static readonly int NC_HAS_END = HCSBSTREAMPINVOKE.NC_HAS_END_get();
  public static readonly int NS_HAS_WEIGHTS = HCSBSTREAMPINVOKE.NS_HAS_WEIGHTS_get();
  public static readonly int NS_HAS_KNOTS = HCSBSTREAMPINVOKE.NS_HAS_KNOTS_get();
  public static readonly int NS_HAS_TRIMS = HCSBSTREAMPINVOKE.NS_HAS_TRIMS_get();
  public static readonly int NS_TRIM_END = HCSBSTREAMPINVOKE.NS_TRIM_END_get();
  public static readonly int NS_TRIM_POLY = HCSBSTREAMPINVOKE.NS_TRIM_POLY_get();
  public static readonly int NS_TRIM_CURVE = HCSBSTREAMPINVOKE.NS_TRIM_CURVE_get();
  public static readonly int NS_TRIM_COLLECTION = HCSBSTREAMPINVOKE.NS_TRIM_COLLECTION_get();
  public static readonly int NS_TRIM_LAST_KNOWN_TYPE = HCSBSTREAMPINVOKE.NS_TRIM_LAST_KNOWN_TYPE_get();
  public static readonly int NS_TRIM_KEEP = HCSBSTREAMPINVOKE.NS_TRIM_KEEP_get();
  public static readonly int NS_TRIM_HAS_WEIGHTS = HCSBSTREAMPINVOKE.NS_TRIM_HAS_WEIGHTS_get();
  public static readonly int NS_TRIM_HAS_KNOTS = HCSBSTREAMPINVOKE.NS_TRIM_HAS_KNOTS_get();
  public static readonly int TKPP_X_2D_MASK = HCSBSTREAMPINVOKE.TKPP_X_2D_MASK_get();
  public static readonly int TKPP_Y_2D_MASK = HCSBSTREAMPINVOKE.TKPP_Y_2D_MASK_get();
  public static readonly int TKPP_Z_2D_MASK = HCSBSTREAMPINVOKE.TKPP_Z_2D_MASK_get();
  public static readonly int TKPP_ANY_2D_MASK = HCSBSTREAMPINVOKE.TKPP_ANY_2D_MASK_get();
  public static readonly int TKPP_EXPLICIT_PRIMITIVE_MASK = HCSBSTREAMPINVOKE.TKPP_EXPLICIT_PRIMITIVE_MASK_get();
}
