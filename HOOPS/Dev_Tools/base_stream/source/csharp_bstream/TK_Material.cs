/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
#else
using HLONG = System.Int32;
#endif


public class TK_Material : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  internal TK_Material(IntPtr cPtr, bool cMemoryOwn) : base(HCSBSTREAMPINVOKE.TK_MaterialUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TK_Material obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Material() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSBSTREAMPINVOKE.delete_TK_Material(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Material() : this(HCSBSTREAMPINVOKE.new_TK_Material(), true) {
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler));
    if (HCSBSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSBSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    HCSBSTREAMPINVOKE.TK_Material_Reset(swigCPtr);
  }

  public TK_Status PushUserData(string buffer, int buffer_size, bool tally_total_size) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_PushUserData__SWIG_0(swigCPtr, buffer, buffer_size, tally_total_size);
    return ret;
  }

  public TK_Status PushUserData(string buffer, int buffer_size) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_PushUserData__SWIG_1(swigCPtr, buffer, buffer_size);
    return ret;
  }

  public TK_Status GetBlock(SWIGTYPE_p_p_char ptr, int[] buffer_size) {
    TK_Status ret = (TK_Status)HCSBSTREAMPINVOKE.TK_Material_GetBlock(swigCPtr, SWIGTYPE_p_p_char.getCPtr(ptr), buffer_size);
    return ret;
  }

}
