/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Cylinder extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Cylinder(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_CylinderUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Cylinder obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Cylinder(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Cylinder_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Cylinder_change_ownership(this, swigCPtr, true);
  }

  protected void setM_axis(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Cylinder_m_axis_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_axis() {
    long cPtr = HJSTREAMJNI.TK_Cylinder_m_axis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_radius(float value) {
    HJSTREAMJNI.TK_Cylinder_m_radius_set(swigCPtr, this, value);
  }

  protected float getM_radius() {
    return HJSTREAMJNI.TK_Cylinder_m_radius_get(swigCPtr, this);
  }

  protected void setM_daxis(SWIGTYPE_p_double value) {
    HJSTREAMJNI.TK_Cylinder_m_daxis_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  protected SWIGTYPE_p_double getM_daxis() {
    long cPtr = HJSTREAMJNI.TK_Cylinder_m_daxis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  protected void setM_dradius(double value) {
    HJSTREAMJNI.TK_Cylinder_m_dradius_set(swigCPtr, this, value);
  }

  protected double getM_dradius() {
    return HJSTREAMJNI.TK_Cylinder_m_dradius_get(swigCPtr, this);
  }

  protected void setM_flags(short value) {
    HJSTREAMJNI.TK_Cylinder_m_flags_set(swigCPtr, this, value);
  }

  protected short getM_flags() {
    return HJSTREAMJNI.TK_Cylinder_m_flags_get(swigCPtr, this);
  }

  public TK_Cylinder() {
    this(HJSTREAMJNI.new_TK_Cylinder(), true);
    HJSTREAMJNI.TK_Cylinder_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Cylinder.class) ? HJSTREAMJNI.TK_Cylinder_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Cylinder_ReadSwigExplicitTK_Cylinder(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Cylinder.class) ? HJSTREAMJNI.TK_Cylinder_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Cylinder_WriteSwigExplicitTK_Cylinder(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Cylinder.class) ? HJSTREAMJNI.TK_Cylinder_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Cylinder_CloneSwigExplicitTK_Cylinder(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Cylinder_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Cylinder_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void SetAxis(float x1, float y1, float z1, float x2, float y2, float z2) {
    HJSTREAMJNI.TK_Cylinder_SetAxis__SWIG_0(swigCPtr, this, x1, y1, z1, x2, y2, z2);
  }

  public void SetAxis(float[] s, float[] e) {
    HJSTREAMJNI.TK_Cylinder_SetAxis__SWIG_1(swigCPtr, this, s, e);
  }

  public void SetAxis(float[] a) {
    HJSTREAMJNI.TK_Cylinder_SetAxis__SWIG_2(swigCPtr, this, a);
  }

  public void SetRadius(float r) {
    HJSTREAMJNI.TK_Cylinder_SetRadius(swigCPtr, this, r);
  }

  public float GetRadius() {
    return HJSTREAMJNI.TK_Cylinder_GetRadius(swigCPtr, this);
  }

  public void SetDAxis(double x1, double y1, double z1, double x2, double y2, double z2) {
    HJSTREAMJNI.TK_Cylinder_SetDAxis__SWIG_0(swigCPtr, this, x1, y1, z1, x2, y2, z2);
  }

  public void SetDAxis(double[] s, double[] e) {
    HJSTREAMJNI.TK_Cylinder_SetDAxis__SWIG_1(swigCPtr, this, s, e);
  }

  public void SetDAxis(double[] a) {
    HJSTREAMJNI.TK_Cylinder_SetDAxis__SWIG_2(swigCPtr, this, a);
  }

  public double[] GetDAxis() {return HJSTREAMJNI.TK_Cylinder_GetDAxis(swigCPtr, this);}

  public double[] GetDStart() {return HJSTREAMJNI.TK_Cylinder_GetDStart(swigCPtr, this);}

  public double[] GetDEnd() {return HJSTREAMJNI.TK_Cylinder_GetDEnd(swigCPtr, this);}

  public void SetDRadius(double r) {
    HJSTREAMJNI.TK_Cylinder_SetDRadius(swigCPtr, this, r);
  }

  public double GetDRadius() {
    return HJSTREAMJNI.TK_Cylinder_GetDRadius(swigCPtr, this);
  }

  public void SetCaps(int f) {
    HJSTREAMJNI.TK_Cylinder_SetCaps(swigCPtr, this, f);
  }

  public int GetCaps() {
    return HJSTREAMJNI.TK_Cylinder_GetCaps(swigCPtr, this);
  }

  public final static class Capping_Options {
    public final static Capping_Options TKCYL_NONE = new Capping_Options("TKCYL_NONE", HJSTREAMJNI.TK_Cylinder_TKCYL_NONE_get());
    public final static Capping_Options TKCYL_FIRST = new Capping_Options("TKCYL_FIRST", HJSTREAMJNI.TK_Cylinder_TKCYL_FIRST_get());
    public final static Capping_Options TKCYL_SECOND = new Capping_Options("TKCYL_SECOND", HJSTREAMJNI.TK_Cylinder_TKCYL_SECOND_get());
    public final static Capping_Options TKCYL_BOTH = new Capping_Options("TKCYL_BOTH", HJSTREAMJNI.TK_Cylinder_TKCYL_BOTH_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Capping_Options swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Capping_Options.class + " with value " + swigValue);
    }

    private Capping_Options(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Capping_Options(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Capping_Options(String swigName, Capping_Options swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Capping_Options[] swigValues = { TKCYL_NONE, TKCYL_FIRST, TKCYL_SECOND, TKCYL_BOTH };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
