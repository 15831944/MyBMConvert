/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_LOD extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_LOD(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_LODUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_LOD obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_LOD(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_LOD_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_LOD_change_ownership(this, swigCPtr, true);
  }

  protected void setM_primitives(SWIGTYPE_p_p_p_BBaseOpcodeHandler value) {
    HJSTREAMJNI.TK_LOD_m_primitives_set(swigCPtr, this, SWIGTYPE_p_p_p_BBaseOpcodeHandler.getCPtr(value));
  }

  protected SWIGTYPE_p_p_p_BBaseOpcodeHandler getM_primitives() {
    long cPtr = HJSTREAMJNI.TK_LOD_m_primitives_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_p_BBaseOpcodeHandler(cPtr, false);
  }

  protected void setM_highest_level(int value) {
    HJSTREAMJNI.TK_LOD_m_highest_level_set(swigCPtr, this, value);
  }

  protected int getM_highest_level() {
    return HJSTREAMJNI.TK_LOD_m_highest_level_get(swigCPtr, this);
  }

  protected void setM_levels_allocated(int value) {
    HJSTREAMJNI.TK_LOD_m_levels_allocated_set(swigCPtr, this, value);
  }

  protected int getM_levels_allocated() {
    return HJSTREAMJNI.TK_LOD_m_levels_allocated_get(swigCPtr, this);
  }

  protected void setM_substage(int value) {
    HJSTREAMJNI.TK_LOD_m_substage_set(swigCPtr, this, value);
  }

  protected int getM_substage() {
    return HJSTREAMJNI.TK_LOD_m_substage_get(swigCPtr, this);
  }

  protected void setM_current_working(SWIGTYPE_p_vlist_s value) {
    HJSTREAMJNI.TK_LOD_m_current_working_set(swigCPtr, this, SWIGTYPE_p_vlist_s.getCPtr(value));
  }

  protected SWIGTYPE_p_vlist_s getM_current_working() {
    long cPtr = HJSTREAMJNI.TK_LOD_m_current_working_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_vlist_s(cPtr, false);
  }

  protected void setM_current_level(int value) {
    HJSTREAMJNI.TK_LOD_m_current_level_set(swigCPtr, this, value);
  }

  protected int getM_current_level() {
    return HJSTREAMJNI.TK_LOD_m_current_level_get(swigCPtr, this);
  }

  protected TK_Status ReadOneList(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_LOD_ReadOneList(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_LOD() {
    this(HJSTREAMJNI.new_TK_LOD(), true);
    HJSTREAMJNI.TK_LOD_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_LOD.class) ? HJSTREAMJNI.TK_LOD_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_LOD_ReadSwigExplicitTK_LOD(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_LOD.class) ? HJSTREAMJNI.TK_LOD_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_LOD_WriteSwigExplicitTK_LOD(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_LOD.class) ? HJSTREAMJNI.TK_LOD_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_LOD_CloneSwigExplicitTK_LOD(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_LOD_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_LOD_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_LOD.class) HJSTREAMJNI.TK_LOD_Reset(swigCPtr, this); else HJSTREAMJNI.TK_LOD_ResetSwigExplicitTK_LOD(swigCPtr, this);
  }

}
