/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

class HJSTREAMJNI {

  static  {System.loadLibrary("hjstream2120");}

  public final static native void ReleaseBuffer(byte[] jarg1, int jarg2);
  public final static native int PrepareBuffer(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3);
  public final static native int TK_File_Format_Version_get();
  public final static native int TK_DEFAULT_BUFFER_SIZE_get();
  public final static native int TK_Normal_get();
  public final static native int TK_Error_get();
  public final static native int TK_Pause_get();
  public final static native int TK_Single_get();
  public final static native int TK_Pending_get();
  public final static native int TK_Revisit_get();
  public final static native int TK_Complete_get();
  public final static native int TK_Version_get();
  public final static native int TK_NotFound_get();
  public final static native int TK_Abort_get();
  public final static native int TK_LibraryNotFound_get();
  public final static native int TK_Suppress_LOD_get();
  public final static native int TK_Full_Resolution_Vertices_get();
  public final static native int TK_Full_Resolution_Normals_get();
  public final static native int TK_First_LOD_Is_Bounding_Box_get();
  public final static native int TK_Force_Tags_get();
  public final static native int TK_Disable_Priority_Heuristic_get();
  public final static native int TK_Disable_Global_Compression_get();
  public final static native int TK_Disable_Instancing_get();
  public final static native int TK_Generate_Dictionary_get();
  public final static native int TK_Connectivity_Compression_get();
  public final static native int TK_Disable_Tristrips_get();
  public final static native int TK_Disable_Compound_Primitives_get();
  public final static native int TK_Global_Quantization_get();
  public final static native int TK_Full_Resolution_Parameters_get();
  public final static native int TK_Full_Resolution_Colors_get();
  public final static native int TK_Full_Resolution_Index_Colors_get();
  public final static native int TK_Communicator_Mode_get();
  public final static native int TK_Full_Resolution_get();
  public final static native int TK_Dictionary_Bounding_Volumes_get();
  public final static native int TK_Flag_Unhandled_Opcodes_get();
  public final static native int TK_Ignore_Version_get();
  public final static native int TK_Skip_External_References_get();
  public final static native int TK_Ignore_Bounding_LODs_get();
  public final static native int TK_Disable_Deferal_get();
  public final static native int TK_Logging_Sequence_get();
  public final static native int TK_Logging_Tagging_get();
  public final static native int TK_Logging_Segment_Names_get();
  public final static native int TK_Double_Precision_get();
  public final static native int TK_Has_Condition_get();
  public final static native int TK_Has_Filter_get();
  public final static native int TK_Read_Stream_File__SWIG_0(String jarg1, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Read_Stream_File__SWIG_1(String jarg1, int jarg2);
  public final static native int TK_Read_Stream_File__SWIG_2(String jarg1);
  public final static native long new_BControlledMemoryObject();
  public final static native void delete_BControlledMemoryObject(long jarg1);
  public final static native long new_Internal_Data_Accumulator();
  public final static native void delete_Internal_Data_Accumulator(long jarg1);
  public final static native void Internal_Data_Accumulator_set_data(long jarg1, Internal_Data_Accumulator jarg1_, byte[] jarg2, int jarg3);
  public final static native void Internal_Data_Accumulator_save(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_consume(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_read(long jarg1, Internal_Data_Accumulator jarg1_, byte[] jarg2, int jarg3);
  public final static native int Internal_Data_Accumulator_write(long jarg1, Internal_Data_Accumulator jarg1_, String jarg2, int jarg3);
  public final static native int Internal_Data_Accumulator_lookat(long jarg1, Internal_Data_Accumulator jarg1_, byte[] jarg2);
  public final static native int Internal_Data_Accumulator_get_original_buffer_size(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native void Internal_Data_Accumulator_restart(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native void Internal_Data_Accumulator_clean(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_unused(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_generated(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_start_compression(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_stop_compression(long jarg1, Internal_Data_Accumulator jarg1_, boolean jarg2);
  public final static native int Internal_Data_Accumulator_start_decompression(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_stop_decompression(long jarg1, Internal_Data_Accumulator jarg1_, boolean jarg2);
  public final static native boolean Internal_Data_Accumulator_compressed(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native int Internal_Data_Accumulator_error__SWIG_0(long jarg1, Internal_Data_Accumulator jarg1_, String jarg2);
  public final static native int Internal_Data_Accumulator_error__SWIG_1(long jarg1, Internal_Data_Accumulator jarg1_);
  public final static native void IT_Index_Key_Extra_m_variants_set(long jarg1, IT_Index_Key_Extra jarg1_, long jarg2);
  public final static native long IT_Index_Key_Extra_m_variants_get(long jarg1, IT_Index_Key_Extra jarg1_);
  public final static native void IT_Index_Key_Extra_m_options_set(long jarg1, IT_Index_Key_Extra jarg1_, int jarg2);
  public final static native int IT_Index_Key_Extra_m_options_get(long jarg1, IT_Index_Key_Extra jarg1_);
  public final static native void IT_Index_Key_Extra_m_bounds_set(long jarg1, IT_Index_Key_Extra jarg1_, long jarg2);
  public final static native long IT_Index_Key_Extra_m_bounds_get(long jarg1, IT_Index_Key_Extra jarg1_);
  public final static native long new_IT_Index_Key_Extra();
  public final static native void delete_IT_Index_Key_Extra(long jarg1);
  public final static native long new_Internal_Translator();
  public final static native void delete_Internal_Translator(long jarg1);
  public final static native int Internal_Translator_add_pair(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3);
  public final static native int Internal_Translator_add_variant__SWIG_0(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int Internal_Translator_add_variant__SWIG_1(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int Internal_Translator_add_bounds(long jarg1, Internal_Translator jarg1_, int jarg2, float[] jarg3);
  public final static native int Internal_Translator_index_to_key(long jarg1, Internal_Translator jarg1_, int jarg2, int[] jarg3);
  public final static native int Internal_Translator_key_to_index(long jarg1, Internal_Translator jarg1_, int jarg2, int[] jarg3);
  public final static native int Internal_Translator_key_variant_offset__SWIG_0(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3, int[] jarg4, int[] jarg5, int[] jarg6);
  public final static native int Internal_Translator_key_bounds(long jarg1, Internal_Translator jarg1_, int jarg2, float[] jarg3);
  public final static native int Internal_Translator_used(long jarg1, Internal_Translator jarg1_);
  public final static native void Internal_Translator_clean(long jarg1, Internal_Translator jarg1_);
  public final static native int Internal_Translator_key_variant_offset__SWIG_1(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3, int[] jarg4);
  public final static native int Internal_Translator_key_variant_offset__SWIG_2(long jarg1, Internal_Translator jarg1_, int jarg2, int jarg3, int[] jarg4, int[] jarg5);
  public final static native long new_Internal_Key_Record();
  public final static native void delete_Internal_Key_Record(long jarg1);
  public final static native int Internal_Key_Record_add_key(long jarg1, Internal_Key_Record jarg1_, int jarg2);
  public final static native int Internal_Key_Record_find_key(long jarg1, Internal_Key_Record jarg1_, int jarg2);
  public final static native void Internal_Key_Record_clean(long jarg1, Internal_Key_Record jarg1_);
  public final static native void Internal_Segment_List_m_next_set(long jarg1, Internal_Segment_List jarg1_, long jarg2, Internal_Segment_List jarg2_);
  public final static native long Internal_Segment_List_m_next_get(long jarg1, Internal_Segment_List jarg1_);
  public final static native void Internal_Segment_List_m_key_set(long jarg1, Internal_Segment_List jarg1_, int jarg2);
  public final static native int Internal_Segment_List_m_key_get(long jarg1, Internal_Segment_List jarg1_);
  public final static native long new_Internal_Segment_List(int jarg1);
  public final static native int Internal_Segment_List_key(long jarg1, Internal_Segment_List jarg1_);
  public final static native void delete_Internal_Segment_List(long jarg1);
  public final static native void Internal_Revisit_Item_m_next_set(long jarg1, Internal_Revisit_Item jarg1_, long jarg2, Internal_Revisit_Item jarg2_);
  public final static native long Internal_Revisit_Item_m_next_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_key_set(long jarg1, Internal_Revisit_Item jarg1_, int jarg2);
  public final static native int Internal_Revisit_Item_m_key_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_owner_set(long jarg1, Internal_Revisit_Item jarg1_, int jarg2);
  public final static native int Internal_Revisit_Item_m_owner_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_lod_set(long jarg1, Internal_Revisit_Item jarg1_, int jarg2);
  public final static native int Internal_Revisit_Item_m_lod_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_priority_set(long jarg1, Internal_Revisit_Item jarg1_, float jarg2);
  public final static native float Internal_Revisit_Item_m_priority_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_opcode_set(long jarg1, Internal_Revisit_Item jarg1_, char jarg2);
  public final static native char Internal_Revisit_Item_m_opcode_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native void Internal_Revisit_Item_m_force_context_set(long jarg1, Internal_Revisit_Item jarg1_, boolean jarg2);
  public final static native boolean Internal_Revisit_Item_m_force_context_get(long jarg1, Internal_Revisit_Item jarg1_);
  public final static native long new_Internal_Revisit_Item();
  public final static native void delete_Internal_Revisit_Item(long jarg1);
  public final static native void Recorded_Instance_m_next_set(long jarg1, Recorded_Instance jarg1_, long jarg2, Recorded_Instance jarg2_);
  public final static native long Recorded_Instance_m_next_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_key_set(long jarg1, Recorded_Instance jarg1_, int jarg2);
  public final static native int Recorded_Instance_m_key_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_variant_set(long jarg1, Recorded_Instance jarg1_, int jarg2);
  public final static native int Recorded_Instance_m_variant_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_values_set(long jarg1, Recorded_Instance jarg1_, long jarg2);
  public final static native long Recorded_Instance_m_values_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_local_basis_set(long jarg1, Recorded_Instance jarg1_, long jarg2);
  public final static native long Recorded_Instance_m_local_basis_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_basis_indices_set(long jarg1, Recorded_Instance jarg1_, long jarg2);
  public final static native long Recorded_Instance_m_basis_indices_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_arbitrary_point_set(long jarg1, Recorded_Instance jarg1_, long jarg2);
  public final static native long Recorded_Instance_m_arbitrary_point_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_arbitrary_index_set(long jarg1, Recorded_Instance jarg1_, int jarg2);
  public final static native int Recorded_Instance_m_arbitrary_index_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_basis_valid_set(long jarg1, Recorded_Instance jarg1_, boolean jarg2);
  public final static native boolean Recorded_Instance_m_basis_valid_get(long jarg1, Recorded_Instance jarg1_);
  public final static native void Recorded_Instance_m_opcode_set(long jarg1, Recorded_Instance jarg1_, short jarg2);
  public final static native short Recorded_Instance_m_opcode_get(long jarg1, Recorded_Instance jarg1_);
  public final static native long new_Recorded_Instance(int jarg1, int jarg2, short jarg3, int jarg4, int jarg5, int jarg6);
  public final static native boolean Recorded_Instance_basis_valid(long jarg1, Recorded_Instance jarg1_);
  public final static native boolean Recorded_Instance_generate_basis(long jarg1, Recorded_Instance jarg1_, int jarg2, float[] jarg3);
  public final static native void delete_Recorded_Instance(long jarg1);
  public final static native long new_BStreamFileToolkit();
  public final static native void delete_BStreamFileToolkit(long jarg1);
  public final static native boolean BStreamFileToolkit_SupportsAsciiMode();
  public final static native int BStreamFileToolkit_SetAsciiMode(long jarg1, BStreamFileToolkit jarg1_, boolean jarg2);
  public final static native boolean BStreamFileToolkit_GetAsciiMode(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetTabs(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetTabs(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_ParseVersion(String jarg1);
  public final static native int BStreamFileToolkit_PrepareBuffer(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3);
  public final static native int BStreamFileToolkit_CurrentBufferLength(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_ActivateContext(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_DeactivateContext(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_NewFileContext(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GeneratedSoFar(long jarg1, BStreamFileToolkit jarg1_);
  public final static native long BStreamFileToolkit_ObjectsSoFar(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetOpcodeHandler(long jarg1, BStreamFileToolkit jarg1_, int jarg2, long jarg3, BBaseOpcodeHandler jarg3_);
  public final static native void BStreamFileToolkit_SetPrewalkHandler(long jarg1, BStreamFileToolkit jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native void BStreamFileToolkit_SetPostwalkHandler(long jarg1, BStreamFileToolkit jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long BStreamFileToolkit_GetOpcodeHandler(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_Restart(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_IndexToKey(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int[] jarg3);
  public final static native int BStreamFileToolkit_KeyToIndex(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int[] jarg3);
  public final static native int BStreamFileToolkit_AddIndexKeyPair(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3);
  public final static native int BStreamFileToolkit_AddVariant__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int BStreamFileToolkit_AddVariant__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int BStreamFileToolkit_AddBounds(long jarg1, BStreamFileToolkit jarg1_, int jarg2, float[] jarg3);
  public final static native int BStreamFileToolkit_GetOffset__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3, int[] jarg4);
  public final static native int BStreamFileToolkit_GetOffset__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3, int[] jarg4, int[] jarg5);
  public final static native int BStreamFileToolkit_GetOffset__SWIG_2(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3, int[] jarg4, int[] jarg5, long jarg6);
  public final static native int BStreamFileToolkit_GetBounds(long jarg1, BStreamFileToolkit jarg1_, int jarg2, float[] jarg3);
  public final static native int BStreamFileToolkit_NextTagIndex(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_PeekTagIndex(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetFilename(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native int BStreamFileToolkit_Read_Stream_File(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNewFile(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native String BStreamFileToolkit_GetCurrentFile__SWIG_0(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_GetCurrentFile__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native int BStreamFileToolkit_SelectFile(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native int BStreamFileToolkit_OpenFile__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, String jarg2, boolean jarg3);
  public final static native int BStreamFileToolkit_OpenFile__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native int BStreamFileToolkit_CloseFile(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_ReadBuffer(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3, int[] jarg4);
  public final static native int BStreamFileToolkit_WriteBuffer(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3);
  public final static native int BStreamFileToolkit_PositionFile(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetFileSize(long jarg1, BStreamFileToolkit jarg1_, long[] jarg2);
  public final static native int BStreamFileToolkit_LocateDictionary(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_LocateEntity(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3);
  public final static native int BStreamFileToolkit_GetFlags(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetFlags(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetWriteFlags(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetWriteFlags__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetWriteFlags__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetReadFlags(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetReadFlags__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetReadFlags__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetNumNormalBits(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNumNormalBits(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetNumVertexBits(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNumVertexBits(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetNumParameterBits(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNumParameterBits(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetNumColorBits(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNumColorBits(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetNumIndexBits(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetNumIndexBits(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetJpegQuality__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetJpegQuality__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetJpegQuality(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetVersion(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetReadVersion(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetTargetVersion(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetTargetVersion(long jarg1, BStreamFileToolkit jarg1_);
  public final static native long BStreamFileToolkit_GetFileOffset(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetFileOffset(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native int BStreamFileToolkit_Unused(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_Error__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native int BStreamFileToolkit_Error__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native String BStreamFileToolkit_GetLogFile(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetLogFile__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native void BStreamFileToolkit_SetLogFile__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native boolean BStreamFileToolkit_GetLogging(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetLogging(long jarg1, BStreamFileToolkit jarg1_, boolean jarg2);
  public final static native long BStreamFileToolkit_GetLoggingOptions__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native long BStreamFileToolkit_GetLoggingOptions__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetLoggingOptions__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native void BStreamFileToolkit_SetLoggingOptions__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_OpenLogFile(long jarg1, BStreamFileToolkit jarg1_, String jarg2, String jarg3);
  public final static native void BStreamFileToolkit_LogEntry(long jarg1, BStreamFileToolkit jarg1_, String jarg2);
  public final static native void BStreamFileToolkit_CloseLogFile(long jarg1, BStreamFileToolkit jarg1_);
  public final static native long BStreamFileToolkit_NextOpcodeSequence(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetOpcodeSequence__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native void BStreamFileToolkit_SetOpcodeSequence__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native boolean BStreamFileToolkit_HeaderCommentSeen(long jarg1, BStreamFileToolkit jarg1_);
  public final static native long BStreamFileToolkit_GetProgressCallback(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetProgressCallback__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native void BStreamFileToolkit_SetProgressCallback__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native long BStreamFileToolkit_GetProgressValue(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetProgressValue(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native int BStreamFileToolkit_GetBufferLimit(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetBufferLimit(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetLastKey(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_AppendLastKey(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_ClearLastKey(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetLastKey(long jarg1, BStreamFileToolkit jarg1_, int[] jarg2);
  public final static native void BStreamFileToolkit_SetDictionaryFormat__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2, int jarg3);
  public final static native void BStreamFileToolkit_SetDictionaryFormat__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_SetDictionaryFormat__SWIG_2(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetDictionaryFormat(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetDictionaryOptions(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetDictionaryOffset(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetDictionaryOffset(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetDictionarySize(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetDictionarySize(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_RecordPause(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native void BStreamFileToolkit_ClearPauses(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetPauseCount(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetFirstPause(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_GetFirstPause(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_GetPosition(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_SetWorldBounding(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2);
  public final static native void BStreamFileToolkit_SetWorldBoundingBySphere(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2, float jarg3);
  public final static native boolean BStreamFileToolkit_AddExternalReference(long jarg1, BStreamFileToolkit jarg1_, String jarg2, int jarg3);
  public final static native boolean BStreamFileToolkit_NextExternalReference(long jarg1, BStreamFileToolkit jarg1_);
  public final static native String BStreamFileToolkit_GetExternalReference__SWIG_0(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_GetExternalReference__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, long jarg2);
  public final static native int BStreamFileToolkit_GetExternalReferenceContext(long jarg1, BStreamFileToolkit jarg1_);
  public final static native boolean BStreamFileToolkit_MatchPreviousExRef(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_AddSegment(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native int BStreamFileToolkit_RemoveSegment(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_CurrentSegment(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_ResetQuantizationError(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void BStreamFileToolkit_ReportQuantizationError__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, float jarg2);
  public final static native void BStreamFileToolkit_ReportQuantizationError__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, int jarg2, float[] jarg3, int jarg4);
  public final static native void BStreamFileToolkit_ReportQuantizationError__SWIG_2(long jarg1, BStreamFileToolkit jarg1_, int jarg2, float[] jarg3);
  public final static native float BStreamFileToolkit_GetQuantizationError(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_OpenGeometry(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_CloseGeometry(long jarg1, BStreamFileToolkit jarg1_);
  public final static native boolean BStreamFileToolkit_GeometryIsOpen(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_RevisitKey(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_RevisitOwner(long jarg1, BStreamFileToolkit jarg1_);
  public final static native int BStreamFileToolkit_ParseBuffer__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3, int jarg4);
  public final static native int BStreamFileToolkit_ParseBuffer__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3);
  public final static native void BStreamFileToolkit_GetPauseTable(long jarg1, BStreamFileToolkit jarg1_, int[] jarg2, int jarg3);
  public final static native void BStreamFileToolkit_GetWorldBounding(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2, int jarg3);
  public final static native long new_PutTab(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void delete_PutTab(long jarg1);
  public final static native long new_Outdent__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, int jarg2);
  public final static native long new_Outdent__SWIG_1(long jarg1, BStreamFileToolkit jarg1_);
  public final static native void delete_Outdent(long jarg1);
  public final static native int STATUS_ERROR_get();
  public final static native int STATUS_NORMAL_get();
  public final static native long new_BByteStream__SWIG_0(int jarg1, byte[] jarg2, int jarg3);
  public final static native long new_BByteStream__SWIG_1();
  public final static native void BByteStream_put(long jarg1, BByteStream jarg1_, int jarg2);
  public final static native void BByteStream_get(long jarg1, BByteStream jarg1_, int[] jarg2);
  public final static native void delete_BByteStream(long jarg1);
  public final static native long new_BVarStream();
  public final static native void delete_BVarStream(long jarg1);
  public final static native void BVarStream_InitWrite(long jarg1, BVarStream jarg1_, int jarg2, long jarg3);
  public final static native void BVarStream_InitRead(long jarg1, BVarStream jarg1_, int jarg2, long jarg3);
  public final static native int BVarStream_Put(long jarg1, BVarStream jarg1_, int[] jarg2, int jarg3);
  public final static native int BVarStream_Get(long jarg1, BVarStream jarg1_, int[] jarg2);
  public final static native long new_BPack();
  public final static native void delete_BPack(long jarg1);
  public final static native void BPack_InitWrite(long jarg1, BPack jarg1_, int jarg2, long jarg3);
  public final static native void BPack_InitRead(long jarg1, BPack jarg1_, int jarg2, long jarg3);
  public final static native void BPack_Put(long jarg1, BPack jarg1_, int jarg2, int jarg3);
  public final static native int BPack_Get(long jarg1, BPack jarg1_, int jarg2);
  public final static native int BPack_NumBytes(long jarg1, BPack jarg1_);
  public final static native void BPack_SetCanReallocate(long jarg1, BPack jarg1_, int jarg2);
  public final static native int BPack_GetStatus(long jarg1, BPack jarg1_);
  public final static native void BPack_SwapBytes(long jarg1, BPack jarg1_);
  public final static native int CS_INVALID_get();
  public final static native int CS_TRIVIAL_get();
  public final static native int CS_TRIVIAL_IMPLICIT_get();
  public final static native int CS_REPULSE_get();
  public final static native int CS_NONE_get();
  public final static native int CS_EDGEBREAKER_get();
  public final static native int CS_LINE_EXTEND_get();
  public final static native int CS_TRIVIAL_POLAR_get();
  public final static native int MAXU10_get();
  public final static native int MAXV10_get();
  public final static native int MAXU8_get();
  public final static native int MAXV8_get();
  public final static native int EB_DEFAULT_get();
  public final static native void ET_Bounding_x1_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_x1_get(long jarg1, ET_Bounding jarg1_);
  public final static native void ET_Bounding_y1_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_y1_get(long jarg1, ET_Bounding jarg1_);
  public final static native void ET_Bounding_z1_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_z1_get(long jarg1, ET_Bounding jarg1_);
  public final static native void ET_Bounding_x2_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_x2_get(long jarg1, ET_Bounding jarg1_);
  public final static native void ET_Bounding_y2_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_y2_get(long jarg1, ET_Bounding jarg1_);
  public final static native void ET_Bounding_z2_set(long jarg1, ET_Bounding jarg1_, float jarg2);
  public final static native float ET_Bounding_z2_get(long jarg1, ET_Bounding jarg1_);
  public final static native long new_ET_Bounding();
  public final static native void delete_ET_Bounding(long jarg1);
  public final static native int HINT_ONE_PIECE_get();
  public final static native int HINT_WATERTIGHT_get();
  public final static native int HINT_MANIFOLD_get();
  public final static native int HINT_NO_HANDLES_get();
  public final static native int HINT_NO_BACKWARDS_OR_HOLES_get();
  public final static native int HINT_INPUT_BY_TRISTRIPS_get();
  public final static native int STATUS_COMPLETE_get();
  public final static native int STATUS_WATERTIGHT_get();
  public final static native int STATUS_TRY_AGAIN_get();
  public final static native void eb_compress_configs_x_quantization_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_x_quantization_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_y_quantization_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_y_quantization_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_z_quantization_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_z_quantization_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_x_quantization_normals_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_x_quantization_normals_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_y_quantization_normals_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_y_quantization_normals_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_z_quantization_normals_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_z_quantization_normals_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_point_factor_set(long jarg1, eb_compress_configs jarg1_, float jarg2);
  public final static native float eb_compress_configs_point_factor_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_bounding_set(long jarg1, eb_compress_configs jarg1_, long jarg2, ET_Bounding jarg2_);
  public final static native long eb_compress_configs_bounding_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_target_version_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_target_version_get(long jarg1, eb_compress_configs jarg1_);
  public final static native void eb_compress_configs_hints_set(long jarg1, eb_compress_configs jarg1_, int jarg2);
  public final static native int eb_compress_configs_hints_get(long jarg1, eb_compress_configs jarg1_);
  public final static native long new_eb_compress_configs();
  public final static native void delete_eb_compress_configs(long jarg1);
  public final static native void eb_decompress_configs_bounding_set(long jarg1, eb_decompress_configs jarg1_, long jarg2, ET_Bounding jarg2_);
  public final static native long eb_decompress_configs_bounding_get(long jarg1, eb_decompress_configs jarg1_);
  public final static native long new_eb_decompress_configs();
  public final static native void delete_eb_decompress_configs(long jarg1);
  public final static native void edgebreaker_header0_scheme_set(long jarg1, edgebreaker_header0 jarg1_, char jarg2);
  public final static native char edgebreaker_header0_scheme_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_mtable_scheme_set(long jarg1, edgebreaker_header0 jarg1_, char jarg2);
  public final static native char edgebreaker_header0_mtable_scheme_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_points_scheme_set(long jarg1, edgebreaker_header0 jarg1_, char jarg2);
  public final static native char edgebreaker_header0_points_scheme_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_normals_scheme_set(long jarg1, edgebreaker_header0 jarg1_, char jarg2);
  public final static native char edgebreaker_header0_normals_scheme_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_opslen_set(long jarg1, edgebreaker_header0 jarg1_, int jarg2);
  public final static native int edgebreaker_header0_opslen_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_mtablelen_set(long jarg1, edgebreaker_header0 jarg1_, int jarg2);
  public final static native int edgebreaker_header0_mtablelen_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_pointslen_set(long jarg1, edgebreaker_header0 jarg1_, int jarg2);
  public final static native int edgebreaker_header0_pointslen_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native void edgebreaker_header0_pcount_set(long jarg1, edgebreaker_header0 jarg1_, int jarg2);
  public final static native int edgebreaker_header0_pcount_get(long jarg1, edgebreaker_header0 jarg1_);
  public final static native long new_edgebreaker_header0();
  public final static native void delete_edgebreaker_header0(long jarg1);
  public final static native void edgebreaker_header1_v0_set(long jarg1, edgebreaker_header1 jarg1_, long jarg2, edgebreaker_header0 jarg2_);
  public final static native long edgebreaker_header1_v0_get(long jarg1, edgebreaker_header1 jarg1_);
  public final static native void edgebreaker_header1_normalslen_set(long jarg1, edgebreaker_header1 jarg1_, int jarg2);
  public final static native int edgebreaker_header1_normalslen_get(long jarg1, edgebreaker_header1 jarg1_);
  public final static native long new_edgebreaker_header1();
  public final static native void delete_edgebreaker_header1(long jarg1);
  public final static native void edgebreaker_header_scheme_set(long jarg1, edgebreaker_header jarg1_, char jarg2);
  public final static native char edgebreaker_header_scheme_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_mtable_scheme_set(long jarg1, edgebreaker_header jarg1_, char jarg2);
  public final static native char edgebreaker_header_mtable_scheme_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_points_scheme_set(long jarg1, edgebreaker_header jarg1_, char jarg2);
  public final static native char edgebreaker_header_points_scheme_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_normals_scheme_set(long jarg1, edgebreaker_header jarg1_, char jarg2);
  public final static native char edgebreaker_header_normals_scheme_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_opslen_set(long jarg1, edgebreaker_header jarg1_, int jarg2);
  public final static native int edgebreaker_header_opslen_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_mtablelen_set(long jarg1, edgebreaker_header jarg1_, int jarg2);
  public final static native int edgebreaker_header_mtablelen_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_pointslen_set(long jarg1, edgebreaker_header jarg1_, int jarg2);
  public final static native int edgebreaker_header_pointslen_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_pcount_set(long jarg1, edgebreaker_header jarg1_, int jarg2);
  public final static native int edgebreaker_header_pcount_get(long jarg1, edgebreaker_header jarg1_);
  public final static native void edgebreaker_header_normalslen_set(long jarg1, edgebreaker_header jarg1_, int jarg2);
  public final static native int edgebreaker_header_normalslen_get(long jarg1, edgebreaker_header jarg1_);
  public final static native long new_edgebreaker_header();
  public final static native void delete_edgebreaker_header(long jarg1);
  public final static native int MTABLE_HAS_LENGTHS_get();
  public final static native int MTABLE_HAS_M2STACKOFFSETS_get();
  public final static native int MTABLE_HAS_M2GATEOFFSETS_get();
  public final static native int MTABLE_HAS_DUMMIES_get();
  public final static native int MTABLE_HAS_PATCHES_get();
  public final static native int MTABLE_HAS_BOUNDING_get();
  public final static native int MTABLE_HAS_QUANTIZATION_get();
  public final static native int MTABLE_HAS_QUANTIZATION_NORMALS_get();
  public final static native void mtable_info_get_mlengths(long jarg1, mtable_info jarg1_, int[] jarg2, int jarg3);
  public final static native void mtable_info_get_m2stackoffsets(long jarg1, mtable_info jarg1_, int[] jarg2, int jarg3);
  public final static native void mtable_info_get_m2gateoffsets(long jarg1, mtable_info jarg1_, int[] jarg2, int jarg3);
  public final static native void mtable_info_get_dummies(long jarg1, mtable_info jarg1_, int[] jarg2, int jarg3);
  public final static native void mtable_info_get_patches(long jarg1, mtable_info jarg1_, int[] jarg2, int jarg3);
  public final static native void mtable_info_flags_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_flags_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_mlengths_used_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_mlengths_used_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_mlengths_allocated_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_mlengths_allocated_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_m2stackoffsets_used_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_m2stackoffsets_used_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_m2stackoffsets_allocated_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_m2stackoffsets_allocated_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_m2gateoffsets_used_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_m2gateoffsets_used_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_m2gateoffsets_allocated_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_m2gateoffsets_allocated_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_dummies_used_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_dummies_used_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_dummies_allocated_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_dummies_allocated_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_patches_used_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_patches_used_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_patches_allocated_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_patches_allocated_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_bounding_set(long jarg1, mtable_info jarg1_, long jarg2, ET_Bounding jarg2_);
  public final static native long mtable_info_bounding_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_x_quantization_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_x_quantization_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_y_quantization_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_y_quantization_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_z_quantization_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_z_quantization_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_x_quantization_normals_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_x_quantization_normals_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_y_quantization_normals_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_y_quantization_normals_get(long jarg1, mtable_info jarg1_);
  public final static native void mtable_info_z_quantization_normals_set(long jarg1, mtable_info jarg1_, int jarg2);
  public final static native int mtable_info_z_quantization_normals_get(long jarg1, mtable_info jarg1_);
  public final static native long new_mtable_info();
  public final static native void delete_mtable_info(long jarg1);
  public final static native void half_edge_start_set(long jarg1, half_edge jarg1_, int jarg2);
  public final static native int half_edge_start_get(long jarg1, half_edge jarg1_);
  public final static native void half_edge_twin_set(long jarg1, half_edge jarg1_, int jarg2);
  public final static native int half_edge_twin_get(long jarg1, half_edge jarg1_);
  public final static native long new_half_edge();
  public final static native void delete_half_edge(long jarg1);
  public final static native void half_edge_array_get_visitations(long jarg1, half_edge_array jarg1_, int[] jarg2, int jarg3);
  public final static native void half_edge_array_edges_set(long jarg1, half_edge_array jarg1_, long jarg2, half_edge jarg2_);
  public final static native long half_edge_array_edges_get(long jarg1, half_edge_array jarg1_);
  public final static native void half_edge_array_allocated_set(long jarg1, half_edge_array jarg1_, int jarg2);
  public final static native int half_edge_array_allocated_get(long jarg1, half_edge_array jarg1_);
  public final static native void half_edge_array_used_set(long jarg1, half_edge_array jarg1_, int jarg2);
  public final static native int half_edge_array_used_get(long jarg1, half_edge_array jarg1_);
  public final static native void half_edge_array_visitations_used_set(long jarg1, half_edge_array jarg1_, int jarg2);
  public final static native int half_edge_array_visitations_used_get(long jarg1, half_edge_array jarg1_);
  public final static native long new_half_edge_array();
  public final static native void delete_half_edge_array(long jarg1);
  public final static native void int_stack_get_data(long jarg1, int_stack jarg1_, int[] jarg2, int jarg3);
  public final static native void int_stack_allocated_set(long jarg1, int_stack jarg1_, int jarg2);
  public final static native int int_stack_allocated_get(long jarg1, int_stack jarg1_);
  public final static native void int_stack_used_set(long jarg1, int_stack jarg1_, int jarg2);
  public final static native int int_stack_used_get(long jarg1, int_stack jarg1_);
  public final static native long new_int_stack();
  public final static native void delete_int_stack(long jarg1);
  public final static native void varstream_get_data(long jarg1, varstream jarg1_, int[] jarg2, int jarg3);
  public final static native void varstream_get_rdata(long jarg1, varstream jarg1_, int[] jarg2, int jarg3);
  public final static native void varstream_allocated_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_allocated_get(long jarg1, varstream jarg1_);
  public final static native void varstream_used_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_used_get(long jarg1, varstream jarg1_);
  public final static native void varstream_bit_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_bit_get(long jarg1, varstream jarg1_);
  public final static native void varstream_rused_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_rused_get(long jarg1, varstream jarg1_);
  public final static native void varstream_rbit_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_rbit_get(long jarg1, varstream jarg1_);
  public final static native void varstream_can_reallocate_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_can_reallocate_get(long jarg1, varstream jarg1_);
  public final static native void varstream_status_set(long jarg1, varstream jarg1_, int jarg2);
  public final static native int varstream_status_get(long jarg1, varstream jarg1_);
  public final static native void varstream_mask_set(long jarg1, varstream jarg1_, long jarg2);
  public final static native long varstream_mask_get(long jarg1, varstream jarg1_);
  public final static native void varstream_range_set(long jarg1, varstream jarg1_, long jarg2);
  public final static native long varstream_range_get(long jarg1, varstream jarg1_);
  public final static native long new_varstream();
  public final static native void delete_varstream(long jarg1);
  public final static native void loop_table_get_loops(long jarg1, loop_table jarg1_, int[] jarg2, int jarg3);
  public final static native void loop_table_get_loops_edges(long jarg1, loop_table jarg1_, int[] jarg2, int jarg3);
  public final static native void loop_table_get_P(long jarg1, loop_table jarg1_, int[] jarg2, int jarg3);
  public final static native void loop_table_get_N(long jarg1, loop_table jarg1_, int[] jarg2, int jarg3);
  public final static native void loop_table_loops_allocated_set(long jarg1, loop_table jarg1_, int jarg2);
  public final static native int loop_table_loops_allocated_get(long jarg1, loop_table jarg1_);
  public final static native void loop_table_loops_used_set(long jarg1, loop_table jarg1_, int jarg2);
  public final static native int loop_table_loops_used_get(long jarg1, loop_table jarg1_);
  public final static native void loop_table_loops_edges_allocated_set(long jarg1, loop_table jarg1_, int jarg2);
  public final static native int loop_table_loops_edges_allocated_get(long jarg1, loop_table jarg1_);
  public final static native void loop_table_np_allocated_set(long jarg1, loop_table jarg1_, int jarg2);
  public final static native int loop_table_np_allocated_get(long jarg1, loop_table jarg1_);
  public final static native long new_loop_table();
  public final static native void delete_loop_table(long jarg1);
  public final static native int CASE_C_get();
  public final static native int CASE_L_get();
  public final static native int CASE_E_get();
  public final static native int CASE_R_get();
  public final static native int CASE_S_get();
  public final static native int CASE_M_get();
  public final static native int CASE_M2_get();
  public final static native double BIG_FLOAT_get();
  public final static native int DEFAULT_QUANTIZATION_get();
  public final static native double DEFAULT_POINT_FACTOR_get();
  public final static native int DEFAULT_HINTS_get();
  public final static native int POINTSIZE_get();
  public final static native void dprintf(String jarg1);
  public final static native void wcsstrcpy(long jarg1, String jarg2);
  public final static native String wcschr2__SWIG_0(String jarg1, long jarg2, long jarg3);
  public final static native String wcsrchr2__SWIG_0(String jarg1, long jarg2, long jarg3);
  public final static native void BBaseOpcodeHandler_m_stage_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_stage_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_progress_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_progress_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_opcode_set(long jarg1, BBaseOpcodeHandler jarg1_, short jarg2);
  public final static native short BBaseOpcodeHandler_m_opcode_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_general_flags_set(long jarg1, BBaseOpcodeHandler jarg1_, short jarg2);
  public final static native short BBaseOpcodeHandler_m_general_flags_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_needs_tag_set(long jarg1, BBaseOpcodeHandler jarg1_, boolean jarg2);
  public final static native boolean BBaseOpcodeHandler_m_needs_tag_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_debug_length_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_debug_length_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_debug_allocated_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_debug_allocated_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_ascii_size_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_ascii_size_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_ascii_length_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_ascii_length_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_ascii_stage_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_ascii_stage_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_ascii_progress_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_ascii_progress_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_byte_set(long jarg1, BBaseOpcodeHandler jarg1_, short jarg2);
  public final static native short BBaseOpcodeHandler_m_byte_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_unsigned_short_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_unsigned_short_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_int_set(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_m_int_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_m_char_set(long jarg1, BBaseOpcodeHandler jarg1_, char jarg2);
  public final static native char BBaseOpcodeHandler_m_char_get(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native long new_BBaseOpcodeHandler(int jarg1);
  public final static native void delete_BBaseOpcodeHandler(long jarg1);
  public final static native int BBaseOpcodeHandler_Read(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_Write(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_Execute(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_ExecuteSwigExplicitBBaseOpcodeHandler(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_Interpret__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int BBaseOpcodeHandler_InterpretSwigExplicitBBaseOpcodeHandler__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int BBaseOpcodeHandler_Interpret__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_InterpretSwigExplicitBBaseOpcodeHandler__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_Interpret__SWIG_2(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int BBaseOpcodeHandler_InterpretSwigExplicitBBaseOpcodeHandler__SWIG_2(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void BBaseOpcodeHandler_Reset(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_ResetSwigExplicitBBaseOpcodeHandler(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native boolean BBaseOpcodeHandler_Match_Instance(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native boolean BBaseOpcodeHandler_Match_InstanceSwigExplicitBBaseOpcodeHandler(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native short BBaseOpcodeHandler_Opcode(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native short BBaseOpcodeHandler_General_Flags(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_Set_General_Flags(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_Pass(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_Tag__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_Tag__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native boolean BBaseOpcodeHandler_Tagging(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void BBaseOpcodeHandler_SetNeedsTag(long jarg1, BBaseOpcodeHandler jarg1_, boolean jarg2);
  public final static native boolean BBaseOpcodeHandler_NeedsTag(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native int BBaseOpcodeHandler_Clone(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int BBaseOpcodeHandler_CloneSwigExplicitBBaseOpcodeHandler(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native boolean BBaseOpcodeHandler_NeedsContext(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native boolean BBaseOpcodeHandler_NeedsContextSwigExplicitBBaseOpcodeHandler(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void BBaseOpcodeHandler_SetLoggingString__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, String jarg2);
  public final static native void BBaseOpcodeHandler_SetLoggingString__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native String BBaseOpcodeHandler_GetLoggingString__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_);
  public final static native void BBaseOpcodeHandler_LogDebug__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3);
  public final static native void BBaseOpcodeHandler_LogDebug__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, short[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_2(long jarg1, BStreamFileToolkit jarg1_, int[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_3(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_4(long jarg1, BStreamFileToolkit jarg1_, double[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_7(long jarg1, BStreamFileToolkit jarg1_, long[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_8(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_9(long jarg1, BStreamFileToolkit jarg1_, short[] jarg2);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_10(long jarg1, BStreamFileToolkit jarg1_, int[] jarg2);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_13(long jarg1, BStreamFileToolkit jarg1_, long[] jarg2);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_14(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2);
  public final static native int BBaseOpcodeHandler_GetData__SWIG_15(long jarg1, BStreamFileToolkit jarg1_, double[] jarg2);
  public final static native int BBaseOpcodeHandler_GetGeneral(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_LookatData(long jarg1, BStreamFileToolkit jarg1_, byte[] jarg2);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_0(long jarg1, BStreamFileToolkit jarg1_, String jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_1(long jarg1, BStreamFileToolkit jarg1_, short[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_2(long jarg1, BStreamFileToolkit jarg1_, int[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_3(long jarg1, BStreamFileToolkit jarg1_, float[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_4(long jarg1, BStreamFileToolkit jarg1_, double[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutData__SWIG_7(long jarg1, BStreamFileToolkit jarg1_, long[] jarg2, int jarg3);
  public final static native int BBaseOpcodeHandler_PutOpcode__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_PutOpcode__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_PutGeneral(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native short BBaseOpcodeHandler_flip__SWIG_0(short jarg1);
  public final static native int BBaseOpcodeHandler_flip__SWIG_1(int jarg1);
  public final static native void BBaseOpcodeHandler_fix__SWIG_0(int[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_fix__SWIG_1(short[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_fix_in__SWIG_0(float[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_fix_in__SWIG_1(double[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_fix_out__SWIG_0(float[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_fix_out__SWIG_1(double[] jarg1, int jarg2);
  public final static native void BBaseOpcodeHandler_log_opcode(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, short jarg4);
  public final static native void BBaseOpcodeHandler_floats_to_bytes(long jarg1, BBaseOpcodeHandler jarg1_, float[] jarg2, byte[] jarg3, int jarg4);
  public final static native void BBaseOpcodeHandler_bytes_to_floats(long jarg1, BBaseOpcodeHandler jarg1_, byte[] jarg2, float[] jarg3, int jarg4);
  public final static native void BBaseOpcodeHandler_add_segment(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_remove_segment(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void BBaseOpcodeHandler_set_last_key(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_last_key(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void BBaseOpcodeHandler_adjust_written(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native void BBaseOpcodeHandler_increase_nesting__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native void BBaseOpcodeHandler_increase_nesting__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void BBaseOpcodeHandler_decrease_nesting__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native void BBaseOpcodeHandler_decrease_nesting__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native long BBaseOpcodeHandler_Opcode_Handler(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native void BBaseOpcodeHandler_Record_Instance(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7);
  public final static native boolean BBaseOpcodeHandler_Find_Instance(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void BBaseOpcodeHandler_Remember_Item(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native boolean BBaseOpcodeHandler_Find_Item(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native boolean BBaseOpcodeHandler_validate_count__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2, int jarg3);
  public final static native boolean BBaseOpcodeHandler_validate_count__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, int jarg2);
  public final static native int BBaseOpcodeHandler_SkipNewlineAndTabs__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long[] jarg3);
  public final static native int BBaseOpcodeHandler_SkipNewlineAndTabs__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_ReadAsciiLine__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long[] jarg3);
  public final static native int BBaseOpcodeHandler_ReadAsciiLine__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_ReadAsciiWord__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, long[] jarg3);
  public final static native int BBaseOpcodeHandler_ReadAsciiWord__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_ReadEndOpcode(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native boolean BBaseOpcodeHandler_RemoveAngularBrackets(long jarg1, BBaseOpcodeHandler jarg1_, byte[] jarg2);
  public final static native boolean BBaseOpcodeHandler_RemoveQuotes(long jarg1, BBaseOpcodeHandler jarg1_, byte[] jarg2);
  public final static native int BBaseOpcodeHandler_Read_Referenced_Segment(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int[] jarg3);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int[] jarg3, long jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, byte[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_3(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, int[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_4(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, short[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_6(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, float[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_7(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, float[] jarg4, long jarg5);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_8(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, byte[] jarg4, long jarg5);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_10(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, int[] jarg4, long jarg5);
  public final static native int BBaseOpcodeHandler_GetAsciiData__SWIG_11(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, short[] jarg4, long jarg5);
  public final static native int BBaseOpcodeHandler_GetAsciiHex__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, byte[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiHex__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, int[] jarg4);
  public final static native int BBaseOpcodeHandler_GetAsciiImageData(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, byte[] jarg4, long jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiOpcode__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, boolean jarg4, boolean jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiOpcode__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, boolean jarg4);
  public final static native int BBaseOpcodeHandler_PutAsciiOpcode__SWIG_2(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int BBaseOpcodeHandler_PutAsciiOpcode__SWIG_3(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int BBaseOpcodeHandler_PutAsciiData__SWIG_0(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, String jarg4, int jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiData__SWIG_1(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, short[] jarg4, int jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiData__SWIG_2(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, int[] jarg4, int jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiData__SWIG_3(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, float[] jarg4, int jarg5);
  public final static native int BBaseOpcodeHandler_PutAsciiData__SWIG_6(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3, long[] jarg4, int jarg5);
  public final static native int BBaseOpcodeHandler_PutStartXMLTag(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3);
  public final static native int BBaseOpcodeHandler_PutEndXMLTag(long jarg1, BBaseOpcodeHandler jarg1_, long jarg2, BStreamFileToolkit jarg2_, String jarg3);
  public final static native void BBaseOpcodeHandler_director_connect(BBaseOpcodeHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void BBaseOpcodeHandler_change_ownership(BBaseOpcodeHandler obj, long cptr, boolean take_or_release);
  public final static native int TKE_Termination_get();
  public final static native int TKE_Pause_get();
  public final static native int TKE_Comment_get();
  public final static native int TKE_Font_get();
  public final static native int TKE_Texture_get();
  public final static native int TKE_Material_get();
  public final static native int TKE_Open_Segment_get();
  public final static native int TKE_Close_Segment_get();
  public final static native int TKE_Reopen_Segment_get();
  public final static native int TKE_Include_Segment_get();
  public final static native int TKE_Style_Segment_get();
  public final static native int TKE_Named_Style_get();
  public final static native int TKE_Geometry_Attributes_get();
  public final static native int TKE_Renumber_Key_Global_get();
  public final static native int TKE_Renumber_Key_Local_get();
  public final static native int TKE_Priority_get();
  public final static native int TKE_Tag_get();
  public final static native int TKE_Bounding_get();
  public final static native int TKE_Bounding_Info_get();
  public final static native int TKE_Callback_get();
  public final static native int TKE_Camera_get();
  public final static native int TKE_Conditional_Action_get();
  public final static native int TKE_Conditions_get();
  public final static native int TKE_Color_get();
  public final static native int TKE_Color_By_Index_get();
  public final static native int TKE_Color_By_Index_16_get();
  public final static native int TKE_Color_By_FIndex_get();
  public final static native int TKE_Color_RGB_get();
  public final static native int TKE_Color_By_Value_get();
  public final static native int TKE_Color_Map_get();
  public final static native int TKE_Edge_Pattern_get();
  public final static native int TKE_Edge_Weight_get();
  public final static native int TKE_Face_Pattern_get();
  public final static native int TKE_Geometry_Options_get();
  public final static native int TKE_Handedness_get();
  public final static native int TKE_Heuristics_get();
  public final static native int TKE_Line_Pattern_get();
  public final static native int TKE_Line_Weight_get();
  public final static native int TKE_Marker_Size_get();
  public final static native int TKE_Marker_Symbol_get();
  public final static native int TKE_Modelling_Matrix_get();
  public final static native int TKE_LOD_get();
  public final static native int TKE_Rendering_Options_get();
  public final static native int TKE_Selectability_get();
  public final static native int TKE_Text_Alignment_get();
  public final static native int TKE_Text_Font_get();
  public final static native int TKE_Text_Path_get();
  public final static native int TKE_Text_Spacing_get();
  public final static native int TKE_Texture_Matrix_get();
  public final static native int TKE_Unicode_Options_get();
  public final static native int TKE_User_Index_get();
  public final static native int TKE_User_Index_Data_get();
  public final static native int TKE_User_Options_get();
  public final static native int TKE_User_Value_get();
  public final static native int TKE_Visibility_get();
  public final static native int TKE_Window_get();
  public final static native int TKE_Window_Frame_get();
  public final static native int TKE_Window_Pattern_get();
  public final static native int TKE_Glyph_Definition_get();
  public final static native int TKE_Line_Style_get();
  public final static native int TKE_Named_Style_Def_get();
  public final static native int TKE_Area_Light_get();
  public final static native int TKE_Circle_get();
  public final static native int TKE_Circular_Arc_get();
  public final static native int TKE_Circular_Chord_get();
  public final static native int TKE_Circular_Wedge_get();
  public final static native int TKE_Cutting_Plane_get();
  public final static native int TKE_Cylinder_get();
  public final static native int TKE_Distant_Light_get();
  public final static native int TKE_Ellipse_get();
  public final static native int TKE_Elliptical_Arc_get();
  public final static native int TKE_Grid_get();
  public final static native int TKE_Image_get();
  public final static native int TKE_Infinite_Line_get();
  public final static native int TKE_Infinite_Ray_get();
  public final static native int TKE_Line_get();
  public final static native int TKE_Local_Light_get();
  public final static native int TKE_Marker_get();
  public final static native int TKE_Mesh_get();
  public final static native int TKE_NURBS_Curve_get();
  public final static native int TKE_NURBS_Surface_get();
  public final static native int TKE_PolyCylinder_get();
  public final static native int TKE_Polygon_get();
  public final static native int TKE_Polyline_get();
  public final static native int TKE_PolyPolyline_get();
  public final static native int TKE_Reference_get();
  public final static native int TKE_Shell_get();
  public final static native int TKE_Sphere_get();
  public final static native int TKE_Spot_Light_get();
  public final static native int TKE_Text_get();
  public final static native int TKE_Text_With_Encoding_get();
  public final static native int TKE_Start_User_Data_get();
  public final static native int TKE_Stop_User_Data_get();
  public final static native int TKE_XML_get();
  public final static native int TKE_External_Reference_get();
  public final static native int TKE_External_Reference_Unicode_get();
  public final static native int TKE_URL_get();
  public final static native int TKE_Start_Compression_get();
  public final static native int TKE_Stop_Compression_get();
  public final static native int TKE_Repeat_Object_get();
  public final static native int TKE_View_get();
  public final static native int TKE_Clip_Rectangle_get();
  public final static native int TKE_Clip_Region_get();
  public final static native int TKE_Complex_Clip_Region_get();
  public final static native int TKE_File_Info_get();
  public final static native int TKE_Dictionary_get();
  public final static native int TKE_Dictionary_Locater_get();
  public final static native int TKE_Thumbnail_get();
  public final static native int TKE_Delete_Object_get();
  public final static native int TKE_Tag_Implicit_get();
  public final static native int TKE_Streaming_Mode_get();
  public final static native int TKE_First_User_Opcode_get();
  public final static native int TKE_Last_User_Opcode_get();
  public final static native int TKE_HW3D_Image_get();
  public final static native int TKE_Pseudo_Handler_get();
  public final static native int TKE_Extended_Code_get();
  public final static native void TK_Default_m_buffer_count_set(long jarg1, TK_Default jarg1_, int jarg2);
  public final static native int TK_Default_m_buffer_count_get(long jarg1, TK_Default jarg1_);
  public final static native long new_TK_Default();
  public final static native int TK_Default_Read(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Default_ReadSwigExplicitTK_Default(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Default_Write(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Default_WriteSwigExplicitTK_Default(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Default_ReadAscii(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Default_WriteAscii(long jarg1, TK_Default jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_TK_Default(long jarg1);
  public final static native void TK_Default_director_connect(TK_Default obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Default_change_ownership(TK_Default obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Unavailable(char jarg1);
  public final static native int TK_Unavailable_Read(long jarg1, TK_Unavailable jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unavailable_ReadSwigExplicitTK_Unavailable(long jarg1, TK_Unavailable jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unavailable_Write(long jarg1, TK_Unavailable jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unavailable_WriteSwigExplicitTK_Unavailable(long jarg1, TK_Unavailable jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_TK_Unavailable(long jarg1);
  public final static native void TK_Unavailable_director_connect(TK_Unavailable obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Unavailable_change_ownership(TK_Unavailable obj, long cptr, boolean take_or_release);
  public final static native void TK_Header_m_current_object_set(long jarg1, TK_Header jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_Header_m_current_object_get(long jarg1, TK_Header jarg1_);
  public final static native long new_TK_Header();
  public final static native void delete_TK_Header(long jarg1);
  public final static native int TK_Header_Read(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Header_ReadSwigExplicitTK_Header(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Header_Write(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Header_WriteSwigExplicitTK_Header(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Header_ReadAscii(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Header_WriteAscii(long jarg1, TK_Header jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Header_Reset(long jarg1, TK_Header jarg1_);
  public final static native void TK_Header_ResetSwigExplicitTK_Header(long jarg1, TK_Header jarg1_);
  public final static native void TK_Header_director_connect(TK_Header obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Header_change_ownership(TK_Header obj, long cptr, boolean take_or_release);
  public final static native void TK_File_Info_m_flags_set(long jarg1, TK_File_Info jarg1_, int jarg2);
  public final static native int TK_File_Info_m_flags_get(long jarg1, TK_File_Info jarg1_);
  public final static native long new_TK_File_Info();
  public final static native int TK_File_Info_Read(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_ReadSwigExplicitTK_File_Info(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_Write(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_WriteSwigExplicitTK_File_Info(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_Execute(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_ExecuteSwigExplicitTK_File_Info(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_Interpret__SWIG_0(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_File_Info_InterpretSwigExplicitTK_File_Info__SWIG_0(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_File_Info_Interpret__SWIG_1(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_File_Info_InterpretSwigExplicitTK_File_Info__SWIG_1(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_File_Info_ReadAscii(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_File_Info_WriteAscii(long jarg1, TK_File_Info jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_File_Info_SetFlags(long jarg1, TK_File_Info jarg1_, int jarg2);
  public final static native int TK_File_Info_GetFlags(long jarg1, TK_File_Info jarg1_);
  public final static native void delete_TK_File_Info(long jarg1);
  public final static native void TK_File_Info_director_connect(TK_File_Info obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_File_Info_change_ownership(TK_File_Info obj, long cptr, boolean take_or_release);
  public final static native void TK_Comment_m_length_set(long jarg1, TK_Comment jarg1_, int jarg2);
  public final static native int TK_Comment_m_length_get(long jarg1, TK_Comment jarg1_);
  public final static native void TK_Comment_m_allocated_set(long jarg1, TK_Comment jarg1_, int jarg2);
  public final static native int TK_Comment_m_allocated_get(long jarg1, TK_Comment jarg1_);
  public final static native void TK_Comment_set_comment__SWIG_0(long jarg1, TK_Comment jarg1_, String jarg2);
  public final static native void TK_Comment_set_comment__SWIG_1(long jarg1, TK_Comment jarg1_, int jarg2);
  public final static native long new_TK_Comment__SWIG_0(String jarg1);
  public final static native long new_TK_Comment__SWIG_1();
  public final static native void delete_TK_Comment(long jarg1);
  public final static native int TK_Comment_Read(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_ReadSwigExplicitTK_Comment(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_Write(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_WriteSwigExplicitTK_Comment(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_Execute(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_ExecuteSwigExplicitTK_Comment(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_ReadAscii(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_WriteAscii(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_ExecuteAscii(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Comment_Interpret__SWIG_0(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Comment_InterpretSwigExplicitTK_Comment__SWIG_0(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Comment_Interpret__SWIG_1(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Comment_InterpretSwigExplicitTK_Comment__SWIG_1(long jarg1, TK_Comment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void TK_Comment_Reset(long jarg1, TK_Comment jarg1_);
  public final static native void TK_Comment_ResetSwigExplicitTK_Comment(long jarg1, TK_Comment jarg1_);
  public final static native void TK_Comment_SetComment__SWIG_0(long jarg1, TK_Comment jarg1_, String jarg2);
  public final static native void TK_Comment_SetComment__SWIG_1(long jarg1, TK_Comment jarg1_, int jarg2);
  public final static native String TK_Comment_GetComment__SWIG_0(long jarg1, TK_Comment jarg1_);
  public final static native void TK_Comment_director_connect(TK_Comment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Comment_change_ownership(TK_Comment obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Terminator__SWIG_0(char jarg1, boolean jarg2);
  public final static native long new_TK_Terminator__SWIG_1(char jarg1);
  public final static native int TK_Terminator_Read(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_ReadSwigExplicitTK_Terminator(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_Write(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_WriteSwigExplicitTK_Terminator(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_Execute(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_ExecuteSwigExplicitTK_Terminator(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_ReadAscii(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Terminator_WriteAscii(long jarg1, TK_Terminator jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Terminator_m_terminate_file_set(long jarg1, TK_Terminator jarg1_, boolean jarg2);
  public final static native boolean TK_Terminator_m_terminate_file_get(long jarg1, TK_Terminator jarg1_);
  public final static native void delete_TK_Terminator(long jarg1);
  public final static native void TK_Terminator_director_connect(TK_Terminator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Terminator_change_ownership(TK_Terminator obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Compression(char jarg1);
  public final static native int TK_Compression_Read(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_ReadSwigExplicitTK_Compression(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_Write(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_WriteSwigExplicitTK_Compression(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_ReadAscii(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_WriteAscii(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_Execute(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_ExecuteSwigExplicitTK_Compression(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_ExecuteAscii(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Compression_Interpret__SWIG_0(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Compression_InterpretSwigExplicitTK_Compression__SWIG_0(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Compression_Interpret__SWIG_1(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Compression_InterpretSwigExplicitTK_Compression__SWIG_1(long jarg1, TK_Compression jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void delete_TK_Compression(long jarg1);
  public final static native void TK_Compression_director_connect(TK_Compression obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Compression_change_ownership(TK_Compression obj, long cptr, boolean take_or_release);
  public final static native int TKO_Geo_Face_get();
  public final static native int TKO_Geo_Edge_get();
  public final static native int TKO_Geo_Line_get();
  public final static native int TKO_Geo_Marker_get();
  public final static native int TKO_Geo_Text_get();
  public final static native int TKO_Geo_Window_get();
  public final static native int TKO_Geo_Image_get();
  public final static native int TKO_Geo_Extended_get();
  public final static native int TKO_Geo_Extended_Mask_get();
  public final static native int TKO_Geo_Extended_Shift_get();
  public final static native int TKO_Geo_Ambient_Up_get();
  public final static native int TKO_Geo_Light_get();
  public final static native int TKO_Geo_Face_Contrast_get();
  public final static native int TKO_Geo_Window_Contrast_get();
  public final static native int TKO_Geo_Front_get();
  public final static native int TKO_Geo_Back_get();
  public final static native int TKO_Geo_Vertex_get();
  public final static native int TKO_Geo_Geom_Colors_get();
  public final static native int TKO_Geo_Every_Colors_get();
  public final static native int TKO_Geo_Extended_Colors_get();
  public final static native int TKO_Geo_Extended_Colors_Mask_get();
  public final static native int TKO_Geo_Extended_Colors_Shift_get();
  public final static native int TKO_Geo_Edge_Contrast_get();
  public final static native int TKO_Geo_Line_Contrast_get();
  public final static native int TKO_Geo_Marker_Contrast_get();
  public final static native int TKO_Geo_Vertex_Contrast_get();
  public final static native int TKO_Geo_Cut_Edge_get();
  public final static native int TKO_Geo_Simple_Reflection_get();
  public final static native int TKO_Geo_Cut_Face_get();
  public final static native int TKO_Geo_Extended2_get();
  public final static native int TKO_Geo_Extended2_Mask_get();
  public final static native int TKO_Geo_Extended2_Shift_get();
  public final static native int TKO_Geo_Text_Contrast_get();
  public final static native int TKO_Geo_Ambient_Down_get();
  public final static native int TKO_Geo_Cut_Face_Contrast_get();
  public final static native int TKO_Geo_Ambient_get();
  public final static native int TKO_Geo_All_Colors_get();
  public final static native int TKO_Geo_String_Cursor_get();
  public final static native int TKO_Geo_Isoline_get();
  public final static native int TKO_Geo_Geom_Selects_get();
  public final static native int TKO_Geo_All_Selects_get();
  public final static native int TKO_Geo_Face_Lighting_get();
  public final static native int TKO_Geo_Edge_Lighting_get();
  public final static native int TKO_Geo_Marker_Lighting_get();
  public final static native int TKO_Geo_Light_Visibles_get();
  public final static native int TKO_Geo_Silhouette_Edge_get();
  public final static native int TKO_Geo_Perimeter_Edge_get();
  public final static native int TKO_Geo_Mesh_Quad_get();
  public final static native int TKO_Geo_Hard_Edge_get();
  public final static native int TKO_Geo_Cutting_Plane_get();
  public final static native int TKO_Geo_Shadow_Emit_get();
  public final static native int TKO_Geo_Shadow_Cast_get();
  public final static native int TKO_Geo_Shadow_Receive_get();
  public final static native int TKO_Geo_Shadow_Visibles_get();
  public final static native int TKO_Geo_Vertex_Vis_get();
  public final static native int TKO_Geo_Cut_Geometry_get();
  public final static native int TKO_Geo_Adjacent_Edge_get();
  public final static native int TKO_Geo_NonCulled_Edge_get();
  public final static native int TKO_Geo_Edge_Visibles_get();
  public final static native int TKO_Geo_Geom_Visibles_get();
  public final static native int TKO_Geo_All_Visibles_get();
  public final static native int TKO_Channel_Diffuse_get();
  public final static native int TKO_Channel_Specular_get();
  public final static native int TKO_Channel_Mirror_get();
  public final static native int TKO_Channel_Transmission_get();
  public final static native int TKO_Channel_Emission_get();
  public final static native int TKO_Channel_Gloss_get();
  public final static native int TKO_Channel_Index_get();
  public final static native int TKO_Channel_Extended_get();
  public final static native int TKO_Channel_Environment_get();
  public final static native int TKO_Channel_Bump_get();
  public final static native int TKO_Channel_Count_get();
  public final static native int TKO_Channel_Extended_Mask_get();
  public final static native int TKO_Channel_Extended_Shift_get();
  public final static native int TKO_Lock_Callback_get();
  public final static native int TKO_Lock_Camera_get();
  public final static native int TKO_Lock_Color_get();
  public final static native int TKO_Lock_Color_Map_get();
  public final static native int TKO_Lock_Driver_get();
  public final static native int TKO_Lock_Driver_Options_get();
  public final static native int TKO_Lock_Edge_Pattern_get();
  public final static native int TKO_Lock_Edge_Weight_get();
  public final static native int TKO_Lock_Face_Pattern_get();
  public final static native int TKO_Lock_Handedness_get();
  public final static native int TKO_Lock_Heuristics_get();
  public final static native int TKO_Lock_Line_Pattern_get();
  public final static native int TKO_Lock_Line_Weight_get();
  public final static native int TKO_Lock_Marker_Size_get();
  public final static native int TKO_Lock_Marker_Symbol_get();
  public final static native int TKO_Lock_Metafile_get();
  public final static native int TKO_Lock_Modelling_Matrix_get();
  public final static native int TKO_Lock_Rendering_Options_get();
  public final static native int TKO_Lock_Selectability_get();
  public final static native int TKO_Lock_Styles_get();
  public final static native int TKO_Lock_Text_Alignment_get();
  public final static native int TKO_Lock_Text_Font_get();
  public final static native int TKO_Lock_Text_Path_get();
  public final static native int TKO_Lock_Text_Spacing_get();
  public final static native int TKO_Lock_User_Options_get();
  public final static native int TKO_Lock_User_Value_get();
  public final static native int TKO_Lock_Texture_Matrix_get();
  public final static native int TKO_Lock_Visibility_get();
  public final static native int TKO_Lock_Window_get();
  public final static native int TKO_Lock_Window_Frame_get();
  public final static native int TKO_Lock_Window_Pattern_get();
  public final static native int TKO_Lock_All_get();
  public final static native int TKO_Lock_Channel_Diffuse_get();
  public final static native int TKO_Lock_Channel_Specular_get();
  public final static native int TKO_Lock_Channel_Mirror_get();
  public final static native int TKO_Lock_Channel_Transmission_get();
  public final static native int TKO_Lock_Channel_Emission_get();
  public final static native int TKO_Lock_Channel_Gloss_get();
  public final static native int TKO_Lock_Channel_Index_get();
  public final static native int TKO_Lock_Channel_Environment_get();
  public final static native int TKO_Lock_Channel_Bump_get();
  public final static native int TKO_Lock_Channel_ALL_get();
  public final static native void Lock_Masks_mask_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_value_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_mask_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_color_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_value_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_color_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_face_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_face_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_face_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_face_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_edge_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_edge_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_edge_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_edge_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_line_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_line_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_line_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_line_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_marker_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_marker_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_marker_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_marker_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_text_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_text_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_text_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_text_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_window_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_window_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_window_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_window_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_face_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_face_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_face_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_face_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_window_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_window_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_window_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_window_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_back_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_back_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_back_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_back_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_vertex_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_vertex_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_vertex_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_vertex_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_edge_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_edge_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_edge_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_edge_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_line_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_line_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_line_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_line_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_marker_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_marker_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_marker_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_marker_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_vertex_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_vertex_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_vertex_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_vertex_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_text_contrast_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_text_contrast_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_text_contrast_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_text_contrast_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_simple_reflection_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_simple_reflection_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_simple_reflection_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_simple_reflection_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_cut_face_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_cut_face_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_cut_face_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_cut_face_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_cut_edge_mask_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_cut_edge_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_color_cut_edge_value_set(long jarg1, Lock_Masks jarg1_, short jarg2);
  public final static native short Lock_Masks_color_cut_edge_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_visibility_mask_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_visibility_mask_get(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_visibility_value_set(long jarg1, Lock_Masks jarg1_, int jarg2);
  public final static native int Lock_Masks_visibility_value_get(long jarg1, Lock_Masks jarg1_);
  public final static native long new_Lock_Masks();
  public final static native int Lock_Masks_Read__SWIG_0(long jarg1, Lock_Masks jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int Lock_Masks_Write__SWIG_0(long jarg1, Lock_Masks jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int Lock_Masks_Read__SWIG_1(long jarg1, Lock_Masks jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native int Lock_Masks_Write__SWIG_1(long jarg1, Lock_Masks jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native void Lock_Masks_init(long jarg1, Lock_Masks jarg1_);
  public final static native void Lock_Masks_set_color(long jarg1, Lock_Masks jarg1_);
  public final static native void delete_Lock_Masks(long jarg1);
  public final static native void TK_Open_Segment_m_length_set(long jarg1, TK_Open_Segment jarg1_, int jarg2);
  public final static native int TK_Open_Segment_m_length_get(long jarg1, TK_Open_Segment jarg1_);
  public final static native void TK_Open_Segment_m_allocated_set(long jarg1, TK_Open_Segment jarg1_, int jarg2);
  public final static native int TK_Open_Segment_m_allocated_get(long jarg1, TK_Open_Segment jarg1_);
  public final static native void TK_Open_Segment_set_segment__SWIG_0(long jarg1, TK_Open_Segment jarg1_, String jarg2);
  public final static native void TK_Open_Segment_set_segment__SWIG_1(long jarg1, TK_Open_Segment jarg1_, int jarg2);
  public final static native long new_TK_Open_Segment();
  public final static native void delete_TK_Open_Segment(long jarg1);
  public final static native int TK_Open_Segment_Read(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Open_Segment_ReadSwigExplicitTK_Open_Segment(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Open_Segment_Write(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Open_Segment_WriteSwigExplicitTK_Open_Segment(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Open_Segment_Clone(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Open_Segment_CloneSwigExplicitTK_Open_Segment(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Open_Segment_ReadAscii(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Open_Segment_WriteAscii(long jarg1, TK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Open_Segment_Reset(long jarg1, TK_Open_Segment jarg1_);
  public final static native void TK_Open_Segment_ResetSwigExplicitTK_Open_Segment(long jarg1, TK_Open_Segment jarg1_);
  public final static native void TK_Open_Segment_SetSegment__SWIG_0(long jarg1, TK_Open_Segment jarg1_, String jarg2);
  public final static native void TK_Open_Segment_SetSegment__SWIG_1(long jarg1, TK_Open_Segment jarg1_, int jarg2);
  public final static native String TK_Open_Segment_GetSegment__SWIG_0(long jarg1, TK_Open_Segment jarg1_);
  public final static native void TK_Open_Segment_director_connect(TK_Open_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Open_Segment_change_ownership(TK_Open_Segment obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Close_Segment();
  public final static native int TK_Close_Segment_Read(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Close_Segment_ReadSwigExplicitTK_Close_Segment(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Close_Segment_Write(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Close_Segment_WriteSwigExplicitTK_Close_Segment(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Close_Segment_Clone(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Close_Segment_CloneSwigExplicitTK_Close_Segment(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Close_Segment_ReadAscii(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Close_Segment_WriteAscii(long jarg1, TK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_TK_Close_Segment(long jarg1);
  public final static native void TK_Close_Segment_director_connect(TK_Close_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Close_Segment_change_ownership(TK_Close_Segment obj, long cptr, boolean take_or_release);
  public final static native void TK_Reopen_Segment_m_index_set(long jarg1, TK_Reopen_Segment jarg1_, int jarg2);
  public final static native int TK_Reopen_Segment_m_index_get(long jarg1, TK_Reopen_Segment jarg1_);
  public final static native long new_TK_Reopen_Segment();
  public final static native int TK_Reopen_Segment_Read(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reopen_Segment_ReadSwigExplicitTK_Reopen_Segment(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reopen_Segment_Write(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reopen_Segment_WriteSwigExplicitTK_Reopen_Segment(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reopen_Segment_Clone(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Reopen_Segment_CloneSwigExplicitTK_Reopen_Segment(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Reopen_Segment_ReadAscii(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reopen_Segment_WriteAscii(long jarg1, TK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Reopen_Segment_SetIndex(long jarg1, TK_Reopen_Segment jarg1_, int jarg2);
  public final static native int TK_Reopen_Segment_GetIndex(long jarg1, TK_Reopen_Segment jarg1_);
  public final static native void delete_TK_Reopen_Segment(long jarg1);
  public final static native void TK_Reopen_Segment_director_connect(TK_Reopen_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Reopen_Segment_change_ownership(TK_Reopen_Segment obj, long cptr, boolean take_or_release);
  public final static native void TK_Referenced_Segment_m_length_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_length_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_allocated_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_allocated_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_cond_length_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_cond_length_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_cond_allocated_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_cond_allocated_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_key_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_key_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_renumbered_key_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_renumbered_key_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_renumbered_scope_set(long jarg1, TK_Referenced_Segment jarg1_, short jarg2);
  public final static native short TK_Referenced_Segment_m_renumbered_scope_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_referee_set(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_Referenced_Segment_m_referee_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_follow_set(long jarg1, TK_Referenced_Segment jarg1_, boolean jarg2);
  public final static native boolean TK_Referenced_Segment_m_follow_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_filter_set(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, Lock_Masks jarg2_);
  public final static native long TK_Referenced_Segment_m_filter_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_referee_has_priority_set(long jarg1, TK_Referenced_Segment jarg1_, boolean jarg2);
  public final static native boolean TK_Referenced_Segment_m_referee_has_priority_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_m_referee_priority_set(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native int TK_Referenced_Segment_m_referee_priority_get(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_set_segment__SWIG_0(long jarg1, TK_Referenced_Segment jarg1_, String jarg2);
  public final static native void TK_Referenced_Segment_set_segment__SWIG_1(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native long new_TK_Referenced_Segment(short jarg1);
  public final static native void delete_TK_Referenced_Segment(long jarg1);
  public final static native int TK_Referenced_Segment_Read(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Referenced_Segment_ReadSwigExplicitTK_Referenced_Segment(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Referenced_Segment_Write(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Referenced_Segment_WriteSwigExplicitTK_Referenced_Segment(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Referenced_Segment_Clone(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Referenced_Segment_CloneSwigExplicitTK_Referenced_Segment(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Referenced_Segment_ReadAscii(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Referenced_Segment_WriteAscii(long jarg1, TK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Referenced_Segment_Reset(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_ResetSwigExplicitTK_Referenced_Segment(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_SetSegment__SWIG_0(long jarg1, TK_Referenced_Segment jarg1_, String jarg2);
  public final static native void TK_Referenced_Segment_SetSegment__SWIG_1(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native String TK_Referenced_Segment_GetSegment__SWIG_0(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_SetCondition__SWIG_0(long jarg1, TK_Referenced_Segment jarg1_, String jarg2);
  public final static native void TK_Referenced_Segment_SetCondition__SWIG_1(long jarg1, TK_Referenced_Segment jarg1_, int jarg2);
  public final static native String TK_Referenced_Segment_GetCondition__SWIG_0(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_SetFollow(long jarg1, TK_Referenced_Segment jarg1_, boolean jarg2);
  public final static native boolean TK_Referenced_Segment_GetFollow(long jarg1, TK_Referenced_Segment jarg1_);
  public final static native void TK_Referenced_Segment_director_connect(TK_Referenced_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Referenced_Segment_change_ownership(TK_Referenced_Segment obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Reference();
  public final static native void delete_TK_Reference(long jarg1);
  public final static native int TK_Reference_Read(long jarg1, TK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reference_Write(long jarg1, TK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reference_Clone(long jarg1, TK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Reference_ReadAscii(long jarg1, TK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Reference_WriteAscii(long jarg1, TK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Reference_Reset(long jarg1, TK_Reference jarg1_);
  public final static native void TK_Reference_SetIndex(long jarg1, TK_Reference jarg1_, int jarg2);
  public final static native int TK_Reference_GetIndex(long jarg1, TK_Reference jarg1_);
  public final static native void TK_Reference_SetCondition__SWIG_0(long jarg1, TK_Reference jarg1_, String jarg2);
  public final static native void TK_Reference_SetCondition__SWIG_1(long jarg1, TK_Reference jarg1_, int jarg2);
  public final static native String TK_Reference_GetCondition__SWIG_0(long jarg1, TK_Reference jarg1_);
  public final static native void TK_Reference_SetFollow(long jarg1, TK_Reference jarg1_, boolean jarg2);
  public final static native boolean TK_Reference_GetFollow(long jarg1, TK_Reference jarg1_);
  public final static native int Instance_By_Tristrip_get();
  public final static native void TK_Instance_m_from_index_set(long jarg1, TK_Instance jarg1_, int jarg2);
  public final static native int TK_Instance_m_from_index_get(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_m_from_variant_set(long jarg1, TK_Instance jarg1_, int jarg2);
  public final static native int TK_Instance_m_from_variant_get(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_m_to_index_set(long jarg1, TK_Instance jarg1_, int jarg2);
  public final static native int TK_Instance_m_to_index_get(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_m_to_variant_set(long jarg1, TK_Instance jarg1_, int jarg2);
  public final static native int TK_Instance_m_to_variant_get(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_m_options_set(long jarg1, TK_Instance jarg1_, int jarg2);
  public final static native int TK_Instance_m_options_get(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_m_matrix_set(long jarg1, TK_Instance jarg1_, long jarg2);
  public final static native long TK_Instance_m_matrix_get(long jarg1, TK_Instance jarg1_);
  public final static native long new_TK_Instance__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6);
  public final static native long new_TK_Instance__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long new_TK_Instance__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_TK_Instance__SWIG_3(int jarg1, int jarg2, int jarg3);
  public final static native long new_TK_Instance__SWIG_4(int jarg1, int jarg2);
  public final static native long new_TK_Instance__SWIG_5(int jarg1);
  public final static native long new_TK_Instance__SWIG_6();
  public final static native int TK_Instance_Read(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Instance_ReadSwigExplicitTK_Instance(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Instance_Write(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Instance_WriteSwigExplicitTK_Instance(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Instance_Clone(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Instance_CloneSwigExplicitTK_Instance(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Instance_ReadAscii(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Instance_WriteAscii(long jarg1, TK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Instance_Reset(long jarg1, TK_Instance jarg1_);
  public final static native void TK_Instance_ResetSwigExplicitTK_Instance(long jarg1, TK_Instance jarg1_);
  public final static native void delete_TK_Instance(long jarg1);
  public final static native void TK_Instance_director_connect(TK_Instance obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Instance_change_ownership(TK_Instance obj, long cptr, boolean take_or_release);
  public final static native void TK_Delete_Object_m_index_set(long jarg1, TK_Delete_Object jarg1_, int jarg2);
  public final static native int TK_Delete_Object_m_index_get(long jarg1, TK_Delete_Object jarg1_);
  public final static native long new_TK_Delete_Object();
  public final static native int TK_Delete_Object_Read(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Delete_Object_ReadSwigExplicitTK_Delete_Object(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Delete_Object_Write(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Delete_Object_WriteSwigExplicitTK_Delete_Object(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Delete_Object_Clone(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Delete_Object_CloneSwigExplicitTK_Delete_Object(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Delete_Object_ReadAscii(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Delete_Object_WriteAscii(long jarg1, TK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Delete_Object_SetIndex(long jarg1, TK_Delete_Object jarg1_, int jarg2);
  public final static native int TK_Delete_Object_GetIndex(long jarg1, TK_Delete_Object jarg1_);
  public final static native void delete_TK_Delete_Object(long jarg1);
  public final static native void TK_Delete_Object_director_connect(TK_Delete_Object obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Delete_Object_change_ownership(TK_Delete_Object obj, long cptr, boolean take_or_release);
  public final static native void TK_LOD_m_primitives_set(long jarg1, TK_LOD jarg1_, long jarg2);
  public final static native long TK_LOD_m_primitives_get(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_m_highest_level_set(long jarg1, TK_LOD jarg1_, int jarg2);
  public final static native int TK_LOD_m_highest_level_get(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_m_levels_allocated_set(long jarg1, TK_LOD jarg1_, int jarg2);
  public final static native int TK_LOD_m_levels_allocated_get(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_m_substage_set(long jarg1, TK_LOD jarg1_, int jarg2);
  public final static native int TK_LOD_m_substage_get(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_m_current_working_set(long jarg1, TK_LOD jarg1_, long jarg2);
  public final static native long TK_LOD_m_current_working_get(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_m_current_level_set(long jarg1, TK_LOD jarg1_, int jarg2);
  public final static native int TK_LOD_m_current_level_get(long jarg1, TK_LOD jarg1_);
  public final static native int TK_LOD_ReadOneList(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native long new_TK_LOD();
  public final static native void delete_TK_LOD(long jarg1);
  public final static native int TK_LOD_Read(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_LOD_ReadSwigExplicitTK_LOD(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_LOD_Write(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_LOD_WriteSwigExplicitTK_LOD(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_LOD_Clone(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_LOD_CloneSwigExplicitTK_LOD(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_LOD_ReadAscii(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_LOD_WriteAscii(long jarg1, TK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_LOD_Reset(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_ResetSwigExplicitTK_LOD(long jarg1, TK_LOD jarg1_);
  public final static native void TK_LOD_director_connect(TK_LOD obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_LOD_change_ownership(TK_LOD obj, long cptr, boolean take_or_release);
  public final static native int TKLOD_ESCAPE_get();
  public final static native long new_TK_Geometry_Attributes();
  public final static native int TK_Geometry_Attributes_Read(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_ReadSwigExplicitTK_Geometry_Attributes(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_Write(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_WriteSwigExplicitTK_Geometry_Attributes(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_ReadAscii(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_WriteAscii(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_Execute(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Attributes_ExecuteSwigExplicitTK_Geometry_Attributes(long jarg1, TK_Geometry_Attributes jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_TK_Geometry_Attributes(long jarg1);
  public final static native void TK_Geometry_Attributes_director_connect(TK_Geometry_Attributes obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Geometry_Attributes_change_ownership(TK_Geometry_Attributes obj, long cptr, boolean take_or_release);
  public final static native void TK_Renumber_m_key_set(long jarg1, TK_Renumber jarg1_, int jarg2);
  public final static native int TK_Renumber_m_key_get(long jarg1, TK_Renumber jarg1_);
  public final static native long new_TK_Renumber__SWIG_0(short jarg1, int jarg2);
  public final static native long new_TK_Renumber__SWIG_1(short jarg1);
  public final static native int TK_Renumber_Read(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Renumber_ReadSwigExplicitTK_Renumber(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Renumber_Write(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Renumber_WriteSwigExplicitTK_Renumber(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Renumber_Clone(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Renumber_CloneSwigExplicitTK_Renumber(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Renumber_ReadAscii(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Renumber_WriteAscii(long jarg1, TK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Renumber_SetKey(long jarg1, TK_Renumber jarg1_, int jarg2);
  public final static native int TK_Renumber_GetKey(long jarg1, TK_Renumber jarg1_);
  public final static native void delete_TK_Renumber(long jarg1);
  public final static native void TK_Renumber_director_connect(TK_Renumber obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Renumber_change_ownership(TK_Renumber obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Tag__SWIG_0(short jarg1);
  public final static native long new_TK_Tag__SWIG_1();
  public final static native int TK_Tag_Read(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_ReadSwigExplicitTK_Tag(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_Write(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_WriteSwigExplicitTK_Tag(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_ReadAscii(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_WriteAscii(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_Execute(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_ExecuteSwigExplicitTK_Tag(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Tag_Interpret__SWIG_0(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Tag_InterpretSwigExplicitTK_Tag__SWIG_0(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Tag_Interpret__SWIG_1(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Tag_InterpretSwigExplicitTK_Tag__SWIG_1(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Tag_Interpret__SWIG_2(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Tag_InterpretSwigExplicitTK_Tag__SWIG_2(long jarg1, TK_Tag jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void delete_TK_Tag(long jarg1);
  public final static native void TK_Tag_director_connect(TK_Tag obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Tag_change_ownership(TK_Tag obj, long cptr, boolean take_or_release);
  public final static native void TK_Dictionary_m_format_set(long jarg1, TK_Dictionary jarg1_, short jarg2);
  public final static native short TK_Dictionary_m_format_get(long jarg1, TK_Dictionary jarg1_);
  public final static native void TK_Dictionary_m_placeholder_set(long jarg1, TK_Dictionary jarg1_, int jarg2);
  public final static native int TK_Dictionary_m_placeholder_get(long jarg1, TK_Dictionary jarg1_);
  public final static native void TK_Dictionary_m_present_set(long jarg1, TK_Dictionary jarg1_, short jarg2);
  public final static native short TK_Dictionary_m_present_get(long jarg1, TK_Dictionary jarg1_);
  public final static native void TK_Dictionary_m_number_of_items_set(long jarg1, TK_Dictionary jarg1_, int jarg2);
  public final static native int TK_Dictionary_m_number_of_items_get(long jarg1, TK_Dictionary jarg1_);
  public final static native long new_TK_Dictionary();
  public final static native int TK_Dictionary_Read(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_ReadSwigExplicitTK_Dictionary(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Write(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_WriteSwigExplicitTK_Dictionary(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_ReadAscii(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_WriteAscii(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Execute(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_ExecuteSwigExplicitTK_Dictionary(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Interpret__SWIG_0(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Dictionary_InterpretSwigExplicitTK_Dictionary__SWIG_0(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Dictionary_Interpret__SWIG_1(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Dictionary_InterpretSwigExplicitTK_Dictionary__SWIG_1(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Dictionary_Interpret__SWIG_2(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Dictionary_InterpretSwigExplicitTK_Dictionary__SWIG_2(long jarg1, TK_Dictionary jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void TK_Dictionary_Reset(long jarg1, TK_Dictionary jarg1_);
  public final static native void TK_Dictionary_ResetSwigExplicitTK_Dictionary(long jarg1, TK_Dictionary jarg1_);
  public final static native void delete_TK_Dictionary(long jarg1);
  public final static native void TK_Dictionary_director_connect(TK_Dictionary obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Dictionary_change_ownership(TK_Dictionary obj, long cptr, boolean take_or_release);
  public final static native void TK_Dictionary_Locater_m_size_set(long jarg1, TK_Dictionary_Locater jarg1_, int jarg2);
  public final static native int TK_Dictionary_Locater_m_size_get(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native void TK_Dictionary_Locater_m_offset_set(long jarg1, TK_Dictionary_Locater jarg1_, int jarg2);
  public final static native int TK_Dictionary_Locater_m_offset_get(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native long new_TK_Dictionary_Locater();
  public final static native int TK_Dictionary_Locater_Read(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_ReadSwigExplicitTK_Dictionary_Locater(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_Write(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_WriteSwigExplicitTK_Dictionary_Locater(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_ReadAscii(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_WriteAscii(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_Execute(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_ExecuteSwigExplicitTK_Dictionary_Locater(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dictionary_Locater_Interpret__SWIG_0(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Dictionary_Locater_InterpretSwigExplicitTK_Dictionary_Locater__SWIG_0(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Dictionary_Locater_Interpret__SWIG_1(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Dictionary_Locater_InterpretSwigExplicitTK_Dictionary_Locater__SWIG_1(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Dictionary_Locater_Interpret__SWIG_2(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Dictionary_Locater_InterpretSwigExplicitTK_Dictionary_Locater__SWIG_2(long jarg1, TK_Dictionary_Locater jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void TK_Dictionary_Locater_Reset(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native void TK_Dictionary_Locater_ResetSwigExplicitTK_Dictionary_Locater(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native void TK_Dictionary_Locater_SetSize(long jarg1, TK_Dictionary_Locater jarg1_, int jarg2);
  public final static native int TK_Dictionary_Locater_GetSize(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native void TK_Dictionary_Locater_SetOffset(long jarg1, TK_Dictionary_Locater jarg1_, int jarg2);
  public final static native int TK_Dictionary_Locater_GetOffset(long jarg1, TK_Dictionary_Locater jarg1_);
  public final static native void delete_TK_Dictionary_Locater(long jarg1);
  public final static native void TK_Dictionary_Locater_director_connect(TK_Dictionary_Locater obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Dictionary_Locater_change_ownership(TK_Dictionary_Locater obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_m_mask_set(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native int TK_Color_m_mask_get(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_m_channels_set(long jarg1, TK_Color jarg1_, short jarg2);
  public final static native short TK_Color_m_channels_get(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_m_gloss_set(long jarg1, TK_Color jarg1_, float jarg2);
  public final static native float TK_Color_m_gloss_get(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_m_index_set(long jarg1, TK_Color jarg1_, float jarg2);
  public final static native float TK_Color_m_index_get(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_m_substage_set(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native int TK_Color_m_substage_get(long jarg1, TK_Color jarg1_);
  public final static native long new_TK_Color();
  public final static native void delete_TK_Color(long jarg1);
  public final static native int TK_Color_Read(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_ReadSwigExplicitTK_Color(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Write(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_WriteSwigExplicitTK_Color(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Clone(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_CloneSwigExplicitTK_Color(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_ReadAscii(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_WriteAscii(long jarg1, TK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_Reset(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_ResetSwigExplicitTK_Color(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetGeometry(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native int TK_Color_GetGeometry(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetChannels(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native int TK_Color_GetChannels(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetDiffuse__SWIG_0(long jarg1, TK_Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_SetDiffuse__SWIG_1(long jarg1, TK_Color jarg1_, float[] jarg2);
  public final static native void TK_Color_SetDiffuseName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetDiffuseName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetDiffuseName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetSpecular__SWIG_0(long jarg1, TK_Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_SetSpecular__SWIG_1(long jarg1, TK_Color jarg1_, float[] jarg2);
  public final static native void TK_Color_SetSpecularName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetSpecularName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetSpecularName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetMirror__SWIG_0(long jarg1, TK_Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_SetMirror__SWIG_1(long jarg1, TK_Color jarg1_, float[] jarg2);
  public final static native void TK_Color_SetMirrorName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetMirrorName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetMirrorName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetTransmission__SWIG_0(long jarg1, TK_Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_SetTransmission__SWIG_1(long jarg1, TK_Color jarg1_, float[] jarg2);
  public final static native void TK_Color_SetTransmissionName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetTransmissionName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetTransmissionName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetEmission__SWIG_0(long jarg1, TK_Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_SetEmission__SWIG_1(long jarg1, TK_Color jarg1_, float[] jarg2);
  public final static native void TK_Color_SetEmissionName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetEmissionName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetEmissionName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetEnvironmentName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetEnvironmentName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetEnvironmentName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetBumpName__SWIG_0(long jarg1, TK_Color jarg1_, String jarg2);
  public final static native void TK_Color_SetBumpName__SWIG_1(long jarg1, TK_Color jarg1_, int jarg2);
  public final static native String TK_Color_GetBumpName__SWIG_0(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetGloss(long jarg1, TK_Color jarg1_, float jarg2);
  public final static native float TK_Color_GetGloss(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_SetIndex(long jarg1, TK_Color jarg1_, float jarg2);
  public final static native float TK_Color_GetIndex(long jarg1, TK_Color jarg1_);
  public final static native void TK_Color_director_connect(TK_Color obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_change_ownership(TK_Color obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_RGB_m_mask_set(long jarg1, TK_Color_RGB jarg1_, int jarg2);
  public final static native int TK_Color_RGB_m_mask_get(long jarg1, TK_Color_RGB jarg1_);
  public final static native void TK_Color_RGB_m_rgb_set(long jarg1, TK_Color_RGB jarg1_, long jarg2);
  public final static native long TK_Color_RGB_m_rgb_get(long jarg1, TK_Color_RGB jarg1_);
  public final static native long new_TK_Color_RGB();
  public final static native int TK_Color_RGB_Read(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_RGB_ReadSwigExplicitTK_Color_RGB(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_RGB_Write(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_RGB_WriteSwigExplicitTK_Color_RGB(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_RGB_Clone(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_RGB_CloneSwigExplicitTK_Color_RGB(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_RGB_ReadAscii(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_RGB_WriteAscii(long jarg1, TK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_RGB_SetGeometry(long jarg1, TK_Color_RGB jarg1_, int jarg2);
  public final static native int TK_Color_RGB_GetGeometry(long jarg1, TK_Color_RGB jarg1_);
  public final static native void TK_Color_RGB_SetRGB__SWIG_0(long jarg1, TK_Color_RGB jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_RGB_SetRGB__SWIG_1(long jarg1, TK_Color_RGB jarg1_, float[] jarg2);
  public final static native void delete_TK_Color_RGB(long jarg1);
  public final static native void TK_Color_RGB_director_connect(TK_Color_RGB obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_RGB_change_ownership(TK_Color_RGB obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_By_Value_m_mask_set(long jarg1, TK_Color_By_Value jarg1_, int jarg2);
  public final static native int TK_Color_By_Value_m_mask_get(long jarg1, TK_Color_By_Value jarg1_);
  public final static native void TK_Color_By_Value_m_value_set(long jarg1, TK_Color_By_Value jarg1_, long jarg2);
  public final static native long TK_Color_By_Value_m_value_get(long jarg1, TK_Color_By_Value jarg1_);
  public final static native void TK_Color_By_Value_m_space_set(long jarg1, TK_Color_By_Value jarg1_, char jarg2);
  public final static native char TK_Color_By_Value_m_space_get(long jarg1, TK_Color_By_Value jarg1_);
  public final static native long new_TK_Color_By_Value();
  public final static native int TK_Color_By_Value_Read(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Value_ReadSwigExplicitTK_Color_By_Value(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Value_Write(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Value_WriteSwigExplicitTK_Color_By_Value(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Value_Clone(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_Value_CloneSwigExplicitTK_Color_By_Value(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_Value_ReadAscii(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Value_WriteAscii(long jarg1, TK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_By_Value_SetGeometry(long jarg1, TK_Color_By_Value jarg1_, int jarg2);
  public final static native int TK_Color_By_Value_GetGeometry(long jarg1, TK_Color_By_Value jarg1_);
  public final static native void TK_Color_By_Value_SetSpace(long jarg1, TK_Color_By_Value jarg1_, int jarg2);
  public final static native int TK_Color_By_Value_GetSpace(long jarg1, TK_Color_By_Value jarg1_);
  public final static native void TK_Color_By_Value_SetValue__SWIG_0(long jarg1, TK_Color_By_Value jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Color_By_Value_SetValue__SWIG_1(long jarg1, TK_Color_By_Value jarg1_, float[] jarg2);
  public final static native void delete_TK_Color_By_Value(long jarg1);
  public final static native void TK_Color_By_Value_director_connect(TK_Color_By_Value obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_By_Value_change_ownership(TK_Color_By_Value obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_By_Index_m_mask_set(long jarg1, TK_Color_By_Index jarg1_, int jarg2);
  public final static native int TK_Color_By_Index_m_mask_get(long jarg1, TK_Color_By_Index jarg1_);
  public final static native void TK_Color_By_Index_m_index_set(long jarg1, TK_Color_By_Index jarg1_, int jarg2);
  public final static native int TK_Color_By_Index_m_index_get(long jarg1, TK_Color_By_Index jarg1_);
  public final static native long new_TK_Color_By_Index(short jarg1);
  public final static native int TK_Color_By_Index_Read(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Index_ReadSwigExplicitTK_Color_By_Index(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Index_Write(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Index_WriteSwigExplicitTK_Color_By_Index(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Index_Clone(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_Index_CloneSwigExplicitTK_Color_By_Index(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_Index_ReadAscii(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_Index_WriteAscii(long jarg1, TK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_By_Index_SetGeometry(long jarg1, TK_Color_By_Index jarg1_, int jarg2);
  public final static native int TK_Color_By_Index_GetGeometry(long jarg1, TK_Color_By_Index jarg1_);
  public final static native void TK_Color_By_Index_SetIndex(long jarg1, TK_Color_By_Index jarg1_, int jarg2);
  public final static native int TK_Color_By_Index_GetIndex(long jarg1, TK_Color_By_Index jarg1_);
  public final static native void delete_TK_Color_By_Index(long jarg1);
  public final static native void TK_Color_By_Index_director_connect(TK_Color_By_Index obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_By_Index_change_ownership(TK_Color_By_Index obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_By_FIndex_m_mask_set(long jarg1, TK_Color_By_FIndex jarg1_, int jarg2);
  public final static native int TK_Color_By_FIndex_m_mask_get(long jarg1, TK_Color_By_FIndex jarg1_);
  public final static native void TK_Color_By_FIndex_m_index_set(long jarg1, TK_Color_By_FIndex jarg1_, float jarg2);
  public final static native float TK_Color_By_FIndex_m_index_get(long jarg1, TK_Color_By_FIndex jarg1_);
  public final static native long new_TK_Color_By_FIndex();
  public final static native int TK_Color_By_FIndex_Read(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_FIndex_ReadSwigExplicitTK_Color_By_FIndex(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_FIndex_Write(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_FIndex_WriteSwigExplicitTK_Color_By_FIndex(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_FIndex_Clone(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_FIndex_CloneSwigExplicitTK_Color_By_FIndex(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_By_FIndex_ReadAscii(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_By_FIndex_WriteAscii(long jarg1, TK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_By_FIndex_SetGeometry(long jarg1, TK_Color_By_FIndex jarg1_, int jarg2);
  public final static native int TK_Color_By_FIndex_GetGeometry(long jarg1, TK_Color_By_FIndex jarg1_);
  public final static native void TK_Color_By_FIndex_SetIndex(long jarg1, TK_Color_By_FIndex jarg1_, float jarg2);
  public final static native float TK_Color_By_FIndex_GetIndex(long jarg1, TK_Color_By_FIndex jarg1_);
  public final static native void delete_TK_Color_By_FIndex(long jarg1);
  public final static native void TK_Color_By_FIndex_director_connect(TK_Color_By_FIndex obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_By_FIndex_change_ownership(TK_Color_By_FIndex obj, long cptr, boolean take_or_release);
  public final static native void TK_Color_Map_m_length_set(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native int TK_Color_Map_m_length_get(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_m_values_length_set(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native int TK_Color_Map_m_values_length_get(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_m_string_length_set(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native int TK_Color_Map_m_string_length_get(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_m_format_set(long jarg1, TK_Color_Map jarg1_, short jarg2);
  public final static native short TK_Color_Map_m_format_get(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_set_values__SWIG_0(long jarg1, TK_Color_Map jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Color_Map_set_values__SWIG_1(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native long new_TK_Color_Map();
  public final static native void delete_TK_Color_Map(long jarg1);
  public final static native int TK_Color_Map_Read(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Map_ReadSwigExplicitTK_Color_Map(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Map_Write(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Map_WriteSwigExplicitTK_Color_Map(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Map_Clone(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_Map_CloneSwigExplicitTK_Color_Map(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Color_Map_ReadAscii(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Color_Map_WriteAscii(long jarg1, TK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Color_Map_Reset(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_ResetSwigExplicitTK_Color_Map(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_SetFormat(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native int TK_Color_Map_GetFormat(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_SetValues__SWIG_0(long jarg1, TK_Color_Map jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Color_Map_SetValues__SWIG_1(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native int TK_Color_Map_GetLength(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_SetString__SWIG_0(long jarg1, TK_Color_Map jarg1_, String jarg2);
  public final static native void TK_Color_Map_SetString__SWIG_1(long jarg1, TK_Color_Map jarg1_, int jarg2);
  public final static native String TK_Color_Map_GetString__SWIG_0(long jarg1, TK_Color_Map jarg1_);
  public final static native void TK_Color_Map_director_connect(TK_Color_Map obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Color_Map_change_ownership(TK_Color_Map obj, long cptr, boolean take_or_release);
  public final static native void TK_Callback_m_length_set(long jarg1, TK_Callback jarg1_, int jarg2);
  public final static native int TK_Callback_m_length_get(long jarg1, TK_Callback jarg1_);
  public final static native void TK_Callback_set_callback__SWIG_0(long jarg1, TK_Callback jarg1_, String jarg2);
  public final static native void TK_Callback_set_callback__SWIG_1(long jarg1, TK_Callback jarg1_, int jarg2);
  public final static native long new_TK_Callback();
  public final static native void delete_TK_Callback(long jarg1);
  public final static native int TK_Callback_Read(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Callback_ReadSwigExplicitTK_Callback(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Callback_Write(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Callback_WriteSwigExplicitTK_Callback(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Callback_Clone(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Callback_CloneSwigExplicitTK_Callback(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Callback_ReadAscii(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Callback_WriteAscii(long jarg1, TK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Callback_Reset(long jarg1, TK_Callback jarg1_);
  public final static native void TK_Callback_ResetSwigExplicitTK_Callback(long jarg1, TK_Callback jarg1_);
  public final static native void TK_Callback_SetCallback__SWIG_0(long jarg1, TK_Callback jarg1_, String jarg2);
  public final static native void TK_Callback_SetCallback__SWIG_1(long jarg1, TK_Callback jarg1_, int jarg2);
  public final static native String TK_Callback_GetCallback__SWIG_0(long jarg1, TK_Callback jarg1_);
  public final static native void TK_Callback_director_connect(TK_Callback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Callback_change_ownership(TK_Callback obj, long cptr, boolean take_or_release);
  public final static native int TKO_Interp_Texture_Faces_get();
  public final static native int TKO_Interp_Texture_Edges_get();
  public final static native int TKO_Interp_Texture_Markers_get();
  public final static native int TKO_Interp_Texture_get();
  public final static native int TKO_Interp_Color_Faces_get();
  public final static native int TKO_Interp_Color_Edges_get();
  public final static native int TKO_Interp_Color_Markers_get();
  public final static native int TKO_Interp_Color_get();
  public final static native int TKO_Interp_Index_Faces_get();
  public final static native int TKO_Interp_Index_Edges_get();
  public final static native int TKO_Interp_Index_FE_get();
  public final static native int TKO_Interp_Lighting_Faces_Gouraud_get();
  public final static native int TKO_Interp_Lighting_Faces_Phong_get();
  public final static native int TKO_Interp_Lighting_Edges_Gouraud_get();
  public final static native int TKO_Interp_Lighting_Edges_Phong_get();
  public final static native int TKO_Interp_Lighting_Faces_get();
  public final static native int TKO_Interp_Lighting_Edges_get();
  public final static native int TKO_Interp_Lighting_Gouraud_get();
  public final static native int TKO_Interp_Lighting_Phong_get();
  public final static native int TKO_Interp_Lighting_get();
  public final static native int TKO_Rendo_HSR_Algorithm_get();
  public final static native int TKO_Rendo_THSR_Algorithm_get();
  public final static native int TKO_Rendo_Any_HSR_get();
  public final static native int TKO_Rendo_Local_Viewer_get();
  public final static native int TKO_Rendo_Perspective_Correction_get();
  public final static native int TKO_Rendo_Display_Lists_get();
  public final static native int TKO_Rendo_Debug_get();
  public final static native int TKO_Rendo_Technology_get();
  public final static native int TKO_Rendo_Quantization_get();
  public final static native int TKO_Rendo_TQ_get();
  public final static native int TKO_Rendo_Attribute_Lock_get();
  public final static native int TKO_Rendo_Face_Displacement_get();
  public final static native int TKO_Rendo_Fog_get();
  public final static native int TKO_Rendo_Buffer_Options_get();
  public final static native int TKO_Rendo_Hidden_Line_Options_get();
  public final static native int TKO_Rendo_LOD_get();
  public final static native int TKO_Rendo_LOD_Options_get();
  public final static native int TKO_Rendo_NURBS_Curve_Options_get();
  public final static native int TKO_Rendo_NURBS_Surface_Options_get();
  public final static native int TKO_Rendo_NURBS_Options_get();
  public final static native int TKO_Rendo_Stereo_get();
  public final static native int TKO_Rendo_Stereo_Separation_get();
  public final static native int TKO_Rendo_Extended_get();
  public final static native int TKO_Rendo_Tessellation_get();
  public final static native int TKO_Rendo_Transparency_Style_get();
  public final static native int TKO_Rendo_Transparency_Hardware_get();
  public final static native int TKO_Rendo_Cut_Geometry_get();
  public final static native int TKO_Rendo_Depth_Range_get();
  public final static native int TKO_Rendo_Mask_Transform_get();
  public final static native int TKO_Rendo_Image_Scale_get();
  public final static native int TKO_Rendo_Local_Cutting_Planes_get();
  public final static native int TKO_Rendo_Simple_Shadow_get();
  public final static native int TKO_Rendo_Geometry_Options_get();
  public final static native int TKO_Rendo_Image_Tint_get();
  public final static native int TKO_Interp_Index_Face_Isolines_get();
  public final static native int TKO_Rendo_Force_Grayscale_get();
  public final static native int TKO_Rendo_Transparency_Options_get();
  public final static native int TKO_Rendo_General_Displacement_get();
  public final static native int TKO_Rendo_Join_Cutoff_Angle_get();
  public final static native int TKO_Rendo_Screen_Range_get();
  public final static native int TKO_Rendo_Stereo_Distance_get();
  public final static native int TKO_Rendo_Shadow_Map_get();
  public final static native int TKO_Rendo_Simple_Reflection_get();
  public final static native int TKO_Rendo_Ambient_Up_Vector_get();
  public final static native int TKO_Rendo_Gooch_Color_Range_get();
  public final static native int TKO_Rendo_Gooch_Diffuse_Weight_get();
  public final static native int TKO_Rendo_Antialias_get();
  public final static native int TKO_Interp_Index_Markers_get();
  public final static native int TKO_Rendo_Gooch_Color_Map_get();
  public final static native int TKO_Interp_Lighting_Faces_Gooch_get();
  public final static native int TKO_Interp_Lighting_Edges_Gooch_get();
  public final static native int TKO_Interp_Lighting_Gooch_get();
  public final static native int TKO_Rendo_Transparency_Depth_Writing_get();
  public final static native int TKO_Rendo_Vertex_Decimation_get();
  public final static native int TKO_Rendo_Vertex_Displacement_get();
  public final static native int TKO_Rendo_Extended2_get();
  public final static native int TKO_Rendo_Forced_Lock_get();
  public final static native int TKO_Rendo_Frame_Buffer_Effects_get();
  public final static native int TKO_Rendo_Scaled_Displacement_get();
  public final static native int TKO_Rendo_Contour_Options_get();
  public final static native int TKO_Rendo_Isoline_Options_get();
  public final static native int TKO_Rendo_Diffuse_Texture_Tint_get();
  public final static native int TKO_Rendo_Diffuse_Color_Tint_get();
  public final static native int TKO_Rendo_Edge_Join_Cutoff_Angle_get();
  public final static native int TKO_Rendo_Bump_Mapping_Parallax_get();
  public final static native int TKO_Rendo_Randomize_Vertices_get();
  public final static native int TKO_HSR_Hardware_get();
  public final static native int TKO_HSR_SZB_get();
  public final static native int TKO_HSR_Painters_get();
  public final static native int TKO_HSR_Z_Sort_Only_get();
  public final static native int TKO_HSR_Priority_get();
  public final static native int TKO_HSR_Spider_Web_get();
  public final static native int TKO_HSR_Hidden_Line_get();
  public final static native int TKO_HSR_None_get();
  public final static native int TKO_HSR_Fast_Hidden_Line_get();
  public final static native int TKO_HSR_Depth_Peeling_get();
  public final static native int TKO_HSR_Mask_get();
  public final static native int TKO_THSR_Mask_get();
  public final static native int TKO_Peeling_Buffer_get();
  public final static native int TKO_Peeling_Pixel_get();
  public final static native int TKO_Transparency_None_get();
  public final static native int TKO_Transparency_Blending_get();
  public final static native int TKO_Transparency_Screen_Door_get();
  public final static native int TKO_Transparency_Style_Mask_get();
  public final static native int TKO_Transparency_Peeling_Layers_get();
  public final static native int TKO_Transparency_Peeling_Min_Area_get();
  public final static native int TKO_Transparency_Peeling_Algorithm_get();
  public final static native int TKO_Transparency_Extended_get();
  public final static native int TKO_Transparency_Extended_Mask_get();
  public final static native int TKO_Transparency_Extended_Shift_get();
  public final static native int TKO_Transparency_ZSort_Fast_get();
  public final static native int TKO_Transparency_ZSort_Nice_get();
  public final static native int TKO_Cut_Geometry_Level_get();
  public final static native int TKO_Cut_Geometry_Tolerance_get();
  public final static native int TKO_Cut_Geometry_Match_Color_get();
  public final static native int TKO_Cut_Geometry_Level_Entity_get();
  public final static native int TKO_Cut_Geometry_Level_Segment_get();
  public final static native int TKO_Cut_Geometry_Level_Segment_Tree_get();
  public final static native int TKO_Cut_Geometry_Match_Color_Off_get();
  public final static native int TKO_Cut_Geometry_Match_Color_Current_get();
  public final static native int TKO_Cut_Geometry_Match_Color_First_get();
  public final static native int TKO_Cut_Geometry_Match_Color_Last_get();
  public final static native int TKO_Display_List_Level_Entity_get();
  public final static native int TKO_Display_List_Level_Segment_get();
  public final static native int TKO_Display_List_Level_Segment_Tree_get();
  public final static native int TKO_Simple_Shadow_On_get();
  public final static native int TKO_Simple_Shadow_Off_get();
  public final static native int TKO_Simple_Shadow_Plane_get();
  public final static native int TKO_Simple_Shadow_Light_Direction_get();
  public final static native int TKO_Simple_Shadow_Color_get();
  public final static native int TKO_Simple_Shadow_Resolution_get();
  public final static native int TKO_Simple_Shadow_Blur_get();
  public final static native int TKO_Simple_Shadow_Extended_get();
  public final static native int TKO_Simple_Shadow_Extended_Mask_get();
  public final static native int TKO_Simple_Shadow_Extended_Shift_get();
  public final static native int TKO_Simple_Shadow_Auto_get();
  public final static native int TKO_Simple_Shadow_Opacity_get();
  public final static native int TKO_Simple_Shadow_Ignore_Transparency_get();
  public final static native int TKO_Simple_Shadow_Use_Transparency_get();
  public final static native int TKO_Simple_Shadow_Extended2_get();
  public final static native int TKO_Shadow_Map_On_get();
  public final static native int TKO_Shadow_Map_Off_get();
  public final static native int TKO_Shadow_Map_Resolution_get();
  public final static native int TKO_Shadow_Map_Samples_get();
  public final static native int TKO_Shadow_Map_Jitter_On_get();
  public final static native int TKO_Shadow_Map_Jitter_Off_get();
  public final static native int TKO_Shadow_Map_Extended_get();
  public final static native int TKO_Shadow_Map_View_Depedent_On_get();
  public final static native int TKO_Shadow_Map_View_Depedent_Off_get();
  public final static native int TKO_Shadow_Map_Extended_Mask_get();
  public final static native int TKO_Shadow_Map_Extended2_get();
  public final static native int TKO_Simple_Reflection_On_get();
  public final static native int TKO_Simple_Reflection_Off_get();
  public final static native int TKO_Simple_Reflection_Plane_get();
  public final static native int TKO_Simple_Reflection_Opacity_get();
  public final static native int TKO_Simple_Reflection_Fading_On_get();
  public final static native int TKO_Simple_Reflection_Fading_Off_get();
  public final static native int TKO_Simple_Reflection_Blur_get();
  public final static native int TKO_Simple_Reflection_Extended_get();
  public final static native int TKO_Simple_Reflection_Extended_Mask_get();
  public final static native int TKO_Simple_Reflection_Extended_Shift_get();
  public final static native int TKO_Simple_Reflection_Attenuation_get();
  public final static native int TKO_Simple_Reflection_Visibility_get();
  public final static native int TKO_Simple_Reflection_Extended2_get();
  public final static native int TKO_Mask_None_get();
  public final static native int TKO_Mask_Camera_Rotation_get();
  public final static native int TKO_Mask_Camera_Scale_get();
  public final static native int TKO_Mask_Camera_Translation_get();
  public final static native int TKO_Mask_Camera_Perspective_get();
  public final static native int TKO_Mask_Model_Rotation_get();
  public final static native int TKO_Mask_Model_Scale_get();
  public final static native int TKO_Mask_Model_Translation_get();
  public final static native int TKO_Mask_Camera_get();
  public final static native int TKO_Mask_Model_get();
  public final static native int TKO_Mask_All_get();
  public final static native int TKO_Mask_Extended_get();
  public final static native int TKO_Mask_Extended_Mask_get();
  public final static native int TKO_Mask_Extended_Shift_get();
  public final static native int TKO_Mask_Camera_Offset_get();
  public final static native int TKO_Mask_Model_Offset_get();
  public final static native int TKO_Mask_Camera_Projection_get();
  public final static native int TKO_Technology_Standard_get();
  public final static native int TKO_Technology_Soft_Frame_Buffer_get();
  public final static native int TKO_Technology_Radiosity_get();
  public final static native int TKO_Technology_Ray_Trace_get();
  public final static native int TKO_Technology_Mask_get();
  public final static native int TKO_Quantization_Threshold_get();
  public final static native int TKO_Quantization_Dither_get();
  public final static native int TKO_Quantization_Error_Diffusion_get();
  public final static native int TKO_Quantization_Mask_get();
  public final static native int TKO_Buffer_Size_Limit_get();
  public final static native int TKO_Buffer_Retention_get();
  public final static native int TKO_Buffer_Color_Depth_Match_get();
  public final static native int TKO_Buffer_Color_Depth_Full_get();
  public final static native int TKO_Antialias_Screen_On_get();
  public final static native int TKO_Antialias_Lines_On_get();
  public final static native int TKO_Antialias_Text_On_get();
  public final static native int TKO_Antialias_All_On_get();
  public final static native int TKO_Antialias_Screen_Off_get();
  public final static native int TKO_Antialias_Lines_Off_get();
  public final static native int TKO_Antialias_Text_Off_get();
  public final static native int TKO_Antialias_All_Off_get();
  public final static native int TKO_Hidden_Line_Visibility_On_get();
  public final static native int TKO_Hidden_Line_Visibility_Off_get();
  public final static native int TKO_Hidden_Line_Pattern_get();
  public final static native int TKO_Hidden_Line_Face_Displacement_get();
  public final static native int TKO_Hidden_Line_Dim_Factor_get();
  public final static native int TKO_Hidden_Line_Render_Faces_On_get();
  public final static native int TKO_Hidden_Line_Render_Faces_Off_get();
  public final static native int TKO_Hidden_Line_Extended_get();
  public final static native int TKO_Hidden_Line_Extended_Mask_get();
  public final static native int TKO_Hidden_Line_Extended_Shift_get();
  public final static native int TKO_Hidden_Line_Silhouette_Cleanup_On_get();
  public final static native int TKO_Hidden_Line_Silhouette_Cleanup_Off_get();
  public final static native int TKO_Hidden_Line_Extended2_get();
  public final static native int TKO_Hidden_Line_Extended2_Mask_get();
  public final static native int TKO_Hidden_Line_Extended2_Shift_get();
  public final static native int TKO_Hidden_Line_Color_get();
  public final static native int TKO_Hidden_Line_Weight_get();
  public final static native int TKO_Hidden_Line_Image_Outline_On_get();
  public final static native int TKO_Hidden_Line_Image_Outline_Off_get();
  public final static native int TKO_Hidden_Line_HSR_Algorithm_get();
  public final static native int TKO_Hidden_Line_Render_Text_On_get();
  public final static native int TKO_Hidden_Line_Render_Text_Off_get();
  public final static native int TKO_Hidden_Line_Transparency_Cutoff_get();
  public final static native int TKO_Hidden_Line_Remove_Duplicates_On_get();
  public final static native int TKO_Hidden_Line_Remove_Duplicates_Off_get();
  public final static native int TKO_Contour_Face_Visibility_On_get();
  public final static native int TKO_Contour_Face_Visibility_Off_get();
  public final static native int TKO_Contour_Isoline_Visibility_On_get();
  public final static native int TKO_Contour_Isoline_Visibility_Off_get();
  public final static native int TKO_Contour_Visibility_Mask_get();
  public final static native int TKO_Contour_Value_Adjustment_get();
  public final static native int TKO_Contour_Adjustment_None_get();
  public final static native int TKO_Contour_Adjustment_Normalized_get();
  public final static native int TKO_Contour_Adjustment_Explicit_get();
  public final static native int TKO_Isoline_Positions_get();
  public final static native int TKO_Isoline_Colors_get();
  public final static native int TKO_Isoline_Patterns_get();
  public final static native int TKO_Isoline_Weights_get();
  public final static native int TKO_Isoline_Lighting_On_get();
  public final static native int TKO_Isoline_Lighting_Off_get();
  public final static native int TKO_Isoline_Positions_Default_get();
  public final static native int TKO_Isoline_Positions_Repeat_get();
  public final static native int TKO_Isoline_Positions_Explicit_get();
  public final static native int TKO_Tint_On_get();
  public final static native int TKO_Tint_Off_get();
  public final static native int TKO_Tint_Range_get();
  public final static native int TKO_Tint_Color_get();
  public final static native int TKO_Tint_Effect_get();
  public final static native int TKO_Tint_Effect_Grayscale_get();
  public final static native int TKO_Tint_Effect_Modulate_get();
  public final static native int TKO_Tint_Effect_Modulate_Gray_get();
  public final static native int TKO_Tint_Effect_Tone_get();
  public final static native int TKO_LOD_Conserve_Memory_get();
  public final static native int TKO_LOD_Screen_Space_get();
  public final static native int TKO_LOD_Physical_get();
  public final static native int TKO_LOD_Tolerance_FRU_get();
  public final static native int TKO_LOD_Tolerance_ORU_get();
  public final static native int TKO_LOD_Preprocess_get();
  public final static native int TKO_LOD_Bounding_Current_get();
  public final static native int TKO_LOD_Bounding_Explicit_get();
  public final static native int TKO_LOD_Ratio_get();
  public final static native int TKO_LOD_Threshold_get();
  public final static native int TKO_LOD_Min_Triangle_Count_get();
  public final static native int TKO_LOD_Clamp_get();
  public final static native int TKO_LOD_Num_Levels_get();
  public final static native int TKO_LOD_Max_Degree_get();
  public final static native int TKO_LOD_Tolerance_get();
  public final static native int TKO_LOD_Usefulness_Heuristic_get();
  public final static native int TKO_LOD_Calculation_Cutoff_get();
  public final static native int TKO_LOD_Fallback_get();
  public final static native int TKO_LOD_Collapse_Vertices_get();
  public final static native int TKO_LOD_Algorithm_get();
  public final static native int TKO_LOD_Mode_Segment_get();
  public final static native int TKO_LOD_Threshold_Tris_Per_Pix_Sq_get();
  public final static native int TKO_LOD_Threshold_Tris_Per_CM_Sq_get();
  public final static native int TKO_LOD_Threshold_Percent_Area_get();
  public final static native int TKO_LOD_Threshold_Distance_get();
  public final static native int TKO_LOD_Algorithm_Fast_get();
  public final static native int TKO_LOD_Algorithm_Nice_get();
  public final static native int TKO_LOD_Heur_Is_Diagonal_get();
  public final static native int TKO_LOD_Heur_Is_Per_Triangle_get();
  public final static native int TKO_LOD_Heur_Is_Ratio_get();
  public final static native int TKO_LOD_Heur_Is_Volume_get();
  public final static native int TKO_LOD_Heur_Triangle_Size_get();
  public final static native int TKO_LOD_Heur_Diag_get();
  public final static native int TKO_LOD_Heur_Tri_Diag_get();
  public final static native int TKO_LOD_Heur_Diag_Ratio_get();
  public final static native int TKO_LOD_Heur_Tri_Diag_Ratio_get();
  public final static native int TKO_LOD_Heur_Vol_get();
  public final static native int TKO_LOD_Heur_Tri_Vol_get();
  public final static native int TKO_LOD_Heur_Vol_Ratio_get();
  public final static native int TKO_LOD_Heur_Tri_Vol_Ratio_get();
  public final static native int TKO_LOD_Fallback_None_get();
  public final static native int TKO_LOD_Fallback_Bounding_get();
  public final static native int TKO_LOD_Fallback_Coarsest_get();
  public final static native int TKO_LOD_Fallback_Coarsest_None_get();
  public final static native int TKO_LOD_Fallback_Coarsest_Bounding_get();
  public final static native int TKO_LOD_Fallback_Bounding_None_get();
  public final static native int TKO_NURBS_Curve_Budget_get();
  public final static native int TKO_NURBS_Curve_Continued_Budget_get();
  public final static native int TKO_NURBS_Curve_View_Dependent_get();
  public final static native int TKO_NURBS_Curve_Max_Deviation_get();
  public final static native int TKO_NURBS_Surface_Budget_get();
  public final static native int TKO_NURBS_Surface_Trim_Budget_get();
  public final static native int TKO_NURBS_Surface_Max_Facet_Width_get();
  public final static native int TKO_NURBS_Curve_Max_Angle_get();
  public final static native int TKO_NURBS_Curve_Max_Length_get();
  public final static native int TKO_NURBS_Extended_get();
  public final static native int TKO_NURBS_Extended_Mask_get();
  public final static native int TKO_NURBS_Extended_Shift_get();
  public final static native int TKO_NURBS_Surface_Max_Facet_Angle_get();
  public final static native int TKO_NURBS_Surface_Max_Facet_Deviation_get();
  public final static native int TKO_NURBS_Surface_Max_Trim_Curve_Deviation_get();
  public final static native int TKO_NURBS_Curve_Mask_get();
  public final static native int TKO_NURBS_Surface_Mask_get();
  public final static native int TKO_Tessellation_Cylinder_get();
  public final static native int TKO_Tessellation_Sphere_get();
  public final static native int TKO_Geometry_Options_Dihedral_get();
  public final static native int TKO_Geometry_Options_Reverse_PolyCylinder_Radii_get();
  public final static native int TKO_Geometry_Options_No_Reverse_PolyCylinder_Radii_get();
  public final static native int TKO_Geometry_Options_Reverse_PolyCylinder_Colors_get();
  public final static native int TKO_Geometry_Options_No_Reverse_PolyCylinder_Colors_get();
  public final static native int TKO_Geometry_Options_FEA_Nodes_On_get();
  public final static native int TKO_Geometry_Options_FEA_Nodes_Off_get();
  public final static native int TKO_Geometry_Options_Extended_get();
  public final static native void TK_Rendering_Options_m_mask_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_mask_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_value_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_value_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hsr_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_hsr_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tq_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_tq_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_debug_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_debug_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_face_displacement_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_face_displacement_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_vertex_displacement_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_vertex_displacement_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_fog_limits_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_fog_limits_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_lock_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2, Lock_Masks jarg2_);
  public final static native long TK_Rendering_Options_m_lock_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_forced_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2, Lock_Masks jarg2_);
  public final static native long TK_Rendering_Options_m_forced_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_buffer_options_mask_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_buffer_options_mask_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_buffer_options_value_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_buffer_options_value_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_buffer_size_limit_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_buffer_size_limit_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_options_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_hlr_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_dim_factor_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_hlr_dim_factor_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_face_displacement_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_hlr_face_displacement_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_transparency_cutoff_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_hlr_transparency_cutoff_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_line_pattern_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_hlr_line_pattern_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_color_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_hlr_color_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_weight_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_hlr_weight_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_weight_units_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_hlr_weight_units_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_hlr_hsr_algorithm_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_hlr_hsr_algorithm_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_contour_options_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_contour_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_options_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_isoline_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_contour_value_adjustment_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_contour_value_adjustment_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_contour_value_scale_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_contour_value_scale_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_contour_value_translate_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_contour_value_translate_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_position_type_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_isoline_position_type_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_position_count_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_isoline_position_count_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_color_count_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_isoline_color_count_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_pattern_count_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_isoline_pattern_count_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_patterns_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_isoline_patterns_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_isoline_weight_count_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_isoline_weight_count_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tint_options_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_tint_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tint_color_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_tint_color_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tint_range_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_tint_range_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tint_effect_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_tint_effect_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_lod_options_mask_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_lod_options_mask_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_lod_options_value_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_lod_options_value_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_lod_algorithm_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_lod_algorithm_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_ratios_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_num_ratios_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_ratio_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_ratio_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_thresholds_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_num_thresholds_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_threshold_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_threshold_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_threshold_type_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_threshold_type_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_min_triangle_count_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_min_triangle_count_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_clamp_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_clamp_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_levels_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_num_levels_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_max_degree_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_max_degree_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tolerance_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_tolerance_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_bounding_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_bounding_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_cutoffs_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_num_cutoffs_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cutoff_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_cutoff_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_heuristic_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_heuristic_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_fallback_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_fallback_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_nurbs_options_mask_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_nurbs_options_mask_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_nurbs_options_value_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_nurbs_options_value_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_curve_budget_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_curve_budget_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_curve_continued_budget_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_curve_continued_budget_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_budget_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_surface_budget_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_trim_budget_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_surface_trim_budget_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_max_trim_curve_deviation_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_surface_max_trim_curve_deviation_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_max_facet_angle_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_surface_max_facet_angle_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_max_facet_deviation_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_surface_max_facet_deviation_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_surface_max_facet_width_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_surface_max_facet_width_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_curve_max_angle_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_curve_max_angle_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_curve_max_deviation_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_curve_max_deviation_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_curve_max_length_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_curve_max_length_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_stereo_separation_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_stereo_separation_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_stereo_distance_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_stereo_distance_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_tessellations_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_tessellations_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_cylinder_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_num_cylinder_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cylinder_set(long jarg1, TK_Rendering_Options jarg1_, String jarg2);
  public final static native String TK_Rendering_Options_m_cylinder_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_num_sphere_set(long jarg1, TK_Rendering_Options jarg1_, char jarg2);
  public final static native char TK_Rendering_Options_m_num_sphere_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_sphere_set(long jarg1, TK_Rendering_Options jarg1_, String jarg2);
  public final static native String TK_Rendering_Options_m_sphere_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_gooch_color_range_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_gooch_color_range_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_gooch_diffuse_weight_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_gooch_diffuse_weight_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_gooch_color_map_segment_length_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_gooch_color_map_segment_length_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_transparency_options_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_transparency_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cut_geometry_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_cut_geometry_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cut_geometry_level_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_cut_geometry_level_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cut_geometry_match_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_cut_geometry_match_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_cut_geometry_tolerance_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_cut_geometry_tolerance_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_shadow_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_blur_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_simple_shadow_blur_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_resolution_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_shadow_resolution_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_plane_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_simple_shadow_plane_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_light_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_simple_shadow_light_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_color_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_simple_shadow_color_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_shadow_opacity_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_simple_shadow_opacity_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_shadow_map_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_shadow_map_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_shadow_map_resolution_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_shadow_map_resolution_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_shadow_map_samples_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_shadow_map_samples_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_reflection_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_plane_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_simple_reflection_plane_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_opacity_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_simple_reflection_opacity_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_blur_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_reflection_blur_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_hither_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_simple_reflection_hither_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_yon_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_simple_reflection_yon_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_visibility_mask_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_reflection_visibility_mask_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_simple_reflection_visibility_value_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_simple_reflection_visibility_value_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_depth_range_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_depth_range_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_screen_range_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_screen_range_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_ambient_up_vector_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_ambient_up_vector_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_image_scale_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_image_scale_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_mask_transform_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_mask_transform_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_geometry_options_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_geometry_options_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_dihedral_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_dihedral_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_image_tint_color_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_image_tint_color_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_texture_tint_color_set(long jarg1, TK_Rendering_Options jarg1_, long jarg2);
  public final static native long TK_Rendering_Options_m_texture_tint_color_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_depth_peeling_layers_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_depth_peeling_layers_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_depth_peeling_min_area_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_depth_peeling_min_area_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_depth_peeling_algorithm_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_depth_peeling_algorithm_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_general_displacement_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_general_displacement_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_join_cutoff_angle_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_join_cutoff_angle_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_edge_join_cutoff_angle_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_edge_join_cutoff_angle_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_vertex_decimation_set(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_m_vertex_decimation_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_display_list_level_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_display_list_level_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_antialias_set(long jarg1, TK_Rendering_Options jarg1_, short jarg2);
  public final static native short TK_Rendering_Options_m_antialias_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_m_extra_set(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_m_extra_get(long jarg1, TK_Rendering_Options jarg1_);
  public final static native long new_TK_Rendering_Options();
  public final static native void delete_TK_Rendering_Options(long jarg1);
  public final static native int TK_Rendering_Options_Read(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Rendering_Options_ReadSwigExplicitTK_Rendering_Options(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Rendering_Options_Write(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Rendering_Options_WriteSwigExplicitTK_Rendering_Options(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Rendering_Options_Clone(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Rendering_Options_CloneSwigExplicitTK_Rendering_Options(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Rendering_Options_ReadAscii(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Rendering_Options_WriteAscii(long jarg1, TK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Rendering_Options_Reset(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_ResetSwigExplicitTK_Rendering_Options(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetMask__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void TK_Rendering_Options_SetMask__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2, int jarg3);
  public final static native void TK_Rendering_Options_SetMask__SWIG_2(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetMask__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetMask__SWIG_1(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetValue__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void TK_Rendering_Options_SetValue__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2, int jarg3);
  public final static native void TK_Rendering_Options_SetValue__SWIG_2(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetValue__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetValue__SWIG_1(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHSR(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetHSR(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetTransparentHSR(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetTransparentHSR(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetTransparentStyle(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetTransparentStyle(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetTechnology(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetTechnology(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetQuantization(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetQuantization(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetDebug(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetDebug(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetFaceDisplacement(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetFaceDisplacement(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVertexDisplacement(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetVertexDisplacement(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetGeneralDisplacement(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetGeneralDisplacement(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetJoinCutoffAngle(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetJoinCutoffAngle(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetFogLimits__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3);
  public final static native void TK_Rendering_Options_SetFogLimits__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVisibilityLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetVisibilityLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVisibilityLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetVisibilityLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorBackLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorBackLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorBackLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorBackLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextContrastLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextContrastLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextContrastLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextContrastLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVisibilityForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetVisibilityForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVisibilityForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetVisibilityForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorFaceContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorFaceContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorWindowContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorWindowContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorBackForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorBackForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorBackForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorBackForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorEdgeContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorEdgeContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorLineContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorLineContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorMarkerContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorMarkerContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorVertexContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorVertexContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextContrastForcedLockMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetColorTextContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetColorTextContrastForcedLockValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetBufferOptionsMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetBufferOptionsMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetBufferOptionsValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetBufferOptionsValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetBufferSizeLimit(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetBufferSizeLimit(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetStereoSeparation(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetStereoSeparation(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetStereoDistance(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetStereoDistance(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHlrOptions(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetHlrOptions(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHlrDimFactor(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetHlrDimFactor(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHlrFaceDisplacement(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetHlrFaceDisplacement(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHlrLinePattern(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetHlrLinePattern(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHlrFaceSortingAlgorithm(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native float TK_Rendering_Options_GetHlrFaceSortingAlgorithm(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSOptionsMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSOptionsMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSOptionsValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSOptionsValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSCurveBudget(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSCurveBudget(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSCurveContinuedBudget(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSCurveContinuedBudget(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSSurfaceBudget(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSSurfaceBudget(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetNURBSSurfaceTrimBudget(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNURBSSurfaceTrimBudget(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodOptionsMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodOptionsMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodOptionsValue(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodOptionsValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodAlgorithm(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodAlgorithm(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodMinimumTriangleCount(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodMinimumTriangleCount(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodNumLevels(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodNumLevels(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodClamp(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodClamp(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodMaxDegree(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodMaxDegree(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodTolerance(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetLodTolerance(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodFallback(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodFallback(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodBounding__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void TK_Rendering_Options_SetLodBounding__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2, float[] jarg3);
  public final static native void TK_Rendering_Options_SetLodBounding__SWIG_2(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetLodRatio(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native void TK_Rendering_Options_SetLodRatios__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Rendering_Options_SetLodRatios__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodNumRatios(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodThresholdType(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodThresholdType(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodThreshold(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native void TK_Rendering_Options_SetLodThresholds__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Rendering_Options_SetLodThresholds__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodNumThresholds(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetLodCutoff(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native void TK_Rendering_Options_SetLodCutoffs__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Rendering_Options_SetLodCutoffs__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetLodNumCutoffs(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetTessellationMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetTessellationMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetCylinderTessellation(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native void TK_Rendering_Options_SetCylinderTessellations__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, String jarg3);
  public final static native void TK_Rendering_Options_SetCylinderTessellations__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNumCylinderTessellations(long jarg1, TK_Rendering_Options jarg1_);
  public final static native String TK_Rendering_Options_GetCylinderTessellations__SWIG_0(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSphereTessellation(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native void TK_Rendering_Options_SetSphereTessellations__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, int jarg2, String jarg3);
  public final static native void TK_Rendering_Options_SetSphereTessellations__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetNumSphereTessellations(long jarg1, TK_Rendering_Options jarg1_);
  public final static native String TK_Rendering_Options_GetSphereTessellations__SWIG_0(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetGeometryOptionsMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetGeometryOptionsMask(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetHardEdgeAngle(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native float TK_Rendering_Options_GetHardEdgeAngle(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetMaskTransform(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetMaskTransform(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetCutGeometry(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetCutGeometry(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetCutGeometryLevel(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetCutGeometryLevel(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetCutGeometryColorMatch(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetCutGeometryColorMatch(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetCutGeometryTolerance(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetCutGeometryTolerance(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetDisplayListLevel(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetDisplayListLevel(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleShadow(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetSimpleShadow(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleShadowBlur(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetSimpleShadowBlur(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleShadowResolution(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetSimpleShadowResolution(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleShadowLight__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Rendering_Options_SetSimpleShadowLight__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetSimpleShadowPlane__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Rendering_Options_SetSimpleShadowPlane__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetSimpleShadowColor__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Rendering_Options_SetSimpleShadowColor__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetSimpleShadowOpacity(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetSimpleShadowOpacity(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetShadowMap(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetShadowMap(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetShadowMapResolution(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetShadowMapResolution(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetShadowMapSamples(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetShadowMapSamples(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleReflection(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetSimpleReflection(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetSimpleReflectionOpacity(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetSimpleReflectionOpacity(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetSimpleReflectionVisibilityMask(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetSimpleReflectionVisibilityValue(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetDepthRange__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3);
  public final static native void TK_Rendering_Options_SetDepthRange__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetScreenRange__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Rendering_Options_SetScreenRange__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetAmbientUpVector__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Rendering_Options_SetAmbientUpVector__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetImageScale__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3);
  public final static native void TK_Rendering_Options_SetImageScale__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetImageTintColor__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Rendering_Options_SetImageTintColor__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_0(long jarg1, TK_Rendering_Options jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_1(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2);
  public final static native void TK_Rendering_Options_SetAntiAlias(long jarg1, TK_Rendering_Options jarg1_, int jarg2);
  public final static native int TK_Rendering_Options_GetAntiAlias(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_SetVertexDecimation(long jarg1, TK_Rendering_Options jarg1_, float jarg2);
  public final static native float TK_Rendering_Options_GetVertexDecimation(long jarg1, TK_Rendering_Options jarg1_);
  public final static native void TK_Rendering_Options_GetDiffuseTextureTintColor(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Rendering_Options_getSimpleShadowLight(long jarg1, TK_Rendering_Options jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Rendering_Options_director_connect(TK_Rendering_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Rendering_Options_change_ownership(TK_Rendering_Options obj, long cptr, boolean take_or_release);
  public final static native int TKO_Heuristic_Hidden_Surfaces_get();
  public final static native int TKO_Heuristic_Backplane_Cull_get();
  public final static native int TKO_Heuristic_Polygon_Handedness_get();
  public final static native int TKO_Heuristic_Quick_Moves_get();
  public final static native int TKO_Heuristic_Partial_Erase_get();
  public final static native int TKO_Heuristic_Memory_Purge_get();
  public final static native int TKO_Heuristic_Related_Select_Limit_get();
  public final static native int TKO_Heuristic_Internal_Shell_Limit_get();
  public final static native int TKO_Heuristic_Clipping_get();
  public final static native int TKO_Heuristic_Transformations_get();
  public final static native int TKO_Heuristic_Intersecting_Polygons_get();
  public final static native int TKO_Heuristic_Polygon_Crossings_get();
  public final static native int TKO_Heuristic_Concave_Polygons_get();
  public final static native int TKO_Heuristic_Incremental_Updates_get();
  public final static native int TKO_Heuristic_Selection_Sorting_get();
  public final static native int TKO_Heuristic_Extended_get();
  public final static native int TKO_Heuristic_Extended_Mask_get();
  public final static native int TKO_Heuristic_Extended_Shift_get();
  public final static native int TKO_Heuristic_Culling_get();
  public final static native int TKO_Heuristic_Exclude_Bounding_get();
  public final static native int TKO_Heuristic_Detail_Selection_get();
  public final static native int TKO_Heuristic_Ordered_Drawing_get();
  public final static native int TKO_Heuristic_Ordered_Unit_get();
  public final static native int TKO_Heuristic_Ordered_Weights_get();
  public final static native int TKO_Heuristic_Internal_Polyline_Limit_get();
  public final static native int TKO_Heuristic_Ordered_Grid_get();
  public final static native int TKO_Heuristic_Selection_Level_get();
  public final static native int TKO_Heuristic_Static_get();
  public final static native int TKO_Heuristic_Force_Defer_get();
  public final static native int TKO_Heuristic_Model_Type_get();
  public final static native int TKO_Heuristic_Selection_Culling_get();
  public final static native int TKO_Heuristic_Internal_Select_Limit_get();
  public final static native int TKO_Heuristic_Extras_get();
  public final static native int TKO_Heur_Extra_Left_Handed_Polys_get();
  public final static native int TKO_Heur_Extra_Quick_Move_Spriting_get();
  public final static native int TKO_Heur_View_Frustum_Culling_get();
  public final static native int TKO_Heur_Obscuration_Culling_get();
  public final static native int TKO_Heur_Extent_Culling_get();
  public final static native int TKO_Heur_View_Frustum_Culling_Off_get();
  public final static native int TKO_Heur_Obscuration_Culling_Off_get();
  public final static native int TKO_Heur_Extent_Culling_Off_get();
  public final static native int TKO_Heur_Culling_Extended_get();
  public final static native int TKO_Heur_Culling_Extended_Mask_get();
  public final static native int TKO_Heur_Culling_Extended_Shift_get();
  public final static native int TKO_Heur_Obscuration_Use_Octree_get();
  public final static native int TKO_Heur_Maximum_Extent_Mode_get();
  public final static native int TKO_Heur_Vector_Culling_get();
  public final static native int TKO_Heur_Vector_Tolerance_get();
  public final static native int TKO_Heur_Vector_Culling_Off_get();
  public final static native int TKO_Heur_Vector_Tolerance_Off_get();
  public final static native int TKO_Heur_Hard_Extent_Culling_get();
  public final static native int TKO_Heur_Culling_Extended2_get();
  public final static native int TKO_Heur_Culling_Extended2_Mask_get();
  public final static native int TKO_Heur_Culling_Extended2_Shift_get();
  public final static native int TKO_Heur_Maximum_Extent_Level_get();
  public final static native int TKO_Heur_Hard_Extent_Culling_Off_get();
  public final static native int TKO_Heur_Extent_Culling_Detail_On_get();
  public final static native int TKO_Heur_Extent_Culling_Detail_Off_get();
  public final static native int TKO_Heur_Max_Distance_Culling_get();
  public final static native int TKO_Heur_Max_Distance_Culling_Off_get();
  public final static native int TKO_Heur_View_Volume_Culling_get();
  public final static native int TKO_Heur_View_Volume_Culling_Off_get();
  public final static native int TKO_Heur_Max_Extent_Mode_None_get();
  public final static native int TKO_Heur_Max_Extent_Mode_Dot_get();
  public final static native int TKO_Heur_Max_Extent_Mode_Bounding_get();
  public final static native int TKO_Heur_Max_Extent_Mode_Defer_get();
  public final static native int TKO_Heur_Max_Extent_Level_None_get();
  public final static native int TKO_Heur_Max_Extent_Level_Segment_get();
  public final static native int TKO_Heur_Max_Extent_Level_Geometry_get();
  public final static native int TKO_Heur_Max_Extent_Level_Primitive_get();
  public final static native int TKO_Heur_Max_Extent_Level_All_get();
  public final static native int TKO_Heur_Order_World_Volume_get();
  public final static native int TKO_Heur_Order_Screen_Extent_get();
  public final static native int TKO_Heur_Order_Distance_get();
  public final static native int TKO_Heur_Order_Divergence_get();
  public final static native int TKO_Heur_Order_Density_get();
  public final static native int TKO_Heur_Order_Priority_get();
  public final static native int TKO_Heur_Order_Count_get();
  public final static native int TKO_Heur_Selection_Level_Entity_get();
  public final static native int TKO_Heur_Selection_Level_Segment_get();
  public final static native int TKO_Heur_Selection_Level_Segment_Tree_get();
  public final static native int TKO_Heur_Model_Type_Default_get();
  public final static native int TKO_Heur_Model_Type_LMV_get();
  public final static native void TK_Heuristics_m_mask_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_mask_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_value_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_value_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_related_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_related_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_internal_shell_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_internal_shell_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_internal_polyline_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_internal_polyline_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_extras_set(long jarg1, TK_Heuristics jarg1_, short jarg2);
  public final static native short TK_Heuristics_m_extras_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_culling_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_culling_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_selection_culling_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_selection_culling_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_pixel_threshold_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_pixel_threshold_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_maximum_extent_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_maximum_extent_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_maximum_extent_mode_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_maximum_extent_mode_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_maximum_extent_level_set(long jarg1, TK_Heuristics jarg1_, char jarg2);
  public final static native char TK_Heuristics_m_maximum_extent_level_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_hard_extent_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_hard_extent_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_force_defer_set(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_m_force_defer_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_vector_set(long jarg1, TK_Heuristics jarg1_, long jarg2);
  public final static native long TK_Heuristics_m_vector_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_vector_tolerance_set(long jarg1, TK_Heuristics jarg1_, float jarg2);
  public final static native float TK_Heuristics_m_vector_tolerance_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_max_distance_set(long jarg1, TK_Heuristics jarg1_, float jarg2);
  public final static native float TK_Heuristics_m_max_distance_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_view_volume_set(long jarg1, TK_Heuristics jarg1_, long jarg2);
  public final static native long TK_Heuristics_m_view_volume_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_ordered_weights_mask_set(long jarg1, TK_Heuristics jarg1_, short jarg2);
  public final static native short TK_Heuristics_m_ordered_weights_mask_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_ordered_weights_set(long jarg1, TK_Heuristics jarg1_, long jarg2);
  public final static native long TK_Heuristics_m_ordered_weights_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_selection_level_set(long jarg1, TK_Heuristics jarg1_, short jarg2);
  public final static native short TK_Heuristics_m_selection_level_get(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_m_model_type_set(long jarg1, TK_Heuristics jarg1_, short jarg2);
  public final static native short TK_Heuristics_m_model_type_get(long jarg1, TK_Heuristics jarg1_);
  public final static native long new_TK_Heuristics();
  public final static native void delete_TK_Heuristics(long jarg1);
  public final static native int TK_Heuristics_Read(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Heuristics_ReadSwigExplicitTK_Heuristics(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Heuristics_Write(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Heuristics_WriteSwigExplicitTK_Heuristics(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Heuristics_Clone(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Heuristics_CloneSwigExplicitTK_Heuristics(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Heuristics_ReadAscii(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Heuristics_WriteAscii(long jarg1, TK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Heuristics_SetMask(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetMask(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetValue(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetValue(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetRelatedSelectionLimit(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetRelatedSelectionLimit(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetInternalSelectionLimit(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetInternalSelectionLimit(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetInternalShellSelectionLimit(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetInternalShellSelectionLimit(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetInternalPolylineSelectionLimit(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetInternalPolylineSelectionLimit(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetExtras(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetExtras(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetCulling(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetCulling(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetSelectionCulling(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetSelectionCulling(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetPixelThreshold(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetPixelThreshold(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetMaximumExtent(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetMaximumExtent(long jarg1, TK_Heuristics jarg1_);
  public final static native int TK_Heuristics_GetMaximumExtentMode(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetMaximumExtentMode(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetMaximumExtentLevel(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetMaximumExtentLevel(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native void TK_Heuristics_SetHardExtent(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetHardExtent(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetVector__SWIG_0(long jarg1, TK_Heuristics jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Heuristics_SetVector__SWIG_1(long jarg1, TK_Heuristics jarg1_, float[] jarg2);
  public final static native float TK_Heuristics_GetVectorTolerance(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetVectorTolerance(long jarg1, TK_Heuristics jarg1_, float jarg2);
  public final static native void TK_Heuristics_SetMaxDistance(long jarg1, TK_Heuristics jarg1_, float jarg2);
  public final static native float TK_Heuristics_GetMaxDistance(long jarg1, TK_Heuristics jarg1_);
  public final static native float[] TK_Heuristics_GetViewVolume(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetViewVolume__SWIG_0(long jarg1, TK_Heuristics jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void TK_Heuristics_SetViewVolume__SWIG_1(long jarg1, TK_Heuristics jarg1_, float[] jarg2);
  public final static native void TK_Heuristics_SetOrderedWeightsMask(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetOrderedWeightsMask(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetOrderedWeight(long jarg1, TK_Heuristics jarg1_, int jarg2, float jarg3);
  public final static native float TK_Heuristics_GetOrderedWeight(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native void TK_Heuristics_SetSelectionLevel(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetSelectionLevel(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_SetForceDefer(long jarg1, TK_Heuristics jarg1_, int jarg2);
  public final static native int TK_Heuristics_GetForceDefer(long jarg1, TK_Heuristics jarg1_);
  public final static native void TK_Heuristics_GetVector(long jarg1, TK_Heuristics jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Heuristics_GetOrderedWeights(long jarg1, TK_Heuristics jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Heuristics_director_connect(TK_Heuristics obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Heuristics_change_ownership(TK_Heuristics obj, long cptr, boolean take_or_release);
  public final static native int TKO_Geometry_Options_Orientation_get();
  public final static native int TKO_Geometry_Options_Camera_Relative_get();
  public final static native long new_TK_Geometry_Options();
  public final static native void delete_TK_Geometry_Options(long jarg1);
  public final static native int TK_Geometry_Options_Read(long jarg1, TK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Options_Write(long jarg1, TK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Options_Clone(long jarg1, TK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Geometry_Options_ReadAscii(long jarg1, TK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Geometry_Options_WriteAscii(long jarg1, TK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Geometry_Options_SetMask(long jarg1, TK_Geometry_Options jarg1_, int jarg2);
  public final static native int TK_Geometry_Options_GetMask(long jarg1, TK_Geometry_Options jarg1_);
  public final static native void TK_Geometry_Options_SetOrientation(long jarg1, TK_Geometry_Options jarg1_, int jarg2, float[] jarg3);
  public final static native int TK_Geometry_Options_GetOrientationCount(long jarg1, TK_Geometry_Options jarg1_);
  public final static native void TK_Geometry_Options_GetOrientation(long jarg1, TK_Geometry_Options jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Visibility_m_mask_set(long jarg1, TK_Visibility jarg1_, int jarg2);
  public final static native int TK_Visibility_m_mask_get(long jarg1, TK_Visibility jarg1_);
  public final static native void TK_Visibility_m_value_set(long jarg1, TK_Visibility jarg1_, int jarg2);
  public final static native int TK_Visibility_m_value_get(long jarg1, TK_Visibility jarg1_);
  public final static native long new_TK_Visibility();
  public final static native int TK_Visibility_Read(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Visibility_ReadSwigExplicitTK_Visibility(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Visibility_Write(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Visibility_WriteSwigExplicitTK_Visibility(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Visibility_Clone(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Visibility_CloneSwigExplicitTK_Visibility(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Visibility_ReadAscii(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Visibility_WriteAscii(long jarg1, TK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Visibility_SetGeometry(long jarg1, TK_Visibility jarg1_, int jarg2);
  public final static native int TK_Visibility_GetGeometry(long jarg1, TK_Visibility jarg1_);
  public final static native void TK_Visibility_SetValue(long jarg1, TK_Visibility jarg1_, int jarg2);
  public final static native int TK_Visibility_GetValue(long jarg1, TK_Visibility jarg1_);
  public final static native void delete_TK_Visibility(long jarg1);
  public final static native void TK_Visibility_director_connect(TK_Visibility obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Visibility_change_ownership(TK_Visibility obj, long cptr, boolean take_or_release);
  public final static native void TK_Selectability_m_mask_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_mask_get(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_m_down_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_down_get(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_m_up_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_up_get(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_m_move_down_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_move_down_get(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_m_move_up_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_move_up_get(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_m_invisible_set(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_m_invisible_get(long jarg1, TK_Selectability jarg1_);
  public final static native long new_TK_Selectability();
  public final static native int TK_Selectability_Read(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Selectability_ReadSwigExplicitTK_Selectability(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Selectability_Write(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Selectability_WriteSwigExplicitTK_Selectability(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Selectability_Clone(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Selectability_CloneSwigExplicitTK_Selectability(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Selectability_ReadAscii(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Selectability_WriteAscii(long jarg1, TK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Selectability_SetGeometry(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetGeometry(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_SetDown(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetDown(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_SetUp(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetUp(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_SetMoveDown(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetMoveDown(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_SetMoveUp(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetMoveUp(long jarg1, TK_Selectability jarg1_);
  public final static native void TK_Selectability_SetWhenInvisible(long jarg1, TK_Selectability jarg1_, int jarg2);
  public final static native int TK_Selectability_GetWhenInvisible(long jarg1, TK_Selectability jarg1_);
  public final static native void delete_TK_Selectability(long jarg1);
  public final static native void TK_Selectability_director_connect(TK_Selectability obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Selectability_change_ownership(TK_Selectability obj, long cptr, boolean take_or_release);
  public final static native void TK_Matrix_m_matrix_set(long jarg1, TK_Matrix jarg1_, long jarg2);
  public final static native long TK_Matrix_m_matrix_get(long jarg1, TK_Matrix jarg1_);
  public final static native void TK_Matrix_m_dmatrix_set(long jarg1, TK_Matrix jarg1_, long jarg2);
  public final static native long TK_Matrix_m_dmatrix_get(long jarg1, TK_Matrix jarg1_);
  public final static native long new_TK_Matrix(short jarg1);
  public final static native int TK_Matrix_Read(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Matrix_ReadSwigExplicitTK_Matrix(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Matrix_Write(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Matrix_WriteSwigExplicitTK_Matrix(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Matrix_Clone(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Matrix_CloneSwigExplicitTK_Matrix(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Matrix_ReadAscii(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Matrix_WriteAscii(long jarg1, TK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Matrix_SetMatrix(long jarg1, TK_Matrix jarg1_, float[] jarg2);
  public final static native void TK_Matrix_SetDMatrix(long jarg1, TK_Matrix jarg1_, double[] jarg2);
  public final static native double[] TK_Matrix_GetDMatrix__SWIG_0(long jarg1, TK_Matrix jarg1_);
  public final static native void delete_TK_Matrix(long jarg1);
  public final static native void TK_Matrix_director_connect(TK_Matrix obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Matrix_change_ownership(TK_Matrix obj, long cptr, boolean take_or_release);
  public final static native int TKO_Line_Pattern_Solid_get();
  public final static native int TKO_Line_Pattern_Dash_Dot_get();
  public final static native int TKO_Line_Pattern_Dashed_get();
  public final static native int TKO_Line_Pattern_Dotted_get();
  public final static native int TKO_Line_Pattern_Dash_2Dot_get();
  public final static native int TKO_Line_Pattern_Dash_3Dot_get();
  public final static native int TKO_Line_Pattern_Long_Dash_get();
  public final static native int TKO_Line_Pattern_Center_get();
  public final static native int TKO_Line_Pattern_Phantom_get();
  public final static native int TKO_Line_Pattern_Find_Dots_get();
  public final static native int TKO_Fill_Pattern_Hash_get();
  public final static native int TKO_Fill_Pattern_Vertical_get();
  public final static native int TKO_Fill_Pattern_Horizontal_get();
  public final static native int TKO_Fill_Pattern_Right_get();
  public final static native int TKO_Fill_Pattern_Left_get();
  public final static native int TKO_Fill_Pattern_Diamond_get();
  public final static native int TKO_Fill_Pattern_Dots_get();
  public final static native int TKO_Fill_Pattern_Boxes_get();
  public final static native int TKO_Fill_Pattern_Solid_get();
  public final static native int TKO_Fill_Pattern_Clear_get();
  public final static native int TKO_Fill_Pattern_Gradient_N_get();
  public final static native int TKO_Fill_Pattern_Gradient_NE_get();
  public final static native int TKO_Fill_Pattern_Gradient_E_get();
  public final static native int TKO_Fill_Pattern_Gradient_SE_get();
  public final static native int TKO_Fill_Pattern_Gradient_S_get();
  public final static native int TKO_Fill_Pattern_Gradient_SW_get();
  public final static native int TKO_Fill_Pattern_Gradient_W_get();
  public final static native int TKO_Fill_Pattern_Gradient_NW_get();
  public final static native int TKO_Fill_Pattern_Blend_get();
  public final static native int TKO_Fill_Pattern_Invisible_get();
  public final static native int TKO_Marker_Circle_get();
  public final static native int TKO_Marker_Circle_Dot_get();
  public final static native int TKO_Marker_Circle_Plus_get();
  public final static native int TKO_Marker_Circle_X_get();
  public final static native int TKO_Marker_Circle_Circle_get();
  public final static native int TKO_Marker_Circle_Filled_get();
  public final static native int TKO_Marker_Dot_get();
  public final static native int TKO_Marker_Plus_get();
  public final static native int TKO_Marker_X_get();
  public final static native int TKO_Marker_Star_get();
  public final static native int TKO_Marker_Box_get();
  public final static native int TKO_Marker_Box_Dot_get();
  public final static native int TKO_Marker_Box_X_get();
  public final static native int TKO_Marker_Box_Filled_get();
  public final static native int TKO_Marker_Diamond_get();
  public final static native int TKO_Marker_Diamond_Dot_get();
  public final static native int TKO_Marker_Diamond_Plus_get();
  public final static native int TKO_Marker_Diamond_Filled_get();
  public final static native int TKO_Marker_Triangle_Up_get();
  public final static native int TKO_Marker_Triangle_Up_Vertex_get();
  public final static native int TKO_Marker_Triangle_Up_Dot_get();
  public final static native int TKO_Marker_Triangle_Up_Filled_get();
  public final static native int TKO_Marker_Triangle_Up_Filled_Vertex_get();
  public final static native int TKO_Marker_Triangle_Down_get();
  public final static native int TKO_Marker_Triangle_Down_Vertex_get();
  public final static native int TKO_Marker_Triangle_Down_Dot_get();
  public final static native int TKO_Marker_Triangle_Down_Filled_get();
  public final static native int TKO_Marker_Triangle_Down_Filled_Vertex_get();
  public final static native int TKO_Marker_Triangle_Right_get();
  public final static native int TKO_Marker_Triangle_Right_Vertex_get();
  public final static native int TKO_Marker_Triangle_Right_Dot_get();
  public final static native int TKO_Marker_Triangle_Right_Filled_get();
  public final static native int TKO_Marker_Triangle_Right_Filled_Vertex_get();
  public final static native int TKO_Marker_Triangle_Left_get();
  public final static native int TKO_Marker_Triangle_Left_Vertex_get();
  public final static native int TKO_Marker_Triangle_Left_Dot_get();
  public final static native int TKO_Marker_Triangle_Left_Filled_get();
  public final static native int TKO_Marker_Triangle_Left_Filled_Vertex_get();
  public final static native int TKO_Marker_Hash_get();
  public final static native int TKO_Marker_Wide_Plus_get();
  public final static native int TKO_Marker_Open_Arrow_get();
  public final static native int TKO_Marker_Closed_Arrow_get();
  public final static native int TKO_Marker_Vertical_Bar_get();
  public final static native int TKO_Marker_Half_Arrow_Left_get();
  public final static native int TKO_Marker_Half_Arrow_Right_get();
  public final static native int TKO_Marker_Wide_Arrow_get();
  public final static native int TKO_Marker_Double_Arrow_get();
  public final static native int TKO_Marker_Y_get();
  public final static native int TKO_Marker_Z_get();
  public final static native int TKO_Text_Alignment_Lower_Left_get();
  public final static native int TKO_Text_Alignment_Upper_Left_get();
  public final static native int TKO_Text_Alignment_Middle_Left_get();
  public final static native int TKO_Text_Alignment_Lower_Right_get();
  public final static native int TKO_Text_Alignment_Upper_Right_get();
  public final static native int TKO_Text_Alignment_Middle_Right_get();
  public final static native int TKO_Text_Alignment_Lower_Center_get();
  public final static native int TKO_Text_Alignment_Upper_Center_get();
  public final static native int TKO_Text_Alignment_Middle_Center_get();
  public final static native int TKO_Text_Alignment_Insertion_Left_get();
  public final static native int TKO_Text_Alignment_Insertion_Right_get();
  public final static native int TKO_Text_Alignment_Insertion_Center_get();
  public final static native int TKO_Text_Alignment_Insertion_get();
  public final static native int TKO_Text_Justification_Unspecified_get();
  public final static native int TKO_Text_Justification_Left_get();
  public final static native int TKO_Text_Justification_Center_get();
  public final static native int TKO_Text_Justification_Right_get();
  public final static native int TKO_Text_Alignment_Center_get();
  public final static native int TKO_Text_Alignment_Left_get();
  public final static native int TKO_Text_Alignment_Right_get();
  public final static native int TKO_Text_Alignment_Bottom_get();
  public final static native int TKO_Text_Alignment_Top_get();
  public final static native int TKO_Text_Alignment_Point_get();
  public final static native int TKO_Text_Alignment_Unspecified_get();
  public final static native int TKO_Text_Justification_Mask_get();
  public final static native int TKO_Text_Justification_Shift_get();
  public final static native int TKO_Text_Alignment_New_Format_get();
  public final static native int TKO_Window_Frame_Off_get();
  public final static native int TKO_Window_Frame_On_get();
  public final static native int TKO_Handedness_Left_get();
  public final static native int TKO_Handedness_Right_get();
  public final static native void TK_Enumerated_m_index_set(long jarg1, TK_Enumerated jarg1_, char jarg2);
  public final static native char TK_Enumerated_m_index_get(long jarg1, TK_Enumerated jarg1_);
  public final static native long new_TK_Enumerated(short jarg1);
  public final static native int TK_Enumerated_Read(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Enumerated_ReadSwigExplicitTK_Enumerated(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Enumerated_Write(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Enumerated_WriteSwigExplicitTK_Enumerated(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Enumerated_Clone(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Enumerated_CloneSwigExplicitTK_Enumerated(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Enumerated_ReadAscii(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Enumerated_WriteAscii(long jarg1, TK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Enumerated_SetIndex(long jarg1, TK_Enumerated jarg1_, int jarg2);
  public final static native int TK_Enumerated_GetIndex(long jarg1, TK_Enumerated jarg1_);
  public final static native void delete_TK_Enumerated(long jarg1);
  public final static native void TK_Enumerated_director_connect(TK_Enumerated obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Enumerated_change_ownership(TK_Enumerated obj, long cptr, boolean take_or_release);
  public final static native void TK_Size_m_value_set(long jarg1, TK_Size jarg1_, float jarg2);
  public final static native float TK_Size_m_value_get(long jarg1, TK_Size jarg1_);
  public final static native void TK_Size_m_units_set(long jarg1, TK_Size jarg1_, short jarg2);
  public final static native short TK_Size_m_units_get(long jarg1, TK_Size jarg1_);
  public final static native long new_TK_Size(short jarg1);
  public final static native int TK_Size_Read(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Size_ReadSwigExplicitTK_Size(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Size_Write(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Size_WriteSwigExplicitTK_Size(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Size_Clone(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Size_CloneSwigExplicitTK_Size(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Size_ReadAscii(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Size_WriteAscii(long jarg1, TK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Size_SetSize__SWIG_0(long jarg1, TK_Size jarg1_, float jarg2, int jarg3);
  public final static native void TK_Size_SetSize__SWIG_1(long jarg1, TK_Size jarg1_, float jarg2);
  public final static native float TK_Size_GetSize(long jarg1, TK_Size jarg1_);
  public final static native int TK_Size_GetUnits(long jarg1, TK_Size jarg1_);
  public final static native void delete_TK_Size(long jarg1);
  public final static native void TK_Size_director_connect(TK_Size obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Size_change_ownership(TK_Size obj, long cptr, boolean take_or_release);
  public final static native void TK_Linear_Pattern_m_pattern_set(long jarg1, TK_Linear_Pattern jarg1_, int jarg2);
  public final static native int TK_Linear_Pattern_m_pattern_get(long jarg1, TK_Linear_Pattern jarg1_);
  public final static native long new_TK_Linear_Pattern(short jarg1);
  public final static native int TK_Linear_Pattern_Read(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Linear_Pattern_ReadSwigExplicitTK_Linear_Pattern(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Linear_Pattern_Write(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Linear_Pattern_WriteSwigExplicitTK_Linear_Pattern(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Linear_Pattern_Clone(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Linear_Pattern_CloneSwigExplicitTK_Linear_Pattern(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Linear_Pattern_ReadAscii(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Linear_Pattern_WriteAscii(long jarg1, TK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Linear_Pattern_SetPattern(long jarg1, TK_Linear_Pattern jarg1_, int jarg2);
  public final static native int TK_Linear_Pattern_GetPattern(long jarg1, TK_Linear_Pattern jarg1_);
  public final static native void delete_TK_Linear_Pattern(long jarg1);
  public final static native void TK_Linear_Pattern_director_connect(TK_Linear_Pattern obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Linear_Pattern_change_ownership(TK_Linear_Pattern obj, long cptr, boolean take_or_release);
  public final static native void TK_Named_m_name_length_set(long jarg1, TK_Named jarg1_, int jarg2);
  public final static native int TK_Named_m_name_length_get(long jarg1, TK_Named jarg1_);
  public final static native void TK_Named_m_index_set(long jarg1, TK_Named jarg1_, int jarg2);
  public final static native int TK_Named_m_index_get(long jarg1, TK_Named jarg1_);
  public final static native long new_TK_Named(short jarg1);
  public final static native void delete_TK_Named(long jarg1);
  public final static native int TK_Named_Read(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_ReadSwigExplicitTK_Named(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_Write(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_WriteSwigExplicitTK_Named(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_Clone(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Named_CloneSwigExplicitTK_Named(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Named_ReadAscii(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_WriteAscii(long jarg1, TK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Named_Reset(long jarg1, TK_Named jarg1_);
  public final static native void TK_Named_ResetSwigExplicitTK_Named(long jarg1, TK_Named jarg1_);
  public final static native void TK_Named_SetName__SWIG_0(long jarg1, TK_Named jarg1_, String jarg2);
  public final static native void TK_Named_SetName__SWIG_1(long jarg1, TK_Named jarg1_, int jarg2);
  public final static native String TK_Named_GetName__SWIG_0(long jarg1, TK_Named jarg1_);
  public final static native void TK_Named_SetIndex(long jarg1, TK_Named jarg1_, int jarg2);
  public final static native int TK_Named_GetIndex(long jarg1, TK_Named jarg1_);
  public final static native void TK_Named_director_connect(TK_Named obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Named_change_ownership(TK_Named obj, long cptr, boolean take_or_release);
  public final static native void TK_Streaming_m_flag_set(long jarg1, TK_Streaming jarg1_, boolean jarg2);
  public final static native boolean TK_Streaming_m_flag_get(long jarg1, TK_Streaming jarg1_);
  public final static native long new_TK_Streaming();
  public final static native int TK_Streaming_Read(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Streaming_ReadSwigExplicitTK_Streaming(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Streaming_Write(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Streaming_WriteSwigExplicitTK_Streaming(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Streaming_Clone(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Streaming_CloneSwigExplicitTK_Streaming(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Streaming_ReadAscii(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Streaming_WriteAscii(long jarg1, TK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Streaming_SetStreaming(long jarg1, TK_Streaming jarg1_, boolean jarg2);
  public final static native boolean TK_Streaming_GetStreaming(long jarg1, TK_Streaming jarg1_);
  public final static native void delete_TK_Streaming(long jarg1);
  public final static native void TK_Streaming_director_connect(TK_Streaming obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Streaming_change_ownership(TK_Streaming obj, long cptr, boolean take_or_release);
  public final static native void TK_Conditions_m_length_set(long jarg1, TK_Conditions jarg1_, int jarg2);
  public final static native int TK_Conditions_m_length_get(long jarg1, TK_Conditions jarg1_);
  public final static native long new_TK_Conditions();
  public final static native void delete_TK_Conditions(long jarg1);
  public final static native int TK_Conditions_Read(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditions_ReadSwigExplicitTK_Conditions(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditions_Write(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditions_WriteSwigExplicitTK_Conditions(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditions_Clone(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Conditions_CloneSwigExplicitTK_Conditions(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Conditions_ReadAscii(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditions_WriteAscii(long jarg1, TK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Conditions_Reset(long jarg1, TK_Conditions jarg1_);
  public final static native void TK_Conditions_ResetSwigExplicitTK_Conditions(long jarg1, TK_Conditions jarg1_);
  public final static native void TK_Conditions_SetConditions__SWIG_0(long jarg1, TK_Conditions jarg1_, String jarg2);
  public final static native void TK_Conditions_SetConditions__SWIG_1(long jarg1, TK_Conditions jarg1_, int jarg2);
  public final static native String TK_Conditions_GetConditions__SWIG_0(long jarg1, TK_Conditions jarg1_);
  public final static native int TK_Conditions_GetLength(long jarg1, TK_Conditions jarg1_);
  public final static native void TK_Conditions_director_connect(TK_Conditions obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Conditions_change_ownership(TK_Conditions obj, long cptr, boolean take_or_release);
  public final static native int TKO_Action_Type_Prune_Segment_get();
  public final static native int TKO_Action_Option_Segment_Tree_get();
  public final static native long new_TK_Conditional_Action();
  public final static native void delete_TK_Conditional_Action(long jarg1);
  public final static native int TK_Conditional_Action_Read(long jarg1, TK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditional_Action_Write(long jarg1, TK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditional_Action_Clone(long jarg1, TK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Conditional_Action_ReadAscii(long jarg1, TK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Conditional_Action_WriteAscii(long jarg1, TK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Conditional_Action_Reset(long jarg1, TK_Conditional_Action jarg1_);
  public final static native void TK_Conditional_Action_SetCondition__SWIG_0(long jarg1, TK_Conditional_Action jarg1_, String jarg2);
  public final static native void TK_Conditional_Action_SetCondition__SWIG_1(long jarg1, TK_Conditional_Action jarg1_, int jarg2);
  public final static native String TK_Conditional_Action_GetCondition__SWIG_0(long jarg1, TK_Conditional_Action jarg1_);
  public final static native int TK_Conditional_Action_GetLength(long jarg1, TK_Conditional_Action jarg1_);
  public final static native void TK_Conditional_Action_SetAction(long jarg1, TK_Conditional_Action jarg1_, int jarg2);
  public final static native int TK_Conditional_Action_GetAction(long jarg1, TK_Conditional_Action jarg1_);
  public final static native void TK_Conditional_Action_SetOptions(long jarg1, TK_Conditional_Action jarg1_, int jarg2);
  public final static native int TK_Conditional_Action_GetOptions(long jarg1, TK_Conditional_Action jarg1_);
  public final static native void TK_User_Options_m_length_set(long jarg1, TK_User_Options jarg1_, int jarg2);
  public final static native int TK_User_Options_m_length_get(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_m_indices_set(long jarg1, TK_User_Options jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_User_Options_m_indices_get(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_m_unicode_set(long jarg1, TK_User_Options jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_User_Options_m_unicode_get(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_m_index_data_set(long jarg1, TK_User_Options jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_User_Options_m_index_data_get(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_set_options__SWIG_0(long jarg1, TK_User_Options jarg1_, String jarg2);
  public final static native void TK_User_Options_set_options__SWIG_1(long jarg1, TK_User_Options jarg1_, int jarg2);
  public final static native long new_TK_User_Options();
  public final static native void delete_TK_User_Options(long jarg1);
  public final static native int TK_User_Options_Read(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Options_ReadSwigExplicitTK_User_Options(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Options_Write(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Options_WriteSwigExplicitTK_User_Options(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Options_Clone(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Options_CloneSwigExplicitTK_User_Options(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Options_ReadAscii(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Options_WriteAscii(long jarg1, TK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_User_Options_Reset(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_ResetSwigExplicitTK_User_Options(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_SetOptions__SWIG_0(long jarg1, TK_User_Options jarg1_, String jarg2);
  public final static native void TK_User_Options_SetOptions__SWIG_1(long jarg1, TK_User_Options jarg1_, int jarg2);
  public final static native String TK_User_Options_GetOptions__SWIG_0(long jarg1, TK_User_Options jarg1_);
  public final static native int TK_User_Options_GetLength(long jarg1, TK_User_Options jarg1_);
  public final static native void TK_User_Options_director_connect(TK_User_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_User_Options_change_ownership(TK_User_Options obj, long cptr, boolean take_or_release);
  public final static native void TK_Unicode_Options_m_length_set(long jarg1, TK_Unicode_Options jarg1_, int jarg2);
  public final static native int TK_Unicode_Options_m_length_get(long jarg1, TK_Unicode_Options jarg1_);
  public final static native long new_TK_Unicode_Options();
  public final static native void delete_TK_Unicode_Options(long jarg1);
  public final static native int TK_Unicode_Options_Read(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unicode_Options_ReadSwigExplicitTK_Unicode_Options(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unicode_Options_Write(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unicode_Options_WriteSwigExplicitTK_Unicode_Options(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unicode_Options_Clone(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Unicode_Options_CloneSwigExplicitTK_Unicode_Options(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Unicode_Options_ReadAscii(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Unicode_Options_WriteAscii(long jarg1, TK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Unicode_Options_Reset(long jarg1, TK_Unicode_Options jarg1_);
  public final static native void TK_Unicode_Options_ResetSwigExplicitTK_Unicode_Options(long jarg1, TK_Unicode_Options jarg1_);
  public final static native void TK_Unicode_Options_SetOptions__SWIG_0(long jarg1, TK_Unicode_Options jarg1_, int[] jarg2);
  public final static native void TK_Unicode_Options_SetOptions__SWIG_1(long jarg1, TK_Unicode_Options jarg1_, int jarg2);
  public final static native int TK_Unicode_Options_GetLength(long jarg1, TK_Unicode_Options jarg1_);
  public final static native void TK_Unicode_Options_director_connect(TK_Unicode_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Unicode_Options_change_ownership(TK_Unicode_Options obj, long cptr, boolean take_or_release);
  public final static native void TK_User_Index_m_count_set(long jarg1, TK_User_Index jarg1_, int jarg2);
  public final static native int TK_User_Index_m_count_get(long jarg1, TK_User_Index jarg1_);
  public final static native void TK_User_Index_m_current_value_set(long jarg1, TK_User_Index jarg1_, int jarg2);
  public final static native int TK_User_Index_m_current_value_get(long jarg1, TK_User_Index jarg1_);
  public final static native void TK_User_Index_set_indices__SWIG_0(long jarg1, TK_User_Index jarg1_, int jarg2, int[] jarg3, int[] jarg4);
  public final static native void TK_User_Index_set_indices__SWIG_1(long jarg1, TK_User_Index jarg1_, int jarg2);
  public final static native long new_TK_User_Index();
  public final static native void delete_TK_User_Index(long jarg1);
  public final static native int TK_User_Index_Read(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_ReadSwigExplicitTK_User_Index(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_Write(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_WriteSwigExplicitTK_User_Index(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_Clone(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Index_CloneSwigExplicitTK_User_Index(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Index_ReadAscii(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_WriteAscii(long jarg1, TK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_User_Index_Reset(long jarg1, TK_User_Index jarg1_);
  public final static native void TK_User_Index_ResetSwigExplicitTK_User_Index(long jarg1, TK_User_Index jarg1_);
  public final static native void TK_User_Index_SetIndices__SWIG_0(long jarg1, TK_User_Index jarg1_, int jarg2, int[] jarg3, int[] jarg4);
  public final static native void TK_User_Index_SetIndices__SWIG_1(long jarg1, TK_User_Index jarg1_, int jarg2);
  public final static native int TK_User_Index_GetCount(long jarg1, TK_User_Index jarg1_);
  public final static native void TK_User_Index_director_connect(TK_User_Index obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_User_Index_change_ownership(TK_User_Index obj, long cptr, boolean take_or_release);
  public final static native long new_TK_User_Index_Data();
  public final static native void delete_TK_User_Index_Data(long jarg1);
  public final static native int TK_User_Index_Data_Read(long jarg1, TK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_Data_Write(long jarg1, TK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Index_Data_Clone(long jarg1, TK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void TK_User_Index_Data_Reset(long jarg1, TK_User_Index_Data jarg1_);
  public final static native void TK_User_Index_Data_SetIndices__SWIG_0(long jarg1, TK_User_Index_Data jarg1_, int jarg2, int[] jarg3, long jarg4, int[] jarg5);
  public final static native void TK_User_Index_Data_SetIndices__SWIG_1(long jarg1, TK_User_Index_Data jarg1_, int jarg2);
  public final static native int TK_User_Index_Data_GetCount(long jarg1, TK_User_Index_Data jarg1_);
  public final static native long TK_User_Index_Data_GetValues__SWIG_0(long jarg1, TK_User_Index_Data jarg1_);
  public final static native void TK_User_Index_Data_GetIndices(long jarg1, TK_User_Index_Data jarg1_, int[] jarg2, int jarg3);
  public final static native void TK_User_Index_Data_GetSizes(long jarg1, TK_User_Index_Data jarg1_, int[] jarg2, int jarg3);
  public final static native void TK_User_Value_m_value_set(long jarg1, TK_User_Value jarg1_, int jarg2);
  public final static native int TK_User_Value_m_value_get(long jarg1, TK_User_Value jarg1_);
  public final static native long new_TK_User_Value();
  public final static native int TK_User_Value_Read(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Value_ReadSwigExplicitTK_User_Value(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Value_Write(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Value_WriteSwigExplicitTK_User_Value(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Value_Clone(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Value_CloneSwigExplicitTK_User_Value(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Value_ReadAscii(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Value_WriteAscii(long jarg1, TK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_User_Value_SetValue(long jarg1, TK_User_Value jarg1_, int jarg2);
  public final static native int TK_User_Value_GetValue(long jarg1, TK_User_Value jarg1_);
  public final static native void delete_TK_User_Value(long jarg1);
  public final static native void TK_User_Value_director_connect(TK_User_Value obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_User_Value_change_ownership(TK_User_Value obj, long cptr, boolean take_or_release);
  public final static native int TKO_Camera_Perspective_Bit_get();
  public final static native int TKO_Camera_Stretched_Bit_get();
  public final static native int TKO_Camera_Projection_Mask_get();
  public final static native int TKO_Camera_Orthographic_get();
  public final static native int TKO_Camera_Perspective_get();
  public final static native int TKO_Camera_Stretched_get();
  public final static native int TKO_Camera_Oblique_Y_get();
  public final static native int TKO_Camera_Oblique_X_get();
  public final static native int TKO_Camera_Oblique_Mask_get();
  public final static native int TKO_Camera_Near_Limit_get();
  public final static native int TKO_Camera_Thumbnail_get();
  public final static native void TK_Camera_m_settings_set(long jarg1, TK_Camera jarg1_, long jarg2);
  public final static native long TK_Camera_m_settings_get(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_m_dsettings_set(long jarg1, TK_Camera jarg1_, long jarg2);
  public final static native long TK_Camera_m_dsettings_get(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_m_details_set(long jarg1, TK_Camera jarg1_, long jarg2);
  public final static native long TK_Camera_m_details_get(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_m_projection_set(long jarg1, TK_Camera jarg1_, short jarg2);
  public final static native short TK_Camera_m_projection_get(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_m_length_set(long jarg1, TK_Camera jarg1_, int jarg2);
  public final static native int TK_Camera_m_length_get(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_set_name__SWIG_0(long jarg1, TK_Camera jarg1_, String jarg2);
  public final static native void TK_Camera_set_name__SWIG_1(long jarg1, TK_Camera jarg1_, int jarg2);
  public final static native long new_TK_Camera__SWIG_0(short jarg1);
  public final static native long new_TK_Camera__SWIG_1();
  public final static native void delete_TK_Camera(long jarg1);
  public final static native int TK_Camera_Read(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Camera_ReadSwigExplicitTK_Camera(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Camera_Write(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Camera_WriteSwigExplicitTK_Camera(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Camera_Clone(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Camera_CloneSwigExplicitTK_Camera(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Camera_ReadAscii(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Camera_WriteAscii(long jarg1, TK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Camera_SetPosition__SWIG_0(long jarg1, TK_Camera jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Camera_SetPosition__SWIG_1(long jarg1, TK_Camera jarg1_, float[] jarg2);
  public final static native void TK_Camera_SetDPosition__SWIG_0(long jarg1, TK_Camera jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Camera_SetDPosition__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native double[] TK_Camera_GetDPosition__SWIG_0(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_GetDPosition__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native void TK_Camera_SetTarget__SWIG_0(long jarg1, TK_Camera jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Camera_SetTarget__SWIG_1(long jarg1, TK_Camera jarg1_, float[] jarg2);
  public final static native void TK_Camera_SetDTarget__SWIG_0(long jarg1, TK_Camera jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Camera_SetDTarget__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native double[] TK_Camera_GetDTarget__SWIG_0(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_GetDTarget__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native void TK_Camera_SetUpVector__SWIG_0(long jarg1, TK_Camera jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Camera_SetUpVector__SWIG_1(long jarg1, TK_Camera jarg1_, float[] jarg2);
  public final static native void TK_Camera_SetDUpVector__SWIG_0(long jarg1, TK_Camera jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Camera_SetDUpVector__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native double[] TK_Camera_GetDUpVector__SWIG_0(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_GetDUpVector__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native void TK_Camera_SetField__SWIG_0(long jarg1, TK_Camera jarg1_, float jarg2, float jarg3);
  public final static native void TK_Camera_SetField__SWIG_1(long jarg1, TK_Camera jarg1_, float[] jarg2);
  public final static native void TK_Camera_SetDField__SWIG_0(long jarg1, TK_Camera jarg1_, double jarg2, double jarg3);
  public final static native void TK_Camera_SetDField__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native double[] TK_Camera_GetDField__SWIG_0(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_GetDField__SWIG_1(long jarg1, TK_Camera jarg1_, double[] jarg2);
  public final static native void TK_Camera_SetOblique__SWIG_0(long jarg1, TK_Camera jarg1_, float jarg2, float jarg3);
  public final static native void TK_Camera_SetOblique__SWIG_1(long jarg1, TK_Camera jarg1_, float[] jarg2);
  public final static native void TK_Camera_SetNearLimit(long jarg1, TK_Camera jarg1_, float jarg2);
  public final static native float TK_Camera_GetNearLimit(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_SetProjection(long jarg1, TK_Camera jarg1_, int jarg2);
  public final static native int TK_Camera_GetProjection(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_SetView__SWIG_0(long jarg1, TK_Camera jarg1_, String jarg2);
  public final static native void TK_Camera_SetView__SWIG_1(long jarg1, TK_Camera jarg1_, int jarg2);
  public final static native String TK_Camera_GetView__SWIG_0(long jarg1, TK_Camera jarg1_);
  public final static native void TK_Camera_director_connect(TK_Camera obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Camera_change_ownership(TK_Camera obj, long cptr, boolean take_or_release);
  public final static native void TK_Window_m_window_set(long jarg1, TK_Window jarg1_, long jarg2);
  public final static native long TK_Window_m_window_get(long jarg1, TK_Window jarg1_);
  public final static native long new_TK_Window();
  public final static native int TK_Window_Read(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Window_ReadSwigExplicitTK_Window(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Window_Write(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Window_WriteSwigExplicitTK_Window(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Window_Clone(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Window_CloneSwigExplicitTK_Window(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Window_ReadAscii(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Window_WriteAscii(long jarg1, TK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Window_SetWindow__SWIG_0(long jarg1, TK_Window jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Window_SetWindow__SWIG_1(long jarg1, TK_Window jarg1_, float[] jarg2);
  public final static native void delete_TK_Window(long jarg1);
  public final static native void TK_Window_director_connect(TK_Window obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Window_change_ownership(TK_Window obj, long cptr, boolean take_or_release);
  public final static native int TKO_Font_Names_get();
  public final static native int TKO_Font_Size_get();
  public final static native int TKO_Font_Size_Tolerance_get();
  public final static native int TKO_Font_Transforms_get();
  public final static native int TKO_Font_Rotation_get();
  public final static native int TKO_Font_Slant_get();
  public final static native int TKO_Font_Width_Scale_get();
  public final static native int TKO_Font_Extended_get();
  public final static native int TKO_Font_Extended_Mask_get();
  public final static native int TKO_Font_Extended_Shift_get();
  public final static native int TKO_Font_Extra_Space_get();
  public final static native int TKO_Font_Line_Spacing_get();
  public final static native int TKO_Font_Outline_get();
  public final static native int TKO_Font_Underline_get();
  public final static native int TKO_Font_Strikethrough_get();
  public final static native int TKO_Font_Overline_get();
  public final static native int TKO_Font_Uniform_Spacing_get();
  public final static native int TKO_Font_Extended2_get();
  public final static native int TKO_Font_Extended2_Mask_get();
  public final static native int TKO_Font_Extended2_Shift_get();
  public final static native int TKO_Font_Greeking_Limit_get();
  public final static native int TKO_Font_Fill_Edges_get();
  public final static native int TKO_Font_Bold_get();
  public final static native int TKO_Font_Italic_get();
  public final static native int TKO_Font_Renderer_get();
  public final static native int TKO_Font_Greeking_Mode_get();
  public final static native int TKO_Font_Preference_get();
  public final static native int TKO_Font_Layout_get();
  public final static native int TKO_Font_Renderer_Undefined_get();
  public final static native int TKO_Font_Renderer_Default_get();
  public final static native int TKO_Font_Renderer_Driver_get();
  public final static native int TKO_Font_Renderer_Truetype_get();
  public final static native int TKO_Font_Renderer_Defined_get();
  public final static native int TKO_Font_Preference_Undefined_get();
  public final static native int TKO_Font_Preference_Default_get();
  public final static native int TKO_Font_Preference_Bitmap_get();
  public final static native int TKO_Font_Preference_Outline_get();
  public final static native int TKO_Font_Preference_Exterior_get();
  public final static native int TKO_Font_Greeking_Mode_None_get();
  public final static native int TKO_Font_Greeking_Mode_Lines_get();
  public final static native int TKO_Font_Greeking_Mode_Box_get();
  public final static native void TK_Text_Font_m_mask_set(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_m_mask_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_value_set(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_m_value_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_names_length_set(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_m_names_length_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_size_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_size_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_tolerance_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_tolerance_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_rotation_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_rotation_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_slant_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_slant_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_width_scale_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_width_scale_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_extra_space_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_extra_space_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_line_spacing_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_line_spacing_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_greeking_limit_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_greeking_limit_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_renderer_cutoff_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_renderer_cutoff_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_preference_cutoff_set(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_m_preference_cutoff_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_renderers_set(long jarg1, TK_Text_Font jarg1_, long jarg2);
  public final static native long TK_Text_Font_m_renderers_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_preferences_set(long jarg1, TK_Text_Font jarg1_, long jarg2);
  public final static native long TK_Text_Font_m_preferences_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_size_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_size_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_tolerance_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_tolerance_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_space_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_space_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_greeking_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_greeking_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_greeking_mode_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_greeking_mode_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_transforms_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_transforms_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_renderer_cutoff_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_renderer_cutoff_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_preference_cutoff_units_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_preference_cutoff_units_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_m_layout_set(long jarg1, TK_Text_Font jarg1_, short jarg2);
  public final static native short TK_Text_Font_m_layout_get(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_set_names__SWIG_0(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native void TK_Text_Font_set_names__SWIG_1(long jarg1, TK_Text_Font jarg1_, String jarg2);
  public final static native long new_TK_Text_Font();
  public final static native void delete_TK_Text_Font(long jarg1);
  public final static native int TK_Text_Font_Read(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Font_ReadSwigExplicitTK_Text_Font(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Font_Write(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Font_WriteSwigExplicitTK_Text_Font(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Font_Clone(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Text_Font_CloneSwigExplicitTK_Text_Font(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Text_Font_ReadAscii(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Font_WriteAscii(long jarg1, TK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Text_Font_Reset(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_ResetSwigExplicitTK_Text_Font(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetMask(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetMask(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetValue(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetValue(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetNames__SWIG_0(long jarg1, TK_Text_Font jarg1_, String jarg2);
  public final static native void TK_Text_Font_SetNames__SWIG_1(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native String TK_Text_Font_GetNames__SWIG_0(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetSize(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetSize(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetSizeUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetSizeUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetTolerance(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetTolerance(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetToleranceUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetToleranceUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetRotation(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetRotation(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetSlant(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetSlant(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetWidthScale(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetWidthScale(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetExtraSpace(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetExtraSpace(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetExtraSpaceUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetExtraSpaceUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetLineSpacing(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetLineSpacing(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetTransforms(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetTransforms(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetGreekingLimit(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetGreekingLimit(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetGreekingLimitUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetGreekingLimitUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetGreekingMode(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetGreekingMode(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetRenderer(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetRenderer(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetRenderers(long jarg1, TK_Text_Font jarg1_, int jarg2, int jarg3);
  public final static native void TK_Text_Font_SetRendererCutoff(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetRendererCutoff(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetRendererCutoffUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetRendererCutoffUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetPreference(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetPreference(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetPreferences(long jarg1, TK_Text_Font jarg1_, int jarg2, int jarg3);
  public final static native void TK_Text_Font_SetPreferenceCutoff(long jarg1, TK_Text_Font jarg1_, float jarg2);
  public final static native float TK_Text_Font_GetPreferenceCutoff(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetPreferenceCutoffUnits(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetPreferenceCutoffUnits(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_SetLayout(long jarg1, TK_Text_Font jarg1_, int jarg2);
  public final static native int TK_Text_Font_GetLayout(long jarg1, TK_Text_Font jarg1_);
  public final static native void TK_Text_Font_director_connect(TK_Text_Font obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Text_Font_change_ownership(TK_Text_Font obj, long cptr, boolean take_or_release);
  public final static native int TKO_Bounding_Type_Cuboid_get();
  public final static native int TKO_Bounding_Type_Sphere_get();
  public final static native void TK_Bounding_m_dvalues_set(long jarg1, TK_Bounding jarg1_, long jarg2);
  public final static native long TK_Bounding_m_dvalues_get(long jarg1, TK_Bounding jarg1_);
  public final static native void TK_Bounding_m_values_set(long jarg1, TK_Bounding jarg1_, long jarg2);
  public final static native long TK_Bounding_m_values_get(long jarg1, TK_Bounding jarg1_);
  public final static native void TK_Bounding_m_type_set(long jarg1, TK_Bounding jarg1_, char jarg2);
  public final static native char TK_Bounding_m_type_get(long jarg1, TK_Bounding jarg1_);
  public final static native void TK_Bounding_m_is_valid_set(long jarg1, TK_Bounding jarg1_, boolean jarg2);
  public final static native boolean TK_Bounding_m_is_valid_get(long jarg1, TK_Bounding jarg1_);
  public final static native long new_TK_Bounding__SWIG_0(short jarg1);
  public final static native long new_TK_Bounding__SWIG_1(short jarg1, float[] jarg2, float[] jarg3);
  public final static native long new_TK_Bounding__SWIG_2(short jarg1, float[] jarg2, float jarg3);
  public final static native long new_TK_Bounding__SWIG_3(short jarg1, double[] jarg2, double[] jarg3);
  public final static native long new_TK_Bounding__SWIG_4(short jarg1, double[] jarg2, double jarg3);
  public final static native int TK_Bounding_Read(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Bounding_ReadSwigExplicitTK_Bounding(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Bounding_Write(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Bounding_WriteSwigExplicitTK_Bounding(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Bounding_Clone(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Bounding_CloneSwigExplicitTK_Bounding(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Bounding_ReadAscii(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Bounding_WriteAscii(long jarg1, TK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_TK_Bounding(long jarg1);
  public final static native void TK_Bounding_director_connect(TK_Bounding obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Bounding_change_ownership(TK_Bounding obj, long cptr, boolean take_or_release);
  public final static native int TKO_Light_Camera_Relative_get();
  public final static native void TK_Point_m_point_set(long jarg1, TK_Point jarg1_, long jarg2);
  public final static native long TK_Point_m_point_get(long jarg1, TK_Point jarg1_);
  public final static native void TK_Point_m_dpoint_set(long jarg1, TK_Point jarg1_, long jarg2);
  public final static native long TK_Point_m_dpoint_get(long jarg1, TK_Point jarg1_);
  public final static native void TK_Point_m_options_set(long jarg1, TK_Point jarg1_, char jarg2);
  public final static native char TK_Point_m_options_get(long jarg1, TK_Point jarg1_);
  public final static native long new_TK_Point(short jarg1);
  public final static native int TK_Point_Read(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Point_ReadSwigExplicitTK_Point(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Point_Write(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Point_WriteSwigExplicitTK_Point(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Point_Clone(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Point_CloneSwigExplicitTK_Point(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Point_ReadAscii(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Point_WriteAscii(long jarg1, TK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Point_Reset(long jarg1, TK_Point jarg1_);
  public final static native void TK_Point_ResetSwigExplicitTK_Point(long jarg1, TK_Point jarg1_);
  public final static native void TK_Point_SetPoint__SWIG_0(long jarg1, TK_Point jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Point_SetPoint__SWIG_1(long jarg1, TK_Point jarg1_, float[] jarg2);
  public final static native void TK_Point_SetDPoint__SWIG_0(long jarg1, TK_Point jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Point_SetDPoint__SWIG_1(long jarg1, TK_Point jarg1_, double[] jarg2);
  public final static native double[] TK_Point_GetDPoint(long jarg1, TK_Point jarg1_);
  public final static native void TK_Point_SetOptions(long jarg1, TK_Point jarg1_, int jarg2);
  public final static native int TK_Point_GetOptions(long jarg1, TK_Point jarg1_);
  public final static native void delete_TK_Point(long jarg1);
  public final static native void TK_Point_director_connect(TK_Point obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Point_change_ownership(TK_Point obj, long cptr, boolean take_or_release);
  public final static native void TK_Line_m_points_set(long jarg1, TK_Line jarg1_, long jarg2);
  public final static native long TK_Line_m_points_get(long jarg1, TK_Line jarg1_);
  public final static native void TK_Line_m_dpoints_set(long jarg1, TK_Line jarg1_, long jarg2);
  public final static native long TK_Line_m_dpoints_get(long jarg1, TK_Line jarg1_);
  public final static native long new_TK_Line__SWIG_0(short jarg1);
  public final static native long new_TK_Line__SWIG_1();
  public final static native int TK_Line_Read(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_ReadSwigExplicitTK_Line(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Write(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_WriteSwigExplicitTK_Line(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Clone(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Line_CloneSwigExplicitTK_Line(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Line_ReadAscii(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_WriteAscii(long jarg1, TK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Line_SetPoints__SWIG_0(long jarg1, TK_Line jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void TK_Line_SetPoints__SWIG_1(long jarg1, TK_Line jarg1_, float[] jarg2, float[] jarg3);
  public final static native void TK_Line_SetPoints__SWIG_2(long jarg1, TK_Line jarg1_, float[] jarg2);
  public final static native void TK_Line_SetDPoints__SWIG_0(long jarg1, TK_Line jarg1_, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7);
  public final static native void TK_Line_SetDPoints__SWIG_1(long jarg1, TK_Line jarg1_, double[] jarg2, double[] jarg3);
  public final static native void TK_Line_SetDPoints__SWIG_2(long jarg1, TK_Line jarg1_, double[] jarg2);
  public final static native double[] TK_Line_GetDPoints(long jarg1, TK_Line jarg1_);
  public final static native void delete_TK_Line(long jarg1);
  public final static native void TK_Line_director_connect(TK_Line obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Line_change_ownership(TK_Line obj, long cptr, boolean take_or_release);
  public final static native void TK_Polypoint_m_count_set(long jarg1, TK_Polypoint jarg1_, int jarg2);
  public final static native int TK_Polypoint_m_count_get(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_m_allocated_set(long jarg1, TK_Polypoint jarg1_, int jarg2);
  public final static native int TK_Polypoint_m_allocated_get(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_m_dpoints_set(long jarg1, TK_Polypoint jarg1_, double[] jarg2);
  public final static native double[] TK_Polypoint_m_dpoints_get(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_set_points__SWIG_0(long jarg1, TK_Polypoint jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Polypoint_set_points__SWIG_1(long jarg1, TK_Polypoint jarg1_, int jarg2);
  public final static native long new_TK_Polypoint(short jarg1);
  public final static native void delete_TK_Polypoint(long jarg1);
  public final static native int TK_Polypoint_Read(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polypoint_ReadSwigExplicitTK_Polypoint(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polypoint_Write(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polypoint_WriteSwigExplicitTK_Polypoint(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polypoint_Clone(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Polypoint_CloneSwigExplicitTK_Polypoint(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Polypoint_ReadAscii(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polypoint_WriteAscii(long jarg1, TK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Polypoint_Reset(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_ResetSwigExplicitTK_Polypoint(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_SetPoints__SWIG_0(long jarg1, TK_Polypoint jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Polypoint_SetPoints__SWIG_1(long jarg1, TK_Polypoint jarg1_, int jarg2);
  public final static native void TK_Polypoint_SetDPoints__SWIG_0(long jarg1, TK_Polypoint jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_Polypoint_SetDPoints__SWIG_1(long jarg1, TK_Polypoint jarg1_, int jarg2);
  public final static native double[] TK_Polypoint_GetDPoints__SWIG_0(long jarg1, TK_Polypoint jarg1_);
  public final static native int TK_Polypoint_GetCount(long jarg1, TK_Polypoint jarg1_);
  public final static native void TK_Polypoint_director_connect(TK_Polypoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Polypoint_change_ownership(TK_Polypoint obj, long cptr, boolean take_or_release);
  public final static native int NC_HAS_WEIGHTS_get();
  public final static native int NC_HAS_KNOTS_get();
  public final static native int NC_HAS_START_get();
  public final static native int NC_HAS_END_get();
  public final static native void TK_NURBS_Curve_m_optionals_set(long jarg1, TK_NURBS_Curve jarg1_, short jarg2);
  public final static native short TK_NURBS_Curve_m_optionals_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_degree_set(long jarg1, TK_NURBS_Curve jarg1_, short jarg2);
  public final static native short TK_NURBS_Curve_m_degree_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_control_point_count_set(long jarg1, TK_NURBS_Curve jarg1_, int jarg2);
  public final static native int TK_NURBS_Curve_m_control_point_count_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_knot_count_implicit_set(long jarg1, TK_NURBS_Curve jarg1_, int jarg2);
  public final static native int TK_NURBS_Curve_m_knot_count_implicit_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_dcontrol_points_set(long jarg1, TK_NURBS_Curve jarg1_, double[] jarg2);
  public final static native double[] TK_NURBS_Curve_m_dcontrol_points_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_start_set(long jarg1, TK_NURBS_Curve jarg1_, float jarg2);
  public final static native float TK_NURBS_Curve_m_start_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_m_end_set(long jarg1, TK_NURBS_Curve jarg1_, float jarg2);
  public final static native float TK_NURBS_Curve_m_end_get(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_0(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7, float jarg8);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_1(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_2(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_3(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_4(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4);
  public final static native void TK_NURBS_Curve_set_curve__SWIG_5(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3);
  public final static native long new_TK_NURBS_Curve();
  public final static native void delete_TK_NURBS_Curve(long jarg1);
  public final static native int TK_NURBS_Curve_Read(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Curve_ReadSwigExplicitTK_NURBS_Curve(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Curve_Write(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Curve_WriteSwigExplicitTK_NURBS_Curve(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Curve_Clone(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_NURBS_Curve_CloneSwigExplicitTK_NURBS_Curve(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_NURBS_Curve_ReadAscii(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Curve_WriteAscii(long jarg1, TK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_NURBS_Curve_Reset(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_ResetSwigExplicitTK_NURBS_Curve(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_0(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7, float jarg8);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_1(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_2(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_3(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_4(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, float[] jarg4);
  public final static native void TK_NURBS_Curve_SetCurve__SWIG_5(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_0(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, double[] jarg4, float[] jarg5, float[] jarg6, float jarg7, float jarg8);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_1(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, double[] jarg4, float[] jarg5, float[] jarg6, float jarg7);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_2(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, double[] jarg4, float[] jarg5, float[] jarg6);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_3(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, double[] jarg4, float[] jarg5);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_4(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3, double[] jarg4);
  public final static native void TK_NURBS_Curve_SetDCurve__SWIG_5(long jarg1, TK_NURBS_Curve jarg1_, int jarg2, int jarg3);
  public final static native double[] TK_NURBS_Curve_GetDPoints__SWIG_0(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native int TK_NURBS_Curve_GetDegree(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native int TK_NURBS_Curve_GetCount(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_SetStart(long jarg1, TK_NURBS_Curve jarg1_, float jarg2);
  public final static native float TK_NURBS_Curve_GetStart(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_SetEnd(long jarg1, TK_NURBS_Curve jarg1_, float jarg2);
  public final static native float TK_NURBS_Curve_GetEnd(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_SetOptions(long jarg1, TK_NURBS_Curve jarg1_, int jarg2);
  public final static native int TK_NURBS_Curve_GetOptions(long jarg1, TK_NURBS_Curve jarg1_);
  public final static native void TK_NURBS_Curve_director_connect(TK_NURBS_Curve obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_NURBS_Curve_change_ownership(TK_NURBS_Curve obj, long cptr, boolean take_or_release);
  public final static native int NS_HAS_WEIGHTS_get();
  public final static native int NS_HAS_KNOTS_get();
  public final static native int NS_HAS_TRIMS_get();
  public final static native int NS_TRIM_END_get();
  public final static native int NS_TRIM_POLY_get();
  public final static native int NS_TRIM_CURVE_get();
  public final static native int NS_TRIM_COLLECTION_get();
  public final static native int NS_TRIM_LAST_KNOWN_TYPE_get();
  public final static native int NS_TRIM_KEEP_get();
  public final static native int NS_TRIM_HAS_WEIGHTS_get();
  public final static native int NS_TRIM_HAS_KNOTS_get();
  public final static native void delete_HT_NURBS_Trim(long jarg1);
  public final static native void HT_NURBS_Trim_SetPoly__SWIG_0(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, float[] jarg3);
  public final static native void HT_NURBS_Trim_SetPoly__SWIG_1(long jarg1, HT_NURBS_Trim jarg1_, int jarg2);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_0(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7, float jarg8);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_1(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6, float jarg7);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_2(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5, float[] jarg6);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_3(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3, float[] jarg4, float[] jarg5);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_4(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3, float[] jarg4);
  public final static native void HT_NURBS_Trim_SetCurve__SWIG_5(long jarg1, HT_NURBS_Trim jarg1_, int jarg2, int jarg3);
  public final static native void HT_NURBS_Trim_SetCollection(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native void HT_NURBS_Trim_SetOptions(long jarg1, HT_NURBS_Trim jarg1_, int jarg2);
  public final static native void HT_NURBS_Trim_SetList(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, HT_NURBS_Trim jarg2_);
  public final static native void HT_NURBS_Trim_SetNext(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, HT_NURBS_Trim jarg2_);
  public final static native int HT_NURBS_Trim_Read(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HT_NURBS_Trim_Write(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HT_NURBS_Trim_ReadAscii(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HT_NURBS_Trim_WriteAscii(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HT_NURBS_Trim_read_collection_ascii(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HT_NURBS_Trim_write_collection_ascii(long jarg1, HT_NURBS_Trim jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native long HT_NURBS_Trim_GetNext(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native int HT_NURBS_Trim_GetType(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native int HT_NURBS_Trim_GetCount(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native int HT_NURBS_Trim_GetDegree(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native int HT_NURBS_Trim_GetOptions(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native long HT_NURBS_Trim_GetList__SWIG_0(long jarg1, HT_NURBS_Trim jarg1_);
  public final static native void HT_NURBS_Trim_GetPoints(long jarg1, HT_NURBS_Trim jarg1_, float[] jarg2, int jarg3);
  public final static native void HT_NURBS_Trim_GetWeights(long jarg1, HT_NURBS_Trim jarg1_, float[] jarg2, int jarg3);
  public final static native void HT_NURBS_Trim_GetKnots(long jarg1, HT_NURBS_Trim jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_NURBS_Surface_m_optionals_set(long jarg1, TK_NURBS_Surface jarg1_, short jarg2);
  public final static native short TK_NURBS_Surface_m_optionals_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_m_degree_set(long jarg1, TK_NURBS_Surface jarg1_, long jarg2);
  public final static native long TK_NURBS_Surface_m_degree_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_m_size_set(long jarg1, TK_NURBS_Surface jarg1_, long jarg2);
  public final static native long TK_NURBS_Surface_m_size_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_m_dcontrol_points_set(long jarg1, TK_NURBS_Surface jarg1_, double[] jarg2);
  public final static native double[] TK_NURBS_Surface_m_dcontrol_points_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_m_trims_set(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, HT_NURBS_Trim jarg2_);
  public final static native long TK_NURBS_Surface_m_trims_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_m_current_trim_set(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, HT_NURBS_Trim jarg2_);
  public final static native long TK_NURBS_Surface_m_current_trim_get(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native long new_TK_NURBS_Surface();
  public final static native void delete_TK_NURBS_Surface(long jarg1);
  public final static native int TK_NURBS_Surface_Read(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Surface_ReadSwigExplicitTK_NURBS_Surface(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Surface_Write(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Surface_WriteSwigExplicitTK_NURBS_Surface(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Surface_Clone(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_NURBS_Surface_CloneSwigExplicitTK_NURBS_Surface(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_NURBS_Surface_ReadAscii(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_NURBS_Surface_WriteAscii(long jarg1, TK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_NURBS_Surface_Reset(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_ResetSwigExplicitTK_NURBS_Surface(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_SetSurface__SWIG_0(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6, float[] jarg7, float[] jarg8, float[] jarg9);
  public final static native void TK_NURBS_Surface_SetSurface__SWIG_1(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6, float[] jarg7, float[] jarg8);
  public final static native void TK_NURBS_Surface_SetSurface__SWIG_2(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6, float[] jarg7);
  public final static native void TK_NURBS_Surface_SetSurface__SWIG_3(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6);
  public final static native void TK_NURBS_Surface_SetSurface__SWIG_4(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void TK_NURBS_Surface_SetDSurface__SWIG_0(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, double[] jarg6, float[] jarg7, float[] jarg8, float[] jarg9);
  public final static native void TK_NURBS_Surface_SetDSurface__SWIG_1(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, double[] jarg6, float[] jarg7, float[] jarg8);
  public final static native void TK_NURBS_Surface_SetDSurface__SWIG_2(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, double[] jarg6, float[] jarg7);
  public final static native void TK_NURBS_Surface_SetDSurface__SWIG_3(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5, double[] jarg6);
  public final static native void TK_NURBS_Surface_SetDSurface__SWIG_4(long jarg1, TK_NURBS_Surface jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native double[] TK_NURBS_Surface_GetDPoints__SWIG_0(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native int TK_NURBS_Surface_GetUDegree(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native int TK_NURBS_Surface_GetVDegree(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native int TK_NURBS_Surface_GetUSize(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native int TK_NURBS_Surface_GetVSize(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_SetOptions(long jarg1, TK_NURBS_Surface jarg1_, int jarg2);
  public final static native int TK_NURBS_Surface_GetOptions(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native long TK_NURBS_Surface_NewTrim__SWIG_0(long jarg1, TK_NURBS_Surface jarg1_, int jarg2);
  public final static native long TK_NURBS_Surface_NewTrim__SWIG_1(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native long TK_NURBS_Surface_GetTrims(long jarg1, TK_NURBS_Surface jarg1_);
  public final static native void TK_NURBS_Surface_director_connect(TK_NURBS_Surface obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_NURBS_Surface_change_ownership(TK_NURBS_Surface obj, long cptr, boolean take_or_release);
  public final static native void TK_Area_Light_m_count_set(long jarg1, TK_Area_Light jarg1_, int jarg2);
  public final static native int TK_Area_Light_m_count_get(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_m_dpoints_set(long jarg1, TK_Area_Light jarg1_, double[] jarg2);
  public final static native double[] TK_Area_Light_m_dpoints_get(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_m_options_set(long jarg1, TK_Area_Light jarg1_, char jarg2);
  public final static native char TK_Area_Light_m_options_get(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_set_points__SWIG_0(long jarg1, TK_Area_Light jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Area_Light_set_points__SWIG_1(long jarg1, TK_Area_Light jarg1_, int jarg2);
  public final static native long new_TK_Area_Light();
  public final static native void delete_TK_Area_Light(long jarg1);
  public final static native int TK_Area_Light_Read(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Area_Light_ReadSwigExplicitTK_Area_Light(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Area_Light_Write(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Area_Light_WriteSwigExplicitTK_Area_Light(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Area_Light_Clone(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Area_Light_CloneSwigExplicitTK_Area_Light(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Area_Light_ReadAscii(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Area_Light_WriteAscii(long jarg1, TK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Area_Light_Reset(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_ResetSwigExplicitTK_Area_Light(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_SetPoints__SWIG_0(long jarg1, TK_Area_Light jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Area_Light_SetPoints__SWIG_1(long jarg1, TK_Area_Light jarg1_, int jarg2);
  public final static native void TK_Area_Light_SetDPoints__SWIG_0(long jarg1, TK_Area_Light jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_Area_Light_SetDPoints__SWIG_1(long jarg1, TK_Area_Light jarg1_, int jarg2);
  public final static native double[] TK_Area_Light_GetDPoints__SWIG_0(long jarg1, TK_Area_Light jarg1_);
  public final static native int TK_Area_Light_GetCount(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_SetOptions(long jarg1, TK_Area_Light jarg1_, int jarg2);
  public final static native int TK_Area_Light_GetOptions(long jarg1, TK_Area_Light jarg1_);
  public final static native void TK_Area_Light_director_connect(TK_Area_Light obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Area_Light_change_ownership(TK_Area_Light obj, long cptr, boolean take_or_release);
  public final static native int TKO_Spot_Outer_Degrees_get();
  public final static native int TKO_Spot_Outer_Field_get();
  public final static native int TKO_Spot_Inner_Degrees_get();
  public final static native int TKO_Spot_Inner_Field_get();
  public final static native int TKO_Spot_Inner_Percent_get();
  public final static native int TKO_Spot_Outer_Mask_get();
  public final static native int TKO_Spot_Inner_Mask_get();
  public final static native int TKO_Spot_Camera_Relative_get();
  public final static native int TKO_Spot_Concentration_get();
  public final static native void TK_Spot_Light_m_position_set(long jarg1, TK_Spot_Light jarg1_, long jarg2);
  public final static native long TK_Spot_Light_m_position_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_target_set(long jarg1, TK_Spot_Light jarg1_, long jarg2);
  public final static native long TK_Spot_Light_m_target_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_dposition_set(long jarg1, TK_Spot_Light jarg1_, long jarg2);
  public final static native long TK_Spot_Light_m_dposition_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_dtarget_set(long jarg1, TK_Spot_Light jarg1_, long jarg2);
  public final static native long TK_Spot_Light_m_dtarget_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_outer_set(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_m_outer_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_inner_set(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_m_inner_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_concentration_set(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_m_concentration_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_m_options_set(long jarg1, TK_Spot_Light jarg1_, char jarg2);
  public final static native char TK_Spot_Light_m_options_get(long jarg1, TK_Spot_Light jarg1_);
  public final static native long new_TK_Spot_Light();
  public final static native int TK_Spot_Light_Read(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Spot_Light_ReadSwigExplicitTK_Spot_Light(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Spot_Light_Write(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Spot_Light_WriteSwigExplicitTK_Spot_Light(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Spot_Light_Clone(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Spot_Light_CloneSwigExplicitTK_Spot_Light(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Spot_Light_ReadAscii(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Spot_Light_WriteAscii(long jarg1, TK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Spot_Light_SetPosition__SWIG_0(long jarg1, TK_Spot_Light jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Spot_Light_SetPosition__SWIG_1(long jarg1, TK_Spot_Light jarg1_, float[] jarg2);
  public final static native void TK_Spot_Light_SetDPosition__SWIG_0(long jarg1, TK_Spot_Light jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Spot_Light_SetDPosition__SWIG_1(long jarg1, TK_Spot_Light jarg1_, double[] jarg2);
  public final static native double[] TK_Spot_Light_GetDPosition(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_SetTarget__SWIG_0(long jarg1, TK_Spot_Light jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Spot_Light_SetTarget__SWIG_1(long jarg1, TK_Spot_Light jarg1_, float[] jarg2);
  public final static native void TK_Spot_Light_SetDTarget__SWIG_0(long jarg1, TK_Spot_Light jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Spot_Light_SetDTarget__SWIG_1(long jarg1, TK_Spot_Light jarg1_, double[] jarg2);
  public final static native double[] TK_Spot_Light_GetDTarget(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_SetOuter(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_GetOuter(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_SetInner(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_GetInner(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_SetConcentration(long jarg1, TK_Spot_Light jarg1_, float jarg2);
  public final static native float TK_Spot_Light_GetConcentration(long jarg1, TK_Spot_Light jarg1_);
  public final static native void TK_Spot_Light_SetOptions(long jarg1, TK_Spot_Light jarg1_, int jarg2);
  public final static native int TK_Spot_Light_GetOptions(long jarg1, TK_Spot_Light jarg1_);
  public final static native void delete_TK_Spot_Light(long jarg1);
  public final static native void TK_Spot_Light_director_connect(TK_Spot_Light obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Spot_Light_change_ownership(TK_Spot_Light obj, long cptr, boolean take_or_release);
  public final static native void TK_Cutting_Plane_m_dplanes_set(long jarg1, TK_Cutting_Plane jarg1_, double[] jarg2);
  public final static native double[] TK_Cutting_Plane_m_dplanes_get(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native void TK_Cutting_Plane_m_count_set(long jarg1, TK_Cutting_Plane jarg1_, int jarg2);
  public final static native int TK_Cutting_Plane_m_count_get(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native long new_TK_Cutting_Plane();
  public final static native void delete_TK_Cutting_Plane(long jarg1);
  public final static native int TK_Cutting_Plane_Read(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cutting_Plane_ReadSwigExplicitTK_Cutting_Plane(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cutting_Plane_Write(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cutting_Plane_WriteSwigExplicitTK_Cutting_Plane(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cutting_Plane_Clone(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Cutting_Plane_CloneSwigExplicitTK_Cutting_Plane(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Cutting_Plane_ReadAscii(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cutting_Plane_WriteAscii(long jarg1, TK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Cutting_Plane_Reset(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native void TK_Cutting_Plane_ResetSwigExplicitTK_Cutting_Plane(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native void TK_Cutting_Plane_SetPlanes__SWIG_0(long jarg1, TK_Cutting_Plane jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Cutting_Plane_SetPlanes__SWIG_1(long jarg1, TK_Cutting_Plane jarg1_, int jarg2);
  public final static native void TK_Cutting_Plane_SetDPlanes__SWIG_0(long jarg1, TK_Cutting_Plane jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_Cutting_Plane_SetDPlanes__SWIG_1(long jarg1, TK_Cutting_Plane jarg1_, int jarg2);
  public final static native void TK_Cutting_Plane_SetPlane__SWIG_0(long jarg1, TK_Cutting_Plane jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Cutting_Plane_SetDPlane__SWIG_0(long jarg1, TK_Cutting_Plane jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void TK_Cutting_Plane_SetPlane__SWIG_1(long jarg1, TK_Cutting_Plane jarg1_, float[] jarg2);
  public final static native void TK_Cutting_Plane_SetDPlane__SWIG_1(long jarg1, TK_Cutting_Plane jarg1_, double[] jarg2);
  public final static native double[] TK_Cutting_Plane_GetDPlane(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native double[] TK_Cutting_Plane_GetDPlanes(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native int TK_Cutting_Plane_GetCount(long jarg1, TK_Cutting_Plane jarg1_);
  public final static native void TK_Cutting_Plane_director_connect(TK_Cutting_Plane obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Cutting_Plane_change_ownership(TK_Cutting_Plane obj, long cptr, boolean take_or_release);
  public final static native int TKO_Circular_Center_get();
  public final static native void TK_Circle_m_points_set(long jarg1, TK_Circle jarg1_, long jarg2);
  public final static native long TK_Circle_m_points_get(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_m_center_set(long jarg1, TK_Circle jarg1_, long jarg2);
  public final static native long TK_Circle_m_center_get(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_m_dpoints_set(long jarg1, TK_Circle jarg1_, long jarg2);
  public final static native long TK_Circle_m_dpoints_get(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_m_dcenter_set(long jarg1, TK_Circle jarg1_, long jarg2);
  public final static native long TK_Circle_m_dcenter_get(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_m_flags_set(long jarg1, TK_Circle jarg1_, short jarg2);
  public final static native short TK_Circle_m_flags_get(long jarg1, TK_Circle jarg1_);
  public final static native long new_TK_Circle(short jarg1);
  public final static native int TK_Circle_Read(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Circle_ReadSwigExplicitTK_Circle(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Circle_Write(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Circle_WriteSwigExplicitTK_Circle(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Circle_Clone(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Circle_CloneSwigExplicitTK_Circle(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Circle_ReadAscii(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Circle_WriteAscii(long jarg1, TK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Circle_Reset(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_ResetSwigExplicitTK_Circle(long jarg1, TK_Circle jarg1_);
  public final static native void TK_Circle_SetStart__SWIG_0(long jarg1, TK_Circle jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Circle_SetStart__SWIG_1(long jarg1, TK_Circle jarg1_, float[] jarg2);
  public final static native void TK_Circle_SetMiddle__SWIG_0(long jarg1, TK_Circle jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Circle_SetMiddle__SWIG_1(long jarg1, TK_Circle jarg1_, float[] jarg2);
  public final static native void TK_Circle_SetEnd__SWIG_0(long jarg1, TK_Circle jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Circle_SetEnd__SWIG_1(long jarg1, TK_Circle jarg1_, float[] jarg2);
  public final static native void TK_Circle_SetCenter__SWIG_0(long jarg1, TK_Circle jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Circle_SetCenter__SWIG_1(long jarg1, TK_Circle jarg1_, float[] jarg2);
  public final static native void TK_Circle_SetPoints__SWIG_0(long jarg1, TK_Circle jarg1_, float[] jarg2, float[] jarg3, float[] jarg4, float[] jarg5);
  public final static native void TK_Circle_SetPoints__SWIG_1(long jarg1, TK_Circle jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void TK_Circle_SetDStart__SWIG_0(long jarg1, TK_Circle jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Circle_SetDStart__SWIG_1(long jarg1, TK_Circle jarg1_, double[] jarg2);
  public final static native void TK_Circle_SetDMiddle__SWIG_0(long jarg1, TK_Circle jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Circle_SetDMiddle__SWIG_1(long jarg1, TK_Circle jarg1_, double[] jarg2);
  public final static native void TK_Circle_SetDEnd__SWIG_0(long jarg1, TK_Circle jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Circle_SetDEnd__SWIG_1(long jarg1, TK_Circle jarg1_, double[] jarg2);
  public final static native void TK_Circle_SetDCenter__SWIG_0(long jarg1, TK_Circle jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Circle_SetDCenter__SWIG_1(long jarg1, TK_Circle jarg1_, double[] jarg2);
  public final static native void TK_Circle_SetDPoints__SWIG_0(long jarg1, TK_Circle jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5);
  public final static native void TK_Circle_SetDPoints__SWIG_1(long jarg1, TK_Circle jarg1_, double[] jarg2, double[] jarg3, double[] jarg4);
  public final static native double[] TK_Circle_GetDStart(long jarg1, TK_Circle jarg1_);
  public final static native double[] TK_Circle_GetDMiddle(long jarg1, TK_Circle jarg1_);
  public final static native double[] TK_Circle_GetDEnd(long jarg1, TK_Circle jarg1_);
  public final static native double[] TK_Circle_GetDCenter(long jarg1, TK_Circle jarg1_);
  public final static native void delete_TK_Circle(long jarg1);
  public final static native void TK_Circle_director_connect(TK_Circle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Circle_change_ownership(TK_Circle obj, long cptr, boolean take_or_release);
  public final static native void TK_Ellipse_m_points_set(long jarg1, TK_Ellipse jarg1_, long jarg2);
  public final static native long TK_Ellipse_m_points_get(long jarg1, TK_Ellipse jarg1_);
  public final static native void TK_Ellipse_m_dpoints_set(long jarg1, TK_Ellipse jarg1_, long jarg2);
  public final static native long TK_Ellipse_m_dpoints_get(long jarg1, TK_Ellipse jarg1_);
  public final static native void TK_Ellipse_m_limits_set(long jarg1, TK_Ellipse jarg1_, long jarg2);
  public final static native long TK_Ellipse_m_limits_get(long jarg1, TK_Ellipse jarg1_);
  public final static native long new_TK_Ellipse(short jarg1);
  public final static native int TK_Ellipse_Read(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Ellipse_ReadSwigExplicitTK_Ellipse(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Ellipse_Write(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Ellipse_WriteSwigExplicitTK_Ellipse(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Ellipse_Clone(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Ellipse_CloneSwigExplicitTK_Ellipse(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Ellipse_ReadAscii(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Ellipse_WriteAscii(long jarg1, TK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Ellipse_SetCenter__SWIG_0(long jarg1, TK_Ellipse jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Ellipse_SetCenter__SWIG_1(long jarg1, TK_Ellipse jarg1_, float[] jarg2);
  public final static native void TK_Ellipse_SetMajor__SWIG_0(long jarg1, TK_Ellipse jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Ellipse_SetMajor__SWIG_1(long jarg1, TK_Ellipse jarg1_, float[] jarg2);
  public final static native void TK_Ellipse_SetMinor__SWIG_0(long jarg1, TK_Ellipse jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Ellipse_SetMinor__SWIG_1(long jarg1, TK_Ellipse jarg1_, float[] jarg2);
  public final static native void TK_Ellipse_SetDCenter__SWIG_0(long jarg1, TK_Ellipse jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Ellipse_SetDCenter__SWIG_1(long jarg1, TK_Ellipse jarg1_, double[] jarg2);
  public final static native double[] TK_Ellipse_GetDCenter(long jarg1, TK_Ellipse jarg1_);
  public final static native void TK_Ellipse_SetDMajor__SWIG_0(long jarg1, TK_Ellipse jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Ellipse_SetDMajor__SWIG_1(long jarg1, TK_Ellipse jarg1_, double[] jarg2);
  public final static native double[] TK_Ellipse_GetDMajor(long jarg1, TK_Ellipse jarg1_);
  public final static native void TK_Ellipse_SetDMinor__SWIG_0(long jarg1, TK_Ellipse jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Ellipse_SetDMinor__SWIG_1(long jarg1, TK_Ellipse jarg1_, double[] jarg2);
  public final static native double[] TK_Ellipse_GetDMinor(long jarg1, TK_Ellipse jarg1_);
  public final static native void TK_Ellipse_SetLimits(long jarg1, TK_Ellipse jarg1_, float jarg2, float jarg3);
  public final static native void delete_TK_Ellipse(long jarg1);
  public final static native void TK_Ellipse_director_connect(TK_Ellipse obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Ellipse_change_ownership(TK_Ellipse obj, long cptr, boolean take_or_release);
  public final static native void TK_Sphere_m_flags_set(long jarg1, TK_Sphere jarg1_, short jarg2);
  public final static native short TK_Sphere_m_flags_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_center_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_center_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_radius_set(long jarg1, TK_Sphere jarg1_, float jarg2);
  public final static native float TK_Sphere_m_radius_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_axis_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_axis_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_ortho_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_ortho_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_dcenter_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_dcenter_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_dradius_set(long jarg1, TK_Sphere jarg1_, double jarg2);
  public final static native double TK_Sphere_m_dradius_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_daxis_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_daxis_get(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_m_dortho_set(long jarg1, TK_Sphere jarg1_, long jarg2);
  public final static native long TK_Sphere_m_dortho_get(long jarg1, TK_Sphere jarg1_);
  public final static native long new_TK_Sphere();
  public final static native int TK_Sphere_Read(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Sphere_ReadSwigExplicitTK_Sphere(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Sphere_Write(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Sphere_WriteSwigExplicitTK_Sphere(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Sphere_Clone(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Sphere_CloneSwigExplicitTK_Sphere(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Sphere_ReadAscii(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Sphere_WriteAscii(long jarg1, TK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Sphere_Reset(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_ResetSwigExplicitTK_Sphere(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_SetCenter__SWIG_0(long jarg1, TK_Sphere jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Sphere_SetCenter__SWIG_1(long jarg1, TK_Sphere jarg1_, float[] jarg2);
  public final static native void TK_Sphere_SetRadius(long jarg1, TK_Sphere jarg1_, float jarg2);
  public final static native float TK_Sphere_GetRadius(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_SetAxis__SWIG_0(long jarg1, TK_Sphere jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Sphere_SetAxis__SWIG_1(long jarg1, TK_Sphere jarg1_, float[] jarg2);
  public final static native void TK_Sphere_SetOrtho__SWIG_0(long jarg1, TK_Sphere jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Sphere_SetOrtho__SWIG_1(long jarg1, TK_Sphere jarg1_, float[] jarg2);
  public final static native void TK_Sphere_SetDCenter__SWIG_0(long jarg1, TK_Sphere jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Sphere_SetDCenter__SWIG_1(long jarg1, TK_Sphere jarg1_, double[] jarg2);
  public final static native double[] TK_Sphere_GetDCenter(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_SetDRadius(long jarg1, TK_Sphere jarg1_, double jarg2);
  public final static native double TK_Sphere_GetDRadius(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_SetDAxis__SWIG_0(long jarg1, TK_Sphere jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Sphere_SetDAxis__SWIG_1(long jarg1, TK_Sphere jarg1_, double[] jarg2);
  public final static native double[] TK_Sphere_GetDAxis(long jarg1, TK_Sphere jarg1_);
  public final static native void TK_Sphere_SetDOrtho__SWIG_0(long jarg1, TK_Sphere jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Sphere_SetDOrtho__SWIG_1(long jarg1, TK_Sphere jarg1_, double[] jarg2);
  public final static native double[] TK_Sphere_GetDOrtho(long jarg1, TK_Sphere jarg1_);
  public final static native int TK_Sphere_TKSPH_NONE_get();
  public final static native int TK_Sphere_TKSPH_NULL_AXIS_get();
  public final static native void delete_TK_Sphere(long jarg1);
  public final static native void TK_Sphere_director_connect(TK_Sphere obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Sphere_change_ownership(TK_Sphere obj, long cptr, boolean take_or_release);
  public final static native void TK_Cylinder_m_axis_set(long jarg1, TK_Cylinder jarg1_, long jarg2);
  public final static native long TK_Cylinder_m_axis_get(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_m_radius_set(long jarg1, TK_Cylinder jarg1_, float jarg2);
  public final static native float TK_Cylinder_m_radius_get(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_m_daxis_set(long jarg1, TK_Cylinder jarg1_, long jarg2);
  public final static native long TK_Cylinder_m_daxis_get(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_m_dradius_set(long jarg1, TK_Cylinder jarg1_, double jarg2);
  public final static native double TK_Cylinder_m_dradius_get(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_m_flags_set(long jarg1, TK_Cylinder jarg1_, short jarg2);
  public final static native short TK_Cylinder_m_flags_get(long jarg1, TK_Cylinder jarg1_);
  public final static native long new_TK_Cylinder();
  public final static native int TK_Cylinder_Read(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cylinder_ReadSwigExplicitTK_Cylinder(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cylinder_Write(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cylinder_WriteSwigExplicitTK_Cylinder(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cylinder_Clone(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Cylinder_CloneSwigExplicitTK_Cylinder(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Cylinder_ReadAscii(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Cylinder_WriteAscii(long jarg1, TK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Cylinder_SetAxis__SWIG_0(long jarg1, TK_Cylinder jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void TK_Cylinder_SetAxis__SWIG_1(long jarg1, TK_Cylinder jarg1_, float[] jarg2, float[] jarg3);
  public final static native void TK_Cylinder_SetAxis__SWIG_2(long jarg1, TK_Cylinder jarg1_, float[] jarg2);
  public final static native void TK_Cylinder_SetRadius(long jarg1, TK_Cylinder jarg1_, float jarg2);
  public final static native float TK_Cylinder_GetRadius(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_SetDAxis__SWIG_0(long jarg1, TK_Cylinder jarg1_, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7);
  public final static native void TK_Cylinder_SetDAxis__SWIG_1(long jarg1, TK_Cylinder jarg1_, double[] jarg2, double[] jarg3);
  public final static native void TK_Cylinder_SetDAxis__SWIG_2(long jarg1, TK_Cylinder jarg1_, double[] jarg2);
  public final static native double[] TK_Cylinder_GetDAxis(long jarg1, TK_Cylinder jarg1_);
  public final static native double[] TK_Cylinder_GetDStart(long jarg1, TK_Cylinder jarg1_);
  public final static native double[] TK_Cylinder_GetDEnd(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_SetDRadius(long jarg1, TK_Cylinder jarg1_, double jarg2);
  public final static native double TK_Cylinder_GetDRadius(long jarg1, TK_Cylinder jarg1_);
  public final static native void TK_Cylinder_SetCaps(long jarg1, TK_Cylinder jarg1_, int jarg2);
  public final static native int TK_Cylinder_GetCaps(long jarg1, TK_Cylinder jarg1_);
  public final static native int TK_Cylinder_TKCYL_NONE_get();
  public final static native int TK_Cylinder_TKCYL_FIRST_get();
  public final static native int TK_Cylinder_TKCYL_SECOND_get();
  public final static native int TK_Cylinder_TKCYL_BOTH_get();
  public final static native void delete_TK_Cylinder(long jarg1);
  public final static native void TK_Cylinder_director_connect(TK_Cylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Cylinder_change_ownership(TK_Cylinder obj, long cptr, boolean take_or_release);
  public final static native void TK_PolyCylinder_m_count_set(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native int TK_PolyCylinder_m_count_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_m_dpoints_set(long jarg1, TK_PolyCylinder jarg1_, double[] jarg2);
  public final static native double[] TK_PolyCylinder_m_dpoints_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_m_radius_count_set(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native int TK_PolyCylinder_m_radius_count_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_m_dradii_set(long jarg1, TK_PolyCylinder jarg1_, double[] jarg2);
  public final static native double[] TK_PolyCylinder_m_dradii_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_m_flags_set(long jarg1, TK_PolyCylinder jarg1_, short jarg2);
  public final static native short TK_PolyCylinder_m_flags_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_m_normals_set(long jarg1, TK_PolyCylinder jarg1_, long jarg2);
  public final static native long TK_PolyCylinder_m_normals_get(long jarg1, TK_PolyCylinder jarg1_);
  public final static native long new_TK_PolyCylinder();
  public final static native void delete_TK_PolyCylinder(long jarg1);
  public final static native int TK_PolyCylinder_Read(long jarg1, TK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyCylinder_Write(long jarg1, TK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyCylinder_Clone(long jarg1, TK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_PolyCylinder_ReadAscii(long jarg1, TK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyCylinder_WriteAscii(long jarg1, TK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_PolyCylinder_Reset(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_ResetSwigExplicitTK_PolyCylinder(long jarg1, TK_PolyCylinder jarg1_);
  public final static native int TK_PolyCylinder_TKCYL_NORMAL_FIRST_get();
  public final static native int TK_PolyCylinder_TKCYL_NORMAL_SECOND_get();
  public final static native int TK_PolyCylinder_TKCYL_OPTIONALS_get();
  public final static native void TK_PolyCylinder_SetRadii__SWIG_0(long jarg1, TK_PolyCylinder jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_PolyCylinder_SetRadii__SWIG_1(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native void TK_PolyCylinder_SetRadius(long jarg1, TK_PolyCylinder jarg1_, float jarg2);
  public final static native double[] TK_PolyCylinder_GetDPoints__SWIG_0(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_SetDRadii__SWIG_0(long jarg1, TK_PolyCylinder jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_PolyCylinder_SetDRadii__SWIG_1(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native void TK_PolyCylinder_SetDRadius(long jarg1, TK_PolyCylinder jarg1_, double jarg2);
  public final static native double[] TK_PolyCylinder_GetDRadii__SWIG_0(long jarg1, TK_PolyCylinder jarg1_);
  public final static native int TK_PolyCylinder_GetCount(long jarg1, TK_PolyCylinder jarg1_);
  public final static native int TK_PolyCylinder_GetRadiusCount(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_SetCaps(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native int TK_PolyCylinder_GetCaps(long jarg1, TK_PolyCylinder jarg1_);
  public final static native void TK_PolyCylinder_SetEndNormal__SWIG_0(long jarg1, TK_PolyCylinder jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_PolyCylinder_SetEndNormal__SWIG_1(long jarg1, TK_PolyCylinder jarg1_, int jarg2);
  public final static native void TK_PolyCylinder_director_connect(TK_PolyCylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_PolyCylinder_change_ownership(TK_PolyCylinder obj, long cptr, boolean take_or_release);
  public final static native void TK_Grid_m_type_set(long jarg1, TK_Grid jarg1_, char jarg2);
  public final static native char TK_Grid_m_type_get(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_m_points_set(long jarg1, TK_Grid jarg1_, long jarg2);
  public final static native long TK_Grid_m_points_get(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_m_dpoints_set(long jarg1, TK_Grid jarg1_, long jarg2);
  public final static native long TK_Grid_m_dpoints_get(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_m_counts_set(long jarg1, TK_Grid jarg1_, long jarg2);
  public final static native long TK_Grid_m_counts_get(long jarg1, TK_Grid jarg1_);
  public final static native long new_TK_Grid();
  public final static native int TK_Grid_Read(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Grid_ReadSwigExplicitTK_Grid(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Grid_Write(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Grid_WriteSwigExplicitTK_Grid(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Grid_Clone(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Grid_CloneSwigExplicitTK_Grid(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Grid_ReadAscii(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Grid_WriteAscii(long jarg1, TK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Grid_SetOrigin__SWIG_0(long jarg1, TK_Grid jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Grid_SetOrigin__SWIG_1(long jarg1, TK_Grid jarg1_, float[] jarg2);
  public final static native void TK_Grid_SetRef1__SWIG_0(long jarg1, TK_Grid jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Grid_SetRef1__SWIG_1(long jarg1, TK_Grid jarg1_, float[] jarg2);
  public final static native void TK_Grid_SetRef2__SWIG_0(long jarg1, TK_Grid jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Grid_SetRef2__SWIG_1(long jarg1, TK_Grid jarg1_, float[] jarg2);
  public final static native void TK_Grid_SetDOrigin__SWIG_0(long jarg1, TK_Grid jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Grid_SetDOrigin__SWIG_1(long jarg1, TK_Grid jarg1_, double[] jarg2);
  public final static native double[] TK_Grid_GetDOrigin__SWIG_0(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_SetDRef1__SWIG_0(long jarg1, TK_Grid jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Grid_SetDRef1__SWIG_1(long jarg1, TK_Grid jarg1_, double[] jarg2);
  public final static native double[] TK_Grid_GetDRef1__SWIG_0(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_SetDRef2__SWIG_0(long jarg1, TK_Grid jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Grid_SetDRef2__SWIG_1(long jarg1, TK_Grid jarg1_, double[] jarg2);
  public final static native double[] TK_Grid_GetDRef2__SWIG_0(long jarg1, TK_Grid jarg1_);
  public final static native void TK_Grid_SetCounts(long jarg1, TK_Grid jarg1_, int jarg2, int jarg3);
  public final static native void TK_Grid_SetType(long jarg1, TK_Grid jarg1_, int jarg2);
  public final static native int TK_Grid_GetType(long jarg1, TK_Grid jarg1_);
  public final static native void delete_TK_Grid(long jarg1);
  public final static native void TK_Grid_director_connect(TK_Grid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Grid_change_ownership(TK_Grid obj, long cptr, boolean take_or_release);
  public final static native int TKO_Text_Option_Region_get();
  public final static native int TKO_Text_Option_Character_Attributes_get();
  public final static native int TKO_Text_Region_Window_get();
  public final static native int TKO_Text_Region_Relative_get();
  public final static native int TKO_Text_Region_Adjusted_get();
  public final static native int TKO_Text_Region_Center_get();
  public final static native int TKO_Text_Region_Top_get();
  public final static native int TKO_Text_Region_HFit_get();
  public final static native int TKO_Text_Region_VFit_get();
  public final static native int TKO_Text_Region_Fitting_get();
  public final static native int TKO_Text_Region_Extended_get();
  public final static native int TKO_Text_Region_Fit_None_get();
  public final static native int TKO_Text_Region_Fit_Spacing_get();
  public final static native int TKO_Text_Region_Fit_Size_get();
  public final static native int TKO_Character_Name_get();
  public final static native int TKO_Character_Size_get();
  public final static native int TKO_Character_Vertical_Offset_get();
  public final static native int TKO_Character_Omitted_get();
  public final static native int TKO_Character_Invisible_get();
  public final static native int TKO_Character_Slant_get();
  public final static native int TKO_Character_Width_Scale_get();
  public final static native int TKO_Character_Rotation_get();
  public final static native int TKO_Character_Rotation_Fixed_get();
  public final static native int TKO_Character_Horizontal_Offset_get();
  public final static native int TKO_Character_Color_get();
  public final static native int TKO_Character_Extended_get();
  public final static native void TK_Text_m_position_set(long jarg1, TK_Text jarg1_, long jarg2);
  public final static native long TK_Text_m_position_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_dposition_set(long jarg1, TK_Text jarg1_, long jarg2);
  public final static native long TK_Text_m_dposition_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_length_set(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_m_length_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_allocated_set(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_m_allocated_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_encoding_set(long jarg1, TK_Text jarg1_, short jarg2);
  public final static native short TK_Text_m_encoding_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_options_set(long jarg1, TK_Text jarg1_, short jarg2);
  public final static native short TK_Text_m_options_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_region_options_set(long jarg1, TK_Text jarg1_, short jarg2);
  public final static native short TK_Text_m_region_options_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_region_fit_set(long jarg1, TK_Text jarg1_, short jarg2);
  public final static native short TK_Text_m_region_fit_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_region_count_set(long jarg1, TK_Text jarg1_, short jarg2);
  public final static native short TK_Text_m_region_count_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_region_set(long jarg1, TK_Text jarg1_, long jarg2);
  public final static native long TK_Text_m_region_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_count_set(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_m_count_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_character_attributes_set(long jarg1, TK_Text jarg1_, long jarg2);
  public final static native long TK_Text_m_character_attributes_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_substage_set(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_m_substage_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_m_tmp_set(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_m_tmp_get(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_set_string__SWIG_0(long jarg1, TK_Text jarg1_, String jarg2);
  public final static native void TK_Text_set_string__SWIG_1(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native long new_TK_Text(short jarg1);
  public final static native void delete_TK_Text(long jarg1);
  public final static native int TK_Text_Read(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_ReadSwigExplicitTK_Text(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Write(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_WriteSwigExplicitTK_Text(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_Clone(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Text_CloneSwigExplicitTK_Text(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Text_ReadAscii(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Text_WriteAscii(long jarg1, TK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Text_Reset(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_ResetSwigExplicitTK_Text(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_SetString__SWIG_0(long jarg1, TK_Text jarg1_, String jarg2);
  public final static native void TK_Text_SetString__SWIG_1(long jarg1, TK_Text jarg1_, int[] jarg2);
  public final static native void TK_Text_SetString__SWIG_2(long jarg1, TK_Text jarg1_, long[] jarg2);
  public final static native void TK_Text_SetString__SWIG_3(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native String TK_Text_GetString__SWIG_0(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_SetPosition__SWIG_0(long jarg1, TK_Text jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Text_SetPosition__SWIG_1(long jarg1, TK_Text jarg1_, float[] jarg2);
  public final static native void TK_Text_SetDPosition__SWIG_0(long jarg1, TK_Text jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Text_SetDPosition__SWIG_1(long jarg1, TK_Text jarg1_, double[] jarg2);
  public final static native double[] TK_Text_GetDPosition(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_SetEncoding(long jarg1, TK_Text jarg1_, int jarg2);
  public final static native int TK_Text_GetEncoding(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_SetTextRegion__SWIG_0(long jarg1, TK_Text jarg1_, int jarg2, float[] jarg3, int jarg4, int jarg5);
  public final static native void TK_Text_SetTextRegion__SWIG_1(long jarg1, TK_Text jarg1_, int jarg2, float[] jarg3, int jarg4);
  public final static native void TK_Text_SetTextRegion__SWIG_2(long jarg1, TK_Text jarg1_, int jarg2, float[] jarg3);
  public final static native int TK_Text_GetTextRegionCount(long jarg1, TK_Text jarg1_);
  public final static native int TK_Text_GetTextRegionOptions(long jarg1, TK_Text jarg1_);
  public final static native int TK_Text_GetTextRegionFitting(long jarg1, TK_Text jarg1_);
  public final static native void TK_Text_director_connect(TK_Text obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Text_change_ownership(TK_Text obj, long cptr, boolean take_or_release);
  public final static native void TK_Font_m_name_length_set(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_m_name_length_get(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_m_lookup_length_set(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_m_lookup_length_get(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_m_length_set(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_m_length_get(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_m_type_set(long jarg1, TK_Font jarg1_, short jarg2);
  public final static native short TK_Font_m_type_get(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_m_encoding_set(long jarg1, TK_Font jarg1_, short jarg2);
  public final static native short TK_Font_m_encoding_get(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_set_bytes__SWIG_0(long jarg1, TK_Font jarg1_, int jarg2, String jarg3);
  public final static native void TK_Font_set_bytes__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native void TK_Font_set_name__SWIG_0(long jarg1, TK_Font jarg1_, String jarg2);
  public final static native void TK_Font_set_name__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native void TK_Font_set_lookup__SWIG_0(long jarg1, TK_Font jarg1_, String jarg2);
  public final static native void TK_Font_set_lookup__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native long new_TK_Font();
  public final static native void delete_TK_Font(long jarg1);
  public final static native int TK_Font_Read(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Font_ReadSwigExplicitTK_Font(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Font_Write(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Font_WriteSwigExplicitTK_Font(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Font_Clone(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Font_CloneSwigExplicitTK_Font(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Font_ReadAscii(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Font_WriteAscii(long jarg1, TK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Font_Reset(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_ResetSwigExplicitTK_Font(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_SetType(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_GetType(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_SetBytes__SWIG_0(long jarg1, TK_Font jarg1_, int jarg2, String jarg3);
  public final static native void TK_Font_SetBytes__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_GetBytesCount(long jarg1, TK_Font jarg1_);
  public final static native String TK_Font_GetBytes__SWIG_0(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_SetName__SWIG_0(long jarg1, TK_Font jarg1_, String jarg2);
  public final static native void TK_Font_SetName__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native String TK_Font_GetName__SWIG_0(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_SetLookup__SWIG_0(long jarg1, TK_Font jarg1_, String jarg2);
  public final static native void TK_Font_SetLookup__SWIG_1(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native String TK_Font_GetLookup__SWIG_0(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_SetEncoding(long jarg1, TK_Font jarg1_, int jarg2);
  public final static native int TK_Font_GetEncoding(long jarg1, TK_Font jarg1_);
  public final static native void TK_Font_director_connect(TK_Font obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Font_change_ownership(TK_Font obj, long cptr, boolean take_or_release);
  public final static native int TKO_Image_Mapped_get();
  public final static native int TKO_Image_Mapped_16_get();
  public final static native int TKO_Image_RGB_get();
  public final static native int TKO_Image_RGBA_get();
  public final static native int TKO_Image_BGRA_get();
  public final static native int TKO_Image_DEPTH_get();
  public final static native int TKO_Image_LUMINANCE8_get();
  public final static native int TKO_Image_JPEG_get();
  public final static native int TKO_Image_DXT1_get();
  public final static native int TKO_Image_DXT3_get();
  public final static native int TKO_Image_DXT5_get();
  public final static native int TKO_Image_TARGA_get();
  public final static native int TKO_Image_PNG_get();
  public final static native int TKO_Image_Format_Mask_get();
  public final static native int TKO_Image_Explicit_Size_get();
  public final static native int TKO_Image_Local_Texture_get();
  public final static native int TKO_Image_Is_Named_get();
  public final static native int TKO_Image_Compression_Quality_get();
  public final static native int TKO_Image_Discard_get();
  public final static native int TKO_Image_Options_Mask_get();
  public final static native int TKO_Image_Invalid_get();
  public final static native int TKO_Compression_None_get();
  public final static native int TKO_Compression_RLE_get();
  public final static native int TKO_Compression_JPEG_get();
  public final static native int TKO_Compression_DXT_get();
  public final static native int TKO_Compression_TARGA_get();
  public final static native int TKO_Compression_PNG_get();
  public final static native int TKO_Compression_Reference_get();
  public final static native long new_TK_Image_Data_Buffer();
  public final static native void delete_TK_Image_Data_Buffer(long jarg1);
  public final static native void TK_Image_Data_Buffer_Resize(long jarg1, TK_Image_Data_Buffer jarg1_, long jarg2);
  public final static native void TK_Image_Data_Buffer_Expand(long jarg1, TK_Image_Data_Buffer jarg1_, long jarg2);
  public final static native void TK_Image_Data_Buffer_Reset(long jarg1, TK_Image_Data_Buffer jarg1_);
  public final static native long TK_Image_Data_Buffer_Size(long jarg1, TK_Image_Data_Buffer jarg1_);
  public final static native long TK_Image_Data_Buffer_Used__SWIG_0(long jarg1, TK_Image_Data_Buffer jarg1_);
  public final static native void TK_Image_m_position_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_position_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_dposition_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_dposition_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_size_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_size_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_data_size_set(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_m_data_size_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_name_length_set(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_m_name_length_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_reference_length_set(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_m_reference_length_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_format_set(long jarg1, TK_Image jarg1_, short jarg2);
  public final static native short TK_Image_m_format_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_options_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_options_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_compression_set(long jarg1, TK_Image jarg1_, short jarg2);
  public final static native short TK_Image_m_compression_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_bytes_format_set(long jarg1, TK_Image jarg1_, short jarg2);
  public final static native short TK_Image_m_bytes_format_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_explicit_size_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_explicit_size_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_explicit_units_set(long jarg1, TK_Image jarg1_, long jarg2);
  public final static native long TK_Image_m_explicit_units_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_work_area_set(long jarg1, TK_Image jarg1_, long jarg2, TK_Image_Data_Buffer jarg2_);
  public final static native long TK_Image_m_work_area_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_compression_quality_set(long jarg1, TK_Image jarg1_, float jarg2);
  public final static native float TK_Image_m_compression_quality_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_m_jpeg_native_set(long jarg1, TK_Image jarg1_, boolean jarg2);
  public final static native boolean TK_Image_m_jpeg_native_get(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_set_data__SWIG_0(long jarg1, TK_Image jarg1_, int jarg2, String jarg3, short jarg4);
  public final static native void TK_Image_set_data__SWIG_1(long jarg1, TK_Image jarg1_, int jarg2, String jarg3);
  public final static native void TK_Image_set_data__SWIG_2(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native void TK_Image_set_name__SWIG_0(long jarg1, TK_Image jarg1_, String jarg2);
  public final static native void TK_Image_set_name__SWIG_1(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_compress_image__SWIG_0(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Image_compress_image__SWIG_1(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_decompress_image__SWIG_0(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Image_decompress_image__SWIG_1(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_read_jpeg_header(long jarg1, TK_Image jarg1_);
  public final static native long new_TK_Image();
  public final static native void delete_TK_Image(long jarg1);
  public final static native int TK_Image_Read(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_ReadSwigExplicitTK_Image(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_Write(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_WriteSwigExplicitTK_Image(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_Clone(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Image_CloneSwigExplicitTK_Image(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Image_ReadAscii(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_WriteAscii(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Image_compress_image_ascii(long jarg1, TK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Image_Reset(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_ResetSwigExplicitTK_Image(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetBytes__SWIG_0(long jarg1, TK_Image jarg1_, int jarg2, String jarg3, short jarg4);
  public final static native void TK_Image_SetBytes__SWIG_1(long jarg1, TK_Image jarg1_, int jarg2, String jarg3);
  public final static native void TK_Image_SetBytes__SWIG_2(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native void TK_Image_SetName__SWIG_0(long jarg1, TK_Image jarg1_, String jarg2);
  public final static native void TK_Image_SetName__SWIG_1(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native String TK_Image_GetName__SWIG_0(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetReference__SWIG_0(long jarg1, TK_Image jarg1_, String jarg2);
  public final static native void TK_Image_SetReference__SWIG_1(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native String TK_Image_GetReference__SWIG_0(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetPosition__SWIG_0(long jarg1, TK_Image jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TK_Image_SetPosition__SWIG_1(long jarg1, TK_Image jarg1_, float[] jarg2);
  public final static native void TK_Image_SetDPosition__SWIG_0(long jarg1, TK_Image jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TK_Image_SetDPosition__SWIG_1(long jarg1, TK_Image jarg1_, double[] jarg2);
  public final static native double[] TK_Image_GetDPosition(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetSize__SWIG_0(long jarg1, TK_Image jarg1_, int jarg2, int jarg3);
  public final static native void TK_Image_SetSize__SWIG_1(long jarg1, TK_Image jarg1_, int[] jarg2);
  public final static native void TK_Image_SetFormat(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_GetFormat(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetOptions(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_GetOptions(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_SetCompression(long jarg1, TK_Image jarg1_, int jarg2);
  public final static native int TK_Image_GetCompression(long jarg1, TK_Image jarg1_);
  public final static native void TK_Image_GetSize(long jarg1, TK_Image jarg1_, int[] jarg2, int jarg3);
  public final static native void TK_Image_director_connect(TK_Image obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Image_change_ownership(TK_Image obj, long cptr, boolean take_or_release);
  public final static native int TKO_Texture_Param_Source_get();
  public final static native int TKO_Texture_Tiling_get();
  public final static native int TKO_Texture_Interpolation_get();
  public final static native int TKO_Texture_Decimation_get();
  public final static native int TKO_Texture_Red_Mapping_get();
  public final static native int TKO_Texture_Green_Mapping_get();
  public final static native int TKO_Texture_Blue_Mapping_get();
  public final static native int TKO_Texture_Alpha_Mapping_get();
  public final static native int TKO_Texture_Param_Function_get();
  public final static native int TKO_Texture_Layout_get();
  public final static native int TKO_Texture_Transform_get();
  public final static native int TKO_Texture_Value_Scale_get();
  public final static native int TKO_Texture_Caching_get();
  public final static native int TKO_Texture_DownSample_get();
  public final static native int TKO_Texture_No_DownSample_get();
  public final static native int TKO_Texture_Extended_get();
  public final static native int TKO_Texture_Extended_Mask_get();
  public final static native int TKO_Texture_Extended_Shift_get();
  public final static native int TKO_Texture_Decal_get();
  public final static native int TKO_Texture_Modulate_get();
  public final static native int TKO_Texture_Param_Offset_get();
  public final static native int TKO_Texture_Transform_Override_get();
  public final static native int TKO_Texture_Shader_get();
  public final static native int TKO_Texture_Shader_Multitexture_get();
  public final static native int TKO_Texture_Camera_get();
  public final static native int TKO_Texture_Source_Dimensions_get();
  public final static native int TKO_Texture_Geometry_Shader_get();
  public final static native int TKO_Texture_Modulate_Set_get();
  public final static native int TKO_Texture_Decal_Set_get();
  public final static native void TK_Texture_m_name_length_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_name_length_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_shader_source_length_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_shader_source_length_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_image_length_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_image_length_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_camera_length_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_camera_length_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_flags_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_flags_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_substage_set(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_m_substage_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_param_source_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_param_source_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_interpolation_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_interpolation_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_decimation_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_decimation_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_red_mapping_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_red_mapping_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_green_mapping_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_green_mapping_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_blue_mapping_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_blue_mapping_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_alpha_mapping_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_alpha_mapping_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_param_function_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_param_function_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_layout_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_layout_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_tiling_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_tiling_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_value_scale_set(long jarg1, TK_Texture jarg1_, long jarg2);
  public final static native long TK_Texture_m_value_scale_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_source_dimensions_set(long jarg1, TK_Texture jarg1_, long jarg2);
  public final static native long TK_Texture_m_source_dimensions_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_apply_mode_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_apply_mode_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_m_param_offset_set(long jarg1, TK_Texture jarg1_, char jarg2);
  public final static native char TK_Texture_m_param_offset_get(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_set_name__SWIG_0(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native void TK_Texture_set_name__SWIG_1(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_set_image__SWIG_0(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native void TK_Texture_set_image__SWIG_1(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_set_transform__SWIG_0(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native void TK_Texture_set_transform__SWIG_1(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native long new_TK_Texture();
  public final static native void delete_TK_Texture(long jarg1);
  public final static native int TK_Texture_Read(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Texture_ReadSwigExplicitTK_Texture(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Texture_Write(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Texture_WriteSwigExplicitTK_Texture(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Texture_Clone(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Texture_CloneSwigExplicitTK_Texture(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Texture_ReadAscii(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Texture_WriteAscii(long jarg1, TK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Texture_Reset(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_ResetSwigExplicitTK_Texture(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetName__SWIG_0(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_SetName__SWIG_1(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native String TK_Texture_GetName__SWIG_0(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetShaderSource__SWIG_0(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_SetShaderSource__SWIG_1(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native String TK_Texture_GetShaderSource__SWIG_0(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetImage__SWIG_0(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_SetImage__SWIG_1(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native String TK_Texture_GetImage__SWIG_0(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetCamera__SWIG_0(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_SetCamera__SWIG_1(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native String TK_Texture_GetCamera__SWIG_0(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetFlags(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetFlags(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetParameterSource(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetParameterSource(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetInterpolation(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetInterpolation(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetDecimation(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetDecimation(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetRedMapping(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetRedMapping(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetGreenMapping(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetGreenMapping(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetBlueMapping(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetBlueMapping(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetAlphaMapping(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetAlphaMapping(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetParameterFunction(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetParameterFunction(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetLayout(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetLayout(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetTiling(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetTiling(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetValueScale(long jarg1, TK_Texture jarg1_, float jarg2, float jarg3);
  public final static native void TK_Texture_SetApplicationMode(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetApplicationMode(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetParameterOffset(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native int TK_Texture_GetParameterOffset(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_SetTransform__SWIG_0(long jarg1, TK_Texture jarg1_, String jarg2);
  public final static native void TK_Texture_SetTransform__SWIG_1(long jarg1, TK_Texture jarg1_, int jarg2);
  public final static native String TK_Texture_GetTransform__SWIG_0(long jarg1, TK_Texture jarg1_);
  public final static native void TK_Texture_director_connect(TK_Texture obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Texture_change_ownership(TK_Texture obj, long cptr, boolean take_or_release);
  public final static native int TKO_Thumbnail_RGB_get();
  public final static native int TKO_Thumbnail_RGBA_get();
  public final static native int TKO_Thumbnail_Invalid_get();
  public final static native void TK_Thumbnail_m_allocated_set(long jarg1, TK_Thumbnail jarg1_, int jarg2);
  public final static native int TK_Thumbnail_m_allocated_get(long jarg1, TK_Thumbnail jarg1_);
  public final static native void TK_Thumbnail_m_size_set(long jarg1, TK_Thumbnail jarg1_, long jarg2);
  public final static native long TK_Thumbnail_m_size_get(long jarg1, TK_Thumbnail jarg1_);
  public final static native void TK_Thumbnail_m_format_set(long jarg1, TK_Thumbnail jarg1_, short jarg2);
  public final static native short TK_Thumbnail_m_format_get(long jarg1, TK_Thumbnail jarg1_);
  public final static native long new_TK_Thumbnail();
  public final static native void delete_TK_Thumbnail(long jarg1);
  public final static native int TK_Thumbnail_Read(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_ReadSwigExplicitTK_Thumbnail(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_Write(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_WriteSwigExplicitTK_Thumbnail(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_Clone(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Thumbnail_CloneSwigExplicitTK_Thumbnail(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Thumbnail_ReadAscii(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_WriteAscii(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_Execute(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_ExecuteSwigExplicitTK_Thumbnail(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Thumbnail_Interpret__SWIG_0(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Thumbnail_InterpretSwigExplicitTK_Thumbnail__SWIG_0(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Thumbnail_Interpret__SWIG_1(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int TK_Thumbnail_InterpretSwigExplicitTK_Thumbnail__SWIG_1(long jarg1, TK_Thumbnail jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void TK_Thumbnail_Reset(long jarg1, TK_Thumbnail jarg1_);
  public final static native void TK_Thumbnail_ResetSwigExplicitTK_Thumbnail(long jarg1, TK_Thumbnail jarg1_);
  public final static native void TK_Thumbnail_SetBytes__SWIG_0(long jarg1, TK_Thumbnail jarg1_, int jarg2, byte[] jarg3);
  public final static native void TK_Thumbnail_SetBytes__SWIG_1(long jarg1, TK_Thumbnail jarg1_, int jarg2);
  public final static native void TK_Thumbnail_SetSize__SWIG_0(long jarg1, TK_Thumbnail jarg1_, int jarg2, int jarg3);
  public final static native void TK_Thumbnail_SetSize__SWIG_1(long jarg1, TK_Thumbnail jarg1_, int[] jarg2);
  public final static native void TK_Thumbnail_SetFormat(long jarg1, TK_Thumbnail jarg1_, int jarg2);
  public final static native int TK_Thumbnail_GetFormat(long jarg1, TK_Thumbnail jarg1_);
  public final static native void TK_Thumbnail_GetBytes(long jarg1, TK_Thumbnail jarg1_, byte[] jarg2, int jarg3);
  public final static native void TK_Thumbnail_director_connect(TK_Thumbnail obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Thumbnail_change_ownership(TK_Thumbnail obj, long cptr, boolean take_or_release);
  public final static native void TK_Glyph_Definition_m_name_length_set(long jarg1, TK_Glyph_Definition jarg1_, int jarg2);
  public final static native int TK_Glyph_Definition_m_name_length_get(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native void TK_Glyph_Definition_m_size_set(long jarg1, TK_Glyph_Definition jarg1_, int jarg2);
  public final static native int TK_Glyph_Definition_m_size_get(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native long new_TK_Glyph_Definition();
  public final static native void delete_TK_Glyph_Definition(long jarg1);
  public final static native int TK_Glyph_Definition_Read(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Glyph_Definition_ReadSwigExplicitTK_Glyph_Definition(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Glyph_Definition_Write(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Glyph_Definition_WriteSwigExplicitTK_Glyph_Definition(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Glyph_Definition_Clone(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Glyph_Definition_CloneSwigExplicitTK_Glyph_Definition(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Glyph_Definition_ReadAscii(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Glyph_Definition_WriteAscii(long jarg1, TK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Glyph_Definition_Reset(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native void TK_Glyph_Definition_ResetSwigExplicitTK_Glyph_Definition(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native void TK_Glyph_Definition_SetName__SWIG_0(long jarg1, TK_Glyph_Definition jarg1_, String jarg2);
  public final static native void TK_Glyph_Definition_SetName__SWIG_1(long jarg1, TK_Glyph_Definition jarg1_, int jarg2);
  public final static native String TK_Glyph_Definition_GetName__SWIG_0(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native void TK_Glyph_Definition_SetDefinition__SWIG_0(long jarg1, TK_Glyph_Definition jarg1_, int jarg2, String jarg3);
  public final static native void TK_Glyph_Definition_SetDefinition__SWIG_1(long jarg1, TK_Glyph_Definition jarg1_, int jarg2);
  public final static native int TK_Glyph_Definition_GetDefinitionSize(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native String TK_Glyph_Definition_GetDefinition__SWIG_0(long jarg1, TK_Glyph_Definition jarg1_);
  public final static native void TK_Glyph_Definition_director_connect(TK_Glyph_Definition obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Glyph_Definition_change_ownership(TK_Glyph_Definition obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Named_Style_Def();
  public final static native void delete_TK_Named_Style_Def(long jarg1);
  public final static native int TK_Named_Style_Def_Read(long jarg1, TK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_Style_Def_Write(long jarg1, TK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_Style_Def_Clone(long jarg1, TK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Named_Style_Def_ReadAscii(long jarg1, TK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Named_Style_Def_WriteAscii(long jarg1, TK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Named_Style_Def_Reset(long jarg1, TK_Named_Style_Def jarg1_);
  public final static native void TK_Named_Style_Def_SetName__SWIG_0(long jarg1, TK_Named_Style_Def jarg1_, String jarg2);
  public final static native void TK_Named_Style_Def_SetName__SWIG_1(long jarg1, TK_Named_Style_Def jarg1_, int jarg2);
  public final static native String TK_Named_Style_Def_GetName__SWIG_0(long jarg1, TK_Named_Style_Def jarg1_);
  public final static native void TK_Named_Style_Def_SetSegment__SWIG_0(long jarg1, TK_Named_Style_Def jarg1_, String jarg2);
  public final static native void TK_Named_Style_Def_SetSegment__SWIG_1(long jarg1, TK_Named_Style_Def jarg1_, int jarg2);
  public final static native String TK_Named_Style_Def_GetSegment__SWIG_0(long jarg1, TK_Named_Style_Def jarg1_);
  public final static native void TK_Line_Style_m_name_length_set(long jarg1, TK_Line_Style jarg1_, int jarg2);
  public final static native int TK_Line_Style_m_name_length_get(long jarg1, TK_Line_Style jarg1_);
  public final static native void TK_Line_Style_m_definition_length_set(long jarg1, TK_Line_Style jarg1_, int jarg2);
  public final static native int TK_Line_Style_m_definition_length_get(long jarg1, TK_Line_Style jarg1_);
  public final static native long new_TK_Line_Style();
  public final static native void delete_TK_Line_Style(long jarg1);
  public final static native int TK_Line_Style_Read(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Style_ReadSwigExplicitTK_Line_Style(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Style_Write(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Style_WriteSwigExplicitTK_Line_Style(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Style_Clone(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Line_Style_CloneSwigExplicitTK_Line_Style(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Line_Style_ReadAscii(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Line_Style_WriteAscii(long jarg1, TK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Line_Style_Reset(long jarg1, TK_Line_Style jarg1_);
  public final static native void TK_Line_Style_ResetSwigExplicitTK_Line_Style(long jarg1, TK_Line_Style jarg1_);
  public final static native void TK_Line_Style_SetName__SWIG_0(long jarg1, TK_Line_Style jarg1_, String jarg2);
  public final static native void TK_Line_Style_SetName__SWIG_1(long jarg1, TK_Line_Style jarg1_, int jarg2);
  public final static native String TK_Line_Style_GetName__SWIG_0(long jarg1, TK_Line_Style jarg1_);
  public final static native void TK_Line_Style_SetDefinition__SWIG_0(long jarg1, TK_Line_Style jarg1_, String jarg2);
  public final static native void TK_Line_Style_SetDefinition__SWIG_1(long jarg1, TK_Line_Style jarg1_, int jarg2);
  public final static native String TK_Line_Style_GetDefinition__SWIG_0(long jarg1, TK_Line_Style jarg1_);
  public final static native void TK_Line_Style_director_connect(TK_Line_Style obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Line_Style_change_ownership(TK_Line_Style obj, long cptr, boolean take_or_release);
  public final static native void TK_Clip_Rectangle_m_options_set(long jarg1, TK_Clip_Rectangle jarg1_, char jarg2);
  public final static native char TK_Clip_Rectangle_m_options_get(long jarg1, TK_Clip_Rectangle jarg1_);
  public final static native void TK_Clip_Rectangle_m_rect_set(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2);
  public final static native long TK_Clip_Rectangle_m_rect_get(long jarg1, TK_Clip_Rectangle jarg1_);
  public final static native long new_TK_Clip_Rectangle();
  public final static native int TK_Clip_Rectangle_Read(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Rectangle_ReadSwigExplicitTK_Clip_Rectangle(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Rectangle_Write(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Rectangle_WriteSwigExplicitTK_Clip_Rectangle(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Rectangle_Clone(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Clip_Rectangle_CloneSwigExplicitTK_Clip_Rectangle(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Clip_Rectangle_ReadAscii(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Rectangle_WriteAscii(long jarg1, TK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Clip_Rectangle_Reset(long jarg1, TK_Clip_Rectangle jarg1_);
  public final static native void TK_Clip_Rectangle_ResetSwigExplicitTK_Clip_Rectangle(long jarg1, TK_Clip_Rectangle jarg1_);
  public final static native void TK_Clip_Rectangle_SetRectangle__SWIG_0(long jarg1, TK_Clip_Rectangle jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void TK_Clip_Rectangle_SetRectangle__SWIG_1(long jarg1, TK_Clip_Rectangle jarg1_, float[] jarg2);
  public final static native void TK_Clip_Rectangle_SetOptions(long jarg1, TK_Clip_Rectangle jarg1_, int jarg2);
  public final static native int TK_Clip_Rectangle_GetOptions(long jarg1, TK_Clip_Rectangle jarg1_);
  public final static native void delete_TK_Clip_Rectangle(long jarg1);
  public final static native void TK_Clip_Rectangle_director_connect(TK_Clip_Rectangle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Clip_Rectangle_change_ownership(TK_Clip_Rectangle obj, long cptr, boolean take_or_release);
  public final static native int TKO_Clip_Region_World_Space_get();
  public final static native int TKO_Clip_Region_Window_Space_get();
  public final static native int TKO_Clip_Region_Object_Space_get();
  public final static native int TKO_Clip_Region_Clip_get();
  public final static native int TKO_Clip_Region_Mask_get();
  public final static native void TK_Clip_Region_m_options_set(long jarg1, TK_Clip_Region jarg1_, char jarg2);
  public final static native char TK_Clip_Region_m_options_get(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_m_count_set(long jarg1, TK_Clip_Region jarg1_, int jarg2);
  public final static native int TK_Clip_Region_m_count_get(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_m_dpoints_set(long jarg1, TK_Clip_Region jarg1_, double[] jarg2);
  public final static native double[] TK_Clip_Region_m_dpoints_get(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_m_complex_set(long jarg1, TK_Clip_Region jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long TK_Clip_Region_m_complex_get(long jarg1, TK_Clip_Region jarg1_);
  public final static native long new_TK_Clip_Region();
  public final static native void delete_TK_Clip_Region(long jarg1);
  public final static native int TK_Clip_Region_Read(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Region_ReadSwigExplicitTK_Clip_Region(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Region_Write(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Region_WriteSwigExplicitTK_Clip_Region(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Region_Clone(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Clip_Region_CloneSwigExplicitTK_Clip_Region(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Clip_Region_ReadAscii(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Clip_Region_WriteAscii(long jarg1, TK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Clip_Region_Reset(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_ResetSwigExplicitTK_Clip_Region(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_SetPoints__SWIG_0(long jarg1, TK_Clip_Region jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Clip_Region_SetPoints__SWIG_1(long jarg1, TK_Clip_Region jarg1_, int jarg2);
  public final static native void TK_Clip_Region_SetDPoints__SWIG_0(long jarg1, TK_Clip_Region jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_Clip_Region_SetDPoints__SWIG_1(long jarg1, TK_Clip_Region jarg1_, int jarg2);
  public final static native double[] TK_Clip_Region_GetDPoints__SWIG_0(long jarg1, TK_Clip_Region jarg1_);
  public final static native int TK_Clip_Region_GetCount(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_SetOptions(long jarg1, TK_Clip_Region jarg1_, int jarg2);
  public final static native int TK_Clip_Region_GetOptions(long jarg1, TK_Clip_Region jarg1_);
  public final static native void TK_Clip_Region_director_connect(TK_Clip_Region obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Clip_Region_change_ownership(TK_Clip_Region obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Complex_Clip_Region();
  public final static native void delete_TK_Complex_Clip_Region(long jarg1);
  public final static native int TK_Complex_Clip_Region_Read(long jarg1, TK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Complex_Clip_Region_Write(long jarg1, TK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Complex_Clip_Region_Clone(long jarg1, TK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_Complex_Clip_Region_ReadAscii(long jarg1, TK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Complex_Clip_Region_WriteAscii(long jarg1, TK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Complex_Clip_Region_Reset(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native void TK_Complex_Clip_Region_SetPoints__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Complex_Clip_Region_SetPoints__SWIG_1(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2);
  public final static native float[] TK_Complex_Clip_Region_GetPoints__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native void TK_Complex_Clip_Region_SetDPoints__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2, double[] jarg3);
  public final static native void TK_Complex_Clip_Region_SetDPoints__SWIG_1(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2);
  public final static native double[] TK_Complex_Clip_Region_GetDPoints__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native void TK_Complex_Clip_Region_SetLengths__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2, int[] jarg3);
  public final static native void TK_Complex_Clip_Region_SetLengths__SWIG_1(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2);
  public final static native int[] TK_Complex_Clip_Region_GetLengths__SWIG_0(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native int TK_Complex_Clip_Region_GetTotal(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native int TK_Complex_Clip_Region_GetLoops(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native void TK_Complex_Clip_Region_SetOptions(long jarg1, TK_Complex_Clip_Region jarg1_, int jarg2);
  public final static native int TK_Complex_Clip_Region_GetOptions(long jarg1, TK_Complex_Clip_Region jarg1_);
  public final static native void TK_User_Data_m_size_set(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native int TK_User_Data_m_size_get(long jarg1, TK_User_Data jarg1_);
  public final static native void TK_User_Data_m_buffer_size_set(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native int TK_User_Data_m_buffer_size_get(long jarg1, TK_User_Data jarg1_);
  public final static native void TK_User_Data_set_data__SWIG_0(long jarg1, TK_User_Data jarg1_, int jarg2, byte[] jarg3);
  public final static native void TK_User_Data_set_data__SWIG_1(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native long new_TK_User_Data();
  public final static native void delete_TK_User_Data(long jarg1);
  public final static native int TK_User_Data_Read(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_ReadSwigExplicitTK_User_Data(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_Write(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_WriteSwigExplicitTK_User_Data(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_Clone(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Data_CloneSwigExplicitTK_User_Data(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_User_Data_ReadAscii(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_WriteAscii(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_Execute(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_User_Data_ExecuteSwigExplicitTK_User_Data(long jarg1, TK_User_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_User_Data_Reset(long jarg1, TK_User_Data jarg1_);
  public final static native void TK_User_Data_ResetSwigExplicitTK_User_Data(long jarg1, TK_User_Data jarg1_);
  public final static native void TK_User_Data_SetUserData__SWIG_0(long jarg1, TK_User_Data jarg1_, int jarg2, byte[] jarg3);
  public final static native void TK_User_Data_SetUserData__SWIG_1(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native int TK_User_Data_GetSize(long jarg1, TK_User_Data jarg1_);
  public final static native void TK_User_Data_Resize(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native void TK_User_Data_SetSize(long jarg1, TK_User_Data jarg1_, int jarg2);
  public final static native void TK_User_Data_GetUserData(long jarg1, TK_User_Data jarg1_, byte[] jarg2, int jarg3);
  public final static native void TK_User_Data_director_connect(TK_User_Data obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_User_Data_change_ownership(TK_User_Data obj, long cptr, boolean take_or_release);
  public final static native long new_TK_Material();
  public final static native void delete_TK_Material(long jarg1);
  public final static native int TK_Material_Read(long jarg1, TK_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Material_Write(long jarg1, TK_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Material_Clone(long jarg1, TK_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void TK_Material_Reset(long jarg1, TK_Material jarg1_);
  public final static native int TK_Material_PushUserData__SWIG_0(long jarg1, TK_Material jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native int TK_Material_PushUserData__SWIG_1(long jarg1, TK_Material jarg1_, String jarg2, int jarg3);
  public final static native int TK_Material_GetBlock(long jarg1, TK_Material jarg1_, long jarg2, int[] jarg3);
  public final static native void TK_XML_m_size_set(long jarg1, TK_XML jarg1_, int jarg2);
  public final static native int TK_XML_m_size_get(long jarg1, TK_XML jarg1_);
  public final static native long new_TK_XML();
  public final static native void delete_TK_XML(long jarg1);
  public final static native int TK_XML_Read(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_ReadSwigExplicitTK_XML(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_Write(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_WriteSwigExplicitTK_XML(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_Clone(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_XML_CloneSwigExplicitTK_XML(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_XML_ReadAscii(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_WriteAscii(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_Execute(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_XML_ExecuteSwigExplicitTK_XML(long jarg1, TK_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_XML_Reset(long jarg1, TK_XML jarg1_);
  public final static native void TK_XML_ResetSwigExplicitTK_XML(long jarg1, TK_XML jarg1_);
  public final static native void TK_XML_SetXML__SWIG_0(long jarg1, TK_XML jarg1_, int jarg2, String jarg3);
  public final static native void TK_XML_SetXML__SWIG_1(long jarg1, TK_XML jarg1_, int jarg2);
  public final static native void TK_XML_AppendXML__SWIG_0(long jarg1, TK_XML jarg1_, int jarg2, String jarg3);
  public final static native void TK_XML_AppendXML__SWIG_1(long jarg1, TK_XML jarg1_, int jarg2);
  public final static native String TK_XML_GetXML__SWIG_0(long jarg1, TK_XML jarg1_);
  public final static native int TK_XML_GetSize(long jarg1, TK_XML jarg1_);
  public final static native void TK_XML_director_connect(TK_XML obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_XML_change_ownership(TK_XML obj, long cptr, boolean take_or_release);
  public final static native void TK_URL_m_length_set(long jarg1, TK_URL jarg1_, int jarg2);
  public final static native int TK_URL_m_length_get(long jarg1, TK_URL jarg1_);
  public final static native void TK_URL_m_allocated_set(long jarg1, TK_URL jarg1_, int jarg2);
  public final static native int TK_URL_m_allocated_get(long jarg1, TK_URL jarg1_);
  public final static native long new_TK_URL();
  public final static native void delete_TK_URL(long jarg1);
  public final static native int TK_URL_Read(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_URL_ReadSwigExplicitTK_URL(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_URL_Write(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_URL_WriteSwigExplicitTK_URL(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_URL_Clone(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_URL_CloneSwigExplicitTK_URL(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_URL_ReadAscii(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_URL_WriteAscii(long jarg1, TK_URL jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_URL_Reset(long jarg1, TK_URL jarg1_);
  public final static native void TK_URL_ResetSwigExplicitTK_URL(long jarg1, TK_URL jarg1_);
  public final static native void TK_URL_SetString__SWIG_0(long jarg1, TK_URL jarg1_, String jarg2);
  public final static native void TK_URL_SetString__SWIG_1(long jarg1, TK_URL jarg1_, int jarg2);
  public final static native String TK_URL_GetString__SWIG_0(long jarg1, TK_URL jarg1_);
  public final static native void TK_URL_director_connect(TK_URL obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_URL_change_ownership(TK_URL obj, long cptr, boolean take_or_release);
  public final static native void TK_External_Reference_m_length_set(long jarg1, TK_External_Reference jarg1_, int jarg2);
  public final static native int TK_External_Reference_m_length_get(long jarg1, TK_External_Reference jarg1_);
  public final static native void TK_External_Reference_m_allocated_set(long jarg1, TK_External_Reference jarg1_, int jarg2);
  public final static native int TK_External_Reference_m_allocated_get(long jarg1, TK_External_Reference jarg1_);
  public final static native long new_TK_External_Reference();
  public final static native void delete_TK_External_Reference(long jarg1);
  public final static native int TK_External_Reference_Read(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_ReadSwigExplicitTK_External_Reference(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_Write(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_WriteSwigExplicitTK_External_Reference(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_Clone(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_External_Reference_CloneSwigExplicitTK_External_Reference(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_External_Reference_ReadAscii(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_WriteAscii(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_Execute(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_ExecuteSwigExplicitTK_External_Reference(long jarg1, TK_External_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_External_Reference_Reset(long jarg1, TK_External_Reference jarg1_);
  public final static native void TK_External_Reference_ResetSwigExplicitTK_External_Reference(long jarg1, TK_External_Reference jarg1_);
  public final static native void TK_External_Reference_SetString__SWIG_0(long jarg1, TK_External_Reference jarg1_, String jarg2);
  public final static native void TK_External_Reference_SetString__SWIG_1(long jarg1, TK_External_Reference jarg1_, int jarg2);
  public final static native String TK_External_Reference_GetString__SWIG_0(long jarg1, TK_External_Reference jarg1_);
  public final static native void TK_External_Reference_director_connect(TK_External_Reference obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_External_Reference_change_ownership(TK_External_Reference obj, long cptr, boolean take_or_release);
  public final static native long new_TK_External_Reference_Unicode();
  public final static native void delete_TK_External_Reference_Unicode(long jarg1);
  public final static native int TK_External_Reference_Unicode_Read(long jarg1, TK_External_Reference_Unicode jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_Unicode_Write(long jarg1, TK_External_Reference_Unicode jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_External_Reference_Unicode_Clone(long jarg1, TK_External_Reference_Unicode jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_External_Reference_Unicode_Execute(long jarg1, TK_External_Reference_Unicode jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_External_Reference_Unicode_Reset(long jarg1, TK_External_Reference_Unicode jarg1_);
  public final static native void TK_External_Reference_Unicode_SetString__SWIG_0(long jarg1, TK_External_Reference_Unicode jarg1_, String jarg2);
  public final static native void TK_External_Reference_Unicode_SetString__SWIG_1(long jarg1, TK_External_Reference_Unicode jarg1_, int jarg2);
  public final static native String TK_External_Reference_Unicode_GetString__SWIG_0(long jarg1, TK_External_Reference_Unicode jarg1_);
  public final static native int TK_Polyhedron_Vertex_None_get();
  public final static native int TK_Polyhedron_Vertex_Normal_get();
  public final static native int TK_Polyhedron_Vertex_Parameter_get();
  public final static native int TK_Polyhedron_Vertex_Face_Color_get();
  public final static native int TK_Polyhedron_Vertex_Edge_Color_get();
  public final static native int TK_Polyhedron_Vertex_Marker_Color_get();
  public final static native int TK_Polyhedron_Vertex_Face_Index_get();
  public final static native int TK_Polyhedron_Vertex_Edge_Index_get();
  public final static native int TK_Polyhedron_Vertex_Marker_Index_get();
  public final static native int TK_Polyhedron_Vertex_Marker_Visibility_get();
  public final static native int TK_Polyhedron_Vertex_Marker_Size_get();
  public final static native int TK_Polyhedron_Vertex_Marker_Symbol_get();
  public final static native int TK_Polyhedron_Vertex_Marker_RGBA_get();
  public final static native int TK_Polyhedron_Vertex_Any_Color_get();
  public final static native int TK_Polyhedron_Face_None_get();
  public final static native int TK_Polyhedron_Face_Color_get();
  public final static native int TK_Polyhedron_Face_Index_get();
  public final static native int TK_Polyhedron_Face_Any_Color_get();
  public final static native int TK_Polyhedron_Face_Normal_get();
  public final static native int TK_Polyhedron_Face_Visibility_get();
  public final static native int TK_Polyhedron_Face_Pattern_get();
  public final static native int TK_Polyhedron_Edge_None_get();
  public final static native int TK_Polyhedron_Edge_Color_get();
  public final static native int TK_Polyhedron_Edge_Index_get();
  public final static native int TK_Polyhedron_Edge_Any_Color_get();
  public final static native int TK_Polyhedron_Edge_Normal_get();
  public final static native int TK_Polyhedron_Edge_Visibility_get();
  public final static native int TK_Polyhedron_Edge_Pattern_get();
  public final static native int TK_Polyhedron_Edge_Weight_get();
  public final static native int TK_Polyhedron_Fake_Edge_get();
  public final static native int TK_Polyhedron_TKSH_STANDARD_get();
  public final static native int TK_Polyhedron_TKSH_COMPRESSED_POINTS_get();
  public final static native int TK_Polyhedron_TKSH_COMPRESSED_FACES_get();
  public final static native int TK_Polyhedron_TKSH_TRISTRIPS_get();
  public final static native int TK_Polyhedron_TKSH_HAS_OPTIONALS_get();
  public final static native int TK_Polyhedron_TKSH_FIRSTPASS_get();
  public final static native int TK_Polyhedron_TKSH_BOUNDING_ONLY_get();
  public final static native int TK_Polyhedron_TKSH_CONNECTIVITY_COMPRESSION_get();
  public final static native int TK_Polyhedron_TKSH_EXPANDED_get();
  public final static native int TK_Polyhedron_TKSH2_COLLECTION_get();
  public final static native int TK_Polyhedron_TKSH2_NULL_get();
  public final static native int TK_Polyhedron_TKSH2_HAS_NEGATIVE_FACES_get();
  public final static native int TK_Polyhedron_TKSH2_GLOBAL_QUANTIZATION_get();
  public final static native int TK_Polyhedron_OPT_TERMINATE_get();
  public final static native int TK_Polyhedron_OPT_ALL_NORMALS_COMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_NORMALS_COMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_PARAMETERS_COMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_PARAMETERS_COMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VFCOLORS_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_FCOLORS_get();
  public final static native int TK_Polyhedron_OPT_ALL_VECOLORS_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_ECOLORS_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMCOLORS_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MCOLORS_get();
  public final static native int TK_Polyhedron_OPT_ALL_VFINDICES_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_FINDICES_get();
  public final static native int TK_Polyhedron_OPT_ALL_VEINDICES_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_EINDICES_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMINDICES_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MINDICES_get();
  public final static native int TK_Polyhedron_OPT_ALL_NORMALS_get();
  public final static native int TK_Polyhedron_OPT_NORMALS_get();
  public final static native int TK_Polyhedron_OPT_ALL_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMVISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MARKER_VISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMSYMBOLS_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MARKER_SYMBOLS_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMSIZES_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MARKER_SIZES_get();
  public final static native int TK_Polyhedron_OPT_PARAMETERS_get();
  public final static native int TK_Polyhedron_OPT_ALL_PARAMETERS_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMRGBAS_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MRGBAS_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_COLORS_get();
  public final static native int TK_Polyhedron_OPT_FACE_COLORS_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_INDICES_get();
  public final static native int TK_Polyhedron_OPT_FACE_INDICES_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_FACE_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_VISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_FACE_VISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_PATTERNS_get();
  public final static native int TK_Polyhedron_OPT_FACE_PATTERNS_get();
  public final static native int TK_Polyhedron_OPT_FACE_REGIONS_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_COLORS_get();
  public final static native int TK_Polyhedron_OPT_EDGE_COLORS_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_INDICES_get();
  public final static native int TK_Polyhedron_OPT_EDGE_INDICES_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_EDGE_NORMALS_POLAR_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_VISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_EDGE_VISIBILITIES_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_PATTERNS_get();
  public final static native int TK_Polyhedron_OPT_EDGE_PATTERNS_get();
  public final static native int TK_Polyhedron_OPT_ALL_EDGE_WEIGHTS_get();
  public final static native int TK_Polyhedron_OPT_EDGE_WEIGHTS_get();
  public final static native int TK_Polyhedron_OPT_RESERVED_SPATIAL_get();
  public final static native int TK_Polyhedron_OPT_ENTITY_ATTRIBUTES_get();
  public final static native int TK_Polyhedron_OPT_ALL_VFCOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_FCOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VECOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_ECOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMCOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MCOLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMRGBAS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MRGBAS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VFINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_FINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VEINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_EINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_VMINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_VERTEX_MINDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_COLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_FACE_COLORS_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_ALL_FACE_INDICES_UNCOMPRESSED_get();
  public final static native int TK_Polyhedron_OPT_FACE_INDICES_UNCOMPRESSED_get();
  public final static native double[] TK_Polyhedron_GetDPoints__SWIG_0(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_GetPointCount(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_GetKey(long jarg1, TK_Polyhedron jarg1_);
  public final static native short TK_Polyhedron_GetSubop(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_GetSubop2(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_GetPriority(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_SetPriority(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_SetKey(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Polyhedron_SetSubop(long jarg1, TK_Polyhedron jarg1_, short jarg2);
  public final static native int TK_Polyhedron_SetSubop2(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_InitSubop(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, boolean jarg4);
  public final static native int TK_Polyhedron_SetBounding(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetPoints__SWIG_0(long jarg1, TK_Polyhedron jarg1_, int jarg2, float[] jarg3);
  public final static native int TK_Polyhedron_SetPoints__SWIG_1(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_SetDPoints__SWIG_0(long jarg1, TK_Polyhedron jarg1_, int jarg2, double[] jarg3);
  public final static native int TK_Polyhedron_SetDPoints__SWIG_1(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_SetVertexNormals__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexNormals__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexParameters__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native int TK_Polyhedron_SetVertexParameters__SWIG_1(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexParameters__SWIG_2(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexFaceColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexFaceColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexEdgeColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexEdgeColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexFaceIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexFaceIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexEdgeIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexEdgeIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerSizes__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerSizes__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerSymbols__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetVertexMarkerSymbols__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetVertexMarkerSymbolStrings(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetFaceColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceNormals__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetFaceNormals__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceVisibilities__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetFaceVisibilities__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFacePatterns__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetFacePatterns__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetFaceIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceRegions__SWIG_0(long jarg1, TK_Polyhedron jarg1_, int[] jarg2);
  public final static native int TK_Polyhedron_SetFaceRegions__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeColors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetEdgeColors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeIndices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetEdgeIndices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeNormals__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetEdgeNormals__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeVisibilities__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetEdgeVisibilities__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgePatterns__SWIG_0(long jarg1, TK_Polyhedron jarg1_, String jarg2);
  public final static native int TK_Polyhedron_SetEdgePatterns__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgePatternStrings(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeWeights__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native int TK_Polyhedron_SetEdgeWeights__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetExists__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long[] jarg2);
  public final static native int TK_Polyhedron_SetExists__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetFaceExists__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long[] jarg2);
  public final static native int TK_Polyhedron_SetFaceExists__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_SetEdgeExists__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long[] jarg2);
  public final static native int TK_Polyhedron_SetEdgeExists__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_AppendObject(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, BBaseOpcodeHandler jarg3_);
  public final static native long TK_Polyhedron_PopObject(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasOptionals(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasOptionalsCommunicator(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexNormals(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexParameters(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexFaceColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexEdgeColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerRGBAs(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexFaceIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexEdgeIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerVisibilities(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerSymbols(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexMarkerSizes(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasVertexAttributes(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceNormals(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceVisibilities(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFacePatterns(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceRegions(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceAttributes(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasFaceAttributesCommunicator(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeColors(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeIndices(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeNormals(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeVisibilities(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgePatterns(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeWeights(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_HasEdgeAttributes(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_priority_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_priority_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_dpoints_set(long jarg1, TK_Polyhedron jarg1_, double[] jarg2);
  public final static native double[] TK_Polyhedron_mp_dpoints_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmsymbolstrings_set(long jarg1, TK_Polyhedron jarg1_, long jarg2);
  public final static native long TK_Polyhedron_mp_vmsymbolstrings_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_epatternstrings_set(long jarg1, TK_Polyhedron jarg1_, long jarg2);
  public final static native long TK_Polyhedron_mp_epatternstrings_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_pointcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_pointcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_normalcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_normalcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_paramcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_paramcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_paramwidth_set(long jarg1, TK_Polyhedron jarg1_, char jarg2);
  public final static native char TK_Polyhedron_mp_paramwidth_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vfcolorcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vfcolorcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vecolorcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vecolorcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmcolorcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmcolorcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmrgbacount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmrgbacount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vfindexcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vfindexcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_veindexcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_veindexcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmindexcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmindexcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmvisibilitycount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmvisibilitycount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmsizecount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmsizecount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_vmsymbolcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_vmsymbolcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_facecount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_facecount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_fcolorcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_fcolorcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_findexcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_findexcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_fnormalcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_fnormalcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_fpatterncount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_fpatterncount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_fvisibilitycount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_fvisibilitycount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_edgecount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_edgecount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_ecolorcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_ecolorcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_eindexcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_eindexcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_enormalcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_enormalcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_epatterncount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_epatterncount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_eweightcount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_eweightcount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_evisibilitycount_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_evisibilitycount_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_stage_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_stage_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_substage_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_substage_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_progress_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_progress_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_subprogress_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_subprogress_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_optopcode_set(long jarg1, TK_Polyhedron jarg1_, short jarg2);
  public final static native short TK_Polyhedron_mp_optopcode_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_present_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_present_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_face_present_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_face_present_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_edge_present_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_edge_present_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_bits_per_sample_set(long jarg1, TK_Polyhedron jarg1_, short jarg2);
  public final static native short TK_Polyhedron_mp_bits_per_sample_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_bbox_set(long jarg1, TK_Polyhedron jarg1_, long jarg2);
  public final static native long TK_Polyhedron_mp_bbox_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_key_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_key_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_instance_set(long jarg1, TK_Polyhedron jarg1_, long jarg2, TK_Instance jarg2_);
  public final static native long TK_Polyhedron_mp_instance_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_matrix_set(long jarg1, TK_Polyhedron jarg1_, long jarg2);
  public final static native long TK_Polyhedron_mp_matrix_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_workspace_allocated_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_workspace_allocated_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_workspace_used_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_workspace_used_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_compression_scheme_set(long jarg1, TK_Polyhedron jarg1_, short jarg2);
  public final static native short TK_Polyhedron_mp_compression_scheme_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_subop_set(long jarg1, TK_Polyhedron jarg1_, short jarg2);
  public final static native short TK_Polyhedron_mp_subop_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_subop2_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_subop2_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_num_collection_parts_set(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native int TK_Polyhedron_mp_num_collection_parts_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_mp_collection_parts_set(long jarg1, TK_Polyhedron jarg1_, long jarg2);
  public final static native long TK_Polyhedron_mp_collection_parts_get(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_EnumerateEdges(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_EnumerateEdgesSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_LabelFakeEdges(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_LabelFakeEdgesSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_);
  public final static native boolean TK_Polyhedron_AllowInstancing(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native boolean TK_Polyhedron_AllowInstancingSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native long new_TK_Polyhedron(short jarg1);
  public final static native int TK_Polyhedron_Read(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_ReadSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_Write(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_WriteSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Polyhedron_Reset(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_ResetSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_read_trivial_points(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_trivial_pointsSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_trivial_points(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_trivial_pointsSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_compressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_compressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_parameters(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_parameters_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_colors_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_colors_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_colors_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_marker_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_marker_symbols(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_marker_sizes(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_regions(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_patterns(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_patterns(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_weights(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_collection(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_collectionSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_compressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_compressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_colors_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_colors_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_colors_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_marker_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_marker_symbols(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_marker_sizes(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_uncompressed(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_uncompressed_all(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_regions(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_patterns(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_colors(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_indices(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_visibilities(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_patterns(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_weights(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_collection__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3, int jarg4);
  public final static native int TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3, int jarg4);
  public final static native int TK_Polyhedron_write_collection__SWIG_1(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native int TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_1(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native int TK_Polyhedron_write_collection__SWIG_2(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_2(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Polyhedron_normals_cartesian_to_polar(long jarg1, TK_Polyhedron jarg1_, long[] jarg2, int jarg3, int jarg4, float[] jarg5, float[] jarg6);
  public final static native void TK_Polyhedron_normals_polar_to_cartesian(long jarg1, TK_Polyhedron jarg1_, long[] jarg2, int jarg3, int jarg4, float[] jarg5, float[] jarg6);
  public final static native int TK_Polyhedron_write_vertex_normals_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_colors_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_face_colors_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_main(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_ReadAscii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_WriteAscii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_trivial_points_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_trivial_points_asciiSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_trivial_points_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_trivial_points_asciiSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_compressed_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_normals_compressed_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_parameters_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_parameters_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_colors_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_read_vertex_marker_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_marker_symbols_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_vertex_marker_sizes_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_colors_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_indices_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_regions_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_face_patterns_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_patterns_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_edge_weights_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_collection_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_read_collection_asciiSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_compressed_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_compressed_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_colors_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_marker_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_marker_symbols_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_marker_sizes_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_marker_sizes_asciiSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_colors_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_all_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_regions_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_patterns_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_colors_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_indices_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_normals_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_visibilities_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_patterns_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_edge_weights_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_collection_ascii__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3, int jarg4);
  public final static native int TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3, int jarg4);
  public final static native int TK_Polyhedron_write_collection_ascii__SWIG_1(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native int TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_1(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, boolean jarg3);
  public final static native int TK_Polyhedron_write_collection_ascii__SWIG_2(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_2(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_normals_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_parameters_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_vertex_colors_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_vertex_indices_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, short jarg3);
  public final static native int TK_Polyhedron_write_face_colors_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_write_face_indices_main_ascii(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Polyhedron_mangle_points(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native int TK_Polyhedron_mangle_pointsSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native int TK_Polyhedron_mangle_point_attributes(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native int TK_Polyhedron_mangle_point_attributesSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native int TK_Polyhedron_mangle_face_attributes(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native int TK_Polyhedron_mangle_face_attributesSwigExplicitTK_Polyhedron(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int[] jarg4);
  public final static native boolean TK_Polyhedron_has_face_attributes(long jarg1, TK_Polyhedron jarg1_);
  public final static native int TK_Polyhedron_repulse_compress_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int TK_Polyhedron_repulse_decompress_normals(long jarg1, TK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native void TK_Polyhedron_set_points__SWIG_0(long jarg1, TK_Polyhedron jarg1_, int jarg2, float[] jarg3);
  public final static native void TK_Polyhedron_set_points__SWIG_1(long jarg1, TK_Polyhedron jarg1_, int jarg2);
  public final static native void TK_Polyhedron_set_normals__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_normals__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_parameters__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_parameters__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_vfcolors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_vfcolors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_vecolors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_vecolors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_vmcolors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_vmcolors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_vfindices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_vfindices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_veindices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_veindices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_vmindices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_vmindices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_fcolors__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_fcolors__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_findices__SWIG_0(long jarg1, TK_Polyhedron jarg1_, float[] jarg2);
  public final static native void TK_Polyhedron_set_findices__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_exists__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long[] jarg2);
  public final static native void TK_Polyhedron_set_exists__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_set_face_exists__SWIG_0(long jarg1, TK_Polyhedron jarg1_, long[] jarg2);
  public final static native void TK_Polyhedron_set_face_exists__SWIG_1(long jarg1, TK_Polyhedron jarg1_);
  public final static native void TK_Polyhedron_GetBounding(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexFaceColors(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexMarkerColors(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexMarkerRGBAs(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexFaceIndices(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexMarkerIndices(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_GetVertexIndices(long jarg1, TK_Polyhedron jarg1_, float[] jarg2, int jarg3);
  public final static native void TK_Polyhedron_director_connect(TK_Polyhedron obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Polyhedron_change_ownership(TK_Polyhedron obj, long cptr, boolean take_or_release);
  public final static native void TK_Mesh_m_rows_set(long jarg1, TK_Mesh jarg1_, int jarg2);
  public final static native int TK_Mesh_m_rows_get(long jarg1, TK_Mesh jarg1_);
  public final static native void TK_Mesh_m_columns_set(long jarg1, TK_Mesh jarg1_, int jarg2);
  public final static native int TK_Mesh_m_columns_get(long jarg1, TK_Mesh jarg1_);
  public final static native int TK_Mesh_EnumerateEdges(long jarg1, TK_Mesh jarg1_);
  public final static native int TK_Mesh_EnumerateEdgesSwigExplicitTK_Mesh(long jarg1, TK_Mesh jarg1_);
  public final static native long new_TK_Mesh();
  public final static native void delete_TK_Mesh(long jarg1);
  public final static native int TK_Mesh_ReadAscii(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Mesh_WriteAscii(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Mesh_Read(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Mesh_ReadSwigExplicitTK_Mesh(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Mesh_Write(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Mesh_WriteSwigExplicitTK_Mesh(long jarg1, TK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Mesh_Reset(long jarg1, TK_Mesh jarg1_);
  public final static native void TK_Mesh_ResetSwigExplicitTK_Mesh(long jarg1, TK_Mesh jarg1_);
  public final static native void TK_Mesh_SetRows(long jarg1, TK_Mesh jarg1_, int jarg2);
  public final static native void TK_Mesh_SetColumns(long jarg1, TK_Mesh jarg1_, int jarg2);
  public final static native void TK_Mesh_director_connect(TK_Mesh obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Mesh_change_ownership(TK_Mesh obj, long cptr, boolean take_or_release);
  public final static native void TK_Shell_m_substage_set(long jarg1, TK_Shell jarg1_, int jarg2);
  public final static native int TK_Shell_m_substage_get(long jarg1, TK_Shell jarg1_);
  public final static native void TK_Shell_m_compression_scheme_set(long jarg1, TK_Shell jarg1_, short jarg2);
  public final static native short TK_Shell_m_compression_scheme_get(long jarg1, TK_Shell jarg1_);
  public final static native void TK_Shell_m_flistlen_set(long jarg1, TK_Shell jarg1_, int jarg2);
  public final static native int TK_Shell_m_flistlen_get(long jarg1, TK_Shell jarg1_);
  public final static native void TK_Shell_m_lodlevel_set(long jarg1, TK_Shell jarg1_, char jarg2);
  public final static native char TK_Shell_m_lodlevel_get(long jarg1, TK_Shell jarg1_);
  public final static native int TK_Shell_SetFaces__SWIG_0(long jarg1, TK_Shell jarg1_, int jarg2, int[] jarg3);
  public final static native int TK_Shell_SetFaces__SWIG_1(long jarg1, TK_Shell jarg1_, int jarg2);
  public final static native int TK_Shell_SetLodLevel(long jarg1, TK_Shell jarg1_, int jarg2);
  public final static native int TK_Shell_GetFacesLength(long jarg1, TK_Shell jarg1_);
  public final static native int TK_Shell_GetLodLevel(long jarg1, TK_Shell jarg1_);
  public final static native int TK_Shell_EnumerateEdges(long jarg1, TK_Shell jarg1_);
  public final static native int TK_Shell_EnumerateEdgesSwigExplicitTK_Shell(long jarg1, TK_Shell jarg1_);
  public final static native long new_TK_Shell();
  public final static native void delete_TK_Shell(long jarg1);
  public final static native void TK_Shell_set_flist__SWIG_0(long jarg1, TK_Shell jarg1_, int jarg2, int[] jarg3);
  public final static native void TK_Shell_set_flist__SWIG_1(long jarg1, TK_Shell jarg1_, int jarg2);
  public final static native int TK_Shell_Read(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Shell_ReadSwigExplicitTK_Shell(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Shell_Write(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Shell_WriteSwigExplicitTK_Shell(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Shell_ReadAscii(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Shell_WriteAscii(long jarg1, TK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Shell_Reset(long jarg1, TK_Shell jarg1_);
  public final static native void TK_Shell_ResetSwigExplicitTK_Shell(long jarg1, TK_Shell jarg1_);
  public final static native void TK_Shell_director_connect(TK_Shell obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_Shell_change_ownership(TK_Shell obj, long cptr, boolean take_or_release);
  public final static native void TK_PolyPolypoint_m_point_count_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_point_count_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_points_allocated_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_points_allocated_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_dpoints_set(long jarg1, TK_PolyPolypoint jarg1_, double[] jarg2);
  public final static native double[] TK_PolyPolypoint_m_dpoints_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_points_num_floats_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_points_num_floats_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_points_num_dimensions_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_points_num_dimensions_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_primitive_count_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_primitive_count_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_lengths_allocated_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_lengths_allocated_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_bbox_set(long jarg1, TK_PolyPolypoint jarg1_, long jarg2);
  public final static native long TK_PolyPolypoint_m_bbox_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_dbbox_set(long jarg1, TK_PolyPolypoint jarg1_, long jarg2);
  public final static native long TK_PolyPolypoint_m_dbbox_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_templen_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_templen_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_temprange_set(long jarg1, TK_PolyPolypoint jarg1_, long jarg2);
  public final static native long TK_PolyPolypoint_m_temprange_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_dtemprange_set(long jarg1, TK_PolyPolypoint jarg1_, long jarg2);
  public final static native long TK_PolyPolypoint_m_dtemprange_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_subop_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_subop_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_compression_scheme_set(long jarg1, TK_PolyPolypoint jarg1_, short jarg2);
  public final static native short TK_PolyPolypoint_m_compression_scheme_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_workspace_used_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_workspace_used_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_workspace_allocated_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_workspace_allocated_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_bits_per_sample_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_bits_per_sample_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_substage_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_substage_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_m_progress_set(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_m_progress_get(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native int TK_PolyPolypoint_analyze_dimensionality(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_figure_num_floats(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_validate_primitive_count(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_expand_lengths(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_mangle(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_unmangle(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_compute_trivial_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_process_trivial_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_compute_line_extend_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_process_line_extend_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_write_compressed_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_read_compressed_points(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_write_trivial_leftovers(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_read_trivial_leftovers(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native long new_TK_PolyPolypoint(short jarg1);
  public final static native void delete_TK_PolyPolypoint(long jarg1);
  public final static native int TK_PolyPolypoint_Read(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_ReadSwigExplicitTK_PolyPolypoint(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_Write(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_WriteSwigExplicitTK_PolyPolypoint(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_Clone(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_PolyPolypoint_CloneSwigExplicitTK_PolyPolypoint(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int TK_PolyPolypoint_ReadAscii(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_WriteAscii(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_Execute(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_PolyPolypoint_ExecuteSwigExplicitTK_PolyPolypoint(long jarg1, TK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_PolyPolypoint_Reset(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native void TK_PolyPolypoint_ResetSwigExplicitTK_PolyPolypoint(long jarg1, TK_PolyPolypoint jarg1_);
  public final static native int TK_PolyPolypoint_SetPoints__SWIG_0(long jarg1, TK_PolyPolypoint jarg1_, int jarg2, float[] jarg3);
  public final static native int TK_PolyPolypoint_SetPoints__SWIG_1(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_SetDPoints__SWIG_0(long jarg1, TK_PolyPolypoint jarg1_, int jarg2, double[] jarg3);
  public final static native int TK_PolyPolypoint_SetDPoints__SWIG_1(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_SetLengths__SWIG_0(long jarg1, TK_PolyPolypoint jarg1_, int jarg2, int[] jarg3);
  public final static native int TK_PolyPolypoint_SetLengths__SWIG_1(long jarg1, TK_PolyPolypoint jarg1_, int jarg2);
  public final static native int TK_PolyPolypoint_TKPP_COMPRESSED_get();
  public final static native int TK_PolyPolypoint_TKPP_HAS_EXPLICIT_PRIMITIVE_COUNT_get();
  public final static native int TK_PolyPolypoint_TKPP_ONE_PRIMITIVE_ONLY_get();
  public final static native int TK_PolyPolypoint_TKPP_GLOBAL_QUANTIZATION_get();
  public final static native int TK_PolyPolypoint_TKPP_ZERO_X_get();
  public final static native int TK_PolyPolypoint_TKPP_SAME_X_get();
  public final static native int TK_PolyPolypoint_TKPP_PER_PRIMITIVE_X_get();
  public final static native int TK_PolyPolypoint_TKPP_ZERO_Y_get();
  public final static native int TK_PolyPolypoint_TKPP_SAME_Y_get();
  public final static native int TK_PolyPolypoint_TKPP_PER_PRIMITIVE_Y_get();
  public final static native int TK_PolyPolypoint_TKPP_ZERO_Z_get();
  public final static native int TK_PolyPolypoint_TKPP_SAME_Z_get();
  public final static native int TK_PolyPolypoint_TKPP_PER_PRIMITIVE_Z_get();
  public final static native int TK_PolyPolypoint_TKPP_EXPANDED_get();
  public final static native int TKPP_X_2D_MASK_get();
  public final static native int TKPP_Y_2D_MASK_get();
  public final static native int TKPP_Z_2D_MASK_get();
  public final static native int TKPP_ANY_2D_MASK_get();
  public final static native int TKPP_EXPLICIT_PRIMITIVE_MASK_get();
  public final static native void TK_PolyPolypoint_director_connect(TK_PolyPolypoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TK_PolyPolypoint_change_ownership(TK_PolyPolypoint obj, long cptr, boolean take_or_release);
  public final static native int HTK_Read_Stream_File__SWIG_0(String jarg1, long jarg2, HStreamFileToolkit jarg2_);
  public final static native int HTK_Read_Stream_File__SWIG_1(String jarg1, int jarg2);
  public final static native int HTK_Read_Stream_File__SWIG_2(String jarg1);
  public final static native int HTK_Write_Stream_File__SWIG_0(String jarg1, long jarg2, HStreamFileToolkit jarg2_);
  public final static native int HTK_Write_Stream_File__SWIG_1(String jarg1, int jarg2);
  public final static native int HTK_Write_Stream_File__SWIG_2(String jarg1);
  public final static native long new_HByteStream__SWIG_0(int jarg1, byte[] jarg2, int jarg3);
  public final static native long new_HByteStream__SWIG_1();
  public final static native void HByteStream_put(long jarg1, HByteStream jarg1_, int jarg2);
  public final static native void HByteStream_get(long jarg1, HByteStream jarg1_, int[] jarg2);
  public final static native void delete_HByteStream(long jarg1);
  public final static native int HTK_Open_Segment_Execute(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Open_Segment_ExecuteSwigExplicitHTK_Open_Segment(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Open_Segment_Interpret__SWIG_0(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Open_Segment_InterpretSwigExplicitHTK_Open_Segment__SWIG_0(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Open_Segment_Interpret__SWIG_1(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Open_Segment_InterpretSwigExplicitHTK_Open_Segment__SWIG_1(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Open_Segment_Interpret__SWIG_2(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Open_Segment_InterpretSwigExplicitHTK_Open_Segment__SWIG_2(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Open_Segment_Clone(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Open_Segment_CloneSwigExplicitHTK_Open_Segment(long jarg1, HTK_Open_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Open_Segment();
  public final static native void delete_HTK_Open_Segment(long jarg1);
  public final static native void HTK_Open_Segment_director_connect(HTK_Open_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Open_Segment_change_ownership(HTK_Open_Segment obj, long cptr, boolean take_or_release);
  public final static native int HTK_Close_Segment_Execute(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Close_Segment_ExecuteSwigExplicitHTK_Close_Segment(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Close_Segment_Interpret__SWIG_0(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Close_Segment_InterpretSwigExplicitHTK_Close_Segment__SWIG_0(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Close_Segment_Interpret__SWIG_1(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Close_Segment_InterpretSwigExplicitHTK_Close_Segment__SWIG_1(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Close_Segment_Interpret__SWIG_2(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Close_Segment_InterpretSwigExplicitHTK_Close_Segment__SWIG_2(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Close_Segment_Clone(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Close_Segment_CloneSwigExplicitHTK_Close_Segment(long jarg1, HTK_Close_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Close_Segment();
  public final static native void delete_HTK_Close_Segment(long jarg1);
  public final static native void HTK_Close_Segment_director_connect(HTK_Close_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Close_Segment_change_ownership(HTK_Close_Segment obj, long cptr, boolean take_or_release);
  public final static native int HTK_Reopen_Segment_Execute(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Reopen_Segment_ExecuteSwigExplicitHTK_Reopen_Segment(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Reopen_Segment_Interpret__SWIG_0(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Reopen_Segment_InterpretSwigExplicitHTK_Reopen_Segment__SWIG_0(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Reopen_Segment_Interpret__SWIG_1(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Reopen_Segment_InterpretSwigExplicitHTK_Reopen_Segment__SWIG_1(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Reopen_Segment_Interpret__SWIG_2(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Reopen_Segment_InterpretSwigExplicitHTK_Reopen_Segment__SWIG_2(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Reopen_Segment_Clone(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Reopen_Segment_CloneSwigExplicitHTK_Reopen_Segment(long jarg1, HTK_Reopen_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Reopen_Segment();
  public final static native void delete_HTK_Reopen_Segment(long jarg1);
  public final static native void HTK_Reopen_Segment_director_connect(HTK_Reopen_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Reopen_Segment_change_ownership(HTK_Reopen_Segment obj, long cptr, boolean take_or_release);
  public final static native void HTK_Referenced_Segment_mh_stage_set(long jarg1, HTK_Referenced_Segment jarg1_, int jarg2);
  public final static native int HTK_Referenced_Segment_mh_stage_get(long jarg1, HTK_Referenced_Segment jarg1_);
  public final static native void HTK_Referenced_Segment_m_root_set(long jarg1, HTK_Referenced_Segment jarg1_, int jarg2);
  public final static native int HTK_Referenced_Segment_m_root_get(long jarg1, HTK_Referenced_Segment jarg1_);
  public final static native long new_HTK_Referenced_Segment(char jarg1);
  public final static native int HTK_Referenced_Segment_Write(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Referenced_Segment_WriteSwigExplicitHTK_Referenced_Segment(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Referenced_Segment_Execute(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Referenced_Segment_ExecuteSwigExplicitHTK_Referenced_Segment(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Referenced_Segment_Interpret__SWIG_0(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Referenced_Segment_InterpretSwigExplicitHTK_Referenced_Segment__SWIG_0(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Referenced_Segment_Interpret__SWIG_1(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Referenced_Segment_InterpretSwigExplicitHTK_Referenced_Segment__SWIG_1(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Referenced_Segment_Interpret__SWIG_2(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Referenced_Segment_InterpretSwigExplicitHTK_Referenced_Segment__SWIG_2(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void HTK_Referenced_Segment_Reset(long jarg1, HTK_Referenced_Segment jarg1_);
  public final static native void HTK_Referenced_Segment_ResetSwigExplicitHTK_Referenced_Segment(long jarg1, HTK_Referenced_Segment jarg1_);
  public final static native int HTK_Referenced_Segment_Clone(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Referenced_Segment_CloneSwigExplicitHTK_Referenced_Segment(long jarg1, HTK_Referenced_Segment jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Referenced_Segment_SetRoot(long jarg1, HTK_Referenced_Segment jarg1_, int jarg2);
  public final static native int HTK_Referenced_Segment_GetRoot(long jarg1, HTK_Referenced_Segment jarg1_);
  public final static native void delete_HTK_Referenced_Segment(long jarg1);
  public final static native void HTK_Referenced_Segment_director_connect(HTK_Referenced_Segment obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Referenced_Segment_change_ownership(HTK_Referenced_Segment obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Reference();
  public final static native int HTK_Reference_Write(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Reference_Execute(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Reference_Interpret__SWIG_0(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Reference_Interpret__SWIG_1(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Reference_Interpret__SWIG_2(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native boolean HTK_Reference_NeedsContext(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void HTK_Reference_Reset(long jarg1, HTK_Reference jarg1_);
  public final static native int HTK_Reference_Clone(long jarg1, HTK_Reference jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native boolean HTK_Reference_Direct(long jarg1, HTK_Reference jarg1_);
  public final static native void delete_HTK_Reference(long jarg1);
  public final static native long new_HTK_Instance__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float[] jarg6);
  public final static native long new_HTK_Instance__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long new_HTK_Instance__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_HTK_Instance__SWIG_3(int jarg1, int jarg2, int jarg3);
  public final static native long new_HTK_Instance__SWIG_4(int jarg1, int jarg2);
  public final static native long new_HTK_Instance__SWIG_5(int jarg1);
  public final static native long new_HTK_Instance__SWIG_6();
  public final static native int HTK_Instance_Execute(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Instance_ExecuteSwigExplicitHTK_Instance(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Instance_Interpret__SWIG_0(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Instance_InterpretSwigExplicitHTK_Instance__SWIG_0(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Instance_Interpret__SWIG_1(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Instance_InterpretSwigExplicitHTK_Instance__SWIG_1(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Instance_Clone(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Instance_CloneSwigExplicitHTK_Instance(long jarg1, HTK_Instance jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Instance(long jarg1);
  public final static native void HTK_Instance_director_connect(HTK_Instance obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Instance_change_ownership(HTK_Instance obj, long cptr, boolean take_or_release);
  public final static native int HTK_Delete_Object_Execute(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Delete_Object_ExecuteSwigExplicitHTK_Delete_Object(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Delete_Object_Interpret__SWIG_0(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Delete_Object_InterpretSwigExplicitHTK_Delete_Object__SWIG_0(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Delete_Object_Interpret__SWIG_1(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Delete_Object_InterpretSwigExplicitHTK_Delete_Object__SWIG_1(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Delete_Object_Interpret__SWIG_2(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Delete_Object_InterpretSwigExplicitHTK_Delete_Object__SWIG_2(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Delete_Object_Clone(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Delete_Object_CloneSwigExplicitHTK_Delete_Object(long jarg1, HTK_Delete_Object jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Delete_Object();
  public final static native void delete_HTK_Delete_Object(long jarg1);
  public final static native void HTK_Delete_Object_director_connect(HTK_Delete_Object obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Delete_Object_change_ownership(HTK_Delete_Object obj, long cptr, boolean take_or_release);
  public final static native int HTK_LOD_Execute(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_LOD_ExecuteSwigExplicitHTK_LOD(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_LOD_Interpret__SWIG_0(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_LOD_InterpretSwigExplicitHTK_LOD__SWIG_0(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_LOD_Interpret__SWIG_1(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_LOD_InterpretSwigExplicitHTK_LOD__SWIG_1(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_LOD_Interpret__SWIG_2(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_LOD_InterpretSwigExplicitHTK_LOD__SWIG_2(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_LOD_Clone(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_LOD_CloneSwigExplicitHTK_LOD(long jarg1, HTK_LOD jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_LOD();
  public final static native void delete_HTK_LOD(long jarg1);
  public final static native void HTK_LOD_director_connect(HTK_LOD obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_LOD_change_ownership(HTK_LOD obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Renumber__SWIG_0(short jarg1, int jarg2);
  public final static native long new_HTK_Renumber__SWIG_1(short jarg1);
  public final static native int HTK_Renumber_Execute(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Renumber_ExecuteSwigExplicitHTK_Renumber(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Renumber_Interpret__SWIG_0(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Renumber_InterpretSwigExplicitHTK_Renumber__SWIG_0(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Renumber_Interpret__SWIG_1(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Renumber_InterpretSwigExplicitHTK_Renumber__SWIG_1(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Renumber_Interpret__SWIG_2(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Renumber_InterpretSwigExplicitHTK_Renumber__SWIG_2(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Renumber_Clone(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Renumber_CloneSwigExplicitHTK_Renumber(long jarg1, HTK_Renumber jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Renumber(long jarg1);
  public final static native void HTK_Renumber_director_connect(HTK_Renumber obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Renumber_change_ownership(HTK_Renumber obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Color__SWIG_0(int jarg1, int jarg2);
  public final static native long new_HTK_Color__SWIG_1(int jarg1);
  public final static native long new_HTK_Color__SWIG_2();
  public final static native int HTK_Color_Execute(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_ExecuteSwigExplicitHTK_Color(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Interpret__SWIG_0(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_InterpretSwigExplicitHTK_Color__SWIG_0(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_Interpret__SWIG_1(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_InterpretSwigExplicitHTK_Color__SWIG_1(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_Interpret__SWIG_2(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_InterpretSwigExplicitHTK_Color__SWIG_2(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_Clone(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_CloneSwigExplicitHTK_Color(long jarg1, HTK_Color jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Color(long jarg1);
  public final static native void HTK_Color_director_connect(HTK_Color obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_change_ownership(HTK_Color obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Color_RGB__SWIG_0(int jarg1, float[] jarg2);
  public final static native long new_HTK_Color_RGB__SWIG_1(int jarg1);
  public final static native long new_HTK_Color_RGB__SWIG_2();
  public final static native int HTK_Color_RGB_Execute(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_RGB_ExecuteSwigExplicitHTK_Color_RGB(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_RGB_Interpret__SWIG_0(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_RGB_InterpretSwigExplicitHTK_Color_RGB__SWIG_0(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_RGB_Interpret__SWIG_1(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_RGB_InterpretSwigExplicitHTK_Color_RGB__SWIG_1(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_RGB_Interpret__SWIG_2(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_RGB_InterpretSwigExplicitHTK_Color_RGB__SWIG_2(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_RGB_Clone(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_RGB_CloneSwigExplicitHTK_Color_RGB(long jarg1, HTK_Color_RGB jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Color_RGB(long jarg1);
  public final static native void HTK_Color_RGB_director_connect(HTK_Color_RGB obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_RGB_change_ownership(HTK_Color_RGB obj, long cptr, boolean take_or_release);
  public final static native int HTK_Color_By_Value_Execute(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_Value_ExecuteSwigExplicitHTK_Color_By_Value(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_Value_Interpret__SWIG_0(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_Value_InterpretSwigExplicitHTK_Color_By_Value__SWIG_0(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_Value_Interpret__SWIG_1(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_Value_InterpretSwigExplicitHTK_Color_By_Value__SWIG_1(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_Value_Interpret__SWIG_2(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_Value_InterpretSwigExplicitHTK_Color_By_Value__SWIG_2(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_Value_Clone(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_By_Value_CloneSwigExplicitHTK_Color_By_Value(long jarg1, HTK_Color_By_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Color_By_Value();
  public final static native void delete_HTK_Color_By_Value(long jarg1);
  public final static native void HTK_Color_By_Value_director_connect(HTK_Color_By_Value obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_By_Value_change_ownership(HTK_Color_By_Value obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Color_By_Index__SWIG_0(short jarg1, int jarg2, int jarg3);
  public final static native long new_HTK_Color_By_Index__SWIG_1(short jarg1, int jarg2);
  public final static native long new_HTK_Color_By_Index__SWIG_2(short jarg1);
  public final static native int HTK_Color_By_Index_Execute(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_Index_ExecuteSwigExplicitHTK_Color_By_Index(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_Index_Interpret__SWIG_0(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_Index_InterpretSwigExplicitHTK_Color_By_Index__SWIG_0(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_Index_Interpret__SWIG_1(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_Index_InterpretSwigExplicitHTK_Color_By_Index__SWIG_1(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_Index_Interpret__SWIG_2(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_Index_InterpretSwigExplicitHTK_Color_By_Index__SWIG_2(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_Index_Clone(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_By_Index_CloneSwigExplicitHTK_Color_By_Index(long jarg1, HTK_Color_By_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Color_By_Index(long jarg1);
  public final static native void HTK_Color_By_Index_director_connect(HTK_Color_By_Index obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_By_Index_change_ownership(HTK_Color_By_Index obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Color_By_FIndex__SWIG_0(int jarg1, float jarg2);
  public final static native long new_HTK_Color_By_FIndex__SWIG_1(int jarg1);
  public final static native long new_HTK_Color_By_FIndex__SWIG_2();
  public final static native int HTK_Color_By_FIndex_Execute(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_FIndex_ExecuteSwigExplicitHTK_Color_By_FIndex(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_By_FIndex_Interpret__SWIG_0(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_FIndex_InterpretSwigExplicitHTK_Color_By_FIndex__SWIG_0(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_By_FIndex_Interpret__SWIG_1(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_FIndex_InterpretSwigExplicitHTK_Color_By_FIndex__SWIG_1(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_By_FIndex_Interpret__SWIG_2(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_FIndex_InterpretSwigExplicitHTK_Color_By_FIndex__SWIG_2(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_By_FIndex_Clone(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_By_FIndex_CloneSwigExplicitHTK_Color_By_FIndex(long jarg1, HTK_Color_By_FIndex jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Color_By_FIndex(long jarg1);
  public final static native void HTK_Color_By_FIndex_director_connect(HTK_Color_By_FIndex obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_By_FIndex_change_ownership(HTK_Color_By_FIndex obj, long cptr, boolean take_or_release);
  public final static native void HTK_Color_Composite_m_parts_set(long jarg1, HTK_Color_Composite jarg1_, long jarg2);
  public final static native long HTK_Color_Composite_m_parts_get(long jarg1, HTK_Color_Composite jarg1_);
  public final static native long new_HTK_Color_Composite();
  public final static native void delete_HTK_Color_Composite(long jarg1);
  public final static native int HTK_Color_Composite_Read(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_ReadSwigExplicitHTK_Color_Composite(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_Write(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_WriteSwigExplicitHTK_Color_Composite(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_Execute(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_ExecuteSwigExplicitHTK_Color_Composite(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Composite_Interpret__SWIG_0(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_Composite_InterpretSwigExplicitHTK_Color_Composite__SWIG_0(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_Composite_Interpret__SWIG_1(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_Composite_InterpretSwigExplicitHTK_Color_Composite__SWIG_1(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_Composite_Interpret__SWIG_2(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_Composite_InterpretSwigExplicitHTK_Color_Composite__SWIG_2(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_Composite_Clone(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_Composite_CloneSwigExplicitHTK_Color_Composite(long jarg1, HTK_Color_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Color_Composite_director_connect(HTK_Color_Composite obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_Composite_change_ownership(HTK_Color_Composite obj, long cptr, boolean take_or_release);
  public final static native int HTK_Color_Map_Execute(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Map_ExecuteSwigExplicitHTK_Color_Map(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Color_Map_Interpret__SWIG_0(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_Map_InterpretSwigExplicitHTK_Color_Map__SWIG_0(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Color_Map_Interpret__SWIG_1(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_Map_InterpretSwigExplicitHTK_Color_Map__SWIG_1(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Color_Map_Interpret__SWIG_2(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_Map_InterpretSwigExplicitHTK_Color_Map__SWIG_2(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Color_Map_Clone(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Color_Map_CloneSwigExplicitHTK_Color_Map(long jarg1, HTK_Color_Map jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Color_Map();
  public final static native void delete_HTK_Color_Map(long jarg1);
  public final static native void HTK_Color_Map_director_connect(HTK_Color_Map obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Color_Map_change_ownership(HTK_Color_Map obj, long cptr, boolean take_or_release);
  public final static native int HTK_Callback_Execute(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Callback_ExecuteSwigExplicitHTK_Callback(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Callback_Interpret__SWIG_0(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Callback_InterpretSwigExplicitHTK_Callback__SWIG_0(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Callback_Interpret__SWIG_1(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Callback_InterpretSwigExplicitHTK_Callback__SWIG_1(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Callback_Interpret__SWIG_2(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Callback_InterpretSwigExplicitHTK_Callback__SWIG_2(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Callback_Clone(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Callback_CloneSwigExplicitHTK_Callback(long jarg1, HTK_Callback jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Callback();
  public final static native void delete_HTK_Callback(long jarg1);
  public final static native void HTK_Callback_director_connect(HTK_Callback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Callback_change_ownership(HTK_Callback obj, long cptr, boolean take_or_release);
  public final static native int HTK_Rendering_Options_Execute(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Rendering_Options_ExecuteSwigExplicitHTK_Rendering_Options(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Rendering_Options_Interpret__SWIG_0(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Rendering_Options_InterpretSwigExplicitHTK_Rendering_Options__SWIG_0(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Rendering_Options_Interpret__SWIG_1(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Rendering_Options_InterpretSwigExplicitHTK_Rendering_Options__SWIG_1(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Rendering_Options_Interpret__SWIG_2(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Rendering_Options_InterpretSwigExplicitHTK_Rendering_Options__SWIG_2(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Rendering_Options_Clone(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Rendering_Options_CloneSwigExplicitHTK_Rendering_Options(long jarg1, HTK_Rendering_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Rendering_Options();
  public final static native void delete_HTK_Rendering_Options(long jarg1);
  public final static native void HTK_Rendering_Options_director_connect(HTK_Rendering_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Rendering_Options_change_ownership(HTK_Rendering_Options obj, long cptr, boolean take_or_release);
  public final static native int HTK_Heuristics_Execute(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Heuristics_ExecuteSwigExplicitHTK_Heuristics(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Heuristics_Interpret__SWIG_0(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Heuristics_InterpretSwigExplicitHTK_Heuristics__SWIG_0(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Heuristics_Interpret__SWIG_1(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Heuristics_InterpretSwigExplicitHTK_Heuristics__SWIG_1(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Heuristics_Interpret__SWIG_2(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Heuristics_InterpretSwigExplicitHTK_Heuristics__SWIG_2(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Heuristics_Clone(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Heuristics_CloneSwigExplicitHTK_Heuristics(long jarg1, HTK_Heuristics jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Heuristics();
  public final static native void delete_HTK_Heuristics(long jarg1);
  public final static native void HTK_Heuristics_director_connect(HTK_Heuristics obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Heuristics_change_ownership(HTK_Heuristics obj, long cptr, boolean take_or_release);
  public final static native int HTK_Geometry_Options_Execute(long jarg1, HTK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Geometry_Options_Interpret__SWIG_0(long jarg1, HTK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Geometry_Options_Interpret__SWIG_1(long jarg1, HTK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Geometry_Options_Interpret__SWIG_2(long jarg1, HTK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Geometry_Options_Clone(long jarg1, HTK_Geometry_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Geometry_Options();
  public final static native void delete_HTK_Geometry_Options(long jarg1);
  public final static native int HTK_Visibility_Execute(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Visibility_ExecuteSwigExplicitHTK_Visibility(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Visibility_Interpret__SWIG_0(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Visibility_InterpretSwigExplicitHTK_Visibility__SWIG_0(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Visibility_Interpret__SWIG_1(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Visibility_InterpretSwigExplicitHTK_Visibility__SWIG_1(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Visibility_Interpret__SWIG_2(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Visibility_InterpretSwigExplicitHTK_Visibility__SWIG_2(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Visibility_Clone(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Visibility_CloneSwigExplicitHTK_Visibility(long jarg1, HTK_Visibility jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Visibility();
  public final static native void delete_HTK_Visibility(long jarg1);
  public final static native void HTK_Visibility_director_connect(HTK_Visibility obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Visibility_change_ownership(HTK_Visibility obj, long cptr, boolean take_or_release);
  public final static native int HTK_Selectability_Execute(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Selectability_ExecuteSwigExplicitHTK_Selectability(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Selectability_Interpret__SWIG_0(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Selectability_InterpretSwigExplicitHTK_Selectability__SWIG_0(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Selectability_Interpret__SWIG_1(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Selectability_InterpretSwigExplicitHTK_Selectability__SWIG_1(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Selectability_Interpret__SWIG_2(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Selectability_InterpretSwigExplicitHTK_Selectability__SWIG_2(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Selectability_Clone(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Selectability_CloneSwigExplicitHTK_Selectability(long jarg1, HTK_Selectability jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Selectability();
  public final static native void delete_HTK_Selectability(long jarg1);
  public final static native void HTK_Selectability_director_connect(HTK_Selectability obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Selectability_change_ownership(HTK_Selectability obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Matrix(short jarg1);
  public final static native int HTK_Matrix_Execute(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Matrix_ExecuteSwigExplicitHTK_Matrix(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Matrix_Interpret__SWIG_0(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Matrix_InterpretSwigExplicitHTK_Matrix__SWIG_0(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Matrix_Interpret__SWIG_1(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Matrix_InterpretSwigExplicitHTK_Matrix__SWIG_1(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Matrix_Interpret__SWIG_2(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Matrix_InterpretSwigExplicitHTK_Matrix__SWIG_2(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Matrix_Clone(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Matrix_CloneSwigExplicitHTK_Matrix(long jarg1, HTK_Matrix jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Matrix(long jarg1);
  public final static native void HTK_Matrix_director_connect(HTK_Matrix obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Matrix_change_ownership(HTK_Matrix obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Enumerated(short jarg1);
  public final static native int HTK_Enumerated_Execute(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Enumerated_ExecuteSwigExplicitHTK_Enumerated(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Enumerated_Interpret__SWIG_0(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Enumerated_InterpretSwigExplicitHTK_Enumerated__SWIG_0(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Enumerated_Interpret__SWIG_1(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Enumerated_InterpretSwigExplicitHTK_Enumerated__SWIG_1(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Enumerated_Interpret__SWIG_2(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Enumerated_Interpret__SWIG_3(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Enumerated_InterpretSwigExplicitHTK_Enumerated__SWIG_3(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Enumerated_Clone(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Enumerated_CloneSwigExplicitHTK_Enumerated(long jarg1, HTK_Enumerated jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Enumerated(long jarg1);
  public final static native void HTK_Enumerated_director_connect(HTK_Enumerated obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Enumerated_change_ownership(HTK_Enumerated obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Size(short jarg1);
  public final static native int HTK_Size_Execute(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Size_ExecuteSwigExplicitHTK_Size(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Size_Interpret__SWIG_0(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Size_InterpretSwigExplicitHTK_Size__SWIG_0(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Size_Interpret__SWIG_1(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Size_InterpretSwigExplicitHTK_Size__SWIG_1(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Size_Interpret__SWIG_2(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Size_InterpretSwigExplicitHTK_Size__SWIG_2(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Size_Clone(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Size_CloneSwigExplicitHTK_Size(long jarg1, HTK_Size jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Size(long jarg1);
  public final static native void HTK_Size_director_connect(HTK_Size obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Size_change_ownership(HTK_Size obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Linear_Pattern(short jarg1);
  public final static native int HTK_Linear_Pattern_Execute(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Linear_Pattern_ExecuteSwigExplicitHTK_Linear_Pattern(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Linear_Pattern_Interpret__SWIG_0(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Linear_Pattern_InterpretSwigExplicitHTK_Linear_Pattern__SWIG_0(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Linear_Pattern_Interpret__SWIG_1(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Linear_Pattern_InterpretSwigExplicitHTK_Linear_Pattern__SWIG_1(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Linear_Pattern_Interpret__SWIG_2(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Linear_Pattern_Interpret__SWIG_3(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Linear_Pattern_InterpretSwigExplicitHTK_Linear_Pattern__SWIG_3(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Linear_Pattern_Clone(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Linear_Pattern_CloneSwigExplicitHTK_Linear_Pattern(long jarg1, HTK_Linear_Pattern jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Linear_Pattern(long jarg1);
  public final static native void HTK_Linear_Pattern_director_connect(HTK_Linear_Pattern obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Linear_Pattern_change_ownership(HTK_Linear_Pattern obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Named(short jarg1);
  public final static native int HTK_Named_Execute(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_ExecuteSwigExplicitHTK_Named(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Interpret__SWIG_0(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Named_InterpretSwigExplicitHTK_Named__SWIG_0(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Named_Interpret__SWIG_1(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Named_InterpretSwigExplicitHTK_Named__SWIG_1(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Named_Interpret__SWIG_2(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Interpret__SWIG_3(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Named_InterpretSwigExplicitHTK_Named__SWIG_3(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Named_Clone(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Named_CloneSwigExplicitHTK_Named(long jarg1, HTK_Named jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Named(long jarg1);
  public final static native void HTK_Named_director_connect(HTK_Named obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Named_change_ownership(HTK_Named obj, long cptr, boolean take_or_release);
  public final static native int HTK_Streaming_Execute(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Streaming_ExecuteSwigExplicitHTK_Streaming(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Streaming_Interpret__SWIG_0(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Streaming_InterpretSwigExplicitHTK_Streaming__SWIG_0(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Streaming_Interpret__SWIG_1(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Streaming_InterpretSwigExplicitHTK_Streaming__SWIG_1(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Streaming_Interpret__SWIG_2(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Streaming_InterpretSwigExplicitHTK_Streaming__SWIG_2(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Streaming_Clone(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Streaming_CloneSwigExplicitHTK_Streaming(long jarg1, HTK_Streaming jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Streaming();
  public final static native void delete_HTK_Streaming(long jarg1);
  public final static native void HTK_Streaming_director_connect(HTK_Streaming obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Streaming_change_ownership(HTK_Streaming obj, long cptr, boolean take_or_release);
  public final static native int HTK_Conditions_Execute(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditions_ExecuteSwigExplicitHTK_Conditions(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditions_Interpret__SWIG_0(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Conditions_InterpretSwigExplicitHTK_Conditions__SWIG_0(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Conditions_Interpret__SWIG_1(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Conditions_InterpretSwigExplicitHTK_Conditions__SWIG_1(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Conditions_Interpret__SWIG_2(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Conditions_InterpretSwigExplicitHTK_Conditions__SWIG_2(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Conditions_Clone(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Conditions_CloneSwigExplicitHTK_Conditions(long jarg1, HTK_Conditions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Conditions();
  public final static native void delete_HTK_Conditions(long jarg1);
  public final static native void HTK_Conditions_director_connect(HTK_Conditions obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Conditions_change_ownership(HTK_Conditions obj, long cptr, boolean take_or_release);
  public final static native int HTK_Conditional_Action_Execute(long jarg1, HTK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditional_Action_Interpret__SWIG_0(long jarg1, HTK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Conditional_Action_Interpret__SWIG_1(long jarg1, HTK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Conditional_Action_Interpret__SWIG_2(long jarg1, HTK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Conditional_Action_Clone(long jarg1, HTK_Conditional_Action jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Conditional_Action();
  public final static native void delete_HTK_Conditional_Action(long jarg1);
  public final static native long new_HTK_Conditional_Actions();
  public final static native void delete_HTK_Conditional_Actions(long jarg1);
  public final static native int HTK_Conditional_Actions_Read(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditional_Actions_Write(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditional_Actions_Execute(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Conditional_Actions_Interpret__SWIG_0(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Conditional_Actions_Interpret__SWIG_1(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Conditional_Actions_Interpret__SWIG_2(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Conditional_Actions_Clone(long jarg1, HTK_Conditional_Actions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_User_Options_Execute(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Options_ExecuteSwigExplicitHTK_User_Options(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Options_Interpret__SWIG_0(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Options_InterpretSwigExplicitHTK_User_Options__SWIG_0(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Options_Interpret__SWIG_1(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Options_InterpretSwigExplicitHTK_User_Options__SWIG_1(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Options_Interpret__SWIG_2(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Options_InterpretSwigExplicitHTK_User_Options__SWIG_2(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Options_Clone(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_User_Options_CloneSwigExplicitHTK_User_Options(long jarg1, HTK_User_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_User_Options();
  public final static native void delete_HTK_User_Options(long jarg1);
  public final static native void HTK_User_Options_director_connect(HTK_User_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_User_Options_change_ownership(HTK_User_Options obj, long cptr, boolean take_or_release);
  public final static native int HTK_Unicode_Options_Execute(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Unicode_Options_ExecuteSwigExplicitHTK_Unicode_Options(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Unicode_Options_Interpret__SWIG_0(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Unicode_Options_InterpretSwigExplicitHTK_Unicode_Options__SWIG_0(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Unicode_Options_Interpret__SWIG_1(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Unicode_Options_InterpretSwigExplicitHTK_Unicode_Options__SWIG_1(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Unicode_Options_Interpret__SWIG_2(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Unicode_Options_InterpretSwigExplicitHTK_Unicode_Options__SWIG_2(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Unicode_Options_Clone(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Unicode_Options_CloneSwigExplicitHTK_Unicode_Options(long jarg1, HTK_Unicode_Options jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Unicode_Options();
  public final static native void delete_HTK_Unicode_Options(long jarg1);
  public final static native void HTK_Unicode_Options_director_connect(HTK_Unicode_Options obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Unicode_Options_change_ownership(HTK_Unicode_Options obj, long cptr, boolean take_or_release);
  public final static native int HTK_User_Index_Execute(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Index_ExecuteSwigExplicitHTK_User_Index(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Index_Interpret__SWIG_0(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Index_InterpretSwigExplicitHTK_User_Index__SWIG_0(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Index_Interpret__SWIG_1(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Index_InterpretSwigExplicitHTK_User_Index__SWIG_1(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Index_Interpret__SWIG_2(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Index_InterpretSwigExplicitHTK_User_Index__SWIG_2(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Index_Clone(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_User_Index_CloneSwigExplicitHTK_User_Index(long jarg1, HTK_User_Index jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_User_Index();
  public final static native void delete_HTK_User_Index(long jarg1);
  public final static native void HTK_User_Index_director_connect(HTK_User_Index obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_User_Index_change_ownership(HTK_User_Index obj, long cptr, boolean take_or_release);
  public final static native int HTK_User_Index_Data_Execute(long jarg1, HTK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Index_Data_Interpret__SWIG_0(long jarg1, HTK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Index_Data_Interpret__SWIG_1(long jarg1, HTK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Index_Data_Interpret__SWIG_2(long jarg1, HTK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Index_Data_Clone(long jarg1, HTK_User_Index_Data jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_User_Index_Data();
  public final static native void delete_HTK_User_Index_Data(long jarg1);
  public final static native int HTK_User_Value_Execute(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Value_ExecuteSwigExplicitHTK_User_Value(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_User_Value_Interpret__SWIG_0(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Value_InterpretSwigExplicitHTK_User_Value__SWIG_0(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_User_Value_Interpret__SWIG_1(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Value_InterpretSwigExplicitHTK_User_Value__SWIG_1(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_User_Value_Interpret__SWIG_2(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Value_InterpretSwigExplicitHTK_User_Value__SWIG_2(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_User_Value_Clone(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_User_Value_CloneSwigExplicitHTK_User_Value(long jarg1, HTK_User_Value jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_User_Value();
  public final static native void delete_HTK_User_Value(long jarg1);
  public final static native void HTK_User_Value_director_connect(HTK_User_Value obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_User_Value_change_ownership(HTK_User_Value obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Camera__SWIG_0(short jarg1);
  public final static native long new_HTK_Camera__SWIG_1();
  public final static native int HTK_Camera_Execute(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Camera_ExecuteSwigExplicitHTK_Camera(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Camera_Interpret__SWIG_0(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Camera_InterpretSwigExplicitHTK_Camera__SWIG_0(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Camera_Interpret__SWIG_1(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Camera_InterpretSwigExplicitHTK_Camera__SWIG_1(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Camera_Interpret__SWIG_2(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Camera_InterpretSwigExplicitHTK_Camera__SWIG_2(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Camera_Clone(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Camera_CloneSwigExplicitHTK_Camera(long jarg1, HTK_Camera jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Camera(long jarg1);
  public final static native void HTK_Camera_director_connect(HTK_Camera obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Camera_change_ownership(HTK_Camera obj, long cptr, boolean take_or_release);
  public final static native int HTK_Window_Execute(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Window_ExecuteSwigExplicitHTK_Window(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Window_Interpret__SWIG_0(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Window_InterpretSwigExplicitHTK_Window__SWIG_0(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Window_Interpret__SWIG_1(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Window_InterpretSwigExplicitHTK_Window__SWIG_1(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Window_Interpret__SWIG_2(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Window_InterpretSwigExplicitHTK_Window__SWIG_2(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Window_Clone(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Window_CloneSwigExplicitHTK_Window(long jarg1, HTK_Window jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Window();
  public final static native void delete_HTK_Window(long jarg1);
  public final static native void HTK_Window_director_connect(HTK_Window obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Window_change_ownership(HTK_Window obj, long cptr, boolean take_or_release);
  public final static native int HTK_Clip_Region_Execute(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Clip_Region_ExecuteSwigExplicitHTK_Clip_Region(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Clip_Region_Interpret__SWIG_0(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Clip_Region_InterpretSwigExplicitHTK_Clip_Region__SWIG_0(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Clip_Region_Interpret__SWIG_1(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Clip_Region_InterpretSwigExplicitHTK_Clip_Region__SWIG_1(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Clip_Region_Interpret__SWIG_2(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Clip_Region_InterpretSwigExplicitHTK_Clip_Region__SWIG_2(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Clip_Region_Clone(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Clip_Region_CloneSwigExplicitHTK_Clip_Region(long jarg1, HTK_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Clip_Region();
  public final static native void delete_HTK_Clip_Region(long jarg1);
  public final static native void HTK_Clip_Region_director_connect(HTK_Clip_Region obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Clip_Region_change_ownership(HTK_Clip_Region obj, long cptr, boolean take_or_release);
  public final static native int HTK_Complex_Clip_Region_Execute(long jarg1, HTK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Complex_Clip_Region_Interpret__SWIG_0(long jarg1, HTK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Complex_Clip_Region_Interpret__SWIG_1(long jarg1, HTK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Complex_Clip_Region_Interpret__SWIG_2(long jarg1, HTK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Complex_Clip_Region_Clone(long jarg1, HTK_Complex_Clip_Region jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Complex_Clip_Region();
  public final static native void delete_HTK_Complex_Clip_Region(long jarg1);
  public final static native int HTK_Clip_Rectangle_Execute(long jarg1, HTK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Clip_Rectangle_ExecuteSwigExplicitHTK_Clip_Rectangle(long jarg1, HTK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Clip_Rectangle_Clone(long jarg1, HTK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Clip_Rectangle_CloneSwigExplicitHTK_Clip_Rectangle(long jarg1, HTK_Clip_Rectangle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Clip_Rectangle();
  public final static native void delete_HTK_Clip_Rectangle(long jarg1);
  public final static native void HTK_Clip_Rectangle_director_connect(HTK_Clip_Rectangle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Clip_Rectangle_change_ownership(HTK_Clip_Rectangle obj, long cptr, boolean take_or_release);
  public final static native int HTK_Text_Font_Execute(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Text_Font_ExecuteSwigExplicitHTK_Text_Font(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Text_Font_Interpret__SWIG_0(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Text_Font_InterpretSwigExplicitHTK_Text_Font__SWIG_0(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Text_Font_Interpret__SWIG_1(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Text_Font_InterpretSwigExplicitHTK_Text_Font__SWIG_1(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Text_Font_Interpret__SWIG_2(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Text_Font_InterpretSwigExplicitHTK_Text_Font__SWIG_2(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Text_Font_Clone(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Text_Font_CloneSwigExplicitHTK_Text_Font(long jarg1, HTK_Text_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Text_Font();
  public final static native void delete_HTK_Text_Font(long jarg1);
  public final static native void HTK_Text_Font_director_connect(HTK_Text_Font obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Text_Font_change_ownership(HTK_Text_Font obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Bounding__SWIG_0(short jarg1);
  public final static native long new_HTK_Bounding__SWIG_1(short jarg1, float[] jarg2, float[] jarg3);
  public final static native long new_HTK_Bounding__SWIG_2(short jarg1, float[] jarg2, float jarg3);
  public final static native int HTK_Bounding_Execute(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Bounding_ExecuteSwigExplicitHTK_Bounding(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Bounding_Interpret__SWIG_0(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Bounding_InterpretSwigExplicitHTK_Bounding__SWIG_0(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Bounding_Interpret__SWIG_1(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Bounding_InterpretSwigExplicitHTK_Bounding__SWIG_1(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Bounding_Interpret__SWIG_2(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Bounding_InterpretSwigExplicitHTK_Bounding__SWIG_2(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Bounding_Clone(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Bounding_CloneSwigExplicitHTK_Bounding(long jarg1, HTK_Bounding jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Bounding(long jarg1);
  public final static native void HTK_Bounding_director_connect(HTK_Bounding obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Bounding_change_ownership(HTK_Bounding obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Point(short jarg1);
  public final static native int HTK_Point_Execute(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Point_ExecuteSwigExplicitHTK_Point(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Point_Interpret__SWIG_0(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Point_InterpretSwigExplicitHTK_Point__SWIG_0(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Point_Interpret__SWIG_1(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Point_InterpretSwigExplicitHTK_Point__SWIG_1(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Point_Interpret__SWIG_2(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Point_InterpretSwigExplicitHTK_Point__SWIG_2(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Point_Clone(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Point_CloneSwigExplicitHTK_Point(long jarg1, HTK_Point jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Point(long jarg1);
  public final static native void HTK_Point_director_connect(HTK_Point obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Point_change_ownership(HTK_Point obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Line__SWIG_0(short jarg1);
  public final static native long new_HTK_Line__SWIG_1();
  public final static native int HTK_Line_Execute(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_ExecuteSwigExplicitHTK_Line(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Interpret__SWIG_0(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_InterpretSwigExplicitHTK_Line__SWIG_0(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_Interpret__SWIG_1(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_InterpretSwigExplicitHTK_Line__SWIG_1(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_Interpret__SWIG_2(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_InterpretSwigExplicitHTK_Line__SWIG_2(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_Clone(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Line_CloneSwigExplicitHTK_Line(long jarg1, HTK_Line jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Line(long jarg1);
  public final static native void HTK_Line_director_connect(HTK_Line obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Line_change_ownership(HTK_Line obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Polypoint(short jarg1);
  public final static native int HTK_Polypoint_Execute(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Polypoint_ExecuteSwigExplicitHTK_Polypoint(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Polypoint_Interpret__SWIG_0(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Polypoint_InterpretSwigExplicitHTK_Polypoint__SWIG_0(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Polypoint_Interpret__SWIG_1(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Polypoint_InterpretSwigExplicitHTK_Polypoint__SWIG_1(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Polypoint_Interpret__SWIG_2(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Polypoint_InterpretSwigExplicitHTK_Polypoint__SWIG_2(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Polypoint_Clone(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Polypoint_CloneSwigExplicitHTK_Polypoint(long jarg1, HTK_Polypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Polypoint(long jarg1);
  public final static native void HTK_Polypoint_director_connect(HTK_Polypoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Polypoint_change_ownership(HTK_Polypoint obj, long cptr, boolean take_or_release);
  public final static native int HTK_NURBS_Curve_Execute(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_NURBS_Curve_ExecuteSwigExplicitHTK_NURBS_Curve(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_NURBS_Curve_Interpret__SWIG_0(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_NURBS_Curve_InterpretSwigExplicitHTK_NURBS_Curve__SWIG_0(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_NURBS_Curve_Interpret__SWIG_1(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_NURBS_Curve_InterpretSwigExplicitHTK_NURBS_Curve__SWIG_1(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_NURBS_Curve_Interpret__SWIG_2(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_NURBS_Curve_InterpretSwigExplicitHTK_NURBS_Curve__SWIG_2(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_NURBS_Curve_Clone(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_NURBS_Curve_CloneSwigExplicitHTK_NURBS_Curve(long jarg1, HTK_NURBS_Curve jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_NURBS_Curve();
  public final static native void delete_HTK_NURBS_Curve(long jarg1);
  public final static native void HTK_NURBS_Curve_director_connect(HTK_NURBS_Curve obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_NURBS_Curve_change_ownership(HTK_NURBS_Curve obj, long cptr, boolean take_or_release);
  public final static native int HTK_NURBS_Surface_interpret_trim(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_NURBS_Surface_execute_trim(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, HT_NURBS_Trim jarg3_);
  public final static native int HTK_NURBS_Surface_Execute(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_NURBS_Surface_ExecuteSwigExplicitHTK_NURBS_Surface(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_NURBS_Surface_Interpret__SWIG_0(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_NURBS_Surface_InterpretSwigExplicitHTK_NURBS_Surface__SWIG_0(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_NURBS_Surface_Interpret__SWIG_1(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_NURBS_Surface_InterpretSwigExplicitHTK_NURBS_Surface__SWIG_1(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_NURBS_Surface_Interpret__SWIG_2(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_NURBS_Surface_InterpretSwigExplicitHTK_NURBS_Surface__SWIG_2(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_NURBS_Surface_Clone(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_NURBS_Surface_CloneSwigExplicitHTK_NURBS_Surface(long jarg1, HTK_NURBS_Surface jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_NURBS_Surface();
  public final static native void delete_HTK_NURBS_Surface(long jarg1);
  public final static native void HTK_NURBS_Surface_director_connect(HTK_NURBS_Surface obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_NURBS_Surface_change_ownership(HTK_NURBS_Surface obj, long cptr, boolean take_or_release);
  public final static native int HTK_Area_Light_Execute(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Area_Light_ExecuteSwigExplicitHTK_Area_Light(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Area_Light_Interpret__SWIG_0(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Area_Light_InterpretSwigExplicitHTK_Area_Light__SWIG_0(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Area_Light_Interpret__SWIG_1(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Area_Light_InterpretSwigExplicitHTK_Area_Light__SWIG_1(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Area_Light_Interpret__SWIG_2(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Area_Light_InterpretSwigExplicitHTK_Area_Light__SWIG_2(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Area_Light_Clone(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Area_Light_CloneSwigExplicitHTK_Area_Light(long jarg1, HTK_Area_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Area_Light();
  public final static native void delete_HTK_Area_Light(long jarg1);
  public final static native void HTK_Area_Light_director_connect(HTK_Area_Light obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Area_Light_change_ownership(HTK_Area_Light obj, long cptr, boolean take_or_release);
  public final static native int HTK_Spot_Light_Execute(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Spot_Light_ExecuteSwigExplicitHTK_Spot_Light(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Spot_Light_Interpret__SWIG_0(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Spot_Light_InterpretSwigExplicitHTK_Spot_Light__SWIG_0(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Spot_Light_Interpret__SWIG_1(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Spot_Light_InterpretSwigExplicitHTK_Spot_Light__SWIG_1(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Spot_Light_Interpret__SWIG_2(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Spot_Light_InterpretSwigExplicitHTK_Spot_Light__SWIG_2(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Spot_Light_Clone(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Spot_Light_CloneSwigExplicitHTK_Spot_Light(long jarg1, HTK_Spot_Light jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Spot_Light();
  public final static native void delete_HTK_Spot_Light(long jarg1);
  public final static native void HTK_Spot_Light_director_connect(HTK_Spot_Light obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Spot_Light_change_ownership(HTK_Spot_Light obj, long cptr, boolean take_or_release);
  public final static native int HTK_Cutting_Plane_Execute(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Cutting_Plane_ExecuteSwigExplicitHTK_Cutting_Plane(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Cutting_Plane_Interpret__SWIG_0(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Cutting_Plane_InterpretSwigExplicitHTK_Cutting_Plane__SWIG_0(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Cutting_Plane_Interpret__SWIG_1(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Cutting_Plane_InterpretSwigExplicitHTK_Cutting_Plane__SWIG_1(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Cutting_Plane_Interpret__SWIG_2(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Cutting_Plane_InterpretSwigExplicitHTK_Cutting_Plane__SWIG_2(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Cutting_Plane_Clone(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Cutting_Plane_CloneSwigExplicitHTK_Cutting_Plane(long jarg1, HTK_Cutting_Plane jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Cutting_Plane();
  public final static native void delete_HTK_Cutting_Plane(long jarg1);
  public final static native void HTK_Cutting_Plane_director_connect(HTK_Cutting_Plane obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Cutting_Plane_change_ownership(HTK_Cutting_Plane obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Circle(short jarg1);
  public final static native int HTK_Circle_Execute(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Circle_ExecuteSwigExplicitHTK_Circle(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Circle_Interpret__SWIG_0(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Circle_InterpretSwigExplicitHTK_Circle__SWIG_0(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Circle_Interpret__SWIG_1(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Circle_InterpretSwigExplicitHTK_Circle__SWIG_1(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Circle_Interpret__SWIG_2(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Circle_InterpretSwigExplicitHTK_Circle__SWIG_2(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Circle_Clone(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Circle_CloneSwigExplicitHTK_Circle(long jarg1, HTK_Circle jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Circle(long jarg1);
  public final static native void HTK_Circle_director_connect(HTK_Circle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Circle_change_ownership(HTK_Circle obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Ellipse(short jarg1);
  public final static native int HTK_Ellipse_Execute(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Ellipse_ExecuteSwigExplicitHTK_Ellipse(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Ellipse_Interpret__SWIG_0(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Ellipse_InterpretSwigExplicitHTK_Ellipse__SWIG_0(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Ellipse_Interpret__SWIG_1(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Ellipse_InterpretSwigExplicitHTK_Ellipse__SWIG_1(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Ellipse_Interpret__SWIG_2(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Ellipse_InterpretSwigExplicitHTK_Ellipse__SWIG_2(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Ellipse_Clone(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Ellipse_CloneSwigExplicitHTK_Ellipse(long jarg1, HTK_Ellipse jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Ellipse(long jarg1);
  public final static native void HTK_Ellipse_director_connect(HTK_Ellipse obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Ellipse_change_ownership(HTK_Ellipse obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Sphere();
  public final static native int HTK_Sphere_Execute(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Sphere_ExecuteSwigExplicitHTK_Sphere(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Sphere_Interpret__SWIG_0(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Sphere_InterpretSwigExplicitHTK_Sphere__SWIG_0(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Sphere_Interpret__SWIG_1(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Sphere_InterpretSwigExplicitHTK_Sphere__SWIG_1(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Sphere_Interpret__SWIG_2(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Sphere_InterpretSwigExplicitHTK_Sphere__SWIG_2(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Sphere_Clone(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Sphere_CloneSwigExplicitHTK_Sphere(long jarg1, HTK_Sphere jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Sphere(long jarg1);
  public final static native void HTK_Sphere_director_connect(HTK_Sphere obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Sphere_change_ownership(HTK_Sphere obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Cylinder();
  public final static native int HTK_Cylinder_Execute(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Cylinder_ExecuteSwigExplicitHTK_Cylinder(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Cylinder_Interpret__SWIG_0(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Cylinder_InterpretSwigExplicitHTK_Cylinder__SWIG_0(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Cylinder_Interpret__SWIG_1(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Cylinder_InterpretSwigExplicitHTK_Cylinder__SWIG_1(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Cylinder_Interpret__SWIG_2(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Cylinder_InterpretSwigExplicitHTK_Cylinder__SWIG_2(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Cylinder_Clone(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Cylinder_CloneSwigExplicitHTK_Cylinder(long jarg1, HTK_Cylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Cylinder(long jarg1);
  public final static native void HTK_Cylinder_director_connect(HTK_Cylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Cylinder_change_ownership(HTK_Cylinder obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_PolyCylinder();
  public final static native int HTK_PolyCylinder_Execute(long jarg1, HTK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_PolyCylinder_Interpret__SWIG_0(long jarg1, HTK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_PolyCylinder_Interpret__SWIG_1(long jarg1, HTK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_PolyCylinder_Interpret__SWIG_2(long jarg1, HTK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_PolyCylinder_Clone(long jarg1, HTK_PolyCylinder jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_PolyCylinder(long jarg1);
  public final static native void HTK_PolyCylinder_director_connect(HTK_PolyCylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_PolyCylinder_change_ownership(HTK_PolyCylinder obj, long cptr, boolean take_or_release);
  public final static native int HTK_Grid_Execute(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Grid_ExecuteSwigExplicitHTK_Grid(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Grid_Interpret__SWIG_0(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Grid_InterpretSwigExplicitHTK_Grid__SWIG_0(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Grid_Interpret__SWIG_1(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Grid_InterpretSwigExplicitHTK_Grid__SWIG_1(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Grid_Interpret__SWIG_2(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Grid_InterpretSwigExplicitHTK_Grid__SWIG_2(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Grid_Clone(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Grid_CloneSwigExplicitHTK_Grid(long jarg1, HTK_Grid jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Grid();
  public final static native void delete_HTK_Grid(long jarg1);
  public final static native void HTK_Grid_director_connect(HTK_Grid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Grid_change_ownership(HTK_Grid obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Text(short jarg1);
  public final static native int HTK_Text_Execute(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Text_ExecuteSwigExplicitHTK_Text(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Text_Interpret__SWIG_0(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Text_InterpretSwigExplicitHTK_Text__SWIG_0(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Text_Interpret__SWIG_1(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Text_InterpretSwigExplicitHTK_Text__SWIG_1(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Text_Interpret__SWIG_2(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Text_InterpretSwigExplicitHTK_Text__SWIG_2(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Text_Clone(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Text_CloneSwigExplicitHTK_Text(long jarg1, HTK_Text jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Text(long jarg1);
  public final static native void HTK_Text_director_connect(HTK_Text obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Text_change_ownership(HTK_Text obj, long cptr, boolean take_or_release);
  public final static native int HTK_Font_Execute(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Font_ExecuteSwigExplicitHTK_Font(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Font_Interpret__SWIG_0(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Font_InterpretSwigExplicitHTK_Font__SWIG_0(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Font_Interpret__SWIG_1(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Font_InterpretSwigExplicitHTK_Font__SWIG_1(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Font_Interpret__SWIG_2(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Font_InterpretSwigExplicitHTK_Font__SWIG_2(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Font_Clone(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Font_CloneSwigExplicitHTK_Font(long jarg1, HTK_Font jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Font();
  public final static native void delete_HTK_Font(long jarg1);
  public final static native void HTK_Font_director_connect(HTK_Font obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Font_change_ownership(HTK_Font obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Image();
  public final static native int HTK_Image_Execute(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Image_ExecuteSwigExplicitHTK_Image(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Image_Interpret__SWIG_0(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Image_InterpretSwigExplicitHTK_Image__SWIG_0(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Image_Interpret__SWIG_1(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Image_InterpretSwigExplicitHTK_Image__SWIG_1(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Image_Interpret__SWIG_2(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Image_InterpretSwigExplicitHTK_Image__SWIG_2(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Image_Clone(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Image_CloneSwigExplicitHTK_Image(long jarg1, HTK_Image jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void delete_HTK_Image(long jarg1);
  public final static native void HTK_Image_director_connect(HTK_Image obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Image_change_ownership(HTK_Image obj, long cptr, boolean take_or_release);
  public final static native void HTK_Texture_mh_stage_set(long jarg1, HTK_Texture jarg1_, int jarg2);
  public final static native int HTK_Texture_mh_stage_get(long jarg1, HTK_Texture jarg1_);
  public final static native void HTK_Texture_m_referee_set(long jarg1, HTK_Texture jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native long HTK_Texture_m_referee_get(long jarg1, HTK_Texture jarg1_);
  public final static native void HTK_Texture_m_key_set(long jarg1, HTK_Texture jarg1_, int jarg2);
  public final static native int HTK_Texture_m_key_get(long jarg1, HTK_Texture jarg1_);
  public final static native long new_HTK_Texture();
  public final static native void delete_HTK_Texture(long jarg1);
  public final static native int HTK_Texture_Write(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_WriteSwigExplicitHTK_Texture(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Execute(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_ExecuteSwigExplicitHTK_Texture(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Interpret__SWIG_0(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Texture_InterpretSwigExplicitHTK_Texture__SWIG_0(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Texture_Interpret__SWIG_1(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Texture_InterpretSwigExplicitHTK_Texture__SWIG_1(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Texture_Interpret__SWIG_2(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Texture_InterpretSwigExplicitHTK_Texture__SWIG_2(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native void HTK_Texture_Reset(long jarg1, HTK_Texture jarg1_);
  public final static native void HTK_Texture_ResetSwigExplicitHTK_Texture(long jarg1, HTK_Texture jarg1_);
  public final static native int HTK_Texture_Clone(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Texture_CloneSwigExplicitHTK_Texture(long jarg1, HTK_Texture jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Texture_director_connect(HTK_Texture obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Texture_change_ownership(HTK_Texture obj, long cptr, boolean take_or_release);
  public final static native void HTK_Texture_Definitions_m_parts_set(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2);
  public final static native long HTK_Texture_Definitions_m_parts_get(long jarg1, HTK_Texture_Definitions jarg1_);
  public final static native void HTK_Texture_Definitions_m_num_parts_set(long jarg1, HTK_Texture_Definitions jarg1_, int jarg2);
  public final static native int HTK_Texture_Definitions_m_num_parts_get(long jarg1, HTK_Texture_Definitions jarg1_);
  public final static native void HTK_Texture_Definitions_m_is_shader_set(long jarg1, HTK_Texture_Definitions jarg1_, boolean jarg2);
  public final static native boolean HTK_Texture_Definitions_m_is_shader_get(long jarg1, HTK_Texture_Definitions jarg1_);
  public final static native long new_HTK_Texture_Definitions__SWIG_0(boolean jarg1);
  public final static native long new_HTK_Texture_Definitions__SWIG_1();
  public final static native void delete_HTK_Texture_Definitions(long jarg1);
  public final static native int HTK_Texture_Definitions_Read(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_ReadSwigExplicitHTK_Texture_Definitions(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_Write(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_WriteSwigExplicitHTK_Texture_Definitions(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_Execute(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_ExecuteSwigExplicitHTK_Texture_Definitions(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Texture_Definitions_Interpret__SWIG_0(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Texture_Definitions_InterpretSwigExplicitHTK_Texture_Definitions__SWIG_0(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Texture_Definitions_Interpret__SWIG_1(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Texture_Definitions_InterpretSwigExplicitHTK_Texture_Definitions__SWIG_1(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Texture_Definitions_Interpret__SWIG_2(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Texture_Definitions_InterpretSwigExplicitHTK_Texture_Definitions__SWIG_2(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Texture_Definitions_Clone(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Texture_Definitions_CloneSwigExplicitHTK_Texture_Definitions(long jarg1, HTK_Texture_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Texture_Definitions_director_connect(HTK_Texture_Definitions obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Texture_Definitions_change_ownership(HTK_Texture_Definitions obj, long cptr, boolean take_or_release);
  public final static native int HTK_Glyph_Definition_Execute(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definition_ExecuteSwigExplicitHTK_Glyph_Definition(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definition_Interpret__SWIG_0(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Glyph_Definition_InterpretSwigExplicitHTK_Glyph_Definition__SWIG_0(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Glyph_Definition_Interpret__SWIG_1(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Glyph_Definition_InterpretSwigExplicitHTK_Glyph_Definition__SWIG_1(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Glyph_Definition_Interpret__SWIG_2(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Glyph_Definition_InterpretSwigExplicitHTK_Glyph_Definition__SWIG_2(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Glyph_Definition_Clone(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Glyph_Definition_CloneSwigExplicitHTK_Glyph_Definition(long jarg1, HTK_Glyph_Definition jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Glyph_Definition();
  public final static native void delete_HTK_Glyph_Definition(long jarg1);
  public final static native void HTK_Glyph_Definition_director_connect(HTK_Glyph_Definition obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Glyph_Definition_change_ownership(HTK_Glyph_Definition obj, long cptr, boolean take_or_release);
  public final static native void HTK_Glyph_Definitions_m_parts_set(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2);
  public final static native long HTK_Glyph_Definitions_m_parts_get(long jarg1, HTK_Glyph_Definitions jarg1_);
  public final static native void HTK_Glyph_Definitions_m_num_parts_set(long jarg1, HTK_Glyph_Definitions jarg1_, int jarg2);
  public final static native int HTK_Glyph_Definitions_m_num_parts_get(long jarg1, HTK_Glyph_Definitions jarg1_);
  public final static native long new_HTK_Glyph_Definitions();
  public final static native void delete_HTK_Glyph_Definitions(long jarg1);
  public final static native int HTK_Glyph_Definitions_Read(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_ReadSwigExplicitHTK_Glyph_Definitions(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_Write(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_WriteSwigExplicitHTK_Glyph_Definitions(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_Execute(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_ExecuteSwigExplicitHTK_Glyph_Definitions(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Glyph_Definitions_Interpret__SWIG_0(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Glyph_Definitions_InterpretSwigExplicitHTK_Glyph_Definitions__SWIG_0(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Glyph_Definitions_Interpret__SWIG_1(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Glyph_Definitions_InterpretSwigExplicitHTK_Glyph_Definitions__SWIG_1(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Glyph_Definitions_Interpret__SWIG_2(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Glyph_Definitions_InterpretSwigExplicitHTK_Glyph_Definitions__SWIG_2(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Glyph_Definitions_Clone(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Glyph_Definitions_CloneSwigExplicitHTK_Glyph_Definitions(long jarg1, HTK_Glyph_Definitions jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Glyph_Definitions_director_connect(HTK_Glyph_Definitions obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Glyph_Definitions_change_ownership(HTK_Glyph_Definitions obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_Named_Style_Def();
  public final static native int HTK_Named_Style_Def_Write(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Style_Def_Execute(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Style_Def_Interpret__SWIG_0(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Named_Style_Def_Interpret__SWIG_1(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Named_Style_Def_Interpret__SWIG_2(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Named_Style_Def_Clone(long jarg1, HTK_Named_Style_Def jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Named_Style_Def_SetRoot(long jarg1, HTK_Named_Style_Def jarg1_, int jarg2);
  public final static native int HTK_Named_Style_Def_GetRoot(long jarg1, HTK_Named_Style_Def jarg1_);
  public final static native void HTK_Named_Style_Def_Reset(long jarg1, HTK_Named_Style_Def jarg1_);
  public final static native void delete_HTK_Named_Style_Def(long jarg1);
  public final static native long new_HTK_Named_Style_Defs();
  public final static native void delete_HTK_Named_Style_Defs(long jarg1);
  public final static native int HTK_Named_Style_Defs_Read(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Style_Defs_Write(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Style_Defs_Execute(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Named_Style_Defs_Interpret__SWIG_0(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Named_Style_Defs_Interpret__SWIG_1(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Named_Style_Defs_Interpret__SWIG_2(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Named_Style_Defs_Clone(long jarg1, HTK_Named_Style_Defs jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Named_Style_Defs_SetRoot(long jarg1, HTK_Named_Style_Defs jarg1_, int jarg2);
  public final static native int HTK_Named_Style_Defs_GetRoot(long jarg1, HTK_Named_Style_Defs jarg1_);
  public final static native int HTK_Line_Style_Execute(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Style_ExecuteSwigExplicitHTK_Line_Style(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Style_Interpret__SWIG_0(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_Style_InterpretSwigExplicitHTK_Line_Style__SWIG_0(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_Style_Interpret__SWIG_1(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_Style_InterpretSwigExplicitHTK_Line_Style__SWIG_1(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_Style_Interpret__SWIG_2(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_Style_InterpretSwigExplicitHTK_Line_Style__SWIG_2(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_Style_Clone(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Line_Style_CloneSwigExplicitHTK_Line_Style(long jarg1, HTK_Line_Style jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native long new_HTK_Line_Style();
  public final static native void delete_HTK_Line_Style(long jarg1);
  public final static native void HTK_Line_Style_director_connect(HTK_Line_Style obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Line_Style_change_ownership(HTK_Line_Style obj, long cptr, boolean take_or_release);
  public final static native void HTK_Line_Styles_m_parts_set(long jarg1, HTK_Line_Styles jarg1_, long jarg2);
  public final static native long HTK_Line_Styles_m_parts_get(long jarg1, HTK_Line_Styles jarg1_);
  public final static native void HTK_Line_Styles_m_num_parts_set(long jarg1, HTK_Line_Styles jarg1_, int jarg2);
  public final static native int HTK_Line_Styles_m_num_parts_get(long jarg1, HTK_Line_Styles jarg1_);
  public final static native long new_HTK_Line_Styles();
  public final static native void delete_HTK_Line_Styles(long jarg1);
  public final static native int HTK_Line_Styles_Read(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_ReadSwigExplicitHTK_Line_Styles(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_Write(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_WriteSwigExplicitHTK_Line_Styles(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_Execute(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_ExecuteSwigExplicitHTK_Line_Styles(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Line_Styles_Interpret__SWIG_0(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_Styles_InterpretSwigExplicitHTK_Line_Styles__SWIG_0(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Line_Styles_Interpret__SWIG_1(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_Styles_InterpretSwigExplicitHTK_Line_Styles__SWIG_1(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Line_Styles_Interpret__SWIG_2(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_Styles_InterpretSwigExplicitHTK_Line_Styles__SWIG_2(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Line_Styles_Clone(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Line_Styles_CloneSwigExplicitHTK_Line_Styles(long jarg1, HTK_Line_Styles jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_Line_Styles_director_connect(HTK_Line_Styles obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Line_Styles_change_ownership(HTK_Line_Styles obj, long cptr, boolean take_or_release);
  public final static native int HTK_Shell_Usefulness(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4, float[] jarg5);
  public final static native int HTK_Shell_UsefulnessSwigExplicitHTK_Shell(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4, float[] jarg5);
  public final static native int HTK_Shell_ProcessRevisits(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, boolean[] jarg4);
  public final static native int HTK_Shell_LabelFakeEdges(long jarg1, HTK_Shell jarg1_);
  public final static native int HTK_Shell_LabelFakeEdgesSwigExplicitHTK_Shell(long jarg1, HTK_Shell jarg1_);
  public final static native int HTK_Shell_Execute(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Shell_ExecuteSwigExplicitHTK_Shell(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Shell_Interpret__SWIG_0(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Shell_InterpretSwigExplicitHTK_Shell__SWIG_0(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Shell_Interpret__SWIG_1(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Shell_InterpretSwigExplicitHTK_Shell__SWIG_1(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Shell_Interpret__SWIG_2(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Shell_InterpretSwigExplicitHTK_Shell__SWIG_2(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Shell_Clone(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Shell_CloneSwigExplicitHTK_Shell(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native boolean HTK_Shell_Match_Instance(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native boolean HTK_Shell_Match_InstanceSwigExplicitHTK_Shell(long jarg1, HTK_Shell jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native long new_HTK_Shell();
  public final static native void delete_HTK_Shell(long jarg1);
  public final static native void HTK_Shell_director_connect(HTK_Shell obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Shell_change_ownership(HTK_Shell obj, long cptr, boolean take_or_release);
  public final static native int HTK_Polyhedron_HExecute__SWIG_0(long jarg1, HTK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Polyhedron_HExecute__SWIG_1(long jarg1, HTK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Polyhedron_HInterpret__SWIG_0(long jarg1, HTK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native int HTK_Polyhedron_HInterpret__SWIG_1(long jarg1, HTK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Polyhedron_HInterpret__SWIG_2(long jarg1, HTK_Polyhedron jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native boolean HTK_Polyhedron_match_points(long jarg1, HTK_Polyhedron jarg1_, long jarg2, Recorded_Instance jarg2_, float[] jarg3);
  public final static native boolean HTK_Polyhedron_match_attributes(long jarg1, HTK_Polyhedron jarg1_, long jarg2, Recorded_Instance jarg2_);
  public final static native void delete_HTK_Polyhedron(long jarg1);
  public final static native int HTK_Mesh_Execute(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Mesh_ExecuteSwigExplicitHTK_Mesh(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_Mesh_Interpret__SWIG_0(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Mesh_InterpretSwigExplicitHTK_Mesh__SWIG_0(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Mesh_Interpret__SWIG_1(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Mesh_InterpretSwigExplicitHTK_Mesh__SWIG_1(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_Mesh_Interpret__SWIG_2(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Mesh_InterpretSwigExplicitHTK_Mesh__SWIG_2(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_Mesh_Clone(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_Mesh_CloneSwigExplicitHTK_Mesh(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native boolean HTK_Mesh_Match_Instance(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native boolean HTK_Mesh_Match_InstanceSwigExplicitHTK_Mesh(long jarg1, HTK_Mesh jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, Recorded_Instance jarg3_);
  public final static native long new_HTK_Mesh();
  public final static native void delete_HTK_Mesh(long jarg1);
  public final static native void HTK_Mesh_director_connect(HTK_Mesh obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_Mesh_change_ownership(HTK_Mesh obj, long cptr, boolean take_or_release);
  public final static native long new_HTK_PolyPolypoint(short jarg1);
  public final static native void delete_HTK_PolyPolypoint(long jarg1);
  public final static native int HTK_PolyPolypoint_Execute(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_PolyPolypoint_ExecuteSwigExplicitHTK_PolyPolypoint(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_PolyPolypoint_Interpret__SWIG_0(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_PolyPolypoint_InterpretSwigExplicitHTK_PolyPolypoint__SWIG_0(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_PolyPolypoint_Interpret__SWIG_1(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_PolyPolypoint_InterpretSwigExplicitHTK_PolyPolypoint__SWIG_1(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3);
  public final static native int HTK_PolyPolypoint_Interpret__SWIG_2(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_PolyPolypoint_InterpretSwigExplicitHTK_PolyPolypoint__SWIG_2(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, String jarg4);
  public final static native int HTK_PolyPolypoint_Clone(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native int HTK_PolyPolypoint_CloneSwigExplicitHTK_PolyPolypoint(long jarg1, HTK_PolyPolypoint jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3);
  public final static native void HTK_PolyPolypoint_Reset(long jarg1, HTK_PolyPolypoint jarg1_);
  public final static native void HTK_PolyPolypoint_ResetSwigExplicitHTK_PolyPolypoint(long jarg1, HTK_PolyPolypoint jarg1_);
  public final static native void HTK_PolyPolypoint_director_connect(HTK_PolyPolypoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTK_PolyPolypoint_change_ownership(HTK_PolyPolypoint obj, long cptr, boolean take_or_release);
  public final static native long new_HStreamFileToolkit();
  public final static native void delete_HStreamFileToolkit(long jarg1);
  public final static native void HStreamFileToolkit_Restart(long jarg1, HStreamFileToolkit jarg1_);
  public final static native int HStreamFileToolkit_GenerateBuffer__SWIG_0(long jarg1, HStreamFileToolkit jarg1_, byte[] jarg2, int jarg3, int[] jarg4, String jarg5);
  public final static native int HStreamFileToolkit_GenerateBuffer__SWIG_1(long jarg1, HStreamFileToolkit jarg1_, byte[] jarg2, int jarg3, int[] jarg4);
  public final static native int HStreamFileToolkit_GenerateOneItemBuffer(long jarg1, HStreamFileToolkit jarg1_, byte[] jarg2, int jarg3, int[] jarg4, int jarg5);
  public final static native long HStreamFileToolkit_CountObjects__SWIG_0(long jarg1, HStreamFileToolkit jarg1_, String jarg2);
  public final static native long HStreamFileToolkit_CountObjects__SWIG_1(long jarg1, HStreamFileToolkit jarg1_);
  public final static native void HStreamFileToolkit_ActivateContext(long jarg1, HStreamFileToolkit jarg1_, int jarg2);
  public final static native void HStreamFileToolkit_DeactivateContext(long jarg1, HStreamFileToolkit jarg1_, int jarg2);
  public final static native void HStreamFileToolkit_NewFileContext(long jarg1, HStreamFileToolkit jarg1_, int jarg2);
  public final static native int HStreamFileToolkit_GetHoopsVersion(long jarg1, HStreamFileToolkit jarg1_);
  public final static native int HStreamFileToolkit_StringToHandler(long jarg1, HStreamFileToolkit jarg1_, String jarg2, long jarg3);
  public final static native int HStreamFileToolkit_StringToOpcode(long jarg1, HStreamFileToolkit jarg1_, String jarg2, byte[] jarg3);
  public final static native void HStreamFileToolkit_SetThumbnail__SWIG_0(long jarg1, HStreamFileToolkit jarg1_, long jarg2, BBaseOpcodeHandler jarg2_);
  public final static native void HStreamFileToolkit_SetThumbnail__SWIG_1(long jarg1, HStreamFileToolkit jarg1_, int jarg2, int jarg3, int jarg4, byte[] jarg5);
  public final static native int HStreamFileToolkit_Write_Stream_File(long jarg1, HStreamFileToolkit jarg1_);
  public final static native void HStreamFileToolkit_AddExcludedSegments(long jarg1, HStreamFileToolkit jarg1_, int jarg2, int[] jarg3);
  public final static native void HStreamFileToolkit_AddExcludedSegment(long jarg1, HStreamFileToolkit jarg1_, int jarg2);
  public final static native boolean HStreamFileToolkit_SegmentIsExcluded(long jarg1, HStreamFileToolkit jarg1_, int jarg2);
  public final static native void HStreamFileToolkit_ClearExcludedSegments(long jarg1, HStreamFileToolkit jarg1_);
  public final static native int HStreamFileToolkit_GetExcludedSegmentCount(long jarg1, HStreamFileToolkit jarg1_);
  public final static native void HStreamFileToolkit_SetPrependRootSegment(long jarg1, HStreamFileToolkit jarg1_, String jarg2);
  public final static native String HStreamFileToolkit_GetPrependRootSegment(long jarg1, HStreamFileToolkit jarg1_);
  public final static native boolean HStreamFileToolkit_MatchPreviousExRef(long jarg1, HStreamFileToolkit jarg1_);
  public final static native void HStreamFileToolkit_m_search_strings_set(long jarg1, HStreamFileToolkit jarg1_, long jarg2);
  public final static native long HStreamFileToolkit_m_search_strings_get(long jarg1, HStreamFileToolkit jarg1_);
  public final static native void HStreamFileToolkit_GetExcludedSegments(long jarg1, HStreamFileToolkit jarg1_, int[] jarg2, int jarg3);
  public final static native long SWIGInternal_Data_AccumulatorUpcast(long jarg1);
  public final static native long SWIGInternal_TranslatorUpcast(long jarg1);
  public final static native long SWIGInternal_Key_RecordUpcast(long jarg1);
  public final static native long SWIGInternal_Segment_ListUpcast(long jarg1);
  public final static native long SWIGInternal_Revisit_ItemUpcast(long jarg1);
  public final static native long SWIGRecorded_InstanceUpcast(long jarg1);
  public final static native long SWIGBStreamFileToolkitUpcast(long jarg1);
  public final static native long SWIGBBaseOpcodeHandlerUpcast(long jarg1);
  public final static native long SWIGTK_DefaultUpcast(long jarg1);
  public final static native long SWIGTK_UnavailableUpcast(long jarg1);
  public final static native long SWIGTK_HeaderUpcast(long jarg1);
  public final static native long SWIGTK_File_InfoUpcast(long jarg1);
  public final static native long SWIGTK_CommentUpcast(long jarg1);
  public final static native long SWIGTK_TerminatorUpcast(long jarg1);
  public final static native long SWIGTK_CompressionUpcast(long jarg1);
  public final static native long SWIGLock_MasksUpcast(long jarg1);
  public final static native long SWIGTK_Open_SegmentUpcast(long jarg1);
  public final static native long SWIGTK_Close_SegmentUpcast(long jarg1);
  public final static native long SWIGTK_Reopen_SegmentUpcast(long jarg1);
  public final static native long SWIGTK_Referenced_SegmentUpcast(long jarg1);
  public final static native long SWIGTK_ReferenceUpcast(long jarg1);
  public final static native long SWIGTK_InstanceUpcast(long jarg1);
  public final static native long SWIGTK_Delete_ObjectUpcast(long jarg1);
  public final static native long SWIGTK_LODUpcast(long jarg1);
  public final static native long SWIGTK_Geometry_AttributesUpcast(long jarg1);
  public final static native long SWIGTK_RenumberUpcast(long jarg1);
  public final static native long SWIGTK_TagUpcast(long jarg1);
  public final static native long SWIGTK_DictionaryUpcast(long jarg1);
  public final static native long SWIGTK_Dictionary_LocaterUpcast(long jarg1);
  public final static native long SWIGTK_ColorUpcast(long jarg1);
  public final static native long SWIGTK_Color_RGBUpcast(long jarg1);
  public final static native long SWIGTK_Color_By_ValueUpcast(long jarg1);
  public final static native long SWIGTK_Color_By_IndexUpcast(long jarg1);
  public final static native long SWIGTK_Color_By_FIndexUpcast(long jarg1);
  public final static native long SWIGTK_Color_MapUpcast(long jarg1);
  public final static native long SWIGTK_CallbackUpcast(long jarg1);
  public final static native long SWIGTK_Rendering_OptionsUpcast(long jarg1);
  public final static native long SWIGTK_HeuristicsUpcast(long jarg1);
  public final static native long SWIGTK_Geometry_OptionsUpcast(long jarg1);
  public final static native long SWIGTK_VisibilityUpcast(long jarg1);
  public final static native long SWIGTK_SelectabilityUpcast(long jarg1);
  public final static native long SWIGTK_MatrixUpcast(long jarg1);
  public final static native long SWIGTK_EnumeratedUpcast(long jarg1);
  public final static native long SWIGTK_SizeUpcast(long jarg1);
  public final static native long SWIGTK_Linear_PatternUpcast(long jarg1);
  public final static native long SWIGTK_NamedUpcast(long jarg1);
  public final static native long SWIGTK_StreamingUpcast(long jarg1);
  public final static native long SWIGTK_ConditionsUpcast(long jarg1);
  public final static native long SWIGTK_Conditional_ActionUpcast(long jarg1);
  public final static native long SWIGTK_User_OptionsUpcast(long jarg1);
  public final static native long SWIGTK_Unicode_OptionsUpcast(long jarg1);
  public final static native long SWIGTK_User_IndexUpcast(long jarg1);
  public final static native long SWIGTK_User_Index_DataUpcast(long jarg1);
  public final static native long SWIGTK_User_ValueUpcast(long jarg1);
  public final static native long SWIGTK_CameraUpcast(long jarg1);
  public final static native long SWIGTK_WindowUpcast(long jarg1);
  public final static native long SWIGTK_Text_FontUpcast(long jarg1);
  public final static native long SWIGTK_BoundingUpcast(long jarg1);
  public final static native long SWIGTK_PointUpcast(long jarg1);
  public final static native long SWIGTK_LineUpcast(long jarg1);
  public final static native long SWIGTK_PolypointUpcast(long jarg1);
  public final static native long SWIGTK_NURBS_CurveUpcast(long jarg1);
  public final static native long SWIGHT_NURBS_TrimUpcast(long jarg1);
  public final static native long SWIGTK_NURBS_SurfaceUpcast(long jarg1);
  public final static native long SWIGTK_Area_LightUpcast(long jarg1);
  public final static native long SWIGTK_Spot_LightUpcast(long jarg1);
  public final static native long SWIGTK_Cutting_PlaneUpcast(long jarg1);
  public final static native long SWIGTK_CircleUpcast(long jarg1);
  public final static native long SWIGTK_EllipseUpcast(long jarg1);
  public final static native long SWIGTK_SphereUpcast(long jarg1);
  public final static native long SWIGTK_CylinderUpcast(long jarg1);
  public final static native long SWIGTK_PolyCylinderUpcast(long jarg1);
  public final static native long SWIGTK_GridUpcast(long jarg1);
  public final static native long SWIGTK_TextUpcast(long jarg1);
  public final static native long SWIGTK_FontUpcast(long jarg1);
  public final static native long SWIGTK_ImageUpcast(long jarg1);
  public final static native long SWIGTK_TextureUpcast(long jarg1);
  public final static native long SWIGTK_ThumbnailUpcast(long jarg1);
  public final static native long SWIGTK_Glyph_DefinitionUpcast(long jarg1);
  public final static native long SWIGTK_Named_Style_DefUpcast(long jarg1);
  public final static native long SWIGTK_Line_StyleUpcast(long jarg1);
  public final static native long SWIGTK_Clip_RectangleUpcast(long jarg1);
  public final static native long SWIGTK_Clip_RegionUpcast(long jarg1);
  public final static native long SWIGTK_Complex_Clip_RegionUpcast(long jarg1);
  public final static native long SWIGTK_User_DataUpcast(long jarg1);
  public final static native long SWIGTK_MaterialUpcast(long jarg1);
  public final static native long SWIGTK_XMLUpcast(long jarg1);
  public final static native long SWIGTK_URLUpcast(long jarg1);
  public final static native long SWIGTK_External_ReferenceUpcast(long jarg1);
  public final static native long SWIGTK_External_Reference_UnicodeUpcast(long jarg1);
  public final static native long SWIGTK_PolyhedronUpcast(long jarg1);
  public final static native long SWIGTK_MeshUpcast(long jarg1);
  public final static native long SWIGTK_ShellUpcast(long jarg1);
  public final static native long SWIGTK_PolyPolypointUpcast(long jarg1);
  public final static native long SWIGHTK_Open_SegmentUpcast(long jarg1);
  public final static native long SWIGHTK_Close_SegmentUpcast(long jarg1);
  public final static native long SWIGHTK_Reopen_SegmentUpcast(long jarg1);
  public final static native long SWIGHTK_Referenced_SegmentUpcast(long jarg1);
  public final static native long SWIGHTK_ReferenceUpcast(long jarg1);
  public final static native long SWIGHTK_InstanceUpcast(long jarg1);
  public final static native long SWIGHTK_Delete_ObjectUpcast(long jarg1);
  public final static native long SWIGHTK_LODUpcast(long jarg1);
  public final static native long SWIGHTK_RenumberUpcast(long jarg1);
  public final static native long SWIGHTK_ColorUpcast(long jarg1);
  public final static native long SWIGHTK_Color_RGBUpcast(long jarg1);
  public final static native long SWIGHTK_Color_By_ValueUpcast(long jarg1);
  public final static native long SWIGHTK_Color_By_IndexUpcast(long jarg1);
  public final static native long SWIGHTK_Color_By_FIndexUpcast(long jarg1);
  public final static native long SWIGHTK_Color_CompositeUpcast(long jarg1);
  public final static native long SWIGHTK_Color_MapUpcast(long jarg1);
  public final static native long SWIGHTK_CallbackUpcast(long jarg1);
  public final static native long SWIGHTK_Rendering_OptionsUpcast(long jarg1);
  public final static native long SWIGHTK_HeuristicsUpcast(long jarg1);
  public final static native long SWIGHTK_Geometry_OptionsUpcast(long jarg1);
  public final static native long SWIGHTK_VisibilityUpcast(long jarg1);
  public final static native long SWIGHTK_SelectabilityUpcast(long jarg1);
  public final static native long SWIGHTK_MatrixUpcast(long jarg1);
  public final static native long SWIGHTK_EnumeratedUpcast(long jarg1);
  public final static native long SWIGHTK_SizeUpcast(long jarg1);
  public final static native long SWIGHTK_Linear_PatternUpcast(long jarg1);
  public final static native long SWIGHTK_NamedUpcast(long jarg1);
  public final static native long SWIGHTK_StreamingUpcast(long jarg1);
  public final static native long SWIGHTK_ConditionsUpcast(long jarg1);
  public final static native long SWIGHTK_Conditional_ActionUpcast(long jarg1);
  public final static native long SWIGHTK_Conditional_ActionsUpcast(long jarg1);
  public final static native long SWIGHTK_User_OptionsUpcast(long jarg1);
  public final static native long SWIGHTK_Unicode_OptionsUpcast(long jarg1);
  public final static native long SWIGHTK_User_IndexUpcast(long jarg1);
  public final static native long SWIGHTK_User_Index_DataUpcast(long jarg1);
  public final static native long SWIGHTK_User_ValueUpcast(long jarg1);
  public final static native long SWIGHTK_CameraUpcast(long jarg1);
  public final static native long SWIGHTK_WindowUpcast(long jarg1);
  public final static native long SWIGHTK_Clip_RegionUpcast(long jarg1);
  public final static native long SWIGHTK_Complex_Clip_RegionUpcast(long jarg1);
  public final static native long SWIGHTK_Clip_RectangleUpcast(long jarg1);
  public final static native long SWIGHTK_Text_FontUpcast(long jarg1);
  public final static native long SWIGHTK_BoundingUpcast(long jarg1);
  public final static native long SWIGHTK_PointUpcast(long jarg1);
  public final static native long SWIGHTK_LineUpcast(long jarg1);
  public final static native long SWIGHTK_PolypointUpcast(long jarg1);
  public final static native long SWIGHTK_NURBS_CurveUpcast(long jarg1);
  public final static native long SWIGHTK_NURBS_SurfaceUpcast(long jarg1);
  public final static native long SWIGHTK_Area_LightUpcast(long jarg1);
  public final static native long SWIGHTK_Spot_LightUpcast(long jarg1);
  public final static native long SWIGHTK_Cutting_PlaneUpcast(long jarg1);
  public final static native long SWIGHTK_CircleUpcast(long jarg1);
  public final static native long SWIGHTK_EllipseUpcast(long jarg1);
  public final static native long SWIGHTK_SphereUpcast(long jarg1);
  public final static native long SWIGHTK_CylinderUpcast(long jarg1);
  public final static native long SWIGHTK_PolyCylinderUpcast(long jarg1);
  public final static native long SWIGHTK_GridUpcast(long jarg1);
  public final static native long SWIGHTK_TextUpcast(long jarg1);
  public final static native long SWIGHTK_FontUpcast(long jarg1);
  public final static native long SWIGHTK_ImageUpcast(long jarg1);
  public final static native long SWIGHTK_TextureUpcast(long jarg1);
  public final static native long SWIGHTK_Texture_DefinitionsUpcast(long jarg1);
  public final static native long SWIGHTK_Glyph_DefinitionUpcast(long jarg1);
  public final static native long SWIGHTK_Glyph_DefinitionsUpcast(long jarg1);
  public final static native long SWIGHTK_Named_Style_DefUpcast(long jarg1);
  public final static native long SWIGHTK_Named_Style_DefsUpcast(long jarg1);
  public final static native long SWIGHTK_Line_StyleUpcast(long jarg1);
  public final static native long SWIGHTK_Line_StylesUpcast(long jarg1);
  public final static native long SWIGHTK_ShellUpcast(long jarg1);
  public final static native long SWIGHTK_PolyhedronUpcast(long jarg1);
  public final static native long SWIGHTK_MeshUpcast(long jarg1);
  public final static native long SWIGHTK_PolyPolypointUpcast(long jarg1);
  public final static native long SWIGHStreamFileToolkitUpcast(long jarg1);

  public static int SwigDirector_BBaseOpcodeHandler_Read(BBaseOpcodeHandler self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_BBaseOpcodeHandler_Write(BBaseOpcodeHandler self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_BBaseOpcodeHandler_Execute(BBaseOpcodeHandler self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_BBaseOpcodeHandler_Interpret__SWIG_0(BBaseOpcodeHandler self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_BBaseOpcodeHandler_Interpret__SWIG_1(BBaseOpcodeHandler self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_BBaseOpcodeHandler_Interpret__SWIG_2(BBaseOpcodeHandler self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_BBaseOpcodeHandler_Reset(BBaseOpcodeHandler self) {
    self.Reset();
  }
  public static boolean SwigDirector_BBaseOpcodeHandler_Match_Instance(BBaseOpcodeHandler self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_BBaseOpcodeHandler_Clone(BBaseOpcodeHandler self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_BBaseOpcodeHandler_NeedsContext(BBaseOpcodeHandler self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Default_Read(TK_Default self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Default_Write(TK_Default self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Default_Execute(TK_Default self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Default_Interpret__SWIG_0(TK_Default self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Default_Interpret__SWIG_1(TK_Default self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Default_Interpret__SWIG_2(TK_Default self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Default_Reset(TK_Default self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Default_Match_Instance(TK_Default self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Default_Clone(TK_Default self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Default_NeedsContext(TK_Default self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Unavailable_Read(TK_Unavailable self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unavailable_Write(TK_Unavailable self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unavailable_Execute(TK_Unavailable self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unavailable_Interpret__SWIG_0(TK_Unavailable self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Unavailable_Interpret__SWIG_1(TK_Unavailable self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Unavailable_Interpret__SWIG_2(TK_Unavailable self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Unavailable_Reset(TK_Unavailable self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Unavailable_Match_Instance(TK_Unavailable self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Unavailable_Clone(TK_Unavailable self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Unavailable_NeedsContext(TK_Unavailable self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Header_Read(TK_Header self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Header_Write(TK_Header self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Header_Execute(TK_Header self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Header_Interpret__SWIG_0(TK_Header self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Header_Interpret__SWIG_1(TK_Header self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Header_Interpret__SWIG_2(TK_Header self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Header_Reset(TK_Header self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Header_Match_Instance(TK_Header self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Header_Clone(TK_Header self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Header_NeedsContext(TK_Header self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_File_Info_Read(TK_File_Info self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_File_Info_Write(TK_File_Info self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_File_Info_Execute(TK_File_Info self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_File_Info_Interpret__SWIG_0(TK_File_Info self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_File_Info_Interpret__SWIG_1(TK_File_Info self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_File_Info_Interpret__SWIG_1(TK_File_Info self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_File_Info_Reset(TK_File_Info self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_File_Info_Match_Instance(TK_File_Info self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_File_Info_Clone(TK_File_Info self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_File_Info_NeedsContext(TK_File_Info self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Comment_Read(TK_Comment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Comment_Write(TK_Comment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Comment_Execute(TK_Comment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Comment_Interpret__SWIG_0(TK_Comment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Comment_Interpret__SWIG_1(TK_Comment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Comment_Interpret__SWIG_1(TK_Comment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Comment_Reset(TK_Comment self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Comment_Match_Instance(TK_Comment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Comment_Clone(TK_Comment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Comment_NeedsContext(TK_Comment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Terminator_Read(TK_Terminator self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Terminator_Write(TK_Terminator self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Terminator_Execute(TK_Terminator self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Terminator_Interpret__SWIG_0(TK_Terminator self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Terminator_Interpret__SWIG_1(TK_Terminator self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Terminator_Interpret__SWIG_2(TK_Terminator self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Terminator_Reset(TK_Terminator self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Terminator_Match_Instance(TK_Terminator self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Terminator_Clone(TK_Terminator self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Terminator_NeedsContext(TK_Terminator self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Compression_Read(TK_Compression self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Compression_Write(TK_Compression self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Compression_Execute(TK_Compression self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Compression_Interpret__SWIG_0(TK_Compression self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Compression_Interpret__SWIG_1(TK_Compression self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Compression_Interpret__SWIG_1(TK_Compression self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Compression_Reset(TK_Compression self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Compression_Match_Instance(TK_Compression self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Compression_Clone(TK_Compression self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Compression_NeedsContext(TK_Compression self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Open_Segment_Read(TK_Open_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Open_Segment_Write(TK_Open_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Open_Segment_Execute(TK_Open_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Open_Segment_Interpret__SWIG_0(TK_Open_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Open_Segment_Interpret__SWIG_1(TK_Open_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Open_Segment_Interpret__SWIG_2(TK_Open_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Open_Segment_Reset(TK_Open_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Open_Segment_Match_Instance(TK_Open_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Open_Segment_Clone(TK_Open_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Open_Segment_NeedsContext(TK_Open_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Close_Segment_Read(TK_Close_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Close_Segment_Write(TK_Close_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Close_Segment_Execute(TK_Close_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Close_Segment_Interpret__SWIG_0(TK_Close_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Close_Segment_Interpret__SWIG_1(TK_Close_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Close_Segment_Interpret__SWIG_2(TK_Close_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Close_Segment_Reset(TK_Close_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Close_Segment_Match_Instance(TK_Close_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Close_Segment_Clone(TK_Close_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Close_Segment_NeedsContext(TK_Close_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Reopen_Segment_Read(TK_Reopen_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Reopen_Segment_Write(TK_Reopen_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Reopen_Segment_Execute(TK_Reopen_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Reopen_Segment_Interpret__SWIG_0(TK_Reopen_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Reopen_Segment_Interpret__SWIG_1(TK_Reopen_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Reopen_Segment_Interpret__SWIG_2(TK_Reopen_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Reopen_Segment_Reset(TK_Reopen_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Reopen_Segment_Match_Instance(TK_Reopen_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Reopen_Segment_Clone(TK_Reopen_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Reopen_Segment_NeedsContext(TK_Reopen_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Referenced_Segment_Read(TK_Referenced_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Referenced_Segment_Write(TK_Referenced_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Referenced_Segment_Execute(TK_Referenced_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Referenced_Segment_Interpret__SWIG_0(TK_Referenced_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Referenced_Segment_Interpret__SWIG_1(TK_Referenced_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Referenced_Segment_Interpret__SWIG_2(TK_Referenced_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Referenced_Segment_Reset(TK_Referenced_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Referenced_Segment_Match_Instance(TK_Referenced_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Referenced_Segment_Clone(TK_Referenced_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Referenced_Segment_NeedsContext(TK_Referenced_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Instance_Read(TK_Instance self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Instance_Write(TK_Instance self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Instance_Execute(TK_Instance self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Instance_Interpret__SWIG_0(TK_Instance self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Instance_Interpret__SWIG_1(TK_Instance self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Instance_Interpret__SWIG_2(TK_Instance self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Instance_Reset(TK_Instance self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Instance_Match_Instance(TK_Instance self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Instance_Clone(TK_Instance self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Instance_NeedsContext(TK_Instance self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Delete_Object_Read(TK_Delete_Object self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Delete_Object_Write(TK_Delete_Object self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Delete_Object_Execute(TK_Delete_Object self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Delete_Object_Interpret__SWIG_0(TK_Delete_Object self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Delete_Object_Interpret__SWIG_1(TK_Delete_Object self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Delete_Object_Interpret__SWIG_2(TK_Delete_Object self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Delete_Object_Reset(TK_Delete_Object self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Delete_Object_Match_Instance(TK_Delete_Object self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Delete_Object_Clone(TK_Delete_Object self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Delete_Object_NeedsContext(TK_Delete_Object self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_LOD_Read(TK_LOD self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_LOD_Write(TK_LOD self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_LOD_Execute(TK_LOD self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_LOD_Interpret__SWIG_0(TK_LOD self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_LOD_Interpret__SWIG_1(TK_LOD self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_LOD_Interpret__SWIG_2(TK_LOD self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_LOD_Reset(TK_LOD self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_LOD_Match_Instance(TK_LOD self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_LOD_Clone(TK_LOD self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_LOD_NeedsContext(TK_LOD self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Geometry_Attributes_Read(TK_Geometry_Attributes self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Geometry_Attributes_Write(TK_Geometry_Attributes self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Geometry_Attributes_Execute(TK_Geometry_Attributes self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Geometry_Attributes_Interpret__SWIG_0(TK_Geometry_Attributes self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Geometry_Attributes_Interpret__SWIG_1(TK_Geometry_Attributes self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Geometry_Attributes_Interpret__SWIG_2(TK_Geometry_Attributes self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Geometry_Attributes_Reset(TK_Geometry_Attributes self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Geometry_Attributes_Match_Instance(TK_Geometry_Attributes self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Geometry_Attributes_Clone(TK_Geometry_Attributes self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Geometry_Attributes_NeedsContext(TK_Geometry_Attributes self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Renumber_Read(TK_Renumber self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Renumber_Write(TK_Renumber self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Renumber_Execute(TK_Renumber self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Renumber_Interpret__SWIG_0(TK_Renumber self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Renumber_Interpret__SWIG_1(TK_Renumber self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Renumber_Interpret__SWIG_2(TK_Renumber self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Renumber_Reset(TK_Renumber self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Renumber_Match_Instance(TK_Renumber self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Renumber_Clone(TK_Renumber self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Renumber_NeedsContext(TK_Renumber self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Tag_Read(TK_Tag self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Tag_Write(TK_Tag self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Tag_Execute(TK_Tag self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Tag_Interpret__SWIG_0(TK_Tag self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Tag_Interpret__SWIG_1(TK_Tag self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Tag_Interpret__SWIG_2(TK_Tag self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Tag_Reset(TK_Tag self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Tag_Match_Instance(TK_Tag self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Tag_Clone(TK_Tag self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Tag_NeedsContext(TK_Tag self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Dictionary_Read(TK_Dictionary self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Write(TK_Dictionary self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Execute(TK_Dictionary self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Interpret__SWIG_0(TK_Dictionary self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Interpret__SWIG_1(TK_Dictionary self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Interpret__SWIG_2(TK_Dictionary self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Dictionary_Reset(TK_Dictionary self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Dictionary_Match_Instance(TK_Dictionary self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Dictionary_Clone(TK_Dictionary self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Dictionary_NeedsContext(TK_Dictionary self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Dictionary_Locater_Read(TK_Dictionary_Locater self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Locater_Write(TK_Dictionary_Locater self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Locater_Execute(TK_Dictionary_Locater self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Locater_Interpret__SWIG_0(TK_Dictionary_Locater self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Locater_Interpret__SWIG_1(TK_Dictionary_Locater self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Dictionary_Locater_Interpret__SWIG_2(TK_Dictionary_Locater self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Dictionary_Locater_Reset(TK_Dictionary_Locater self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Dictionary_Locater_Match_Instance(TK_Dictionary_Locater self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Dictionary_Locater_Clone(TK_Dictionary_Locater self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Dictionary_Locater_NeedsContext(TK_Dictionary_Locater self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_Read(TK_Color self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Write(TK_Color self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Execute(TK_Color self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Interpret__SWIG_0(TK_Color self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_Interpret__SWIG_1(TK_Color self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_Interpret__SWIG_2(TK_Color self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_Reset(TK_Color self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_Match_Instance(TK_Color self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_Clone(TK_Color self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_NeedsContext(TK_Color self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_RGB_Read(TK_Color_RGB self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_RGB_Write(TK_Color_RGB self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_RGB_Execute(TK_Color_RGB self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_RGB_Interpret__SWIG_0(TK_Color_RGB self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_RGB_Interpret__SWIG_1(TK_Color_RGB self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_RGB_Interpret__SWIG_2(TK_Color_RGB self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_RGB_Reset(TK_Color_RGB self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_RGB_Match_Instance(TK_Color_RGB self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_RGB_Clone(TK_Color_RGB self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_RGB_NeedsContext(TK_Color_RGB self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_By_Value_Read(TK_Color_By_Value self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Value_Write(TK_Color_By_Value self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Value_Execute(TK_Color_By_Value self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Value_Interpret__SWIG_0(TK_Color_By_Value self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Value_Interpret__SWIG_1(TK_Color_By_Value self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Value_Interpret__SWIG_2(TK_Color_By_Value self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_By_Value_Reset(TK_Color_By_Value self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_By_Value_Match_Instance(TK_Color_By_Value self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_By_Value_Clone(TK_Color_By_Value self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_By_Value_NeedsContext(TK_Color_By_Value self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_By_Index_Read(TK_Color_By_Index self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Index_Write(TK_Color_By_Index self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Index_Execute(TK_Color_By_Index self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Index_Interpret__SWIG_0(TK_Color_By_Index self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Index_Interpret__SWIG_1(TK_Color_By_Index self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_Index_Interpret__SWIG_2(TK_Color_By_Index self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_By_Index_Reset(TK_Color_By_Index self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_By_Index_Match_Instance(TK_Color_By_Index self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_By_Index_Clone(TK_Color_By_Index self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_By_Index_NeedsContext(TK_Color_By_Index self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_By_FIndex_Read(TK_Color_By_FIndex self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_FIndex_Write(TK_Color_By_FIndex self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_FIndex_Execute(TK_Color_By_FIndex self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_By_FIndex_Interpret__SWIG_0(TK_Color_By_FIndex self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_FIndex_Interpret__SWIG_1(TK_Color_By_FIndex self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_By_FIndex_Interpret__SWIG_2(TK_Color_By_FIndex self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_By_FIndex_Reset(TK_Color_By_FIndex self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_By_FIndex_Match_Instance(TK_Color_By_FIndex self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_By_FIndex_Clone(TK_Color_By_FIndex self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_By_FIndex_NeedsContext(TK_Color_By_FIndex self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Color_Map_Read(TK_Color_Map self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Map_Write(TK_Color_Map self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Map_Execute(TK_Color_Map self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Color_Map_Interpret__SWIG_0(TK_Color_Map self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Color_Map_Interpret__SWIG_1(TK_Color_Map self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Color_Map_Interpret__SWIG_2(TK_Color_Map self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Color_Map_Reset(TK_Color_Map self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Color_Map_Match_Instance(TK_Color_Map self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Color_Map_Clone(TK_Color_Map self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Color_Map_NeedsContext(TK_Color_Map self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Callback_Read(TK_Callback self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Callback_Write(TK_Callback self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Callback_Execute(TK_Callback self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Callback_Interpret__SWIG_0(TK_Callback self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Callback_Interpret__SWIG_1(TK_Callback self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Callback_Interpret__SWIG_2(TK_Callback self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Callback_Reset(TK_Callback self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Callback_Match_Instance(TK_Callback self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Callback_Clone(TK_Callback self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Callback_NeedsContext(TK_Callback self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Rendering_Options_Read(TK_Rendering_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Rendering_Options_Write(TK_Rendering_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Rendering_Options_Execute(TK_Rendering_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Rendering_Options_Interpret__SWIG_0(TK_Rendering_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Rendering_Options_Interpret__SWIG_1(TK_Rendering_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Rendering_Options_Interpret__SWIG_2(TK_Rendering_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Rendering_Options_Reset(TK_Rendering_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Rendering_Options_Match_Instance(TK_Rendering_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Rendering_Options_Clone(TK_Rendering_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Rendering_Options_NeedsContext(TK_Rendering_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Heuristics_Read(TK_Heuristics self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Heuristics_Write(TK_Heuristics self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Heuristics_Execute(TK_Heuristics self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Heuristics_Interpret__SWIG_0(TK_Heuristics self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Heuristics_Interpret__SWIG_1(TK_Heuristics self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Heuristics_Interpret__SWIG_2(TK_Heuristics self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Heuristics_Reset(TK_Heuristics self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Heuristics_Match_Instance(TK_Heuristics self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Heuristics_Clone(TK_Heuristics self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Heuristics_NeedsContext(TK_Heuristics self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Visibility_Read(TK_Visibility self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Visibility_Write(TK_Visibility self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Visibility_Execute(TK_Visibility self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Visibility_Interpret__SWIG_0(TK_Visibility self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Visibility_Interpret__SWIG_1(TK_Visibility self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Visibility_Interpret__SWIG_2(TK_Visibility self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Visibility_Reset(TK_Visibility self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Visibility_Match_Instance(TK_Visibility self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Visibility_Clone(TK_Visibility self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Visibility_NeedsContext(TK_Visibility self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Selectability_Read(TK_Selectability self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Selectability_Write(TK_Selectability self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Selectability_Execute(TK_Selectability self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Selectability_Interpret__SWIG_0(TK_Selectability self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Selectability_Interpret__SWIG_1(TK_Selectability self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Selectability_Interpret__SWIG_2(TK_Selectability self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Selectability_Reset(TK_Selectability self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Selectability_Match_Instance(TK_Selectability self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Selectability_Clone(TK_Selectability self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Selectability_NeedsContext(TK_Selectability self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Matrix_Read(TK_Matrix self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Matrix_Write(TK_Matrix self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Matrix_Execute(TK_Matrix self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Matrix_Interpret__SWIG_0(TK_Matrix self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Matrix_Interpret__SWIG_1(TK_Matrix self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Matrix_Interpret__SWIG_2(TK_Matrix self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Matrix_Reset(TK_Matrix self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Matrix_Match_Instance(TK_Matrix self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Matrix_Clone(TK_Matrix self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Matrix_NeedsContext(TK_Matrix self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Enumerated_Read(TK_Enumerated self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Enumerated_Write(TK_Enumerated self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Enumerated_Execute(TK_Enumerated self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Enumerated_Interpret__SWIG_0(TK_Enumerated self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Enumerated_Interpret__SWIG_1(TK_Enumerated self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Enumerated_Interpret__SWIG_2(TK_Enumerated self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Enumerated_Reset(TK_Enumerated self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Enumerated_Match_Instance(TK_Enumerated self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Enumerated_Clone(TK_Enumerated self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Enumerated_NeedsContext(TK_Enumerated self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Size_Read(TK_Size self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Size_Write(TK_Size self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Size_Execute(TK_Size self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Size_Interpret__SWIG_0(TK_Size self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Size_Interpret__SWIG_1(TK_Size self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Size_Interpret__SWIG_2(TK_Size self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Size_Reset(TK_Size self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Size_Match_Instance(TK_Size self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Size_Clone(TK_Size self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Size_NeedsContext(TK_Size self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Linear_Pattern_Read(TK_Linear_Pattern self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Linear_Pattern_Write(TK_Linear_Pattern self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Linear_Pattern_Execute(TK_Linear_Pattern self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Linear_Pattern_Interpret__SWIG_0(TK_Linear_Pattern self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Linear_Pattern_Interpret__SWIG_1(TK_Linear_Pattern self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Linear_Pattern_Interpret__SWIG_2(TK_Linear_Pattern self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Linear_Pattern_Reset(TK_Linear_Pattern self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Linear_Pattern_Match_Instance(TK_Linear_Pattern self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Linear_Pattern_Clone(TK_Linear_Pattern self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Linear_Pattern_NeedsContext(TK_Linear_Pattern self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Named_Read(TK_Named self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Named_Write(TK_Named self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Named_Execute(TK_Named self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Named_Interpret__SWIG_0(TK_Named self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Named_Interpret__SWIG_1(TK_Named self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Named_Interpret__SWIG_2(TK_Named self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Named_Reset(TK_Named self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Named_Match_Instance(TK_Named self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Named_Clone(TK_Named self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Named_NeedsContext(TK_Named self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Streaming_Read(TK_Streaming self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Streaming_Write(TK_Streaming self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Streaming_Execute(TK_Streaming self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Streaming_Interpret__SWIG_0(TK_Streaming self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Streaming_Interpret__SWIG_1(TK_Streaming self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Streaming_Interpret__SWIG_2(TK_Streaming self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Streaming_Reset(TK_Streaming self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Streaming_Match_Instance(TK_Streaming self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Streaming_Clone(TK_Streaming self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Streaming_NeedsContext(TK_Streaming self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Conditions_Read(TK_Conditions self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Conditions_Write(TK_Conditions self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Conditions_Execute(TK_Conditions self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Conditions_Interpret__SWIG_0(TK_Conditions self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Conditions_Interpret__SWIG_1(TK_Conditions self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Conditions_Interpret__SWIG_2(TK_Conditions self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Conditions_Reset(TK_Conditions self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Conditions_Match_Instance(TK_Conditions self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Conditions_Clone(TK_Conditions self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Conditions_NeedsContext(TK_Conditions self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_User_Options_Read(TK_User_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Options_Write(TK_User_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Options_Execute(TK_User_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Options_Interpret__SWIG_0(TK_User_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_User_Options_Interpret__SWIG_1(TK_User_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_User_Options_Interpret__SWIG_2(TK_User_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_User_Options_Reset(TK_User_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_User_Options_Match_Instance(TK_User_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_User_Options_Clone(TK_User_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_User_Options_NeedsContext(TK_User_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Unicode_Options_Read(TK_Unicode_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unicode_Options_Write(TK_Unicode_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unicode_Options_Execute(TK_Unicode_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Unicode_Options_Interpret__SWIG_0(TK_Unicode_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Unicode_Options_Interpret__SWIG_1(TK_Unicode_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Unicode_Options_Interpret__SWIG_2(TK_Unicode_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Unicode_Options_Reset(TK_Unicode_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Unicode_Options_Match_Instance(TK_Unicode_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Unicode_Options_Clone(TK_Unicode_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Unicode_Options_NeedsContext(TK_Unicode_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_User_Index_Read(TK_User_Index self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Index_Write(TK_User_Index self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Index_Execute(TK_User_Index self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Index_Interpret__SWIG_0(TK_User_Index self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_User_Index_Interpret__SWIG_1(TK_User_Index self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_User_Index_Interpret__SWIG_2(TK_User_Index self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_User_Index_Reset(TK_User_Index self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_User_Index_Match_Instance(TK_User_Index self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_User_Index_Clone(TK_User_Index self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_User_Index_NeedsContext(TK_User_Index self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_User_Value_Read(TK_User_Value self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Value_Write(TK_User_Value self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Value_Execute(TK_User_Value self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Value_Interpret__SWIG_0(TK_User_Value self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_User_Value_Interpret__SWIG_1(TK_User_Value self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_User_Value_Interpret__SWIG_2(TK_User_Value self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_User_Value_Reset(TK_User_Value self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_User_Value_Match_Instance(TK_User_Value self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_User_Value_Clone(TK_User_Value self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_User_Value_NeedsContext(TK_User_Value self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Camera_Read(TK_Camera self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Camera_Write(TK_Camera self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Camera_Execute(TK_Camera self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Camera_Interpret__SWIG_0(TK_Camera self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Camera_Interpret__SWIG_1(TK_Camera self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Camera_Interpret__SWIG_2(TK_Camera self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Camera_Reset(TK_Camera self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Camera_Match_Instance(TK_Camera self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Camera_Clone(TK_Camera self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Camera_NeedsContext(TK_Camera self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Window_Read(TK_Window self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Window_Write(TK_Window self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Window_Execute(TK_Window self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Window_Interpret__SWIG_0(TK_Window self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Window_Interpret__SWIG_1(TK_Window self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Window_Interpret__SWIG_2(TK_Window self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Window_Reset(TK_Window self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Window_Match_Instance(TK_Window self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Window_Clone(TK_Window self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Window_NeedsContext(TK_Window self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Text_Font_Read(TK_Text_Font self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Font_Write(TK_Text_Font self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Font_Execute(TK_Text_Font self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Font_Interpret__SWIG_0(TK_Text_Font self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Text_Font_Interpret__SWIG_1(TK_Text_Font self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Text_Font_Interpret__SWIG_2(TK_Text_Font self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Text_Font_Reset(TK_Text_Font self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Text_Font_Match_Instance(TK_Text_Font self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Text_Font_Clone(TK_Text_Font self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Text_Font_NeedsContext(TK_Text_Font self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Bounding_Read(TK_Bounding self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Bounding_Write(TK_Bounding self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Bounding_Execute(TK_Bounding self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Bounding_Interpret__SWIG_0(TK_Bounding self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Bounding_Interpret__SWIG_1(TK_Bounding self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Bounding_Interpret__SWIG_2(TK_Bounding self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Bounding_Reset(TK_Bounding self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Bounding_Match_Instance(TK_Bounding self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Bounding_Clone(TK_Bounding self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Bounding_NeedsContext(TK_Bounding self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Point_Read(TK_Point self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Point_Write(TK_Point self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Point_Execute(TK_Point self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Point_Interpret__SWIG_0(TK_Point self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Point_Interpret__SWIG_1(TK_Point self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Point_Interpret__SWIG_2(TK_Point self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Point_Reset(TK_Point self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Point_Match_Instance(TK_Point self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Point_Clone(TK_Point self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Point_NeedsContext(TK_Point self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Line_Read(TK_Line self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Write(TK_Line self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Execute(TK_Line self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Interpret__SWIG_0(TK_Line self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Line_Interpret__SWIG_1(TK_Line self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Line_Interpret__SWIG_2(TK_Line self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Line_Reset(TK_Line self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Line_Match_Instance(TK_Line self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Line_Clone(TK_Line self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Line_NeedsContext(TK_Line self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Polypoint_Read(TK_Polypoint self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polypoint_Write(TK_Polypoint self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polypoint_Execute(TK_Polypoint self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polypoint_Interpret__SWIG_0(TK_Polypoint self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Polypoint_Interpret__SWIG_1(TK_Polypoint self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Polypoint_Interpret__SWIG_2(TK_Polypoint self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Polypoint_Reset(TK_Polypoint self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Polypoint_Match_Instance(TK_Polypoint self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Polypoint_Clone(TK_Polypoint self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Polypoint_NeedsContext(TK_Polypoint self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_NURBS_Curve_Read(TK_NURBS_Curve self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Curve_Write(TK_NURBS_Curve self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Curve_Execute(TK_NURBS_Curve self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Curve_Interpret__SWIG_0(TK_NURBS_Curve self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Curve_Interpret__SWIG_1(TK_NURBS_Curve self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Curve_Interpret__SWIG_2(TK_NURBS_Curve self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_NURBS_Curve_Reset(TK_NURBS_Curve self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_NURBS_Curve_Match_Instance(TK_NURBS_Curve self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_NURBS_Curve_Clone(TK_NURBS_Curve self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_NURBS_Curve_NeedsContext(TK_NURBS_Curve self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_NURBS_Surface_Read(TK_NURBS_Surface self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Surface_Write(TK_NURBS_Surface self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Surface_Execute(TK_NURBS_Surface self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Surface_Interpret__SWIG_0(TK_NURBS_Surface self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Surface_Interpret__SWIG_1(TK_NURBS_Surface self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_NURBS_Surface_Interpret__SWIG_2(TK_NURBS_Surface self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_NURBS_Surface_Reset(TK_NURBS_Surface self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_NURBS_Surface_Match_Instance(TK_NURBS_Surface self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_NURBS_Surface_Clone(TK_NURBS_Surface self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_NURBS_Surface_NeedsContext(TK_NURBS_Surface self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Area_Light_Read(TK_Area_Light self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Area_Light_Write(TK_Area_Light self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Area_Light_Execute(TK_Area_Light self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Area_Light_Interpret__SWIG_0(TK_Area_Light self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Area_Light_Interpret__SWIG_1(TK_Area_Light self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Area_Light_Interpret__SWIG_2(TK_Area_Light self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Area_Light_Reset(TK_Area_Light self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Area_Light_Match_Instance(TK_Area_Light self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Area_Light_Clone(TK_Area_Light self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Area_Light_NeedsContext(TK_Area_Light self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Spot_Light_Read(TK_Spot_Light self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Spot_Light_Write(TK_Spot_Light self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Spot_Light_Execute(TK_Spot_Light self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Spot_Light_Interpret__SWIG_0(TK_Spot_Light self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Spot_Light_Interpret__SWIG_1(TK_Spot_Light self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Spot_Light_Interpret__SWIG_2(TK_Spot_Light self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Spot_Light_Reset(TK_Spot_Light self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Spot_Light_Match_Instance(TK_Spot_Light self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Spot_Light_Clone(TK_Spot_Light self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Spot_Light_NeedsContext(TK_Spot_Light self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Cutting_Plane_Read(TK_Cutting_Plane self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cutting_Plane_Write(TK_Cutting_Plane self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cutting_Plane_Execute(TK_Cutting_Plane self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cutting_Plane_Interpret__SWIG_0(TK_Cutting_Plane self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Cutting_Plane_Interpret__SWIG_1(TK_Cutting_Plane self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Cutting_Plane_Interpret__SWIG_2(TK_Cutting_Plane self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Cutting_Plane_Reset(TK_Cutting_Plane self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Cutting_Plane_Match_Instance(TK_Cutting_Plane self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Cutting_Plane_Clone(TK_Cutting_Plane self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Cutting_Plane_NeedsContext(TK_Cutting_Plane self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Circle_Read(TK_Circle self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Circle_Write(TK_Circle self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Circle_Execute(TK_Circle self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Circle_Interpret__SWIG_0(TK_Circle self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Circle_Interpret__SWIG_1(TK_Circle self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Circle_Interpret__SWIG_2(TK_Circle self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Circle_Reset(TK_Circle self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Circle_Match_Instance(TK_Circle self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Circle_Clone(TK_Circle self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Circle_NeedsContext(TK_Circle self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Ellipse_Read(TK_Ellipse self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Ellipse_Write(TK_Ellipse self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Ellipse_Execute(TK_Ellipse self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Ellipse_Interpret__SWIG_0(TK_Ellipse self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Ellipse_Interpret__SWIG_1(TK_Ellipse self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Ellipse_Interpret__SWIG_2(TK_Ellipse self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Ellipse_Reset(TK_Ellipse self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Ellipse_Match_Instance(TK_Ellipse self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Ellipse_Clone(TK_Ellipse self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Ellipse_NeedsContext(TK_Ellipse self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Sphere_Read(TK_Sphere self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Sphere_Write(TK_Sphere self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Sphere_Execute(TK_Sphere self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Sphere_Interpret__SWIG_0(TK_Sphere self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Sphere_Interpret__SWIG_1(TK_Sphere self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Sphere_Interpret__SWIG_2(TK_Sphere self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Sphere_Reset(TK_Sphere self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Sphere_Match_Instance(TK_Sphere self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Sphere_Clone(TK_Sphere self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Sphere_NeedsContext(TK_Sphere self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Cylinder_Read(TK_Cylinder self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cylinder_Write(TK_Cylinder self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cylinder_Execute(TK_Cylinder self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Cylinder_Interpret__SWIG_0(TK_Cylinder self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Cylinder_Interpret__SWIG_1(TK_Cylinder self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Cylinder_Interpret__SWIG_2(TK_Cylinder self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Cylinder_Reset(TK_Cylinder self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Cylinder_Match_Instance(TK_Cylinder self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Cylinder_Clone(TK_Cylinder self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Cylinder_NeedsContext(TK_Cylinder self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_PolyCylinder_Read(TK_PolyCylinder self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_Write(TK_PolyCylinder self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_Execute(TK_PolyCylinder self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_Interpret__SWIG_0(TK_PolyCylinder self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_Interpret__SWIG_1(TK_PolyCylinder self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_Interpret__SWIG_2(TK_PolyCylinder self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_PolyCylinder_Reset(TK_PolyCylinder self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_PolyCylinder_Match_Instance(TK_PolyCylinder self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_PolyCylinder_Clone(TK_PolyCylinder self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_PolyCylinder_NeedsContext(TK_PolyCylinder self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_PolyCylinder_EnumerateEdges(TK_PolyCylinder self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_LabelFakeEdges(TK_PolyCylinder self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_TK_PolyCylinder_AllowInstancing(TK_PolyCylinder self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_PolyCylinder_read_trivial_points(TK_PolyCylinder self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_trivial_points(TK_PolyCylinder self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_read_collection(TK_PolyCylinder self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection__SWIG_0(TK_PolyCylinder self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection__SWIG_1(TK_PolyCylinder self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection__SWIG_2(TK_PolyCylinder self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_read_trivial_points_ascii(TK_PolyCylinder self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_trivial_points_ascii(TK_PolyCylinder self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_read_collection_ascii(TK_PolyCylinder self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_vertex_marker_sizes_ascii(TK_PolyCylinder self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection_ascii__SWIG_0(TK_PolyCylinder self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection_ascii__SWIG_1(TK_PolyCylinder self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_write_collection_ascii__SWIG_2(TK_PolyCylinder self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_mangle_points(TK_PolyCylinder self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_mangle_point_attributes(TK_PolyCylinder self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_PolyCylinder_mangle_face_attributes(TK_PolyCylinder self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_TK_Grid_Read(TK_Grid self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Grid_Write(TK_Grid self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Grid_Execute(TK_Grid self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Grid_Interpret__SWIG_0(TK_Grid self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Grid_Interpret__SWIG_1(TK_Grid self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Grid_Interpret__SWIG_2(TK_Grid self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Grid_Reset(TK_Grid self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Grid_Match_Instance(TK_Grid self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Grid_Clone(TK_Grid self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Grid_NeedsContext(TK_Grid self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Text_Read(TK_Text self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Write(TK_Text self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Execute(TK_Text self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Text_Interpret__SWIG_0(TK_Text self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Text_Interpret__SWIG_1(TK_Text self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Text_Interpret__SWIG_2(TK_Text self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Text_Reset(TK_Text self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Text_Match_Instance(TK_Text self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Text_Clone(TK_Text self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Text_NeedsContext(TK_Text self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Font_Read(TK_Font self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Font_Write(TK_Font self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Font_Execute(TK_Font self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Font_Interpret__SWIG_0(TK_Font self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Font_Interpret__SWIG_1(TK_Font self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Font_Interpret__SWIG_2(TK_Font self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Font_Reset(TK_Font self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Font_Match_Instance(TK_Font self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Font_Clone(TK_Font self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Font_NeedsContext(TK_Font self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Image_Read(TK_Image self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Image_Write(TK_Image self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Image_Execute(TK_Image self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Image_Interpret__SWIG_0(TK_Image self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Image_Interpret__SWIG_1(TK_Image self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Image_Interpret__SWIG_2(TK_Image self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Image_Reset(TK_Image self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Image_Match_Instance(TK_Image self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Image_Clone(TK_Image self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Image_NeedsContext(TK_Image self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Texture_Read(TK_Texture self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Texture_Write(TK_Texture self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Texture_Execute(TK_Texture self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Texture_Interpret__SWIG_0(TK_Texture self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Texture_Interpret__SWIG_1(TK_Texture self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Texture_Interpret__SWIG_2(TK_Texture self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Texture_Reset(TK_Texture self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Texture_Match_Instance(TK_Texture self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Texture_Clone(TK_Texture self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Texture_NeedsContext(TK_Texture self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Thumbnail_Read(TK_Thumbnail self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Thumbnail_Write(TK_Thumbnail self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Thumbnail_Execute(TK_Thumbnail self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Thumbnail_Interpret__SWIG_0(TK_Thumbnail self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Thumbnail_Interpret__SWIG_1(TK_Thumbnail self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Thumbnail_Interpret__SWIG_1(TK_Thumbnail self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Thumbnail_Reset(TK_Thumbnail self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Thumbnail_Match_Instance(TK_Thumbnail self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Thumbnail_Clone(TK_Thumbnail self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Thumbnail_NeedsContext(TK_Thumbnail self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Glyph_Definition_Read(TK_Glyph_Definition self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Glyph_Definition_Write(TK_Glyph_Definition self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Glyph_Definition_Execute(TK_Glyph_Definition self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Glyph_Definition_Interpret__SWIG_0(TK_Glyph_Definition self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Glyph_Definition_Interpret__SWIG_1(TK_Glyph_Definition self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Glyph_Definition_Interpret__SWIG_2(TK_Glyph_Definition self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Glyph_Definition_Reset(TK_Glyph_Definition self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Glyph_Definition_Match_Instance(TK_Glyph_Definition self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Glyph_Definition_Clone(TK_Glyph_Definition self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Glyph_Definition_NeedsContext(TK_Glyph_Definition self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Line_Style_Read(TK_Line_Style self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Style_Write(TK_Line_Style self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Style_Execute(TK_Line_Style self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Line_Style_Interpret__SWIG_0(TK_Line_Style self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Line_Style_Interpret__SWIG_1(TK_Line_Style self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Line_Style_Interpret__SWIG_2(TK_Line_Style self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Line_Style_Reset(TK_Line_Style self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Line_Style_Match_Instance(TK_Line_Style self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Line_Style_Clone(TK_Line_Style self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Line_Style_NeedsContext(TK_Line_Style self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Clip_Rectangle_Read(TK_Clip_Rectangle self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Rectangle_Write(TK_Clip_Rectangle self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Rectangle_Execute(TK_Clip_Rectangle self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Rectangle_Interpret__SWIG_0(TK_Clip_Rectangle self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Clip_Rectangle_Interpret__SWIG_1(TK_Clip_Rectangle self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Clip_Rectangle_Interpret__SWIG_2(TK_Clip_Rectangle self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Clip_Rectangle_Reset(TK_Clip_Rectangle self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Clip_Rectangle_Match_Instance(TK_Clip_Rectangle self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Clip_Rectangle_Clone(TK_Clip_Rectangle self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Clip_Rectangle_NeedsContext(TK_Clip_Rectangle self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Clip_Region_Read(TK_Clip_Region self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Region_Write(TK_Clip_Region self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Region_Execute(TK_Clip_Region self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Clip_Region_Interpret__SWIG_0(TK_Clip_Region self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Clip_Region_Interpret__SWIG_1(TK_Clip_Region self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Clip_Region_Interpret__SWIG_2(TK_Clip_Region self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Clip_Region_Reset(TK_Clip_Region self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Clip_Region_Match_Instance(TK_Clip_Region self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Clip_Region_Clone(TK_Clip_Region self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Clip_Region_NeedsContext(TK_Clip_Region self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_User_Data_Read(TK_User_Data self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Data_Write(TK_User_Data self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Data_Execute(TK_User_Data self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_User_Data_Interpret__SWIG_0(TK_User_Data self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_User_Data_Interpret__SWIG_1(TK_User_Data self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_User_Data_Interpret__SWIG_2(TK_User_Data self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_User_Data_Reset(TK_User_Data self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_User_Data_Match_Instance(TK_User_Data self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_User_Data_Clone(TK_User_Data self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_User_Data_NeedsContext(TK_User_Data self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_XML_Read(TK_XML self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_XML_Write(TK_XML self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_XML_Execute(TK_XML self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_XML_Interpret__SWIG_0(TK_XML self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_XML_Interpret__SWIG_1(TK_XML self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_XML_Interpret__SWIG_2(TK_XML self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_XML_Reset(TK_XML self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_XML_Match_Instance(TK_XML self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_XML_Clone(TK_XML self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_XML_NeedsContext(TK_XML self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_URL_Read(TK_URL self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_URL_Write(TK_URL self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_URL_Execute(TK_URL self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_URL_Interpret__SWIG_0(TK_URL self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_URL_Interpret__SWIG_1(TK_URL self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_URL_Interpret__SWIG_2(TK_URL self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_URL_Reset(TK_URL self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_URL_Match_Instance(TK_URL self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_URL_Clone(TK_URL self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_URL_NeedsContext(TK_URL self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_External_Reference_Read(TK_External_Reference self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_External_Reference_Write(TK_External_Reference self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_External_Reference_Execute(TK_External_Reference self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_External_Reference_Interpret__SWIG_0(TK_External_Reference self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_External_Reference_Interpret__SWIG_1(TK_External_Reference self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_External_Reference_Interpret__SWIG_2(TK_External_Reference self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_External_Reference_Reset(TK_External_Reference self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_External_Reference_Match_Instance(TK_External_Reference self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_External_Reference_Clone(TK_External_Reference self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_External_Reference_NeedsContext(TK_External_Reference self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Polyhedron_Read(TK_Polyhedron self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_Write(TK_Polyhedron self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_Execute(TK_Polyhedron self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_Interpret__SWIG_0(TK_Polyhedron self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_Interpret__SWIG_1(TK_Polyhedron self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_Interpret__SWIG_2(TK_Polyhedron self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Polyhedron_Reset(TK_Polyhedron self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Polyhedron_Match_Instance(TK_Polyhedron self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Polyhedron_Clone(TK_Polyhedron self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Polyhedron_NeedsContext(TK_Polyhedron self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Polyhedron_EnumerateEdges(TK_Polyhedron self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_LabelFakeEdges(TK_Polyhedron self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_TK_Polyhedron_AllowInstancing(TK_Polyhedron self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Polyhedron_read_trivial_points(TK_Polyhedron self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_trivial_points(TK_Polyhedron self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_read_collection(TK_Polyhedron self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection__SWIG_0(TK_Polyhedron self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection__SWIG_1(TK_Polyhedron self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection__SWIG_2(TK_Polyhedron self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_read_trivial_points_ascii(TK_Polyhedron self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_trivial_points_ascii(TK_Polyhedron self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_read_collection_ascii(TK_Polyhedron self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_vertex_marker_sizes_ascii(TK_Polyhedron self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection_ascii__SWIG_0(TK_Polyhedron self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection_ascii__SWIG_1(TK_Polyhedron self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_write_collection_ascii__SWIG_2(TK_Polyhedron self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_mangle_points(TK_Polyhedron self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_mangle_point_attributes(TK_Polyhedron self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Polyhedron_mangle_face_attributes(TK_Polyhedron self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Read(TK_Mesh self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Write(TK_Mesh self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Execute(TK_Mesh self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Interpret__SWIG_0(TK_Mesh self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Interpret__SWIG_1(TK_Mesh self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_Interpret__SWIG_2(TK_Mesh self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Mesh_Reset(TK_Mesh self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Mesh_Match_Instance(TK_Mesh self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Mesh_Clone(TK_Mesh self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Mesh_NeedsContext(TK_Mesh self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Mesh_EnumerateEdges(TK_Mesh self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_TK_Mesh_LabelFakeEdges(TK_Mesh self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_TK_Mesh_AllowInstancing(TK_Mesh self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Mesh_read_trivial_points(TK_Mesh self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_trivial_points(TK_Mesh self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_read_collection(TK_Mesh self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection__SWIG_0(TK_Mesh self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection__SWIG_1(TK_Mesh self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection__SWIG_2(TK_Mesh self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_read_trivial_points_ascii(TK_Mesh self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_trivial_points_ascii(TK_Mesh self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_read_collection_ascii(TK_Mesh self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_vertex_marker_sizes_ascii(TK_Mesh self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection_ascii__SWIG_0(TK_Mesh self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection_ascii__SWIG_1(TK_Mesh self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_write_collection_ascii__SWIG_2(TK_Mesh self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Mesh_mangle_points(TK_Mesh self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_mangle_point_attributes(TK_Mesh self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Mesh_mangle_face_attributes(TK_Mesh self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_TK_Shell_Read(TK_Shell self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_Write(TK_Shell self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_Execute(TK_Shell self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_Interpret__SWIG_0(TK_Shell self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_Shell_Interpret__SWIG_1(TK_Shell self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_Shell_Interpret__SWIG_2(TK_Shell self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_Shell_Reset(TK_Shell self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_Shell_Match_Instance(TK_Shell self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_Shell_Clone(TK_Shell self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_Shell_NeedsContext(TK_Shell self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Shell_EnumerateEdges(TK_Shell self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_TK_Shell_LabelFakeEdges(TK_Shell self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_TK_Shell_AllowInstancing(TK_Shell self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_TK_Shell_read_trivial_points(TK_Shell self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_trivial_points(TK_Shell self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_read_collection(TK_Shell self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection__SWIG_0(TK_Shell self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection__SWIG_1(TK_Shell self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection__SWIG_2(TK_Shell self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_read_trivial_points_ascii(TK_Shell self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_trivial_points_ascii(TK_Shell self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_read_collection_ascii(TK_Shell self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_vertex_marker_sizes_ascii(TK_Shell self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection_ascii__SWIG_0(TK_Shell self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection_ascii__SWIG_1(TK_Shell self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_TK_Shell_write_collection_ascii__SWIG_2(TK_Shell self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_Shell_mangle_points(TK_Shell self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Shell_mangle_point_attributes(TK_Shell self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_TK_Shell_mangle_face_attributes(TK_Shell self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Read(TK_PolyPolypoint self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Write(TK_PolyPolypoint self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Execute(TK_PolyPolypoint self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Interpret__SWIG_0(TK_PolyPolypoint self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Interpret__SWIG_1(TK_PolyPolypoint self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_TK_PolyPolypoint_Interpret__SWIG_2(TK_PolyPolypoint self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_TK_PolyPolypoint_Reset(TK_PolyPolypoint self) {
    self.Reset();
  }
  public static boolean SwigDirector_TK_PolyPolypoint_Match_Instance(TK_PolyPolypoint self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_TK_PolyPolypoint_Clone(TK_PolyPolypoint self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_TK_PolyPolypoint_NeedsContext(TK_PolyPolypoint self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Open_Segment_Read(HTK_Open_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Open_Segment_Write(HTK_Open_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Open_Segment_Execute(HTK_Open_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Open_Segment_Interpret__SWIG_0(HTK_Open_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Open_Segment_Interpret__SWIG_1(HTK_Open_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Open_Segment_Interpret__SWIG_2(HTK_Open_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Open_Segment_Reset(HTK_Open_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Open_Segment_Match_Instance(HTK_Open_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Open_Segment_Clone(HTK_Open_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Open_Segment_NeedsContext(HTK_Open_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Close_Segment_Read(HTK_Close_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Close_Segment_Write(HTK_Close_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Close_Segment_Execute(HTK_Close_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Close_Segment_Interpret__SWIG_0(HTK_Close_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Close_Segment_Interpret__SWIG_1(HTK_Close_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Close_Segment_Interpret__SWIG_2(HTK_Close_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Close_Segment_Reset(HTK_Close_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Close_Segment_Match_Instance(HTK_Close_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Close_Segment_Clone(HTK_Close_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Close_Segment_NeedsContext(HTK_Close_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Reopen_Segment_Read(HTK_Reopen_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Reopen_Segment_Write(HTK_Reopen_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Reopen_Segment_Execute(HTK_Reopen_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Reopen_Segment_Interpret__SWIG_0(HTK_Reopen_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Reopen_Segment_Interpret__SWIG_1(HTK_Reopen_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Reopen_Segment_Interpret__SWIG_2(HTK_Reopen_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Reopen_Segment_Reset(HTK_Reopen_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Reopen_Segment_Match_Instance(HTK_Reopen_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Reopen_Segment_Clone(HTK_Reopen_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Reopen_Segment_NeedsContext(HTK_Reopen_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Referenced_Segment_Read(HTK_Referenced_Segment self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Referenced_Segment_Write(HTK_Referenced_Segment self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Referenced_Segment_Execute(HTK_Referenced_Segment self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Referenced_Segment_Interpret__SWIG_0(HTK_Referenced_Segment self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Referenced_Segment_Interpret__SWIG_1(HTK_Referenced_Segment self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Referenced_Segment_Interpret__SWIG_2(HTK_Referenced_Segment self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Referenced_Segment_Reset(HTK_Referenced_Segment self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Referenced_Segment_Match_Instance(HTK_Referenced_Segment self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Referenced_Segment_Clone(HTK_Referenced_Segment self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Referenced_Segment_NeedsContext(HTK_Referenced_Segment self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Instance_Read(HTK_Instance self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Instance_Write(HTK_Instance self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Instance_Execute(HTK_Instance self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Instance_Interpret__SWIG_0(HTK_Instance self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Instance_Interpret__SWIG_1(HTK_Instance self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Instance_Interpret__SWIG_1(HTK_Instance self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Instance_Reset(HTK_Instance self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Instance_Match_Instance(HTK_Instance self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Instance_Clone(HTK_Instance self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Instance_NeedsContext(HTK_Instance self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Delete_Object_Read(HTK_Delete_Object self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Delete_Object_Write(HTK_Delete_Object self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Delete_Object_Execute(HTK_Delete_Object self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Delete_Object_Interpret__SWIG_0(HTK_Delete_Object self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Delete_Object_Interpret__SWIG_1(HTK_Delete_Object self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Delete_Object_Interpret__SWIG_2(HTK_Delete_Object self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Delete_Object_Reset(HTK_Delete_Object self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Delete_Object_Match_Instance(HTK_Delete_Object self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Delete_Object_Clone(HTK_Delete_Object self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Delete_Object_NeedsContext(HTK_Delete_Object self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_LOD_Read(HTK_LOD self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_LOD_Write(HTK_LOD self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_LOD_Execute(HTK_LOD self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_LOD_Interpret__SWIG_0(HTK_LOD self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_LOD_Interpret__SWIG_1(HTK_LOD self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_LOD_Interpret__SWIG_2(HTK_LOD self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_LOD_Reset(HTK_LOD self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_LOD_Match_Instance(HTK_LOD self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_LOD_Clone(HTK_LOD self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_LOD_NeedsContext(HTK_LOD self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Renumber_Read(HTK_Renumber self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Renumber_Write(HTK_Renumber self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Renumber_Execute(HTK_Renumber self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Renumber_Interpret__SWIG_0(HTK_Renumber self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Renumber_Interpret__SWIG_1(HTK_Renumber self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Renumber_Interpret__SWIG_2(HTK_Renumber self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Renumber_Reset(HTK_Renumber self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Renumber_Match_Instance(HTK_Renumber self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Renumber_Clone(HTK_Renumber self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Renumber_NeedsContext(HTK_Renumber self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_Read(HTK_Color self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Write(HTK_Color self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Execute(HTK_Color self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Interpret__SWIG_0(HTK_Color self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Interpret__SWIG_1(HTK_Color self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Interpret__SWIG_2(HTK_Color self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_Reset(HTK_Color self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_Match_Instance(HTK_Color self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_Clone(HTK_Color self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_NeedsContext(HTK_Color self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_RGB_Read(HTK_Color_RGB self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_RGB_Write(HTK_Color_RGB self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_RGB_Execute(HTK_Color_RGB self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_RGB_Interpret__SWIG_0(HTK_Color_RGB self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_RGB_Interpret__SWIG_1(HTK_Color_RGB self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_RGB_Interpret__SWIG_2(HTK_Color_RGB self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_RGB_Reset(HTK_Color_RGB self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_RGB_Match_Instance(HTK_Color_RGB self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_RGB_Clone(HTK_Color_RGB self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_RGB_NeedsContext(HTK_Color_RGB self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_By_Value_Read(HTK_Color_By_Value self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Value_Write(HTK_Color_By_Value self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Value_Execute(HTK_Color_By_Value self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Value_Interpret__SWIG_0(HTK_Color_By_Value self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Value_Interpret__SWIG_1(HTK_Color_By_Value self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Value_Interpret__SWIG_2(HTK_Color_By_Value self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_By_Value_Reset(HTK_Color_By_Value self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_By_Value_Match_Instance(HTK_Color_By_Value self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_By_Value_Clone(HTK_Color_By_Value self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_By_Value_NeedsContext(HTK_Color_By_Value self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_By_Index_Read(HTK_Color_By_Index self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Index_Write(HTK_Color_By_Index self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Index_Execute(HTK_Color_By_Index self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Index_Interpret__SWIG_0(HTK_Color_By_Index self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Index_Interpret__SWIG_1(HTK_Color_By_Index self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_Index_Interpret__SWIG_2(HTK_Color_By_Index self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_By_Index_Reset(HTK_Color_By_Index self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_By_Index_Match_Instance(HTK_Color_By_Index self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_By_Index_Clone(HTK_Color_By_Index self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_By_Index_NeedsContext(HTK_Color_By_Index self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Read(HTK_Color_By_FIndex self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Write(HTK_Color_By_FIndex self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Execute(HTK_Color_By_FIndex self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Interpret__SWIG_0(HTK_Color_By_FIndex self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Interpret__SWIG_1(HTK_Color_By_FIndex self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Interpret__SWIG_2(HTK_Color_By_FIndex self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_By_FIndex_Reset(HTK_Color_By_FIndex self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_By_FIndex_Match_Instance(HTK_Color_By_FIndex self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_By_FIndex_Clone(HTK_Color_By_FIndex self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_By_FIndex_NeedsContext(HTK_Color_By_FIndex self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_Composite_Read(HTK_Color_Composite self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Composite_Write(HTK_Color_Composite self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Composite_Execute(HTK_Color_Composite self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Composite_Interpret__SWIG_0(HTK_Color_Composite self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Composite_Interpret__SWIG_1(HTK_Color_Composite self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Composite_Interpret__SWIG_2(HTK_Color_Composite self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_Composite_Reset(HTK_Color_Composite self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_Composite_Match_Instance(HTK_Color_Composite self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_Composite_Clone(HTK_Color_Composite self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_Composite_NeedsContext(HTK_Color_Composite self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Color_Map_Read(HTK_Color_Map self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Map_Write(HTK_Color_Map self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Map_Execute(HTK_Color_Map self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Color_Map_Interpret__SWIG_0(HTK_Color_Map self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Map_Interpret__SWIG_1(HTK_Color_Map self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Color_Map_Interpret__SWIG_2(HTK_Color_Map self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Color_Map_Reset(HTK_Color_Map self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Color_Map_Match_Instance(HTK_Color_Map self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Color_Map_Clone(HTK_Color_Map self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Color_Map_NeedsContext(HTK_Color_Map self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Callback_Read(HTK_Callback self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Callback_Write(HTK_Callback self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Callback_Execute(HTK_Callback self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Callback_Interpret__SWIG_0(HTK_Callback self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Callback_Interpret__SWIG_1(HTK_Callback self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Callback_Interpret__SWIG_2(HTK_Callback self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Callback_Reset(HTK_Callback self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Callback_Match_Instance(HTK_Callback self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Callback_Clone(HTK_Callback self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Callback_NeedsContext(HTK_Callback self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Rendering_Options_Read(HTK_Rendering_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Rendering_Options_Write(HTK_Rendering_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Rendering_Options_Execute(HTK_Rendering_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Rendering_Options_Interpret__SWIG_0(HTK_Rendering_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Rendering_Options_Interpret__SWIG_1(HTK_Rendering_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Rendering_Options_Interpret__SWIG_2(HTK_Rendering_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Rendering_Options_Reset(HTK_Rendering_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Rendering_Options_Match_Instance(HTK_Rendering_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Rendering_Options_Clone(HTK_Rendering_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Rendering_Options_NeedsContext(HTK_Rendering_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Heuristics_Read(HTK_Heuristics self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Heuristics_Write(HTK_Heuristics self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Heuristics_Execute(HTK_Heuristics self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Heuristics_Interpret__SWIG_0(HTK_Heuristics self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Heuristics_Interpret__SWIG_1(HTK_Heuristics self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Heuristics_Interpret__SWIG_2(HTK_Heuristics self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Heuristics_Reset(HTK_Heuristics self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Heuristics_Match_Instance(HTK_Heuristics self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Heuristics_Clone(HTK_Heuristics self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Heuristics_NeedsContext(HTK_Heuristics self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Visibility_Read(HTK_Visibility self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Visibility_Write(HTK_Visibility self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Visibility_Execute(HTK_Visibility self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Visibility_Interpret__SWIG_0(HTK_Visibility self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Visibility_Interpret__SWIG_1(HTK_Visibility self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Visibility_Interpret__SWIG_2(HTK_Visibility self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Visibility_Reset(HTK_Visibility self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Visibility_Match_Instance(HTK_Visibility self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Visibility_Clone(HTK_Visibility self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Visibility_NeedsContext(HTK_Visibility self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Selectability_Read(HTK_Selectability self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Selectability_Write(HTK_Selectability self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Selectability_Execute(HTK_Selectability self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Selectability_Interpret__SWIG_0(HTK_Selectability self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Selectability_Interpret__SWIG_1(HTK_Selectability self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Selectability_Interpret__SWIG_2(HTK_Selectability self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Selectability_Reset(HTK_Selectability self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Selectability_Match_Instance(HTK_Selectability self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Selectability_Clone(HTK_Selectability self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Selectability_NeedsContext(HTK_Selectability self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Matrix_Read(HTK_Matrix self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Matrix_Write(HTK_Matrix self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Matrix_Execute(HTK_Matrix self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Matrix_Interpret__SWIG_0(HTK_Matrix self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Matrix_Interpret__SWIG_1(HTK_Matrix self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Matrix_Interpret__SWIG_2(HTK_Matrix self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Matrix_Reset(HTK_Matrix self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Matrix_Match_Instance(HTK_Matrix self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Matrix_Clone(HTK_Matrix self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Matrix_NeedsContext(HTK_Matrix self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Enumerated_Read(HTK_Enumerated self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Enumerated_Write(HTK_Enumerated self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Enumerated_Execute(HTK_Enumerated self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Enumerated_Interpret__SWIG_0(HTK_Enumerated self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Enumerated_Interpret__SWIG_1(HTK_Enumerated self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Enumerated_Interpret__SWIG_3(HTK_Enumerated self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Enumerated_Reset(HTK_Enumerated self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Enumerated_Match_Instance(HTK_Enumerated self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Enumerated_Clone(HTK_Enumerated self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Enumerated_NeedsContext(HTK_Enumerated self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Size_Read(HTK_Size self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Size_Write(HTK_Size self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Size_Execute(HTK_Size self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Size_Interpret__SWIG_0(HTK_Size self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Size_Interpret__SWIG_1(HTK_Size self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Size_Interpret__SWIG_2(HTK_Size self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Size_Reset(HTK_Size self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Size_Match_Instance(HTK_Size self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Size_Clone(HTK_Size self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Size_NeedsContext(HTK_Size self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Linear_Pattern_Read(HTK_Linear_Pattern self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Linear_Pattern_Write(HTK_Linear_Pattern self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Linear_Pattern_Execute(HTK_Linear_Pattern self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Linear_Pattern_Interpret__SWIG_0(HTK_Linear_Pattern self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Linear_Pattern_Interpret__SWIG_1(HTK_Linear_Pattern self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Linear_Pattern_Interpret__SWIG_3(HTK_Linear_Pattern self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Linear_Pattern_Reset(HTK_Linear_Pattern self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Linear_Pattern_Match_Instance(HTK_Linear_Pattern self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Linear_Pattern_Clone(HTK_Linear_Pattern self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Linear_Pattern_NeedsContext(HTK_Linear_Pattern self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Named_Read(HTK_Named self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Named_Write(HTK_Named self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Named_Execute(HTK_Named self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Named_Interpret__SWIG_0(HTK_Named self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Named_Interpret__SWIG_1(HTK_Named self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Named_Interpret__SWIG_3(HTK_Named self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Named_Reset(HTK_Named self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Named_Match_Instance(HTK_Named self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Named_Clone(HTK_Named self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Named_NeedsContext(HTK_Named self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Streaming_Read(HTK_Streaming self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Streaming_Write(HTK_Streaming self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Streaming_Execute(HTK_Streaming self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Streaming_Interpret__SWIG_0(HTK_Streaming self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Streaming_Interpret__SWIG_1(HTK_Streaming self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Streaming_Interpret__SWIG_2(HTK_Streaming self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Streaming_Reset(HTK_Streaming self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Streaming_Match_Instance(HTK_Streaming self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Streaming_Clone(HTK_Streaming self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Streaming_NeedsContext(HTK_Streaming self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Conditions_Read(HTK_Conditions self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Conditions_Write(HTK_Conditions self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Conditions_Execute(HTK_Conditions self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Conditions_Interpret__SWIG_0(HTK_Conditions self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Conditions_Interpret__SWIG_1(HTK_Conditions self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Conditions_Interpret__SWIG_2(HTK_Conditions self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Conditions_Reset(HTK_Conditions self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Conditions_Match_Instance(HTK_Conditions self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Conditions_Clone(HTK_Conditions self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Conditions_NeedsContext(HTK_Conditions self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_User_Options_Read(HTK_User_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Options_Write(HTK_User_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Options_Execute(HTK_User_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Options_Interpret__SWIG_0(HTK_User_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_User_Options_Interpret__SWIG_1(HTK_User_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_User_Options_Interpret__SWIG_2(HTK_User_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_User_Options_Reset(HTK_User_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_User_Options_Match_Instance(HTK_User_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_User_Options_Clone(HTK_User_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_User_Options_NeedsContext(HTK_User_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Unicode_Options_Read(HTK_Unicode_Options self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Unicode_Options_Write(HTK_Unicode_Options self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Unicode_Options_Execute(HTK_Unicode_Options self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Unicode_Options_Interpret__SWIG_0(HTK_Unicode_Options self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Unicode_Options_Interpret__SWIG_1(HTK_Unicode_Options self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Unicode_Options_Interpret__SWIG_2(HTK_Unicode_Options self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Unicode_Options_Reset(HTK_Unicode_Options self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Unicode_Options_Match_Instance(HTK_Unicode_Options self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Unicode_Options_Clone(HTK_Unicode_Options self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Unicode_Options_NeedsContext(HTK_Unicode_Options self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_User_Index_Read(HTK_User_Index self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Index_Write(HTK_User_Index self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Index_Execute(HTK_User_Index self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Index_Interpret__SWIG_0(HTK_User_Index self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_User_Index_Interpret__SWIG_1(HTK_User_Index self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_User_Index_Interpret__SWIG_2(HTK_User_Index self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_User_Index_Reset(HTK_User_Index self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_User_Index_Match_Instance(HTK_User_Index self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_User_Index_Clone(HTK_User_Index self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_User_Index_NeedsContext(HTK_User_Index self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_User_Value_Read(HTK_User_Value self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Value_Write(HTK_User_Value self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Value_Execute(HTK_User_Value self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_User_Value_Interpret__SWIG_0(HTK_User_Value self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_User_Value_Interpret__SWIG_1(HTK_User_Value self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_User_Value_Interpret__SWIG_2(HTK_User_Value self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_User_Value_Reset(HTK_User_Value self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_User_Value_Match_Instance(HTK_User_Value self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_User_Value_Clone(HTK_User_Value self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_User_Value_NeedsContext(HTK_User_Value self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Camera_Read(HTK_Camera self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Camera_Write(HTK_Camera self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Camera_Execute(HTK_Camera self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Camera_Interpret__SWIG_0(HTK_Camera self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Camera_Interpret__SWIG_1(HTK_Camera self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Camera_Interpret__SWIG_2(HTK_Camera self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Camera_Reset(HTK_Camera self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Camera_Match_Instance(HTK_Camera self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Camera_Clone(HTK_Camera self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Camera_NeedsContext(HTK_Camera self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Window_Read(HTK_Window self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Window_Write(HTK_Window self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Window_Execute(HTK_Window self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Window_Interpret__SWIG_0(HTK_Window self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Window_Interpret__SWIG_1(HTK_Window self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Window_Interpret__SWIG_2(HTK_Window self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Window_Reset(HTK_Window self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Window_Match_Instance(HTK_Window self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Window_Clone(HTK_Window self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Window_NeedsContext(HTK_Window self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Clip_Region_Read(HTK_Clip_Region self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Region_Write(HTK_Clip_Region self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Region_Execute(HTK_Clip_Region self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Region_Interpret__SWIG_0(HTK_Clip_Region self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Region_Interpret__SWIG_1(HTK_Clip_Region self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Region_Interpret__SWIG_2(HTK_Clip_Region self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Clip_Region_Reset(HTK_Clip_Region self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Clip_Region_Match_Instance(HTK_Clip_Region self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Clip_Region_Clone(HTK_Clip_Region self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Clip_Region_NeedsContext(HTK_Clip_Region self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Read(HTK_Clip_Rectangle self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Write(HTK_Clip_Rectangle self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Execute(HTK_Clip_Rectangle self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Interpret__SWIG_0(HTK_Clip_Rectangle self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Interpret__SWIG_1(HTK_Clip_Rectangle self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Interpret__SWIG_2(HTK_Clip_Rectangle self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Clip_Rectangle_Reset(HTK_Clip_Rectangle self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Clip_Rectangle_Match_Instance(HTK_Clip_Rectangle self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Clip_Rectangle_Clone(HTK_Clip_Rectangle self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Clip_Rectangle_NeedsContext(HTK_Clip_Rectangle self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Text_Font_Read(HTK_Text_Font self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Font_Write(HTK_Text_Font self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Font_Execute(HTK_Text_Font self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Font_Interpret__SWIG_0(HTK_Text_Font self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Text_Font_Interpret__SWIG_1(HTK_Text_Font self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Text_Font_Interpret__SWIG_2(HTK_Text_Font self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Text_Font_Reset(HTK_Text_Font self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Text_Font_Match_Instance(HTK_Text_Font self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Text_Font_Clone(HTK_Text_Font self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Text_Font_NeedsContext(HTK_Text_Font self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Bounding_Read(HTK_Bounding self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Bounding_Write(HTK_Bounding self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Bounding_Execute(HTK_Bounding self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Bounding_Interpret__SWIG_0(HTK_Bounding self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Bounding_Interpret__SWIG_1(HTK_Bounding self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Bounding_Interpret__SWIG_2(HTK_Bounding self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Bounding_Reset(HTK_Bounding self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Bounding_Match_Instance(HTK_Bounding self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Bounding_Clone(HTK_Bounding self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Bounding_NeedsContext(HTK_Bounding self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Point_Read(HTK_Point self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Point_Write(HTK_Point self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Point_Execute(HTK_Point self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Point_Interpret__SWIG_0(HTK_Point self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Point_Interpret__SWIG_1(HTK_Point self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Point_Interpret__SWIG_2(HTK_Point self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Point_Reset(HTK_Point self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Point_Match_Instance(HTK_Point self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Point_Clone(HTK_Point self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Point_NeedsContext(HTK_Point self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Line_Read(HTK_Line self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Write(HTK_Line self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Execute(HTK_Line self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Interpret__SWIG_0(HTK_Line self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Interpret__SWIG_1(HTK_Line self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Interpret__SWIG_2(HTK_Line self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Line_Reset(HTK_Line self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Line_Match_Instance(HTK_Line self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Line_Clone(HTK_Line self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Line_NeedsContext(HTK_Line self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Polypoint_Read(HTK_Polypoint self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Polypoint_Write(HTK_Polypoint self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Polypoint_Execute(HTK_Polypoint self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Polypoint_Interpret__SWIG_0(HTK_Polypoint self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Polypoint_Interpret__SWIG_1(HTK_Polypoint self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Polypoint_Interpret__SWIG_2(HTK_Polypoint self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Polypoint_Reset(HTK_Polypoint self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Polypoint_Match_Instance(HTK_Polypoint self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Polypoint_Clone(HTK_Polypoint self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Polypoint_NeedsContext(HTK_Polypoint self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_NURBS_Curve_Read(HTK_NURBS_Curve self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Curve_Write(HTK_NURBS_Curve self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Curve_Execute(HTK_NURBS_Curve self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Curve_Interpret__SWIG_0(HTK_NURBS_Curve self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Curve_Interpret__SWIG_1(HTK_NURBS_Curve self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Curve_Interpret__SWIG_2(HTK_NURBS_Curve self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_NURBS_Curve_Reset(HTK_NURBS_Curve self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_NURBS_Curve_Match_Instance(HTK_NURBS_Curve self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_NURBS_Curve_Clone(HTK_NURBS_Curve self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_NURBS_Curve_NeedsContext(HTK_NURBS_Curve self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_NURBS_Surface_Read(HTK_NURBS_Surface self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Surface_Write(HTK_NURBS_Surface self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Surface_Execute(HTK_NURBS_Surface self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Surface_Interpret__SWIG_0(HTK_NURBS_Surface self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Surface_Interpret__SWIG_1(HTK_NURBS_Surface self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_NURBS_Surface_Interpret__SWIG_2(HTK_NURBS_Surface self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_NURBS_Surface_Reset(HTK_NURBS_Surface self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_NURBS_Surface_Match_Instance(HTK_NURBS_Surface self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_NURBS_Surface_Clone(HTK_NURBS_Surface self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_NURBS_Surface_NeedsContext(HTK_NURBS_Surface self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Area_Light_Read(HTK_Area_Light self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Area_Light_Write(HTK_Area_Light self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Area_Light_Execute(HTK_Area_Light self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Area_Light_Interpret__SWIG_0(HTK_Area_Light self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Area_Light_Interpret__SWIG_1(HTK_Area_Light self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Area_Light_Interpret__SWIG_2(HTK_Area_Light self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Area_Light_Reset(HTK_Area_Light self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Area_Light_Match_Instance(HTK_Area_Light self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Area_Light_Clone(HTK_Area_Light self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Area_Light_NeedsContext(HTK_Area_Light self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Spot_Light_Read(HTK_Spot_Light self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Spot_Light_Write(HTK_Spot_Light self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Spot_Light_Execute(HTK_Spot_Light self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Spot_Light_Interpret__SWIG_0(HTK_Spot_Light self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Spot_Light_Interpret__SWIG_1(HTK_Spot_Light self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Spot_Light_Interpret__SWIG_2(HTK_Spot_Light self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Spot_Light_Reset(HTK_Spot_Light self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Spot_Light_Match_Instance(HTK_Spot_Light self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Spot_Light_Clone(HTK_Spot_Light self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Spot_Light_NeedsContext(HTK_Spot_Light self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Cutting_Plane_Read(HTK_Cutting_Plane self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cutting_Plane_Write(HTK_Cutting_Plane self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cutting_Plane_Execute(HTK_Cutting_Plane self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cutting_Plane_Interpret__SWIG_0(HTK_Cutting_Plane self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Cutting_Plane_Interpret__SWIG_1(HTK_Cutting_Plane self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Cutting_Plane_Interpret__SWIG_2(HTK_Cutting_Plane self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Cutting_Plane_Reset(HTK_Cutting_Plane self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Cutting_Plane_Match_Instance(HTK_Cutting_Plane self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Cutting_Plane_Clone(HTK_Cutting_Plane self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Cutting_Plane_NeedsContext(HTK_Cutting_Plane self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Circle_Read(HTK_Circle self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Circle_Write(HTK_Circle self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Circle_Execute(HTK_Circle self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Circle_Interpret__SWIG_0(HTK_Circle self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Circle_Interpret__SWIG_1(HTK_Circle self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Circle_Interpret__SWIG_2(HTK_Circle self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Circle_Reset(HTK_Circle self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Circle_Match_Instance(HTK_Circle self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Circle_Clone(HTK_Circle self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Circle_NeedsContext(HTK_Circle self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Ellipse_Read(HTK_Ellipse self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Ellipse_Write(HTK_Ellipse self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Ellipse_Execute(HTK_Ellipse self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Ellipse_Interpret__SWIG_0(HTK_Ellipse self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Ellipse_Interpret__SWIG_1(HTK_Ellipse self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Ellipse_Interpret__SWIG_2(HTK_Ellipse self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Ellipse_Reset(HTK_Ellipse self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Ellipse_Match_Instance(HTK_Ellipse self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Ellipse_Clone(HTK_Ellipse self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Ellipse_NeedsContext(HTK_Ellipse self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Sphere_Read(HTK_Sphere self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Sphere_Write(HTK_Sphere self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Sphere_Execute(HTK_Sphere self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Sphere_Interpret__SWIG_0(HTK_Sphere self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Sphere_Interpret__SWIG_1(HTK_Sphere self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Sphere_Interpret__SWIG_2(HTK_Sphere self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Sphere_Reset(HTK_Sphere self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Sphere_Match_Instance(HTK_Sphere self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Sphere_Clone(HTK_Sphere self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Sphere_NeedsContext(HTK_Sphere self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Cylinder_Read(HTK_Cylinder self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cylinder_Write(HTK_Cylinder self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cylinder_Execute(HTK_Cylinder self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Cylinder_Interpret__SWIG_0(HTK_Cylinder self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Cylinder_Interpret__SWIG_1(HTK_Cylinder self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Cylinder_Interpret__SWIG_2(HTK_Cylinder self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Cylinder_Reset(HTK_Cylinder self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Cylinder_Match_Instance(HTK_Cylinder self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Cylinder_Clone(HTK_Cylinder self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Cylinder_NeedsContext(HTK_Cylinder self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_PolyCylinder_Read(HTK_PolyCylinder self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_Write(HTK_PolyCylinder self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_Execute(HTK_PolyCylinder self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_Interpret__SWIG_0(HTK_PolyCylinder self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_Interpret__SWIG_1(HTK_PolyCylinder self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_Interpret__SWIG_2(HTK_PolyCylinder self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_PolyCylinder_Reset(HTK_PolyCylinder self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_PolyCylinder_Match_Instance(HTK_PolyCylinder self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_PolyCylinder_Clone(HTK_PolyCylinder self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_PolyCylinder_NeedsContext(HTK_PolyCylinder self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_PolyCylinder_EnumerateEdges(HTK_PolyCylinder self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_LabelFakeEdges(HTK_PolyCylinder self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_HTK_PolyCylinder_AllowInstancing(HTK_PolyCylinder self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_PolyCylinder_read_trivial_points(HTK_PolyCylinder self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_trivial_points(HTK_PolyCylinder self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_read_collection(HTK_PolyCylinder self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection__SWIG_0(HTK_PolyCylinder self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection__SWIG_1(HTK_PolyCylinder self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection__SWIG_2(HTK_PolyCylinder self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_read_trivial_points_ascii(HTK_PolyCylinder self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_trivial_points_ascii(HTK_PolyCylinder self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_read_collection_ascii(HTK_PolyCylinder self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_vertex_marker_sizes_ascii(HTK_PolyCylinder self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection_ascii__SWIG_0(HTK_PolyCylinder self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection_ascii__SWIG_1(HTK_PolyCylinder self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_write_collection_ascii__SWIG_2(HTK_PolyCylinder self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_mangle_points(HTK_PolyCylinder self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_mangle_point_attributes(HTK_PolyCylinder self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_PolyCylinder_mangle_face_attributes(HTK_PolyCylinder self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Read(HTK_Grid self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Write(HTK_Grid self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Execute(HTK_Grid self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Interpret__SWIG_0(HTK_Grid self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Interpret__SWIG_1(HTK_Grid self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Grid_Interpret__SWIG_2(HTK_Grid self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Grid_Reset(HTK_Grid self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Grid_Match_Instance(HTK_Grid self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Grid_Clone(HTK_Grid self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Grid_NeedsContext(HTK_Grid self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Text_Read(HTK_Text self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Write(HTK_Text self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Execute(HTK_Text self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Text_Interpret__SWIG_0(HTK_Text self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Text_Interpret__SWIG_1(HTK_Text self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Text_Interpret__SWIG_2(HTK_Text self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Text_Reset(HTK_Text self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Text_Match_Instance(HTK_Text self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Text_Clone(HTK_Text self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Text_NeedsContext(HTK_Text self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Font_Read(HTK_Font self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Font_Write(HTK_Font self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Font_Execute(HTK_Font self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Font_Interpret__SWIG_0(HTK_Font self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Font_Interpret__SWIG_1(HTK_Font self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Font_Interpret__SWIG_2(HTK_Font self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Font_Reset(HTK_Font self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Font_Match_Instance(HTK_Font self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Font_Clone(HTK_Font self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Font_NeedsContext(HTK_Font self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Image_Read(HTK_Image self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Image_Write(HTK_Image self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Image_Execute(HTK_Image self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Image_Interpret__SWIG_0(HTK_Image self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Image_Interpret__SWIG_1(HTK_Image self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Image_Interpret__SWIG_2(HTK_Image self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Image_Reset(HTK_Image self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Image_Match_Instance(HTK_Image self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Image_Clone(HTK_Image self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Image_NeedsContext(HTK_Image self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Texture_Read(HTK_Texture self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Write(HTK_Texture self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Execute(HTK_Texture self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Interpret__SWIG_0(HTK_Texture self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Interpret__SWIG_1(HTK_Texture self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Interpret__SWIG_2(HTK_Texture self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Texture_Reset(HTK_Texture self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Texture_Match_Instance(HTK_Texture self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Texture_Clone(HTK_Texture self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Texture_NeedsContext(HTK_Texture self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Texture_Definitions_Read(HTK_Texture_Definitions self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Definitions_Write(HTK_Texture_Definitions self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Definitions_Execute(HTK_Texture_Definitions self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Definitions_Interpret__SWIG_0(HTK_Texture_Definitions self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Definitions_Interpret__SWIG_1(HTK_Texture_Definitions self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Texture_Definitions_Interpret__SWIG_2(HTK_Texture_Definitions self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Texture_Definitions_Reset(HTK_Texture_Definitions self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Texture_Definitions_Match_Instance(HTK_Texture_Definitions self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Texture_Definitions_Clone(HTK_Texture_Definitions self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Texture_Definitions_NeedsContext(HTK_Texture_Definitions self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Glyph_Definition_Read(HTK_Glyph_Definition self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definition_Write(HTK_Glyph_Definition self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definition_Execute(HTK_Glyph_Definition self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definition_Interpret__SWIG_0(HTK_Glyph_Definition self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definition_Interpret__SWIG_1(HTK_Glyph_Definition self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definition_Interpret__SWIG_2(HTK_Glyph_Definition self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Glyph_Definition_Reset(HTK_Glyph_Definition self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Glyph_Definition_Match_Instance(HTK_Glyph_Definition self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Glyph_Definition_Clone(HTK_Glyph_Definition self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Glyph_Definition_NeedsContext(HTK_Glyph_Definition self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Read(HTK_Glyph_Definitions self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Write(HTK_Glyph_Definitions self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Execute(HTK_Glyph_Definitions self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Interpret__SWIG_0(HTK_Glyph_Definitions self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Interpret__SWIG_1(HTK_Glyph_Definitions self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Interpret__SWIG_2(HTK_Glyph_Definitions self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Glyph_Definitions_Reset(HTK_Glyph_Definitions self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Glyph_Definitions_Match_Instance(HTK_Glyph_Definitions self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Glyph_Definitions_Clone(HTK_Glyph_Definitions self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Glyph_Definitions_NeedsContext(HTK_Glyph_Definitions self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Line_Style_Read(HTK_Line_Style self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Style_Write(HTK_Line_Style self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Style_Execute(HTK_Line_Style self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Style_Interpret__SWIG_0(HTK_Line_Style self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Style_Interpret__SWIG_1(HTK_Line_Style self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Style_Interpret__SWIG_2(HTK_Line_Style self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Line_Style_Reset(HTK_Line_Style self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Line_Style_Match_Instance(HTK_Line_Style self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Line_Style_Clone(HTK_Line_Style self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Line_Style_NeedsContext(HTK_Line_Style self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Line_Styles_Read(HTK_Line_Styles self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Styles_Write(HTK_Line_Styles self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Styles_Execute(HTK_Line_Styles self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Line_Styles_Interpret__SWIG_0(HTK_Line_Styles self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Styles_Interpret__SWIG_1(HTK_Line_Styles self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Line_Styles_Interpret__SWIG_2(HTK_Line_Styles self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Line_Styles_Reset(HTK_Line_Styles self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Line_Styles_Match_Instance(HTK_Line_Styles self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Line_Styles_Clone(HTK_Line_Styles self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Line_Styles_NeedsContext(HTK_Line_Styles self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Shell_Read(HTK_Shell self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Write(HTK_Shell self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Execute(HTK_Shell self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Interpret__SWIG_0(HTK_Shell self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Interpret__SWIG_1(HTK_Shell self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Interpret__SWIG_2(HTK_Shell self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Shell_Reset(HTK_Shell self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Shell_Match_Instance(HTK_Shell self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Shell_Clone(HTK_Shell self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Shell_NeedsContext(HTK_Shell self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Shell_EnumerateEdges(HTK_Shell self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_HTK_Shell_LabelFakeEdges(HTK_Shell self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_HTK_Shell_AllowInstancing(HTK_Shell self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Shell_read_trivial_points(HTK_Shell self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_trivial_points(HTK_Shell self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_read_collection(HTK_Shell self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection__SWIG_0(HTK_Shell self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection__SWIG_1(HTK_Shell self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection__SWIG_2(HTK_Shell self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_read_trivial_points_ascii(HTK_Shell self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_trivial_points_ascii(HTK_Shell self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_read_collection_ascii(HTK_Shell self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_vertex_marker_sizes_ascii(HTK_Shell self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection_ascii__SWIG_0(HTK_Shell self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection_ascii__SWIG_1(HTK_Shell self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_write_collection_ascii__SWIG_2(HTK_Shell self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Shell_mangle_points(HTK_Shell self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_mangle_point_attributes(HTK_Shell self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_mangle_face_attributes(HTK_Shell self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_HTK_Shell_Usefulness(HTK_Shell self, long tk, int key, int lod, float[] score) {
    return (self.Usefulness(new BStreamFileToolkit(tk, false), key, lod, score)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Read(HTK_Mesh self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Write(HTK_Mesh self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Execute(HTK_Mesh self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Interpret__SWIG_0(HTK_Mesh self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Interpret__SWIG_1(HTK_Mesh self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_Interpret__SWIG_2(HTK_Mesh self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_Mesh_Reset(HTK_Mesh self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_Mesh_Match_Instance(HTK_Mesh self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_Mesh_Clone(HTK_Mesh self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_Mesh_NeedsContext(HTK_Mesh self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Mesh_EnumerateEdges(HTK_Mesh self) {
    return (self.EnumerateEdges()).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_LabelFakeEdges(HTK_Mesh self) {
    return (self.LabelFakeEdges()).swigValue();
  }
  public static boolean SwigDirector_HTK_Mesh_AllowInstancing(HTK_Mesh self, long tk) {
    return self.AllowInstancing(new BStreamFileToolkit(tk, false));
  }
  public static int SwigDirector_HTK_Mesh_read_trivial_points(HTK_Mesh self, long tk) {
    return (self.read_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_trivial_points(HTK_Mesh self, long tk) {
    return (self.write_trivial_points(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_read_collection(HTK_Mesh self, long tk) {
    return (self.read_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection__SWIG_0(HTK_Mesh self, long tk, boolean write_tag, int variant) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection__SWIG_1(HTK_Mesh self, long tk, boolean write_tag) {
    return (self.write_collection(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection__SWIG_2(HTK_Mesh self, long tk) {
    return (self.write_collection(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_read_trivial_points_ascii(HTK_Mesh self, long tk) {
    return (self.read_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_trivial_points_ascii(HTK_Mesh self, long tk) {
    return (self.write_trivial_points_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_read_collection_ascii(HTK_Mesh self, long tk) {
    return (self.read_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_vertex_marker_sizes_ascii(HTK_Mesh self, long tk) {
    return (self.write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection_ascii__SWIG_0(HTK_Mesh self, long tk, boolean write_tag, int variant) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag, variant)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection_ascii__SWIG_1(HTK_Mesh self, long tk, boolean write_tag) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false), write_tag)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_write_collection_ascii__SWIG_2(HTK_Mesh self, long tk) {
    return (self.write_collection_ascii(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_mangle_points(HTK_Mesh self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_points(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_mangle_point_attributes(HTK_Mesh self, long tk, int pointmap_count, int[] pointmap) {
    return (self.mangle_point_attributes(new BStreamFileToolkit(tk, false), pointmap_count, pointmap)).swigValue();
  }
  public static int SwigDirector_HTK_Mesh_mangle_face_attributes(HTK_Mesh self, long tk, int facemap_count, int[] facemap) {
    return (self.mangle_face_attributes(new BStreamFileToolkit(tk, false), facemap_count, facemap)).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Read(HTK_PolyPolypoint self, long tk) {
    return (self.Read(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Write(HTK_PolyPolypoint self, long tk) {
    return (self.Write(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Execute(HTK_PolyPolypoint self, long tk) {
    return (self.Execute(new BStreamFileToolkit(tk, false))).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Interpret__SWIG_0(HTK_PolyPolypoint self, long tk, int key, int variant) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, variant)).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Interpret__SWIG_1(HTK_PolyPolypoint self, long tk, int key) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key)).swigValue();
  }
  public static int SwigDirector_HTK_PolyPolypoint_Interpret__SWIG_2(HTK_PolyPolypoint self, long tk, int key, String special) {
    return (self.Interpret(new BStreamFileToolkit(tk, false), key, special)).swigValue();
  }
  public static void SwigDirector_HTK_PolyPolypoint_Reset(HTK_PolyPolypoint self) {
    self.Reset();
  }
  public static boolean SwigDirector_HTK_PolyPolypoint_Match_Instance(HTK_PolyPolypoint self, long tk, long instance) {
    return self.Match_Instance(new BStreamFileToolkit(tk, false), (instance == 0) ? null : new Recorded_Instance(instance, false));
  }
  public static int SwigDirector_HTK_PolyPolypoint_Clone(HTK_PolyPolypoint self, long tk, long handler) {
    return (self.Clone(new BStreamFileToolkit(tk, false), (handler == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false))).swigValue();
  }
  public static boolean SwigDirector_HTK_PolyPolypoint_NeedsContext(HTK_PolyPolypoint self, long tk) {
    return self.NeedsContext(new BStreamFileToolkit(tk, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
