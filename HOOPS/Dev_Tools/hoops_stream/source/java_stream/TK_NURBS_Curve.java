/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_NURBS_Curve extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_NURBS_Curve(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_NURBS_CurveUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_NURBS_Curve obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_NURBS_Curve(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_NURBS_Curve_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_NURBS_Curve_change_ownership(this, swigCPtr, true);
  }

  protected void setM_optionals(short value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_optionals_set(swigCPtr, this, value);
  }

  protected short getM_optionals() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_optionals_get(swigCPtr, this);
  }

  protected void setM_degree(short value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_degree_set(swigCPtr, this, value);
  }

  protected short getM_degree() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_degree_get(swigCPtr, this);
  }

  protected void setM_control_point_count(int value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_control_point_count_set(swigCPtr, this, value);
  }

  protected int getM_control_point_count() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_control_point_count_get(swigCPtr, this);
  }

  protected void setM_knot_count_implicit(int value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_knot_count_implicit_set(swigCPtr, this, value);
  }

  protected int getM_knot_count_implicit() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_knot_count_implicit_get(swigCPtr, this);
  }

  protected void setM_dcontrol_points(double[] value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_dcontrol_points_set(swigCPtr, this, value);
  }

  protected double[] getM_dcontrol_points() {return HJSTREAMJNI.TK_NURBS_Curve_m_dcontrol_points_get(swigCPtr, this);}

  protected void setM_start(float value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_start_set(swigCPtr, this, value);
  }

  protected float getM_start() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_start_get(swigCPtr, this);
  }

  protected void setM_end(float value) {
    HJSTREAMJNI.TK_NURBS_Curve_m_end_set(swigCPtr, this, value);
  }

  protected float getM_end() {
    return HJSTREAMJNI.TK_NURBS_Curve_m_end_get(swigCPtr, this);
  }

  protected void set_curve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start, float end) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_0(swigCPtr, this, degree, control_count, points, weights, knots, start, end);
  }

  protected void set_curve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_1(swigCPtr, this, degree, control_count, points, weights, knots, start);
  }

  protected void set_curve(int degree, int control_count, float[] points, float[] weights, float[] knots) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_2(swigCPtr, this, degree, control_count, points, weights, knots);
  }

  protected void set_curve(int degree, int control_count, float[] points, float[] weights) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_3(swigCPtr, this, degree, control_count, points, weights);
  }

  protected void set_curve(int degree, int control_count, float[] points) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_4(swigCPtr, this, degree, control_count, points);
  }

  protected void set_curve(int degree, int control_count) {
    HJSTREAMJNI.TK_NURBS_Curve_set_curve__SWIG_5(swigCPtr, this, degree, control_count);
  }

  public TK_NURBS_Curve() {
    this(HJSTREAMJNI.new_TK_NURBS_Curve(), true);
    HJSTREAMJNI.TK_NURBS_Curve_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_NURBS_Curve.class) ? HJSTREAMJNI.TK_NURBS_Curve_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_NURBS_Curve_ReadSwigExplicitTK_NURBS_Curve(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_NURBS_Curve.class) ? HJSTREAMJNI.TK_NURBS_Curve_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_NURBS_Curve_WriteSwigExplicitTK_NURBS_Curve(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_NURBS_Curve.class) ? HJSTREAMJNI.TK_NURBS_Curve_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_NURBS_Curve_CloneSwigExplicitTK_NURBS_Curve(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_NURBS_Curve_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_NURBS_Curve_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_NURBS_Curve.class) HJSTREAMJNI.TK_NURBS_Curve_Reset(swigCPtr, this); else HJSTREAMJNI.TK_NURBS_Curve_ResetSwigExplicitTK_NURBS_Curve(swigCPtr, this);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start, float end) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_0(swigCPtr, this, degree, control_count, points, weights, knots, start, end);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots, float start) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_1(swigCPtr, this, degree, control_count, points, weights, knots, start);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights, float[] knots) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_2(swigCPtr, this, degree, control_count, points, weights, knots);
  }

  public void SetCurve(int degree, int control_count, float[] points, float[] weights) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_3(swigCPtr, this, degree, control_count, points, weights);
  }

  public void SetCurve(int degree, int control_count, float[] points) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_4(swigCPtr, this, degree, control_count, points);
  }

  public void SetCurve(int degree, int control_count) {
    HJSTREAMJNI.TK_NURBS_Curve_SetCurve__SWIG_5(swigCPtr, this, degree, control_count);
  }

  public void SetDCurve(int degree, int control_count, double[] points, float[] weights, float[] knots, float start, float end) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_0(swigCPtr, this, degree, control_count, points, weights, knots, start, end);
  }

  public void SetDCurve(int degree, int control_count, double[] points, float[] weights, float[] knots, float start) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_1(swigCPtr, this, degree, control_count, points, weights, knots, start);
  }

  public void SetDCurve(int degree, int control_count, double[] points, float[] weights, float[] knots) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_2(swigCPtr, this, degree, control_count, points, weights, knots);
  }

  public void SetDCurve(int degree, int control_count, double[] points, float[] weights) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_3(swigCPtr, this, degree, control_count, points, weights);
  }

  public void SetDCurve(int degree, int control_count, double[] points) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_4(swigCPtr, this, degree, control_count, points);
  }

  public void SetDCurve(int degree, int control_count) {
    HJSTREAMJNI.TK_NURBS_Curve_SetDCurve__SWIG_5(swigCPtr, this, degree, control_count);
  }

  public double[] GetDPoints() {return HJSTREAMJNI.TK_NURBS_Curve_GetDPoints__SWIG_0(swigCPtr, this);}

  public int GetDegree() {
    return HJSTREAMJNI.TK_NURBS_Curve_GetDegree(swigCPtr, this);
  }

  public int GetCount() {
    return HJSTREAMJNI.TK_NURBS_Curve_GetCount(swigCPtr, this);
  }

  public void SetStart(float s) {
    HJSTREAMJNI.TK_NURBS_Curve_SetStart(swigCPtr, this, s);
  }

  public float GetStart() {
    return HJSTREAMJNI.TK_NURBS_Curve_GetStart(swigCPtr, this);
  }

  public void SetEnd(float e) {
    HJSTREAMJNI.TK_NURBS_Curve_SetEnd(swigCPtr, this, e);
  }

  public float GetEnd() {
    return HJSTREAMJNI.TK_NURBS_Curve_GetEnd(swigCPtr, this);
  }

  public void SetOptions(int o) {
    HJSTREAMJNI.TK_NURBS_Curve_SetOptions(swigCPtr, this, o);
  }

  public int GetOptions() {
    return HJSTREAMJNI.TK_NURBS_Curve_GetOptions(swigCPtr, this);
  }

}
