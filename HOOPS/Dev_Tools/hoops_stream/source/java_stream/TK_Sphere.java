/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Sphere extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Sphere(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_SphereUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Sphere obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Sphere(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Sphere_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Sphere_change_ownership(this, swigCPtr, true);
  }

  protected void setM_flags(short value) {
    HJSTREAMJNI.TK_Sphere_m_flags_set(swigCPtr, this, value);
  }

  protected short getM_flags() {
    return HJSTREAMJNI.TK_Sphere_m_flags_get(swigCPtr, this);
  }

  protected void setM_center(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Sphere_m_center_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_center() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_center_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_radius(float value) {
    HJSTREAMJNI.TK_Sphere_m_radius_set(swigCPtr, this, value);
  }

  protected float getM_radius() {
    return HJSTREAMJNI.TK_Sphere_m_radius_get(swigCPtr, this);
  }

  protected void setM_axis(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Sphere_m_axis_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_axis() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_axis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_ortho(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Sphere_m_ortho_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_ortho() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_ortho_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_dcenter(SWIGTYPE_p_double value) {
    HJSTREAMJNI.TK_Sphere_m_dcenter_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  protected SWIGTYPE_p_double getM_dcenter() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_dcenter_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  protected void setM_dradius(double value) {
    HJSTREAMJNI.TK_Sphere_m_dradius_set(swigCPtr, this, value);
  }

  protected double getM_dradius() {
    return HJSTREAMJNI.TK_Sphere_m_dradius_get(swigCPtr, this);
  }

  protected void setM_daxis(SWIGTYPE_p_double value) {
    HJSTREAMJNI.TK_Sphere_m_daxis_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  protected SWIGTYPE_p_double getM_daxis() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_daxis_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  protected void setM_dortho(SWIGTYPE_p_double value) {
    HJSTREAMJNI.TK_Sphere_m_dortho_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  protected SWIGTYPE_p_double getM_dortho() {
    long cPtr = HJSTREAMJNI.TK_Sphere_m_dortho_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public TK_Sphere() {
    this(HJSTREAMJNI.new_TK_Sphere(), true);
    HJSTREAMJNI.TK_Sphere_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Sphere.class) ? HJSTREAMJNI.TK_Sphere_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Sphere_ReadSwigExplicitTK_Sphere(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Sphere.class) ? HJSTREAMJNI.TK_Sphere_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Sphere_WriteSwigExplicitTK_Sphere(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Sphere.class) ? HJSTREAMJNI.TK_Sphere_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Sphere_CloneSwigExplicitTK_Sphere(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Sphere_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Sphere_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_Sphere.class) HJSTREAMJNI.TK_Sphere_Reset(swigCPtr, this); else HJSTREAMJNI.TK_Sphere_ResetSwigExplicitTK_Sphere(swigCPtr, this);
  }

  public void SetCenter(float x, float y, float z) {
    HJSTREAMJNI.TK_Sphere_SetCenter__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetCenter(float[] s) {
    HJSTREAMJNI.TK_Sphere_SetCenter__SWIG_1(swigCPtr, this, s);
  }

  public void SetRadius(float r) {
    HJSTREAMJNI.TK_Sphere_SetRadius(swigCPtr, this, r);
  }

  public float GetRadius() {
    return HJSTREAMJNI.TK_Sphere_GetRadius(swigCPtr, this);
  }

  public void SetAxis(float x, float y, float z) {
    HJSTREAMJNI.TK_Sphere_SetAxis__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetAxis(float[] s) {
    HJSTREAMJNI.TK_Sphere_SetAxis__SWIG_1(swigCPtr, this, s);
  }

  public void SetOrtho(float x, float y, float z) {
    HJSTREAMJNI.TK_Sphere_SetOrtho__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetOrtho(float[] s) {
    HJSTREAMJNI.TK_Sphere_SetOrtho__SWIG_1(swigCPtr, this, s);
  }

  public void SetDCenter(double x, double y, double z) {
    HJSTREAMJNI.TK_Sphere_SetDCenter__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDCenter(double[] s) {
    HJSTREAMJNI.TK_Sphere_SetDCenter__SWIG_1(swigCPtr, this, s);
  }

  public double[] GetDCenter() {return HJSTREAMJNI.TK_Sphere_GetDCenter(swigCPtr, this);}

  public void SetDRadius(double r) {
    HJSTREAMJNI.TK_Sphere_SetDRadius(swigCPtr, this, r);
  }

  public double GetDRadius() {
    return HJSTREAMJNI.TK_Sphere_GetDRadius(swigCPtr, this);
  }

  public void SetDAxis(double x, double y, double z) {
    HJSTREAMJNI.TK_Sphere_SetDAxis__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDAxis(double[] s) {
    HJSTREAMJNI.TK_Sphere_SetDAxis__SWIG_1(swigCPtr, this, s);
  }

  public double[] GetDAxis() {return HJSTREAMJNI.TK_Sphere_GetDAxis(swigCPtr, this);}

  public void SetDOrtho(double x, double y, double z) {
    HJSTREAMJNI.TK_Sphere_SetDOrtho__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDOrtho(double[] s) {
    HJSTREAMJNI.TK_Sphere_SetDOrtho__SWIG_1(swigCPtr, this, s);
  }

  public double[] GetDOrtho() {return HJSTREAMJNI.TK_Sphere_GetDOrtho(swigCPtr, this);}

  public final static class Flags {
    public final static Flags TKSPH_NONE = new Flags("TKSPH_NONE", HJSTREAMJNI.TK_Sphere_TKSPH_NONE_get());
    public final static Flags TKSPH_NULL_AXIS = new Flags("TKSPH_NULL_AXIS", HJSTREAMJNI.TK_Sphere_TKSPH_NULL_AXIS_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Flags swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Flags.class + " with value " + swigValue);
    }

    private Flags(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Flags(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Flags(String swigName, Flags swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Flags[] swigValues = { TKSPH_NONE, TKSPH_NULL_AXIS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
