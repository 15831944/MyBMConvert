/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Ellipse extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Ellipse(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_EllipseUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Ellipse obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Ellipse(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Ellipse_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Ellipse_change_ownership(this, swigCPtr, true);
  }

  protected void setM_points(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Ellipse_m_points_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_points() {
    long cPtr = HJSTREAMJNI.TK_Ellipse_m_points_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_dpoints(SWIGTYPE_p_double value) {
    HJSTREAMJNI.TK_Ellipse_m_dpoints_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  protected SWIGTYPE_p_double getM_dpoints() {
    long cPtr = HJSTREAMJNI.TK_Ellipse_m_dpoints_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  protected void setM_limits(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Ellipse_m_limits_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_limits() {
    long cPtr = HJSTREAMJNI.TK_Ellipse_m_limits_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public TK_Ellipse(short opcode) {
    this(HJSTREAMJNI.new_TK_Ellipse(opcode), true);
    HJSTREAMJNI.TK_Ellipse_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Ellipse.class) ? HJSTREAMJNI.TK_Ellipse_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Ellipse_ReadSwigExplicitTK_Ellipse(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Ellipse.class) ? HJSTREAMJNI.TK_Ellipse_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Ellipse_WriteSwigExplicitTK_Ellipse(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Ellipse.class) ? HJSTREAMJNI.TK_Ellipse_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Ellipse_CloneSwigExplicitTK_Ellipse(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Ellipse_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Ellipse_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void SetCenter(float x, float y, float z) {
    HJSTREAMJNI.TK_Ellipse_SetCenter__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetCenter(float[] s) {
    HJSTREAMJNI.TK_Ellipse_SetCenter__SWIG_1(swigCPtr, this, s);
  }

  public void SetMajor(float x, float y, float z) {
    HJSTREAMJNI.TK_Ellipse_SetMajor__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetMajor(float[] m) {
    HJSTREAMJNI.TK_Ellipse_SetMajor__SWIG_1(swigCPtr, this, m);
  }

  public void SetMinor(float x, float y, float z) {
    HJSTREAMJNI.TK_Ellipse_SetMinor__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetMinor(float[] m) {
    HJSTREAMJNI.TK_Ellipse_SetMinor__SWIG_1(swigCPtr, this, m);
  }

  public void SetDCenter(double x, double y, double z) {
    HJSTREAMJNI.TK_Ellipse_SetDCenter__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDCenter(double[] s) {
    HJSTREAMJNI.TK_Ellipse_SetDCenter__SWIG_1(swigCPtr, this, s);
  }

  public double[] GetDCenter() {return HJSTREAMJNI.TK_Ellipse_GetDCenter(swigCPtr, this);}

  public void SetDMajor(double x, double y, double z) {
    HJSTREAMJNI.TK_Ellipse_SetDMajor__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDMajor(double[] m) {
    HJSTREAMJNI.TK_Ellipse_SetDMajor__SWIG_1(swigCPtr, this, m);
  }

  public double[] GetDMajor() {return HJSTREAMJNI.TK_Ellipse_GetDMajor(swigCPtr, this);}

  public void SetDMinor(double x, double y, double z) {
    HJSTREAMJNI.TK_Ellipse_SetDMinor__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetDMinor(double[] m) {
    HJSTREAMJNI.TK_Ellipse_SetDMinor__SWIG_1(swigCPtr, this, m);
  }

  public double[] GetDMinor() {return HJSTREAMJNI.TK_Ellipse_GetDMinor(swigCPtr, this);}

  public void SetLimits(float s, float e) {
    HJSTREAMJNI.TK_Ellipse_SetLimits(swigCPtr, this, s, e);
  }

}
