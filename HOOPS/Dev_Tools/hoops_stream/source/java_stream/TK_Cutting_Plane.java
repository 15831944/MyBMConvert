/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Cutting_Plane extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Cutting_Plane(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_Cutting_PlaneUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Cutting_Plane obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Cutting_Plane(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Cutting_Plane_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Cutting_Plane_change_ownership(this, swigCPtr, true);
  }

  protected void setM_dplanes(double[] value) {
    HJSTREAMJNI.TK_Cutting_Plane_m_dplanes_set(swigCPtr, this, value);
  }

  protected double[] getM_dplanes() {return HJSTREAMJNI.TK_Cutting_Plane_m_dplanes_get(swigCPtr, this);}

  protected void setM_count(int value) {
    HJSTREAMJNI.TK_Cutting_Plane_m_count_set(swigCPtr, this, value);
  }

  protected int getM_count() {
    return HJSTREAMJNI.TK_Cutting_Plane_m_count_get(swigCPtr, this);
  }

  public TK_Cutting_Plane() {
    this(HJSTREAMJNI.new_TK_Cutting_Plane(), true);
    HJSTREAMJNI.TK_Cutting_Plane_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Cutting_Plane.class) ? HJSTREAMJNI.TK_Cutting_Plane_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Cutting_Plane_ReadSwigExplicitTK_Cutting_Plane(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Cutting_Plane.class) ? HJSTREAMJNI.TK_Cutting_Plane_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Cutting_Plane_WriteSwigExplicitTK_Cutting_Plane(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Cutting_Plane.class) ? HJSTREAMJNI.TK_Cutting_Plane_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Cutting_Plane_CloneSwigExplicitTK_Cutting_Plane(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Cutting_Plane_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Cutting_Plane_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_Cutting_Plane.class) HJSTREAMJNI.TK_Cutting_Plane_Reset(swigCPtr, this); else HJSTREAMJNI.TK_Cutting_Plane_ResetSwigExplicitTK_Cutting_Plane(swigCPtr, this);
  }

  public void SetPlanes(int count, float[] p) {
    HJSTREAMJNI.TK_Cutting_Plane_SetPlanes__SWIG_0(swigCPtr, this, count, p);
  }

  public void SetPlanes(int count) {
    HJSTREAMJNI.TK_Cutting_Plane_SetPlanes__SWIG_1(swigCPtr, this, count);
  }

  public void SetDPlanes(int count, double[] p) {
    HJSTREAMJNI.TK_Cutting_Plane_SetDPlanes__SWIG_0(swigCPtr, this, count, p);
  }

  public void SetDPlanes(int count) {
    HJSTREAMJNI.TK_Cutting_Plane_SetDPlanes__SWIG_1(swigCPtr, this, count);
  }

  public void SetPlane(float a, float b, float c, float d) {
    HJSTREAMJNI.TK_Cutting_Plane_SetPlane__SWIG_0(swigCPtr, this, a, b, c, d);
  }

  public void SetDPlane(double a, double b, double c, double d) {
    HJSTREAMJNI.TK_Cutting_Plane_SetDPlane__SWIG_0(swigCPtr, this, a, b, c, d);
  }

  public void SetPlane(float[] p) {
    HJSTREAMJNI.TK_Cutting_Plane_SetPlane__SWIG_1(swigCPtr, this, p);
  }

  public void SetDPlane(double[] p) {
    HJSTREAMJNI.TK_Cutting_Plane_SetDPlane__SWIG_1(swigCPtr, this, p);
  }

  public double[] GetDPlane() {return HJSTREAMJNI.TK_Cutting_Plane_GetDPlane(swigCPtr, this);}

  public double[] GetDPlanes() {return HJSTREAMJNI.TK_Cutting_Plane_GetDPlanes(swigCPtr, this);}

  public int GetCount() {
    return HJSTREAMJNI.TK_Cutting_Plane_GetCount(swigCPtr, this);
  }

}
