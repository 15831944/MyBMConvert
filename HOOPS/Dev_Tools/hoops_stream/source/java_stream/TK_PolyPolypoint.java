/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_PolyPolypoint extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_PolyPolypoint(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_PolyPolypointUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_PolyPolypoint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_PolyPolypoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_PolyPolypoint_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_PolyPolypoint_change_ownership(this, swigCPtr, true);
  }

  protected void setM_point_count(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_point_count_set(swigCPtr, this, value);
  }

  protected int getM_point_count() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_point_count_get(swigCPtr, this);
  }

  protected void setM_points_allocated(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_points_allocated_set(swigCPtr, this, value);
  }

  protected int getM_points_allocated() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_points_allocated_get(swigCPtr, this);
  }

  protected void setM_dpoints(double[] value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_dpoints_set(swigCPtr, this, value);
  }

  protected double[] getM_dpoints() {return HJSTREAMJNI.TK_PolyPolypoint_m_dpoints_get(swigCPtr, this);}

  protected void setM_points_num_floats(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_points_num_floats_set(swigCPtr, this, value);
  }

  protected int getM_points_num_floats() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_points_num_floats_get(swigCPtr, this);
  }

  protected void setM_points_num_dimensions(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_points_num_dimensions_set(swigCPtr, this, value);
  }

  protected int getM_points_num_dimensions() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_points_num_dimensions_get(swigCPtr, this);
  }

  protected void setM_primitive_count(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_primitive_count_set(swigCPtr, this, value);
  }

  protected int getM_primitive_count() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_primitive_count_get(swigCPtr, this);
  }

  protected void setM_lengths_allocated(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_lengths_allocated_set(swigCPtr, this, value);
  }

  protected int getM_lengths_allocated() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_lengths_allocated_get(swigCPtr, this);
  }

  protected void setM_bbox(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_bbox_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_bbox() {
    long cPtr = HJSTREAMJNI.TK_PolyPolypoint_m_bbox_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_dbbox(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_dbbox_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_dbbox() {
    long cPtr = HJSTREAMJNI.TK_PolyPolypoint_m_dbbox_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_templen(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_templen_set(swigCPtr, this, value);
  }

  protected int getM_templen() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_templen_get(swigCPtr, this);
  }

  protected void setM_temprange(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_temprange_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_temprange() {
    long cPtr = HJSTREAMJNI.TK_PolyPolypoint_m_temprange_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_dtemprange(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_dtemprange_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_dtemprange() {
    long cPtr = HJSTREAMJNI.TK_PolyPolypoint_m_dtemprange_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_subop(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_subop_set(swigCPtr, this, value);
  }

  protected int getM_subop() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_subop_get(swigCPtr, this);
  }

  protected void setM_compression_scheme(short value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_compression_scheme_set(swigCPtr, this, value);
  }

  protected short getM_compression_scheme() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_compression_scheme_get(swigCPtr, this);
  }

  protected void setM_workspace_used(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_workspace_used_set(swigCPtr, this, value);
  }

  protected int getM_workspace_used() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_workspace_used_get(swigCPtr, this);
  }

  protected void setM_workspace_allocated(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_workspace_allocated_set(swigCPtr, this, value);
  }

  protected int getM_workspace_allocated() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_workspace_allocated_get(swigCPtr, this);
  }

  protected void setM_bits_per_sample(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_bits_per_sample_set(swigCPtr, this, value);
  }

  protected int getM_bits_per_sample() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_bits_per_sample_get(swigCPtr, this);
  }

  protected void setM_substage(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_substage_set(swigCPtr, this, value);
  }

  protected int getM_substage() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_substage_get(swigCPtr, this);
  }

  protected void setM_progress(int value) {
    HJSTREAMJNI.TK_PolyPolypoint_m_progress_set(swigCPtr, this, value);
  }

  protected int getM_progress() {
    return HJSTREAMJNI.TK_PolyPolypoint_m_progress_get(swigCPtr, this);
  }

  protected TK_Status analyze_dimensionality(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_analyze_dimensionality(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status figure_num_floats(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_figure_num_floats(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status validate_primitive_count(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_validate_primitive_count(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status expand_lengths(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_expand_lengths(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status mangle(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_mangle(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status unmangle(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_unmangle(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status compute_trivial_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_compute_trivial_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status process_trivial_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_process_trivial_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status compute_line_extend_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_compute_line_extend_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status process_line_extend_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_process_line_extend_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_compressed_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_write_compressed_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_compressed_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_read_compressed_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_trivial_leftovers(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_write_trivial_leftovers(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_trivial_leftovers(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_read_trivial_leftovers(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_PolyPolypoint(short opcode) {
    this(HJSTREAMJNI.new_TK_PolyPolypoint(opcode), true);
    HJSTREAMJNI.TK_PolyPolypoint_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_PolyPolypoint.class) ? HJSTREAMJNI.TK_PolyPolypoint_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_PolyPolypoint_ReadSwigExplicitTK_PolyPolypoint(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_PolyPolypoint.class) ? HJSTREAMJNI.TK_PolyPolypoint_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_PolyPolypoint_WriteSwigExplicitTK_PolyPolypoint(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_PolyPolypoint.class) ? HJSTREAMJNI.TK_PolyPolypoint_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_PolyPolypoint_CloneSwigExplicitTK_PolyPolypoint(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Execute(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_PolyPolypoint.class) ? HJSTREAMJNI.TK_PolyPolypoint_Execute(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_PolyPolypoint_ExecuteSwigExplicitTK_PolyPolypoint(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_PolyPolypoint.class) HJSTREAMJNI.TK_PolyPolypoint_Reset(swigCPtr, this); else HJSTREAMJNI.TK_PolyPolypoint_ResetSwigExplicitTK_PolyPolypoint(swigCPtr, this);
  }

  public TK_Status SetPoints(int point_count, float[] points) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetPoints__SWIG_0(swigCPtr, this, point_count, points));
  }

  public TK_Status SetPoints(int point_count) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetPoints__SWIG_1(swigCPtr, this, point_count));
  }

  public TK_Status SetDPoints(int point_count, double[] points) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetDPoints__SWIG_0(swigCPtr, this, point_count, points));
  }

  public TK_Status SetDPoints(int point_count) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetDPoints__SWIG_1(swigCPtr, this, point_count));
  }

  public TK_Status SetLengths(int primitive_count, int[] lengths) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetLengths__SWIG_0(swigCPtr, this, primitive_count, lengths));
  }

  public TK_Status SetLengths(int primitive_count) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_PolyPolypoint_SetLengths__SWIG_1(swigCPtr, this, primitive_count));
  }

  public final static class Suboptions {
    public final static Suboptions TKPP_COMPRESSED = new Suboptions("TKPP_COMPRESSED", HJSTREAMJNI.TK_PolyPolypoint_TKPP_COMPRESSED_get());
    public final static Suboptions TKPP_HAS_EXPLICIT_PRIMITIVE_COUNT = new Suboptions("TKPP_HAS_EXPLICIT_PRIMITIVE_COUNT", HJSTREAMJNI.TK_PolyPolypoint_TKPP_HAS_EXPLICIT_PRIMITIVE_COUNT_get());
    public final static Suboptions TKPP_ONE_PRIMITIVE_ONLY = new Suboptions("TKPP_ONE_PRIMITIVE_ONLY", HJSTREAMJNI.TK_PolyPolypoint_TKPP_ONE_PRIMITIVE_ONLY_get());
    public final static Suboptions TKPP_GLOBAL_QUANTIZATION = new Suboptions("TKPP_GLOBAL_QUANTIZATION", HJSTREAMJNI.TK_PolyPolypoint_TKPP_GLOBAL_QUANTIZATION_get());
    public final static Suboptions TKPP_ZERO_X = new Suboptions("TKPP_ZERO_X", HJSTREAMJNI.TK_PolyPolypoint_TKPP_ZERO_X_get());
    public final static Suboptions TKPP_SAME_X = new Suboptions("TKPP_SAME_X", HJSTREAMJNI.TK_PolyPolypoint_TKPP_SAME_X_get());
    public final static Suboptions TKPP_PER_PRIMITIVE_X = new Suboptions("TKPP_PER_PRIMITIVE_X", HJSTREAMJNI.TK_PolyPolypoint_TKPP_PER_PRIMITIVE_X_get());
    public final static Suboptions TKPP_ZERO_Y = new Suboptions("TKPP_ZERO_Y", HJSTREAMJNI.TK_PolyPolypoint_TKPP_ZERO_Y_get());
    public final static Suboptions TKPP_SAME_Y = new Suboptions("TKPP_SAME_Y", HJSTREAMJNI.TK_PolyPolypoint_TKPP_SAME_Y_get());
    public final static Suboptions TKPP_PER_PRIMITIVE_Y = new Suboptions("TKPP_PER_PRIMITIVE_Y", HJSTREAMJNI.TK_PolyPolypoint_TKPP_PER_PRIMITIVE_Y_get());
    public final static Suboptions TKPP_ZERO_Z = new Suboptions("TKPP_ZERO_Z", HJSTREAMJNI.TK_PolyPolypoint_TKPP_ZERO_Z_get());
    public final static Suboptions TKPP_SAME_Z = new Suboptions("TKPP_SAME_Z", HJSTREAMJNI.TK_PolyPolypoint_TKPP_SAME_Z_get());
    public final static Suboptions TKPP_PER_PRIMITIVE_Z = new Suboptions("TKPP_PER_PRIMITIVE_Z", HJSTREAMJNI.TK_PolyPolypoint_TKPP_PER_PRIMITIVE_Z_get());
    public final static Suboptions TKPP_EXPANDED = new Suboptions("TKPP_EXPANDED", HJSTREAMJNI.TK_PolyPolypoint_TKPP_EXPANDED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Suboptions swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Suboptions.class + " with value " + swigValue);
    }

    private Suboptions(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Suboptions(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Suboptions(String swigName, Suboptions swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Suboptions[] swigValues = { TKPP_COMPRESSED, TKPP_HAS_EXPLICIT_PRIMITIVE_COUNT, TKPP_ONE_PRIMITIVE_ONLY, TKPP_GLOBAL_QUANTIZATION, TKPP_ZERO_X, TKPP_SAME_X, TKPP_PER_PRIMITIVE_X, TKPP_ZERO_Y, TKPP_SAME_Y, TKPP_PER_PRIMITIVE_Y, TKPP_ZERO_Z, TKPP_SAME_Z, TKPP_PER_PRIMITIVE_Z, TKPP_EXPANDED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
