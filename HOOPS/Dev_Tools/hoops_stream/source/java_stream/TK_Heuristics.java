/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Heuristics extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Heuristics(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_HeuristicsUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Heuristics obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Heuristics(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Heuristics_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Heuristics_change_ownership(this, swigCPtr, true);
  }

  protected void setM_mask(int value) {
    HJSTREAMJNI.TK_Heuristics_m_mask_set(swigCPtr, this, value);
  }

  protected int getM_mask() {
    return HJSTREAMJNI.TK_Heuristics_m_mask_get(swigCPtr, this);
  }

  protected void setM_value(int value) {
    HJSTREAMJNI.TK_Heuristics_m_value_set(swigCPtr, this, value);
  }

  protected int getM_value() {
    return HJSTREAMJNI.TK_Heuristics_m_value_get(swigCPtr, this);
  }

  protected void setM_related(int value) {
    HJSTREAMJNI.TK_Heuristics_m_related_set(swigCPtr, this, value);
  }

  protected int getM_related() {
    return HJSTREAMJNI.TK_Heuristics_m_related_get(swigCPtr, this);
  }

  protected void setM_internal_shell(int value) {
    HJSTREAMJNI.TK_Heuristics_m_internal_shell_set(swigCPtr, this, value);
  }

  protected int getM_internal_shell() {
    return HJSTREAMJNI.TK_Heuristics_m_internal_shell_get(swigCPtr, this);
  }

  protected void setM_internal_polyline(int value) {
    HJSTREAMJNI.TK_Heuristics_m_internal_polyline_set(swigCPtr, this, value);
  }

  protected int getM_internal_polyline() {
    return HJSTREAMJNI.TK_Heuristics_m_internal_polyline_get(swigCPtr, this);
  }

  protected void setM_extras(short value) {
    HJSTREAMJNI.TK_Heuristics_m_extras_set(swigCPtr, this, value);
  }

  protected short getM_extras() {
    return HJSTREAMJNI.TK_Heuristics_m_extras_get(swigCPtr, this);
  }

  protected void setM_culling(int value) {
    HJSTREAMJNI.TK_Heuristics_m_culling_set(swigCPtr, this, value);
  }

  protected int getM_culling() {
    return HJSTREAMJNI.TK_Heuristics_m_culling_get(swigCPtr, this);
  }

  protected void setM_selection_culling(int value) {
    HJSTREAMJNI.TK_Heuristics_m_selection_culling_set(swigCPtr, this, value);
  }

  protected int getM_selection_culling() {
    return HJSTREAMJNI.TK_Heuristics_m_selection_culling_get(swigCPtr, this);
  }

  protected void setM_pixel_threshold(int value) {
    HJSTREAMJNI.TK_Heuristics_m_pixel_threshold_set(swigCPtr, this, value);
  }

  protected int getM_pixel_threshold() {
    return HJSTREAMJNI.TK_Heuristics_m_pixel_threshold_get(swigCPtr, this);
  }

  protected void setM_maximum_extent(int value) {
    HJSTREAMJNI.TK_Heuristics_m_maximum_extent_set(swigCPtr, this, value);
  }

  protected int getM_maximum_extent() {
    return HJSTREAMJNI.TK_Heuristics_m_maximum_extent_get(swigCPtr, this);
  }

  protected void setM_maximum_extent_mode(int value) {
    HJSTREAMJNI.TK_Heuristics_m_maximum_extent_mode_set(swigCPtr, this, value);
  }

  protected int getM_maximum_extent_mode() {
    return HJSTREAMJNI.TK_Heuristics_m_maximum_extent_mode_get(swigCPtr, this);
  }

  protected void setM_maximum_extent_level(char value) {
    HJSTREAMJNI.TK_Heuristics_m_maximum_extent_level_set(swigCPtr, this, value);
  }

  protected char getM_maximum_extent_level() {
    return HJSTREAMJNI.TK_Heuristics_m_maximum_extent_level_get(swigCPtr, this);
  }

  protected void setM_hard_extent(int value) {
    HJSTREAMJNI.TK_Heuristics_m_hard_extent_set(swigCPtr, this, value);
  }

  protected int getM_hard_extent() {
    return HJSTREAMJNI.TK_Heuristics_m_hard_extent_get(swigCPtr, this);
  }

  protected void setM_force_defer(int value) {
    HJSTREAMJNI.TK_Heuristics_m_force_defer_set(swigCPtr, this, value);
  }

  protected int getM_force_defer() {
    return HJSTREAMJNI.TK_Heuristics_m_force_defer_get(swigCPtr, this);
  }

  protected void setM_vector(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Heuristics_m_vector_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_vector() {
    long cPtr = HJSTREAMJNI.TK_Heuristics_m_vector_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_vector_tolerance(float value) {
    HJSTREAMJNI.TK_Heuristics_m_vector_tolerance_set(swigCPtr, this, value);
  }

  protected float getM_vector_tolerance() {
    return HJSTREAMJNI.TK_Heuristics_m_vector_tolerance_get(swigCPtr, this);
  }

  protected void setM_max_distance(float value) {
    HJSTREAMJNI.TK_Heuristics_m_max_distance_set(swigCPtr, this, value);
  }

  protected float getM_max_distance() {
    return HJSTREAMJNI.TK_Heuristics_m_max_distance_get(swigCPtr, this);
  }

  protected void setM_view_volume(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Heuristics_m_view_volume_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_view_volume() {
    long cPtr = HJSTREAMJNI.TK_Heuristics_m_view_volume_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_ordered_weights_mask(short value) {
    HJSTREAMJNI.TK_Heuristics_m_ordered_weights_mask_set(swigCPtr, this, value);
  }

  protected short getM_ordered_weights_mask() {
    return HJSTREAMJNI.TK_Heuristics_m_ordered_weights_mask_get(swigCPtr, this);
  }

  protected void setM_ordered_weights(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Heuristics_m_ordered_weights_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getM_ordered_weights() {
    long cPtr = HJSTREAMJNI.TK_Heuristics_m_ordered_weights_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setM_selection_level(short value) {
    HJSTREAMJNI.TK_Heuristics_m_selection_level_set(swigCPtr, this, value);
  }

  protected short getM_selection_level() {
    return HJSTREAMJNI.TK_Heuristics_m_selection_level_get(swigCPtr, this);
  }

  protected void setM_model_type(short value) {
    HJSTREAMJNI.TK_Heuristics_m_model_type_set(swigCPtr, this, value);
  }

  protected short getM_model_type() {
    return HJSTREAMJNI.TK_Heuristics_m_model_type_get(swigCPtr, this);
  }

  public TK_Heuristics() {
    this(HJSTREAMJNI.new_TK_Heuristics(), true);
    HJSTREAMJNI.TK_Heuristics_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Heuristics.class) ? HJSTREAMJNI.TK_Heuristics_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Heuristics_ReadSwigExplicitTK_Heuristics(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Heuristics.class) ? HJSTREAMJNI.TK_Heuristics_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Heuristics_WriteSwigExplicitTK_Heuristics(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Heuristics.class) ? HJSTREAMJNI.TK_Heuristics_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Heuristics_CloneSwigExplicitTK_Heuristics(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Heuristics_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Heuristics_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void SetMask(int m) {
    HJSTREAMJNI.TK_Heuristics_SetMask(swigCPtr, this, m);
  }

  public int GetMask() {
    return HJSTREAMJNI.TK_Heuristics_GetMask(swigCPtr, this);
  }

  public void SetValue(int v) {
    HJSTREAMJNI.TK_Heuristics_SetValue(swigCPtr, this, v);
  }

  public int GetValue() {
    return HJSTREAMJNI.TK_Heuristics_GetValue(swigCPtr, this);
  }

  public void SetRelatedSelectionLimit(int r) {
    HJSTREAMJNI.TK_Heuristics_SetRelatedSelectionLimit(swigCPtr, this, r);
  }

  public int GetRelatedSelectionLimit() {
    return HJSTREAMJNI.TK_Heuristics_GetRelatedSelectionLimit(swigCPtr, this);
  }

  public void SetInternalSelectionLimit(int i) {
    HJSTREAMJNI.TK_Heuristics_SetInternalSelectionLimit(swigCPtr, this, i);
  }

  public int GetInternalSelectionLimit() {
    return HJSTREAMJNI.TK_Heuristics_GetInternalSelectionLimit(swigCPtr, this);
  }

  public void SetInternalShellSelectionLimit(int i) {
    HJSTREAMJNI.TK_Heuristics_SetInternalShellSelectionLimit(swigCPtr, this, i);
  }

  public int GetInternalShellSelectionLimit() {
    return HJSTREAMJNI.TK_Heuristics_GetInternalShellSelectionLimit(swigCPtr, this);
  }

  public void SetInternalPolylineSelectionLimit(int i) {
    HJSTREAMJNI.TK_Heuristics_SetInternalPolylineSelectionLimit(swigCPtr, this, i);
  }

  public int GetInternalPolylineSelectionLimit() {
    return HJSTREAMJNI.TK_Heuristics_GetInternalPolylineSelectionLimit(swigCPtr, this);
  }

  public void SetExtras(int e) {
    HJSTREAMJNI.TK_Heuristics_SetExtras(swigCPtr, this, e);
  }

  public int GetExtras() {
    return HJSTREAMJNI.TK_Heuristics_GetExtras(swigCPtr, this);
  }

  public void SetCulling(int c) {
    HJSTREAMJNI.TK_Heuristics_SetCulling(swigCPtr, this, c);
  }

  public int GetCulling() {
    return HJSTREAMJNI.TK_Heuristics_GetCulling(swigCPtr, this);
  }

  public void SetSelectionCulling(int c) {
    HJSTREAMJNI.TK_Heuristics_SetSelectionCulling(swigCPtr, this, c);
  }

  public int GetSelectionCulling() {
    return HJSTREAMJNI.TK_Heuristics_GetSelectionCulling(swigCPtr, this);
  }

  public void SetPixelThreshold(int c) {
    HJSTREAMJNI.TK_Heuristics_SetPixelThreshold(swigCPtr, this, c);
  }

  public int GetPixelThreshold() {
    return HJSTREAMJNI.TK_Heuristics_GetPixelThreshold(swigCPtr, this);
  }

  public void SetMaximumExtent(int c) {
    HJSTREAMJNI.TK_Heuristics_SetMaximumExtent(swigCPtr, this, c);
  }

  public int GetMaximumExtent() {
    return HJSTREAMJNI.TK_Heuristics_GetMaximumExtent(swigCPtr, this);
  }

  public int GetMaximumExtentMode() {
    return HJSTREAMJNI.TK_Heuristics_GetMaximumExtentMode(swigCPtr, this);
  }

  public void SetMaximumExtentMode(int c) {
    HJSTREAMJNI.TK_Heuristics_SetMaximumExtentMode(swigCPtr, this, c);
  }

  public int GetMaximumExtentLevel() {
    return HJSTREAMJNI.TK_Heuristics_GetMaximumExtentLevel(swigCPtr, this);
  }

  public void SetMaximumExtentLevel(int c) {
    HJSTREAMJNI.TK_Heuristics_SetMaximumExtentLevel(swigCPtr, this, c);
  }

  public void SetHardExtent(int c) {
    HJSTREAMJNI.TK_Heuristics_SetHardExtent(swigCPtr, this, c);
  }

  public int GetHardExtent() {
    return HJSTREAMJNI.TK_Heuristics_GetHardExtent(swigCPtr, this);
  }

  public void SetVector(float x, float y, float z) {
    HJSTREAMJNI.TK_Heuristics_SetVector__SWIG_0(swigCPtr, this, x, y, z);
  }

  public void SetVector(float[] v) {
    HJSTREAMJNI.TK_Heuristics_SetVector__SWIG_1(swigCPtr, this, v);
  }

  public float GetVectorTolerance() {
    return HJSTREAMJNI.TK_Heuristics_GetVectorTolerance(swigCPtr, this);
  }

  public void SetVectorTolerance(float tol) {
    HJSTREAMJNI.TK_Heuristics_SetVectorTolerance(swigCPtr, this, tol);
  }

  public void SetMaxDistance(float m) {
    HJSTREAMJNI.TK_Heuristics_SetMaxDistance(swigCPtr, this, m);
  }

  public float GetMaxDistance() {
    return HJSTREAMJNI.TK_Heuristics_GetMaxDistance(swigCPtr, this);
  }

  public float[] GetViewVolume() {return HJSTREAMJNI.TK_Heuristics_GetViewVolume(swigCPtr, this);}

  public void SetViewVolume(float ax, float ay, float az, float bx, float by, float bz) {
    HJSTREAMJNI.TK_Heuristics_SetViewVolume__SWIG_0(swigCPtr, this, ax, ay, az, bx, by, bz);
  }

  public void SetViewVolume(float[] v) {
    HJSTREAMJNI.TK_Heuristics_SetViewVolume__SWIG_1(swigCPtr, this, v);
  }

  public void SetOrderedWeightsMask(int c) {
    HJSTREAMJNI.TK_Heuristics_SetOrderedWeightsMask(swigCPtr, this, c);
  }

  public int GetOrderedWeightsMask() {
    return HJSTREAMJNI.TK_Heuristics_GetOrderedWeightsMask(swigCPtr, this);
  }

  public void SetOrderedWeight(int index, float weight) {
    HJSTREAMJNI.TK_Heuristics_SetOrderedWeight(swigCPtr, this, index, weight);
  }

  public float GetOrderedWeight(int index) {
    return HJSTREAMJNI.TK_Heuristics_GetOrderedWeight(swigCPtr, this, index);
  }

  public void SetSelectionLevel(int l) {
    HJSTREAMJNI.TK_Heuristics_SetSelectionLevel(swigCPtr, this, l);
  }

  public int GetSelectionLevel() {
    return HJSTREAMJNI.TK_Heuristics_GetSelectionLevel(swigCPtr, this);
  }

  public void SetForceDefer(int l) {
    HJSTREAMJNI.TK_Heuristics_SetForceDefer(swigCPtr, this, l);
  }

  public int GetForceDefer() {
    return HJSTREAMJNI.TK_Heuristics_GetForceDefer(swigCPtr, this);
  }

  public void GetVector(float[] values, int count) {
    HJSTREAMJNI.TK_Heuristics_GetVector(swigCPtr, this, values, count);
  }

  public void GetOrderedWeights(float[] values, int count) {
    HJSTREAMJNI.TK_Heuristics_GetOrderedWeights(swigCPtr, this, values, count);
  }

}
