/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Thumbnail extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Thumbnail(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_ThumbnailUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Thumbnail obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJSTREAMJNI.delete_TK_Thumbnail(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Thumbnail_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Thumbnail_change_ownership(this, swigCPtr, true);
  }

  protected void setM_allocated(int value) {
    HJSTREAMJNI.TK_Thumbnail_m_allocated_set(swigCPtr, this, value);
  }

  protected int getM_allocated() {
    return HJSTREAMJNI.TK_Thumbnail_m_allocated_get(swigCPtr, this);
  }

  protected void setM_size(SWIGTYPE_p_int value) {
    HJSTREAMJNI.TK_Thumbnail_m_size_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
  }

  protected SWIGTYPE_p_int getM_size() {
    long cPtr = HJSTREAMJNI.TK_Thumbnail_m_size_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  protected void setM_format(short value) {
    HJSTREAMJNI.TK_Thumbnail_m_format_set(swigCPtr, this, value);
  }

  protected short getM_format() {
    return HJSTREAMJNI.TK_Thumbnail_m_format_get(swigCPtr, this);
  }

  public TK_Thumbnail() {
    this(HJSTREAMJNI.new_TK_Thumbnail(), true);
    HJSTREAMJNI.TK_Thumbnail_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Thumbnail_ReadSwigExplicitTK_Thumbnail(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Thumbnail_WriteSwigExplicitTK_Thumbnail(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Clone(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HJSTREAMJNI.TK_Thumbnail_CloneSwigExplicitTK_Thumbnail(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Thumbnail_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Thumbnail_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Execute(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Execute(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Thumbnail_ExecuteSwigExplicitTK_Thumbnail(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Interpret(BStreamFileToolkit tk, int key, int variant) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Interpret__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, key, variant) : HJSTREAMJNI.TK_Thumbnail_InterpretSwigExplicitTK_Thumbnail__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, key, variant));
  }

  public TK_Status Interpret(BStreamFileToolkit tk, int key, String special) {
    return TK_Status.swigToEnum((getClass() == TK_Thumbnail.class) ? HJSTREAMJNI.TK_Thumbnail_Interpret__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, key, special) : HJSTREAMJNI.TK_Thumbnail_InterpretSwigExplicitTK_Thumbnail__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, key, special));
  }

  public void Reset() {
    if (getClass() == TK_Thumbnail.class) HJSTREAMJNI.TK_Thumbnail_Reset(swigCPtr, this); else HJSTREAMJNI.TK_Thumbnail_ResetSwigExplicitTK_Thumbnail(swigCPtr, this);
  }

  public void SetBytes(int size, byte[] bytes) {
    HJSTREAMJNI.TK_Thumbnail_SetBytes__SWIG_0(swigCPtr, this, size, bytes);
  }

  public void SetBytes(int size) {
    HJSTREAMJNI.TK_Thumbnail_SetBytes__SWIG_1(swigCPtr, this, size);
  }

  public void SetSize(int w, int h) {
    HJSTREAMJNI.TK_Thumbnail_SetSize__SWIG_0(swigCPtr, this, w, h);
  }

  public void SetSize(int[] s) {
    HJSTREAMJNI.TK_Thumbnail_SetSize__SWIG_1(swigCPtr, this, s);
  }

  public void SetFormat(int f) {
    HJSTREAMJNI.TK_Thumbnail_SetFormat(swigCPtr, this, f);
  }

  public int GetFormat() {
    return HJSTREAMJNI.TK_Thumbnail_GetFormat(swigCPtr, this);
  }

  public void GetBytes(byte[] values, int count) {
    HJSTREAMJNI.TK_Thumbnail_GetBytes(swigCPtr, this, values, count);
  }

}
