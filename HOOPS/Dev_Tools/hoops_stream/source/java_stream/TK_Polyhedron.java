/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class TK_Polyhedron extends BBaseOpcodeHandler {
  private long swigCPtr;

  protected TK_Polyhedron(long cPtr, boolean cMemoryOwn) {
    super(HJSTREAMJNI.SWIGTK_PolyhedronUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TK_Polyhedron obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJSTREAMJNI.TK_Polyhedron_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJSTREAMJNI.TK_Polyhedron_change_ownership(this, swigCPtr, true);
  }

  public double[] GetDPoints() {return HJSTREAMJNI.TK_Polyhedron_GetDPoints__SWIG_0(swigCPtr, this);}

  public int GetPointCount() {
    return HJSTREAMJNI.TK_Polyhedron_GetPointCount(swigCPtr, this);
  }

  public int GetKey() {
    return HJSTREAMJNI.TK_Polyhedron_GetKey(swigCPtr, this);
  }

  public short GetSubop() {
    return HJSTREAMJNI.TK_Polyhedron_GetSubop(swigCPtr, this);
  }

  public int GetSubop2() {
    return HJSTREAMJNI.TK_Polyhedron_GetSubop2(swigCPtr, this);
  }

  public int GetPriority() {
    return HJSTREAMJNI.TK_Polyhedron_GetPriority(swigCPtr, this);
  }

  public void SetPriority(int priority) {
    HJSTREAMJNI.TK_Polyhedron_SetPriority(swigCPtr, this, priority);
  }

  public TK_Status SetKey(BStreamFileToolkit tk, int key) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetKey(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, key));
  }

  public TK_Status SetSubop(short subop) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetSubop(swigCPtr, this, subop));
  }

  public TK_Status SetSubop2(int subop2) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetSubop2(swigCPtr, this, subop2));
  }

  public TK_Status InitSubop(BStreamFileToolkit tk, int lodlevel, boolean is_firstpass) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_InitSubop(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, lodlevel, is_firstpass));
  }

  public TK_Status SetBounding(float[] bbox) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetBounding(swigCPtr, this, bbox));
  }

  public TK_Status SetPoints(int count, float[] points) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetPoints__SWIG_0(swigCPtr, this, count, points));
  }

  public TK_Status SetPoints(int count) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetPoints__SWIG_1(swigCPtr, this, count));
  }

  public TK_Status SetDPoints(int count, double[] points) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetDPoints__SWIG_0(swigCPtr, this, count, points));
  }

  public TK_Status SetDPoints(int count) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetDPoints__SWIG_1(swigCPtr, this, count));
  }

  public TK_Status SetVertexNormals(float[] normals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexNormals__SWIG_0(swigCPtr, this, normals));
  }

  public TK_Status SetVertexNormals() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexNormals__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexParameters(float[] parameters, int width) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexParameters__SWIG_0(swigCPtr, this, parameters, width));
  }

  public TK_Status SetVertexParameters(float[] parameters) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexParameters__SWIG_1(swigCPtr, this, parameters));
  }

  public TK_Status SetVertexParameters() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexParameters__SWIG_2(swigCPtr, this));
  }

  public TK_Status SetVertexFaceColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexFaceColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetVertexFaceColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexFaceColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexEdgeColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexEdgeColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetVertexEdgeColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexEdgeColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetVertexMarkerColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerRGBAs(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetVertexMarkerRGBAs() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetVertexColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexFaceIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexFaceIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetVertexFaceIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexFaceIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexEdgeIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexEdgeIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetVertexEdgeIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexEdgeIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetVertexMarkerIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetVertexIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerVisibilities(String visibilities) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_0(swigCPtr, this, visibilities));
  }

  public TK_Status SetVertexMarkerVisibilities() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerSizes(float[] sizes) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerSizes__SWIG_0(swigCPtr, this, sizes));
  }

  public TK_Status SetVertexMarkerSizes() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerSizes__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerSymbols(String symbols) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerSymbols__SWIG_0(swigCPtr, this, symbols));
  }

  public TK_Status SetVertexMarkerSymbols() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerSymbols__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetVertexMarkerSymbolStrings() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetVertexMarkerSymbolStrings(swigCPtr, this));
  }

  public TK_Status SetFaceColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetFaceColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFaceNormals(float[] normals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceNormals__SWIG_0(swigCPtr, this, normals));
  }

  public TK_Status SetFaceNormals() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceNormals__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFaceVisibilities(String visibilities) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceVisibilities__SWIG_0(swigCPtr, this, visibilities));
  }

  public TK_Status SetFaceVisibilities() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceVisibilities__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFacePatterns(String patterns) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFacePatterns__SWIG_0(swigCPtr, this, patterns));
  }

  public TK_Status SetFacePatterns() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFacePatterns__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFaceIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetFaceIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFaceRegions(int[] regions) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceRegions__SWIG_0(swigCPtr, this, regions));
  }

  public TK_Status SetFaceRegions() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceRegions__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgeColors(float[] colors) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeColors__SWIG_0(swigCPtr, this, colors));
  }

  public TK_Status SetEdgeColors() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeColors__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgeIndices(float[] indices) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeIndices__SWIG_0(swigCPtr, this, indices));
  }

  public TK_Status SetEdgeIndices() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeIndices__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgeNormals(float[] normals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeNormals__SWIG_0(swigCPtr, this, normals));
  }

  public TK_Status SetEdgeNormals() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeNormals__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgeVisibilities(String visibilities) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeVisibilities__SWIG_0(swigCPtr, this, visibilities));
  }

  public TK_Status SetEdgeVisibilities() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeVisibilities__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgePatterns(String patterns) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgePatterns__SWIG_0(swigCPtr, this, patterns));
  }

  public TK_Status SetEdgePatterns() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgePatterns__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgePatternStrings() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgePatternStrings(swigCPtr, this));
  }

  public TK_Status SetEdgeWeights(float[] weights) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeWeights__SWIG_0(swigCPtr, this, weights));
  }

  public TK_Status SetEdgeWeights() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeWeights__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetExists(long[] vals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetExists__SWIG_0(swigCPtr, this, vals));
  }

  public TK_Status SetExists() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetExists__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetFaceExists(long[] vals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceExists__SWIG_0(swigCPtr, this, vals));
  }

  public TK_Status SetFaceExists() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetFaceExists__SWIG_1(swigCPtr, this));
  }

  public TK_Status SetEdgeExists(long[] vals) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeExists__SWIG_0(swigCPtr, this, vals));
  }

  public TK_Status SetEdgeExists() {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_SetEdgeExists__SWIG_1(swigCPtr, this));
  }

  public TK_Status AppendObject(BStreamFileToolkit tk, BBaseOpcodeHandler obj) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_AppendObject(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, BBaseOpcodeHandler.getCPtr(obj), obj));
  }

  public BBaseOpcodeHandler PopObject() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_PopObject(swigCPtr, this);
    return (cPtr == 0) ? null : new BBaseOpcodeHandler(cPtr, false);
  }

  public boolean HasOptionals() {
    return HJSTREAMJNI.TK_Polyhedron_HasOptionals(swigCPtr, this);
  }

  public boolean HasOptionalsCommunicator() {
    return HJSTREAMJNI.TK_Polyhedron_HasOptionalsCommunicator(swigCPtr, this);
  }

  public boolean HasVertexNormals() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexNormals(swigCPtr, this);
  }

  public boolean HasVertexParameters() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexParameters(swigCPtr, this);
  }

  public boolean HasVertexFaceColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexFaceColors(swigCPtr, this);
  }

  public boolean HasVertexEdgeColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexEdgeColors(swigCPtr, this);
  }

  public boolean HasVertexMarkerColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerColors(swigCPtr, this);
  }

  public boolean HasVertexMarkerRGBAs() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerRGBAs(swigCPtr, this);
  }

  public boolean HasVertexColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexColors(swigCPtr, this);
  }

  public boolean HasVertexFaceIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexFaceIndices(swigCPtr, this);
  }

  public boolean HasVertexEdgeIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexEdgeIndices(swigCPtr, this);
  }

  public boolean HasVertexMarkerIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerIndices(swigCPtr, this);
  }

  public boolean HasVertexIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexIndices(swigCPtr, this);
  }

  public boolean HasVertexMarkerVisibilities() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerVisibilities(swigCPtr, this);
  }

  public boolean HasVertexMarkerSymbols() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerSymbols(swigCPtr, this);
  }

  public boolean HasVertexMarkerSizes() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexMarkerSizes(swigCPtr, this);
  }

  public boolean HasVertexAttributes() {
    return HJSTREAMJNI.TK_Polyhedron_HasVertexAttributes(swigCPtr, this);
  }

  public boolean HasFaceColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceColors(swigCPtr, this);
  }

  public boolean HasFaceIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceIndices(swigCPtr, this);
  }

  public boolean HasFaceNormals() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceNormals(swigCPtr, this);
  }

  public boolean HasFaceVisibilities() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceVisibilities(swigCPtr, this);
  }

  public boolean HasFacePatterns() {
    return HJSTREAMJNI.TK_Polyhedron_HasFacePatterns(swigCPtr, this);
  }

  public boolean HasFaceRegions() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceRegions(swigCPtr, this);
  }

  public boolean HasFaceAttributes() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceAttributes(swigCPtr, this);
  }

  public boolean HasFaceAttributesCommunicator() {
    return HJSTREAMJNI.TK_Polyhedron_HasFaceAttributesCommunicator(swigCPtr, this);
  }

  public boolean HasEdgeColors() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeColors(swigCPtr, this);
  }

  public boolean HasEdgeIndices() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeIndices(swigCPtr, this);
  }

  public boolean HasEdgeNormals() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeNormals(swigCPtr, this);
  }

  public boolean HasEdgeVisibilities() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeVisibilities(swigCPtr, this);
  }

  public boolean HasEdgePatterns() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgePatterns(swigCPtr, this);
  }

  public boolean HasEdgeWeights() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeWeights(swigCPtr, this);
  }

  public boolean HasEdgeAttributes() {
    return HJSTREAMJNI.TK_Polyhedron_HasEdgeAttributes(swigCPtr, this);
  }

  protected void setMp_priority(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_priority_set(swigCPtr, this, value);
  }

  protected int getMp_priority() {
    return HJSTREAMJNI.TK_Polyhedron_mp_priority_get(swigCPtr, this);
  }

  protected void setMp_dpoints(double[] value) {
    HJSTREAMJNI.TK_Polyhedron_mp_dpoints_set(swigCPtr, this, value);
  }

  protected double[] getMp_dpoints() {return HJSTREAMJNI.TK_Polyhedron_mp_dpoints_get(swigCPtr, this);}

  protected void setMp_vmsymbolstrings(SWIGTYPE_p_p_char value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmsymbolstrings_set(swigCPtr, this, SWIGTYPE_p_p_char.getCPtr(value));
  }

  protected SWIGTYPE_p_p_char getMp_vmsymbolstrings() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_vmsymbolstrings_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  protected void setMp_epatternstrings(SWIGTYPE_p_p_char value) {
    HJSTREAMJNI.TK_Polyhedron_mp_epatternstrings_set(swigCPtr, this, SWIGTYPE_p_p_char.getCPtr(value));
  }

  protected SWIGTYPE_p_p_char getMp_epatternstrings() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_epatternstrings_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  protected void setMp_pointcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_pointcount_set(swigCPtr, this, value);
  }

  protected int getMp_pointcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_pointcount_get(swigCPtr, this);
  }

  protected void setMp_normalcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_normalcount_set(swigCPtr, this, value);
  }

  protected int getMp_normalcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_normalcount_get(swigCPtr, this);
  }

  protected void setMp_paramcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_paramcount_set(swigCPtr, this, value);
  }

  protected int getMp_paramcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_paramcount_get(swigCPtr, this);
  }

  protected void setMp_paramwidth(char value) {
    HJSTREAMJNI.TK_Polyhedron_mp_paramwidth_set(swigCPtr, this, value);
  }

  protected char getMp_paramwidth() {
    return HJSTREAMJNI.TK_Polyhedron_mp_paramwidth_get(swigCPtr, this);
  }

  protected void setMp_vfcolorcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vfcolorcount_set(swigCPtr, this, value);
  }

  protected int getMp_vfcolorcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vfcolorcount_get(swigCPtr, this);
  }

  protected void setMp_vecolorcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vecolorcount_set(swigCPtr, this, value);
  }

  protected int getMp_vecolorcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vecolorcount_get(swigCPtr, this);
  }

  protected void setMp_vmcolorcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmcolorcount_set(swigCPtr, this, value);
  }

  protected int getMp_vmcolorcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmcolorcount_get(swigCPtr, this);
  }

  protected void setMp_vmrgbacount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmrgbacount_set(swigCPtr, this, value);
  }

  protected int getMp_vmrgbacount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmrgbacount_get(swigCPtr, this);
  }

  protected void setMp_vfindexcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vfindexcount_set(swigCPtr, this, value);
  }

  protected int getMp_vfindexcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vfindexcount_get(swigCPtr, this);
  }

  protected void setMp_veindexcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_veindexcount_set(swigCPtr, this, value);
  }

  protected int getMp_veindexcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_veindexcount_get(swigCPtr, this);
  }

  protected void setMp_vmindexcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmindexcount_set(swigCPtr, this, value);
  }

  protected int getMp_vmindexcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmindexcount_get(swigCPtr, this);
  }

  protected void setMp_vmvisibilitycount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmvisibilitycount_set(swigCPtr, this, value);
  }

  protected int getMp_vmvisibilitycount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmvisibilitycount_get(swigCPtr, this);
  }

  protected void setMp_vmsizecount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmsizecount_set(swigCPtr, this, value);
  }

  protected int getMp_vmsizecount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmsizecount_get(swigCPtr, this);
  }

  protected void setMp_vmsymbolcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_vmsymbolcount_set(swigCPtr, this, value);
  }

  protected int getMp_vmsymbolcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_vmsymbolcount_get(swigCPtr, this);
  }

  protected void setMp_facecount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_facecount_set(swigCPtr, this, value);
  }

  protected int getMp_facecount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_facecount_get(swigCPtr, this);
  }

  protected void setMp_fcolorcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_fcolorcount_set(swigCPtr, this, value);
  }

  protected int getMp_fcolorcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_fcolorcount_get(swigCPtr, this);
  }

  protected void setMp_findexcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_findexcount_set(swigCPtr, this, value);
  }

  protected int getMp_findexcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_findexcount_get(swigCPtr, this);
  }

  protected void setMp_fnormalcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_fnormalcount_set(swigCPtr, this, value);
  }

  protected int getMp_fnormalcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_fnormalcount_get(swigCPtr, this);
  }

  protected void setMp_fpatterncount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_fpatterncount_set(swigCPtr, this, value);
  }

  protected int getMp_fpatterncount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_fpatterncount_get(swigCPtr, this);
  }

  protected void setMp_fvisibilitycount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_fvisibilitycount_set(swigCPtr, this, value);
  }

  protected int getMp_fvisibilitycount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_fvisibilitycount_get(swigCPtr, this);
  }

  protected void setMp_edgecount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_edgecount_set(swigCPtr, this, value);
  }

  protected int getMp_edgecount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_edgecount_get(swigCPtr, this);
  }

  protected void setMp_ecolorcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_ecolorcount_set(swigCPtr, this, value);
  }

  protected int getMp_ecolorcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_ecolorcount_get(swigCPtr, this);
  }

  protected void setMp_eindexcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_eindexcount_set(swigCPtr, this, value);
  }

  protected int getMp_eindexcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_eindexcount_get(swigCPtr, this);
  }

  protected void setMp_enormalcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_enormalcount_set(swigCPtr, this, value);
  }

  protected int getMp_enormalcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_enormalcount_get(swigCPtr, this);
  }

  protected void setMp_epatterncount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_epatterncount_set(swigCPtr, this, value);
  }

  protected int getMp_epatterncount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_epatterncount_get(swigCPtr, this);
  }

  protected void setMp_eweightcount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_eweightcount_set(swigCPtr, this, value);
  }

  protected int getMp_eweightcount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_eweightcount_get(swigCPtr, this);
  }

  protected void setMp_evisibilitycount(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_evisibilitycount_set(swigCPtr, this, value);
  }

  protected int getMp_evisibilitycount() {
    return HJSTREAMJNI.TK_Polyhedron_mp_evisibilitycount_get(swigCPtr, this);
  }

  protected void setMp_stage(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_stage_set(swigCPtr, this, value);
  }

  protected int getMp_stage() {
    return HJSTREAMJNI.TK_Polyhedron_mp_stage_get(swigCPtr, this);
  }

  protected void setMp_substage(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_substage_set(swigCPtr, this, value);
  }

  protected int getMp_substage() {
    return HJSTREAMJNI.TK_Polyhedron_mp_substage_get(swigCPtr, this);
  }

  protected void setMp_progress(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_progress_set(swigCPtr, this, value);
  }

  protected int getMp_progress() {
    return HJSTREAMJNI.TK_Polyhedron_mp_progress_get(swigCPtr, this);
  }

  protected void setMp_subprogress(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_subprogress_set(swigCPtr, this, value);
  }

  protected int getMp_subprogress() {
    return HJSTREAMJNI.TK_Polyhedron_mp_subprogress_get(swigCPtr, this);
  }

  protected void setMp_optopcode(short value) {
    HJSTREAMJNI.TK_Polyhedron_mp_optopcode_set(swigCPtr, this, value);
  }

  protected short getMp_optopcode() {
    return HJSTREAMJNI.TK_Polyhedron_mp_optopcode_get(swigCPtr, this);
  }

  protected void setMp_present(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_present_set(swigCPtr, this, value);
  }

  protected int getMp_present() {
    return HJSTREAMJNI.TK_Polyhedron_mp_present_get(swigCPtr, this);
  }

  protected void setMp_face_present(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_face_present_set(swigCPtr, this, value);
  }

  protected int getMp_face_present() {
    return HJSTREAMJNI.TK_Polyhedron_mp_face_present_get(swigCPtr, this);
  }

  protected void setMp_edge_present(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_edge_present_set(swigCPtr, this, value);
  }

  protected int getMp_edge_present() {
    return HJSTREAMJNI.TK_Polyhedron_mp_edge_present_get(swigCPtr, this);
  }

  protected void setMp_bits_per_sample(short value) {
    HJSTREAMJNI.TK_Polyhedron_mp_bits_per_sample_set(swigCPtr, this, value);
  }

  protected short getMp_bits_per_sample() {
    return HJSTREAMJNI.TK_Polyhedron_mp_bits_per_sample_get(swigCPtr, this);
  }

  protected void setMp_bbox(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Polyhedron_mp_bbox_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getMp_bbox() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_bbox_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setMp_key(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_key_set(swigCPtr, this, value);
  }

  protected int getMp_key() {
    return HJSTREAMJNI.TK_Polyhedron_mp_key_get(swigCPtr, this);
  }

  protected void setMp_instance(TK_Instance value) {
    HJSTREAMJNI.TK_Polyhedron_mp_instance_set(swigCPtr, this, TK_Instance.getCPtr(value), value);
  }

  protected TK_Instance getMp_instance() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_instance_get(swigCPtr, this);
    return (cPtr == 0) ? null : new TK_Instance(cPtr, false);
  }

  protected void setMp_matrix(SWIGTYPE_p_float value) {
    HJSTREAMJNI.TK_Polyhedron_mp_matrix_set(swigCPtr, this, SWIGTYPE_p_float.getCPtr(value));
  }

  protected SWIGTYPE_p_float getMp_matrix() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_matrix_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  protected void setMp_workspace_allocated(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_workspace_allocated_set(swigCPtr, this, value);
  }

  protected int getMp_workspace_allocated() {
    return HJSTREAMJNI.TK_Polyhedron_mp_workspace_allocated_get(swigCPtr, this);
  }

  protected void setMp_workspace_used(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_workspace_used_set(swigCPtr, this, value);
  }

  protected int getMp_workspace_used() {
    return HJSTREAMJNI.TK_Polyhedron_mp_workspace_used_get(swigCPtr, this);
  }

  protected void setMp_compression_scheme(short value) {
    HJSTREAMJNI.TK_Polyhedron_mp_compression_scheme_set(swigCPtr, this, value);
  }

  protected short getMp_compression_scheme() {
    return HJSTREAMJNI.TK_Polyhedron_mp_compression_scheme_get(swigCPtr, this);
  }

  protected void setMp_subop(short value) {
    HJSTREAMJNI.TK_Polyhedron_mp_subop_set(swigCPtr, this, value);
  }

  protected short getMp_subop() {
    return HJSTREAMJNI.TK_Polyhedron_mp_subop_get(swigCPtr, this);
  }

  protected void setMp_subop2(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_subop2_set(swigCPtr, this, value);
  }

  protected int getMp_subop2() {
    return HJSTREAMJNI.TK_Polyhedron_mp_subop2_get(swigCPtr, this);
  }

  protected void setMp_num_collection_parts(int value) {
    HJSTREAMJNI.TK_Polyhedron_mp_num_collection_parts_set(swigCPtr, this, value);
  }

  protected int getMp_num_collection_parts() {
    return HJSTREAMJNI.TK_Polyhedron_mp_num_collection_parts_get(swigCPtr, this);
  }

  protected void setMp_collection_parts(SWIGTYPE_p_p_BBaseOpcodeHandler value) {
    HJSTREAMJNI.TK_Polyhedron_mp_collection_parts_set(swigCPtr, this, SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(value));
  }

  protected SWIGTYPE_p_p_BBaseOpcodeHandler getMp_collection_parts() {
    long cPtr = HJSTREAMJNI.TK_Polyhedron_mp_collection_parts_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(cPtr, false);
  }

  protected TK_Status EnumerateEdges() {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_EnumerateEdges(swigCPtr, this) : HJSTREAMJNI.TK_Polyhedron_EnumerateEdgesSwigExplicitTK_Polyhedron(swigCPtr, this));
  }

  protected TK_Status LabelFakeEdges() {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_LabelFakeEdges(swigCPtr, this) : HJSTREAMJNI.TK_Polyhedron_LabelFakeEdgesSwigExplicitTK_Polyhedron(swigCPtr, this));
  }

  protected boolean AllowInstancing(BStreamFileToolkit tk) {
    return (getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_AllowInstancing(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_AllowInstancingSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk);
  }

  protected TK_Polyhedron(short op) {
    this(HJSTREAMJNI.new_TK_Polyhedron(op), true);
    HJSTREAMJNI.TK_Polyhedron_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public TK_Status Read(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_Read(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_ReadSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public TK_Status Write(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_Write(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_WriteSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  public void Reset() {
    if (getClass() == TK_Polyhedron.class) HJSTREAMJNI.TK_Polyhedron_Reset(swigCPtr, this); else HJSTREAMJNI.TK_Polyhedron_ResetSwigExplicitTK_Polyhedron(swigCPtr, this);
  }

  protected TK_Status read_trivial_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_read_trivial_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_read_trivial_pointsSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_trivial_points(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_trivial_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_write_trivial_pointsSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_compressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_compressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_compressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_compressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_parameters(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_parameters(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_parameters_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_parameters_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_colors_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_colors(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_colors_uncompressed_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_colors_uncompressed(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices_uncompressed_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices_uncompressed(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_marker_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_marker_symbols(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_symbols(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_marker_sizes(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_sizes(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors_uncompressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors_uncompressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices_uncompressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices_uncompressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_regions(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_regions(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_patterns(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_patterns(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_colors(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_indices(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_patterns(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_patterns(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_weights(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_weights(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_collection(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_read_collection(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_read_collectionSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_compressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_compressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_compressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_compressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_colors(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_colors_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_colors_uncompressed(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_colors_uncompressed_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices_uncompressed(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices_uncompressed_all(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_marker_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_marker_symbols(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_symbols(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_marker_sizes(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_sizes(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors_uncompressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors_uncompressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_uncompressed(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_uncompressed(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_uncompressed_all(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_uncompressed_all(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_regions(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_regions(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_patterns(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_patterns(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_colors(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_colors(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_indices(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_indices(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_normals(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_visibilities(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_visibilities(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_patterns(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_patterns(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_weights(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_weights(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_collection(BStreamFileToolkit tk, boolean write_tag, int variant) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag, variant) : HJSTREAMJNI.TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag, variant));
  }

  protected TK_Status write_collection(BStreamFileToolkit tk, boolean write_tag) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag) : HJSTREAMJNI.TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag));
  }

  protected TK_Status write_collection(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection__SWIG_2(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron__SWIG_2(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected void normals_cartesian_to_polar(long[] exists, int flag, int count, float[] in, float[] out) {
    HJSTREAMJNI.TK_Polyhedron_normals_cartesian_to_polar(swigCPtr, this, exists, flag, count, in, out);
  }

  protected void normals_polar_to_cartesian(long[] exists, int flag, int count, float[] in, float[] out) {
    HJSTREAMJNI.TK_Polyhedron_normals_polar_to_cartesian(swigCPtr, this, exists, flag, count, in, out);
  }

  protected TK_Status write_vertex_normals_main(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters_main(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_colors_main(BStreamFileToolkit tk, short base_op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, base_op));
  }

  protected TK_Status write_vertex_indices_main(BStreamFileToolkit tk, short base_op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, base_op));
  }

  protected TK_Status write_face_colors_main(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_main(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_main(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status ReadAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_ReadAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status WriteAscii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_WriteAscii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_trivial_points_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_read_trivial_points_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_read_trivial_points_asciiSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_trivial_points_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_trivial_points_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_write_trivial_points_asciiSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_compressed_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_compressed_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_normals_compressed_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_normals_compressed_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_parameters_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_parameters_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_parameters_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_parameters_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_colors_all_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_colors_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices_all_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_indices_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status read_vertex_marker_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_marker_symbols_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_symbols_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_vertex_marker_sizes_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_vertex_marker_sizes_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_colors_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_colors_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_indices_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_indices_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_regions_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_regions_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_face_patterns_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_face_patterns_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_colors_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_indices_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_patterns_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_patterns_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_edge_weights_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_read_edge_weights_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status read_collection_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_read_collection_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_read_collection_asciiSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_compressed_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_compressed_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_compressed_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_compressed_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_colors_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_colors_all_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_indices_all_ascii(BStreamFileToolkit tk, short op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, op));
  }

  protected TK_Status write_vertex_marker_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_marker_symbols_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_symbols_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_marker_sizes_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_sizes_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_write_vertex_marker_sizes_asciiSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_colors_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_all_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_all_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_regions_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_regions_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_patterns_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_patterns_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_colors_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_colors_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_indices_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_indices_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_normals_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_normals_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_visibilities_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_visibilities_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_patterns_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_patterns_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_edge_weights_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_edge_weights_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_collection_ascii(BStreamFileToolkit tk, boolean write_tag, int variant) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection_ascii__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag, variant) : HJSTREAMJNI.TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_0(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag, variant));
  }

  protected TK_Status write_collection_ascii(BStreamFileToolkit tk, boolean write_tag) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection_ascii__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag) : HJSTREAMJNI.TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_1(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, write_tag));
  }

  protected TK_Status write_collection_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_write_collection_ascii__SWIG_2(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk) : HJSTREAMJNI.TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron__SWIG_2(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_normals_main_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_normals_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_parameters_main_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_parameters_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_vertex_colors_main_ascii(BStreamFileToolkit tk, short base_op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_colors_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, base_op));
  }

  protected TK_Status write_vertex_indices_main_ascii(BStreamFileToolkit tk, short base_op) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_vertex_indices_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, base_op));
  }

  protected TK_Status write_face_colors_main_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_colors_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status write_face_indices_main_ascii(BStreamFileToolkit tk) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_write_face_indices_main_ascii(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk));
  }

  protected TK_Status mangle_points(BStreamFileToolkit tk, int pointmap_count, int[] pointmap) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_mangle_points(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, pointmap_count, pointmap) : HJSTREAMJNI.TK_Polyhedron_mangle_pointsSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, pointmap_count, pointmap));
  }

  protected TK_Status mangle_point_attributes(BStreamFileToolkit tk, int pointmap_count, int[] pointmap) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_mangle_point_attributes(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, pointmap_count, pointmap) : HJSTREAMJNI.TK_Polyhedron_mangle_point_attributesSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, pointmap_count, pointmap));
  }

  protected TK_Status mangle_face_attributes(BStreamFileToolkit tk, int facemap_count, int[] facemap) {
    return TK_Status.swigToEnum((getClass() == TK_Polyhedron.class) ? HJSTREAMJNI.TK_Polyhedron_mangle_face_attributes(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, facemap_count, facemap) : HJSTREAMJNI.TK_Polyhedron_mangle_face_attributesSwigExplicitTK_Polyhedron(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, facemap_count, facemap));
  }

  protected boolean has_face_attributes() {
    return HJSTREAMJNI.TK_Polyhedron_has_face_attributes(swigCPtr, this);
  }

  protected TK_Status repulse_compress_normals(BStreamFileToolkit tk, int bits) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_repulse_compress_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, bits));
  }

  protected TK_Status repulse_decompress_normals(BStreamFileToolkit tk, int bits) {
    return TK_Status.swigToEnum(HJSTREAMJNI.TK_Polyhedron_repulse_decompress_normals(swigCPtr, this, BStreamFileToolkit.getCPtr(tk), tk, bits));
  }

  protected void set_points(int count, float[] points) {
    HJSTREAMJNI.TK_Polyhedron_set_points__SWIG_0(swigCPtr, this, count, points);
  }

  protected void set_points(int count) {
    HJSTREAMJNI.TK_Polyhedron_set_points__SWIG_1(swigCPtr, this, count);
  }

  protected void set_normals(float[] normals) {
    HJSTREAMJNI.TK_Polyhedron_set_normals__SWIG_0(swigCPtr, this, normals);
  }

  protected void set_normals() {
    HJSTREAMJNI.TK_Polyhedron_set_normals__SWIG_1(swigCPtr, this);
  }

  protected void set_parameters(float[] params) {
    HJSTREAMJNI.TK_Polyhedron_set_parameters__SWIG_0(swigCPtr, this, params);
  }

  protected void set_parameters() {
    HJSTREAMJNI.TK_Polyhedron_set_parameters__SWIG_1(swigCPtr, this);
  }

  protected void set_vfcolors(float[] colors) {
    HJSTREAMJNI.TK_Polyhedron_set_vfcolors__SWIG_0(swigCPtr, this, colors);
  }

  protected void set_vfcolors() {
    HJSTREAMJNI.TK_Polyhedron_set_vfcolors__SWIG_1(swigCPtr, this);
  }

  protected void set_vecolors(float[] colors) {
    HJSTREAMJNI.TK_Polyhedron_set_vecolors__SWIG_0(swigCPtr, this, colors);
  }

  protected void set_vecolors() {
    HJSTREAMJNI.TK_Polyhedron_set_vecolors__SWIG_1(swigCPtr, this);
  }

  protected void set_vmcolors(float[] colors) {
    HJSTREAMJNI.TK_Polyhedron_set_vmcolors__SWIG_0(swigCPtr, this, colors);
  }

  protected void set_vmcolors() {
    HJSTREAMJNI.TK_Polyhedron_set_vmcolors__SWIG_1(swigCPtr, this);
  }

  protected void set_vfindices(float[] indices) {
    HJSTREAMJNI.TK_Polyhedron_set_vfindices__SWIG_0(swigCPtr, this, indices);
  }

  protected void set_vfindices() {
    HJSTREAMJNI.TK_Polyhedron_set_vfindices__SWIG_1(swigCPtr, this);
  }

  protected void set_veindices(float[] indices) {
    HJSTREAMJNI.TK_Polyhedron_set_veindices__SWIG_0(swigCPtr, this, indices);
  }

  protected void set_veindices() {
    HJSTREAMJNI.TK_Polyhedron_set_veindices__SWIG_1(swigCPtr, this);
  }

  protected void set_vmindices(float[] indices) {
    HJSTREAMJNI.TK_Polyhedron_set_vmindices__SWIG_0(swigCPtr, this, indices);
  }

  protected void set_vmindices() {
    HJSTREAMJNI.TK_Polyhedron_set_vmindices__SWIG_1(swigCPtr, this);
  }

  protected void set_fcolors(float[] colors) {
    HJSTREAMJNI.TK_Polyhedron_set_fcolors__SWIG_0(swigCPtr, this, colors);
  }

  protected void set_fcolors() {
    HJSTREAMJNI.TK_Polyhedron_set_fcolors__SWIG_1(swigCPtr, this);
  }

  protected void set_findices(float[] indices) {
    HJSTREAMJNI.TK_Polyhedron_set_findices__SWIG_0(swigCPtr, this, indices);
  }

  protected void set_findices() {
    HJSTREAMJNI.TK_Polyhedron_set_findices__SWIG_1(swigCPtr, this);
  }

  protected void set_exists(long[] exists) {
    HJSTREAMJNI.TK_Polyhedron_set_exists__SWIG_0(swigCPtr, this, exists);
  }

  protected void set_exists() {
    HJSTREAMJNI.TK_Polyhedron_set_exists__SWIG_1(swigCPtr, this);
  }

  protected void set_face_exists(long[] exists) {
    HJSTREAMJNI.TK_Polyhedron_set_face_exists__SWIG_0(swigCPtr, this, exists);
  }

  protected void set_face_exists() {
    HJSTREAMJNI.TK_Polyhedron_set_face_exists__SWIG_1(swigCPtr, this);
  }

  public void GetBounding(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetBounding(swigCPtr, this, values, count);
  }

  public void GetVertexFaceColors(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexFaceColors(swigCPtr, this, values, count);
  }

  public void GetVertexMarkerColors(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexMarkerColors(swigCPtr, this, values, count);
  }

  public void GetVertexMarkerRGBAs(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexMarkerRGBAs(swigCPtr, this, values, count);
  }

  public void GetVertexFaceIndices(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexFaceIndices(swigCPtr, this, values, count);
  }

  public void GetVertexMarkerIndices(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexMarkerIndices(swigCPtr, this, values, count);
  }

  public void GetVertexIndices(float[] values, int count) {
    HJSTREAMJNI.TK_Polyhedron_GetVertexIndices(swigCPtr, this, values, count);
  }

  public final static class Exists {
    public final static Exists Vertex_None = new Exists("Vertex_None", HJSTREAMJNI.TK_Polyhedron_Vertex_None_get());
    public final static Exists Vertex_Normal = new Exists("Vertex_Normal", HJSTREAMJNI.TK_Polyhedron_Vertex_Normal_get());
    public final static Exists Vertex_Parameter = new Exists("Vertex_Parameter", HJSTREAMJNI.TK_Polyhedron_Vertex_Parameter_get());
    public final static Exists Vertex_Face_Color = new Exists("Vertex_Face_Color", HJSTREAMJNI.TK_Polyhedron_Vertex_Face_Color_get());
    public final static Exists Vertex_Edge_Color = new Exists("Vertex_Edge_Color", HJSTREAMJNI.TK_Polyhedron_Vertex_Edge_Color_get());
    public final static Exists Vertex_Marker_Color = new Exists("Vertex_Marker_Color", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_Color_get());
    public final static Exists Vertex_Face_Index = new Exists("Vertex_Face_Index", HJSTREAMJNI.TK_Polyhedron_Vertex_Face_Index_get());
    public final static Exists Vertex_Edge_Index = new Exists("Vertex_Edge_Index", HJSTREAMJNI.TK_Polyhedron_Vertex_Edge_Index_get());
    public final static Exists Vertex_Marker_Index = new Exists("Vertex_Marker_Index", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_Index_get());
    public final static Exists Vertex_Marker_Visibility = new Exists("Vertex_Marker_Visibility", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_Visibility_get());
    public final static Exists Vertex_Marker_Size = new Exists("Vertex_Marker_Size", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_Size_get());
    public final static Exists Vertex_Marker_Symbol = new Exists("Vertex_Marker_Symbol", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_Symbol_get());
    public final static Exists Vertex_Marker_RGBA = new Exists("Vertex_Marker_RGBA", HJSTREAMJNI.TK_Polyhedron_Vertex_Marker_RGBA_get());
    public final static Exists Vertex_Any_Color = new Exists("Vertex_Any_Color", HJSTREAMJNI.TK_Polyhedron_Vertex_Any_Color_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Exists swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Exists.class + " with value " + swigValue);
    }

    private Exists(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Exists(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Exists(String swigName, Exists swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Exists[] swigValues = { Vertex_None, Vertex_Normal, Vertex_Parameter, Vertex_Face_Color, Vertex_Edge_Color, Vertex_Marker_Color, Vertex_Face_Index, Vertex_Edge_Index, Vertex_Marker_Index, Vertex_Marker_Visibility, Vertex_Marker_Size, Vertex_Marker_Symbol, Vertex_Marker_RGBA, Vertex_Any_Color };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Face_Exists {
    public final static Face_Exists Face_None = new Face_Exists("Face_None", HJSTREAMJNI.TK_Polyhedron_Face_None_get());
    public final static Face_Exists Face_Color = new Face_Exists("Face_Color", HJSTREAMJNI.TK_Polyhedron_Face_Color_get());
    public final static Face_Exists Face_Index = new Face_Exists("Face_Index", HJSTREAMJNI.TK_Polyhedron_Face_Index_get());
    public final static Face_Exists Face_Any_Color = new Face_Exists("Face_Any_Color", HJSTREAMJNI.TK_Polyhedron_Face_Any_Color_get());
    public final static Face_Exists Face_Normal = new Face_Exists("Face_Normal", HJSTREAMJNI.TK_Polyhedron_Face_Normal_get());
    public final static Face_Exists Face_Visibility = new Face_Exists("Face_Visibility", HJSTREAMJNI.TK_Polyhedron_Face_Visibility_get());
    public final static Face_Exists Face_Pattern = new Face_Exists("Face_Pattern", HJSTREAMJNI.TK_Polyhedron_Face_Pattern_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Face_Exists swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Face_Exists.class + " with value " + swigValue);
    }

    private Face_Exists(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Face_Exists(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Face_Exists(String swigName, Face_Exists swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Face_Exists[] swigValues = { Face_None, Face_Color, Face_Index, Face_Any_Color, Face_Normal, Face_Visibility, Face_Pattern };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Edge_Exists {
    public final static Edge_Exists Edge_None = new Edge_Exists("Edge_None", HJSTREAMJNI.TK_Polyhedron_Edge_None_get());
    public final static Edge_Exists Edge_Color = new Edge_Exists("Edge_Color", HJSTREAMJNI.TK_Polyhedron_Edge_Color_get());
    public final static Edge_Exists Edge_Index = new Edge_Exists("Edge_Index", HJSTREAMJNI.TK_Polyhedron_Edge_Index_get());
    public final static Edge_Exists Edge_Any_Color = new Edge_Exists("Edge_Any_Color", HJSTREAMJNI.TK_Polyhedron_Edge_Any_Color_get());
    public final static Edge_Exists Edge_Normal = new Edge_Exists("Edge_Normal", HJSTREAMJNI.TK_Polyhedron_Edge_Normal_get());
    public final static Edge_Exists Edge_Visibility = new Edge_Exists("Edge_Visibility", HJSTREAMJNI.TK_Polyhedron_Edge_Visibility_get());
    public final static Edge_Exists Edge_Pattern = new Edge_Exists("Edge_Pattern", HJSTREAMJNI.TK_Polyhedron_Edge_Pattern_get());
    public final static Edge_Exists Edge_Weight = new Edge_Exists("Edge_Weight", HJSTREAMJNI.TK_Polyhedron_Edge_Weight_get());
    public final static Edge_Exists Fake_Edge = new Edge_Exists("Fake_Edge", HJSTREAMJNI.TK_Polyhedron_Fake_Edge_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Edge_Exists swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Edge_Exists.class + " with value " + swigValue);
    }

    private Edge_Exists(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Edge_Exists(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Edge_Exists(String swigName, Edge_Exists swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Edge_Exists[] swigValues = { Edge_None, Edge_Color, Edge_Index, Edge_Any_Color, Edge_Normal, Edge_Visibility, Edge_Pattern, Edge_Weight, Fake_Edge };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Suboptions {
    public final static Suboptions TKSH_STANDARD = new Suboptions("TKSH_STANDARD", HJSTREAMJNI.TK_Polyhedron_TKSH_STANDARD_get());
    public final static Suboptions TKSH_COMPRESSED_POINTS = new Suboptions("TKSH_COMPRESSED_POINTS", HJSTREAMJNI.TK_Polyhedron_TKSH_COMPRESSED_POINTS_get());
    public final static Suboptions TKSH_COMPRESSED_FACES = new Suboptions("TKSH_COMPRESSED_FACES", HJSTREAMJNI.TK_Polyhedron_TKSH_COMPRESSED_FACES_get());
    public final static Suboptions TKSH_TRISTRIPS = new Suboptions("TKSH_TRISTRIPS", HJSTREAMJNI.TK_Polyhedron_TKSH_TRISTRIPS_get());
    public final static Suboptions TKSH_HAS_OPTIONALS = new Suboptions("TKSH_HAS_OPTIONALS", HJSTREAMJNI.TK_Polyhedron_TKSH_HAS_OPTIONALS_get());
    public final static Suboptions TKSH_FIRSTPASS = new Suboptions("TKSH_FIRSTPASS", HJSTREAMJNI.TK_Polyhedron_TKSH_FIRSTPASS_get());
    public final static Suboptions TKSH_BOUNDING_ONLY = new Suboptions("TKSH_BOUNDING_ONLY", HJSTREAMJNI.TK_Polyhedron_TKSH_BOUNDING_ONLY_get());
    public final static Suboptions TKSH_CONNECTIVITY_COMPRESSION = new Suboptions("TKSH_CONNECTIVITY_COMPRESSION", HJSTREAMJNI.TK_Polyhedron_TKSH_CONNECTIVITY_COMPRESSION_get());
    public final static Suboptions TKSH_EXPANDED = new Suboptions("TKSH_EXPANDED", HJSTREAMJNI.TK_Polyhedron_TKSH_EXPANDED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Suboptions swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Suboptions.class + " with value " + swigValue);
    }

    private Suboptions(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Suboptions(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Suboptions(String swigName, Suboptions swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Suboptions[] swigValues = { TKSH_STANDARD, TKSH_COMPRESSED_POINTS, TKSH_COMPRESSED_FACES, TKSH_TRISTRIPS, TKSH_HAS_OPTIONALS, TKSH_FIRSTPASS, TKSH_BOUNDING_ONLY, TKSH_CONNECTIVITY_COMPRESSION, TKSH_EXPANDED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Suboptions2 {
    public final static Suboptions2 TKSH2_COLLECTION = new Suboptions2("TKSH2_COLLECTION", HJSTREAMJNI.TK_Polyhedron_TKSH2_COLLECTION_get());
    public final static Suboptions2 TKSH2_NULL = new Suboptions2("TKSH2_NULL", HJSTREAMJNI.TK_Polyhedron_TKSH2_NULL_get());
    public final static Suboptions2 TKSH2_HAS_NEGATIVE_FACES = new Suboptions2("TKSH2_HAS_NEGATIVE_FACES", HJSTREAMJNI.TK_Polyhedron_TKSH2_HAS_NEGATIVE_FACES_get());
    public final static Suboptions2 TKSH2_GLOBAL_QUANTIZATION = new Suboptions2("TKSH2_GLOBAL_QUANTIZATION", HJSTREAMJNI.TK_Polyhedron_TKSH2_GLOBAL_QUANTIZATION_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Suboptions2 swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Suboptions2.class + " with value " + swigValue);
    }

    private Suboptions2(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Suboptions2(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Suboptions2(String swigName, Suboptions2 swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Suboptions2[] swigValues = { TKSH2_COLLECTION, TKSH2_NULL, TKSH2_HAS_NEGATIVE_FACES, TKSH2_GLOBAL_QUANTIZATION };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Opt_Opcode {
    public final static Opt_Opcode OPT_TERMINATE = new Opt_Opcode("OPT_TERMINATE", HJSTREAMJNI.TK_Polyhedron_OPT_TERMINATE_get());
    public final static Opt_Opcode OPT_ALL_NORMALS_COMPRESSED = new Opt_Opcode("OPT_ALL_NORMALS_COMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_NORMALS_COMPRESSED_get());
    public final static Opt_Opcode OPT_NORMALS_COMPRESSED = new Opt_Opcode("OPT_NORMALS_COMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_NORMALS_COMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_PARAMETERS_COMPRESSED = new Opt_Opcode("OPT_ALL_PARAMETERS_COMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_PARAMETERS_COMPRESSED_get());
    public final static Opt_Opcode OPT_PARAMETERS_COMPRESSED = new Opt_Opcode("OPT_PARAMETERS_COMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_PARAMETERS_COMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VFCOLORS = new Opt_Opcode("OPT_ALL_VFCOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VFCOLORS_get());
    public final static Opt_Opcode OPT_VERTEX_FCOLORS = new Opt_Opcode("OPT_VERTEX_FCOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_FCOLORS_get());
    public final static Opt_Opcode OPT_ALL_VECOLORS = new Opt_Opcode("OPT_ALL_VECOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VECOLORS_get());
    public final static Opt_Opcode OPT_VERTEX_ECOLORS = new Opt_Opcode("OPT_VERTEX_ECOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_ECOLORS_get());
    public final static Opt_Opcode OPT_ALL_VMCOLORS = new Opt_Opcode("OPT_ALL_VMCOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMCOLORS_get());
    public final static Opt_Opcode OPT_VERTEX_MCOLORS = new Opt_Opcode("OPT_VERTEX_MCOLORS", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MCOLORS_get());
    public final static Opt_Opcode OPT_ALL_VFINDICES = new Opt_Opcode("OPT_ALL_VFINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VFINDICES_get());
    public final static Opt_Opcode OPT_VERTEX_FINDICES = new Opt_Opcode("OPT_VERTEX_FINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_FINDICES_get());
    public final static Opt_Opcode OPT_ALL_VEINDICES = new Opt_Opcode("OPT_ALL_VEINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VEINDICES_get());
    public final static Opt_Opcode OPT_VERTEX_EINDICES = new Opt_Opcode("OPT_VERTEX_EINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_EINDICES_get());
    public final static Opt_Opcode OPT_ALL_VMINDICES = new Opt_Opcode("OPT_ALL_VMINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMINDICES_get());
    public final static Opt_Opcode OPT_VERTEX_MINDICES = new Opt_Opcode("OPT_VERTEX_MINDICES", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MINDICES_get());
    public final static Opt_Opcode OPT_ALL_NORMALS = new Opt_Opcode("OPT_ALL_NORMALS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_NORMALS_get());
    public final static Opt_Opcode OPT_NORMALS = new Opt_Opcode("OPT_NORMALS", HJSTREAMJNI.TK_Polyhedron_OPT_NORMALS_get());
    public final static Opt_Opcode OPT_ALL_NORMALS_POLAR = new Opt_Opcode("OPT_ALL_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_NORMALS_POLAR = new Opt_Opcode("OPT_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_ALL_VMVISIBILITIES = new Opt_Opcode("OPT_ALL_VMVISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMVISIBILITIES_get());
    public final static Opt_Opcode OPT_VERTEX_MARKER_VISIBILITIES = new Opt_Opcode("OPT_VERTEX_MARKER_VISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MARKER_VISIBILITIES_get());
    public final static Opt_Opcode OPT_ALL_VMSYMBOLS = new Opt_Opcode("OPT_ALL_VMSYMBOLS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMSYMBOLS_get());
    public final static Opt_Opcode OPT_VERTEX_MARKER_SYMBOLS = new Opt_Opcode("OPT_VERTEX_MARKER_SYMBOLS", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MARKER_SYMBOLS_get());
    public final static Opt_Opcode OPT_ALL_VMSIZES = new Opt_Opcode("OPT_ALL_VMSIZES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMSIZES_get());
    public final static Opt_Opcode OPT_VERTEX_MARKER_SIZES = new Opt_Opcode("OPT_VERTEX_MARKER_SIZES", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MARKER_SIZES_get());
    public final static Opt_Opcode OPT_PARAMETERS = new Opt_Opcode("OPT_PARAMETERS", HJSTREAMJNI.TK_Polyhedron_OPT_PARAMETERS_get());
    public final static Opt_Opcode OPT_ALL_PARAMETERS = new Opt_Opcode("OPT_ALL_PARAMETERS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_PARAMETERS_get());
    public final static Opt_Opcode OPT_ALL_VMRGBAS = new Opt_Opcode("OPT_ALL_VMRGBAS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMRGBAS_get());
    public final static Opt_Opcode OPT_VERTEX_MRGBAS = new Opt_Opcode("OPT_VERTEX_MRGBAS", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MRGBAS_get());
    public final static Opt_Opcode OPT_ALL_FACE_COLORS = new Opt_Opcode("OPT_ALL_FACE_COLORS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_COLORS_get());
    public final static Opt_Opcode OPT_FACE_COLORS = new Opt_Opcode("OPT_FACE_COLORS", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_COLORS_get());
    public final static Opt_Opcode OPT_ALL_FACE_INDICES = new Opt_Opcode("OPT_ALL_FACE_INDICES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_INDICES_get());
    public final static Opt_Opcode OPT_FACE_INDICES = new Opt_Opcode("OPT_FACE_INDICES", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_INDICES_get());
    public final static Opt_Opcode OPT_ALL_FACE_NORMALS_POLAR = new Opt_Opcode("OPT_ALL_FACE_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_FACE_NORMALS_POLAR = new Opt_Opcode("OPT_FACE_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_ALL_FACE_VISIBILITIES = new Opt_Opcode("OPT_ALL_FACE_VISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_VISIBILITIES_get());
    public final static Opt_Opcode OPT_FACE_VISIBILITIES = new Opt_Opcode("OPT_FACE_VISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_VISIBILITIES_get());
    public final static Opt_Opcode OPT_ALL_FACE_PATTERNS = new Opt_Opcode("OPT_ALL_FACE_PATTERNS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_PATTERNS_get());
    public final static Opt_Opcode OPT_FACE_PATTERNS = new Opt_Opcode("OPT_FACE_PATTERNS", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_PATTERNS_get());
    public final static Opt_Opcode OPT_FACE_REGIONS = new Opt_Opcode("OPT_FACE_REGIONS", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_REGIONS_get());
    public final static Opt_Opcode OPT_ALL_EDGE_COLORS = new Opt_Opcode("OPT_ALL_EDGE_COLORS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_COLORS_get());
    public final static Opt_Opcode OPT_EDGE_COLORS = new Opt_Opcode("OPT_EDGE_COLORS", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_COLORS_get());
    public final static Opt_Opcode OPT_ALL_EDGE_INDICES = new Opt_Opcode("OPT_ALL_EDGE_INDICES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_INDICES_get());
    public final static Opt_Opcode OPT_EDGE_INDICES = new Opt_Opcode("OPT_EDGE_INDICES", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_INDICES_get());
    public final static Opt_Opcode OPT_ALL_EDGE_NORMALS_POLAR = new Opt_Opcode("OPT_ALL_EDGE_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_EDGE_NORMALS_POLAR = new Opt_Opcode("OPT_EDGE_NORMALS_POLAR", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_NORMALS_POLAR_get());
    public final static Opt_Opcode OPT_ALL_EDGE_VISIBILITIES = new Opt_Opcode("OPT_ALL_EDGE_VISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_VISIBILITIES_get());
    public final static Opt_Opcode OPT_EDGE_VISIBILITIES = new Opt_Opcode("OPT_EDGE_VISIBILITIES", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_VISIBILITIES_get());
    public final static Opt_Opcode OPT_ALL_EDGE_PATTERNS = new Opt_Opcode("OPT_ALL_EDGE_PATTERNS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_PATTERNS_get());
    public final static Opt_Opcode OPT_EDGE_PATTERNS = new Opt_Opcode("OPT_EDGE_PATTERNS", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_PATTERNS_get());
    public final static Opt_Opcode OPT_ALL_EDGE_WEIGHTS = new Opt_Opcode("OPT_ALL_EDGE_WEIGHTS", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_EDGE_WEIGHTS_get());
    public final static Opt_Opcode OPT_EDGE_WEIGHTS = new Opt_Opcode("OPT_EDGE_WEIGHTS", HJSTREAMJNI.TK_Polyhedron_OPT_EDGE_WEIGHTS_get());
    public final static Opt_Opcode OPT_RESERVED_SPATIAL = new Opt_Opcode("OPT_RESERVED_SPATIAL", HJSTREAMJNI.TK_Polyhedron_OPT_RESERVED_SPATIAL_get());
    public final static Opt_Opcode OPT_ENTITY_ATTRIBUTES = new Opt_Opcode("OPT_ENTITY_ATTRIBUTES", HJSTREAMJNI.TK_Polyhedron_OPT_ENTITY_ATTRIBUTES_get());
    public final static Opt_Opcode OPT_ALL_VFCOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VFCOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VFCOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_FCOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_FCOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_FCOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VECOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VECOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VECOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_ECOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_ECOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_ECOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VMCOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VMCOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMCOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_MCOLORS_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_MCOLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MCOLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VMRGBAS_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VMRGBAS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMRGBAS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_MRGBAS_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_MRGBAS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MRGBAS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VFINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VFINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VFINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_FINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_FINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_FINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VEINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VEINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VEINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_EINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_EINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_EINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_VMINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_VMINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_VMINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_VERTEX_MINDICES_UNCOMPRESSED = new Opt_Opcode("OPT_VERTEX_MINDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_VERTEX_MINDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_FACE_COLORS_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_FACE_COLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_COLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_FACE_COLORS_UNCOMPRESSED = new Opt_Opcode("OPT_FACE_COLORS_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_COLORS_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_ALL_FACE_INDICES_UNCOMPRESSED = new Opt_Opcode("OPT_ALL_FACE_INDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_ALL_FACE_INDICES_UNCOMPRESSED_get());
    public final static Opt_Opcode OPT_FACE_INDICES_UNCOMPRESSED = new Opt_Opcode("OPT_FACE_INDICES_UNCOMPRESSED", HJSTREAMJNI.TK_Polyhedron_OPT_FACE_INDICES_UNCOMPRESSED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Opt_Opcode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Opt_Opcode.class + " with value " + swigValue);
    }

    private Opt_Opcode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Opt_Opcode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Opt_Opcode(String swigName, Opt_Opcode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Opt_Opcode[] swigValues = { OPT_TERMINATE, OPT_ALL_NORMALS_COMPRESSED, OPT_NORMALS_COMPRESSED, OPT_ALL_PARAMETERS_COMPRESSED, OPT_PARAMETERS_COMPRESSED, OPT_ALL_VFCOLORS, OPT_VERTEX_FCOLORS, OPT_ALL_VECOLORS, OPT_VERTEX_ECOLORS, OPT_ALL_VMCOLORS, OPT_VERTEX_MCOLORS, OPT_ALL_VFINDICES, OPT_VERTEX_FINDICES, OPT_ALL_VEINDICES, OPT_VERTEX_EINDICES, OPT_ALL_VMINDICES, OPT_VERTEX_MINDICES, OPT_ALL_NORMALS, OPT_NORMALS, OPT_ALL_NORMALS_POLAR, OPT_NORMALS_POLAR, OPT_ALL_VMVISIBILITIES, OPT_VERTEX_MARKER_VISIBILITIES, OPT_ALL_VMSYMBOLS, OPT_VERTEX_MARKER_SYMBOLS, OPT_ALL_VMSIZES, OPT_VERTEX_MARKER_SIZES, OPT_PARAMETERS, OPT_ALL_PARAMETERS, OPT_ALL_VMRGBAS, OPT_VERTEX_MRGBAS, OPT_ALL_FACE_COLORS, OPT_FACE_COLORS, OPT_ALL_FACE_INDICES, OPT_FACE_INDICES, OPT_ALL_FACE_NORMALS_POLAR, OPT_FACE_NORMALS_POLAR, OPT_ALL_FACE_VISIBILITIES, OPT_FACE_VISIBILITIES, OPT_ALL_FACE_PATTERNS, OPT_FACE_PATTERNS, OPT_FACE_REGIONS, OPT_ALL_EDGE_COLORS, OPT_EDGE_COLORS, OPT_ALL_EDGE_INDICES, OPT_EDGE_INDICES, OPT_ALL_EDGE_NORMALS_POLAR, OPT_EDGE_NORMALS_POLAR, OPT_ALL_EDGE_VISIBILITIES, OPT_EDGE_VISIBILITIES, OPT_ALL_EDGE_PATTERNS, OPT_EDGE_PATTERNS, OPT_ALL_EDGE_WEIGHTS, OPT_EDGE_WEIGHTS, OPT_RESERVED_SPATIAL, OPT_ENTITY_ATTRIBUTES, OPT_ALL_VFCOLORS_UNCOMPRESSED, OPT_VERTEX_FCOLORS_UNCOMPRESSED, OPT_ALL_VECOLORS_UNCOMPRESSED, OPT_VERTEX_ECOLORS_UNCOMPRESSED, OPT_ALL_VMCOLORS_UNCOMPRESSED, OPT_VERTEX_MCOLORS_UNCOMPRESSED, OPT_ALL_VMRGBAS_UNCOMPRESSED, OPT_VERTEX_MRGBAS_UNCOMPRESSED, OPT_ALL_VFINDICES_UNCOMPRESSED, OPT_VERTEX_FINDICES_UNCOMPRESSED, OPT_ALL_VEINDICES_UNCOMPRESSED, OPT_VERTEX_EINDICES_UNCOMPRESSED, OPT_ALL_VMINDICES_UNCOMPRESSED, OPT_VERTEX_MINDICES_UNCOMPRESSED, OPT_ALL_FACE_COLORS_UNCOMPRESSED, OPT_FACE_COLORS_UNCOMPRESSED, OPT_ALL_FACE_INDICES_UNCOMPRESSED, OPT_FACE_INDICES_UNCOMPRESSED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
