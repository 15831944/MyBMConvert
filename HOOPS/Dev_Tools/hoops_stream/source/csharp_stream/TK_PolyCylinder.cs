/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
using ID_Key = System.Int64;
#else
using HLONG = System.Int32;
using ID_Key = System.Int32;
#endif


public class TK_PolyCylinder : TK_Polyhedron {
  private HandleRef swigCPtr;

  public TK_PolyCylinder(IntPtr cPtr, bool cMemoryOwn) : base(HCSSTREAMPINVOKE.TK_PolyCylinderUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_PolyCylinder obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_PolyCylinder() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSSTREAMPINVOKE.delete_TK_PolyCylinder(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_PolyCylinder() : this(HCSSTREAMPINVOKE.new_TK_PolyCylinder(), true) {
    SwigDirectorConnect();
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_PolyCylinder_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_PolyCylinder_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_PolyCylinder_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_PolyCylinder_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_PolyCylinder_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    if (this.GetType() == typeof(TK_PolyCylinder)) HCSSTREAMPINVOKE.TK_PolyCylinder_Reset(swigCPtr); else HCSSTREAMPINVOKE.TK_PolyCylinder_ResetSwigExplicitTK_PolyCylinder(swigCPtr);
  }

  public new void SetPoints(int count, float[] points) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetPoints__SWIG_0(swigCPtr, count, points);
  }

  public new void SetPoints(int count) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetPoints__SWIG_1(swigCPtr, count);
  }

  public new IntPtr GetPoints() {return HCSSTREAMPINVOKE.TK_PolyCylinder_GetPoints__SWIG_0(swigCPtr);}

  public void SetRadii(int count, float[] radii) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetRadii__SWIG_0(swigCPtr, count, radii);
  }

  public void SetRadii(int count) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetRadii__SWIG_1(swigCPtr, count);
  }

  public void SetRadius(float radius) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetRadius(swigCPtr, radius);
  }

  public IntPtr GetRadii() {return HCSSTREAMPINVOKE.TK_PolyCylinder_GetRadii__SWIG_0(swigCPtr);}

  public void SetDPoints(int count, double[] points) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetDPoints__SWIG_0(swigCPtr, count, points);
  }

  public void SetDPoints(int count) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetDPoints__SWIG_1(swigCPtr, count);
  }

  public IntPtr GetDPoints() {return HCSSTREAMPINVOKE.TK_PolyCylinder_GetDPoints__SWIG_0(swigCPtr);}

  public void SetDRadii(int count, double[] radii) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetDRadii__SWIG_0(swigCPtr, count, radii);
  }

  public void SetDRadii(int count) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetDRadii__SWIG_1(swigCPtr, count);
  }

  public void SetDRadius(double radius) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetDRadius(swigCPtr, radius);
  }

  public IntPtr GetDRadii() {return HCSSTREAMPINVOKE.TK_PolyCylinder_GetDRadii__SWIG_0(swigCPtr);}

  public int GetCount() {
    int ret = HCSSTREAMPINVOKE.TK_PolyCylinder_GetCount(swigCPtr);
    return ret;
  }

  public int GetRadiusCount() {
    int ret = HCSSTREAMPINVOKE.TK_PolyCylinder_GetRadiusCount(swigCPtr);
    return ret;
  }

  public void SetCaps(int f) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetCaps(swigCPtr, f);
  }

  public int GetCaps() {
    int ret = HCSSTREAMPINVOKE.TK_PolyCylinder_GetCaps(swigCPtr);
    return ret;
  }

  public void SetEndNormal(int index, float[] normal) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetEndNormal__SWIG_0(swigCPtr, index, normal);
  }

  public void SetEndNormal(int index) {
    HCSSTREAMPINVOKE.TK_PolyCylinder_SetEndNormal__SWIG_1(swigCPtr, index);
  }

  public IntPtr GetEndNormal(int index) {return HCSSTREAMPINVOKE.TK_PolyCylinder_GetEndNormal(swigCPtr, index);}

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTK_PolyCylinder_0(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTK_PolyCylinder_1(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTK_PolyCylinder_2(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTK_PolyCylinder_3(SwigDirectorInterpret__SWIG_0);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTK_PolyCylinder_4(SwigDirectorInterpret__SWIG_1);
    if (SwigDerivedClassHasMethod("Interpret_special", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTK_PolyCylinder_5(SwigDirectorInterpret_special);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTK_PolyCylinder_6(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("Match_Instance", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTK_PolyCylinder_7(SwigDirectorMatch_Instance);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTK_PolyCylinder_8(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("NeedsContext", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTK_PolyCylinder_9(SwigDirectorNeedsContext);
    if (SwigDerivedClassHasMethod("EnumerateEdges", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateTK_PolyCylinder_10(SwigDirectorEnumerateEdges);
    if (SwigDerivedClassHasMethod("LabelFakeEdges", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateTK_PolyCylinder_11(SwigDirectorLabelFakeEdges);
    if (SwigDerivedClassHasMethod("AllowInstancing", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateTK_PolyCylinder_12(SwigDirectorAllowInstancing);
    if (SwigDerivedClassHasMethod("read_trivial_points", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateTK_PolyCylinder_13(SwigDirectorread_trivial_points);
    if (SwigDerivedClassHasMethod("write_trivial_points", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateTK_PolyCylinder_14(SwigDirectorwrite_trivial_points);
    if (SwigDerivedClassHasMethod("read_collection", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateTK_PolyCylinder_15(SwigDirectorread_collection);
    if (SwigDerivedClassHasMethod("write_collection_3arg", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateTK_PolyCylinder_16(SwigDirectorwrite_collection_3arg);
    if (SwigDerivedClassHasMethod("write_collection_2arg", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateTK_PolyCylinder_17(SwigDirectorwrite_collection_2arg);
    if (SwigDerivedClassHasMethod("write_collection", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateTK_PolyCylinder_18(SwigDirectorwrite_collection);
    if (SwigDerivedClassHasMethod("read_trivial_points_ascii", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateTK_PolyCylinder_19(SwigDirectorread_trivial_points_ascii);
    if (SwigDerivedClassHasMethod("write_trivial_points_ascii", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateTK_PolyCylinder_20(SwigDirectorwrite_trivial_points_ascii);
    if (SwigDerivedClassHasMethod("read_collection_ascii", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateTK_PolyCylinder_21(SwigDirectorread_collection_ascii);
    if (SwigDerivedClassHasMethod("write_vertex_marker_sizes_ascii", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateTK_PolyCylinder_22(SwigDirectorwrite_vertex_marker_sizes_ascii);
    if (SwigDerivedClassHasMethod("write_collection_ascii_3arg", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateTK_PolyCylinder_23(SwigDirectorwrite_collection_ascii_3arg);
    if (SwigDerivedClassHasMethod("write_collection_ascii_2arg", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateTK_PolyCylinder_24(SwigDirectorwrite_collection_ascii_2arg);
    if (SwigDerivedClassHasMethod("write_collection_ascii", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateTK_PolyCylinder_25(SwigDirectorwrite_collection_ascii);
    HCSSTREAMPINVOKE.TK_PolyCylinder_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TK_PolyCylinder));
    return hasDerivedMethod;
  }

  private int SwigDirectorRead(IntPtr tk) {
    return (int)Read(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorWrite(IntPtr tk) {
    return (int)Write(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorExecute(IntPtr tk) {
    return (int)Execute(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorInterpret__SWIG_0(IntPtr tk, ID_Key key, int variant) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key, variant);
  }

  private int SwigDirectorInterpret__SWIG_1(IntPtr tk, ID_Key key) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key);
  }

  private int SwigDirectorInterpret_special(IntPtr tk, ID_Key key, string special) {
    return (int)Interpret_special(new BStreamFileToolkit(tk, false), key, special);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorMatch_Instance(IntPtr tk, IntPtr instance) {
    return Match_Instance(new BStreamFileToolkit(tk, false), (instance == IntPtr.Zero) ? null : new Recorded_Instance(instance, false));
  }

  private int SwigDirectorClone(IntPtr tk, IntPtr handler) {
    return (int)Clone(new BStreamFileToolkit(tk, false), (handler == IntPtr.Zero) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false));
  }

  private bool SwigDirectorNeedsContext(IntPtr tk) {
    return NeedsContext(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorEnumerateEdges() {
    return (int)EnumerateEdges();
  }

  private int SwigDirectorLabelFakeEdges() {
    return (int)LabelFakeEdges();
  }

  private bool SwigDirectorAllowInstancing(IntPtr tk) {
    return AllowInstancing(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_trivial_points(IntPtr tk) {
    return (int)read_trivial_points(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_trivial_points(IntPtr tk) {
    return (int)write_trivial_points(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_collection(IntPtr tk) {
    return (int)read_collection(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_collection_3arg(IntPtr tk, bool write_tag, int variant) {
    return (int)write_collection_3arg(new BStreamFileToolkit(tk, false), write_tag, variant);
  }

  private int SwigDirectorwrite_collection_2arg(IntPtr tk, bool write_tag) {
    return (int)write_collection_2arg(new BStreamFileToolkit(tk, false), write_tag);
  }

  private int SwigDirectorwrite_collection(IntPtr tk) {
    return (int)write_collection(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_trivial_points_ascii(IntPtr tk) {
    return (int)read_trivial_points_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_trivial_points_ascii(IntPtr tk) {
    return (int)write_trivial_points_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_collection_ascii(IntPtr tk) {
    return (int)read_collection_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_vertex_marker_sizes_ascii(IntPtr tk) {
    return (int)write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_collection_ascii_3arg(IntPtr tk, bool write_tag, int variant) {
    return (int)write_collection_ascii_3arg(new BStreamFileToolkit(tk, false), write_tag, variant);
  }

  private int SwigDirectorwrite_collection_ascii_2arg(IntPtr tk, bool write_tag) {
    return (int)write_collection_ascii_2arg(new BStreamFileToolkit(tk, false), write_tag);
  }

  private int SwigDirectorwrite_collection_ascii(IntPtr tk) {
    return (int)write_collection_ascii(new BStreamFileToolkit(tk, false));
  }

  public delegate int SwigDelegateTK_PolyCylinder_0(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_1(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_2(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_3(IntPtr tk, ID_Key key, int variant);
  public delegate int SwigDelegateTK_PolyCylinder_4(IntPtr tk, ID_Key key);
  public delegate int SwigDelegateTK_PolyCylinder_5(IntPtr tk, ID_Key key, string special);
  public delegate void SwigDelegateTK_PolyCylinder_6();
  public delegate bool SwigDelegateTK_PolyCylinder_7(IntPtr tk, IntPtr instance);
  public delegate int SwigDelegateTK_PolyCylinder_8(IntPtr tk, IntPtr handler);
  public delegate bool SwigDelegateTK_PolyCylinder_9(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_10();
  public delegate int SwigDelegateTK_PolyCylinder_11();
  public delegate bool SwigDelegateTK_PolyCylinder_12(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_13(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_14(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_15(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_16(IntPtr tk, bool write_tag, int variant);
  public delegate int SwigDelegateTK_PolyCylinder_17(IntPtr tk, bool write_tag);
  public delegate int SwigDelegateTK_PolyCylinder_18(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_19(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_20(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_21(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_22(IntPtr tk);
  public delegate int SwigDelegateTK_PolyCylinder_23(IntPtr tk, bool write_tag, int variant);
  public delegate int SwigDelegateTK_PolyCylinder_24(IntPtr tk, bool write_tag);
  public delegate int SwigDelegateTK_PolyCylinder_25(IntPtr tk);

  private SwigDelegateTK_PolyCylinder_0 swigDelegate0;
  private SwigDelegateTK_PolyCylinder_1 swigDelegate1;
  private SwigDelegateTK_PolyCylinder_2 swigDelegate2;
  private SwigDelegateTK_PolyCylinder_3 swigDelegate3;
  private SwigDelegateTK_PolyCylinder_4 swigDelegate4;
  private SwigDelegateTK_PolyCylinder_5 swigDelegate5;
  private SwigDelegateTK_PolyCylinder_6 swigDelegate6;
  private SwigDelegateTK_PolyCylinder_7 swigDelegate7;
  private SwigDelegateTK_PolyCylinder_8 swigDelegate8;
  private SwigDelegateTK_PolyCylinder_9 swigDelegate9;
  private SwigDelegateTK_PolyCylinder_10 swigDelegate10;
  private SwigDelegateTK_PolyCylinder_11 swigDelegate11;
  private SwigDelegateTK_PolyCylinder_12 swigDelegate12;
  private SwigDelegateTK_PolyCylinder_13 swigDelegate13;
  private SwigDelegateTK_PolyCylinder_14 swigDelegate14;
  private SwigDelegateTK_PolyCylinder_15 swigDelegate15;
  private SwigDelegateTK_PolyCylinder_16 swigDelegate16;
  private SwigDelegateTK_PolyCylinder_17 swigDelegate17;
  private SwigDelegateTK_PolyCylinder_18 swigDelegate18;
  private SwigDelegateTK_PolyCylinder_19 swigDelegate19;
  private SwigDelegateTK_PolyCylinder_20 swigDelegate20;
  private SwigDelegateTK_PolyCylinder_21 swigDelegate21;
  private SwigDelegateTK_PolyCylinder_22 swigDelegate22;
  private SwigDelegateTK_PolyCylinder_23 swigDelegate23;
  private SwigDelegateTK_PolyCylinder_24 swigDelegate24;
  private SwigDelegateTK_PolyCylinder_25 swigDelegate25;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(BStreamFileToolkit), typeof(Recorded_Instance) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(BStreamFileToolkit), typeof(SWIGTYPE_p_p_BBaseOpcodeHandler) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes10 = new Type[] {  };
  private static Type[] swigMethodTypes11 = new Type[] {  };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(BStreamFileToolkit), typeof(bool), typeof(int) };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(BStreamFileToolkit), typeof(bool) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes19 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes22 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes23 = new Type[] { typeof(BStreamFileToolkit), typeof(bool), typeof(int) };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(BStreamFileToolkit), typeof(bool) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(BStreamFileToolkit) };
  public enum Capping_Options {
    TKCYL_NORMAL_FIRST = 0x04,
    TKCYL_NORMAL_SECOND = 0x08,
    TKCYL_OPTIONALS = 0x10
  }

}
