/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
using ID_Key = System.Int64;
#else
using HLONG = System.Int32;
using ID_Key = System.Int32;
#endif


public class TK_Polyhedron : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  public TK_Polyhedron(IntPtr cPtr, bool cMemoryOwn) : base(HCSSTREAMPINVOKE.TK_PolyhedronUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_Polyhedron obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public IntPtr GetPoints() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetPoints__SWIG_0(swigCPtr);}

  public IntPtr GetDPoints() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetDPoints__SWIG_0(swigCPtr);}

  public int GetPointCount() {
    int ret = HCSSTREAMPINVOKE.TK_Polyhedron_GetPointCount(swigCPtr);
    return ret;
  }

  public IntPtr GetExists() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetExists__SWIG_0(swigCPtr);}

  public IntPtr GetFaceExists() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetFaceExists__SWIG_0(swigCPtr);}

  public ID_Key GetKey() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetKey(swigCPtr);}

  public byte GetSubop() {
    byte ret = HCSSTREAMPINVOKE.TK_Polyhedron_GetSubop(swigCPtr);
    return ret;
  }

  public ushort GetSubop2() {
    ushort ret = HCSSTREAMPINVOKE.TK_Polyhedron_GetSubop2(swigCPtr);
    return ret;
  }

  public IntPtr GetBounding() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetBounding(swigCPtr);}

  public IntPtr GetVertexNormals() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexNormals__SWIG_0(swigCPtr);}

  public IntPtr GetVertexParameters() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexParameters__SWIG_0(swigCPtr);}

  public IntPtr GetVertexFaceColors() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexFaceColors__SWIG_0(swigCPtr);}

  public IntPtr GetVertexEdgeColors() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexEdgeColors__SWIG_0(swigCPtr);}

  public IntPtr GetVertexMarkerColors() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexMarkerColors__SWIG_0(swigCPtr);}

  public IntPtr GetVertexMarkerRGBAs() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexMarkerRGBAs__SWIG_0(swigCPtr);}

  public IntPtr GetVertexColors() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexColors__SWIG_0(swigCPtr);}

  public IntPtr GetVertexFaceIndices() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexFaceIndices__SWIG_0(swigCPtr);}

  public IntPtr GetVertexEdgeIndices() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexEdgeIndices__SWIG_0(swigCPtr);}

  public IntPtr GetVertexMarkerIndices() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexMarkerIndices__SWIG_0(swigCPtr);}

  public IntPtr GetVertexIndices() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetVertexIndices__SWIG_0(swigCPtr);}

  public IntPtr GetFaceColors() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetFaceColors__SWIG_0(swigCPtr);}

  public IntPtr GetFaceIndices() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetFaceIndices__SWIG_0(swigCPtr);}

  public IntPtr GetFaceRegions() {return HCSSTREAMPINVOKE.TK_Polyhedron_GetFaceRegions__SWIG_0(swigCPtr);}

  public int GetPriority() {
    int ret = HCSSTREAMPINVOKE.TK_Polyhedron_GetPriority(swigCPtr);
    return ret;
  }

  public void SetPriority(int priority) {
    HCSSTREAMPINVOKE.TK_Polyhedron_SetPriority(swigCPtr, priority);
  }

  public TK_Status SetKey(BStreamFileToolkit tk, ID_Key key) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetKey(swigCPtr, BStreamFileToolkit.getCPtr(tk), key);
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status SetSubop(byte subop) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetSubop(swigCPtr, subop);
    return ret;
  }

  public TK_Status SetSubop2(ushort subop2) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetSubop2(swigCPtr, subop2);
    return ret;
  }

  public TK_Status InitSubop(BStreamFileToolkit tk, int lodlevel, bool is_firstpass) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_InitSubop(swigCPtr, BStreamFileToolkit.getCPtr(tk), lodlevel, is_firstpass);
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status SetBounding(float[] bbox) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetBounding(swigCPtr, bbox);
    return ret;
  }

  public TK_Status SetPoints(int count, float[] points) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetPoints__SWIG_0(swigCPtr, count, points);
    return ret;
  }

  public TK_Status SetPoints(int count) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetPoints__SWIG_1(swigCPtr, count);
    return ret;
  }

  public TK_Status SetDPoints(int count, double[] points) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetDPoints__SWIG_0(swigCPtr, count, points);
    return ret;
  }

  public TK_Status SetDPoints(int count) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetDPoints__SWIG_1(swigCPtr, count);
    return ret;
  }

  public TK_Status SetVertexNormals(float[] normals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexNormals__SWIG_0(swigCPtr, normals);
    return ret;
  }

  public TK_Status SetVertexNormals() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexNormals__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexParameters(float[] parameters, int width) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexParameters__SWIG_0(swigCPtr, parameters, width);
    return ret;
  }

  public TK_Status SetVertexParameters(float[] parameters) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexParameters__SWIG_1(swigCPtr, parameters);
    return ret;
  }

  public TK_Status SetVertexParameters() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexParameters__SWIG_2(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexFaceColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexFaceColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetVertexFaceColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexFaceColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexEdgeColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexEdgeColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetVertexEdgeColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexEdgeColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetVertexMarkerColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerRGBAs(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetVertexMarkerRGBAs() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetVertexColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexFaceIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexFaceIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetVertexFaceIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexFaceIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexEdgeIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexEdgeIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetVertexEdgeIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexEdgeIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetVertexMarkerIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetVertexIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerVisibilities(string visibilities) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_0(swigCPtr, visibilities);
    return ret;
  }

  public TK_Status SetVertexMarkerVisibilities() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerSizes(float[] sizes) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerSizes__SWIG_0(swigCPtr, sizes);
    return ret;
  }

  public TK_Status SetVertexMarkerSizes() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerSizes__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerSymbols(string symbols) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerSymbols__SWIG_0(swigCPtr, symbols);
    return ret;
  }

  public TK_Status SetVertexMarkerSymbols() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerSymbols__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetVertexMarkerSymbolStrings() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetVertexMarkerSymbolStrings(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetFaceColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceNormals(float[] normals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceNormals__SWIG_0(swigCPtr, normals);
    return ret;
  }

  public TK_Status SetFaceNormals() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceNormals__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceVisibilities(string visibilities) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceVisibilities__SWIG_0(swigCPtr, visibilities);
    return ret;
  }

  public TK_Status SetFaceVisibilities() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceVisibilities__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFacePatterns(string patterns) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFacePatterns__SWIG_0(swigCPtr, patterns);
    return ret;
  }

  public TK_Status SetFacePatterns() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFacePatterns__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetFaceIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceRegions(int[] regions) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceRegions__SWIG_0(swigCPtr, regions);
    return ret;
  }

  public TK_Status SetFaceRegions() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceRegions__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeColors(float[] colors) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeColors__SWIG_0(swigCPtr, colors);
    return ret;
  }

  public TK_Status SetEdgeColors() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeColors__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeIndices(float[] indices) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeIndices__SWIG_0(swigCPtr, indices);
    return ret;
  }

  public TK_Status SetEdgeIndices() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeIndices__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeNormals(float[] normals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeNormals__SWIG_0(swigCPtr, normals);
    return ret;
  }

  public TK_Status SetEdgeNormals() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeNormals__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeVisibilities(string visibilities) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeVisibilities__SWIG_0(swigCPtr, visibilities);
    return ret;
  }

  public TK_Status SetEdgeVisibilities() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeVisibilities__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgePatterns(string patterns) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgePatterns__SWIG_0(swigCPtr, patterns);
    return ret;
  }

  public TK_Status SetEdgePatterns() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgePatterns__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgePatternStrings() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgePatternStrings(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeWeights(float[] weights) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeWeights__SWIG_0(swigCPtr, weights);
    return ret;
  }

  public TK_Status SetEdgeWeights() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeWeights__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetExists(uint[] vals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetExists__SWIG_0(swigCPtr, vals);
    return ret;
  }

  public TK_Status SetExists() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetExists__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetFaceExists(uint[] vals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceExists__SWIG_0(swigCPtr, vals);
    return ret;
  }

  public TK_Status SetFaceExists() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetFaceExists__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status SetEdgeExists(uint[] vals) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeExists__SWIG_0(swigCPtr, vals);
    return ret;
  }

  public TK_Status SetEdgeExists() {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_SetEdgeExists__SWIG_1(swigCPtr);
    return ret;
  }

  public TK_Status AppendObject(BStreamFileToolkit tk, BBaseOpcodeHandler obj) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Polyhedron_AppendObject(swigCPtr, BStreamFileToolkit.getCPtr(tk), BBaseOpcodeHandler.getCPtr(obj));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BBaseOpcodeHandler PopObject() {
    IntPtr cPtr = HCSSTREAMPINVOKE.TK_Polyhedron_PopObject(swigCPtr);
    BBaseOpcodeHandler ret = (cPtr == IntPtr.Zero) ? null : new BBaseOpcodeHandler(cPtr, false);
    return ret;
  }

  public bool HasOptionals() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasOptionals(swigCPtr);
    return ret;
  }

  public bool HasOptionalsCommunicator() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasOptionalsCommunicator(swigCPtr);
    return ret;
  }

  public bool HasVertexNormals() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexNormals(swigCPtr);
    return ret;
  }

  public bool HasVertexParameters() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexParameters(swigCPtr);
    return ret;
  }

  public bool HasVertexFaceColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexFaceColors(swigCPtr);
    return ret;
  }

  public bool HasVertexEdgeColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexEdgeColors(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerColors(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerRGBAs() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerRGBAs(swigCPtr);
    return ret;
  }

  public bool HasVertexColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexColors(swigCPtr);
    return ret;
  }

  public bool HasVertexFaceIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexFaceIndices(swigCPtr);
    return ret;
  }

  public bool HasVertexEdgeIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexEdgeIndices(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerIndices(swigCPtr);
    return ret;
  }

  public bool HasVertexIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexIndices(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerVisibilities() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerVisibilities(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerSymbols() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerSymbols(swigCPtr);
    return ret;
  }

  public bool HasVertexMarkerSizes() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexMarkerSizes(swigCPtr);
    return ret;
  }

  public bool HasVertexAttributes() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasVertexAttributes(swigCPtr);
    return ret;
  }

  public bool HasFaceColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceColors(swigCPtr);
    return ret;
  }

  public bool HasFaceIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceIndices(swigCPtr);
    return ret;
  }

  public bool HasFaceNormals() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceNormals(swigCPtr);
    return ret;
  }

  public bool HasFaceVisibilities() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceVisibilities(swigCPtr);
    return ret;
  }

  public bool HasFacePatterns() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFacePatterns(swigCPtr);
    return ret;
  }

  public bool HasFaceRegions() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceRegions(swigCPtr);
    return ret;
  }

  public bool HasFaceAttributes() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceAttributes(swigCPtr);
    return ret;
  }

  public bool HasFaceAttributesCommunicator() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasFaceAttributesCommunicator(swigCPtr);
    return ret;
  }

  public bool HasEdgeColors() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeColors(swigCPtr);
    return ret;
  }

  public bool HasEdgeIndices() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeIndices(swigCPtr);
    return ret;
  }

  public bool HasEdgeNormals() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeNormals(swigCPtr);
    return ret;
  }

  public bool HasEdgeVisibilities() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeVisibilities(swigCPtr);
    return ret;
  }

  public bool HasEdgePatterns() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgePatterns(swigCPtr);
    return ret;
  }

  public bool HasEdgeWeights() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeWeights(swigCPtr);
    return ret;
  }

  public bool HasEdgeAttributes() {
    bool ret = HCSSTREAMPINVOKE.TK_Polyhedron_HasEdgeAttributes(swigCPtr);
    return ret;
  }

  protected virtual TK_Status EnumerateEdges() {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_EnumerateEdges(swigCPtr) : HCSSTREAMPINVOKE.TK_Polyhedron_EnumerateEdgesSwigExplicitTK_Polyhedron(swigCPtr));
    return ret;
  }

  protected virtual TK_Status LabelFakeEdges() {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_LabelFakeEdges(swigCPtr) : HCSSTREAMPINVOKE.TK_Polyhedron_LabelFakeEdgesSwigExplicitTK_Polyhedron(swigCPtr));
    return ret;
  }

  protected virtual bool AllowInstancing(BStreamFileToolkit tk) {
    bool ret = ((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_AllowInstancing(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_AllowInstancingSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected TK_Polyhedron(byte op) : this(HCSSTREAMPINVOKE.new_TK_Polyhedron(op), true) {
    SwigDirectorConnect();
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_ReadSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_WriteSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    if (this.GetType() == typeof(TK_Polyhedron)) HCSSTREAMPINVOKE.TK_Polyhedron_Reset(swigCPtr); else HCSSTREAMPINVOKE.TK_Polyhedron_ResetSwigExplicitTK_Polyhedron(swigCPtr);
  }

  protected virtual TK_Status read_trivial_points(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_read_trivial_points(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_read_trivial_pointsSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_trivial_points(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_trivial_points(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_write_trivial_pointsSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status read_collection(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_read_collection(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_read_collectionSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection_3arg(BStreamFileToolkit tk, bool write_tag, int variant) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_3arg(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag, variant) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_3argSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag, variant));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection_2arg(BStreamFileToolkit tk, bool write_tag) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_2arg(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_2argSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status read_trivial_points_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_read_trivial_points_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_read_trivial_points_asciiSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_trivial_points_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_trivial_points_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_write_trivial_points_asciiSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status read_collection_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_read_collection_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_read_collection_asciiSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_vertex_marker_sizes_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_vertex_marker_sizes_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_write_vertex_marker_sizes_asciiSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection_ascii_3arg(BStreamFileToolkit tk, bool write_tag, int variant) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_ascii_3arg(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag, variant) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_ascii_3argSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag, variant));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection_ascii_2arg(BStreamFileToolkit tk, bool write_tag) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_ascii_2arg(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_ascii_2argSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk), write_tag));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual TK_Status write_collection_ascii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Polyhedron)) ? HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_ascii(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTK_Polyhedron_0(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTK_Polyhedron_1(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTK_Polyhedron_2(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTK_Polyhedron_3(SwigDirectorInterpret__SWIG_0);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTK_Polyhedron_4(SwigDirectorInterpret__SWIG_1);
    if (SwigDerivedClassHasMethod("Interpret_special", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTK_Polyhedron_5(SwigDirectorInterpret_special);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTK_Polyhedron_6(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("Match_Instance", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTK_Polyhedron_7(SwigDirectorMatch_Instance);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTK_Polyhedron_8(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("NeedsContext", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTK_Polyhedron_9(SwigDirectorNeedsContext);
    if (SwigDerivedClassHasMethod("EnumerateEdges", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateTK_Polyhedron_10(SwigDirectorEnumerateEdges);
    if (SwigDerivedClassHasMethod("LabelFakeEdges", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateTK_Polyhedron_11(SwigDirectorLabelFakeEdges);
    if (SwigDerivedClassHasMethod("AllowInstancing", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateTK_Polyhedron_12(SwigDirectorAllowInstancing);
    if (SwigDerivedClassHasMethod("read_trivial_points", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateTK_Polyhedron_13(SwigDirectorread_trivial_points);
    if (SwigDerivedClassHasMethod("write_trivial_points", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateTK_Polyhedron_14(SwigDirectorwrite_trivial_points);
    if (SwigDerivedClassHasMethod("read_collection", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateTK_Polyhedron_15(SwigDirectorread_collection);
    if (SwigDerivedClassHasMethod("write_collection_3arg", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateTK_Polyhedron_16(SwigDirectorwrite_collection_3arg);
    if (SwigDerivedClassHasMethod("write_collection_2arg", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateTK_Polyhedron_17(SwigDirectorwrite_collection_2arg);
    if (SwigDerivedClassHasMethod("write_collection", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateTK_Polyhedron_18(SwigDirectorwrite_collection);
    if (SwigDerivedClassHasMethod("read_trivial_points_ascii", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateTK_Polyhedron_19(SwigDirectorread_trivial_points_ascii);
    if (SwigDerivedClassHasMethod("write_trivial_points_ascii", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateTK_Polyhedron_20(SwigDirectorwrite_trivial_points_ascii);
    if (SwigDerivedClassHasMethod("read_collection_ascii", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateTK_Polyhedron_21(SwigDirectorread_collection_ascii);
    if (SwigDerivedClassHasMethod("write_vertex_marker_sizes_ascii", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateTK_Polyhedron_22(SwigDirectorwrite_vertex_marker_sizes_ascii);
    if (SwigDerivedClassHasMethod("write_collection_ascii_3arg", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateTK_Polyhedron_23(SwigDirectorwrite_collection_ascii_3arg);
    if (SwigDerivedClassHasMethod("write_collection_ascii_2arg", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateTK_Polyhedron_24(SwigDirectorwrite_collection_ascii_2arg);
    if (SwigDerivedClassHasMethod("write_collection_ascii", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateTK_Polyhedron_25(SwigDirectorwrite_collection_ascii);
    HCSSTREAMPINVOKE.TK_Polyhedron_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TK_Polyhedron));
    return hasDerivedMethod;
  }

  private int SwigDirectorRead(IntPtr tk) {
    return (int)Read(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorWrite(IntPtr tk) {
    return (int)Write(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorExecute(IntPtr tk) {
    return (int)Execute(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorInterpret__SWIG_0(IntPtr tk, ID_Key key, int variant) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key, variant);
  }

  private int SwigDirectorInterpret__SWIG_1(IntPtr tk, ID_Key key) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key);
  }

  private int SwigDirectorInterpret_special(IntPtr tk, ID_Key key, string special) {
    return (int)Interpret_special(new BStreamFileToolkit(tk, false), key, special);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorMatch_Instance(IntPtr tk, IntPtr instance) {
    return Match_Instance(new BStreamFileToolkit(tk, false), (instance == IntPtr.Zero) ? null : new Recorded_Instance(instance, false));
  }

  private int SwigDirectorClone(IntPtr tk, IntPtr handler) {
    return (int)Clone(new BStreamFileToolkit(tk, false), (handler == IntPtr.Zero) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false));
  }

  private bool SwigDirectorNeedsContext(IntPtr tk) {
    return NeedsContext(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorEnumerateEdges() {
    return (int)EnumerateEdges();
  }

  private int SwigDirectorLabelFakeEdges() {
    return (int)LabelFakeEdges();
  }

  private bool SwigDirectorAllowInstancing(IntPtr tk) {
    return AllowInstancing(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_trivial_points(IntPtr tk) {
    return (int)read_trivial_points(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_trivial_points(IntPtr tk) {
    return (int)write_trivial_points(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_collection(IntPtr tk) {
    return (int)read_collection(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_collection_3arg(IntPtr tk, bool write_tag, int variant) {
    return (int)write_collection_3arg(new BStreamFileToolkit(tk, false), write_tag, variant);
  }

  private int SwigDirectorwrite_collection_2arg(IntPtr tk, bool write_tag) {
    return (int)write_collection_2arg(new BStreamFileToolkit(tk, false), write_tag);
  }

  private int SwigDirectorwrite_collection(IntPtr tk) {
    return (int)write_collection(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_trivial_points_ascii(IntPtr tk) {
    return (int)read_trivial_points_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_trivial_points_ascii(IntPtr tk) {
    return (int)write_trivial_points_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorread_collection_ascii(IntPtr tk) {
    return (int)read_collection_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_vertex_marker_sizes_ascii(IntPtr tk) {
    return (int)write_vertex_marker_sizes_ascii(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorwrite_collection_ascii_3arg(IntPtr tk, bool write_tag, int variant) {
    return (int)write_collection_ascii_3arg(new BStreamFileToolkit(tk, false), write_tag, variant);
  }

  private int SwigDirectorwrite_collection_ascii_2arg(IntPtr tk, bool write_tag) {
    return (int)write_collection_ascii_2arg(new BStreamFileToolkit(tk, false), write_tag);
  }

  private int SwigDirectorwrite_collection_ascii(IntPtr tk) {
    return (int)write_collection_ascii(new BStreamFileToolkit(tk, false));
  }

  public delegate int SwigDelegateTK_Polyhedron_0(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_1(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_2(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_3(IntPtr tk, ID_Key key, int variant);
  public delegate int SwigDelegateTK_Polyhedron_4(IntPtr tk, ID_Key key);
  public delegate int SwigDelegateTK_Polyhedron_5(IntPtr tk, ID_Key key, string special);
  public delegate void SwigDelegateTK_Polyhedron_6();
  public delegate bool SwigDelegateTK_Polyhedron_7(IntPtr tk, IntPtr instance);
  public delegate int SwigDelegateTK_Polyhedron_8(IntPtr tk, IntPtr handler);
  public delegate bool SwigDelegateTK_Polyhedron_9(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_10();
  public delegate int SwigDelegateTK_Polyhedron_11();
  public delegate bool SwigDelegateTK_Polyhedron_12(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_13(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_14(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_15(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_16(IntPtr tk, bool write_tag, int variant);
  public delegate int SwigDelegateTK_Polyhedron_17(IntPtr tk, bool write_tag);
  public delegate int SwigDelegateTK_Polyhedron_18(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_19(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_20(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_21(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_22(IntPtr tk);
  public delegate int SwigDelegateTK_Polyhedron_23(IntPtr tk, bool write_tag, int variant);
  public delegate int SwigDelegateTK_Polyhedron_24(IntPtr tk, bool write_tag);
  public delegate int SwigDelegateTK_Polyhedron_25(IntPtr tk);

  private SwigDelegateTK_Polyhedron_0 swigDelegate0;
  private SwigDelegateTK_Polyhedron_1 swigDelegate1;
  private SwigDelegateTK_Polyhedron_2 swigDelegate2;
  private SwigDelegateTK_Polyhedron_3 swigDelegate3;
  private SwigDelegateTK_Polyhedron_4 swigDelegate4;
  private SwigDelegateTK_Polyhedron_5 swigDelegate5;
  private SwigDelegateTK_Polyhedron_6 swigDelegate6;
  private SwigDelegateTK_Polyhedron_7 swigDelegate7;
  private SwigDelegateTK_Polyhedron_8 swigDelegate8;
  private SwigDelegateTK_Polyhedron_9 swigDelegate9;
  private SwigDelegateTK_Polyhedron_10 swigDelegate10;
  private SwigDelegateTK_Polyhedron_11 swigDelegate11;
  private SwigDelegateTK_Polyhedron_12 swigDelegate12;
  private SwigDelegateTK_Polyhedron_13 swigDelegate13;
  private SwigDelegateTK_Polyhedron_14 swigDelegate14;
  private SwigDelegateTK_Polyhedron_15 swigDelegate15;
  private SwigDelegateTK_Polyhedron_16 swigDelegate16;
  private SwigDelegateTK_Polyhedron_17 swigDelegate17;
  private SwigDelegateTK_Polyhedron_18 swigDelegate18;
  private SwigDelegateTK_Polyhedron_19 swigDelegate19;
  private SwigDelegateTK_Polyhedron_20 swigDelegate20;
  private SwigDelegateTK_Polyhedron_21 swigDelegate21;
  private SwigDelegateTK_Polyhedron_22 swigDelegate22;
  private SwigDelegateTK_Polyhedron_23 swigDelegate23;
  private SwigDelegateTK_Polyhedron_24 swigDelegate24;
  private SwigDelegateTK_Polyhedron_25 swigDelegate25;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(BStreamFileToolkit), typeof(Recorded_Instance) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(BStreamFileToolkit), typeof(SWIGTYPE_p_p_BBaseOpcodeHandler) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes10 = new Type[] {  };
  private static Type[] swigMethodTypes11 = new Type[] {  };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(BStreamFileToolkit), typeof(bool), typeof(int) };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(BStreamFileToolkit), typeof(bool) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes19 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes22 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes23 = new Type[] { typeof(BStreamFileToolkit), typeof(bool), typeof(int) };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(BStreamFileToolkit), typeof(bool) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(BStreamFileToolkit) };
  public enum Exists {
    Vertex_None = 0x0000,
    Vertex_Normal = 0x0001,
    Vertex_Parameter = 0x0002,
    Vertex_Face_Color = 0x0004,
    Vertex_Edge_Color = 0x0008,
    Vertex_Marker_Color = 0x0010,
    Vertex_Face_Index = 0x0020,
    Vertex_Edge_Index = 0x0040,
    Vertex_Marker_Index = 0x0080,
    Vertex_Marker_Visibility = 0x0100,
    Vertex_Marker_Size = 0x0200,
    Vertex_Marker_Symbol = 0x0400,
    Vertex_Marker_RGBA = 0x0800,
    Vertex_Any_Color = 0x08FC
  }

  public enum Face_Exists {
    Face_None = 0x0000,
    Face_Color = 0x0001,
    Face_Index = 0x0002,
    Face_Any_Color = 0x0003,
    Face_Normal = 0x0004,
    Face_Visibility = 0x0008,
    Face_Pattern = 0x0010
  }

  public enum Edge_Exists {
    Edge_None = 0x0000,
    Edge_Color = 0x0001,
    Edge_Index = 0x0002,
    Edge_Any_Color = 0x0003,
    Edge_Normal = 0x0004,
    Edge_Visibility = 0x0008,
    Edge_Pattern = 0x0010,
    Edge_Weight = 0x0020,
    Fake_Edge = 0x8000
  }

  public enum Suboptions {
    TKSH_STANDARD = 0x00,
    TKSH_COMPRESSED_POINTS = 0x01,
    TKSH_COMPRESSED_FACES = 0x02,
    TKSH_TRISTRIPS = 0x04,
    TKSH_HAS_OPTIONALS = 0x08,
    TKSH_FIRSTPASS = 0x10,
    TKSH_BOUNDING_ONLY = 0x20,
    TKSH_CONNECTIVITY_COMPRESSION = 0x40,
    TKSH_EXPANDED = 0x80
  }

  public enum Suboptions2 {
    TKSH2_COLLECTION = 0x0001,
    TKSH2_NULL = 0x0002,
    TKSH2_HAS_NEGATIVE_FACES = 0x0004,
    TKSH2_GLOBAL_QUANTIZATION = 0x0008
  }

  public enum Opt_Opcode {
    OPT_TERMINATE = 0,
    OPT_ALL_NORMALS_COMPRESSED = 1,
    OPT_NORMALS_COMPRESSED = 2,
    OPT_ALL_PARAMETERS_COMPRESSED = 3,
    OPT_PARAMETERS_COMPRESSED = 4,
    OPT_ALL_VFCOLORS = 5,
    OPT_VERTEX_FCOLORS = 6,
    OPT_ALL_VECOLORS = 7,
    OPT_VERTEX_ECOLORS = 8,
    OPT_ALL_VMCOLORS = 9,
    OPT_VERTEX_MCOLORS = 10,
    OPT_ALL_VFINDICES = 11,
    OPT_VERTEX_FINDICES = 12,
    OPT_ALL_VEINDICES = 13,
    OPT_VERTEX_EINDICES = 14,
    OPT_ALL_VMINDICES = 15,
    OPT_VERTEX_MINDICES = 16,
    OPT_ALL_NORMALS = 17,
    OPT_NORMALS = 18,
    OPT_ALL_NORMALS_POLAR = 19,
    OPT_NORMALS_POLAR = 20,
    OPT_ALL_VMVISIBILITIES = 21,
    OPT_VERTEX_MARKER_VISIBILITIES = 22,
    OPT_ALL_VMSYMBOLS = 23,
    OPT_VERTEX_MARKER_SYMBOLS = 24,
    OPT_ALL_VMSIZES = 25,
    OPT_VERTEX_MARKER_SIZES = 26,
    OPT_PARAMETERS = 27,
    OPT_ALL_PARAMETERS = 28,
    OPT_ALL_VMRGBAS = 29,
    OPT_VERTEX_MRGBAS = 30,
    OPT_ALL_FACE_COLORS = 33,
    OPT_FACE_COLORS = 34,
    OPT_ALL_FACE_INDICES = 35,
    OPT_FACE_INDICES = 36,
    OPT_ALL_FACE_NORMALS_POLAR = 37,
    OPT_FACE_NORMALS_POLAR = 38,
    OPT_ALL_FACE_VISIBILITIES = 39,
    OPT_FACE_VISIBILITIES = 40,
    OPT_ALL_FACE_PATTERNS = 41,
    OPT_FACE_PATTERNS = 42,
    OPT_FACE_REGIONS = 51,
    OPT_ALL_EDGE_COLORS = 71,
    OPT_EDGE_COLORS = 72,
    OPT_ALL_EDGE_INDICES = 73,
    OPT_EDGE_INDICES = 74,
    OPT_ALL_EDGE_NORMALS_POLAR = 75,
    OPT_EDGE_NORMALS_POLAR = 76,
    OPT_ALL_EDGE_VISIBILITIES = 77,
    OPT_EDGE_VISIBILITIES = 78,
    OPT_ALL_EDGE_PATTERNS = 79,
    OPT_EDGE_PATTERNS = 80,
    OPT_ALL_EDGE_WEIGHTS = 81,
    OPT_EDGE_WEIGHTS = 82,
    OPT_RESERVED_SPATIAL = 90,
    OPT_ENTITY_ATTRIBUTES = 99,
    OPT_ALL_VFCOLORS_UNCOMPRESSED = 101,
    OPT_VERTEX_FCOLORS_UNCOMPRESSED = 102,
    OPT_ALL_VECOLORS_UNCOMPRESSED = 103,
    OPT_VERTEX_ECOLORS_UNCOMPRESSED = 104,
    OPT_ALL_VMCOLORS_UNCOMPRESSED = 105,
    OPT_VERTEX_MCOLORS_UNCOMPRESSED = 106,
    OPT_ALL_VMRGBAS_UNCOMPRESSED = 107,
    OPT_VERTEX_MRGBAS_UNCOMPRESSED = 108,
    OPT_ALL_VFINDICES_UNCOMPRESSED = 109,
    OPT_VERTEX_FINDICES_UNCOMPRESSED = 110,
    OPT_ALL_VEINDICES_UNCOMPRESSED = 111,
    OPT_VERTEX_EINDICES_UNCOMPRESSED = 112,
    OPT_ALL_VMINDICES_UNCOMPRESSED = 113,
    OPT_VERTEX_MINDICES_UNCOMPRESSED = 114,
    OPT_ALL_FACE_COLORS_UNCOMPRESSED = 115,
    OPT_FACE_COLORS_UNCOMPRESSED = 116,
    OPT_ALL_FACE_INDICES_UNCOMPRESSED = 117,
    OPT_FACE_INDICES_UNCOMPRESSED = 118
  }

}
