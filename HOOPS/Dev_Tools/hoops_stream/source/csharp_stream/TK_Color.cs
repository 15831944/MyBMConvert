/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
using ID_Key = System.Int64;
#else
using HLONG = System.Int32;
using ID_Key = System.Int32;
#endif


public class TK_Color : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  public TK_Color(IntPtr cPtr, bool cMemoryOwn) : base(HCSSTREAMPINVOKE.TK_ColorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_Color obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Color() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSSTREAMPINVOKE.delete_TK_Color(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Color() : this(HCSSTREAMPINVOKE.new_TK_Color(), true) {
    SwigDirectorConnect();
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Color)) ? HCSSTREAMPINVOKE.TK_Color_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Color_ReadSwigExplicitTK_Color(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Color)) ? HCSSTREAMPINVOKE.TK_Color_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Color_WriteSwigExplicitTK_Color(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Color)) ? HCSSTREAMPINVOKE.TK_Color_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HCSSTREAMPINVOKE.TK_Color_CloneSwigExplicitTK_Color(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Color_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Color_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    if (this.GetType() == typeof(TK_Color)) HCSSTREAMPINVOKE.TK_Color_Reset(swigCPtr); else HCSSTREAMPINVOKE.TK_Color_ResetSwigExplicitTK_Color(swigCPtr);
  }

  public void SetGeometry(int m) {
    HCSSTREAMPINVOKE.TK_Color_SetGeometry(swigCPtr, m);
  }

  public int GetGeometry() {
    int ret = HCSSTREAMPINVOKE.TK_Color_GetGeometry(swigCPtr);
    return ret;
  }

  public void SetChannels(int c) {
    HCSSTREAMPINVOKE.TK_Color_SetChannels(swigCPtr, c);
  }

  public int GetChannels() {
    int ret = HCSSTREAMPINVOKE.TK_Color_GetChannels(swigCPtr);
    return ret;
  }

  public void SetDiffuse(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Color_SetDiffuse__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetDiffuse(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Color_SetDiffuse__SWIG_1(swigCPtr, rgb);
  }

  public void SetDiffuseName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetDiffuseName__SWIG_0(swigCPtr, name);
  }

  public void SetDiffuseName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetDiffuseName__SWIG_1(swigCPtr, length);
  }

  public IntPtr GetDiffuse() {return HCSSTREAMPINVOKE.TK_Color_GetDiffuse(swigCPtr);}

  public string GetDiffuseName() {return HCSSTREAMPINVOKE.TK_Color_GetDiffuseName__SWIG_0(swigCPtr);}

  public void SetSpecular(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Color_SetSpecular__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetSpecular(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Color_SetSpecular__SWIG_1(swigCPtr, rgb);
  }

  public void SetSpecularName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetSpecularName__SWIG_0(swigCPtr, name);
  }

  public void SetSpecularName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetSpecularName__SWIG_1(swigCPtr, length);
  }

  public IntPtr GetSpecular() {return HCSSTREAMPINVOKE.TK_Color_GetSpecular(swigCPtr);}

  public string GetSpecularName() {return HCSSTREAMPINVOKE.TK_Color_GetSpecularName__SWIG_0(swigCPtr);}

  public void SetMirror(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Color_SetMirror__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetMirror(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Color_SetMirror__SWIG_1(swigCPtr, rgb);
  }

  public void SetMirrorName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetMirrorName__SWIG_0(swigCPtr, name);
  }

  public void SetMirrorName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetMirrorName__SWIG_1(swigCPtr, length);
  }

  public IntPtr GetMirror() {return HCSSTREAMPINVOKE.TK_Color_GetMirror(swigCPtr);}

  public string GetMirrorName() {return HCSSTREAMPINVOKE.TK_Color_GetMirrorName__SWIG_0(swigCPtr);}

  public void SetTransmission(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Color_SetTransmission__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetTransmission(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Color_SetTransmission__SWIG_1(swigCPtr, rgb);
  }

  public void SetTransmissionName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetTransmissionName__SWIG_0(swigCPtr, name);
  }

  public void SetTransmissionName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetTransmissionName__SWIG_1(swigCPtr, length);
  }

  public IntPtr GetTransmission() {return HCSSTREAMPINVOKE.TK_Color_GetTransmission(swigCPtr);}

  public string GetTransmissionName() {return HCSSTREAMPINVOKE.TK_Color_GetTransmissionName__SWIG_0(swigCPtr);}

  public void SetEmission(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Color_SetEmission__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetEmission(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Color_SetEmission__SWIG_1(swigCPtr, rgb);
  }

  public void SetEmissionName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetEmissionName__SWIG_0(swigCPtr, name);
  }

  public void SetEmissionName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetEmissionName__SWIG_1(swigCPtr, length);
  }

  public IntPtr GetEmission() {return HCSSTREAMPINVOKE.TK_Color_GetEmission(swigCPtr);}

  public string GetEmissionName() {return HCSSTREAMPINVOKE.TK_Color_GetEmissionName__SWIG_0(swigCPtr);}

  public void SetEnvironmentName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetEnvironmentName__SWIG_0(swigCPtr, name);
  }

  public void SetEnvironmentName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetEnvironmentName__SWIG_1(swigCPtr, length);
  }

  public string GetEnvironmentName() {return HCSSTREAMPINVOKE.TK_Color_GetEnvironmentName__SWIG_0(swigCPtr);}

  public void SetBumpName(string name) {
    HCSSTREAMPINVOKE.TK_Color_SetBumpName__SWIG_0(swigCPtr, name);
  }

  public void SetBumpName(int length) {
    HCSSTREAMPINVOKE.TK_Color_SetBumpName__SWIG_1(swigCPtr, length);
  }

  public string GetBumpName() {return HCSSTREAMPINVOKE.TK_Color_GetBumpName__SWIG_0(swigCPtr);}

  public void SetGloss(float g) {
    HCSSTREAMPINVOKE.TK_Color_SetGloss(swigCPtr, g);
  }

  public float GetGloss() {
    float ret = HCSSTREAMPINVOKE.TK_Color_GetGloss(swigCPtr);
    return ret;
  }

  public void SetIndex(float i) {
    HCSSTREAMPINVOKE.TK_Color_SetIndex(swigCPtr, i);
  }

  public float GetIndex() {
    float ret = HCSSTREAMPINVOKE.TK_Color_GetIndex(swigCPtr);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTK_Color_0(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTK_Color_1(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTK_Color_2(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTK_Color_3(SwigDirectorInterpret__SWIG_0);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTK_Color_4(SwigDirectorInterpret__SWIG_1);
    if (SwigDerivedClassHasMethod("Interpret_special", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTK_Color_5(SwigDirectorInterpret_special);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTK_Color_6(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("Match_Instance", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTK_Color_7(SwigDirectorMatch_Instance);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTK_Color_8(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("NeedsContext", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTK_Color_9(SwigDirectorNeedsContext);
    HCSSTREAMPINVOKE.TK_Color_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TK_Color));
    return hasDerivedMethod;
  }

  private int SwigDirectorRead(IntPtr tk) {
    return (int)Read(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorWrite(IntPtr tk) {
    return (int)Write(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorExecute(IntPtr tk) {
    return (int)Execute(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorInterpret__SWIG_0(IntPtr tk, ID_Key key, int variant) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key, variant);
  }

  private int SwigDirectorInterpret__SWIG_1(IntPtr tk, ID_Key key) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key);
  }

  private int SwigDirectorInterpret_special(IntPtr tk, ID_Key key, string special) {
    return (int)Interpret_special(new BStreamFileToolkit(tk, false), key, special);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorMatch_Instance(IntPtr tk, IntPtr instance) {
    return Match_Instance(new BStreamFileToolkit(tk, false), (instance == IntPtr.Zero) ? null : new Recorded_Instance(instance, false));
  }

  private int SwigDirectorClone(IntPtr tk, IntPtr handler) {
    return (int)Clone(new BStreamFileToolkit(tk, false), (handler == IntPtr.Zero) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false));
  }

  private bool SwigDirectorNeedsContext(IntPtr tk) {
    return NeedsContext(new BStreamFileToolkit(tk, false));
  }

  public delegate int SwigDelegateTK_Color_0(IntPtr tk);
  public delegate int SwigDelegateTK_Color_1(IntPtr tk);
  public delegate int SwigDelegateTK_Color_2(IntPtr tk);
  public delegate int SwigDelegateTK_Color_3(IntPtr tk, ID_Key key, int variant);
  public delegate int SwigDelegateTK_Color_4(IntPtr tk, ID_Key key);
  public delegate int SwigDelegateTK_Color_5(IntPtr tk, ID_Key key, string special);
  public delegate void SwigDelegateTK_Color_6();
  public delegate bool SwigDelegateTK_Color_7(IntPtr tk, IntPtr instance);
  public delegate int SwigDelegateTK_Color_8(IntPtr tk, IntPtr handler);
  public delegate bool SwigDelegateTK_Color_9(IntPtr tk);

  private SwigDelegateTK_Color_0 swigDelegate0;
  private SwigDelegateTK_Color_1 swigDelegate1;
  private SwigDelegateTK_Color_2 swigDelegate2;
  private SwigDelegateTK_Color_3 swigDelegate3;
  private SwigDelegateTK_Color_4 swigDelegate4;
  private SwigDelegateTK_Color_5 swigDelegate5;
  private SwigDelegateTK_Color_6 swigDelegate6;
  private SwigDelegateTK_Color_7 swigDelegate7;
  private SwigDelegateTK_Color_8 swigDelegate8;
  private SwigDelegateTK_Color_9 swigDelegate9;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(BStreamFileToolkit), typeof(Recorded_Instance) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(BStreamFileToolkit), typeof(SWIGTYPE_p_p_BBaseOpcodeHandler) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(BStreamFileToolkit) };
}
