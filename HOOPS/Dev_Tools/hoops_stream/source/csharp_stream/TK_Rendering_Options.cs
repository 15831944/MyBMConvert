/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
using ID_Key = System.Int64;
#else
using HLONG = System.Int32;
using ID_Key = System.Int32;
#endif


public class TK_Rendering_Options : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  public TK_Rendering_Options(IntPtr cPtr, bool cMemoryOwn) : base(HCSSTREAMPINVOKE.TK_Rendering_OptionsUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_Rendering_Options obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Rendering_Options() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSSTREAMPINVOKE.delete_TK_Rendering_Options(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Rendering_Options() : this(HCSSTREAMPINVOKE.new_TK_Rendering_Options(), true) {
    SwigDirectorConnect();
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Rendering_Options)) ? HCSSTREAMPINVOKE.TK_Rendering_Options_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Rendering_Options_ReadSwigExplicitTK_Rendering_Options(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Rendering_Options)) ? HCSSTREAMPINVOKE.TK_Rendering_Options_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk)) : HCSSTREAMPINVOKE.TK_Rendering_Options_WriteSwigExplicitTK_Rendering_Options(swigCPtr, BStreamFileToolkit.getCPtr(tk)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)((this.GetType() == typeof(TK_Rendering_Options)) ? HCSSTREAMPINVOKE.TK_Rendering_Options_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)) : HCSSTREAMPINVOKE.TK_Rendering_Options_CloneSwigExplicitTK_Rendering_Options(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler)));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Rendering_Options_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Rendering_Options_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    if (this.GetType() == typeof(TK_Rendering_Options)) HCSSTREAMPINVOKE.TK_Rendering_Options_Reset(swigCPtr); else HCSSTREAMPINVOKE.TK_Rendering_Options_ResetSwigExplicitTK_Rendering_Options(swigCPtr);
  }

  public void SetMask(int m0, int m1, int m2) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetMask__SWIG_0(swigCPtr, m0, m1, m2);
  }

  public void SetMask(int m0, int m1) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetMask__SWIG_1(swigCPtr, m0, m1);
  }

  public void SetMask(int m0) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetMask__SWIG_2(swigCPtr, m0);
  }

  public int GetMask(int index) {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetMask__SWIG_0(swigCPtr, index);
    return ret;
  }

  public int GetMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetMask__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetValue(int v0, int v1, int v2) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetValue__SWIG_0(swigCPtr, v0, v1, v2);
  }

  public void SetValue(int v0, int v1) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetValue__SWIG_1(swigCPtr, v0, v1);
  }

  public void SetValue(int v0) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetValue__SWIG_2(swigCPtr, v0);
  }

  public int GetValue(int index) {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetValue__SWIG_0(swigCPtr, index);
    return ret;
  }

  public int GetValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetValue__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetHSR(int h) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHSR(swigCPtr, h);
  }

  public int GetHSR() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHSR(swigCPtr);
    return ret;
  }

  public void SetTransparentHSR(int t) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetTransparentHSR(swigCPtr, t);
  }

  public int GetTransparentHSR() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetTransparentHSR(swigCPtr);
    return ret;
  }

  public void SetTransparentStyle(int s) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetTransparentStyle(swigCPtr, s);
  }

  public int GetTransparentStyle() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetTransparentStyle(swigCPtr);
    return ret;
  }

  public void SetTechnology(int t) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetTechnology(swigCPtr, t);
  }

  public int GetTechnology() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetTechnology(swigCPtr);
    return ret;
  }

  public void SetQuantization(int q) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetQuantization(swigCPtr, q);
  }

  public int GetQuantization() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetQuantization(swigCPtr);
    return ret;
  }

  public void SetDebug(int d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDebug(swigCPtr, d);
  }

  public int GetDebug() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetDebug(swigCPtr);
    return ret;
  }

  public void SetFaceDisplacement(int d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetFaceDisplacement(swigCPtr, d);
  }

  public int GetFaceDisplacement() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetFaceDisplacement(swigCPtr);
    return ret;
  }

  public void SetVertexDisplacement(int d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVertexDisplacement(swigCPtr, d);
  }

  public int GetVertexDisplacement() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVertexDisplacement(swigCPtr);
    return ret;
  }

  public void SetGeneralDisplacement(int d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetGeneralDisplacement(swigCPtr, d);
  }

  public int GetGeneralDisplacement() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetGeneralDisplacement(swigCPtr);
    return ret;
  }

  public void SetJoinCutoffAngle(int d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetJoinCutoffAngle(swigCPtr, d);
  }

  public int GetJoinCutoffAngle() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetJoinCutoffAngle(swigCPtr);
    return ret;
  }

  public void SetFogLimits(float n, float f) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetFogLimits__SWIG_0(swigCPtr, n, f);
  }

  public void SetFogLimits(float[] l) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetFogLimits__SWIG_1(swigCPtr, l);
  }

  public IntPtr GetFogLimits() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetFogLimits(swigCPtr);}

  public void SetLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLockMask(swigCPtr, m);
  }

  public int GetLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLockMask(swigCPtr);
    return ret;
  }

  public void SetLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLockValue(swigCPtr, v);
  }

  public int GetLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLockValue(swigCPtr);
    return ret;
  }

  public void SetVisibilityLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVisibilityLockMask(swigCPtr, m);
  }

  public int GetVisibilityLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVisibilityLockMask(swigCPtr);
    return ret;
  }

  public void SetVisibilityLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVisibilityLockValue(swigCPtr, v);
  }

  public int GetVisibilityLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVisibilityLockValue(swigCPtr);
    return ret;
  }

  public void SetColorLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLockMask(swigCPtr, m);
  }

  public int GetColorLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLockMask(swigCPtr);
    return ret;
  }

  public void SetColorLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLockValue(swigCPtr, v);
  }

  public int GetColorLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLockValue(swigCPtr);
    return ret;
  }

  public void SetColorFaceLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceLockMask(swigCPtr, m);
  }

  public int GetColorFaceLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceLockMask(swigCPtr);
    return ret;
  }

  public void SetColorFaceLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceLockValue(swigCPtr, v);
  }

  public int GetColorFaceLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceLockValue(swigCPtr);
    return ret;
  }

  public void SetColorEdgeLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeLockMask(swigCPtr, m);
  }

  public int GetColorEdgeLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeLockMask(swigCPtr);
    return ret;
  }

  public void SetColorEdgeLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeLockValue(swigCPtr, v);
  }

  public int GetColorEdgeLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeLockValue(swigCPtr);
    return ret;
  }

  public void SetColorLineLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineLockMask(swigCPtr, m);
  }

  public int GetColorLineLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineLockMask(swigCPtr);
    return ret;
  }

  public void SetColorLineLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineLockValue(swigCPtr, v);
  }

  public int GetColorLineLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineLockValue(swigCPtr);
    return ret;
  }

  public void SetColorMarkerLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerLockMask(swigCPtr, m);
  }

  public int GetColorMarkerLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerLockMask(swigCPtr);
    return ret;
  }

  public void SetColorMarkerLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerLockValue(swigCPtr, v);
  }

  public int GetColorMarkerLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerLockValue(swigCPtr);
    return ret;
  }

  public void SetColorTextLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextLockMask(swigCPtr, m);
  }

  public int GetColorTextLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextLockMask(swigCPtr);
    return ret;
  }

  public void SetColorTextLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextLockValue(swigCPtr, v);
  }

  public int GetColorTextLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextLockValue(swigCPtr);
    return ret;
  }

  public void SetColorWindowLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowLockMask(swigCPtr, m);
  }

  public int GetColorWindowLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowLockMask(swigCPtr);
    return ret;
  }

  public void SetColorWindowLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowLockValue(swigCPtr, v);
  }

  public int GetColorWindowLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowLockValue(swigCPtr);
    return ret;
  }

  public void SetColorFaceContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceContrastLockMask(swigCPtr, m);
  }

  public int GetColorFaceContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorFaceContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceContrastLockValue(swigCPtr, v);
  }

  public int GetColorFaceContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorWindowContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowContrastLockMask(swigCPtr, m);
  }

  public int GetColorWindowContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorWindowContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowContrastLockValue(swigCPtr, v);
  }

  public int GetColorWindowContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorBackLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorBackLockMask(swigCPtr, m);
  }

  public int GetColorBackLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorBackLockMask(swigCPtr);
    return ret;
  }

  public void SetColorBackLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorBackLockValue(swigCPtr, v);
  }

  public int GetColorBackLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorBackLockValue(swigCPtr);
    return ret;
  }

  public void SetColorVertexLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexLockMask(swigCPtr, m);
  }

  public int GetColorVertexLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexLockMask(swigCPtr);
    return ret;
  }

  public void SetColorVertexLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexLockValue(swigCPtr, v);
  }

  public int GetColorVertexLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexLockValue(swigCPtr);
    return ret;
  }

  public void SetColorEdgeContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeContrastLockMask(swigCPtr, m);
  }

  public int GetColorEdgeContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorEdgeContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeContrastLockValue(swigCPtr, v);
  }

  public int GetColorEdgeContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorLineContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineContrastLockMask(swigCPtr, m);
  }

  public int GetColorLineContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorLineContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineContrastLockValue(swigCPtr, v);
  }

  public int GetColorLineContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorMarkerContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerContrastLockMask(swigCPtr, m);
  }

  public int GetColorMarkerContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorMarkerContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerContrastLockValue(swigCPtr, v);
  }

  public int GetColorMarkerContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorVertexContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexContrastLockMask(swigCPtr, m);
  }

  public int GetColorVertexContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorVertexContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexContrastLockValue(swigCPtr, v);
  }

  public int GetColorVertexContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetColorTextContrastLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextContrastLockMask(swigCPtr, m);
  }

  public int GetColorTextContrastLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextContrastLockMask(swigCPtr);
    return ret;
  }

  public void SetColorTextContrastLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextContrastLockValue(swigCPtr, v);
  }

  public int GetColorTextContrastLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextContrastLockValue(swigCPtr);
    return ret;
  }

  public void SetForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetForcedLockMask(swigCPtr, m);
  }

  public int GetForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetForcedLockValue(swigCPtr, v);
  }

  public int GetForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetVisibilityForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVisibilityForcedLockMask(swigCPtr, m);
  }

  public int GetVisibilityForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVisibilityForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetVisibilityForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVisibilityForcedLockValue(swigCPtr, v);
  }

  public int GetVisibilityForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVisibilityForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorForcedLockMask(swigCPtr, m);
  }

  public int GetColorForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorForcedLockValue(swigCPtr, v);
  }

  public int GetColorForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorFaceForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceForcedLockMask(swigCPtr, m);
  }

  public int GetColorFaceForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorFaceForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceForcedLockValue(swigCPtr, v);
  }

  public int GetColorFaceForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorEdgeForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeForcedLockMask(swigCPtr, m);
  }

  public int GetColorEdgeForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorEdgeForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeForcedLockValue(swigCPtr, v);
  }

  public int GetColorEdgeForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorLineForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineForcedLockMask(swigCPtr, m);
  }

  public int GetColorLineForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorLineForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineForcedLockValue(swigCPtr, v);
  }

  public int GetColorLineForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorMarkerForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerForcedLockMask(swigCPtr, m);
  }

  public int GetColorMarkerForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorMarkerForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerForcedLockValue(swigCPtr, v);
  }

  public int GetColorMarkerForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorTextForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextForcedLockMask(swigCPtr, m);
  }

  public int GetColorTextForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorTextForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextForcedLockValue(swigCPtr, v);
  }

  public int GetColorTextForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorWindowForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowForcedLockMask(swigCPtr, m);
  }

  public int GetColorWindowForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorWindowForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowForcedLockValue(swigCPtr, v);
  }

  public int GetColorWindowForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorFaceContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorFaceContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorFaceContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorFaceContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorFaceContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorFaceContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorWindowContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorWindowContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorWindowContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorWindowContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorWindowContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorWindowContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorBackForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorBackForcedLockMask(swigCPtr, m);
  }

  public int GetColorBackForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorBackForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorBackForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorBackForcedLockValue(swigCPtr, v);
  }

  public int GetColorBackForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorBackForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorVertexForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexForcedLockMask(swigCPtr, m);
  }

  public int GetColorVertexForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorVertexForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexForcedLockValue(swigCPtr, v);
  }

  public int GetColorVertexForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorEdgeContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorEdgeContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorEdgeContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorEdgeContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorEdgeContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorEdgeContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorLineContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorLineContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorLineContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorLineContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorLineContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorLineContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorMarkerContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorMarkerContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorMarkerContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorMarkerContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorMarkerContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorMarkerContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorVertexContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorVertexContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorVertexContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorVertexContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorVertexContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorVertexContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetColorTextContrastForcedLockMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextContrastForcedLockMask(swigCPtr, m);
  }

  public int GetColorTextContrastForcedLockMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextContrastForcedLockMask(swigCPtr);
    return ret;
  }

  public void SetColorTextContrastForcedLockValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetColorTextContrastForcedLockValue(swigCPtr, v);
  }

  public int GetColorTextContrastForcedLockValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetColorTextContrastForcedLockValue(swigCPtr);
    return ret;
  }

  public void SetBufferOptionsMask(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetBufferOptionsMask(swigCPtr, v);
  }

  public int GetBufferOptionsMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetBufferOptionsMask(swigCPtr);
    return ret;
  }

  public void SetBufferOptionsValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetBufferOptionsValue(swigCPtr, v);
  }

  public int GetBufferOptionsValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetBufferOptionsValue(swigCPtr);
    return ret;
  }

  public void SetBufferSizeLimit(int l) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetBufferSizeLimit(swigCPtr, l);
  }

  public int GetBufferSizeLimit() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetBufferSizeLimit(swigCPtr);
    return ret;
  }

  public void SetStereoSeparation(float s) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetStereoSeparation(swigCPtr, s);
  }

  public float GetStereoSeparation() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetStereoSeparation(swigCPtr);
    return ret;
  }

  public void SetStereoDistance(float d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetStereoDistance(swigCPtr, d);
  }

  public float GetStereoDistance() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetStereoDistance(swigCPtr);
    return ret;
  }

  public void SetHlrOptions(int o) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHlrOptions(swigCPtr, o);
  }

  public int GetHlrOptions() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHlrOptions(swigCPtr);
    return ret;
  }

  public void SetHlrDimFactor(float d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHlrDimFactor(swigCPtr, d);
  }

  public float GetHlrDimFactor() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHlrDimFactor(swigCPtr);
    return ret;
  }

  public void SetHlrFaceDisplacement(float d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHlrFaceDisplacement(swigCPtr, d);
  }

  public float GetHlrFaceDisplacement() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHlrFaceDisplacement(swigCPtr);
    return ret;
  }

  public void SetHlrLinePattern(int p) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHlrLinePattern(swigCPtr, p);
  }

  public int GetHlrLinePattern() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHlrLinePattern(swigCPtr);
    return ret;
  }

  public void SetHlrFaceSortingAlgorithm(int a) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHlrFaceSortingAlgorithm(swigCPtr, a);
  }

  public float GetHlrFaceSortingAlgorithm() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHlrFaceSortingAlgorithm(swigCPtr);
    return ret;
  }

  public void SetNURBSOptionsMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSOptionsMask(swigCPtr, m);
  }

  public int GetNURBSOptionsMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSOptionsMask(swigCPtr);
    return ret;
  }

  public void SetNURBSOptionsValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSOptionsValue(swigCPtr, v);
  }

  public int GetNURBSOptionsValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSOptionsValue(swigCPtr);
    return ret;
  }

  public void SetNURBSCurveBudget(int b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSCurveBudget(swigCPtr, b);
  }

  public int GetNURBSCurveBudget() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSCurveBudget(swigCPtr);
    return ret;
  }

  public void SetNURBSCurveContinuedBudget(int b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSCurveContinuedBudget(swigCPtr, b);
  }

  public int GetNURBSCurveContinuedBudget() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSCurveContinuedBudget(swigCPtr);
    return ret;
  }

  public void SetNURBSSurfaceBudget(int b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSSurfaceBudget(swigCPtr, b);
  }

  public int GetNURBSSurfaceBudget() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSSurfaceBudget(swigCPtr);
    return ret;
  }

  public void SetNURBSSurfaceTrimBudget(int b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetNURBSSurfaceTrimBudget(swigCPtr, b);
  }

  public int GetNURBSSurfaceTrimBudget() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNURBSSurfaceTrimBudget(swigCPtr);
    return ret;
  }

  public void SetLodOptionsMask(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodOptionsMask(swigCPtr, v);
  }

  public int GetLodOptionsMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodOptionsMask(swigCPtr);
    return ret;
  }

  public void SetLodOptionsValue(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodOptionsValue(swigCPtr, v);
  }

  public int GetLodOptionsValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodOptionsValue(swigCPtr);
    return ret;
  }

  public void SetLodAlgorithm(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodAlgorithm(swigCPtr, v);
  }

  public int GetLodAlgorithm() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodAlgorithm(swigCPtr);
    return ret;
  }

  public void SetLodMinimumTriangleCount(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodMinimumTriangleCount(swigCPtr, v);
  }

  public int GetLodMinimumTriangleCount() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodMinimumTriangleCount(swigCPtr);
    return ret;
  }

  public void SetLodNumLevels(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodNumLevels(swigCPtr, v);
  }

  public int GetLodNumLevels() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodNumLevels(swigCPtr);
    return ret;
  }

  public void SetLodClamp(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodClamp(swigCPtr, v);
  }

  public int GetLodClamp() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodClamp(swigCPtr);
    return ret;
  }

  public void SetLodMaxDegree(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodMaxDegree(swigCPtr, v);
  }

  public int GetLodMaxDegree() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodMaxDegree(swigCPtr);
    return ret;
  }

  public void SetLodTolerance(float v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodTolerance(swigCPtr, v);
  }

  public float GetLodTolerance() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodTolerance(swigCPtr);
    return ret;
  }

  public void SetLodFallback(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodFallback(swigCPtr, v);
  }

  public int GetLodFallback() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodFallback(swigCPtr);
    return ret;
  }

  public void SetLodBounding(float x1, float y1, float z1, float x2, float y2, float z2) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodBounding__SWIG_0(swigCPtr, x1, y1, z1, x2, y2, z2);
  }

  public void SetLodBounding(float[] s, float[] e) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodBounding__SWIG_1(swigCPtr, s, e);
  }

  public void SetLodBounding(float[] p) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodBounding__SWIG_2(swigCPtr, p);
  }

  public IntPtr GetLodBounding() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodBounding(swigCPtr);}

  public void SetLodRatio(float r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodRatio(swigCPtr, r);
  }

  public void SetLodRatios(int c, float[] r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodRatios__SWIG_0(swigCPtr, c, r);
  }

  public void SetLodRatios(int c) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodRatios__SWIG_1(swigCPtr, c);
  }

  public int GetLodNumRatios() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodNumRatios(swigCPtr);
    return ret;
  }

  public IntPtr GetLodRatios() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodRatios__SWIG_0(swigCPtr);}

  public void SetLodThresholdType(int v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodThresholdType(swigCPtr, v);
  }

  public int GetLodThresholdType() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodThresholdType(swigCPtr);
    return ret;
  }

  public void SetLodThreshold(float r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodThreshold(swigCPtr, r);
  }

  public void SetLodThresholds(int c, float[] r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodThresholds__SWIG_0(swigCPtr, c, r);
  }

  public void SetLodThresholds(int c) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodThresholds__SWIG_1(swigCPtr, c);
  }

  public int GetLodNumThresholds() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodNumThresholds(swigCPtr);
    return ret;
  }

  public IntPtr GetLodThresholds() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodThresholds__SWIG_0(swigCPtr);}

  public void SetLodCutoff(float r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodCutoff(swigCPtr, r);
  }

  public void SetLodCutoffs(int c, float[] r) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodCutoffs__SWIG_0(swigCPtr, c, r);
  }

  public void SetLodCutoffs(int c) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetLodCutoffs__SWIG_1(swigCPtr, c);
  }

  public int GetLodNumCutoffs() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodNumCutoffs(swigCPtr);
    return ret;
  }

  public IntPtr GetLodCutoffs() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetLodCutoffs__SWIG_0(swigCPtr);}

  public void SetTessellationMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetTessellationMask(swigCPtr, m);
  }

  public int GetTessellationMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetTessellationMask(swigCPtr);
    return ret;
  }

  public void SetCylinderTessellation(int n) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCylinderTessellation(swigCPtr, n);
  }

  public void SetCylinderTessellations(int c, string n) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCylinderTessellations__SWIG_0(swigCPtr, c, n);
  }

  public void SetCylinderTessellations(int c) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCylinderTessellations__SWIG_1(swigCPtr, c);
  }

  public int GetNumCylinderTessellations() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNumCylinderTessellations(swigCPtr);
    return ret;
  }

  public string GetCylinderTessellations() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetCylinderTessellations__SWIG_0(swigCPtr);}

  public void SetSphereTessellation(int n) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSphereTessellation(swigCPtr, n);
  }

  public void SetSphereTessellations(int c, string n) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSphereTessellations__SWIG_0(swigCPtr, c, n);
  }

  public void SetSphereTessellations(int c) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSphereTessellations__SWIG_1(swigCPtr, c);
  }

  public int GetNumSphereTessellations() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetNumSphereTessellations(swigCPtr);
    return ret;
  }

  public string GetSphereTessellations() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetSphereTessellations__SWIG_0(swigCPtr);}

  public void SetGeometryOptionsMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetGeometryOptionsMask(swigCPtr, m);
  }

  public int GetGeometryOptionsMask() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetGeometryOptionsMask(swigCPtr);
    return ret;
  }

  public void SetHardEdgeAngle(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetHardEdgeAngle(swigCPtr, m);
  }

  public float GetHardEdgeAngle() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetHardEdgeAngle(swigCPtr);
    return ret;
  }

  public void SetMaskTransform(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetMaskTransform(swigCPtr, m);
  }

  public int GetMaskTransform() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetMaskTransform(swigCPtr);
    return ret;
  }

  public void SetCutGeometry(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCutGeometry(swigCPtr, m);
  }

  public int GetCutGeometry() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetCutGeometry(swigCPtr);
    return ret;
  }

  public void SetCutGeometryLevel(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCutGeometryLevel(swigCPtr, m);
  }

  public int GetCutGeometryLevel() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetCutGeometryLevel(swigCPtr);
    return ret;
  }

  public void SetCutGeometryColorMatch(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCutGeometryColorMatch(swigCPtr, m);
  }

  public int GetCutGeometryColorMatch() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetCutGeometryColorMatch(swigCPtr);
    return ret;
  }

  public void SetCutGeometryTolerance(float m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetCutGeometryTolerance(swigCPtr, m);
  }

  public float GetCutGeometryTolerance() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetCutGeometryTolerance(swigCPtr);
    return ret;
  }

  public void SetDisplayListLevel(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDisplayListLevel(swigCPtr, m);
  }

  public int GetDisplayListLevel() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetDisplayListLevel(swigCPtr);
    return ret;
  }

  public void SetSimpleShadow(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadow(swigCPtr, m);
  }

  public int GetSimpleShadow() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadow(swigCPtr);
    return ret;
  }

  public void SetSimpleShadowBlur(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowBlur(swigCPtr, m);
  }

  public int GetSimpleShadowBlur() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadowBlur(swigCPtr);
    return ret;
  }

  public void SetSimpleShadowResolution(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowResolution(swigCPtr, m);
  }

  public int GetSimpleShadowResolution() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadowResolution(swigCPtr);
    return ret;
  }

  public void SetSimpleShadowLight(float x, float y, float z) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowLight__SWIG_0(swigCPtr, x, y, z);
  }

  public void SetSimpleShadowLight(float[] l) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowLight__SWIG_1(swigCPtr, l);
  }

  public IntPtr getSimpleShadowLight() {return HCSSTREAMPINVOKE.TK_Rendering_Options_getSimpleShadowLight(swigCPtr);}

  public void SetSimpleShadowPlane(float a, float b, float c, float d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowPlane__SWIG_0(swigCPtr, a, b, c, d);
  }

  public void SetSimpleShadowPlane(float[] p) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowPlane__SWIG_1(swigCPtr, p);
  }

  public IntPtr GetSimpleShadowPlane() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadowPlane(swigCPtr);}

  public void SetSimpleShadowColor(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowColor__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetSimpleShadowColor(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowColor__SWIG_1(swigCPtr, rgb);
  }

  public IntPtr GetSimpleShadowColor() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadowColor(swigCPtr);}

  public void SetSimpleShadowOpacity(float o) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleShadowOpacity(swigCPtr, o);
  }

  public float GetSimpleShadowOpacity() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleShadowOpacity(swigCPtr);
    return ret;
  }

  public void SetShadowMap(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetShadowMap(swigCPtr, m);
  }

  public int GetShadowMap() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetShadowMap(swigCPtr);
    return ret;
  }

  public void SetShadowMapResolution(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetShadowMapResolution(swigCPtr, m);
  }

  public int GetShadowMapResolution() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetShadowMapResolution(swigCPtr);
    return ret;
  }

  public void SetShadowMapSamples(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetShadowMapSamples(swigCPtr, m);
  }

  public int GetShadowMapSamples() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetShadowMapSamples(swigCPtr);
    return ret;
  }

  public void SetSimpleReflection(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleReflection(swigCPtr, m);
  }

  public int GetSimpleReflection() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleReflection(swigCPtr);
    return ret;
  }

  public void SetSimpleReflectionPlane(float a, float b, float c, float d) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_0(swigCPtr, a, b, c, d);
  }

  public void SetSimpleReflectionPlane(float[] p) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_1(swigCPtr, p);
  }

  public IntPtr GetSimpleReflectionPlane() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleReflectionPlane(swigCPtr);}

  public void SetSimpleReflectionOpacity(float o) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleReflectionOpacity(swigCPtr, o);
  }

  public float GetSimpleReflectionOpacity() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleReflectionOpacity(swigCPtr);
    return ret;
  }

  public void SetSimpleReflectionVisibilityMask(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetSimpleReflectionVisibilityMask(swigCPtr, m);
  }

  public int GetSimpleReflectionVisibilityValue() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetSimpleReflectionVisibilityValue(swigCPtr);
    return ret;
  }

  public void SetDepthRange(float n, float f) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDepthRange__SWIG_0(swigCPtr, n, f);
  }

  public void SetDepthRange(float[] l) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDepthRange__SWIG_1(swigCPtr, l);
  }

  public IntPtr GetDepthRange() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetDepthRange(swigCPtr);}

  public void SetScreenRange(float l, float r, float b, float t) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetScreenRange__SWIG_0(swigCPtr, l, r, b, t);
  }

  public void SetScreenRange(float[] l) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetScreenRange__SWIG_1(swigCPtr, l);
  }

  public IntPtr GetScreenRange() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetScreenRange(swigCPtr);}

  public void SetAmbientUpVector(float x, float y, float z) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetAmbientUpVector__SWIG_0(swigCPtr, x, y, z);
  }

  public void SetAmbientUpVector(float[] v) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetAmbientUpVector__SWIG_1(swigCPtr, v);
  }

  public IntPtr GetAmbientUpVector() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetAmbientUpVector(swigCPtr);}

  public void SetImageScale(float x, float y) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetImageScale__SWIG_0(swigCPtr, x, y);
  }

  public void SetImageScale(float[] s) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetImageScale__SWIG_1(swigCPtr, s);
  }

  public IntPtr GetImageScale() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetImageScale(swigCPtr);}

  public void SetImageTintColor(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetImageTintColor__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetImageTintColor(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetImageTintColor__SWIG_1(swigCPtr, rgb);
  }

  public IntPtr GetImageTintColor() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetImageTintColor(swigCPtr);}

  public void SetDiffuseTextureTintColor(float r, float g, float b) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_0(swigCPtr, r, g, b);
  }

  public void SetDiffuseTextureTintColor(float[] rgb) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_1(swigCPtr, rgb);
  }

  public IntPtr GetDiffuseTextureTintColor() {return HCSSTREAMPINVOKE.TK_Rendering_Options_GetDiffuseTextureTintColor(swigCPtr);}

  public void SetAntiAlias(int m) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetAntiAlias(swigCPtr, m);
  }

  public int GetAntiAlias() {
    int ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetAntiAlias(swigCPtr);
    return ret;
  }

  public void SetVertexDecimation(float f) {
    HCSSTREAMPINVOKE.TK_Rendering_Options_SetVertexDecimation(swigCPtr, f);
  }

  public float GetVertexDecimation() {
    float ret = HCSSTREAMPINVOKE.TK_Rendering_Options_GetVertexDecimation(swigCPtr);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Read", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateTK_Rendering_Options_0(SwigDirectorRead);
    if (SwigDerivedClassHasMethod("Write", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateTK_Rendering_Options_1(SwigDirectorWrite);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateTK_Rendering_Options_2(SwigDirectorExecute);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateTK_Rendering_Options_3(SwigDirectorInterpret__SWIG_0);
    if (SwigDerivedClassHasMethod("Interpret", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateTK_Rendering_Options_4(SwigDirectorInterpret__SWIG_1);
    if (SwigDerivedClassHasMethod("Interpret_special", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateTK_Rendering_Options_5(SwigDirectorInterpret_special);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateTK_Rendering_Options_6(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("Match_Instance", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateTK_Rendering_Options_7(SwigDirectorMatch_Instance);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateTK_Rendering_Options_8(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("NeedsContext", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateTK_Rendering_Options_9(SwigDirectorNeedsContext);
    HCSSTREAMPINVOKE.TK_Rendering_Options_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(TK_Rendering_Options));
    return hasDerivedMethod;
  }

  private int SwigDirectorRead(IntPtr tk) {
    return (int)Read(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorWrite(IntPtr tk) {
    return (int)Write(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorExecute(IntPtr tk) {
    return (int)Execute(new BStreamFileToolkit(tk, false));
  }

  private int SwigDirectorInterpret__SWIG_0(IntPtr tk, ID_Key key, int variant) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key, variant);
  }

  private int SwigDirectorInterpret__SWIG_1(IntPtr tk, ID_Key key) {
    return (int)Interpret(new BStreamFileToolkit(tk, false), key);
  }

  private int SwigDirectorInterpret_special(IntPtr tk, ID_Key key, string special) {
    return (int)Interpret_special(new BStreamFileToolkit(tk, false), key, special);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorMatch_Instance(IntPtr tk, IntPtr instance) {
    return Match_Instance(new BStreamFileToolkit(tk, false), (instance == IntPtr.Zero) ? null : new Recorded_Instance(instance, false));
  }

  private int SwigDirectorClone(IntPtr tk, IntPtr handler) {
    return (int)Clone(new BStreamFileToolkit(tk, false), (handler == IntPtr.Zero) ? null : new SWIGTYPE_p_p_BBaseOpcodeHandler(handler, false));
  }

  private bool SwigDirectorNeedsContext(IntPtr tk) {
    return NeedsContext(new BStreamFileToolkit(tk, false));
  }

  public delegate int SwigDelegateTK_Rendering_Options_0(IntPtr tk);
  public delegate int SwigDelegateTK_Rendering_Options_1(IntPtr tk);
  public delegate int SwigDelegateTK_Rendering_Options_2(IntPtr tk);
  public delegate int SwigDelegateTK_Rendering_Options_3(IntPtr tk, ID_Key key, int variant);
  public delegate int SwigDelegateTK_Rendering_Options_4(IntPtr tk, ID_Key key);
  public delegate int SwigDelegateTK_Rendering_Options_5(IntPtr tk, ID_Key key, string special);
  public delegate void SwigDelegateTK_Rendering_Options_6();
  public delegate bool SwigDelegateTK_Rendering_Options_7(IntPtr tk, IntPtr instance);
  public delegate int SwigDelegateTK_Rendering_Options_8(IntPtr tk, IntPtr handler);
  public delegate bool SwigDelegateTK_Rendering_Options_9(IntPtr tk);

  private SwigDelegateTK_Rendering_Options_0 swigDelegate0;
  private SwigDelegateTK_Rendering_Options_1 swigDelegate1;
  private SwigDelegateTK_Rendering_Options_2 swigDelegate2;
  private SwigDelegateTK_Rendering_Options_3 swigDelegate3;
  private SwigDelegateTK_Rendering_Options_4 swigDelegate4;
  private SwigDelegateTK_Rendering_Options_5 swigDelegate5;
  private SwigDelegateTK_Rendering_Options_6 swigDelegate6;
  private SwigDelegateTK_Rendering_Options_7 swigDelegate7;
  private SwigDelegateTK_Rendering_Options_8 swigDelegate8;
  private SwigDelegateTK_Rendering_Options_9 swigDelegate9;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(BStreamFileToolkit) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(int) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(BStreamFileToolkit), typeof(ID_Key), typeof(string) };
  private static Type[] swigMethodTypes6 = new Type[] {  };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(BStreamFileToolkit), typeof(Recorded_Instance) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(BStreamFileToolkit), typeof(SWIGTYPE_p_p_BBaseOpcodeHandler) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(BStreamFileToolkit) };
}
