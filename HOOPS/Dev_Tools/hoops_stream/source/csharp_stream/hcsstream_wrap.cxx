/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_HCSSTREAM(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_HCSSTREAM(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_HCSSTREAM(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#define alter

#include <math.h>

#ifdef WIN64
#	define HLONG __int64
#	define  long __int64
#else
#	define HLONG long
#endif

#include "../../base_stream/source/stream_common\BStream.h"
#include "../../base_stream/source/stream_common\BStreamFileToolkit.h"
#include "../../base_stream/source/stream_common\BByteStream.h"
#include "../../base_stream/source/stream_common\BCompress.h"
#include "../../base_stream/source/stream_common\BEdgeBreaker.h"
#include "../../base_stream/source/stream_common\BInternal.h"
#include "../../base_stream/source/stream_common\BOpcodeHandler.h"
#include "../../base_stream/source/stream_common\BPolyhedron.h"
#include "../../base_stream/source/stream_common\BOpcodeShell.h"
#include "../../base_stream/source/stream_common\BPointCloud.h"
#include "../../base_stream/source/stream_common\BPolyPoly.h"

#include "HStream.h"
#include "HByteStream.h"
#include "HOpcodeHandler.h"
#include "HOpcodeShell.h"
#include "HPolyhedron.h"
#include "HPolyPoly.h"
#include "HStreamFileToolkit.h"

SWIGINTERN TK_Status BStreamFileToolkit_ParseBuffer__SWIG_0(BStreamFileToolkit *self,unsigned char *b,int s,TK_Status mode=TK_Normal){
		return self->ParseBuffer((const char *) b, s, mode);
	}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "hcsstream_wrap.h"

SwigDirector_BBaseOpcodeHandler::SwigDirector_BBaseOpcodeHandler(int op) : BBaseOpcodeHandler(op), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_BBaseOpcodeHandler::~SwigDirector_BBaseOpcodeHandler() {
  
}


TK_Status SwigDirector_BBaseOpcodeHandler::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    throw Swig::DirectorPureVirtualException("BBaseOpcodeHandler::Read");
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_BBaseOpcodeHandler::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    throw Swig::DirectorPureVirtualException("BBaseOpcodeHandler::Write");
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_BBaseOpcodeHandler::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_BBaseOpcodeHandler::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_BBaseOpcodeHandler::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_BBaseOpcodeHandler::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_BBaseOpcodeHandler::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_BBaseOpcodeHandler::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_BBaseOpcodeHandler::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_BBaseOpcodeHandler::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_BBaseOpcodeHandler::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Default::SwigDirector_TK_Default() : TK_Default(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Default::~SwigDirector_TK_Default() {
  
}


TK_Status SwigDirector_TK_Default::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Default::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Default::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Default::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Default::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Default::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Default::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Default::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Default::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Default::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Default::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Default::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Default::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Unavailable::SwigDirector_TK_Unavailable(char opcode) : TK_Unavailable(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Unavailable::~SwigDirector_TK_Unavailable() {
  
}


TK_Status SwigDirector_TK_Unavailable::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Unavailable::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unavailable::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Unavailable::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unavailable::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unavailable::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unavailable::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Unavailable::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Unavailable::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unavailable::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Unavailable::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Unavailable::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Unavailable::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Header::SwigDirector_TK_Header() : TK_Header(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Header::~SwigDirector_TK_Header() {
  
}


TK_Status SwigDirector_TK_Header::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Header::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Header::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Header::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Header::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Header::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Header::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Header::Reset() {
  if (!swig_callbackReset) {
    TK_Header::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Header::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Header::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Header::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Header::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Header::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_File_Info::SwigDirector_TK_File_Info() : TK_File_Info(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_File_Info::~SwigDirector_TK_File_Info() {
  
}


TK_Status SwigDirector_TK_File_Info::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_File_Info::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_File_Info::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_File_Info::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_File_Info::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_File_Info::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_File_Info::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret) {
    return TK_File_Info::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_File_Info::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_File_Info::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_File_Info::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_File_Info::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_File_Info::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_File_Info::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_File_Info::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret = callbackInterpret;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_File_Info::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Comment::SwigDirector_TK_Comment(char const *comment) : TK_Comment(comment), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Comment::~SwigDirector_TK_Comment() {
  
}


TK_Status SwigDirector_TK_Comment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Comment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Comment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Comment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Comment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Comment::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Comment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret) {
    return TK_Comment::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Comment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Comment::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Comment::Reset() {
  if (!swig_callbackReset) {
    TK_Comment::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Comment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Comment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Comment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Comment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret = callbackInterpret;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Comment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Terminator::SwigDirector_TK_Terminator(char opcode, bool is_file_terminator) : TK_Terminator(opcode, is_file_terminator), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Terminator::~SwigDirector_TK_Terminator() {
  
}


TK_Status SwigDirector_TK_Terminator::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Terminator::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Terminator::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Terminator::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Terminator::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Terminator::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Terminator::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Terminator::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Terminator::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Terminator::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Terminator::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Terminator::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Terminator::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Terminator::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Compression::SwigDirector_TK_Compression(char opcode) : TK_Compression(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Compression::~SwigDirector_TK_Compression() {
  
}


TK_Status SwigDirector_TK_Compression::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Compression::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Compression::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Compression::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Compression::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Compression::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Compression::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret) {
    return TK_Compression::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Compression::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Compression::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Compression::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Compression::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Compression::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Compression::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Compression::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret = callbackInterpret;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Compression::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Open_Segment::SwigDirector_TK_Open_Segment() : TK_Open_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Open_Segment::~SwigDirector_TK_Open_Segment() {
  
}


TK_Status SwigDirector_TK_Open_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Open_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Open_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Open_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Open_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Open_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Open_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Open_Segment::Reset() {
  if (!swig_callbackReset) {
    TK_Open_Segment::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Open_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Open_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Open_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Open_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Open_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Open_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Close_Segment::SwigDirector_TK_Close_Segment() : TK_Close_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Close_Segment::~SwigDirector_TK_Close_Segment() {
  
}


TK_Status SwigDirector_TK_Close_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Close_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Close_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Close_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Close_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Close_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Close_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Close_Segment::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Close_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Close_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Close_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Close_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Close_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Close_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Reopen_Segment::SwigDirector_TK_Reopen_Segment() : TK_Reopen_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Reopen_Segment::~SwigDirector_TK_Reopen_Segment() {
  
}


TK_Status SwigDirector_TK_Reopen_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Reopen_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Reopen_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Reopen_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Reopen_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Reopen_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Reopen_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Reopen_Segment::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Reopen_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Reopen_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Reopen_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Reopen_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Reopen_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Reopen_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Referenced_Segment::SwigDirector_TK_Referenced_Segment(unsigned char opcode) : TK_Referenced_Segment(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Referenced_Segment::~SwigDirector_TK_Referenced_Segment() {
  
}


TK_Status SwigDirector_TK_Referenced_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Referenced_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Referenced_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Referenced_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Referenced_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Referenced_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Referenced_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Referenced_Segment::Reset() {
  if (!swig_callbackReset) {
    TK_Referenced_Segment::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Referenced_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Referenced_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Referenced_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Referenced_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Referenced_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Referenced_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Instance::SwigDirector_TK_Instance(int from_index, int from_variant, int to_index, int to_variant, int options, float const xform[]) : TK_Instance(from_index, from_variant, to_index, to_variant, options, xform), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Instance::~SwigDirector_TK_Instance() {
  
}


TK_Status SwigDirector_TK_Instance::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Instance::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Instance::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Instance::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Instance::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Instance::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Instance::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Instance::Reset() {
  if (!swig_callbackReset) {
    TK_Instance::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Instance::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Instance::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Instance::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Instance::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Instance::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Instance::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Delete_Object::SwigDirector_TK_Delete_Object() : TK_Delete_Object(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Delete_Object::~SwigDirector_TK_Delete_Object() {
  
}


TK_Status SwigDirector_TK_Delete_Object::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Delete_Object::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Delete_Object::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Delete_Object::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Delete_Object::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Delete_Object::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Delete_Object::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Delete_Object::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Delete_Object::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Delete_Object::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Delete_Object::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Delete_Object::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Delete_Object::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Delete_Object::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_LOD::SwigDirector_TK_LOD() : TK_LOD(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_LOD::~SwigDirector_TK_LOD() {
  
}


TK_Status SwigDirector_TK_LOD::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_LOD::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_LOD::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_LOD::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_LOD::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_LOD::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_LOD::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_LOD::Reset() {
  if (!swig_callbackReset) {
    TK_LOD::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_LOD::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_LOD::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_LOD::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_LOD::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_LOD::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_LOD::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Geometry_Attributes::SwigDirector_TK_Geometry_Attributes() : TK_Geometry_Attributes(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Geometry_Attributes::~SwigDirector_TK_Geometry_Attributes() {
  
}


TK_Status SwigDirector_TK_Geometry_Attributes::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Geometry_Attributes::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Geometry_Attributes::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Geometry_Attributes::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Geometry_Attributes::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Geometry_Attributes::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Geometry_Attributes::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Geometry_Attributes::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Geometry_Attributes::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Geometry_Attributes::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Geometry_Attributes::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Geometry_Attributes::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Geometry_Attributes::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Geometry_Attributes::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Renumber::SwigDirector_TK_Renumber(unsigned char opcode, long key) : TK_Renumber(opcode, key), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Renumber::~SwigDirector_TK_Renumber() {
  
}


TK_Status SwigDirector_TK_Renumber::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Renumber::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Renumber::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Renumber::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Renumber::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Renumber::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Renumber::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Renumber::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Renumber::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Renumber::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Renumber::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Renumber::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Renumber::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Renumber::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Tag::SwigDirector_TK_Tag(unsigned char opcode) : TK_Tag(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Tag::~SwigDirector_TK_Tag() {
  
}


TK_Status SwigDirector_TK_Tag::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Tag::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Tag::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Tag::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Tag::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Tag::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Tag::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return TK_Tag::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Tag::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Tag::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Tag::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Tag::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Tag::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Tag::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Tag::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Tag::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Dictionary::SwigDirector_TK_Dictionary() : TK_Dictionary(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Dictionary::~SwigDirector_TK_Dictionary() {
  
}


TK_Status SwigDirector_TK_Dictionary::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Dictionary::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Dictionary::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Dictionary::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return TK_Dictionary::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Dictionary::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Dictionary::Reset() {
  if (!swig_callbackReset) {
    TK_Dictionary::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Dictionary::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Dictionary::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Dictionary::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Dictionary::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Dictionary_Locater::SwigDirector_TK_Dictionary_Locater() : TK_Dictionary_Locater(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Dictionary_Locater::~SwigDirector_TK_Dictionary_Locater() {
  
}


TK_Status SwigDirector_TK_Dictionary_Locater::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Dictionary_Locater::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary_Locater::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Dictionary_Locater::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary_Locater::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Dictionary_Locater::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary_Locater::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return TK_Dictionary_Locater::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary_Locater::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Dictionary_Locater::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Dictionary_Locater::Reset() {
  if (!swig_callbackReset) {
    TK_Dictionary_Locater::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Dictionary_Locater::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Dictionary_Locater::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Dictionary_Locater::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Dictionary_Locater::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Dictionary_Locater::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color::SwigDirector_TK_Color() : TK_Color(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color::~SwigDirector_TK_Color() {
  
}


TK_Status SwigDirector_TK_Color::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color::Reset() {
  if (!swig_callbackReset) {
    TK_Color::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color_RGB::SwigDirector_TK_Color_RGB() : TK_Color_RGB(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color_RGB::~SwigDirector_TK_Color_RGB() {
  
}


TK_Status SwigDirector_TK_Color_RGB::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_RGB::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_RGB::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_RGB::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_RGB::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_RGB::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_RGB::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color_RGB::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color_RGB::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_RGB::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color_RGB::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color_RGB::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color_RGB::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color_RGB::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color_By_Value::SwigDirector_TK_Color_By_Value() : TK_Color_By_Value(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color_By_Value::~SwigDirector_TK_Color_By_Value() {
  
}


TK_Status SwigDirector_TK_Color_By_Value::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_Value::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Value::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_Value::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Value::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Value::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Value::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_Value::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color_By_Value::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Value::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color_By_Value::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color_By_Value::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_Value::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color_By_Value::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color_By_Index::SwigDirector_TK_Color_By_Index(unsigned char opcode) : TK_Color_By_Index(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color_By_Index::~SwigDirector_TK_Color_By_Index() {
  
}


TK_Status SwigDirector_TK_Color_By_Index::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_Index::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Index::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_Index::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Index::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Index::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Index::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_Index::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color_By_Index::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_Index::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color_By_Index::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color_By_Index::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_Index::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color_By_Index::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color_By_FIndex::SwigDirector_TK_Color_By_FIndex() : TK_Color_By_FIndex(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color_By_FIndex::~SwigDirector_TK_Color_By_FIndex() {
  
}


TK_Status SwigDirector_TK_Color_By_FIndex::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_FIndex::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_FIndex::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_FIndex::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_FIndex::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_FIndex::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_FIndex::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_FIndex::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color_By_FIndex::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_By_FIndex::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color_By_FIndex::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color_By_FIndex::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color_By_FIndex::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color_By_FIndex::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Color_Map::SwigDirector_TK_Color_Map() : TK_Color_Map(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Color_Map::~SwigDirector_TK_Color_Map() {
  
}


TK_Status SwigDirector_TK_Color_Map::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_Map::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_Map::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_Map::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_Map::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_Map::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_Map::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Color_Map::Reset() {
  if (!swig_callbackReset) {
    TK_Color_Map::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Color_Map::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Color_Map::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Color_Map::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Color_Map::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Color_Map::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Color_Map::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Callback::SwigDirector_TK_Callback() : TK_Callback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Callback::~SwigDirector_TK_Callback() {
  
}


TK_Status SwigDirector_TK_Callback::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Callback::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Callback::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Callback::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Callback::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Callback::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Callback::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Callback::Reset() {
  if (!swig_callbackReset) {
    TK_Callback::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Callback::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Callback::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Callback::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Callback::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Callback::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Callback::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Rendering_Options::SwigDirector_TK_Rendering_Options() : TK_Rendering_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Rendering_Options::~SwigDirector_TK_Rendering_Options() {
  
}


TK_Status SwigDirector_TK_Rendering_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Rendering_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Rendering_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Rendering_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Rendering_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Rendering_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Rendering_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Rendering_Options::Reset() {
  if (!swig_callbackReset) {
    TK_Rendering_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Rendering_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Rendering_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Rendering_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Rendering_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Rendering_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Rendering_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Heuristics::SwigDirector_TK_Heuristics() : TK_Heuristics(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Heuristics::~SwigDirector_TK_Heuristics() {
  
}


TK_Status SwigDirector_TK_Heuristics::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Heuristics::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Heuristics::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Heuristics::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Heuristics::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Heuristics::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Heuristics::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Heuristics::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Heuristics::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Heuristics::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Heuristics::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Heuristics::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Heuristics::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Heuristics::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Visibility::SwigDirector_TK_Visibility() : TK_Visibility(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Visibility::~SwigDirector_TK_Visibility() {
  
}


TK_Status SwigDirector_TK_Visibility::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Visibility::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Visibility::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Visibility::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Visibility::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Visibility::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Visibility::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Visibility::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Visibility::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Visibility::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Visibility::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Visibility::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Visibility::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Visibility::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Selectability::SwigDirector_TK_Selectability() : TK_Selectability(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Selectability::~SwigDirector_TK_Selectability() {
  
}


TK_Status SwigDirector_TK_Selectability::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Selectability::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Selectability::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Selectability::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Selectability::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Selectability::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Selectability::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Selectability::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Selectability::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Selectability::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Selectability::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Selectability::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Selectability::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Selectability::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Matrix::SwigDirector_TK_Matrix(unsigned char opcode) : TK_Matrix(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Matrix::~SwigDirector_TK_Matrix() {
  
}


TK_Status SwigDirector_TK_Matrix::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Matrix::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Matrix::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Matrix::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Matrix::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Matrix::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Matrix::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Matrix::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Matrix::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Matrix::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Matrix::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Matrix::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Matrix::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Matrix::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Enumerated::SwigDirector_TK_Enumerated(unsigned char opcode) : TK_Enumerated(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Enumerated::~SwigDirector_TK_Enumerated() {
  
}


TK_Status SwigDirector_TK_Enumerated::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Enumerated::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Enumerated::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Enumerated::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Enumerated::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Enumerated::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Enumerated::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Enumerated::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Enumerated::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Enumerated::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Enumerated::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Enumerated::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Enumerated::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Enumerated::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Size::SwigDirector_TK_Size(unsigned char opcode) : TK_Size(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Size::~SwigDirector_TK_Size() {
  
}


TK_Status SwigDirector_TK_Size::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Size::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Size::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Size::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Size::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Size::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Size::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Size::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Size::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Size::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Size::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Size::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Size::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Size::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Linear_Pattern::SwigDirector_TK_Linear_Pattern(unsigned char opcode) : TK_Linear_Pattern(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Linear_Pattern::~SwigDirector_TK_Linear_Pattern() {
  
}


TK_Status SwigDirector_TK_Linear_Pattern::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Linear_Pattern::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Linear_Pattern::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Linear_Pattern::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Linear_Pattern::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Linear_Pattern::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Linear_Pattern::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Linear_Pattern::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Linear_Pattern::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Linear_Pattern::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Linear_Pattern::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Linear_Pattern::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Linear_Pattern::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Linear_Pattern::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Named::SwigDirector_TK_Named(unsigned char opcode) : TK_Named(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Named::~SwigDirector_TK_Named() {
  
}


TK_Status SwigDirector_TK_Named::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Named::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Named::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Named::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Named::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Named::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Named::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Named::Reset() {
  if (!swig_callbackReset) {
    TK_Named::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Named::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Named::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Named::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Named::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Named::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Named::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Streaming::SwigDirector_TK_Streaming() : TK_Streaming(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Streaming::~SwigDirector_TK_Streaming() {
  
}


TK_Status SwigDirector_TK_Streaming::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Streaming::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Streaming::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Streaming::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Streaming::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Streaming::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Streaming::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Streaming::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Streaming::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Streaming::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Streaming::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Streaming::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Streaming::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Streaming::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Conditions::SwigDirector_TK_Conditions() : TK_Conditions(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Conditions::~SwigDirector_TK_Conditions() {
  
}


TK_Status SwigDirector_TK_Conditions::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Conditions::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Conditions::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Conditions::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Conditions::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Conditions::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Conditions::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Conditions::Reset() {
  if (!swig_callbackReset) {
    TK_Conditions::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Conditions::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Conditions::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Conditions::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Conditions::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Conditions::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Conditions::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_User_Options::SwigDirector_TK_User_Options() : TK_User_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_User_Options::~SwigDirector_TK_User_Options() {
  
}


TK_Status SwigDirector_TK_User_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_User_Options::Reset() {
  if (!swig_callbackReset) {
    TK_User_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_User_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_User_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_User_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_User_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_User_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Unicode_Options::SwigDirector_TK_Unicode_Options() : TK_Unicode_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Unicode_Options::~SwigDirector_TK_Unicode_Options() {
  
}


TK_Status SwigDirector_TK_Unicode_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Unicode_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unicode_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Unicode_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unicode_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unicode_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unicode_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Unicode_Options::Reset() {
  if (!swig_callbackReset) {
    TK_Unicode_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Unicode_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Unicode_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Unicode_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Unicode_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Unicode_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Unicode_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_User_Index::SwigDirector_TK_User_Index() : TK_User_Index(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_User_Index::~SwigDirector_TK_User_Index() {
  
}


TK_Status SwigDirector_TK_User_Index::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Index::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Index::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Index::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Index::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Index::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Index::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_User_Index::Reset() {
  if (!swig_callbackReset) {
    TK_User_Index::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_User_Index::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Index::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_User_Index::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_User_Index::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_User_Index::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_User_Index::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_User_Value::SwigDirector_TK_User_Value() : TK_User_Value(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_User_Value::~SwigDirector_TK_User_Value() {
  
}


TK_Status SwigDirector_TK_User_Value::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Value::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Value::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Value::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Value::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Value::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Value::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_User_Value::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_User_Value::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Value::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_User_Value::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_User_Value::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_User_Value::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_User_Value::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Camera::SwigDirector_TK_Camera(unsigned char opcode) : TK_Camera(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Camera::~SwigDirector_TK_Camera() {
  
}


TK_Status SwigDirector_TK_Camera::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Camera::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Camera::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Camera::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Camera::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Camera::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Camera::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Camera::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Camera::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Camera::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Camera::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Camera::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Camera::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Camera::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Window::SwigDirector_TK_Window() : TK_Window(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Window::~SwigDirector_TK_Window() {
  
}


TK_Status SwigDirector_TK_Window::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Window::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Window::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Window::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Window::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Window::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Window::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Window::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Window::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Window::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Window::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Window::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Window::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Window::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Text_Font::SwigDirector_TK_Text_Font() : TK_Text_Font(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Text_Font::~SwigDirector_TK_Text_Font() {
  
}


TK_Status SwigDirector_TK_Text_Font::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Text_Font::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text_Font::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Text_Font::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text_Font::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text_Font::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text_Font::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Text_Font::Reset() {
  if (!swig_callbackReset) {
    TK_Text_Font::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Text_Font::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text_Font::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Text_Font::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Text_Font::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Text_Font::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Text_Font::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Bounding::SwigDirector_TK_Bounding(unsigned char opcode) : TK_Bounding(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Bounding::SwigDirector_TK_Bounding(unsigned char opcode, float min[], float max[]) : TK_Bounding(opcode, min, max), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Bounding::SwigDirector_TK_Bounding(unsigned char opcode, float center[], float radius) : TK_Bounding(opcode, center, radius), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Bounding::SwigDirector_TK_Bounding(unsigned char opcode, double min[], double max[]) : TK_Bounding(opcode, min, max), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Bounding::SwigDirector_TK_Bounding(unsigned char opcode, double center[], double radius) : TK_Bounding(opcode, center, radius), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Bounding::~SwigDirector_TK_Bounding() {
  
}


TK_Status SwigDirector_TK_Bounding::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Bounding::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Bounding::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Bounding::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Bounding::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Bounding::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Bounding::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Bounding::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Bounding::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Bounding::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Bounding::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Bounding::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Bounding::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Bounding::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Point::SwigDirector_TK_Point(unsigned char opcode) : TK_Point(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Point::~SwigDirector_TK_Point() {
  
}


TK_Status SwigDirector_TK_Point::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Point::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Point::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Point::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Point::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Point::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Point::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Point::Reset() {
  if (!swig_callbackReset) {
    TK_Point::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Point::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Point::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Point::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Point::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Point::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Point::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Line::SwigDirector_TK_Line(unsigned char opcode) : TK_Line(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Line::~SwigDirector_TK_Line() {
  
}


TK_Status SwigDirector_TK_Line::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Line::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Line::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Line::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Line::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Line::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Line::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Line::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Line::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Polypoint::SwigDirector_TK_Polypoint(unsigned char opcode) : TK_Polypoint(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Polypoint::~SwigDirector_TK_Polypoint() {
  
}


TK_Status SwigDirector_TK_Polypoint::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Polypoint::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polypoint::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Polypoint::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polypoint::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polypoint::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polypoint::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Polypoint::Reset() {
  if (!swig_callbackReset) {
    TK_Polypoint::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Polypoint::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polypoint::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Polypoint::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Polypoint::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Polypoint::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Polypoint::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_NURBS_Curve::SwigDirector_TK_NURBS_Curve() : TK_NURBS_Curve(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_NURBS_Curve::~SwigDirector_TK_NURBS_Curve() {
  
}


TK_Status SwigDirector_TK_NURBS_Curve::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_NURBS_Curve::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Curve::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_NURBS_Curve::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Curve::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Curve::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Curve::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_NURBS_Curve::Reset() {
  if (!swig_callbackReset) {
    TK_NURBS_Curve::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_NURBS_Curve::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Curve::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_NURBS_Curve::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_NURBS_Curve::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_NURBS_Curve::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_NURBS_Curve::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_NURBS_Surface::SwigDirector_TK_NURBS_Surface() : TK_NURBS_Surface(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_NURBS_Surface::~SwigDirector_TK_NURBS_Surface() {
  
}


TK_Status SwigDirector_TK_NURBS_Surface::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_NURBS_Surface::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Surface::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_NURBS_Surface::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Surface::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Surface::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Surface::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_NURBS_Surface::Reset() {
  if (!swig_callbackReset) {
    TK_NURBS_Surface::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_NURBS_Surface::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_NURBS_Surface::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_NURBS_Surface::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_NURBS_Surface::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_NURBS_Surface::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_NURBS_Surface::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Area_Light::SwigDirector_TK_Area_Light() : TK_Area_Light(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Area_Light::~SwigDirector_TK_Area_Light() {
  
}


TK_Status SwigDirector_TK_Area_Light::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Area_Light::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Area_Light::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Area_Light::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Area_Light::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Area_Light::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Area_Light::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Area_Light::Reset() {
  if (!swig_callbackReset) {
    TK_Area_Light::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Area_Light::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Area_Light::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Area_Light::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Area_Light::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Area_Light::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Area_Light::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Spot_Light::SwigDirector_TK_Spot_Light() : TK_Spot_Light(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Spot_Light::~SwigDirector_TK_Spot_Light() {
  
}


TK_Status SwigDirector_TK_Spot_Light::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Spot_Light::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Spot_Light::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Spot_Light::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Spot_Light::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Spot_Light::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Spot_Light::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Spot_Light::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Spot_Light::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Spot_Light::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Spot_Light::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Spot_Light::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Spot_Light::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Spot_Light::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Cutting_Plane::SwigDirector_TK_Cutting_Plane() : TK_Cutting_Plane(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Cutting_Plane::~SwigDirector_TK_Cutting_Plane() {
  
}


TK_Status SwigDirector_TK_Cutting_Plane::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Cutting_Plane::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cutting_Plane::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Cutting_Plane::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cutting_Plane::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cutting_Plane::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cutting_Plane::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Cutting_Plane::Reset() {
  if (!swig_callbackReset) {
    TK_Cutting_Plane::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Cutting_Plane::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cutting_Plane::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Cutting_Plane::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Cutting_Plane::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Cutting_Plane::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Cutting_Plane::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Circle::SwigDirector_TK_Circle(unsigned char opcode) : TK_Circle(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Circle::~SwigDirector_TK_Circle() {
  
}


TK_Status SwigDirector_TK_Circle::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Circle::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Circle::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Circle::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Circle::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Circle::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Circle::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Circle::Reset() {
  if (!swig_callbackReset) {
    TK_Circle::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Circle::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Circle::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Circle::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Circle::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Circle::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Circle::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Ellipse::SwigDirector_TK_Ellipse(unsigned char opcode) : TK_Ellipse(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Ellipse::~SwigDirector_TK_Ellipse() {
  
}


TK_Status SwigDirector_TK_Ellipse::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Ellipse::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Ellipse::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Ellipse::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Ellipse::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Ellipse::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Ellipse::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Ellipse::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Ellipse::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Ellipse::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Ellipse::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Ellipse::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Ellipse::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Ellipse::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Sphere::SwigDirector_TK_Sphere() : TK_Sphere(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Sphere::~SwigDirector_TK_Sphere() {
  
}


TK_Status SwigDirector_TK_Sphere::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Sphere::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Sphere::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Sphere::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Sphere::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Sphere::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Sphere::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Sphere::Reset() {
  if (!swig_callbackReset) {
    TK_Sphere::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Sphere::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Sphere::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Sphere::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Sphere::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Sphere::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Sphere::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Cylinder::SwigDirector_TK_Cylinder() : TK_Cylinder(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Cylinder::~SwigDirector_TK_Cylinder() {
  
}


TK_Status SwigDirector_TK_Cylinder::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Cylinder::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cylinder::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Cylinder::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cylinder::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cylinder::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cylinder::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Cylinder::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Cylinder::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Cylinder::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Cylinder::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Cylinder::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Cylinder::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Cylinder::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_PolyCylinder::SwigDirector_TK_PolyCylinder() : TK_PolyCylinder(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_PolyCylinder::~SwigDirector_TK_PolyCylinder() {
  
}


TK_Status SwigDirector_TK_PolyCylinder::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Polyhedron::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Polyhedron::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_PolyCylinder::Reset() {
  if (!swig_callbackReset) {
    TK_PolyCylinder::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_PolyCylinder::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_PolyCylinder::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Polyhedron::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_PolyCylinder::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyCylinder::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_PolyCylinder::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_PolyCylinder::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_TK_PolyCylinder::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_TK_PolyCylinder::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_TK_Grid::SwigDirector_TK_Grid() : TK_Grid(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Grid::~SwigDirector_TK_Grid() {
  
}


TK_Status SwigDirector_TK_Grid::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Grid::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Grid::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Grid::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Grid::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Grid::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Grid::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Grid::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Grid::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Grid::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Grid::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Grid::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Grid::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Grid::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Text::SwigDirector_TK_Text(unsigned char opcode) : TK_Text(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Text::~SwigDirector_TK_Text() {
  
}


TK_Status SwigDirector_TK_Text::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Text::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Text::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Text::Reset() {
  if (!swig_callbackReset) {
    TK_Text::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Text::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Text::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Text::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Text::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Text::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Text::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Font::SwigDirector_TK_Font() : TK_Font(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Font::~SwigDirector_TK_Font() {
  
}


TK_Status SwigDirector_TK_Font::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Font::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Font::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Font::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Font::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Font::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Font::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Font::Reset() {
  if (!swig_callbackReset) {
    TK_Font::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Font::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Font::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Font::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Font::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Font::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Font::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Image::SwigDirector_TK_Image() : TK_Image(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Image::~SwigDirector_TK_Image() {
  
}


TK_Status SwigDirector_TK_Image::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Image::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Image::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Image::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Image::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Image::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Image::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Image::Reset() {
  if (!swig_callbackReset) {
    TK_Image::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Image::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Image::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Image::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Image::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Image::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Image::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Texture::SwigDirector_TK_Texture() : TK_Texture(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Texture::~SwigDirector_TK_Texture() {
  
}


TK_Status SwigDirector_TK_Texture::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Texture::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Texture::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Texture::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Texture::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Texture::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Texture::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Texture::Reset() {
  if (!swig_callbackReset) {
    TK_Texture::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Texture::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Texture::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Texture::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Texture::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Texture::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Texture::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Thumbnail::SwigDirector_TK_Thumbnail() : TK_Thumbnail(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Thumbnail::~SwigDirector_TK_Thumbnail() {
  
}


TK_Status SwigDirector_TK_Thumbnail::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Thumbnail::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Thumbnail::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Thumbnail::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Thumbnail::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_Thumbnail::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Thumbnail::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret) {
    return TK_Thumbnail::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Thumbnail::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return TK_Thumbnail::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Thumbnail::Reset() {
  if (!swig_callbackReset) {
    TK_Thumbnail::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Thumbnail::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Thumbnail::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Thumbnail::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Thumbnail::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Thumbnail::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret = callbackInterpret;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Thumbnail::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Glyph_Definition::SwigDirector_TK_Glyph_Definition() : TK_Glyph_Definition(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Glyph_Definition::~SwigDirector_TK_Glyph_Definition() {
  
}


TK_Status SwigDirector_TK_Glyph_Definition::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Glyph_Definition::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Glyph_Definition::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Glyph_Definition::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Glyph_Definition::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Glyph_Definition::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Glyph_Definition::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Glyph_Definition::Reset() {
  if (!swig_callbackReset) {
    TK_Glyph_Definition::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Glyph_Definition::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Glyph_Definition::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Glyph_Definition::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Glyph_Definition::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Glyph_Definition::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Glyph_Definition::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Line_Style::SwigDirector_TK_Line_Style() : TK_Line_Style(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Line_Style::~SwigDirector_TK_Line_Style() {
  
}


TK_Status SwigDirector_TK_Line_Style::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Line_Style::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line_Style::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Line_Style::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line_Style::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line_Style::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line_Style::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Line_Style::Reset() {
  if (!swig_callbackReset) {
    TK_Line_Style::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Line_Style::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Line_Style::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Line_Style::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Line_Style::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Line_Style::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Line_Style::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Clip_Rectangle::SwigDirector_TK_Clip_Rectangle() : TK_Clip_Rectangle(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Clip_Rectangle::~SwigDirector_TK_Clip_Rectangle() {
  
}


TK_Status SwigDirector_TK_Clip_Rectangle::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Clip_Rectangle::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Rectangle::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Clip_Rectangle::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Rectangle::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Rectangle::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Rectangle::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Clip_Rectangle::Reset() {
  if (!swig_callbackReset) {
    TK_Clip_Rectangle::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Clip_Rectangle::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Rectangle::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Clip_Rectangle::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Clip_Rectangle::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Clip_Rectangle::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Clip_Rectangle::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Clip_Region::SwigDirector_TK_Clip_Region() : TK_Clip_Region(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Clip_Region::~SwigDirector_TK_Clip_Region() {
  
}


TK_Status SwigDirector_TK_Clip_Region::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Clip_Region::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Region::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Clip_Region::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Region::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Region::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Region::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Clip_Region::Reset() {
  if (!swig_callbackReset) {
    TK_Clip_Region::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Clip_Region::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Clip_Region::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_Clip_Region::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Clip_Region::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_Clip_Region::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_Clip_Region::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_User_Data::SwigDirector_TK_User_Data() : TK_User_Data(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_User_Data::~SwigDirector_TK_User_Data() {
  
}


TK_Status SwigDirector_TK_User_Data::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Data::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Data::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Data::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Data::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_User_Data::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Data::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Data::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_User_Data::Reset() {
  if (!swig_callbackReset) {
    TK_User_Data::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_User_Data::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_User_Data::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_User_Data::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_User_Data::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_User_Data::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_User_Data::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_XML::SwigDirector_TK_XML() : TK_XML(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_XML::~SwigDirector_TK_XML() {
  
}


TK_Status SwigDirector_TK_XML::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_XML::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_XML::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_XML::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_XML::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_XML::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_XML::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_XML::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_XML::Reset() {
  if (!swig_callbackReset) {
    TK_XML::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_XML::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_XML::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_XML::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_XML::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_XML::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_XML::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_URL::SwigDirector_TK_URL() : TK_URL(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_URL::~SwigDirector_TK_URL() {
  
}


TK_Status SwigDirector_TK_URL::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_URL::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_URL::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_URL::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_URL::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_URL::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_URL::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_URL::Reset() {
  if (!swig_callbackReset) {
    TK_URL::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_URL::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_URL::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_URL::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_URL::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_URL::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_URL::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_External_Reference::SwigDirector_TK_External_Reference() : TK_External_Reference(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_External_Reference::~SwigDirector_TK_External_Reference() {
  
}


TK_Status SwigDirector_TK_External_Reference::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_External_Reference::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_External_Reference::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_External_Reference::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_External_Reference::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_External_Reference::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_External_Reference::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_External_Reference::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_External_Reference::Reset() {
  if (!swig_callbackReset) {
    TK_External_Reference::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_External_Reference::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_External_Reference::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_External_Reference::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_External_Reference::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_External_Reference::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_External_Reference::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_TK_Polyhedron::SwigDirector_TK_Polyhedron(unsigned char op) : TK_Polyhedron(op), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Polyhedron::~SwigDirector_TK_Polyhedron() {
  
}


TK_Status SwigDirector_TK_Polyhedron::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Polyhedron::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Polyhedron::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Polyhedron::Reset() {
  if (!swig_callbackReset) {
    TK_Polyhedron::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Polyhedron::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Polyhedron::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Polyhedron::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Polyhedron::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Polyhedron::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Polyhedron::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Polyhedron::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_TK_Polyhedron::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_TK_Polyhedron::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_TK_Mesh::SwigDirector_TK_Mesh() : TK_Mesh(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Mesh::~SwigDirector_TK_Mesh() {
  
}


TK_Status SwigDirector_TK_Mesh::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Mesh::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Mesh::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Mesh::Reset() {
  if (!swig_callbackReset) {
    TK_Mesh::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Mesh::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Mesh::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Mesh::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Mesh::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Mesh::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Mesh::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Mesh::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_TK_Mesh::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_TK_Mesh::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_TK_Shell::SwigDirector_TK_Shell() : TK_Shell(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_Shell::~SwigDirector_TK_Shell() {
  
}


TK_Status SwigDirector_TK_Shell::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Shell::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Shell::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_Shell::Reset() {
  if (!swig_callbackReset) {
    TK_Shell::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_Shell::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Shell::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Shell::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_Shell::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_Shell::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Shell::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_TK_Shell::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_TK_Shell::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_TK_Shell::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_TK_PolyPolypoint::SwigDirector_TK_PolyPolypoint(unsigned char opcode) : TK_PolyPolypoint(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_TK_PolyPolypoint::~SwigDirector_TK_PolyPolypoint() {
  
}


TK_Status SwigDirector_TK_PolyPolypoint::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_PolyPolypoint::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyPolypoint::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_PolyPolypoint::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyPolypoint::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return TK_PolyPolypoint::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyPolypoint::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyPolypoint::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_TK_PolyPolypoint::Reset() {
  if (!swig_callbackReset) {
    TK_PolyPolypoint::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_TK_PolyPolypoint::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_TK_PolyPolypoint::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return TK_PolyPolypoint::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_TK_PolyPolypoint::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_TK_PolyPolypoint::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_TK_PolyPolypoint::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Open_Segment::SwigDirector_HTK_Open_Segment() : HTK_Open_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Open_Segment::~SwigDirector_HTK_Open_Segment() {
  
}


TK_Status SwigDirector_HTK_Open_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Open_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Open_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Open_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Open_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Open_Segment::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Open_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Open_Segment::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Open_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Open_Segment::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Open_Segment::Reset() {
  if (!swig_callbackReset) {
    TK_Open_Segment::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Open_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Open_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Open_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Open_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Open_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Open_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Close_Segment::SwigDirector_HTK_Close_Segment() : HTK_Close_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Close_Segment::~SwigDirector_HTK_Close_Segment() {
  
}


TK_Status SwigDirector_HTK_Close_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Close_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Close_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Close_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Close_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Close_Segment::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Close_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Close_Segment::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Close_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Close_Segment::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Close_Segment::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Close_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Close_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Close_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Close_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Close_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Close_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Reopen_Segment::SwigDirector_HTK_Reopen_Segment() : HTK_Reopen_Segment(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Reopen_Segment::~SwigDirector_HTK_Reopen_Segment() {
  
}


TK_Status SwigDirector_HTK_Reopen_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Reopen_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Reopen_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Reopen_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Reopen_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Reopen_Segment::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Reopen_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Reopen_Segment::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Reopen_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Reopen_Segment::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Reopen_Segment::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Reopen_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Reopen_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Reopen_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Reopen_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Reopen_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Reopen_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Referenced_Segment::SwigDirector_HTK_Referenced_Segment(char opcode) : HTK_Referenced_Segment(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Referenced_Segment::~SwigDirector_HTK_Referenced_Segment() {
  
}


TK_Status SwigDirector_HTK_Referenced_Segment::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Referenced_Segment::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Referenced_Segment::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Referenced_Segment::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Referenced_Segment::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Referenced_Segment::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Referenced_Segment::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Referenced_Segment::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Referenced_Segment::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Referenced_Segment::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Referenced_Segment::Reset() {
  if (!swig_callbackReset) {
    HTK_Referenced_Segment::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Referenced_Segment::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Referenced_Segment::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Referenced_Segment::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Referenced_Segment::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Referenced_Segment::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Referenced_Segment::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Instance::SwigDirector_HTK_Instance(int from_index, int from_variant, int to_index, int to_variant, int options, float const *xform) : HTK_Instance(from_index, from_variant, to_index, to_variant, options, xform), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Instance::~SwigDirector_HTK_Instance() {
  
}


TK_Status SwigDirector_HTK_Instance::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Instance::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Instance::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Instance::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Instance::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Instance::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Instance::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret) {
    return HTK_Instance::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Instance::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Instance::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Instance::Reset() {
  if (!swig_callbackReset) {
    TK_Instance::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Instance::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Instance::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Instance::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Instance::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Instance::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret = callbackInterpret;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Instance::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Delete_Object::SwigDirector_HTK_Delete_Object() : HTK_Delete_Object(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Delete_Object::~SwigDirector_HTK_Delete_Object() {
  
}


TK_Status SwigDirector_HTK_Delete_Object::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Delete_Object::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Delete_Object::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Delete_Object::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Delete_Object::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Delete_Object::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Delete_Object::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Delete_Object::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Delete_Object::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Delete_Object::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Delete_Object::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Delete_Object::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Delete_Object::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Delete_Object::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Delete_Object::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Delete_Object::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Delete_Object::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_LOD::SwigDirector_HTK_LOD() : HTK_LOD(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_LOD::~SwigDirector_HTK_LOD() {
  
}


TK_Status SwigDirector_HTK_LOD::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_LOD::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_LOD::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_LOD::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_LOD::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_LOD::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_LOD::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_LOD::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_LOD::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_LOD::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_LOD::Reset() {
  if (!swig_callbackReset) {
    TK_LOD::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_LOD::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_LOD::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_LOD::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_LOD::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_LOD::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_LOD::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Renumber::SwigDirector_HTK_Renumber(unsigned char opcode, HC_KEY key) : HTK_Renumber(opcode, key), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Renumber::~SwigDirector_HTK_Renumber() {
  
}


TK_Status SwigDirector_HTK_Renumber::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Renumber::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Renumber::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Renumber::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Renumber::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Renumber::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Renumber::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Renumber::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Renumber::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Renumber::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Renumber::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Renumber::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Renumber::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Renumber::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Renumber::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Renumber::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Renumber::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color::SwigDirector_HTK_Color(int mask, int channels) : HTK_Color(mask, channels), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color::~SwigDirector_HTK_Color() {
  
}


TK_Status SwigDirector_HTK_Color::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color::Reset() {
  if (!swig_callbackReset) {
    TK_Color::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_RGB::SwigDirector_HTK_Color_RGB(int mask, float const *rgb) : HTK_Color_RGB(mask, rgb), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_RGB::~SwigDirector_HTK_Color_RGB() {
  
}


TK_Status SwigDirector_HTK_Color_RGB::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_RGB::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_RGB::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_RGB::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_RGB::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_RGB::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_RGB::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_RGB::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_RGB::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_RGB::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_RGB::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_RGB::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_RGB::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_RGB::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_RGB::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_RGB::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_RGB::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_By_Value::SwigDirector_HTK_Color_By_Value() : HTK_Color_By_Value(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_By_Value::~SwigDirector_HTK_Color_By_Value() {
  
}


TK_Status SwigDirector_HTK_Color_By_Value::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_Value::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Value::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_Value::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Value::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_By_Value::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Value::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_By_Value::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Value::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_By_Value::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_Value::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_By_Value::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Value::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_By_Value::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_By_Value::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_Value::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_By_Value::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_By_Index::SwigDirector_HTK_Color_By_Index(unsigned char opcode, int mask, int index) : HTK_Color_By_Index(opcode, mask, index), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_By_Index::~SwigDirector_HTK_Color_By_Index() {
  
}


TK_Status SwigDirector_HTK_Color_By_Index::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_Index::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Index::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_Index::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Index::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_By_Index::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Index::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_By_Index::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Index::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_By_Index::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_Index::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_By_Index::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_Index::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_By_Index::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_By_Index::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_Index::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_By_Index::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_By_FIndex::SwigDirector_HTK_Color_By_FIndex(int mask, float index) : HTK_Color_By_FIndex(mask, index), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_By_FIndex::~SwigDirector_HTK_Color_By_FIndex() {
  
}


TK_Status SwigDirector_HTK_Color_By_FIndex::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_By_FIndex::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_FIndex::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_By_FIndex::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_FIndex::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_By_FIndex::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_FIndex::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_By_FIndex::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_FIndex::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_By_FIndex::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_FIndex::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_By_FIndex::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_By_FIndex::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_By_FIndex::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_By_FIndex::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_By_FIndex::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_By_FIndex::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_Composite::SwigDirector_HTK_Color_Composite() : HTK_Color_Composite(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_Composite::~SwigDirector_HTK_Color_Composite() {
  
}


TK_Status SwigDirector_HTK_Color_Composite::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return HTK_Color_Composite::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Composite::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Color_Composite::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Composite::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_Composite::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Composite::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_Composite::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Composite::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_Composite::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_Composite::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_Composite::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Composite::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_Composite::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_Composite::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_Composite::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_Composite::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Color_Map::SwigDirector_HTK_Color_Map() : HTK_Color_Map(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Color_Map::~SwigDirector_HTK_Color_Map() {
  
}


TK_Status SwigDirector_HTK_Color_Map::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Color_Map::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Map::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Color_Map::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Map::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Color_Map::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Map::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Color_Map::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Map::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Color_Map::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_Map::Reset() {
  if (!swig_callbackReset) {
    TK_Color_Map::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Color_Map::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Color_Map::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Color_Map::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Color_Map::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Color_Map::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Color_Map::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Callback::SwigDirector_HTK_Callback() : HTK_Callback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Callback::~SwigDirector_HTK_Callback() {
  
}


TK_Status SwigDirector_HTK_Callback::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Callback::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Callback::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Callback::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Callback::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Callback::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Callback::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Callback::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Callback::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Callback::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Callback::Reset() {
  if (!swig_callbackReset) {
    TK_Callback::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Callback::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Callback::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Callback::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Callback::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Callback::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Callback::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Rendering_Options::SwigDirector_HTK_Rendering_Options() : HTK_Rendering_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Rendering_Options::~SwigDirector_HTK_Rendering_Options() {
  
}


TK_Status SwigDirector_HTK_Rendering_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Rendering_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Rendering_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Rendering_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Rendering_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Rendering_Options::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Rendering_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Rendering_Options::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Rendering_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Rendering_Options::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Rendering_Options::Reset() {
  if (!swig_callbackReset) {
    TK_Rendering_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Rendering_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Rendering_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Rendering_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Rendering_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Rendering_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Rendering_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Heuristics::SwigDirector_HTK_Heuristics() : HTK_Heuristics(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Heuristics::~SwigDirector_HTK_Heuristics() {
  
}


TK_Status SwigDirector_HTK_Heuristics::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Heuristics::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Heuristics::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Heuristics::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Heuristics::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Heuristics::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Heuristics::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Heuristics::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Heuristics::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Heuristics::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Heuristics::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Heuristics::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Heuristics::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Heuristics::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Heuristics::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Heuristics::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Heuristics::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Visibility::SwigDirector_HTK_Visibility() : HTK_Visibility(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Visibility::~SwigDirector_HTK_Visibility() {
  
}


TK_Status SwigDirector_HTK_Visibility::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Visibility::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Visibility::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Visibility::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Visibility::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Visibility::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Visibility::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Visibility::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Visibility::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Visibility::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Visibility::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Visibility::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Visibility::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Visibility::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Visibility::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Visibility::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Visibility::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Selectability::SwigDirector_HTK_Selectability() : HTK_Selectability(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Selectability::~SwigDirector_HTK_Selectability() {
  
}


TK_Status SwigDirector_HTK_Selectability::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Selectability::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Selectability::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Selectability::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Selectability::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Selectability::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Selectability::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Selectability::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Selectability::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Selectability::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Selectability::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Selectability::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Selectability::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Selectability::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Selectability::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Selectability::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Selectability::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Matrix::SwigDirector_HTK_Matrix(unsigned char opcode) : HTK_Matrix(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Matrix::~SwigDirector_HTK_Matrix() {
  
}


TK_Status SwigDirector_HTK_Matrix::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Matrix::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Matrix::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Matrix::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Matrix::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Matrix::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Matrix::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Matrix::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Matrix::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Matrix::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Matrix::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Matrix::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Matrix::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Matrix::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Matrix::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Matrix::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Matrix::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Enumerated::SwigDirector_HTK_Enumerated(unsigned char opcode) : HTK_Enumerated(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Enumerated::~SwigDirector_HTK_Enumerated() {
  
}


TK_Status SwigDirector_HTK_Enumerated::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Enumerated::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Enumerated::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Enumerated::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Enumerated::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Enumerated::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Enumerated::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Enumerated::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Enumerated::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Enumerated::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Enumerated::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Enumerated::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Enumerated::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Enumerated::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Enumerated::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Enumerated::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Enumerated::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Size::SwigDirector_HTK_Size(unsigned char opcode) : HTK_Size(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Size::~SwigDirector_HTK_Size() {
  
}


TK_Status SwigDirector_HTK_Size::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Size::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Size::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Size::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Size::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Size::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Size::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Size::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Size::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Size::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Size::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Size::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Size::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Size::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Size::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Size::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Size::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Linear_Pattern::SwigDirector_HTK_Linear_Pattern(unsigned char opcode) : HTK_Linear_Pattern(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Linear_Pattern::~SwigDirector_HTK_Linear_Pattern() {
  
}


TK_Status SwigDirector_HTK_Linear_Pattern::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Linear_Pattern::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Linear_Pattern::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Linear_Pattern::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Linear_Pattern::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Linear_Pattern::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Linear_Pattern::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Linear_Pattern::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Linear_Pattern::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Linear_Pattern::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Linear_Pattern::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Linear_Pattern::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Linear_Pattern::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Linear_Pattern::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Linear_Pattern::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Linear_Pattern::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Linear_Pattern::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Named::SwigDirector_HTK_Named(unsigned char opcode) : HTK_Named(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Named::~SwigDirector_HTK_Named() {
  
}


TK_Status SwigDirector_HTK_Named::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Named::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Named::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Named::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Named::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Named::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Named::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Named::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Named::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Named::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Named::Reset() {
  if (!swig_callbackReset) {
    TK_Named::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Named::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Named::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Named::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Named::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Named::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Named::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Streaming::SwigDirector_HTK_Streaming() : HTK_Streaming(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Streaming::~SwigDirector_HTK_Streaming() {
  
}


TK_Status SwigDirector_HTK_Streaming::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Streaming::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Streaming::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Streaming::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Streaming::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Streaming::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Streaming::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Streaming::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Streaming::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Streaming::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Streaming::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Streaming::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Streaming::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Streaming::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Streaming::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Streaming::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Streaming::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Conditions::SwigDirector_HTK_Conditions() : HTK_Conditions(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Conditions::~SwigDirector_HTK_Conditions() {
  
}


TK_Status SwigDirector_HTK_Conditions::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Conditions::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Conditions::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Conditions::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Conditions::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Conditions::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Conditions::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Conditions::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Conditions::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Conditions::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Conditions::Reset() {
  if (!swig_callbackReset) {
    TK_Conditions::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Conditions::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Conditions::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Conditions::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Conditions::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Conditions::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Conditions::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_User_Options::SwigDirector_HTK_User_Options() : HTK_User_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_User_Options::~SwigDirector_HTK_User_Options() {
  
}


TK_Status SwigDirector_HTK_User_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_User_Options::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_User_Options::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_User_Options::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Options::Reset() {
  if (!swig_callbackReset) {
    TK_User_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_User_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_User_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_User_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_User_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Unicode_Options::SwigDirector_HTK_Unicode_Options() : HTK_Unicode_Options(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Unicode_Options::~SwigDirector_HTK_Unicode_Options() {
  
}


TK_Status SwigDirector_HTK_Unicode_Options::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Unicode_Options::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Unicode_Options::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Unicode_Options::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Unicode_Options::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Unicode_Options::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Unicode_Options::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Unicode_Options::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Unicode_Options::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Unicode_Options::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Unicode_Options::Reset() {
  if (!swig_callbackReset) {
    TK_Unicode_Options::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Unicode_Options::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Unicode_Options::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Unicode_Options::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Unicode_Options::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Unicode_Options::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Unicode_Options::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_User_Index::SwigDirector_HTK_User_Index() : HTK_User_Index(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_User_Index::~SwigDirector_HTK_User_Index() {
  
}


TK_Status SwigDirector_HTK_User_Index::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Index::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Index::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Index::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Index::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_User_Index::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Index::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_User_Index::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Index::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_User_Index::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Index::Reset() {
  if (!swig_callbackReset) {
    TK_User_Index::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_User_Index::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Index::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_User_Index::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_User_Index::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Index::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_User_Index::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_User_Value::SwigDirector_HTK_User_Value() : HTK_User_Value(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_User_Value::~SwigDirector_HTK_User_Value() {
  
}


TK_Status SwigDirector_HTK_User_Value::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_User_Value::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Value::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_User_Value::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Value::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_User_Value::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Value::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_User_Value::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Value::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_User_Value::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Value::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_User_Value::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_User_Value::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_User_Value::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_User_Value::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_User_Value::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_User_Value::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Camera::SwigDirector_HTK_Camera(unsigned char opcode) : HTK_Camera(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Camera::~SwigDirector_HTK_Camera() {
  
}


TK_Status SwigDirector_HTK_Camera::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Camera::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Camera::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Camera::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Camera::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Camera::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Camera::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Camera::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Camera::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Camera::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Camera::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Camera::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Camera::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Camera::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Camera::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Camera::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Camera::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Window::SwigDirector_HTK_Window() : HTK_Window(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Window::~SwigDirector_HTK_Window() {
  
}


TK_Status SwigDirector_HTK_Window::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Window::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Window::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Window::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Window::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Window::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Window::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Window::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Window::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Window::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Window::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Window::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Window::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Window::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Window::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Window::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Window::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Clip_Region::SwigDirector_HTK_Clip_Region() : HTK_Clip_Region(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Clip_Region::~SwigDirector_HTK_Clip_Region() {
  
}


TK_Status SwigDirector_HTK_Clip_Region::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Clip_Region::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Region::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Clip_Region::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Region::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Clip_Region::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Region::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Clip_Region::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Region::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Clip_Region::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Clip_Region::Reset() {
  if (!swig_callbackReset) {
    TK_Clip_Region::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Clip_Region::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Region::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Clip_Region::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Clip_Region::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Clip_Region::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Clip_Region::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Clip_Rectangle::SwigDirector_HTK_Clip_Rectangle() : HTK_Clip_Rectangle(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Clip_Rectangle::~SwigDirector_HTK_Clip_Rectangle() {
  
}


TK_Status SwigDirector_HTK_Clip_Rectangle::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Clip_Rectangle::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Rectangle::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Clip_Rectangle::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Rectangle::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Clip_Rectangle::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Rectangle::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Rectangle::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Clip_Rectangle::Reset() {
  if (!swig_callbackReset) {
    TK_Clip_Rectangle::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Clip_Rectangle::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Clip_Rectangle::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Clip_Rectangle::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Clip_Rectangle::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Clip_Rectangle::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Clip_Rectangle::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Text_Font::SwigDirector_HTK_Text_Font() : HTK_Text_Font(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Text_Font::~SwigDirector_HTK_Text_Font() {
  
}


TK_Status SwigDirector_HTK_Text_Font::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Text_Font::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text_Font::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Text_Font::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text_Font::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Text_Font::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text_Font::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Text_Font::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text_Font::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Text_Font::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Text_Font::Reset() {
  if (!swig_callbackReset) {
    TK_Text_Font::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Text_Font::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text_Font::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Text_Font::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Text_Font::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Text_Font::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Text_Font::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Bounding::SwigDirector_HTK_Bounding(unsigned char opcode) : HTK_Bounding(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Bounding::SwigDirector_HTK_Bounding(unsigned char opcode, float *min, float *max) : HTK_Bounding(opcode, min, max), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Bounding::SwigDirector_HTK_Bounding(unsigned char opcode, float *center, float radius) : HTK_Bounding(opcode, center, radius), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Bounding::~SwigDirector_HTK_Bounding() {
  
}


TK_Status SwigDirector_HTK_Bounding::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Bounding::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Bounding::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Bounding::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Bounding::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Bounding::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Bounding::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Bounding::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Bounding::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Bounding::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Bounding::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Bounding::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Bounding::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Bounding::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Bounding::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Bounding::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Bounding::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Point::SwigDirector_HTK_Point(unsigned char opcode) : HTK_Point(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Point::~SwigDirector_HTK_Point() {
  
}


TK_Status SwigDirector_HTK_Point::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Point::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Point::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Point::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Point::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Point::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Point::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Point::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Point::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Point::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Point::Reset() {
  if (!swig_callbackReset) {
    TK_Point::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Point::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Point::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Point::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Point::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Point::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Point::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Line::SwigDirector_HTK_Line(unsigned char opcode) : HTK_Line(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Line::~SwigDirector_HTK_Line() {
  
}


TK_Status SwigDirector_HTK_Line::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Line::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Line::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Line::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Line::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Line::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Line::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Line::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Line::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Line::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Line::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Line::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Polypoint::SwigDirector_HTK_Polypoint(unsigned char opcode) : HTK_Polypoint(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Polypoint::~SwigDirector_HTK_Polypoint() {
  
}


TK_Status SwigDirector_HTK_Polypoint::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Polypoint::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Polypoint::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Polypoint::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Polypoint::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Polypoint::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Polypoint::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Polypoint::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Polypoint::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Polypoint::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Polypoint::Reset() {
  if (!swig_callbackReset) {
    TK_Polypoint::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Polypoint::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Polypoint::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Polypoint::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Polypoint::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Polypoint::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Polypoint::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_NURBS_Curve::SwigDirector_HTK_NURBS_Curve() : HTK_NURBS_Curve(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_NURBS_Curve::~SwigDirector_HTK_NURBS_Curve() {
  
}


TK_Status SwigDirector_HTK_NURBS_Curve::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_NURBS_Curve::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Curve::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_NURBS_Curve::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Curve::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_NURBS_Curve::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Curve::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_NURBS_Curve::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Curve::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_NURBS_Curve::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_NURBS_Curve::Reset() {
  if (!swig_callbackReset) {
    TK_NURBS_Curve::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_NURBS_Curve::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Curve::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_NURBS_Curve::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_NURBS_Curve::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_NURBS_Curve::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_NURBS_Curve::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_NURBS_Surface::SwigDirector_HTK_NURBS_Surface() : HTK_NURBS_Surface(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_NURBS_Surface::~SwigDirector_HTK_NURBS_Surface() {
  
}


TK_Status SwigDirector_HTK_NURBS_Surface::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_NURBS_Surface::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Surface::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_NURBS_Surface::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Surface::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_NURBS_Surface::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Surface::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_NURBS_Surface::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Surface::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_NURBS_Surface::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_NURBS_Surface::Reset() {
  if (!swig_callbackReset) {
    TK_NURBS_Surface::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_NURBS_Surface::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_NURBS_Surface::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_NURBS_Surface::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_NURBS_Surface::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_NURBS_Surface::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_NURBS_Surface::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Area_Light::SwigDirector_HTK_Area_Light() : HTK_Area_Light(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Area_Light::~SwigDirector_HTK_Area_Light() {
  
}


TK_Status SwigDirector_HTK_Area_Light::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Area_Light::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Area_Light::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Area_Light::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Area_Light::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Area_Light::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Area_Light::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Area_Light::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Area_Light::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Area_Light::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Area_Light::Reset() {
  if (!swig_callbackReset) {
    TK_Area_Light::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Area_Light::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Area_Light::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Area_Light::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Area_Light::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Area_Light::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Area_Light::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Spot_Light::SwigDirector_HTK_Spot_Light() : HTK_Spot_Light(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Spot_Light::~SwigDirector_HTK_Spot_Light() {
  
}


TK_Status SwigDirector_HTK_Spot_Light::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Spot_Light::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Spot_Light::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Spot_Light::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Spot_Light::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Spot_Light::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Spot_Light::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Spot_Light::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Spot_Light::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Spot_Light::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Spot_Light::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Spot_Light::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Spot_Light::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Spot_Light::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Spot_Light::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Spot_Light::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Spot_Light::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Cutting_Plane::SwigDirector_HTK_Cutting_Plane() : HTK_Cutting_Plane(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Cutting_Plane::~SwigDirector_HTK_Cutting_Plane() {
  
}


TK_Status SwigDirector_HTK_Cutting_Plane::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Cutting_Plane::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cutting_Plane::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Cutting_Plane::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cutting_Plane::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Cutting_Plane::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cutting_Plane::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Cutting_Plane::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cutting_Plane::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Cutting_Plane::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Cutting_Plane::Reset() {
  if (!swig_callbackReset) {
    TK_Cutting_Plane::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Cutting_Plane::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cutting_Plane::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Cutting_Plane::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Cutting_Plane::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Cutting_Plane::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Cutting_Plane::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Circle::SwigDirector_HTK_Circle(unsigned char opcode) : HTK_Circle(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Circle::~SwigDirector_HTK_Circle() {
  
}


TK_Status SwigDirector_HTK_Circle::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Circle::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Circle::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Circle::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Circle::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Circle::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Circle::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Circle::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Circle::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Circle::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Circle::Reset() {
  if (!swig_callbackReset) {
    TK_Circle::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Circle::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Circle::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Circle::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Circle::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Circle::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Circle::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Ellipse::SwigDirector_HTK_Ellipse(unsigned char opcode) : HTK_Ellipse(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Ellipse::~SwigDirector_HTK_Ellipse() {
  
}


TK_Status SwigDirector_HTK_Ellipse::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Ellipse::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Ellipse::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Ellipse::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Ellipse::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Ellipse::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Ellipse::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Ellipse::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Ellipse::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Ellipse::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Ellipse::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Ellipse::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Ellipse::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Ellipse::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Ellipse::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Ellipse::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Ellipse::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Sphere::SwigDirector_HTK_Sphere() : HTK_Sphere(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Sphere::~SwigDirector_HTK_Sphere() {
  
}


TK_Status SwigDirector_HTK_Sphere::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Sphere::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Sphere::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Sphere::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Sphere::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Sphere::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Sphere::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Sphere::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Sphere::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Sphere::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Sphere::Reset() {
  if (!swig_callbackReset) {
    TK_Sphere::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Sphere::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Sphere::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Sphere::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Sphere::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Sphere::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Sphere::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Cylinder::SwigDirector_HTK_Cylinder() : HTK_Cylinder(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Cylinder::~SwigDirector_HTK_Cylinder() {
  
}


TK_Status SwigDirector_HTK_Cylinder::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Cylinder::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cylinder::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Cylinder::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cylinder::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Cylinder::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cylinder::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Cylinder::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cylinder::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Cylinder::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Cylinder::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Cylinder::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Cylinder::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Cylinder::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Cylinder::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Cylinder::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Cylinder::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_PolyCylinder::SwigDirector_HTK_PolyCylinder() : HTK_PolyCylinder(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_PolyCylinder::~SwigDirector_HTK_PolyCylinder() {
  
}


TK_Status SwigDirector_HTK_PolyCylinder::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Polyhedron::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Polyhedron::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return BBaseOpcodeHandler::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return BBaseOpcodeHandler::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return BBaseOpcodeHandler::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_PolyCylinder::Reset() {
  if (!swig_callbackReset) {
    TK_PolyCylinder::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_PolyCylinder::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return BBaseOpcodeHandler::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_PolyCylinder::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Polyhedron::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_PolyCylinder::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyCylinder::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_PolyCylinder::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_PolyCylinder::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_HTK_PolyCylinder::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_HTK_PolyCylinder::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_HTK_Grid::SwigDirector_HTK_Grid() : HTK_Grid(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Grid::~SwigDirector_HTK_Grid() {
  
}


TK_Status SwigDirector_HTK_Grid::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Grid::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Grid::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Grid::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Grid::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Grid::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Grid::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Grid::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Grid::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Grid::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Grid::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Grid::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Grid::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Grid::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Grid::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Grid::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Grid::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Text::SwigDirector_HTK_Text(unsigned char opcode) : HTK_Text(opcode), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Text::~SwigDirector_HTK_Text() {
  
}


TK_Status SwigDirector_HTK_Text::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Text::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Text::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Text::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Text::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Text::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Text::Reset() {
  if (!swig_callbackReset) {
    TK_Text::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Text::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Text::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Text::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Text::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Text::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Text::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Font::SwigDirector_HTK_Font() : HTK_Font(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Font::~SwigDirector_HTK_Font() {
  
}


TK_Status SwigDirector_HTK_Font::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Font::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Font::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Font::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Font::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Font::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Font::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Font::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Font::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Font::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Font::Reset() {
  if (!swig_callbackReset) {
    TK_Font::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Font::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Font::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Font::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Font::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Font::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Font::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Image::SwigDirector_HTK_Image() : HTK_Image(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Image::~SwigDirector_HTK_Image() {
  
}


TK_Status SwigDirector_HTK_Image::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Image::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Image::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Image::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Image::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Image::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Image::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Image::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Image::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Image::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Image::Reset() {
  if (!swig_callbackReset) {
    TK_Image::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Image::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Image::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Image::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Image::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Image::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Image::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Texture::SwigDirector_HTK_Texture() : HTK_Texture(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Texture::~SwigDirector_HTK_Texture() {
  
}


TK_Status SwigDirector_HTK_Texture::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Texture::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Texture::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Texture::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Texture::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Texture::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Texture::Reset() {
  if (!swig_callbackReset) {
    HTK_Texture::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Texture::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Texture::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Texture::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Texture::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Texture::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Texture_Definitions::SwigDirector_HTK_Texture_Definitions(bool shader) : HTK_Texture_Definitions(shader), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Texture_Definitions::~SwigDirector_HTK_Texture_Definitions() {
  
}


TK_Status SwigDirector_HTK_Texture_Definitions::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return HTK_Texture_Definitions::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture_Definitions::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Texture_Definitions::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture_Definitions::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Texture_Definitions::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture_Definitions::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Texture_Definitions::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture_Definitions::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Texture_Definitions::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Texture_Definitions::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Texture_Definitions::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Texture_Definitions::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Texture_Definitions::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Texture_Definitions::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Texture_Definitions::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Texture_Definitions::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Glyph_Definition::SwigDirector_HTK_Glyph_Definition() : HTK_Glyph_Definition(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Glyph_Definition::~SwigDirector_HTK_Glyph_Definition() {
  
}


TK_Status SwigDirector_HTK_Glyph_Definition::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Glyph_Definition::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definition::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Glyph_Definition::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definition::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Glyph_Definition::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definition::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Glyph_Definition::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definition::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Glyph_Definition::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Glyph_Definition::Reset() {
  if (!swig_callbackReset) {
    TK_Glyph_Definition::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Glyph_Definition::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definition::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Glyph_Definition::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Glyph_Definition::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Glyph_Definition::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Glyph_Definition::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Glyph_Definitions::SwigDirector_HTK_Glyph_Definitions() : HTK_Glyph_Definitions(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Glyph_Definitions::~SwigDirector_HTK_Glyph_Definitions() {
  
}


TK_Status SwigDirector_HTK_Glyph_Definitions::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return HTK_Glyph_Definitions::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definitions::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Glyph_Definitions::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definitions::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Glyph_Definitions::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definitions::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Glyph_Definitions::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definitions::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Glyph_Definitions::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Glyph_Definitions::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Glyph_Definitions::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Glyph_Definitions::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Glyph_Definitions::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Glyph_Definitions::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Glyph_Definitions::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Glyph_Definitions::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Line_Style::SwigDirector_HTK_Line_Style() : HTK_Line_Style(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Line_Style::~SwigDirector_HTK_Line_Style() {
  
}


TK_Status SwigDirector_HTK_Line_Style::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Line_Style::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Style::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Line_Style::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Style::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Line_Style::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Style::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Line_Style::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Style::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Line_Style::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Line_Style::Reset() {
  if (!swig_callbackReset) {
    TK_Line_Style::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Line_Style::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Style::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Line_Style::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Line_Style::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Line_Style::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Line_Style::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Line_Styles::SwigDirector_HTK_Line_Styles() : HTK_Line_Styles(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Line_Styles::~SwigDirector_HTK_Line_Styles() {
  
}


TK_Status SwigDirector_HTK_Line_Styles::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return HTK_Line_Styles::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Styles::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return HTK_Line_Styles::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Styles::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Line_Styles::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Styles::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Line_Styles::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Styles::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Line_Styles::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Line_Styles::Reset() {
  if (!swig_callbackReset) {
    BBaseOpcodeHandler::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Line_Styles::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Line_Styles::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Line_Styles::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Line_Styles::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_Line_Styles::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_Line_Styles::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}

SwigDirector_HTK_Shell::SwigDirector_HTK_Shell() : HTK_Shell(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Shell::~SwigDirector_HTK_Shell() {
  
}


TK_Status SwigDirector_HTK_Shell::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Shell::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Shell::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Shell::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Shell::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Shell::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Shell::Reset() {
  if (!swig_callbackReset) {
    TK_Shell::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Shell::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return HTK_Shell::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Shell::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Shell::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Shell::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return HTK_Shell::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Shell::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Shell::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_Shell::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_Shell::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

TK_Status SwigDirector_HTK_Shell::Usefulness(BStreamFileToolkit &tk, HC_KEY key, int lod, float &score) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jkey  ;
  int jlod  ;
  float * jscore = 0 ;
  
  if (!swig_callbackUsefulness) {
    return HTK_Shell::Usefulness(tk,key,lod,score);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = (void *)&key; 
    jlod = lod;
    jscore = &score;
    jresult = (int) swig_callbackUsefulness(jtk, jkey, jlod, jscore);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Shell::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii, SWIG_Callback26_t callbackUsefulness) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
  swig_callbackUsefulness = callbackUsefulness;
}

void SwigDirector_HTK_Shell::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
  swig_callbackUsefulness = 0;
}

SwigDirector_HTK_Mesh::SwigDirector_HTK_Mesh() : HTK_Mesh(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_Mesh::~SwigDirector_HTK_Mesh() {
  
}


TK_Status SwigDirector_HTK_Mesh::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_Mesh::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_Mesh::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_Mesh::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_Mesh::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_Mesh::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_Mesh::Reset() {
  if (!swig_callbackReset) {
    TK_Mesh::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_Mesh::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return HTK_Mesh::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_Mesh::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Mesh::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::EnumerateEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackEnumerateEdges) {
    return TK_Mesh::EnumerateEdges();
  } else {
    jresult = (int) swig_callbackEnumerateEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::LabelFakeEdges() {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  
  if (!swig_callbackLabelFakeEdges) {
    return TK_Polyhedron::LabelFakeEdges();
  } else {
    jresult = (int) swig_callbackLabelFakeEdges();
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_Mesh::AllowInstancing(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackAllowInstancing) {
    return TK_Polyhedron::AllowInstancing(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackAllowInstancing(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::read_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points) {
    return TK_Polyhedron::read_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::write_trivial_points(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points) {
    return TK_Polyhedron::write_trivial_points(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::read_collection(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection) {
    return TK_Polyhedron::read_collection(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::write_collection(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_3arg) {
    return TK_Polyhedron::write_collection(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::read_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_trivial_points_ascii) {
    return TK_Polyhedron::read_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::write_trivial_points_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_trivial_points_ascii) {
    return TK_Polyhedron::write_trivial_points_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_trivial_points_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::read_collection_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackread_collection_ascii) {
    return TK_Polyhedron::read_collection_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackread_collection_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::write_vertex_marker_sizes_ascii(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackwrite_vertex_marker_sizes_ascii) {
    return TK_Polyhedron::write_vertex_marker_sizes_ascii(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackwrite_vertex_marker_sizes_ascii(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::write_collection_ascii(BStreamFileToolkit &tk, bool write_tag, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  unsigned int jwrite_tag  ;
  int jvariant  ;
  
  if (!swig_callbackwrite_collection_ascii_3arg) {
    return TK_Polyhedron::write_collection_ascii(tk,write_tag,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jwrite_tag = write_tag;
    jvariant = variant;
    jresult = (int) swig_callbackwrite_collection_ascii_3arg(jtk, jwrite_tag, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_Mesh::mangle_points(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_points(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_Mesh::mangle_point_attributes(BStreamFileToolkit &tk, int pointmap_count, int pointmap[]) {
  return TK_Polyhedron::mangle_point_attributes(tk,pointmap_count,pointmap);
}

TK_Status SwigDirector_HTK_Mesh::mangle_face_attributes(BStreamFileToolkit &tk, int facemap_count, int facemap[]) {
  return TK_Polyhedron::mangle_face_attributes(tk,facemap_count,facemap);
}

void SwigDirector_HTK_Mesh::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext, SWIG_Callback10_t callbackEnumerateEdges, SWIG_Callback11_t callbackLabelFakeEdges, SWIG_Callback12_t callbackAllowInstancing, SWIG_Callback13_t callbackread_trivial_points, SWIG_Callback14_t callbackwrite_trivial_points, SWIG_Callback15_t callbackread_collection, SWIG_Callback16_t callbackwrite_collection_3arg, SWIG_Callback17_t callbackwrite_collection_2arg, SWIG_Callback18_t callbackwrite_collection, SWIG_Callback19_t callbackread_trivial_points_ascii, SWIG_Callback20_t callbackwrite_trivial_points_ascii, SWIG_Callback21_t callbackread_collection_ascii, SWIG_Callback22_t callbackwrite_vertex_marker_sizes_ascii, SWIG_Callback23_t callbackwrite_collection_ascii_3arg, SWIG_Callback24_t callbackwrite_collection_ascii_2arg, SWIG_Callback25_t callbackwrite_collection_ascii) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
  swig_callbackEnumerateEdges = callbackEnumerateEdges;
  swig_callbackLabelFakeEdges = callbackLabelFakeEdges;
  swig_callbackAllowInstancing = callbackAllowInstancing;
  swig_callbackread_trivial_points = callbackread_trivial_points;
  swig_callbackwrite_trivial_points = callbackwrite_trivial_points;
  swig_callbackread_collection = callbackread_collection;
  swig_callbackwrite_collection_3arg = callbackwrite_collection_3arg;
  swig_callbackwrite_collection_2arg = callbackwrite_collection_2arg;
  swig_callbackwrite_collection = callbackwrite_collection;
  swig_callbackread_trivial_points_ascii = callbackread_trivial_points_ascii;
  swig_callbackwrite_trivial_points_ascii = callbackwrite_trivial_points_ascii;
  swig_callbackread_collection_ascii = callbackread_collection_ascii;
  swig_callbackwrite_vertex_marker_sizes_ascii = callbackwrite_vertex_marker_sizes_ascii;
  swig_callbackwrite_collection_ascii_3arg = callbackwrite_collection_ascii_3arg;
  swig_callbackwrite_collection_ascii_2arg = callbackwrite_collection_ascii_2arg;
  swig_callbackwrite_collection_ascii = callbackwrite_collection_ascii;
}

void SwigDirector_HTK_Mesh::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
  swig_callbackEnumerateEdges = 0;
  swig_callbackLabelFakeEdges = 0;
  swig_callbackAllowInstancing = 0;
  swig_callbackread_trivial_points = 0;
  swig_callbackwrite_trivial_points = 0;
  swig_callbackread_collection = 0;
  swig_callbackwrite_collection_3arg = 0;
  swig_callbackwrite_collection_2arg = 0;
  swig_callbackwrite_collection = 0;
  swig_callbackread_trivial_points_ascii = 0;
  swig_callbackwrite_trivial_points_ascii = 0;
  swig_callbackread_collection_ascii = 0;
  swig_callbackwrite_vertex_marker_sizes_ascii = 0;
  swig_callbackwrite_collection_ascii_3arg = 0;
  swig_callbackwrite_collection_ascii_2arg = 0;
  swig_callbackwrite_collection_ascii = 0;
}

SwigDirector_HTK_PolyPolypoint::SwigDirector_HTK_PolyPolypoint(unsigned char op) : HTK_PolyPolypoint(op), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HTK_PolyPolypoint::~SwigDirector_HTK_PolyPolypoint() {
  
}


TK_Status SwigDirector_HTK_PolyPolypoint::Read(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackRead) {
    return TK_PolyPolypoint::Read(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackRead(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyPolypoint::Write(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackWrite) {
    return TK_PolyPolypoint::Write(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackWrite(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyPolypoint::Execute(BStreamFileToolkit &tk) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackExecute) {
    return HTK_PolyPolypoint::Execute(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (int) swig_callbackExecute(jtk);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyPolypoint::Interpret(BStreamFileToolkit &tk, long key, int variant) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  int jvariant  ;
  
  if (!swig_callbackInterpret__SWIG_0) {
    return HTK_PolyPolypoint::Interpret(tk,key,variant);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jvariant = variant;
    jresult = (int) swig_callbackInterpret__SWIG_0(jtk, jkey, jvariant);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyPolypoint::Interpret(BStreamFileToolkit &tk, long key, char const *special) {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  ID_Key jkey  ;
  char * jspecial = 0 ;
  
  if (!swig_callbackInterpret_special) {
    return HTK_PolyPolypoint::Interpret(tk,key,special);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jkey = key;
    jspecial = SWIG_csharp_string_callback((const char *)special); 
    jresult = (int) swig_callbackInterpret_special(jtk, jkey, jspecial);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

void SwigDirector_HTK_PolyPolypoint::Reset() {
  if (!swig_callbackReset) {
    HTK_PolyPolypoint::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HTK_PolyPolypoint::Match_Instance(BStreamFileToolkit const &tk, Recorded_Instance *instance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  void * jinstance = 0 ;
  
  if (!swig_callbackMatch_Instance) {
    return BBaseOpcodeHandler::Match_Instance(tk,instance);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jinstance = (void *) instance; 
    jresult = (unsigned int) swig_callbackMatch_Instance(jtk, jinstance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

TK_Status SwigDirector_HTK_PolyPolypoint::Clone(BStreamFileToolkit &tk, BBaseOpcodeHandler **handler) const {
  TK_Status c_result = SwigValueInit< TK_Status >() ;
  int jresult = 0 ;
  void * jtk = 0 ;
  void * jhandler = 0 ;
  
  if (!swig_callbackClone) {
    return HTK_PolyPolypoint::Clone(tk,handler);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jhandler = (void *) handler; 
    jresult = (int) swig_callbackClone(jtk, jhandler);
    c_result = (TK_Status)jresult; 
  }
  return c_result;
}

bool SwigDirector_HTK_PolyPolypoint::NeedsContext(BStreamFileToolkit &tk) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jtk = 0 ;
  
  if (!swig_callbackNeedsContext) {
    return BBaseOpcodeHandler::NeedsContext(tk);
  } else {
    jtk = (BStreamFileToolkit *) &tk; 
    jresult = (unsigned int) swig_callbackNeedsContext(jtk);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HTK_PolyPolypoint::swig_connect_director(SWIG_Callback0_t callbackRead, SWIG_Callback1_t callbackWrite, SWIG_Callback2_t callbackExecute, SWIG_Callback3_t callbackInterpret__SWIG_0, SWIG_Callback4_t callbackInterpret__SWIG_1, SWIG_Callback5_t callbackInterpret_special, SWIG_Callback6_t callbackReset, SWIG_Callback7_t callbackMatch_Instance, SWIG_Callback8_t callbackClone, SWIG_Callback9_t callbackNeedsContext) {
  swig_callbackRead = callbackRead;
  swig_callbackWrite = callbackWrite;
  swig_callbackExecute = callbackExecute;
  swig_callbackInterpret__SWIG_0 = callbackInterpret__SWIG_0;
  swig_callbackInterpret__SWIG_1 = callbackInterpret__SWIG_1;
  swig_callbackInterpret_special = callbackInterpret_special;
  swig_callbackReset = callbackReset;
  swig_callbackMatch_Instance = callbackMatch_Instance;
  swig_callbackClone = callbackClone;
  swig_callbackNeedsContext = callbackNeedsContext;
}

void SwigDirector_HTK_PolyPolypoint::swig_init_callbacks() {
  swig_callbackRead = 0;
  swig_callbackWrite = 0;
  swig_callbackExecute = 0;
  swig_callbackInterpret__SWIG_0 = 0;
  swig_callbackInterpret__SWIG_1 = 0;
  swig_callbackInterpret_special = 0;
  swig_callbackReset = 0;
  swig_callbackMatch_Instance = 0;
  swig_callbackClone = 0;
  swig_callbackNeedsContext = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Format_Version_get() {
  int jresult ;
  int result;
  
  result = (int) 2010;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_DEFAULT_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 32768;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Read_Stream_File__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  BStreamFileToolkit *arg2 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2; 
  result = (TK_Status)TK_Read_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Read_Stream_File__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)TK_Read_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Read_Stream_File__SWIG_2(void * jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  result = (TK_Status)TK_Read_Stream_File((wchar_t const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BControlledMemoryObject() {
  void * jresult ;
  BControlledMemoryObject *result = 0 ;
  
  result = (BControlledMemoryObject *)new BControlledMemoryObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BControlledMemoryObject(void * jarg1) {
  BControlledMemoryObject *arg1 = (BControlledMemoryObject *) 0 ;
  
  arg1 = (BControlledMemoryObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IT_Index_Key_Extra_m_variants_set(void * jarg1, void * jarg2) {
  IT_Index_Key_Extra *arg1 = (IT_Index_Key_Extra *) 0 ;
  int (*arg2)[2] ;
  
  arg1 = (IT_Index_Key_Extra *)jarg1; 
  arg2 = (int (*)[2])jarg2; 
  {
    int (*inp)[2] = (int (*)[2])(arg2);
    int (*dest)[2] = (int (*)[2])(arg1->m_variants);
    size_t ii = 0;
    for (; ii < 8; ++ii) {
      int *ip = inp[ii];
      int *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 2; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IT_Index_Key_Extra_m_variants_get(void * jarg1) {
  void * jresult ;
  IT_Index_Key_Extra *arg1 = (IT_Index_Key_Extra *) 0 ;
  int (*result)[2] = 0 ;
  
  arg1 = (IT_Index_Key_Extra *)jarg1; 
  result = (int (*)[2])(int (*)[2]) ((arg1)->m_variants);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IT_Index_Key_Extra_m_options_set(void * jarg1, int jarg2) {
  IT_Index_Key_Extra *arg1 = (IT_Index_Key_Extra *) 0 ;
  int arg2 ;
  
  arg1 = (IT_Index_Key_Extra *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_options = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IT_Index_Key_Extra_m_options_get(void * jarg1) {
  int jresult ;
  IT_Index_Key_Extra *arg1 = (IT_Index_Key_Extra *) 0 ;
  int result;
  
  arg1 = (IT_Index_Key_Extra *)jarg1; 
  result = (int) ((arg1)->m_options);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IT_Index_Key_Extra() {
  void * jresult ;
  IT_Index_Key_Extra *result = 0 ;
  
  result = (IT_Index_Key_Extra *)new IT_Index_Key_Extra();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IT_Index_Key_Extra(void * jarg1) {
  IT_Index_Key_Extra *arg1 = (IT_Index_Key_Extra *) 0 ;
  
  arg1 = (IT_Index_Key_Extra *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Internal_Translator() {
  void * jresult ;
  Internal_Translator *result = 0 ;
  
  result = (Internal_Translator *)new Internal_Translator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Internal_Translator(void * jarg1) {
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  
  arg1 = (Internal_Translator *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_add_pair(void * jarg1, int jarg2, ID_Key jarg3) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  int arg2 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->add_pair(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_add_variant__SWIG_0(void * jarg1, ID_Key jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (TK_Status)(arg1)->add_variant(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_add_variant__SWIG_1(void * jarg1, ID_Key jarg2, int jarg3, int jarg4) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->add_variant(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_add_bounds(void * jarg1, ID_Key jarg2, float * jarg3) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)(arg1)->add_bounds(arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_index_to_key(void * jarg1, int jarg2, long * jarg3) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  int arg2 ;
  long *arg3 = 0 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long *)jarg3;
  result = (TK_Status)((Internal_Translator const *)arg1)->index_to_key(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_key_to_index(void * jarg1, ID_Key jarg2, int * jarg3) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int *arg3 = 0 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int *)jarg3;
  result = (TK_Status)((Internal_Translator const *)arg1)->key_to_index(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_key_variant_offset__SWIG_0(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4, int * jarg5, int * jarg6) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  arg5 = (int *)jarg5;
  arg6 = (int *)jarg6;
  result = (TK_Status)((Internal_Translator const *)arg1)->key_variant_offset(arg2,arg3,*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_key_bounds(void * jarg1, ID_Key jarg2, float * jarg3) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)((Internal_Translator const *)arg1)->key_bounds(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_used(void * jarg1) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  int result;
  
  arg1 = (Internal_Translator *)jarg1; 
  result = (int)((Internal_Translator const *)arg1)->used();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Internal_Translator_clean(void * jarg1) {
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  
  arg1 = (Internal_Translator *)jarg1; 
  (arg1)->clean();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_key_variant_offset__SWIG_1(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  result = (TK_Status)((Internal_Translator const *)arg1)->key_variant_offset(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Translator_key_variant_offset__SWIG_2(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4, int * jarg5) {
  int jresult ;
  Internal_Translator *arg1 = (Internal_Translator *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  TK_Status result;
  
  arg1 = (Internal_Translator *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  arg5 = (int *)jarg5;
  result = (TK_Status)((Internal_Translator const *)arg1)->key_variant_offset(arg2,arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Internal_Key_Record() {
  void * jresult ;
  Internal_Key_Record *result = 0 ;
  
  result = (Internal_Key_Record *)new Internal_Key_Record();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Internal_Key_Record(void * jarg1) {
  Internal_Key_Record *arg1 = (Internal_Key_Record *) 0 ;
  
  arg1 = (Internal_Key_Record *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Key_Record_add_key(void * jarg1, ID_Key jarg2) {
  int jresult ;
  Internal_Key_Record *arg1 = (Internal_Key_Record *) 0 ;
  long arg2 ;
  TK_Status result;
  
  arg1 = (Internal_Key_Record *)jarg1; 
  arg2 = jarg2; 
  result = (TK_Status)(arg1)->add_key(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Internal_Key_Record_find_key(void * jarg1, ID_Key jarg2) {
  int jresult ;
  Internal_Key_Record *arg1 = (Internal_Key_Record *) 0 ;
  long arg2 ;
  TK_Status result;
  
  arg1 = (Internal_Key_Record *)jarg1; 
  arg2 = jarg2; 
  result = (TK_Status)((Internal_Key_Record const *)arg1)->find_key(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Internal_Key_Record_clean(void * jarg1) {
  Internal_Key_Record *arg1 = (Internal_Key_Record *) 0 ;
  
  arg1 = (Internal_Key_Record *)jarg1; 
  (arg1)->clean();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Recorded_Instance_m_next_set(void * jarg1, void * jarg2) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  Recorded_Instance *arg2 = (Recorded_Instance *) 0 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = (Recorded_Instance *)jarg2; 
  if (arg1) (arg1)->m_next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Recorded_Instance_m_next_get(void * jarg1) {
  void * jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  Recorded_Instance *result = 0 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (Recorded_Instance *) ((arg1)->m_next);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Recorded_Instance_m_variant_set(void * jarg1, int jarg2) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  int arg2 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_variant = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Recorded_Instance_m_variant_get(void * jarg1) {
  int jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  int result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (int) ((arg1)->m_variant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Recorded_Instance_m_arbitrary_index_set(void * jarg1, int jarg2) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  int arg2 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_arbitrary_index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Recorded_Instance_m_arbitrary_index_get(void * jarg1) {
  int jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  int result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (int) ((arg1)->m_arbitrary_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Recorded_Instance_m_basis_valid_set(void * jarg1, unsigned int jarg2) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  bool arg2 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_basis_valid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Recorded_Instance_m_basis_valid_get(void * jarg1) {
  unsigned int jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (bool) ((arg1)->m_basis_valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Recorded_Instance_m_opcode_set(void * jarg1, unsigned char jarg2) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->m_opcode = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Recorded_Instance_m_opcode_get(void * jarg1) {
  unsigned char jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  unsigned char result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (unsigned char) ((arg1)->m_opcode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Recorded_Instance(ID_Key jarg1, int jarg2, unsigned char jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  long arg1 ;
  int arg2 ;
  unsigned char arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Recorded_Instance *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (Recorded_Instance *)new Recorded_Instance(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Recorded_Instance_basis_valid(void * jarg1) {
  unsigned int jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  result = (bool)((Recorded_Instance const *)arg1)->basis_valid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Recorded_Instance_generate_basis(void * jarg1, int jarg2, float * jarg3) {
  unsigned int jresult ;
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  int arg2 ;
  float *arg3 ;
  bool result;
  
  arg1 = (Recorded_Instance *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)(arg1)->generate_basis(arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Recorded_Instance(void * jarg1) {
  Recorded_Instance *arg1 = (Recorded_Instance *) 0 ;
  
  arg1 = (Recorded_Instance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BStreamFileToolkit() {
  void * jresult ;
  BStreamFileToolkit *result = 0 ;
  
  result = (BStreamFileToolkit *)new BStreamFileToolkit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BStreamFileToolkit(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_SupportsAsciiMode() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)BStreamFileToolkit::SupportsAsciiMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_SetAsciiMode(void * jarg1, unsigned int jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool arg2 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (TK_Status)(arg1)->SetAsciiMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GetAsciiMode(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)(arg1)->GetAsciiMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetTabs(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTabs(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetTabs(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)(arg1)->GetTabs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_ParseVersion(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)BStreamFileToolkit::ParseVersion((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_PrepareBuffer(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->PrepareBuffer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_CurrentBufferLength(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)(arg1)->CurrentBufferLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ActivateContext(void * jarg1, ID_Key jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ActivateContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_DeactivateContext(void * jarg1, ID_Key jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->DeactivateContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_NewFileContext(void * jarg1, ID_Key jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->NewFileContext(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GeneratedSoFar(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GeneratedSoFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_ObjectsSoFar(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (unsigned int)((BStreamFileToolkit const *)arg1)->ObjectsSoFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetOpcodeHandler(void * jarg1, int jarg2, void * jarg3) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  BBaseOpcodeHandler *arg3 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (BBaseOpcodeHandler *)jarg3; 
  (arg1)->SetOpcodeHandler(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetPrewalkHandler(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  BBaseOpcodeHandler *arg2 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (BBaseOpcodeHandler *)jarg2; 
  (arg1)->SetPrewalkHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetPostwalkHandler(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  BBaseOpcodeHandler *arg2 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (BBaseOpcodeHandler *)jarg2; 
  (arg1)->SetPostwalkHandler(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BStreamFileToolkit_GetOpcodeHandler(void * jarg1, int jarg2) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  BBaseOpcodeHandler *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (BBaseOpcodeHandler *)((BStreamFileToolkit const *)arg1)->GetOpcodeHandler(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_Restart(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->Restart();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_IndexToKey(void * jarg1, int jarg2, long * jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  long *arg3 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long *)jarg3;
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->IndexToKey(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_KeyToIndex(void * jarg1, ID_Key jarg2, int * jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int *arg3 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int *)jarg3;
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->KeyToIndex(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_AddIndexKeyPair(void * jarg1, int jarg2, ID_Key jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->AddIndexKeyPair(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_AddVariant__SWIG_0(void * jarg1, ID_Key jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (TK_Status)(arg1)->AddVariant(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_AddVariant__SWIG_1(void * jarg1, ID_Key jarg2, int jarg3, int jarg4) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->AddVariant(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_AddBounds(void * jarg1, ID_Key jarg2, float * jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)(arg1)->AddBounds(arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetOffset__SWIG_0(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->GetOffset(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetOffset__SWIG_1(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4, int * jarg5) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  arg5 = (int *)jarg5;
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->GetOffset(arg2,arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetOffset__SWIG_2(void * jarg1, ID_Key jarg2, int jarg3, int * jarg4, int * jarg5, void * jarg6) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  wchar_t **arg6 = 0 ;
  wchar_t *temp6 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  arg5 = (int *)jarg5;
  temp6 = (wchar_t *)jarg6;
  arg6 = &temp6; 
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->GetOffset(arg2,arg3,*arg4,*arg5,(wchar_t const *&)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetBounds(void * jarg1, ID_Key jarg2, float * jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->GetBounds(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_NextTagIndex(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)(arg1)->NextTagIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_PeekTagIndex(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->PeekTagIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetFilename(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  (arg1)->SetFilename((wchar_t const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_Read_Stream_File(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->Read_Stream_File();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNewFile(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  (arg1)->SetNewFile((wchar_t const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BStreamFileToolkit_GetCurrentFile__SWIG_0(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (wchar_t *)((BStreamFileToolkit const *)arg1)->GetCurrentFile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_GetCurrentFile__SWIG_1(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t **arg2 = 0 ;
  wchar_t *temp2 = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  temp2 = (wchar_t *)jarg2;
  arg2 = &temp2; 
  ((BStreamFileToolkit const *)arg1)->GetCurrentFile((wchar_t const *&)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_SelectFile(void * jarg1, void * jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (TK_Status)(arg1)->SelectFile((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_OpenFile__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (TK_Status)(arg1)->OpenFile((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_OpenFile__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (TK_Status)(arg1)->OpenFile((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_CloseFile(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->CloseFile();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_ReadBuffer(void * jarg1, char * jarg2, int jarg3, int * jarg4) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  result = (TK_Status)(arg1)->ReadBuffer(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_WriteBuffer(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->WriteBuffer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_PositionFile(void * jarg1, int jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->PositionFile(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetFileSize(void * jarg1, unsigned long * jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned long *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned long *)jarg2;
  result = (TK_Status)(arg1)->GetFileSize(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_LocateDictionary(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->LocateDictionary();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_LocateEntity(void * jarg1, ID_Key jarg2, int jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->LocateEntity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetFlags(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetFlags(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetWriteFlags(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetWriteFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetWriteFlags__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetWriteFlags(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetWriteFlags__SWIG_1(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetWriteFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetReadFlags(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetReadFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetReadFlags__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetReadFlags(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetReadFlags__SWIG_1(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetReadFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetNumNormalBits(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetNumNormalBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNumNormalBits(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumNormalBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetNumVertexBits(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetNumVertexBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNumVertexBits(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumVertexBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetNumParameterBits(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetNumParameterBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNumParameterBits(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumParameterBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetNumColorBits(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetNumColorBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNumColorBits(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumColorBits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetNumIndexBits(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetNumIndexBits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetNumIndexBits(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNumIndexBits(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetJpegQuality__SWIG_0(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetJpegQuality(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetJpegQuality__SWIG_1(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetJpegQuality();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetJpegQuality(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetJpegQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetVersion(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetReadVersion(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetReadVersion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetTargetVersion(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTargetVersion(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetTargetVersion(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetTargetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GetFileOffset(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (unsigned int)((BStreamFileToolkit const *)arg1)->GetFileOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetFileOffset(void * jarg1, unsigned int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetFileOffset(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_Unused(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->Unused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_Error__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->Error((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_Error__SWIG_1(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->Error();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BStreamFileToolkit_GetLogFile(void * jarg1) {
  char * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (char *)((BStreamFileToolkit const *)arg1)->GetLogFile();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLogFile__SWIG_0(void * jarg1, char * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLogFile((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLogFile__SWIG_1(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetLogFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GetLogging(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)((BStreamFileToolkit const *)arg1)->GetLogging();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLogging(void * jarg1, unsigned int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLogging(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GetLoggingOptions__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((BStreamFileToolkit const *)arg1)->GetLoggingOptions(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GetLoggingOptions__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (unsigned int)((BStreamFileToolkit const *)arg1)->GetLoggingOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLoggingOptions__SWIG_0(void * jarg1, unsigned int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetLoggingOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLoggingOptions__SWIG_1(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetLoggingOptions();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_OpenLogFile(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (TK_Status)(arg1)->OpenLogFile((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_LogEntry(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  ((BStreamFileToolkit const *)arg1)->LogEntry((wchar_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_CloseLogFile(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->CloseLogFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_NextOpcodeSequence(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (unsigned int)(arg1)->NextOpcodeSequence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetOpcodeSequence__SWIG_0(void * jarg1, unsigned int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetOpcodeSequence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetOpcodeSequence__SWIG_1(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetOpcodeSequence();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_HeaderCommentSeen(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)((BStreamFileToolkit const *)arg1)->HeaderCommentSeen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BStreamFileToolkit_GetProgressCallback(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Progress_Callback result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Progress_Callback)((BStreamFileToolkit const *)arg1)->GetProgressCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetProgressCallback__SWIG_0(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Progress_Callback arg2 = (TK_Progress_Callback) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (TK_Progress_Callback)jarg2; 
  (arg1)->SetProgressCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetProgressCallback__SWIG_1(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetProgressCallback();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BStreamFileToolkit_GetProgressValue(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  void *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (void *)((BStreamFileToolkit const *)arg1)->GetProgressValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetProgressValue(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetProgressValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetBufferLimit(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetBufferLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetBufferLimit(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBufferLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetLastKey(void * jarg1, ID_Key jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetLastKey(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_AppendLastKey(void * jarg1, ID_Key jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  result = (TK_Status)(arg1)->AppendLastKey(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ClearLastKey(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->ClearLastKey();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetLastKey(void * jarg1, long * jarg2) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (long *)jarg2;
  result = (TK_Status)((BStreamFileToolkit const *)arg1)->GetLastKey(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetDictionaryFormat__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetDictionaryFormat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetDictionaryFormat__SWIG_1(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDictionaryFormat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetDictionaryFormat__SWIG_2(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->SetDictionaryFormat();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetDictionaryFormat(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetDictionaryFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetDictionaryOptions(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetDictionaryOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetDictionaryOffset(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDictionaryOffset(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetDictionaryOffset(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetDictionaryOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetDictionarySize(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDictionarySize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetDictionarySize(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetDictionarySize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_RecordPause(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RecordPause(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ClearPauses(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->ClearPauses();
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetPauseCount(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetPauseCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_BStreamFileToolkit_GetPauseTable(void * jarg1) {
  int * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int *)((BStreamFileToolkit const *)arg1)->GetPauseTable();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetFirstPause(void * jarg1, int jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFirstPause(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetFirstPause(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetFirstPause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_GetPosition(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (int)((BStreamFileToolkit const *)arg1)->GetPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetWorldBounding(void * jarg1, float * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  float *arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetWorldBounding((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_SetWorldBoundingBySphere(void * jarg1, float * jarg2, float jarg3) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  float *arg2 ;
  float arg3 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetWorldBoundingBySphere((float const (*))arg2,arg3);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_BStreamFileToolkit_GetWorldBounding(void * jarg1) {
  float * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  float *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (float *)((BStreamFileToolkit const *)arg1)->GetWorldBounding();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_AddExternalReference(void * jarg1, void * jarg2, ID_Key jarg3) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  long arg3 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  result = (bool)(arg1)->AddExternalReference((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_NextExternalReference(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)(arg1)->NextExternalReference();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BStreamFileToolkit_GetExternalReference__SWIG_0(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (wchar_t *)((BStreamFileToolkit const *)arg1)->GetExternalReference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_GetExternalReference__SWIG_1(void * jarg1, void * jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  wchar_t **arg2 = 0 ;
  wchar_t *temp2 = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  temp2 = (wchar_t *)jarg2;
  arg2 = &temp2; 
  ((BStreamFileToolkit const *)arg1)->GetExternalReference((wchar_t const *&)*arg2);
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_BStreamFileToolkit_GetExternalReferenceContext(void * jarg1) {
  ID_Key jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (long)((BStreamFileToolkit const *)arg1)->GetExternalReferenceContext();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_MatchPreviousExRef(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)((BStreamFileToolkit const *)arg1)->MatchPreviousExRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_AddSegment(void * jarg1, ID_Key jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->AddSegment(arg2);
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_BStreamFileToolkit_RemoveSegment(void * jarg1) {
  ID_Key jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (long)(arg1)->RemoveSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_BStreamFileToolkit_CurrentSegment(void * jarg1) {
  ID_Key jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (long)(arg1)->CurrentSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ResetQuantizationError(void * jarg1) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  (arg1)->ResetQuantizationError();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ReportQuantizationError__SWIG_0(void * jarg1, float jarg2) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  float arg2 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ReportQuantizationError(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ReportQuantizationError__SWIG_1(void * jarg1, int jarg2, float * jarg3, int jarg4) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3;
  arg4 = (int)jarg4; 
  (arg1)->ReportQuantizationError(arg2,(float const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BStreamFileToolkit_ReportQuantizationError__SWIG_2(void * jarg1, int jarg2, float * jarg3) {
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3;
  (arg1)->ReportQuantizationError(arg2,(float const *)arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_BStreamFileToolkit_GetQuantizationError(void * jarg1) {
  float jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  float result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (float)((BStreamFileToolkit const *)arg1)->GetQuantizationError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_OpenGeometry(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->OpenGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_CloseGeometry(void * jarg1) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->CloseGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BStreamFileToolkit_GeometryIsOpen(void * jarg1) {
  unsigned int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (bool)((BStreamFileToolkit const *)arg1)->GeometryIsOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_BStreamFileToolkit_RevisitKey(void * jarg1) {
  ID_Key jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (long)((BStreamFileToolkit const *)arg1)->RevisitKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_BStreamFileToolkit_RevisitOwner(void * jarg1) {
  ID_Key jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  long result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (long)((BStreamFileToolkit const *)arg1)->RevisitOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_ParseBuffer__SWIG_0(void * jarg1, unsigned char * jarg2, int jarg3, int jarg4) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  TK_Status arg4 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned char *)jarg2;
  arg3 = (int)jarg3; 
  arg4 = (TK_Status)jarg4; 
  result = (TK_Status)BStreamFileToolkit_ParseBuffer__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BStreamFileToolkit_ParseBuffer__SWIG_1(void * jarg1, unsigned char * jarg2, int jarg3) {
  int jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (unsigned char *)jarg2;
  arg3 = (int)jarg3; 
  result = (TK_Status)BStreamFileToolkit_ParseBuffer__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PutTab(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  PutTab *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (PutTab *)new PutTab(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PutTab(void * jarg1) {
  PutTab *arg1 = (PutTab *) 0 ;
  
  arg1 = (PutTab *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Outdent__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  int arg2 ;
  Outdent *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Outdent *)new Outdent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Outdent__SWIG_1(void * jarg1) {
  void * jresult ;
  BStreamFileToolkit *arg1 = (BStreamFileToolkit *) 0 ;
  Outdent *result = 0 ;
  
  arg1 = (BStreamFileToolkit *)jarg1; 
  result = (Outdent *)new Outdent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Outdent(void * jarg1) {
  Outdent *arg1 = (Outdent *) 0 ;
  
  arg1 = (Outdent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STATUS_ERROR_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STATUS_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BByteStream__SWIG_0(int jarg1, unsigned char * jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  BByteStream *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned char *)jarg2;
  arg3 = (int)jarg3; 
  result = (BByteStream *)new BByteStream(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BByteStream__SWIG_1() {
  void * jresult ;
  BByteStream *result = 0 ;
  
  result = (BByteStream *)new BByteStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BByteStream_put(void * jarg1, unsigned short jarg2) {
  BByteStream *arg1 = (BByteStream *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (BByteStream *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->put(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BByteStream_get(void * jarg1, unsigned short * jarg2) {
  BByteStream *arg1 = (BByteStream *) 0 ;
  unsigned short *arg2 = 0 ;
  
  arg1 = (BByteStream *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  (arg1)->get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BByteStream(void * jarg1) {
  BByteStream *arg1 = (BByteStream *) 0 ;
  
  arg1 = (BByteStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BVarStream() {
  void * jresult ;
  BVarStream *result = 0 ;
  
  result = (BVarStream *)new BVarStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BVarStream(void * jarg1) {
  BVarStream *arg1 = (BVarStream *) 0 ;
  
  arg1 = (BVarStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVarStream_InitWrite(void * jarg1, int jarg2, void * jarg3) {
  BVarStream *arg1 = (BVarStream *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (BVarStream *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->InitWrite(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BVarStream_InitRead(void * jarg1, int jarg2, void * jarg3) {
  BVarStream *arg1 = (BVarStream *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (BVarStream *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->InitRead(arg2,(void const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BVarStream_Put(void * jarg1, int * jarg2, int jarg3) {
  int jresult ;
  BVarStream *arg1 = (BVarStream *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (BVarStream *)jarg1; 
  arg2 = (int *)jarg2;
  arg3 = (int)jarg3; 
  result = (int)(arg1)->Put(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BVarStream_Get(void * jarg1, int * jarg2) {
  int jresult ;
  BVarStream *arg1 = (BVarStream *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  arg1 = (BVarStream *)jarg1; 
  arg2 = (int *)jarg2;
  result = (int)(arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BPack() {
  void * jresult ;
  BPack *result = 0 ;
  
  result = (BPack *)new BPack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BPack(void * jarg1) {
  BPack *arg1 = (BPack *) 0 ;
  
  arg1 = (BPack *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BPack_InitWrite(void * jarg1, int jarg2, void * jarg3) {
  BPack *arg1 = (BPack *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (BPack *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->InitWrite(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BPack_InitRead(void * jarg1, int jarg2, void * jarg3) {
  BPack *arg1 = (BPack *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (BPack *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->InitRead(arg2,(void const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BPack_Put(void * jarg1, int jarg2, int jarg3) {
  BPack *arg1 = (BPack *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (BPack *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Put(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BPack_Get(void * jarg1, int jarg2) {
  int jresult ;
  BPack *arg1 = (BPack *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (BPack *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BPack_NumBytes(void * jarg1) {
  int jresult ;
  BPack *arg1 = (BPack *) 0 ;
  int result;
  
  arg1 = (BPack *)jarg1; 
  result = (int)((BPack const *)arg1)->NumBytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BPack_SetCanReallocate(void * jarg1, int jarg2) {
  BPack *arg1 = (BPack *) 0 ;
  int arg2 ;
  
  arg1 = (BPack *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCanReallocate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BPack_GetStatus(void * jarg1) {
  int jresult ;
  BPack *arg1 = (BPack *) 0 ;
  int result;
  
  arg1 = (BPack *)jarg1; 
  result = (int)((BPack const *)arg1)->GetStatus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BPack_SwapBytes(void * jarg1) {
  BPack *arg1 = (BPack *) 0 ;
  
  arg1 = (BPack *)jarg1; 
  (arg1)->SwapBytes();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_TRIVIAL_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_TRIVIAL_IMPLICIT_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_REPULSE_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_NONE_get() {
  int jresult ;
  int result;
  
  result = (int) 4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_EDGEBREAKER_get() {
  int jresult ;
  int result;
  
  result = (int) 5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_LINE_EXTEND_get() {
  int jresult ;
  int result;
  
  result = (int) 6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CS_TRIVIAL_POLAR_get() {
  int jresult ;
  int result;
  
  result = (int) 7;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXU10_get() {
  int jresult ;
  int result;
  
  result = (int) 128;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXV10_get() {
  int jresult ;
  int result;
  
  result = (int) 64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXU8_get() {
  int jresult ;
  int result;
  
  result = (int) 64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXV8_get() {
  int jresult ;
  int result;
  
  result = (int) 32;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EB_DEFAULT_get() {
  int jresult ;
  int result;
  
  result = (int) (-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_x1_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_x1_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->x1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_y1_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_y1_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->y1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_z1_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_z1_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->z1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_x2_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_x2_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->x2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_y2_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_y2_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->y2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ET_Bounding_z2_set(void * jarg1, float jarg2) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float arg2 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ET_Bounding_z2_get(void * jarg1) {
  float jresult ;
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  float result;
  
  arg1 = (ET_Bounding *)jarg1; 
  result = (float) ((arg1)->z2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ET_Bounding() {
  void * jresult ;
  ET_Bounding *result = 0 ;
  
  result = (ET_Bounding *)new ET_Bounding();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ET_Bounding(void * jarg1) {
  ET_Bounding *arg1 = (ET_Bounding *) 0 ;
  
  arg1 = (ET_Bounding *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_ONE_PIECE_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0001;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_WATERTIGHT_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0002;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_MANIFOLD_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0004;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_NO_HANDLES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0008;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_NO_BACKWARDS_OR_HOLES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0010;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HINT_INPUT_BY_TRISTRIPS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0020;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STATUS_COMPLETE_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STATUS_WATERTIGHT_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_STATUS_TRY_AGAIN_get() {
  int jresult ;
  int result;
  
  result = (int) 4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_x_quantization_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_x_quantization_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->x_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_y_quantization_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_y_quantization_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->y_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_z_quantization_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_z_quantization_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->z_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_x_quantization_normals_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_x_quantization_normals_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->x_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_y_quantization_normals_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_y_quantization_normals_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->y_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_z_quantization_normals_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_z_quantization_normals_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->z_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_point_factor_set(void * jarg1, float jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  float arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->point_factor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eb_compress_configs_point_factor_get(void * jarg1) {
  float jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  float result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (float) ((arg1)->point_factor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_bounding_set(void * jarg1, void * jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  ET_Bounding *arg2 = (ET_Bounding *) 0 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (ET_Bounding *)jarg2; 
  if (arg1) (arg1)->bounding = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eb_compress_configs_bounding_get(void * jarg1) {
  void * jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  ET_Bounding *result = 0 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (ET_Bounding *) ((arg1)->bounding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_target_version_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->target_version = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_target_version_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->target_version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_compress_configs_hints_set(void * jarg1, int jarg2) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int arg2 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eb_compress_configs_hints_get(void * jarg1) {
  int jresult ;
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  int result;
  
  arg1 = (eb_compress_configs *)jarg1; 
  result = (int) ((arg1)->hints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eb_compress_configs() {
  void * jresult ;
  eb_compress_configs *result = 0 ;
  
  result = (eb_compress_configs *)new eb_compress_configs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eb_compress_configs(void * jarg1) {
  eb_compress_configs *arg1 = (eb_compress_configs *) 0 ;
  
  arg1 = (eb_compress_configs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eb_decompress_configs_bounding_set(void * jarg1, void * jarg2) {
  eb_decompress_configs *arg1 = (eb_decompress_configs *) 0 ;
  ET_Bounding *arg2 = (ET_Bounding *) 0 ;
  
  arg1 = (eb_decompress_configs *)jarg1; 
  arg2 = (ET_Bounding *)jarg2; 
  if (arg1) (arg1)->bounding = (ET_Bounding const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eb_decompress_configs_bounding_get(void * jarg1) {
  void * jresult ;
  eb_decompress_configs *arg1 = (eb_decompress_configs *) 0 ;
  ET_Bounding *result = 0 ;
  
  arg1 = (eb_decompress_configs *)jarg1; 
  result = (ET_Bounding *) ((arg1)->bounding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eb_decompress_configs() {
  void * jresult ;
  eb_decompress_configs *result = 0 ;
  
  result = (eb_decompress_configs *)new eb_decompress_configs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eb_decompress_configs(void * jarg1) {
  eb_decompress_configs *arg1 = (eb_decompress_configs *) 0 ;
  
  arg1 = (eb_decompress_configs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header0_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (char) ((arg1)->scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_mtable_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->mtable_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header0_mtable_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (char) ((arg1)->mtable_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_points_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->points_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header0_points_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (char) ((arg1)->points_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_normals_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->normals_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header0_normals_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (char) ((arg1)->normals_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_opslen_set(void * jarg1, int jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->opslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header0_opslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (int) ((arg1)->opslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_mtablelen_set(void * jarg1, int jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mtablelen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header0_mtablelen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (int) ((arg1)->mtablelen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_pointslen_set(void * jarg1, int jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pointslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header0_pointslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (int) ((arg1)->pointslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header0_pcount_set(void * jarg1, int jarg2) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pcount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header0_pcount_get(void * jarg1) {
  int jresult ;
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  result = (int) ((arg1)->pcount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_edgebreaker_header0() {
  void * jresult ;
  edgebreaker_header0 *result = 0 ;
  
  result = (edgebreaker_header0 *)new edgebreaker_header0();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_edgebreaker_header0(void * jarg1) {
  edgebreaker_header0 *arg1 = (edgebreaker_header0 *) 0 ;
  
  arg1 = (edgebreaker_header0 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header1_v0_set(void * jarg1, void * jarg2) {
  edgebreaker_header1 *arg1 = (edgebreaker_header1 *) 0 ;
  edgebreaker_header0 *arg2 = (edgebreaker_header0 *) 0 ;
  
  arg1 = (edgebreaker_header1 *)jarg1; 
  arg2 = (edgebreaker_header0 *)jarg2; 
  if (arg1) (arg1)->v0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_edgebreaker_header1_v0_get(void * jarg1) {
  void * jresult ;
  edgebreaker_header1 *arg1 = (edgebreaker_header1 *) 0 ;
  edgebreaker_header0 *result = 0 ;
  
  arg1 = (edgebreaker_header1 *)jarg1; 
  result = (edgebreaker_header0 *)& ((arg1)->v0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header1_normalslen_set(void * jarg1, int jarg2) {
  edgebreaker_header1 *arg1 = (edgebreaker_header1 *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header1 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->normalslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header1_normalslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header1 *arg1 = (edgebreaker_header1 *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header1 *)jarg1; 
  result = (int) ((arg1)->normalslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_edgebreaker_header1() {
  void * jresult ;
  edgebreaker_header1 *result = 0 ;
  
  result = (edgebreaker_header1 *)new edgebreaker_header1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_edgebreaker_header1(void * jarg1) {
  edgebreaker_header1 *arg1 = (edgebreaker_header1 *) 0 ;
  
  arg1 = (edgebreaker_header1 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (char) ((arg1)->scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_mtable_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->mtable_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header_mtable_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (char) ((arg1)->mtable_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_points_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->points_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header_points_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (char) ((arg1)->points_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_normals_scheme_set(void * jarg1, char jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->normals_scheme = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_edgebreaker_header_normals_scheme_get(void * jarg1) {
  char jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  char result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (char) ((arg1)->normals_scheme);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_opslen_set(void * jarg1, int jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->opslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header_opslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (int) ((arg1)->opslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_mtablelen_set(void * jarg1, int jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mtablelen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header_mtablelen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (int) ((arg1)->mtablelen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_pointslen_set(void * jarg1, int jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pointslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header_pointslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (int) ((arg1)->pointslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_pcount_set(void * jarg1, int jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pcount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header_pcount_get(void * jarg1) {
  int jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (int) ((arg1)->pcount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_edgebreaker_header_normalslen_set(void * jarg1, int jarg2) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int arg2 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->normalslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_edgebreaker_header_normalslen_get(void * jarg1) {
  int jresult ;
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  int result;
  
  arg1 = (edgebreaker_header *)jarg1; 
  result = (int) ((arg1)->normalslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_edgebreaker_header() {
  void * jresult ;
  edgebreaker_header *result = 0 ;
  
  result = (edgebreaker_header *)new edgebreaker_header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_edgebreaker_header(void * jarg1) {
  edgebreaker_header *arg1 = (edgebreaker_header *) 0 ;
  
  arg1 = (edgebreaker_header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_LENGTHS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_M2STACKOFFSETS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_M2GATEOFFSETS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_DUMMIES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_PATCHES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x10;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_BOUNDING_get() {
  int jresult ;
  int result;
  
  result = (int) 0x20;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_QUANTIZATION_get() {
  int jresult ;
  int result;
  
  result = (int) 0x40;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MTABLE_HAS_QUANTIZATION_NORMALS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x80;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_flags_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_flags_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_mlengths_set(void * jarg1, int * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->mlengths = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_mtable_info_mlengths_get(void * jarg1) {
  int * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int *) ((arg1)->mlengths);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_mlengths_used_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mlengths_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_mlengths_used_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->mlengths_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_mlengths_allocated_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mlengths_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_mlengths_allocated_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->mlengths_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_set(void * jarg1, int * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->m2stackoffsets = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_get(void * jarg1) {
  int * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int *) ((arg1)->m2stackoffsets);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_used_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m2stackoffsets_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_used_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->m2stackoffsets_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_allocated_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m2stackoffsets_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_m2stackoffsets_allocated_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->m2stackoffsets_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_set(void * jarg1, int * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->m2gateoffsets = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_get(void * jarg1) {
  int * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int *) ((arg1)->m2gateoffsets);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_used_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m2gateoffsets_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_used_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->m2gateoffsets_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_allocated_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m2gateoffsets_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_m2gateoffsets_allocated_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->m2gateoffsets_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_dummies_set(void * jarg1, int * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->dummies = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_mtable_info_dummies_get(void * jarg1) {
  int * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int *) ((arg1)->dummies);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_dummies_used_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dummies_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_dummies_used_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->dummies_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_dummies_allocated_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dummies_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_dummies_allocated_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->dummies_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_patches_set(void * jarg1, int * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->patches = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_mtable_info_patches_get(void * jarg1) {
  int * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int *) ((arg1)->patches);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_patches_used_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->patches_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_patches_used_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->patches_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_patches_allocated_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->patches_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_patches_allocated_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->patches_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_bounding_set(void * jarg1, void * jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  ET_Bounding *arg2 = (ET_Bounding *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (ET_Bounding *)jarg2; 
  if (arg1) (arg1)->bounding = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_mtable_info_bounding_get(void * jarg1) {
  void * jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  ET_Bounding *result = 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  result = (ET_Bounding *) ((arg1)->bounding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_x_quantization_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_x_quantization_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->x_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_y_quantization_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_y_quantization_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->y_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_z_quantization_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z_quantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_z_quantization_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->z_quantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_x_quantization_normals_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_x_quantization_normals_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->x_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_y_quantization_normals_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_y_quantization_normals_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->y_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mtable_info_z_quantization_normals_set(void * jarg1, int jarg2) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  int arg2 ;
  
  arg1 = (mtable_info *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->z_quantization_normals = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mtable_info_z_quantization_normals_get(void * jarg1) {
  int jresult ;
  mtable_info *arg1 = (mtable_info *) 0 ;
  int result;
  
  arg1 = (mtable_info *)jarg1; 
  result = (int) ((arg1)->z_quantization_normals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mtable_info() {
  void * jresult ;
  mtable_info *result = 0 ;
  
  result = (mtable_info *)new mtable_info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mtable_info(void * jarg1) {
  mtable_info *arg1 = (mtable_info *) 0 ;
  
  arg1 = (mtable_info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_start_set(void * jarg1, int jarg2) {
  half_edge *arg1 = (half_edge *) 0 ;
  int arg2 ;
  
  arg1 = (half_edge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_half_edge_start_get(void * jarg1) {
  int jresult ;
  half_edge *arg1 = (half_edge *) 0 ;
  int result;
  
  arg1 = (half_edge *)jarg1; 
  result = (int) ((arg1)->start);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_twin_set(void * jarg1, int jarg2) {
  half_edge *arg1 = (half_edge *) 0 ;
  int arg2 ;
  
  arg1 = (half_edge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->twin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_half_edge_twin_get(void * jarg1) {
  int jresult ;
  half_edge *arg1 = (half_edge *) 0 ;
  int result;
  
  arg1 = (half_edge *)jarg1; 
  result = (int) ((arg1)->twin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_half_edge() {
  void * jresult ;
  half_edge *result = 0 ;
  
  result = (half_edge *)new half_edge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_half_edge(void * jarg1) {
  half_edge *arg1 = (half_edge *) 0 ;
  
  arg1 = (half_edge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_array_edges_set(void * jarg1, void * jarg2) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  half_edge *arg2 = (half_edge *) 0 ;
  
  arg1 = (half_edge_array *)jarg1; 
  arg2 = (half_edge *)jarg2; 
  if (arg1) (arg1)->edges = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_half_edge_array_edges_get(void * jarg1) {
  void * jresult ;
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  half_edge *result = 0 ;
  
  arg1 = (half_edge_array *)jarg1; 
  result = (half_edge *) ((arg1)->edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_array_allocated_set(void * jarg1, int jarg2) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int arg2 ;
  
  arg1 = (half_edge_array *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_half_edge_array_allocated_get(void * jarg1) {
  int jresult ;
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int result;
  
  arg1 = (half_edge_array *)jarg1; 
  result = (int) ((arg1)->allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_array_used_set(void * jarg1, int jarg2) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int arg2 ;
  
  arg1 = (half_edge_array *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_half_edge_array_used_get(void * jarg1) {
  int jresult ;
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int result;
  
  arg1 = (half_edge_array *)jarg1; 
  result = (int) ((arg1)->used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_array_visitations_set(void * jarg1, int * jarg2) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (half_edge_array *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->visitations = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_half_edge_array_visitations_get(void * jarg1) {
  int * jresult ;
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int *result = 0 ;
  
  arg1 = (half_edge_array *)jarg1; 
  result = (int *) ((arg1)->visitations);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_half_edge_array_visitations_used_set(void * jarg1, int jarg2) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int arg2 ;
  
  arg1 = (half_edge_array *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->visitations_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_half_edge_array_visitations_used_get(void * jarg1) {
  int jresult ;
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  int result;
  
  arg1 = (half_edge_array *)jarg1; 
  result = (int) ((arg1)->visitations_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_half_edge_array() {
  void * jresult ;
  half_edge_array *result = 0 ;
  
  result = (half_edge_array *)new half_edge_array();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_half_edge_array(void * jarg1) {
  half_edge_array *arg1 = (half_edge_array *) 0 ;
  
  arg1 = (half_edge_array *)jarg1; 
  delete arg1;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_int_stack_data_get(void * jarg1) {
  int * jresult ;
  int_stack *arg1 = (int_stack *) 0 ;
  int *result = 0 ;
  
  arg1 = (int_stack *)jarg1; 
  result = (int *) ((arg1)->data);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int_stack_allocated_set(void * jarg1, int jarg2) {
  int_stack *arg1 = (int_stack *) 0 ;
  int arg2 ;
  
  arg1 = (int_stack *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int_stack_allocated_get(void * jarg1) {
  int jresult ;
  int_stack *arg1 = (int_stack *) 0 ;
  int result;
  
  arg1 = (int_stack *)jarg1; 
  result = (int) ((arg1)->allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_int_stack_used_set(void * jarg1, int jarg2) {
  int_stack *arg1 = (int_stack *) 0 ;
  int arg2 ;
  
  arg1 = (int_stack *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_int_stack_used_get(void * jarg1) {
  int jresult ;
  int_stack *arg1 = (int_stack *) 0 ;
  int result;
  
  arg1 = (int_stack *)jarg1; 
  result = (int) ((arg1)->used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_int_stack() {
  void * jresult ;
  int_stack *result = 0 ;
  
  result = (int_stack *)new int_stack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_int_stack(void * jarg1) {
  int_stack *arg1 = (int_stack *) 0 ;
  
  arg1 = (int_stack *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int * SWIGSTDCALL CSharp_varstream_data_get(void * jarg1) {
  unsigned int * jresult ;
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (varstream *)jarg1; 
  result = (unsigned int *) ((arg1)->data);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int * SWIGSTDCALL CSharp_varstream_rdata_get(void * jarg1) {
  unsigned int * jresult ;
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (varstream *)jarg1; 
  result = (unsigned int *) ((arg1)->rdata);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_allocated_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_allocated_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_used_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_used_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_bit_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_bit_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->bit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_rused_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rused = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_rused_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->rused);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_rbit_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rbit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_rbit_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->rbit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_can_reallocate_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->can_reallocate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_can_reallocate_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->can_reallocate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_status_set(void * jarg1, int jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  int arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_varstream_status_get(void * jarg1) {
  int jresult ;
  varstream *arg1 = (varstream *) 0 ;
  int result;
  
  arg1 = (varstream *)jarg1; 
  result = (int) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_mask_set(void * jarg1, void * jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->mask;
    for (ii = 0; ii < (size_t)33; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_varstream_mask_get(void * jarg1) {
  void * jresult ;
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (varstream *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_varstream_range_set(void * jarg1, void * jarg2) {
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *arg2 ;
  
  arg1 = (varstream *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->range;
    for (ii = 0; ii < (size_t)33; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_varstream_range_get(void * jarg1) {
  void * jresult ;
  varstream *arg1 = (varstream *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (varstream *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_varstream() {
  void * jresult ;
  varstream *result = 0 ;
  
  result = (varstream *)new varstream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_varstream(void * jarg1) {
  varstream *arg1 = (varstream *) 0 ;
  
  arg1 = (varstream *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_loops_set(void * jarg1, int * jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->loops = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_loop_table_loops_get(void * jarg1) {
  int * jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int *result = 0 ;
  
  arg1 = (loop_table *)jarg1; 
  result = (int *) ((arg1)->loops);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_loops_allocated_set(void * jarg1, int jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int arg2 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->loops_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_loop_table_loops_allocated_get(void * jarg1) {
  int jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int result;
  
  arg1 = (loop_table *)jarg1; 
  result = (int) ((arg1)->loops_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_loops_edges_set(void * jarg1, int * jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->loops_edges = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_loop_table_loops_edges_get(void * jarg1) {
  int * jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int *result = 0 ;
  
  arg1 = (loop_table *)jarg1; 
  result = (int *) ((arg1)->loops_edges);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_loops_used_set(void * jarg1, int jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int arg2 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->loops_used = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_loop_table_loops_used_get(void * jarg1) {
  int jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int result;
  
  arg1 = (loop_table *)jarg1; 
  result = (int) ((arg1)->loops_used);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_loops_edges_allocated_set(void * jarg1, int jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int arg2 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->loops_edges_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_loop_table_loops_edges_allocated_get(void * jarg1) {
  int jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int result;
  
  arg1 = (loop_table *)jarg1; 
  result = (int) ((arg1)->loops_edges_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_np_allocated_set(void * jarg1, int jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int arg2 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->np_allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_loop_table_np_allocated_get(void * jarg1) {
  int jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int result;
  
  arg1 = (loop_table *)jarg1; 
  result = (int) ((arg1)->np_allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_P_set(void * jarg1, int * jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->P = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_loop_table_P_get(void * jarg1) {
  int * jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int *result = 0 ;
  
  arg1 = (loop_table *)jarg1; 
  result = (int *) ((arg1)->P);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_loop_table_N_set(void * jarg1, int * jarg2) {
  loop_table *arg1 = (loop_table *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (loop_table *)jarg1; 
  arg2 = (int *)jarg2;
  if (arg1) (arg1)->N = arg2;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_loop_table_N_get(void * jarg1) {
  int * jresult ;
  loop_table *arg1 = (loop_table *) 0 ;
  int *result = 0 ;
  
  arg1 = (loop_table *)jarg1; 
  result = (int *) ((arg1)->N);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_loop_table() {
  void * jresult ;
  loop_table *result = 0 ;
  
  result = (loop_table *)new loop_table();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_loop_table(void * jarg1) {
  loop_table *arg1 = (loop_table *) 0 ;
  
  arg1 = (loop_table *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_C_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_L_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_E_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_R_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_S_get() {
  int jresult ;
  int result;
  
  result = (int) 4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_M_get() {
  int jresult ;
  int result;
  
  result = (int) 5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASE_M2_get() {
  int jresult ;
  int result;
  
  result = (int) 6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BIG_FLOAT_get() {
  double jresult ;
  double result;
  
  result = (double) (1e20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_QUANTIZATION_get() {
  int jresult ;
  int result;
  
  result = (int) (11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DEFAULT_POINT_FACTOR_get() {
  double jresult ;
  double result;
  
  result = (double) (1.5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEFAULT_HINTS_get() {
  int jresult ;
  int result;
  
  result = (int) (0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_POINTSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 12;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dprintf(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  dprintf((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_wcsstrcpy(void * jarg1, char * jarg2) {
  wchar_t *arg1 = (wchar_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (char *)jarg2; 
  wcsstrcpy(arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_wcschr2__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t arg2 ;
  wchar_t arg3 ;
  wchar_t const *argp2 ;
  wchar_t const *argp3 ;
  wchar_t *result = 0 ;
  
  arg1 = (wchar_t *)jarg1; 
  argp2 = (wchar_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t const", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (wchar_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (wchar_t *)wcschr2((wchar_t const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_wcsrchr2__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t arg2 ;
  wchar_t arg3 ;
  wchar_t const *argp2 ;
  wchar_t const *argp3 ;
  wchar_t *result = 0 ;
  
  arg1 = (wchar_t *)jarg1; 
  argp2 = (wchar_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t const", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (wchar_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null wchar_t const", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (wchar_t *)wcsrchr2((wchar_t const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BBaseOpcodeHandler(int jarg1) {
  void * jresult ;
  int arg1 ;
  BBaseOpcodeHandler *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BBaseOpcodeHandler *)new SwigDirector_BBaseOpcodeHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BBaseOpcodeHandler(void * jarg1) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Read(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Write(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_ExecuteSwigExplicitBBaseOpcodeHandler(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->BBaseOpcodeHandler::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_InterpretSwigExplicitBBaseOpcodeHandler__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->BBaseOpcodeHandler::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_InterpretSwigExplicitBBaseOpcodeHandler__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->BBaseOpcodeHandler::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Interpret_specialSwigExplicitBBaseOpcodeHandler(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->BBaseOpcodeHandler::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_Reset(void * jarg1) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_ResetSwigExplicitBBaseOpcodeHandler(void * jarg1) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  (arg1)->BBaseOpcodeHandler::Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Match_Instance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Match_InstanceSwigExplicitBBaseOpcodeHandler(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->BBaseOpcodeHandler::Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BBaseOpcodeHandler_Opcode(void * jarg1) {
  unsigned char jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  unsigned char result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  result = (unsigned char)((BBaseOpcodeHandler const *)arg1)->Opcode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_BBaseOpcodeHandler_General_Flags(void * jarg1) {
  unsigned char jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  unsigned char result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  result = (unsigned char)((BBaseOpcodeHandler const *)arg1)->General_Flags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_Set_General_Flags(void * jarg1, int jarg2) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  int arg2 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Set_General_Flags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Pass(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  int result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (int)((BBaseOpcodeHandler const *)arg1)->Pass(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Tag__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (TK_Status)((BBaseOpcodeHandler const *)arg1)->Tag(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Tag__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)((BBaseOpcodeHandler const *)arg1)->Tag(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Tagging(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (bool)((BBaseOpcodeHandler const *)arg1)->Tagging(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_SetNeedsTag(void * jarg1, unsigned int jarg2) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  bool arg2 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNeedsTag(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_NeedsTag(void * jarg1) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  result = (bool)((BBaseOpcodeHandler const *)arg1)->NeedsTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((BBaseOpcodeHandler const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BBaseOpcodeHandler_CloneSwigExplicitBBaseOpcodeHandler(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((BBaseOpcodeHandler const *)arg1)->BBaseOpcodeHandler::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_NeedsContext(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (bool)((BBaseOpcodeHandler const *)arg1)->NeedsContext(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BBaseOpcodeHandler_NeedsContextSwigExplicitBBaseOpcodeHandler(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool result;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (bool)((BBaseOpcodeHandler const *)arg1)->BBaseOpcodeHandler::NeedsContext(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_SetLoggingString__SWIG_0(void * jarg1, char * jarg2) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLoggingString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_SetLoggingString__SWIG_1(void * jarg1, int jarg2) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  int arg2 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLoggingString(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_BBaseOpcodeHandler_GetLoggingString__SWIG_0(void * jarg1) {
  char * jresult ;
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  result = (char *)((BBaseOpcodeHandler const *)arg1)->GetLoggingString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_LogDebug__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->LogDebug(*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_LogDebug__SWIG_1(void * jarg1, void * jarg2) {
  BBaseOpcodeHandler *arg1 = (BBaseOpcodeHandler *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  
  arg1 = (BBaseOpcodeHandler *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return ;
  } 
  (arg1)->LogDebug(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BBaseOpcodeHandler_director_connect(void *objarg, SwigDirector_BBaseOpcodeHandler::SWIG_Callback0_t callback0, SwigDirector_BBaseOpcodeHandler::SWIG_Callback1_t callback1, SwigDirector_BBaseOpcodeHandler::SWIG_Callback2_t callback2, SwigDirector_BBaseOpcodeHandler::SWIG_Callback3_t callback3, SwigDirector_BBaseOpcodeHandler::SWIG_Callback4_t callback4, SwigDirector_BBaseOpcodeHandler::SWIG_Callback5_t callback5, SwigDirector_BBaseOpcodeHandler::SWIG_Callback6_t callback6, SwigDirector_BBaseOpcodeHandler::SWIG_Callback7_t callback7, SwigDirector_BBaseOpcodeHandler::SWIG_Callback8_t callback8, SwigDirector_BBaseOpcodeHandler::SWIG_Callback9_t callback9) {
  BBaseOpcodeHandler *obj = (BBaseOpcodeHandler *)objarg;
  SwigDirector_BBaseOpcodeHandler *director = dynamic_cast<SwigDirector_BBaseOpcodeHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Default() {
  void * jresult ;
  TK_Default *result = 0 ;
  
  result = (TK_Default *)new SwigDirector_TK_Default();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_ReadSwigExplicitTK_Default(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Default::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_WriteSwigExplicitTK_Default(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Default::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Default_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Default *arg1 = (TK_Default *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Default *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Default(void * jarg1) {
  TK_Default *arg1 = (TK_Default *) 0 ;
  
  arg1 = (TK_Default *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Default_director_connect(void *objarg, SwigDirector_TK_Default::SWIG_Callback0_t callback0, SwigDirector_TK_Default::SWIG_Callback1_t callback1, SwigDirector_TK_Default::SWIG_Callback2_t callback2, SwigDirector_TK_Default::SWIG_Callback3_t callback3, SwigDirector_TK_Default::SWIG_Callback4_t callback4, SwigDirector_TK_Default::SWIG_Callback5_t callback5, SwigDirector_TK_Default::SWIG_Callback6_t callback6, SwigDirector_TK_Default::SWIG_Callback7_t callback7, SwigDirector_TK_Default::SWIG_Callback8_t callback8, SwigDirector_TK_Default::SWIG_Callback9_t callback9) {
  TK_Default *obj = (TK_Default *)objarg;
  SwigDirector_TK_Default *director = dynamic_cast<SwigDirector_TK_Default *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Unavailable(char jarg1) {
  void * jresult ;
  char arg1 ;
  TK_Unavailable *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (TK_Unavailable *)new SwigDirector_TK_Unavailable(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unavailable_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unavailable *arg1 = (TK_Unavailable *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unavailable *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unavailable_ReadSwigExplicitTK_Unavailable(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unavailable *arg1 = (TK_Unavailable *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unavailable *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Unavailable::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unavailable_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unavailable *arg1 = (TK_Unavailable *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unavailable *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unavailable_WriteSwigExplicitTK_Unavailable(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unavailable *arg1 = (TK_Unavailable *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unavailable *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Unavailable::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Unavailable(void * jarg1) {
  TK_Unavailable *arg1 = (TK_Unavailable *) 0 ;
  
  arg1 = (TK_Unavailable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unavailable_director_connect(void *objarg, SwigDirector_TK_Unavailable::SWIG_Callback0_t callback0, SwigDirector_TK_Unavailable::SWIG_Callback1_t callback1, SwigDirector_TK_Unavailable::SWIG_Callback2_t callback2, SwigDirector_TK_Unavailable::SWIG_Callback3_t callback3, SwigDirector_TK_Unavailable::SWIG_Callback4_t callback4, SwigDirector_TK_Unavailable::SWIG_Callback5_t callback5, SwigDirector_TK_Unavailable::SWIG_Callback6_t callback6, SwigDirector_TK_Unavailable::SWIG_Callback7_t callback7, SwigDirector_TK_Unavailable::SWIG_Callback8_t callback8, SwigDirector_TK_Unavailable::SWIG_Callback9_t callback9) {
  TK_Unavailable *obj = (TK_Unavailable *)objarg;
  SwigDirector_TK_Unavailable *director = dynamic_cast<SwigDirector_TK_Unavailable *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Header() {
  void * jresult ;
  TK_Header *result = 0 ;
  
  result = (TK_Header *)new SwigDirector_TK_Header();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Header(void * jarg1) {
  TK_Header *arg1 = (TK_Header *) 0 ;
  
  arg1 = (TK_Header *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_ReadSwigExplicitTK_Header(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Header::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_WriteSwigExplicitTK_Header(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Header::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Header_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Header *arg1 = (TK_Header *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Header *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Header_Reset(void * jarg1) {
  TK_Header *arg1 = (TK_Header *) 0 ;
  
  arg1 = (TK_Header *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Header_ResetSwigExplicitTK_Header(void * jarg1) {
  TK_Header *arg1 = (TK_Header *) 0 ;
  
  arg1 = (TK_Header *)jarg1; 
  (arg1)->TK_Header::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Header_director_connect(void *objarg, SwigDirector_TK_Header::SWIG_Callback0_t callback0, SwigDirector_TK_Header::SWIG_Callback1_t callback1, SwigDirector_TK_Header::SWIG_Callback2_t callback2, SwigDirector_TK_Header::SWIG_Callback3_t callback3, SwigDirector_TK_Header::SWIG_Callback4_t callback4, SwigDirector_TK_Header::SWIG_Callback5_t callback5, SwigDirector_TK_Header::SWIG_Callback6_t callback6, SwigDirector_TK_Header::SWIG_Callback7_t callback7, SwigDirector_TK_Header::SWIG_Callback8_t callback8, SwigDirector_TK_Header::SWIG_Callback9_t callback9) {
  TK_Header *obj = (TK_Header *)objarg;
  SwigDirector_TK_Header *director = dynamic_cast<SwigDirector_TK_Header *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_File_Info() {
  void * jresult ;
  TK_File_Info *result = 0 ;
  
  result = (TK_File_Info *)new SwigDirector_TK_File_Info();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_ReadSwigExplicitTK_File_Info(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_File_Info::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_WriteSwigExplicitTK_File_Info(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_File_Info::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_ExecuteSwigExplicitTK_File_Info(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_File_Info::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_InterpretSwigExplicitTK_File_Info(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_File_Info::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_Interpret_specialSwigExplicitTK_File_Info(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_File_Info::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_File_Info_SetFlags(void * jarg1, int jarg2) {
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  int arg2 ;
  
  arg1 = (TK_File_Info *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_File_Info_GetFlags(void * jarg1) {
  int jresult ;
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  int result;
  
  arg1 = (TK_File_Info *)jarg1; 
  result = (int)(arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_File_Info(void * jarg1) {
  TK_File_Info *arg1 = (TK_File_Info *) 0 ;
  
  arg1 = (TK_File_Info *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_File_Info_director_connect(void *objarg, SwigDirector_TK_File_Info::SWIG_Callback0_t callback0, SwigDirector_TK_File_Info::SWIG_Callback1_t callback1, SwigDirector_TK_File_Info::SWIG_Callback2_t callback2, SwigDirector_TK_File_Info::SWIG_Callback3_t callback3, SwigDirector_TK_File_Info::SWIG_Callback4_t callback4, SwigDirector_TK_File_Info::SWIG_Callback5_t callback5, SwigDirector_TK_File_Info::SWIG_Callback6_t callback6, SwigDirector_TK_File_Info::SWIG_Callback7_t callback7, SwigDirector_TK_File_Info::SWIG_Callback8_t callback8, SwigDirector_TK_File_Info::SWIG_Callback9_t callback9) {
  TK_File_Info *obj = (TK_File_Info *)objarg;
  SwigDirector_TK_File_Info *director = dynamic_cast<SwigDirector_TK_File_Info *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Comment__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  TK_Comment *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (TK_Comment *)new SwigDirector_TK_Comment((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Comment__SWIG_1() {
  void * jresult ;
  TK_Comment *result = 0 ;
  
  result = (TK_Comment *)new SwigDirector_TK_Comment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Comment(void * jarg1) {
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  
  arg1 = (TK_Comment *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_ReadSwigExplicitTK_Comment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Comment::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_WriteSwigExplicitTK_Comment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Comment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_ExecuteSwigExplicitTK_Comment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Comment::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_ExecuteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ExecuteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_InterpretSwigExplicitTK_Comment(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Comment::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Comment_Interpret_specialSwigExplicitTK_Comment(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Comment::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Comment_Reset(void * jarg1) {
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  
  arg1 = (TK_Comment *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Comment_ResetSwigExplicitTK_Comment(void * jarg1) {
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  
  arg1 = (TK_Comment *)jarg1; 
  (arg1)->TK_Comment::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Comment_SetComment__SWIG_0(void * jarg1, char * jarg2) {
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetComment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Comment_SetComment__SWIG_1(void * jarg1, int jarg2) {
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Comment *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetComment(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Comment_GetComment__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Comment *arg1 = (TK_Comment *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Comment *)jarg1; 
  result = (char *)((TK_Comment const *)arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Comment_director_connect(void *objarg, SwigDirector_TK_Comment::SWIG_Callback0_t callback0, SwigDirector_TK_Comment::SWIG_Callback1_t callback1, SwigDirector_TK_Comment::SWIG_Callback2_t callback2, SwigDirector_TK_Comment::SWIG_Callback3_t callback3, SwigDirector_TK_Comment::SWIG_Callback4_t callback4, SwigDirector_TK_Comment::SWIG_Callback5_t callback5, SwigDirector_TK_Comment::SWIG_Callback6_t callback6, SwigDirector_TK_Comment::SWIG_Callback7_t callback7, SwigDirector_TK_Comment::SWIG_Callback8_t callback8, SwigDirector_TK_Comment::SWIG_Callback9_t callback9) {
  TK_Comment *obj = (TK_Comment *)objarg;
  SwigDirector_TK_Comment *director = dynamic_cast<SwigDirector_TK_Comment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Terminator__SWIG_0(char jarg1, unsigned int jarg2) {
  void * jresult ;
  char arg1 ;
  bool arg2 ;
  TK_Terminator *result = 0 ;
  
  arg1 = (char)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (TK_Terminator *)new SwigDirector_TK_Terminator(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Terminator__SWIG_1(char jarg1) {
  void * jresult ;
  char arg1 ;
  TK_Terminator *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (TK_Terminator *)new SwigDirector_TK_Terminator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_ReadSwigExplicitTK_Terminator(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Terminator::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_WriteSwigExplicitTK_Terminator(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Terminator::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_ExecuteSwigExplicitTK_Terminator(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Terminator::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Terminator_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Terminator *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Terminator(void * jarg1) {
  TK_Terminator *arg1 = (TK_Terminator *) 0 ;
  
  arg1 = (TK_Terminator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Terminator_director_connect(void *objarg, SwigDirector_TK_Terminator::SWIG_Callback0_t callback0, SwigDirector_TK_Terminator::SWIG_Callback1_t callback1, SwigDirector_TK_Terminator::SWIG_Callback2_t callback2, SwigDirector_TK_Terminator::SWIG_Callback3_t callback3, SwigDirector_TK_Terminator::SWIG_Callback4_t callback4, SwigDirector_TK_Terminator::SWIG_Callback5_t callback5, SwigDirector_TK_Terminator::SWIG_Callback6_t callback6, SwigDirector_TK_Terminator::SWIG_Callback7_t callback7, SwigDirector_TK_Terminator::SWIG_Callback8_t callback8, SwigDirector_TK_Terminator::SWIG_Callback9_t callback9) {
  TK_Terminator *obj = (TK_Terminator *)objarg;
  SwigDirector_TK_Terminator *director = dynamic_cast<SwigDirector_TK_Terminator *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Compression(char jarg1) {
  void * jresult ;
  char arg1 ;
  TK_Compression *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (TK_Compression *)new SwigDirector_TK_Compression(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_ReadSwigExplicitTK_Compression(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Compression::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_WriteSwigExplicitTK_Compression(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Compression::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_ExecuteSwigExplicitTK_Compression(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Compression::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_ExecuteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ExecuteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_InterpretSwigExplicitTK_Compression(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Compression::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Compression_Interpret_specialSwigExplicitTK_Compression(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Compression *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Compression::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Compression(void * jarg1) {
  TK_Compression *arg1 = (TK_Compression *) 0 ;
  
  arg1 = (TK_Compression *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Compression_director_connect(void *objarg, SwigDirector_TK_Compression::SWIG_Callback0_t callback0, SwigDirector_TK_Compression::SWIG_Callback1_t callback1, SwigDirector_TK_Compression::SWIG_Callback2_t callback2, SwigDirector_TK_Compression::SWIG_Callback3_t callback3, SwigDirector_TK_Compression::SWIG_Callback4_t callback4, SwigDirector_TK_Compression::SWIG_Callback5_t callback5, SwigDirector_TK_Compression::SWIG_Callback6_t callback6, SwigDirector_TK_Compression::SWIG_Callback7_t callback7, SwigDirector_TK_Compression::SWIG_Callback8_t callback8, SwigDirector_TK_Compression::SWIG_Callback9_t callback9) {
  TK_Compression *obj = (TK_Compression *)objarg;
  SwigDirector_TK_Compression *director = dynamic_cast<SwigDirector_TK_Compression *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_mask_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_mask_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_value_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_value_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_mask_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->color_mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_color_mask_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->color_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_value_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->color_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_color_value_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->color_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_face_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_face_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_face_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_face_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_face_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_face_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_face_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_face_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_edge_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_edge_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_edge_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_edge_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_edge_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_edge_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_edge_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_edge_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_line_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_line_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_line_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_line_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_line_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_line_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_line_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_line_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_marker_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_marker_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_marker_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_marker_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_marker_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_marker_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_marker_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_marker_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_text_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_text_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_text_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_text_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_text_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_text_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_text_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_text_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_window_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_window_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_window_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_window_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_window_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_window_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_window_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_window_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_face_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_face_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_face_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_face_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_face_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_face_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_face_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_face_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_window_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_window_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_window_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_window_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_window_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_window_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_window_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_window_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_back_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_back_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_back_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_back_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_back_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_back_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_back_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_back_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_vertex_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_vertex_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_vertex_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_vertex_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_vertex_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_vertex_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_vertex_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_vertex_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_edge_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_edge_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_edge_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_edge_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_edge_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_edge_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_edge_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_edge_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_line_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_line_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_line_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_line_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_line_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_line_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_line_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_line_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_marker_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_marker_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_marker_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_marker_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_marker_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_marker_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_marker_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_marker_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_vertex_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_vertex_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_vertex_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_vertex_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_vertex_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_vertex_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_vertex_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_vertex_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_text_contrast_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_text_contrast_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_text_contrast_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_text_contrast_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_text_contrast_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_text_contrast_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_text_contrast_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_text_contrast_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_simple_reflection_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_simple_reflection_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_simple_reflection_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_simple_reflection_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_simple_reflection_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_simple_reflection_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_simple_reflection_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_simple_reflection_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_cut_face_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_cut_face_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_cut_face_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_cut_face_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_cut_face_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_cut_face_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_cut_face_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_cut_face_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_cut_edge_mask_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_cut_edge_mask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_cut_edge_mask_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_cut_edge_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_color_cut_edge_value_set(void * jarg1, short jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->color_cut_edge_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Lock_Masks_color_cut_edge_value_get(void * jarg1) {
  short jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  short result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (short) ((arg1)->color_cut_edge_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_visibility_mask_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->visibility_mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_visibility_mask_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->visibility_mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_visibility_value_set(void * jarg1, int jarg2) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int arg2 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->visibility_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_visibility_value_get(void * jarg1) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  int result;
  
  arg1 = (Lock_Masks *)jarg1; 
  result = (int) ((arg1)->visibility_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Lock_Masks() {
  void * jresult ;
  Lock_Masks *result = 0 ;
  
  result = (Lock_Masks *)new Lock_Masks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_Read__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_Write__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_Read__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  TK_Status result;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (TK_Status)(arg1)->Read(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Lock_Masks_Write__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  TK_Status result;
  
  arg1 = (Lock_Masks *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (TK_Status)(arg1)->Write(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_init(void * jarg1) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  (arg1)->init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Lock_Masks_set_color(void * jarg1) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  (arg1)->set_color();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Lock_Masks(void * jarg1) {
  Lock_Masks *arg1 = (Lock_Masks *) 0 ;
  
  arg1 = (Lock_Masks *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Open_Segment() {
  void * jresult ;
  TK_Open_Segment *result = 0 ;
  
  result = (TK_Open_Segment *)new SwigDirector_TK_Open_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Open_Segment(void * jarg1) {
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_ReadSwigExplicitTK_Open_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Open_Segment::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_WriteSwigExplicitTK_Open_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Open_Segment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Open_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_CloneSwigExplicitTK_Open_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Open_Segment const *)arg1)->TK_Open_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Open_Segment_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Open_Segment_Reset(void * jarg1) {
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Open_Segment_ResetSwigExplicitTK_Open_Segment(void * jarg1) {
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  (arg1)->TK_Open_Segment::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Open_Segment_SetSegment__SWIG_0(void * jarg1, char * jarg2) {
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetSegment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Open_Segment_SetSegment__SWIG_1(void * jarg1, int jarg2) {
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSegment(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Open_Segment_GetSegment__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Open_Segment *arg1 = (TK_Open_Segment *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Open_Segment *)jarg1; 
  result = (char *)((TK_Open_Segment const *)arg1)->GetSegment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Open_Segment_director_connect(void *objarg, SwigDirector_TK_Open_Segment::SWIG_Callback0_t callback0, SwigDirector_TK_Open_Segment::SWIG_Callback1_t callback1, SwigDirector_TK_Open_Segment::SWIG_Callback2_t callback2, SwigDirector_TK_Open_Segment::SWIG_Callback3_t callback3, SwigDirector_TK_Open_Segment::SWIG_Callback4_t callback4, SwigDirector_TK_Open_Segment::SWIG_Callback5_t callback5, SwigDirector_TK_Open_Segment::SWIG_Callback6_t callback6, SwigDirector_TK_Open_Segment::SWIG_Callback7_t callback7, SwigDirector_TK_Open_Segment::SWIG_Callback8_t callback8, SwigDirector_TK_Open_Segment::SWIG_Callback9_t callback9) {
  TK_Open_Segment *obj = (TK_Open_Segment *)objarg;
  SwigDirector_TK_Open_Segment *director = dynamic_cast<SwigDirector_TK_Open_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Close_Segment() {
  void * jresult ;
  TK_Close_Segment *result = 0 ;
  
  result = (TK_Close_Segment *)new SwigDirector_TK_Close_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_ReadSwigExplicitTK_Close_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Close_Segment::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_WriteSwigExplicitTK_Close_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Close_Segment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Close_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_CloneSwigExplicitTK_Close_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Close_Segment const *)arg1)->TK_Close_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Close_Segment_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Close_Segment(void * jarg1) {
  TK_Close_Segment *arg1 = (TK_Close_Segment *) 0 ;
  
  arg1 = (TK_Close_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Close_Segment_director_connect(void *objarg, SwigDirector_TK_Close_Segment::SWIG_Callback0_t callback0, SwigDirector_TK_Close_Segment::SWIG_Callback1_t callback1, SwigDirector_TK_Close_Segment::SWIG_Callback2_t callback2, SwigDirector_TK_Close_Segment::SWIG_Callback3_t callback3, SwigDirector_TK_Close_Segment::SWIG_Callback4_t callback4, SwigDirector_TK_Close_Segment::SWIG_Callback5_t callback5, SwigDirector_TK_Close_Segment::SWIG_Callback6_t callback6, SwigDirector_TK_Close_Segment::SWIG_Callback7_t callback7, SwigDirector_TK_Close_Segment::SWIG_Callback8_t callback8, SwigDirector_TK_Close_Segment::SWIG_Callback9_t callback9) {
  TK_Close_Segment *obj = (TK_Close_Segment *)objarg;
  SwigDirector_TK_Close_Segment *director = dynamic_cast<SwigDirector_TK_Close_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Reopen_Segment() {
  void * jresult ;
  TK_Reopen_Segment *result = 0 ;
  
  result = (TK_Reopen_Segment *)new SwigDirector_TK_Reopen_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_ReadSwigExplicitTK_Reopen_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Reopen_Segment::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_WriteSwigExplicitTK_Reopen_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Reopen_Segment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Reopen_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_CloneSwigExplicitTK_Reopen_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Reopen_Segment const *)arg1)->TK_Reopen_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reopen_Segment_SetIndex(void * jarg1, int jarg2) {
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reopen_Segment_GetIndex(void * jarg1) {
  int jresult ;
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  int result;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  result = (int)((TK_Reopen_Segment const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Reopen_Segment(void * jarg1) {
  TK_Reopen_Segment *arg1 = (TK_Reopen_Segment *) 0 ;
  
  arg1 = (TK_Reopen_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reopen_Segment_director_connect(void *objarg, SwigDirector_TK_Reopen_Segment::SWIG_Callback0_t callback0, SwigDirector_TK_Reopen_Segment::SWIG_Callback1_t callback1, SwigDirector_TK_Reopen_Segment::SWIG_Callback2_t callback2, SwigDirector_TK_Reopen_Segment::SWIG_Callback3_t callback3, SwigDirector_TK_Reopen_Segment::SWIG_Callback4_t callback4, SwigDirector_TK_Reopen_Segment::SWIG_Callback5_t callback5, SwigDirector_TK_Reopen_Segment::SWIG_Callback6_t callback6, SwigDirector_TK_Reopen_Segment::SWIG_Callback7_t callback7, SwigDirector_TK_Reopen_Segment::SWIG_Callback8_t callback8, SwigDirector_TK_Reopen_Segment::SWIG_Callback9_t callback9) {
  TK_Reopen_Segment *obj = (TK_Reopen_Segment *)objarg;
  SwigDirector_TK_Reopen_Segment *director = dynamic_cast<SwigDirector_TK_Reopen_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Referenced_Segment(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Referenced_Segment *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Referenced_Segment *)new SwigDirector_TK_Referenced_Segment(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Referenced_Segment(void * jarg1) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_ReadSwigExplicitTK_Referenced_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Referenced_Segment::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_WriteSwigExplicitTK_Referenced_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Referenced_Segment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Referenced_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_CloneSwigExplicitTK_Referenced_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Referenced_Segment const *)arg1)->TK_Referenced_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Referenced_Segment_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_Reset(void * jarg1) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_ResetSwigExplicitTK_Referenced_Segment(void * jarg1) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  (arg1)->TK_Referenced_Segment::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_SetSegment__SWIG_0(void * jarg1, char * jarg2) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetSegment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_SetSegment__SWIG_1(void * jarg1, int jarg2) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSegment(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Referenced_Segment_GetSegment__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  result = (char *)((TK_Referenced_Segment const *)arg1)->GetSegment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_SetCondition__SWIG_0(void * jarg1, char * jarg2) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_SetCondition__SWIG_1(void * jarg1, int jarg2) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCondition(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Referenced_Segment_GetCondition__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  result = (char *)((TK_Referenced_Segment const *)arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_SetFollow(void * jarg1, unsigned int jarg2) {
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  bool arg2 ;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFollow(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Referenced_Segment_GetFollow(void * jarg1) {
  unsigned int jresult ;
  TK_Referenced_Segment *arg1 = (TK_Referenced_Segment *) 0 ;
  bool result;
  
  arg1 = (TK_Referenced_Segment *)jarg1; 
  result = (bool)(arg1)->GetFollow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Referenced_Segment_director_connect(void *objarg, SwigDirector_TK_Referenced_Segment::SWIG_Callback0_t callback0, SwigDirector_TK_Referenced_Segment::SWIG_Callback1_t callback1, SwigDirector_TK_Referenced_Segment::SWIG_Callback2_t callback2, SwigDirector_TK_Referenced_Segment::SWIG_Callback3_t callback3, SwigDirector_TK_Referenced_Segment::SWIG_Callback4_t callback4, SwigDirector_TK_Referenced_Segment::SWIG_Callback5_t callback5, SwigDirector_TK_Referenced_Segment::SWIG_Callback6_t callback6, SwigDirector_TK_Referenced_Segment::SWIG_Callback7_t callback7, SwigDirector_TK_Referenced_Segment::SWIG_Callback8_t callback8, SwigDirector_TK_Referenced_Segment::SWIG_Callback9_t callback9) {
  TK_Referenced_Segment *obj = (TK_Referenced_Segment *)objarg;
  SwigDirector_TK_Referenced_Segment *director = dynamic_cast<SwigDirector_TK_Referenced_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Reference() {
  void * jresult ;
  TK_Reference *result = 0 ;
  
  result = (TK_Reference *)new TK_Reference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Reference(void * jarg1) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  
  arg1 = (TK_Reference *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reference_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reference_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reference_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Reference const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reference_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Reference_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reference_Reset(void * jarg1) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  
  arg1 = (TK_Reference *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reference_SetIndex(void * jarg1, int jarg2) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_TK_Reference_GetIndex(void * jarg1) {
  ID_Key jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  long result;
  
  arg1 = (TK_Reference *)jarg1; 
  result = (long)(arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reference_SetCondition__SWIG_0(void * jarg1, char * jarg2) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reference_SetCondition__SWIG_1(void * jarg1, int jarg2) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCondition(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Reference_GetCondition__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Reference *)jarg1; 
  result = (char *)((TK_Reference const *)arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Reference_SetFollow(void * jarg1, unsigned int jarg2) {
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  bool arg2 ;
  
  arg1 = (TK_Reference *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFollow(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Reference_GetFollow(void * jarg1) {
  unsigned int jresult ;
  TK_Reference *arg1 = (TK_Reference *) 0 ;
  bool result;
  
  arg1 = (TK_Reference *)jarg1; 
  result = (bool)(arg1)->GetFollow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1,arg2,arg3,arg4,arg5,(float const (*))arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_3(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_5(int jarg1) {
  void * jresult ;
  int arg1 ;
  TK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (TK_Instance *)new SwigDirector_TK_Instance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Instance__SWIG_6() {
  void * jresult ;
  TK_Instance *result = 0 ;
  
  result = (TK_Instance *)new SwigDirector_TK_Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_ReadSwigExplicitTK_Instance(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Instance::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_WriteSwigExplicitTK_Instance(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Instance::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Instance const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_CloneSwigExplicitTK_Instance(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Instance const *)arg1)->TK_Instance::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Instance_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Instance_Reset(void * jarg1) {
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  
  arg1 = (TK_Instance *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Instance_ResetSwigExplicitTK_Instance(void * jarg1) {
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  
  arg1 = (TK_Instance *)jarg1; 
  (arg1)->TK_Instance::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Instance(void * jarg1) {
  TK_Instance *arg1 = (TK_Instance *) 0 ;
  
  arg1 = (TK_Instance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Instance_director_connect(void *objarg, SwigDirector_TK_Instance::SWIG_Callback0_t callback0, SwigDirector_TK_Instance::SWIG_Callback1_t callback1, SwigDirector_TK_Instance::SWIG_Callback2_t callback2, SwigDirector_TK_Instance::SWIG_Callback3_t callback3, SwigDirector_TK_Instance::SWIG_Callback4_t callback4, SwigDirector_TK_Instance::SWIG_Callback5_t callback5, SwigDirector_TK_Instance::SWIG_Callback6_t callback6, SwigDirector_TK_Instance::SWIG_Callback7_t callback7, SwigDirector_TK_Instance::SWIG_Callback8_t callback8, SwigDirector_TK_Instance::SWIG_Callback9_t callback9) {
  TK_Instance *obj = (TK_Instance *)objarg;
  SwigDirector_TK_Instance *director = dynamic_cast<SwigDirector_TK_Instance *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Delete_Object() {
  void * jresult ;
  TK_Delete_Object *result = 0 ;
  
  result = (TK_Delete_Object *)new SwigDirector_TK_Delete_Object();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_ReadSwigExplicitTK_Delete_Object(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Delete_Object::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_WriteSwigExplicitTK_Delete_Object(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Delete_Object::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Delete_Object const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_CloneSwigExplicitTK_Delete_Object(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Delete_Object const *)arg1)->TK_Delete_Object::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Delete_Object_SetIndex(void * jarg1, int jarg2) {
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Delete_Object_GetIndex(void * jarg1) {
  int jresult ;
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  int result;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  result = (int)(arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Delete_Object(void * jarg1) {
  TK_Delete_Object *arg1 = (TK_Delete_Object *) 0 ;
  
  arg1 = (TK_Delete_Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Delete_Object_director_connect(void *objarg, SwigDirector_TK_Delete_Object::SWIG_Callback0_t callback0, SwigDirector_TK_Delete_Object::SWIG_Callback1_t callback1, SwigDirector_TK_Delete_Object::SWIG_Callback2_t callback2, SwigDirector_TK_Delete_Object::SWIG_Callback3_t callback3, SwigDirector_TK_Delete_Object::SWIG_Callback4_t callback4, SwigDirector_TK_Delete_Object::SWIG_Callback5_t callback5, SwigDirector_TK_Delete_Object::SWIG_Callback6_t callback6, SwigDirector_TK_Delete_Object::SWIG_Callback7_t callback7, SwigDirector_TK_Delete_Object::SWIG_Callback8_t callback8, SwigDirector_TK_Delete_Object::SWIG_Callback9_t callback9) {
  TK_Delete_Object *obj = (TK_Delete_Object *)objarg;
  SwigDirector_TK_Delete_Object *director = dynamic_cast<SwigDirector_TK_Delete_Object *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_LOD() {
  void * jresult ;
  TK_LOD *result = 0 ;
  
  result = (TK_LOD *)new SwigDirector_TK_LOD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_LOD(void * jarg1) {
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  
  arg1 = (TK_LOD *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_ReadSwigExplicitTK_LOD(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_LOD::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_WriteSwigExplicitTK_LOD(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_LOD::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_LOD const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_CloneSwigExplicitTK_LOD(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_LOD const *)arg1)->TK_LOD::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_LOD_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_LOD_Reset(void * jarg1) {
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  
  arg1 = (TK_LOD *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_LOD_ResetSwigExplicitTK_LOD(void * jarg1) {
  TK_LOD *arg1 = (TK_LOD *) 0 ;
  
  arg1 = (TK_LOD *)jarg1; 
  (arg1)->TK_LOD::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_LOD_director_connect(void *objarg, SwigDirector_TK_LOD::SWIG_Callback0_t callback0, SwigDirector_TK_LOD::SWIG_Callback1_t callback1, SwigDirector_TK_LOD::SWIG_Callback2_t callback2, SwigDirector_TK_LOD::SWIG_Callback3_t callback3, SwigDirector_TK_LOD::SWIG_Callback4_t callback4, SwigDirector_TK_LOD::SWIG_Callback5_t callback5, SwigDirector_TK_LOD::SWIG_Callback6_t callback6, SwigDirector_TK_LOD::SWIG_Callback7_t callback7, SwigDirector_TK_LOD::SWIG_Callback8_t callback8, SwigDirector_TK_LOD::SWIG_Callback9_t callback9) {
  TK_LOD *obj = (TK_LOD *)objarg;
  SwigDirector_TK_LOD *director = dynamic_cast<SwigDirector_TK_LOD *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKLOD_ESCAPE_get() {
  int jresult ;
  int result;
  
  result = (int) 255;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Geometry_Attributes() {
  void * jresult ;
  TK_Geometry_Attributes *result = 0 ;
  
  result = (TK_Geometry_Attributes *)new SwigDirector_TK_Geometry_Attributes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_ReadSwigExplicitTK_Geometry_Attributes(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Geometry_Attributes::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_WriteSwigExplicitTK_Geometry_Attributes(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Geometry_Attributes::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Attributes_ExecuteSwigExplicitTK_Geometry_Attributes(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Geometry_Attributes::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Geometry_Attributes(void * jarg1) {
  TK_Geometry_Attributes *arg1 = (TK_Geometry_Attributes *) 0 ;
  
  arg1 = (TK_Geometry_Attributes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Geometry_Attributes_director_connect(void *objarg, SwigDirector_TK_Geometry_Attributes::SWIG_Callback0_t callback0, SwigDirector_TK_Geometry_Attributes::SWIG_Callback1_t callback1, SwigDirector_TK_Geometry_Attributes::SWIG_Callback2_t callback2, SwigDirector_TK_Geometry_Attributes::SWIG_Callback3_t callback3, SwigDirector_TK_Geometry_Attributes::SWIG_Callback4_t callback4, SwigDirector_TK_Geometry_Attributes::SWIG_Callback5_t callback5, SwigDirector_TK_Geometry_Attributes::SWIG_Callback6_t callback6, SwigDirector_TK_Geometry_Attributes::SWIG_Callback7_t callback7, SwigDirector_TK_Geometry_Attributes::SWIG_Callback8_t callback8, SwigDirector_TK_Geometry_Attributes::SWIG_Callback9_t callback9) {
  TK_Geometry_Attributes *obj = (TK_Geometry_Attributes *)objarg;
  SwigDirector_TK_Geometry_Attributes *director = dynamic_cast<SwigDirector_TK_Geometry_Attributes *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Renumber__SWIG_0(unsigned char jarg1, ID_Key jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  long arg2 ;
  TK_Renumber *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = jarg2; 
  result = (TK_Renumber *)new SwigDirector_TK_Renumber(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Renumber__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Renumber *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Renumber *)new SwigDirector_TK_Renumber(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_ReadSwigExplicitTK_Renumber(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Renumber::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_WriteSwigExplicitTK_Renumber(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Renumber::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Renumber const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_CloneSwigExplicitTK_Renumber(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Renumber const *)arg1)->TK_Renumber::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Renumber_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Renumber_SetKey(void * jarg1, ID_Key jarg2) {
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  long arg2 ;
  
  arg1 = (TK_Renumber *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetKey(arg2);
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_TK_Renumber_GetKey(void * jarg1) {
  ID_Key jresult ;
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  long result;
  
  arg1 = (TK_Renumber *)jarg1; 
  result = (long)((TK_Renumber const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Renumber(void * jarg1) {
  TK_Renumber *arg1 = (TK_Renumber *) 0 ;
  
  arg1 = (TK_Renumber *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Renumber_director_connect(void *objarg, SwigDirector_TK_Renumber::SWIG_Callback0_t callback0, SwigDirector_TK_Renumber::SWIG_Callback1_t callback1, SwigDirector_TK_Renumber::SWIG_Callback2_t callback2, SwigDirector_TK_Renumber::SWIG_Callback3_t callback3, SwigDirector_TK_Renumber::SWIG_Callback4_t callback4, SwigDirector_TK_Renumber::SWIG_Callback5_t callback5, SwigDirector_TK_Renumber::SWIG_Callback6_t callback6, SwigDirector_TK_Renumber::SWIG_Callback7_t callback7, SwigDirector_TK_Renumber::SWIG_Callback8_t callback8, SwigDirector_TK_Renumber::SWIG_Callback9_t callback9) {
  TK_Renumber *obj = (TK_Renumber *)objarg;
  SwigDirector_TK_Renumber *director = dynamic_cast<SwigDirector_TK_Renumber *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Tag__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Tag *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Tag *)new SwigDirector_TK_Tag(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Tag__SWIG_1() {
  void * jresult ;
  TK_Tag *result = 0 ;
  
  result = (TK_Tag *)new SwigDirector_TK_Tag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_ReadSwigExplicitTK_Tag(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Tag::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_WriteSwigExplicitTK_Tag(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Tag::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_ExecuteSwigExplicitTK_Tag(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Tag::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_InterpretSwigExplicitTK_Tag__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Tag::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_InterpretSwigExplicitTK_Tag__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->TK_Tag::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Tag_Interpret_specialSwigExplicitTK_Tag(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Tag *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Tag::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Tag(void * jarg1) {
  TK_Tag *arg1 = (TK_Tag *) 0 ;
  
  arg1 = (TK_Tag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Tag_director_connect(void *objarg, SwigDirector_TK_Tag::SWIG_Callback0_t callback0, SwigDirector_TK_Tag::SWIG_Callback1_t callback1, SwigDirector_TK_Tag::SWIG_Callback2_t callback2, SwigDirector_TK_Tag::SWIG_Callback3_t callback3, SwigDirector_TK_Tag::SWIG_Callback4_t callback4, SwigDirector_TK_Tag::SWIG_Callback5_t callback5, SwigDirector_TK_Tag::SWIG_Callback6_t callback6, SwigDirector_TK_Tag::SWIG_Callback7_t callback7, SwigDirector_TK_Tag::SWIG_Callback8_t callback8, SwigDirector_TK_Tag::SWIG_Callback9_t callback9) {
  TK_Tag *obj = (TK_Tag *)objarg;
  SwigDirector_TK_Tag *director = dynamic_cast<SwigDirector_TK_Tag *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Dictionary() {
  void * jresult ;
  TK_Dictionary *result = 0 ;
  
  result = (TK_Dictionary *)new SwigDirector_TK_Dictionary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_ReadSwigExplicitTK_Dictionary(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_WriteSwigExplicitTK_Dictionary(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_ExecuteSwigExplicitTK_Dictionary(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_InterpretSwigExplicitTK_Dictionary__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Dictionary::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_InterpretSwigExplicitTK_Dictionary__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->TK_Dictionary::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Interpret_specialSwigExplicitTK_Dictionary(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Dictionary::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Reset(void * jarg1) {
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  
  arg1 = (TK_Dictionary *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_ResetSwigExplicitTK_Dictionary(void * jarg1) {
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  
  arg1 = (TK_Dictionary *)jarg1; 
  (arg1)->TK_Dictionary::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Dictionary(void * jarg1) {
  TK_Dictionary *arg1 = (TK_Dictionary *) 0 ;
  
  arg1 = (TK_Dictionary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_director_connect(void *objarg, SwigDirector_TK_Dictionary::SWIG_Callback0_t callback0, SwigDirector_TK_Dictionary::SWIG_Callback1_t callback1, SwigDirector_TK_Dictionary::SWIG_Callback2_t callback2, SwigDirector_TK_Dictionary::SWIG_Callback3_t callback3, SwigDirector_TK_Dictionary::SWIG_Callback4_t callback4, SwigDirector_TK_Dictionary::SWIG_Callback5_t callback5, SwigDirector_TK_Dictionary::SWIG_Callback6_t callback6, SwigDirector_TK_Dictionary::SWIG_Callback7_t callback7, SwigDirector_TK_Dictionary::SWIG_Callback8_t callback8, SwigDirector_TK_Dictionary::SWIG_Callback9_t callback9) {
  TK_Dictionary *obj = (TK_Dictionary *)objarg;
  SwigDirector_TK_Dictionary *director = dynamic_cast<SwigDirector_TK_Dictionary *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Dictionary_Locater() {
  void * jresult ;
  TK_Dictionary_Locater *result = 0 ;
  
  result = (TK_Dictionary_Locater *)new SwigDirector_TK_Dictionary_Locater();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_ReadSwigExplicitTK_Dictionary_Locater(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_WriteSwigExplicitTK_Dictionary_Locater(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_ExecuteSwigExplicitTK_Dictionary_Locater(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_InterpretSwigExplicitTK_Dictionary_Locater__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_InterpretSwigExplicitTK_Dictionary_Locater__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_Interpret_specialSwigExplicitTK_Dictionary_Locater(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Dictionary_Locater::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Locater_Reset(void * jarg1) {
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Locater_ResetSwigExplicitTK_Dictionary_Locater(void * jarg1) {
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  (arg1)->TK_Dictionary_Locater::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Locater_SetSize(void * jarg1, int jarg2) {
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_GetSize(void * jarg1) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  int result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  result = (int)((TK_Dictionary_Locater const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Locater_SetOffset(void * jarg1, int jarg2) {
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOffset(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dictionary_Locater_GetOffset(void * jarg1) {
  int jresult ;
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  int result;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  result = (int)((TK_Dictionary_Locater const *)arg1)->GetOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Dictionary_Locater(void * jarg1) {
  TK_Dictionary_Locater *arg1 = (TK_Dictionary_Locater *) 0 ;
  
  arg1 = (TK_Dictionary_Locater *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dictionary_Locater_director_connect(void *objarg, SwigDirector_TK_Dictionary_Locater::SWIG_Callback0_t callback0, SwigDirector_TK_Dictionary_Locater::SWIG_Callback1_t callback1, SwigDirector_TK_Dictionary_Locater::SWIG_Callback2_t callback2, SwigDirector_TK_Dictionary_Locater::SWIG_Callback3_t callback3, SwigDirector_TK_Dictionary_Locater::SWIG_Callback4_t callback4, SwigDirector_TK_Dictionary_Locater::SWIG_Callback5_t callback5, SwigDirector_TK_Dictionary_Locater::SWIG_Callback6_t callback6, SwigDirector_TK_Dictionary_Locater::SWIG_Callback7_t callback7, SwigDirector_TK_Dictionary_Locater::SWIG_Callback8_t callback8, SwigDirector_TK_Dictionary_Locater::SWIG_Callback9_t callback9) {
  TK_Dictionary_Locater *obj = (TK_Dictionary_Locater *)objarg;
  SwigDirector_TK_Dictionary_Locater *director = dynamic_cast<SwigDirector_TK_Dictionary_Locater *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color() {
  void * jresult ;
  TK_Color *result = 0 ;
  
  result = (TK_Color *)new SwigDirector_TK_Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color(void * jarg1) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_ReadSwigExplicitTK_Color(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_WriteSwigExplicitTK_Color(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_CloneSwigExplicitTK_Color(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color const *)arg1)->TK_Color::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Reset(void * jarg1) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_ResetSwigExplicitTK_Color(void * jarg1) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  (arg1)->TK_Color::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetGeometry(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  int result;
  
  arg1 = (TK_Color *)jarg1; 
  result = (int)((TK_Color const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetChannels(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetChannels(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_GetChannels(void * jarg1) {
  int jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  int result;
  
  arg1 = (TK_Color *)jarg1; 
  result = (int)((TK_Color const *)arg1)->GetChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetDiffuse__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetDiffuse(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetDiffuse__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetDiffuse((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetDiffuseName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetDiffuseName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetDiffuseName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDiffuseName(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_GetDiffuse(void * jarg1) {
  float * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float *)((TK_Color const *)arg1)->GetDiffuse();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetDiffuseName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetDiffuseName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetSpecular__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetSpecular(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetSpecular__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetSpecular((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetSpecularName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetSpecularName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetSpecularName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpecularName(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_GetSpecular(void * jarg1) {
  float * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float *)((TK_Color const *)arg1)->GetSpecular();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetSpecularName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetSpecularName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetMirror__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetMirror(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetMirror__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetMirror((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetMirrorName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetMirrorName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetMirrorName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMirrorName(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_GetMirror(void * jarg1) {
  float * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float *)((TK_Color const *)arg1)->GetMirror();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetMirrorName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetMirrorName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetTransmission__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetTransmission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetTransmission__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetTransmission((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetTransmissionName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTransmissionName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetTransmissionName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTransmissionName(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_GetTransmission(void * jarg1) {
  float * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float *)((TK_Color const *)arg1)->GetTransmission();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetTransmissionName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetTransmissionName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEmission__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetEmission(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEmission__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetEmission((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEmissionName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetEmissionName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEmissionName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEmissionName(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_GetEmission(void * jarg1) {
  float * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float *)((TK_Color const *)arg1)->GetEmission();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetEmissionName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetEmissionName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEnvironmentName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetEnvironmentName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetEnvironmentName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEnvironmentName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetEnvironmentName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetEnvironmentName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetBumpName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetBumpName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetBumpName__SWIG_1(void * jarg1, int jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBumpName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_GetBumpName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color *)jarg1; 
  result = (char *)((TK_Color const *)arg1)->GetBumpName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetGloss(void * jarg1, float jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGloss(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Color_GetGloss(void * jarg1) {
  float jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float result;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float)((TK_Color const *)arg1)->GetGloss();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_SetIndex(void * jarg1, float jarg2) {
  TK_Color *arg1 = (TK_Color *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Color *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Color_GetIndex(void * jarg1) {
  float jresult ;
  TK_Color *arg1 = (TK_Color *) 0 ;
  float result;
  
  arg1 = (TK_Color *)jarg1; 
  result = (float)((TK_Color const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_director_connect(void *objarg, SwigDirector_TK_Color::SWIG_Callback0_t callback0, SwigDirector_TK_Color::SWIG_Callback1_t callback1, SwigDirector_TK_Color::SWIG_Callback2_t callback2, SwigDirector_TK_Color::SWIG_Callback3_t callback3, SwigDirector_TK_Color::SWIG_Callback4_t callback4, SwigDirector_TK_Color::SWIG_Callback5_t callback5, SwigDirector_TK_Color::SWIG_Callback6_t callback6, SwigDirector_TK_Color::SWIG_Callback7_t callback7, SwigDirector_TK_Color::SWIG_Callback8_t callback8, SwigDirector_TK_Color::SWIG_Callback9_t callback9) {
  TK_Color *obj = (TK_Color *)objarg;
  SwigDirector_TK_Color *director = dynamic_cast<SwigDirector_TK_Color *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color_RGB() {
  void * jresult ;
  TK_Color_RGB *result = 0 ;
  
  result = (TK_Color_RGB *)new SwigDirector_TK_Color_RGB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_ReadSwigExplicitTK_Color_RGB(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_RGB::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_WriteSwigExplicitTK_Color_RGB(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_RGB::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_RGB const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_CloneSwigExplicitTK_Color_RGB(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_RGB const *)arg1)->TK_Color_RGB::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_RGB_SetGeometry(void * jarg1, int jarg2) {
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_RGB_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  int result;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  result = (int)((TK_Color_RGB const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_RGB_SetRGB__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRGB(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_RGB_SetRGB__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetRGB((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_RGB_GetRGB(void * jarg1) {
  float * jresult ;
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  result = (float *)((TK_Color_RGB const *)arg1)->GetRGB();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color_RGB(void * jarg1) {
  TK_Color_RGB *arg1 = (TK_Color_RGB *) 0 ;
  
  arg1 = (TK_Color_RGB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_RGB_director_connect(void *objarg, SwigDirector_TK_Color_RGB::SWIG_Callback0_t callback0, SwigDirector_TK_Color_RGB::SWIG_Callback1_t callback1, SwigDirector_TK_Color_RGB::SWIG_Callback2_t callback2, SwigDirector_TK_Color_RGB::SWIG_Callback3_t callback3, SwigDirector_TK_Color_RGB::SWIG_Callback4_t callback4, SwigDirector_TK_Color_RGB::SWIG_Callback5_t callback5, SwigDirector_TK_Color_RGB::SWIG_Callback6_t callback6, SwigDirector_TK_Color_RGB::SWIG_Callback7_t callback7, SwigDirector_TK_Color_RGB::SWIG_Callback8_t callback8, SwigDirector_TK_Color_RGB::SWIG_Callback9_t callback9) {
  TK_Color_RGB *obj = (TK_Color_RGB *)objarg;
  SwigDirector_TK_Color_RGB *director = dynamic_cast<SwigDirector_TK_Color_RGB *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color_By_Value() {
  void * jresult ;
  TK_Color_By_Value *result = 0 ;
  
  result = (TK_Color_By_Value *)new SwigDirector_TK_Color_By_Value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_ReadSwigExplicitTK_Color_By_Value(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_Value::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_WriteSwigExplicitTK_Color_By_Value(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_Value::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_Value const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_CloneSwigExplicitTK_Color_By_Value(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_Value const *)arg1)->TK_Color_By_Value::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Value_SetGeometry(void * jarg1, int jarg2) {
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  int result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  result = (int)((TK_Color_By_Value const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Value_SetSpace(void * jarg1, int jarg2) {
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpace(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Value_GetSpace(void * jarg1) {
  int jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  int result;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  result = (int)((TK_Color_By_Value const *)arg1)->GetSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Value_SetValue__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetValue(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Value_SetValue__SWIG_1(void * jarg1, float * jarg2) {
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetValue((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_By_Value_GetValue(void * jarg1) {
  float * jresult ;
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  result = (float *)((TK_Color_By_Value const *)arg1)->GetValue();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color_By_Value(void * jarg1) {
  TK_Color_By_Value *arg1 = (TK_Color_By_Value *) 0 ;
  
  arg1 = (TK_Color_By_Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Value_director_connect(void *objarg, SwigDirector_TK_Color_By_Value::SWIG_Callback0_t callback0, SwigDirector_TK_Color_By_Value::SWIG_Callback1_t callback1, SwigDirector_TK_Color_By_Value::SWIG_Callback2_t callback2, SwigDirector_TK_Color_By_Value::SWIG_Callback3_t callback3, SwigDirector_TK_Color_By_Value::SWIG_Callback4_t callback4, SwigDirector_TK_Color_By_Value::SWIG_Callback5_t callback5, SwigDirector_TK_Color_By_Value::SWIG_Callback6_t callback6, SwigDirector_TK_Color_By_Value::SWIG_Callback7_t callback7, SwigDirector_TK_Color_By_Value::SWIG_Callback8_t callback8, SwigDirector_TK_Color_By_Value::SWIG_Callback9_t callback9) {
  TK_Color_By_Value *obj = (TK_Color_By_Value *)objarg;
  SwigDirector_TK_Color_By_Value *director = dynamic_cast<SwigDirector_TK_Color_By_Value *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color_By_Index(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Color_By_Index *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Color_By_Index *)new SwigDirector_TK_Color_By_Index(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_ReadSwigExplicitTK_Color_By_Index(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_Index::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_WriteSwigExplicitTK_Color_By_Index(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_Index::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_Index const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_CloneSwigExplicitTK_Color_By_Index(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_Index const *)arg1)->TK_Color_By_Index::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Index_SetGeometry(void * jarg1, int jarg2) {
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  int result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  result = (int)((TK_Color_By_Index const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Index_SetIndex(void * jarg1, int jarg2) {
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_Index_GetIndex(void * jarg1) {
  int jresult ;
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  int result;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  result = (int)((TK_Color_By_Index const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color_By_Index(void * jarg1) {
  TK_Color_By_Index *arg1 = (TK_Color_By_Index *) 0 ;
  
  arg1 = (TK_Color_By_Index *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_Index_director_connect(void *objarg, SwigDirector_TK_Color_By_Index::SWIG_Callback0_t callback0, SwigDirector_TK_Color_By_Index::SWIG_Callback1_t callback1, SwigDirector_TK_Color_By_Index::SWIG_Callback2_t callback2, SwigDirector_TK_Color_By_Index::SWIG_Callback3_t callback3, SwigDirector_TK_Color_By_Index::SWIG_Callback4_t callback4, SwigDirector_TK_Color_By_Index::SWIG_Callback5_t callback5, SwigDirector_TK_Color_By_Index::SWIG_Callback6_t callback6, SwigDirector_TK_Color_By_Index::SWIG_Callback7_t callback7, SwigDirector_TK_Color_By_Index::SWIG_Callback8_t callback8, SwigDirector_TK_Color_By_Index::SWIG_Callback9_t callback9) {
  TK_Color_By_Index *obj = (TK_Color_By_Index *)objarg;
  SwigDirector_TK_Color_By_Index *director = dynamic_cast<SwigDirector_TK_Color_By_Index *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color_By_FIndex() {
  void * jresult ;
  TK_Color_By_FIndex *result = 0 ;
  
  result = (TK_Color_By_FIndex *)new SwigDirector_TK_Color_By_FIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_ReadSwigExplicitTK_Color_By_FIndex(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_FIndex::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_WriteSwigExplicitTK_Color_By_FIndex(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_By_FIndex::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_FIndex const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_CloneSwigExplicitTK_Color_By_FIndex(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_By_FIndex const *)arg1)->TK_Color_By_FIndex::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_FIndex_SetGeometry(void * jarg1, int jarg2) {
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_By_FIndex_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  int result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  result = (int)((TK_Color_By_FIndex const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_FIndex_SetIndex(void * jarg1, float jarg2) {
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Color_By_FIndex_GetIndex(void * jarg1) {
  float jresult ;
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  float result;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  result = (float)((TK_Color_By_FIndex const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color_By_FIndex(void * jarg1) {
  TK_Color_By_FIndex *arg1 = (TK_Color_By_FIndex *) 0 ;
  
  arg1 = (TK_Color_By_FIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_By_FIndex_director_connect(void *objarg, SwigDirector_TK_Color_By_FIndex::SWIG_Callback0_t callback0, SwigDirector_TK_Color_By_FIndex::SWIG_Callback1_t callback1, SwigDirector_TK_Color_By_FIndex::SWIG_Callback2_t callback2, SwigDirector_TK_Color_By_FIndex::SWIG_Callback3_t callback3, SwigDirector_TK_Color_By_FIndex::SWIG_Callback4_t callback4, SwigDirector_TK_Color_By_FIndex::SWIG_Callback5_t callback5, SwigDirector_TK_Color_By_FIndex::SWIG_Callback6_t callback6, SwigDirector_TK_Color_By_FIndex::SWIG_Callback7_t callback7, SwigDirector_TK_Color_By_FIndex::SWIG_Callback8_t callback8, SwigDirector_TK_Color_By_FIndex::SWIG_Callback9_t callback9) {
  TK_Color_By_FIndex *obj = (TK_Color_By_FIndex *)objarg;
  SwigDirector_TK_Color_By_FIndex *director = dynamic_cast<SwigDirector_TK_Color_By_FIndex *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Color_Map() {
  void * jresult ;
  TK_Color_Map *result = 0 ;
  
  result = (TK_Color_Map *)new SwigDirector_TK_Color_Map();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Color_Map(void * jarg1) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_ReadSwigExplicitTK_Color_Map(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_Map::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_WriteSwigExplicitTK_Color_Map(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Color_Map::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_Map const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_CloneSwigExplicitTK_Color_Map(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Color_Map const *)arg1)->TK_Color_Map::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_Reset(void * jarg1) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_ResetSwigExplicitTK_Color_Map(void * jarg1) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  (arg1)->TK_Color_Map::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_SetFormat(void * jarg1, int jarg2) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFormat(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_GetFormat(void * jarg1) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  result = (int)((TK_Color_Map const *)arg1)->GetFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_SetValues__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetValues(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_SetValues__SWIG_1(void * jarg1, int jarg2) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetValues(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Color_Map_GetValues__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  result = (float *)((TK_Color_Map const *)arg1)->GetValues();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Color_Map_GetLength(void * jarg1) {
  int jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int result;
  
  arg1 = (TK_Color_Map *)jarg1; 
  result = (int)((TK_Color_Map const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_SetString__SWIG_0(void * jarg1, char * jarg2) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_SetString__SWIG_1(void * jarg1, int jarg2) {
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetString(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Color_Map_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Color_Map *arg1 = (TK_Color_Map *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Color_Map *)jarg1; 
  result = (char *)((TK_Color_Map const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Color_Map_director_connect(void *objarg, SwigDirector_TK_Color_Map::SWIG_Callback0_t callback0, SwigDirector_TK_Color_Map::SWIG_Callback1_t callback1, SwigDirector_TK_Color_Map::SWIG_Callback2_t callback2, SwigDirector_TK_Color_Map::SWIG_Callback3_t callback3, SwigDirector_TK_Color_Map::SWIG_Callback4_t callback4, SwigDirector_TK_Color_Map::SWIG_Callback5_t callback5, SwigDirector_TK_Color_Map::SWIG_Callback6_t callback6, SwigDirector_TK_Color_Map::SWIG_Callback7_t callback7, SwigDirector_TK_Color_Map::SWIG_Callback8_t callback8, SwigDirector_TK_Color_Map::SWIG_Callback9_t callback9) {
  TK_Color_Map *obj = (TK_Color_Map *)objarg;
  SwigDirector_TK_Color_Map *director = dynamic_cast<SwigDirector_TK_Color_Map *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Callback() {
  void * jresult ;
  TK_Callback *result = 0 ;
  
  result = (TK_Callback *)new SwigDirector_TK_Callback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Callback(void * jarg1) {
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  
  arg1 = (TK_Callback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_ReadSwigExplicitTK_Callback(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Callback::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_WriteSwigExplicitTK_Callback(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Callback::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Callback const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_CloneSwigExplicitTK_Callback(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Callback const *)arg1)->TK_Callback::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Callback_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Callback_Reset(void * jarg1) {
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  
  arg1 = (TK_Callback *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Callback_ResetSwigExplicitTK_Callback(void * jarg1) {
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  
  arg1 = (TK_Callback *)jarg1; 
  (arg1)->TK_Callback::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Callback_SetCallback__SWIG_0(void * jarg1, char * jarg2) {
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCallback((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Callback_SetCallback__SWIG_1(void * jarg1, int jarg2) {
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Callback *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCallback(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Callback_GetCallback__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Callback *arg1 = (TK_Callback *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Callback *)jarg1; 
  result = (char *)((TK_Callback const *)arg1)->GetCallback();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Callback_director_connect(void *objarg, SwigDirector_TK_Callback::SWIG_Callback0_t callback0, SwigDirector_TK_Callback::SWIG_Callback1_t callback1, SwigDirector_TK_Callback::SWIG_Callback2_t callback2, SwigDirector_TK_Callback::SWIG_Callback3_t callback3, SwigDirector_TK_Callback::SWIG_Callback4_t callback4, SwigDirector_TK_Callback::SWIG_Callback5_t callback5, SwigDirector_TK_Callback::SWIG_Callback6_t callback6, SwigDirector_TK_Callback::SWIG_Callback7_t callback7, SwigDirector_TK_Callback::SWIG_Callback8_t callback8, SwigDirector_TK_Callback::SWIG_Callback9_t callback9) {
  TK_Callback *obj = (TK_Callback *)objarg;
  SwigDirector_TK_Callback *director = dynamic_cast<SwigDirector_TK_Callback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Rendering_Options() {
  void * jresult ;
  TK_Rendering_Options *result = 0 ;
  
  result = (TK_Rendering_Options *)new SwigDirector_TK_Rendering_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Rendering_Options(void * jarg1) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_ReadSwigExplicitTK_Rendering_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Rendering_Options::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_WriteSwigExplicitTK_Rendering_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Rendering_Options::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Rendering_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_CloneSwigExplicitTK_Rendering_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Rendering_Options const *)arg1)->TK_Rendering_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_Reset(void * jarg1) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_ResetSwigExplicitTK_Rendering_Options(void * jarg1) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  (arg1)->TK_Rendering_Options::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetMask__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetMask(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetMask__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetMask(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetMask__SWIG_2(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetMask__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetMask(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetMask__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetValue__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetValue(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetValue__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetValue__SWIG_2(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetValue__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetValue__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHSR(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHSR(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetHSR(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetHSR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetTransparentHSR(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTransparentHSR(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetTransparentHSR(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetTransparentHSR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetTransparentStyle(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTransparentStyle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetTransparentStyle(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetTransparentStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetTechnology(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTechnology(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetTechnology(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetTechnology();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetQuantization(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetQuantization(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetQuantization(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetQuantization();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDebug(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDebug(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetDebug(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetDebug();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetFaceDisplacement(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFaceDisplacement(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetFaceDisplacement(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetFaceDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVertexDisplacement(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVertexDisplacement(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetVertexDisplacement(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetVertexDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetGeneralDisplacement(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeneralDisplacement(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetGeneralDisplacement(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetGeneralDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetJoinCutoffAngle(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetJoinCutoffAngle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetJoinCutoffAngle(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetJoinCutoffAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetFogLimits__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFogLimits(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetFogLimits__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetFogLimits((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetFogLimits(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetFogLimits();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVisibilityLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVisibilityLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetVisibilityLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetVisibilityLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVisibilityLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVisibilityLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetVisibilityLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetVisibilityLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorBackLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorBackLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorBackLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorBackLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorBackLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorBackLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorBackLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorBackLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextContrastLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextContrastLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextContrastLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextContrastLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextContrastLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextContrastLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextContrastLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextContrastLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVisibilityForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVisibilityForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetVisibilityForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetVisibilityForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVisibilityForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetVisibilityForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetVisibilityForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetVisibilityForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorFaceContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorFaceContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorFaceContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorFaceContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorWindowContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorWindowContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorWindowContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorWindowContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorBackForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorBackForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorBackForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorBackForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorBackForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorBackForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorBackForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorBackForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorEdgeContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorEdgeContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorEdgeContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorEdgeContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorLineContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorLineContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorLineContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorLineContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorMarkerContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorMarkerContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorMarkerContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorMarkerContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorVertexContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorVertexContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorVertexContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorVertexContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextContrastForcedLockMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextContrastForcedLockMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextContrastForcedLockMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextContrastForcedLockMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetColorTextContrastForcedLockValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColorTextContrastForcedLockValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetColorTextContrastForcedLockValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetColorTextContrastForcedLockValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetBufferOptionsMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBufferOptionsMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetBufferOptionsMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetBufferOptionsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetBufferOptionsValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBufferOptionsValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetBufferOptionsValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetBufferOptionsValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetBufferSizeLimit(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBufferSizeLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetBufferSizeLimit(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetBufferSizeLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetStereoSeparation(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStereoSeparation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetStereoSeparation(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetStereoSeparation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetStereoDistance(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStereoDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetStereoDistance(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetStereoDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHlrOptions(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHlrOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetHlrOptions(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetHlrOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHlrDimFactor(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHlrDimFactor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetHlrDimFactor(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetHlrDimFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHlrFaceDisplacement(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHlrFaceDisplacement(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetHlrFaceDisplacement(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetHlrFaceDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHlrLinePattern(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHlrLinePattern(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetHlrLinePattern(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetHlrLinePattern();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHlrFaceSortingAlgorithm(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHlrFaceSortingAlgorithm(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetHlrFaceSortingAlgorithm(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetHlrFaceSortingAlgorithm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSOptionsMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSOptionsMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSOptionsMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSOptionsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSOptionsValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSOptionsValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSOptionsValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSOptionsValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSCurveBudget(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSCurveBudget(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSCurveBudget(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSCurveBudget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSCurveContinuedBudget(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSCurveContinuedBudget(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSCurveContinuedBudget(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSCurveContinuedBudget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSSurfaceBudget(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSSurfaceBudget(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSSurfaceBudget(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSSurfaceBudget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetNURBSSurfaceTrimBudget(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNURBSSurfaceTrimBudget(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNURBSSurfaceTrimBudget(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNURBSSurfaceTrimBudget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodOptionsMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodOptionsMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodOptionsMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodOptionsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodOptionsValue(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodOptionsValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodOptionsValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodOptionsValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodAlgorithm(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodAlgorithm(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodAlgorithm(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodAlgorithm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodMinimumTriangleCount(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodMinimumTriangleCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodMinimumTriangleCount(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodMinimumTriangleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodNumLevels(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodNumLevels(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodNumLevels(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodNumLevels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodClamp(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodClamp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodClamp(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodClamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodMaxDegree(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodMaxDegree(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodMaxDegree(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodMaxDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodTolerance(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLodTolerance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodTolerance(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetLodTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodFallback(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodFallback(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodFallback(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodFallback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodBounding__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetLodBounding(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodBounding__SWIG_1(void * jarg1, float * jarg2, float * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetLodBounding((float const (*))arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodBounding__SWIG_2(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetLodBounding((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodBounding(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetLodBounding();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodRatio(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLodRatio(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodRatios__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetLodRatios(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodRatios__SWIG_1(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodRatios(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodNumRatios(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodNumRatios();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodRatios__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetLodRatios();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodThresholdType(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodThresholdType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodThresholdType(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodThresholdType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodThreshold(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLodThreshold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodThresholds__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetLodThresholds(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodThresholds__SWIG_1(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodThresholds(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodNumThresholds(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodNumThresholds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodThresholds__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetLodThresholds();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodCutoff(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLodCutoff(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodCutoffs__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetLodCutoffs(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetLodCutoffs__SWIG_1(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodCutoffs(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodNumCutoffs(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetLodNumCutoffs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetLodCutoffs__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetLodCutoffs();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetTessellationMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTessellationMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetTessellationMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetTessellationMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCylinderTessellation(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCylinderTessellation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCylinderTessellations__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetCylinderTessellations(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCylinderTessellations__SWIG_1(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCylinderTessellations(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNumCylinderTessellations(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNumCylinderTessellations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Rendering_Options_GetCylinderTessellations__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (char *)((TK_Rendering_Options const *)arg1)->GetCylinderTessellations();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSphereTessellation(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSphereTessellation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSphereTessellations__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetSphereTessellations(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSphereTessellations__SWIG_1(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSphereTessellations(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetNumSphereTessellations(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetNumSphereTessellations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Rendering_Options_GetSphereTessellations__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (char *)((TK_Rendering_Options const *)arg1)->GetSphereTessellations();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetGeometryOptionsMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometryOptionsMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetGeometryOptionsMask(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetGeometryOptionsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetHardEdgeAngle(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHardEdgeAngle(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetHardEdgeAngle(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetHardEdgeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetMaskTransform(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaskTransform(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetMaskTransform(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetMaskTransform();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCutGeometry(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCutGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetCutGeometry(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetCutGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCutGeometryLevel(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCutGeometryLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetCutGeometryLevel(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetCutGeometryLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCutGeometryColorMatch(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCutGeometryColorMatch(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetCutGeometryColorMatch(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetCutGeometryColorMatch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetCutGeometryTolerance(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCutGeometryTolerance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetCutGeometryTolerance(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetCutGeometryTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDisplayListLevel(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDisplayListLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetDisplayListLevel(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetDisplayListLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadow(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpleShadow(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadow(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetSimpleShadow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowBlur(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpleShadowBlur(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadowBlur(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetSimpleShadowBlur();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowResolution(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpleShadowResolution(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadowResolution(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetSimpleShadowResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowLight__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetSimpleShadowLight(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowLight__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetSimpleShadowLight((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_getSimpleShadowLight(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->getSimpleShadowLight();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowPlane__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetSimpleShadowPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowPlane__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetSimpleShadowPlane((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadowPlane(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetSimpleShadowPlane();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowColor__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetSimpleShadowColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowColor__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetSimpleShadowColor((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadowColor(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetSimpleShadowColor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleShadowOpacity(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSimpleShadowOpacity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleShadowOpacity(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetSimpleShadowOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetShadowMap(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowMap(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetShadowMap(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetShadowMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetShadowMapResolution(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowMapResolution(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetShadowMapResolution(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetShadowMapResolution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetShadowMapSamples(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowMapSamples(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetShadowMapSamples(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetShadowMapSamples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleReflection(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpleReflection(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleReflection(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetSimpleReflection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetSimpleReflectionPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleReflectionPlane__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetSimpleReflectionPlane((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleReflectionPlane(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetSimpleReflectionPlane();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleReflectionOpacity(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSimpleReflectionOpacity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleReflectionOpacity(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetSimpleReflectionOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetSimpleReflectionVisibilityMask(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpleReflectionVisibilityMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetSimpleReflectionVisibilityValue(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetSimpleReflectionVisibilityValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDepthRange__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDepthRange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDepthRange__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetDepthRange((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetDepthRange(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetDepthRange();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetScreenRange__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetScreenRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetScreenRange__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetScreenRange((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetScreenRange(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetScreenRange();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetAmbientUpVector__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetAmbientUpVector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetAmbientUpVector__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetAmbientUpVector((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetAmbientUpVector(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetAmbientUpVector();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetImageScale__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetImageScale(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetImageScale__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetImageScale((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetImageScale(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetImageScale();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetImageTintColor__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetImageTintColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetImageTintColor__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetImageTintColor((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetImageTintColor(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetImageTintColor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetDiffuseTextureTintColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetDiffuseTextureTintColor__SWIG_1(void * jarg1, float * jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetDiffuseTextureTintColor((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Rendering_Options_GetDiffuseTextureTintColor(void * jarg1) {
  float * jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float *)((TK_Rendering_Options const *)arg1)->GetDiffuseTextureTintColor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetAntiAlias(void * jarg1, int jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAntiAlias(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Rendering_Options_GetAntiAlias(void * jarg1) {
  int jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  int result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (int)((TK_Rendering_Options const *)arg1)->GetAntiAlias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_SetVertexDecimation(void * jarg1, float jarg2) {
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVertexDecimation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Rendering_Options_GetVertexDecimation(void * jarg1) {
  float jresult ;
  TK_Rendering_Options *arg1 = (TK_Rendering_Options *) 0 ;
  float result;
  
  arg1 = (TK_Rendering_Options *)jarg1; 
  result = (float)((TK_Rendering_Options const *)arg1)->GetVertexDecimation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Rendering_Options_director_connect(void *objarg, SwigDirector_TK_Rendering_Options::SWIG_Callback0_t callback0, SwigDirector_TK_Rendering_Options::SWIG_Callback1_t callback1, SwigDirector_TK_Rendering_Options::SWIG_Callback2_t callback2, SwigDirector_TK_Rendering_Options::SWIG_Callback3_t callback3, SwigDirector_TK_Rendering_Options::SWIG_Callback4_t callback4, SwigDirector_TK_Rendering_Options::SWIG_Callback5_t callback5, SwigDirector_TK_Rendering_Options::SWIG_Callback6_t callback6, SwigDirector_TK_Rendering_Options::SWIG_Callback7_t callback7, SwigDirector_TK_Rendering_Options::SWIG_Callback8_t callback8, SwigDirector_TK_Rendering_Options::SWIG_Callback9_t callback9) {
  TK_Rendering_Options *obj = (TK_Rendering_Options *)objarg;
  SwigDirector_TK_Rendering_Options *director = dynamic_cast<SwigDirector_TK_Rendering_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Heuristics() {
  void * jresult ;
  TK_Heuristics *result = 0 ;
  
  result = (TK_Heuristics *)new SwigDirector_TK_Heuristics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Heuristics(void * jarg1) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_ReadSwigExplicitTK_Heuristics(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Heuristics::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_WriteSwigExplicitTK_Heuristics(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Heuristics::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Heuristics const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_CloneSwigExplicitTK_Heuristics(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Heuristics const *)arg1)->TK_Heuristics::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetMask(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetMask(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetValue(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetValue(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetRelatedSelectionLimit(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRelatedSelectionLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetRelatedSelectionLimit(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetRelatedSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetInternalSelectionLimit(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInternalSelectionLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetInternalSelectionLimit(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetInternalSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetInternalShellSelectionLimit(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInternalShellSelectionLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetInternalShellSelectionLimit(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetInternalShellSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetInternalPolylineSelectionLimit(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInternalPolylineSelectionLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetInternalPolylineSelectionLimit(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetInternalPolylineSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetExtras(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetExtras(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetExtras(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetExtras();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetCulling(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCulling(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetCulling(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetCulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetSelectionCulling(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSelectionCulling(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetSelectionCulling(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetSelectionCulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetPixelThreshold(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPixelThreshold(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetPixelThreshold(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetPixelThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetMaximumExtent(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaximumExtent(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetMaximumExtent(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetMaximumExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetMaximumExtentMode(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetMaximumExtentMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetMaximumExtentMode(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaximumExtentMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetMaximumExtentLevel(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetMaximumExtentLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetMaximumExtentLevel(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaximumExtentLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetHardExtent(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHardExtent(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetHardExtent(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetHardExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Heuristics_GetVector(void * jarg1) {
  float * jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (float *)((TK_Heuristics const *)arg1)->GetVector();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetVector__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetVector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetVector__SWIG_1(void * jarg1, float * jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetVector((float const (*))arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Heuristics_GetVectorTolerance(void * jarg1) {
  float jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (float)((TK_Heuristics const *)arg1)->GetVectorTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetVectorTolerance(void * jarg1, float jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetVectorTolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetMaxDistance(void * jarg1, float jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMaxDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Heuristics_GetMaxDistance(void * jarg1) {
  float jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (float)((TK_Heuristics const *)arg1)->GetMaxDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Heuristics_GetViewVolume(void * jarg1) {
  float * jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (float *)((TK_Heuristics const *)arg1)->GetViewVolume();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetViewVolume__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetViewVolume(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetViewVolume__SWIG_1(void * jarg1, float * jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetViewVolume((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetOrderedWeightsMask(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOrderedWeightsMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetOrderedWeightsMask(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetOrderedWeightsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetOrderedWeight(void * jarg1, int jarg2, float jarg3) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetOrderedWeight(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Heuristics_GetOrderedWeight(void * jarg1, int jarg2) {
  float jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((TK_Heuristics const *)arg1)->GetOrderedWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Heuristics_GetOrderedWeights__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (float *)((TK_Heuristics const *)arg1)->GetOrderedWeights();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetSelectionLevel(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSelectionLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetSelectionLevel(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetSelectionLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_SetForceDefer(void * jarg1, int jarg2) {
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Heuristics *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetForceDefer(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Heuristics_GetForceDefer(void * jarg1) {
  int jresult ;
  TK_Heuristics *arg1 = (TK_Heuristics *) 0 ;
  int result;
  
  arg1 = (TK_Heuristics *)jarg1; 
  result = (int)((TK_Heuristics const *)arg1)->GetForceDefer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Heuristics_director_connect(void *objarg, SwigDirector_TK_Heuristics::SWIG_Callback0_t callback0, SwigDirector_TK_Heuristics::SWIG_Callback1_t callback1, SwigDirector_TK_Heuristics::SWIG_Callback2_t callback2, SwigDirector_TK_Heuristics::SWIG_Callback3_t callback3, SwigDirector_TK_Heuristics::SWIG_Callback4_t callback4, SwigDirector_TK_Heuristics::SWIG_Callback5_t callback5, SwigDirector_TK_Heuristics::SWIG_Callback6_t callback6, SwigDirector_TK_Heuristics::SWIG_Callback7_t callback7, SwigDirector_TK_Heuristics::SWIG_Callback8_t callback8, SwigDirector_TK_Heuristics::SWIG_Callback9_t callback9) {
  TK_Heuristics *obj = (TK_Heuristics *)objarg;
  SwigDirector_TK_Heuristics *director = dynamic_cast<SwigDirector_TK_Heuristics *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Geometry_Options() {
  void * jresult ;
  TK_Geometry_Options *result = 0 ;
  
  result = (TK_Geometry_Options *)new TK_Geometry_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Geometry_Options(void * jarg1) {
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Geometry_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Geometry_Options_SetMask(void * jarg1, int jarg2) {
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_GetMask(void * jarg1) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  int result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  result = (int)((TK_Geometry_Options const *)arg1)->GetMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Geometry_Options_SetOrientation(void * jarg1, int jarg2, float * jarg3) {
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetOrientation(arg2,(float const (*))arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Geometry_Options_GetOrientationCount(void * jarg1) {
  int jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  int result;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  result = (int)((TK_Geometry_Options const *)arg1)->GetOrientationCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Geometry_Options_GetOrientation(void * jarg1) {
  float * jresult ;
  TK_Geometry_Options *arg1 = (TK_Geometry_Options *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Geometry_Options *)jarg1; 
  result = (float *)((TK_Geometry_Options const *)arg1)->GetOrientation();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Visibility() {
  void * jresult ;
  TK_Visibility *result = 0 ;
  
  result = (TK_Visibility *)new SwigDirector_TK_Visibility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_ReadSwigExplicitTK_Visibility(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Visibility::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_WriteSwigExplicitTK_Visibility(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Visibility::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Visibility const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_CloneSwigExplicitTK_Visibility(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Visibility const *)arg1)->TK_Visibility::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Visibility_SetGeometry(void * jarg1, int jarg2) {
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  int result;
  
  arg1 = (TK_Visibility *)jarg1; 
  result = (int)((TK_Visibility const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Visibility_SetValue(void * jarg1, int jarg2) {
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Visibility *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Visibility_GetValue(void * jarg1) {
  int jresult ;
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  int result;
  
  arg1 = (TK_Visibility *)jarg1; 
  result = (int)((TK_Visibility const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Visibility(void * jarg1) {
  TK_Visibility *arg1 = (TK_Visibility *) 0 ;
  
  arg1 = (TK_Visibility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Visibility_director_connect(void *objarg, SwigDirector_TK_Visibility::SWIG_Callback0_t callback0, SwigDirector_TK_Visibility::SWIG_Callback1_t callback1, SwigDirector_TK_Visibility::SWIG_Callback2_t callback2, SwigDirector_TK_Visibility::SWIG_Callback3_t callback3, SwigDirector_TK_Visibility::SWIG_Callback4_t callback4, SwigDirector_TK_Visibility::SWIG_Callback5_t callback5, SwigDirector_TK_Visibility::SWIG_Callback6_t callback6, SwigDirector_TK_Visibility::SWIG_Callback7_t callback7, SwigDirector_TK_Visibility::SWIG_Callback8_t callback8, SwigDirector_TK_Visibility::SWIG_Callback9_t callback9) {
  TK_Visibility *obj = (TK_Visibility *)objarg;
  SwigDirector_TK_Visibility *director = dynamic_cast<SwigDirector_TK_Visibility *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Selectability() {
  void * jresult ;
  TK_Selectability *result = 0 ;
  
  result = (TK_Selectability *)new SwigDirector_TK_Selectability();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_ReadSwigExplicitTK_Selectability(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Selectability::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_WriteSwigExplicitTK_Selectability(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Selectability::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Selectability const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_CloneSwigExplicitTK_Selectability(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Selectability const *)arg1)->TK_Selectability::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetGeometry(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetGeometry(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetDown(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDown(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetDown(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetUp(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetUp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetUp(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetMoveDown(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMoveDown(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetMoveDown(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetMoveDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetMoveUp(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMoveUp(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetMoveUp(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetMoveUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_SetWhenInvisible(void * jarg1, int jarg2) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetWhenInvisible(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Selectability_GetWhenInvisible(void * jarg1) {
  int jresult ;
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  int result;
  
  arg1 = (TK_Selectability *)jarg1; 
  result = (int)((TK_Selectability const *)arg1)->GetWhenInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Selectability(void * jarg1) {
  TK_Selectability *arg1 = (TK_Selectability *) 0 ;
  
  arg1 = (TK_Selectability *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Selectability_director_connect(void *objarg, SwigDirector_TK_Selectability::SWIG_Callback0_t callback0, SwigDirector_TK_Selectability::SWIG_Callback1_t callback1, SwigDirector_TK_Selectability::SWIG_Callback2_t callback2, SwigDirector_TK_Selectability::SWIG_Callback3_t callback3, SwigDirector_TK_Selectability::SWIG_Callback4_t callback4, SwigDirector_TK_Selectability::SWIG_Callback5_t callback5, SwigDirector_TK_Selectability::SWIG_Callback6_t callback6, SwigDirector_TK_Selectability::SWIG_Callback7_t callback7, SwigDirector_TK_Selectability::SWIG_Callback8_t callback8, SwigDirector_TK_Selectability::SWIG_Callback9_t callback9) {
  TK_Selectability *obj = (TK_Selectability *)objarg;
  SwigDirector_TK_Selectability *director = dynamic_cast<SwigDirector_TK_Selectability *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Matrix(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Matrix *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Matrix *)new SwigDirector_TK_Matrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_ReadSwigExplicitTK_Matrix(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Matrix::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_WriteSwigExplicitTK_Matrix(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Matrix::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Matrix const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_CloneSwigExplicitTK_Matrix(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Matrix const *)arg1)->TK_Matrix::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Matrix_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Matrix_SetMatrix(void * jarg1, float * jarg2) {
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetMatrix((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Matrix_SetDMatrix(void * jarg1, double * jarg2) {
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Matrix *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDMatrix((double const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Matrix_GetMatrix__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Matrix *)jarg1; 
  result = (float *)((TK_Matrix const *)arg1)->GetMatrix();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Matrix_GetDMatrix__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Matrix *)jarg1; 
  result = (double *)((TK_Matrix const *)arg1)->GetDMatrix();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Matrix(void * jarg1) {
  TK_Matrix *arg1 = (TK_Matrix *) 0 ;
  
  arg1 = (TK_Matrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Matrix_director_connect(void *objarg, SwigDirector_TK_Matrix::SWIG_Callback0_t callback0, SwigDirector_TK_Matrix::SWIG_Callback1_t callback1, SwigDirector_TK_Matrix::SWIG_Callback2_t callback2, SwigDirector_TK_Matrix::SWIG_Callback3_t callback3, SwigDirector_TK_Matrix::SWIG_Callback4_t callback4, SwigDirector_TK_Matrix::SWIG_Callback5_t callback5, SwigDirector_TK_Matrix::SWIG_Callback6_t callback6, SwigDirector_TK_Matrix::SWIG_Callback7_t callback7, SwigDirector_TK_Matrix::SWIG_Callback8_t callback8, SwigDirector_TK_Matrix::SWIG_Callback9_t callback9) {
  TK_Matrix *obj = (TK_Matrix *)objarg;
  SwigDirector_TK_Matrix *director = dynamic_cast<SwigDirector_TK_Matrix *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Enumerated(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Enumerated *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Enumerated *)new SwigDirector_TK_Enumerated(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_ReadSwigExplicitTK_Enumerated(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Enumerated::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_WriteSwigExplicitTK_Enumerated(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Enumerated::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Enumerated const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_CloneSwigExplicitTK_Enumerated(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Enumerated const *)arg1)->TK_Enumerated::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Enumerated_SetIndex(void * jarg1, int jarg2) {
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Enumerated *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Enumerated_GetIndex(void * jarg1) {
  int jresult ;
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  int result;
  
  arg1 = (TK_Enumerated *)jarg1; 
  result = (int)((TK_Enumerated const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Enumerated(void * jarg1) {
  TK_Enumerated *arg1 = (TK_Enumerated *) 0 ;
  
  arg1 = (TK_Enumerated *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Enumerated_director_connect(void *objarg, SwigDirector_TK_Enumerated::SWIG_Callback0_t callback0, SwigDirector_TK_Enumerated::SWIG_Callback1_t callback1, SwigDirector_TK_Enumerated::SWIG_Callback2_t callback2, SwigDirector_TK_Enumerated::SWIG_Callback3_t callback3, SwigDirector_TK_Enumerated::SWIG_Callback4_t callback4, SwigDirector_TK_Enumerated::SWIG_Callback5_t callback5, SwigDirector_TK_Enumerated::SWIG_Callback6_t callback6, SwigDirector_TK_Enumerated::SWIG_Callback7_t callback7, SwigDirector_TK_Enumerated::SWIG_Callback8_t callback8, SwigDirector_TK_Enumerated::SWIG_Callback9_t callback9) {
  TK_Enumerated *obj = (TK_Enumerated *)objarg;
  SwigDirector_TK_Enumerated *director = dynamic_cast<SwigDirector_TK_Enumerated *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Size(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Size *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Size *)new SwigDirector_TK_Size(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_ReadSwigExplicitTK_Size(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Size::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_WriteSwigExplicitTK_Size(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Size::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Size const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_CloneSwigExplicitTK_Size(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Size const *)arg1)->TK_Size::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Size_SetSize__SWIG_0(void * jarg1, float jarg2, int jarg3) {
  TK_Size *arg1 = (TK_Size *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Size_SetSize__SWIG_1(void * jarg1, float jarg2) {
  TK_Size *arg1 = (TK_Size *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Size *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Size_GetSize(void * jarg1) {
  float jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  float result;
  
  arg1 = (TK_Size *)jarg1; 
  result = (float)((TK_Size const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Size_GetUnits(void * jarg1) {
  int jresult ;
  TK_Size *arg1 = (TK_Size *) 0 ;
  int result;
  
  arg1 = (TK_Size *)jarg1; 
  result = (int)((TK_Size const *)arg1)->GetUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Size(void * jarg1) {
  TK_Size *arg1 = (TK_Size *) 0 ;
  
  arg1 = (TK_Size *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Size_director_connect(void *objarg, SwigDirector_TK_Size::SWIG_Callback0_t callback0, SwigDirector_TK_Size::SWIG_Callback1_t callback1, SwigDirector_TK_Size::SWIG_Callback2_t callback2, SwigDirector_TK_Size::SWIG_Callback3_t callback3, SwigDirector_TK_Size::SWIG_Callback4_t callback4, SwigDirector_TK_Size::SWIG_Callback5_t callback5, SwigDirector_TK_Size::SWIG_Callback6_t callback6, SwigDirector_TK_Size::SWIG_Callback7_t callback7, SwigDirector_TK_Size::SWIG_Callback8_t callback8, SwigDirector_TK_Size::SWIG_Callback9_t callback9) {
  TK_Size *obj = (TK_Size *)objarg;
  SwigDirector_TK_Size *director = dynamic_cast<SwigDirector_TK_Size *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Linear_Pattern(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Linear_Pattern *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Linear_Pattern *)new SwigDirector_TK_Linear_Pattern(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_ReadSwigExplicitTK_Linear_Pattern(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Linear_Pattern::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_WriteSwigExplicitTK_Linear_Pattern(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Linear_Pattern::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Linear_Pattern const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_CloneSwigExplicitTK_Linear_Pattern(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Linear_Pattern const *)arg1)->TK_Linear_Pattern::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Linear_Pattern_SetPattern(void * jarg1, int jarg2) {
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPattern(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Linear_Pattern_GetPattern(void * jarg1) {
  int jresult ;
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  int result;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  result = (int)((TK_Linear_Pattern const *)arg1)->GetPattern();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Linear_Pattern(void * jarg1) {
  TK_Linear_Pattern *arg1 = (TK_Linear_Pattern *) 0 ;
  
  arg1 = (TK_Linear_Pattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Linear_Pattern_director_connect(void *objarg, SwigDirector_TK_Linear_Pattern::SWIG_Callback0_t callback0, SwigDirector_TK_Linear_Pattern::SWIG_Callback1_t callback1, SwigDirector_TK_Linear_Pattern::SWIG_Callback2_t callback2, SwigDirector_TK_Linear_Pattern::SWIG_Callback3_t callback3, SwigDirector_TK_Linear_Pattern::SWIG_Callback4_t callback4, SwigDirector_TK_Linear_Pattern::SWIG_Callback5_t callback5, SwigDirector_TK_Linear_Pattern::SWIG_Callback6_t callback6, SwigDirector_TK_Linear_Pattern::SWIG_Callback7_t callback7, SwigDirector_TK_Linear_Pattern::SWIG_Callback8_t callback8, SwigDirector_TK_Linear_Pattern::SWIG_Callback9_t callback9) {
  TK_Linear_Pattern *obj = (TK_Linear_Pattern *)objarg;
  SwigDirector_TK_Linear_Pattern *director = dynamic_cast<SwigDirector_TK_Linear_Pattern *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Named(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Named *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Named *)new SwigDirector_TK_Named(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Named(void * jarg1) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  
  arg1 = (TK_Named *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_ReadSwigExplicitTK_Named(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Named::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_WriteSwigExplicitTK_Named(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Named::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Named const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_CloneSwigExplicitTK_Named(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Named const *)arg1)->TK_Named::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Reset(void * jarg1) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  
  arg1 = (TK_Named *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_ResetSwigExplicitTK_Named(void * jarg1) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  
  arg1 = (TK_Named *)jarg1; 
  (arg1)->TK_Named::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Named_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Named *)jarg1; 
  result = (char *)((TK_Named const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_SetIndex(void * jarg1, int jarg2) {
  TK_Named *arg1 = (TK_Named *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Named *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_GetIndex(void * jarg1) {
  int jresult ;
  TK_Named *arg1 = (TK_Named *) 0 ;
  int result;
  
  arg1 = (TK_Named *)jarg1; 
  result = (int)((TK_Named const *)arg1)->GetIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_director_connect(void *objarg, SwigDirector_TK_Named::SWIG_Callback0_t callback0, SwigDirector_TK_Named::SWIG_Callback1_t callback1, SwigDirector_TK_Named::SWIG_Callback2_t callback2, SwigDirector_TK_Named::SWIG_Callback3_t callback3, SwigDirector_TK_Named::SWIG_Callback4_t callback4, SwigDirector_TK_Named::SWIG_Callback5_t callback5, SwigDirector_TK_Named::SWIG_Callback6_t callback6, SwigDirector_TK_Named::SWIG_Callback7_t callback7, SwigDirector_TK_Named::SWIG_Callback8_t callback8, SwigDirector_TK_Named::SWIG_Callback9_t callback9) {
  TK_Named *obj = (TK_Named *)objarg;
  SwigDirector_TK_Named *director = dynamic_cast<SwigDirector_TK_Named *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Streaming() {
  void * jresult ;
  TK_Streaming *result = 0 ;
  
  result = (TK_Streaming *)new SwigDirector_TK_Streaming();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_ReadSwigExplicitTK_Streaming(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Streaming::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_WriteSwigExplicitTK_Streaming(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Streaming::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Streaming const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_CloneSwigExplicitTK_Streaming(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Streaming const *)arg1)->TK_Streaming::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Streaming_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Streaming_SetStreaming(void * jarg1, unsigned int jarg2) {
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  bool arg2 ;
  
  arg1 = (TK_Streaming *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetStreaming(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Streaming_GetStreaming(void * jarg1) {
  unsigned int jresult ;
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  bool result;
  
  arg1 = (TK_Streaming *)jarg1; 
  result = (bool)((TK_Streaming const *)arg1)->GetStreaming();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Streaming(void * jarg1) {
  TK_Streaming *arg1 = (TK_Streaming *) 0 ;
  
  arg1 = (TK_Streaming *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Streaming_director_connect(void *objarg, SwigDirector_TK_Streaming::SWIG_Callback0_t callback0, SwigDirector_TK_Streaming::SWIG_Callback1_t callback1, SwigDirector_TK_Streaming::SWIG_Callback2_t callback2, SwigDirector_TK_Streaming::SWIG_Callback3_t callback3, SwigDirector_TK_Streaming::SWIG_Callback4_t callback4, SwigDirector_TK_Streaming::SWIG_Callback5_t callback5, SwigDirector_TK_Streaming::SWIG_Callback6_t callback6, SwigDirector_TK_Streaming::SWIG_Callback7_t callback7, SwigDirector_TK_Streaming::SWIG_Callback8_t callback8, SwigDirector_TK_Streaming::SWIG_Callback9_t callback9) {
  TK_Streaming *obj = (TK_Streaming *)objarg;
  SwigDirector_TK_Streaming *director = dynamic_cast<SwigDirector_TK_Streaming *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Conditions() {
  void * jresult ;
  TK_Conditions *result = 0 ;
  
  result = (TK_Conditions *)new SwigDirector_TK_Conditions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Conditions(void * jarg1) {
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_ReadSwigExplicitTK_Conditions(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Conditions::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_WriteSwigExplicitTK_Conditions(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Conditions::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Conditions const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_CloneSwigExplicitTK_Conditions(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Conditions const *)arg1)->TK_Conditions::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditions_Reset(void * jarg1) {
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditions_ResetSwigExplicitTK_Conditions(void * jarg1) {
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  (arg1)->TK_Conditions::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditions_SetConditions__SWIG_0(void * jarg1, char * jarg2) {
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetConditions((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditions_SetConditions__SWIG_1(void * jarg1, int jarg2) {
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetConditions(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Conditions_GetConditions__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Conditions *)jarg1; 
  result = (char *)((TK_Conditions const *)arg1)->GetConditions();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditions_GetLength(void * jarg1) {
  int jresult ;
  TK_Conditions *arg1 = (TK_Conditions *) 0 ;
  int result;
  
  arg1 = (TK_Conditions *)jarg1; 
  result = (int)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditions_director_connect(void *objarg, SwigDirector_TK_Conditions::SWIG_Callback0_t callback0, SwigDirector_TK_Conditions::SWIG_Callback1_t callback1, SwigDirector_TK_Conditions::SWIG_Callback2_t callback2, SwigDirector_TK_Conditions::SWIG_Callback3_t callback3, SwigDirector_TK_Conditions::SWIG_Callback4_t callback4, SwigDirector_TK_Conditions::SWIG_Callback5_t callback5, SwigDirector_TK_Conditions::SWIG_Callback6_t callback6, SwigDirector_TK_Conditions::SWIG_Callback7_t callback7, SwigDirector_TK_Conditions::SWIG_Callback8_t callback8, SwigDirector_TK_Conditions::SWIG_Callback9_t callback9) {
  TK_Conditions *obj = (TK_Conditions *)objarg;
  SwigDirector_TK_Conditions *director = dynamic_cast<SwigDirector_TK_Conditions *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Conditional_Action() {
  void * jresult ;
  TK_Conditional_Action *result = 0 ;
  
  result = (TK_Conditional_Action *)new TK_Conditional_Action();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Conditional_Action(void * jarg1) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Conditional_Action const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditional_Action_Reset(void * jarg1) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditional_Action_SetCondition__SWIG_0(void * jarg1, char * jarg2) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCondition((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditional_Action_SetCondition__SWIG_1(void * jarg1, int jarg2) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCondition(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Conditional_Action_GetCondition__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  result = (char *)((TK_Conditional_Action const *)arg1)->GetCondition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_GetLength(void * jarg1) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  result = (int)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditional_Action_SetAction(void * jarg1, int jarg2) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAction(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_GetAction(void * jarg1) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  result = (int)((TK_Conditional_Action const *)arg1)->GetAction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Conditional_Action_SetOptions(void * jarg1, int jarg2) {
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Conditional_Action_GetOptions(void * jarg1) {
  int jresult ;
  TK_Conditional_Action *arg1 = (TK_Conditional_Action *) 0 ;
  int result;
  
  arg1 = (TK_Conditional_Action *)jarg1; 
  result = (int)((TK_Conditional_Action const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_User_Options() {
  void * jresult ;
  TK_User_Options *result = 0 ;
  
  result = (TK_User_Options *)new SwigDirector_TK_User_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_User_Options(void * jarg1) {
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_ReadSwigExplicitTK_User_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Options::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_WriteSwigExplicitTK_User_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Options::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_CloneSwigExplicitTK_User_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Options const *)arg1)->TK_User_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Options_Reset(void * jarg1) {
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Options_ResetSwigExplicitTK_User_Options(void * jarg1) {
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  (arg1)->TK_User_Options::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Options_SetOptions__SWIG_0(void * jarg1, char * jarg2) {
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetOptions((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Options_SetOptions__SWIG_1(void * jarg1, int jarg2) {
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_User_Options_GetOptions__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_User_Options *)jarg1; 
  result = (char *)((TK_User_Options const *)arg1)->GetOptions();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Options_GetLength(void * jarg1) {
  int jresult ;
  TK_User_Options *arg1 = (TK_User_Options *) 0 ;
  int result;
  
  arg1 = (TK_User_Options *)jarg1; 
  result = (int)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Options_director_connect(void *objarg, SwigDirector_TK_User_Options::SWIG_Callback0_t callback0, SwigDirector_TK_User_Options::SWIG_Callback1_t callback1, SwigDirector_TK_User_Options::SWIG_Callback2_t callback2, SwigDirector_TK_User_Options::SWIG_Callback3_t callback3, SwigDirector_TK_User_Options::SWIG_Callback4_t callback4, SwigDirector_TK_User_Options::SWIG_Callback5_t callback5, SwigDirector_TK_User_Options::SWIG_Callback6_t callback6, SwigDirector_TK_User_Options::SWIG_Callback7_t callback7, SwigDirector_TK_User_Options::SWIG_Callback8_t callback8, SwigDirector_TK_User_Options::SWIG_Callback9_t callback9) {
  TK_User_Options *obj = (TK_User_Options *)objarg;
  SwigDirector_TK_User_Options *director = dynamic_cast<SwigDirector_TK_User_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Unicode_Options() {
  void * jresult ;
  TK_Unicode_Options *result = 0 ;
  
  result = (TK_Unicode_Options *)new SwigDirector_TK_Unicode_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Unicode_Options(void * jarg1) {
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_ReadSwigExplicitTK_Unicode_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Unicode_Options::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_WriteSwigExplicitTK_Unicode_Options(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Unicode_Options::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Unicode_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_CloneSwigExplicitTK_Unicode_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Unicode_Options const *)arg1)->TK_Unicode_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unicode_Options_Reset(void * jarg1) {
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unicode_Options_ResetSwigExplicitTK_Unicode_Options(void * jarg1) {
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  (arg1)->TK_Unicode_Options::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unicode_Options_SetOptions__SWIG_0(void * jarg1, unsigned short * jarg2) {
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  (arg1)->SetOptions((unsigned short const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unicode_Options_SetOptions__SWIG_1(void * jarg1, int jarg2) {
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT unsigned short * SWIGSTDCALL CSharp_TK_Unicode_Options_GetOptions__SWIG_0(void * jarg1) {
  unsigned short * jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  result = (unsigned short *)((TK_Unicode_Options const *)arg1)->GetOptions();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Unicode_Options_GetLength(void * jarg1) {
  int jresult ;
  TK_Unicode_Options *arg1 = (TK_Unicode_Options *) 0 ;
  int result;
  
  arg1 = (TK_Unicode_Options *)jarg1; 
  result = (int)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Unicode_Options_director_connect(void *objarg, SwigDirector_TK_Unicode_Options::SWIG_Callback0_t callback0, SwigDirector_TK_Unicode_Options::SWIG_Callback1_t callback1, SwigDirector_TK_Unicode_Options::SWIG_Callback2_t callback2, SwigDirector_TK_Unicode_Options::SWIG_Callback3_t callback3, SwigDirector_TK_Unicode_Options::SWIG_Callback4_t callback4, SwigDirector_TK_Unicode_Options::SWIG_Callback5_t callback5, SwigDirector_TK_Unicode_Options::SWIG_Callback6_t callback6, SwigDirector_TK_Unicode_Options::SWIG_Callback7_t callback7, SwigDirector_TK_Unicode_Options::SWIG_Callback8_t callback8, SwigDirector_TK_Unicode_Options::SWIG_Callback9_t callback9) {
  TK_Unicode_Options *obj = (TK_Unicode_Options *)objarg;
  SwigDirector_TK_Unicode_Options *director = dynamic_cast<SwigDirector_TK_Unicode_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_User_Index() {
  void * jresult ;
  TK_User_Index *result = 0 ;
  
  result = (TK_User_Index *)new SwigDirector_TK_User_Index();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_User_Index(void * jarg1) {
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_ReadSwigExplicitTK_User_Index(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Index::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_WriteSwigExplicitTK_User_Index(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Index::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Index const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_CloneSwigExplicitTK_User_Index(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Index const *)arg1)->TK_User_Index::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_Reset(void * jarg1) {
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_ResetSwigExplicitTK_User_Index(void * jarg1) {
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  (arg1)->TK_User_Index::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_SetIndices__SWIG_0(void * jarg1, int jarg2, int * jarg3, long * jarg4) {
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  int arg2 ;
  int *arg3 ;
  long *arg4 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (long *)jarg4; 
  (arg1)->SetIndices(arg2,(int const (*))arg3,(long const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_SetIndices__SWIG_1(void * jarg1, int jarg2) {
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndices(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_GetCount(void * jarg1) {
  int jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  int result;
  
  arg1 = (TK_User_Index *)jarg1; 
  result = (int)((TK_User_Index const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_User_Index_GetIndices__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  result = (int *)((TK_User_Index const *)arg1)->GetIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT long * SWIGSTDCALL CSharp_TK_User_Index_GetValues__SWIG_0(void * jarg1) {
  long * jresult ;
  TK_User_Index *arg1 = (TK_User_Index *) 0 ;
  long *result = 0 ;
  
  arg1 = (TK_User_Index *)jarg1; 
  result = (long *)((TK_User_Index const *)arg1)->GetValues();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_director_connect(void *objarg, SwigDirector_TK_User_Index::SWIG_Callback0_t callback0, SwigDirector_TK_User_Index::SWIG_Callback1_t callback1, SwigDirector_TK_User_Index::SWIG_Callback2_t callback2, SwigDirector_TK_User_Index::SWIG_Callback3_t callback3, SwigDirector_TK_User_Index::SWIG_Callback4_t callback4, SwigDirector_TK_User_Index::SWIG_Callback5_t callback5, SwigDirector_TK_User_Index::SWIG_Callback6_t callback6, SwigDirector_TK_User_Index::SWIG_Callback7_t callback7, SwigDirector_TK_User_Index::SWIG_Callback8_t callback8, SwigDirector_TK_User_Index::SWIG_Callback9_t callback9) {
  TK_User_Index *obj = (TK_User_Index *)objarg;
  SwigDirector_TK_User_Index *director = dynamic_cast<SwigDirector_TK_User_Index *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_User_Index_Data() {
  void * jresult ;
  TK_User_Index_Data *result = 0 ;
  
  result = (TK_User_Index_Data *)new TK_User_Index_Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_User_Index_Data(void * jarg1) {
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Data_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Data_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Data_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Index_Data const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_Data_Reset(void * jarg1) {
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_Data_SetIndices__SWIG_0(void * jarg1, int jarg2, int * jarg3, void * jarg4, int * jarg5) {
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  int arg2 ;
  int *arg3 ;
  void **arg4 ;
  int *arg5 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (void **)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->SetIndices(arg2,(int const (*))arg3,(void const *(*))arg4,(int const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Index_Data_SetIndices__SWIG_1(void * jarg1, int jarg2) {
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIndices(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Index_Data_GetCount(void * jarg1) {
  int jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  int result;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  result = (int)((TK_User_Index_Data const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_User_Index_Data_GetIndices__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  result = (int *)((TK_User_Index_Data const *)arg1)->GetIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_User_Index_Data_GetValues__SWIG_0(void * jarg1) {
  void * jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  void **result = 0 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  result = (void **)((TK_User_Index_Data const *)arg1)->GetValues();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_User_Index_Data_GetSizes__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_User_Index_Data *arg1 = (TK_User_Index_Data *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_User_Index_Data *)jarg1; 
  result = (int *)((TK_User_Index_Data const *)arg1)->GetSizes();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_User_Value() {
  void * jresult ;
  TK_User_Value *result = 0 ;
  
  result = (TK_User_Value *)new SwigDirector_TK_User_Value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_ReadSwigExplicitTK_User_Value(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Value::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_WriteSwigExplicitTK_User_Value(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Value::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Value const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_CloneSwigExplicitTK_User_Value(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Value const *)arg1)->TK_User_Value::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Value_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Value_SetValue(void * jarg1, ID_Key jarg2) {
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  long arg2 ;
  
  arg1 = (TK_User_Value *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_TK_User_Value_GetValue(void * jarg1) {
  ID_Key jresult ;
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  long result;
  
  arg1 = (TK_User_Value *)jarg1; 
  result = (long)((TK_User_Value const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_User_Value(void * jarg1) {
  TK_User_Value *arg1 = (TK_User_Value *) 0 ;
  
  arg1 = (TK_User_Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Value_director_connect(void *objarg, SwigDirector_TK_User_Value::SWIG_Callback0_t callback0, SwigDirector_TK_User_Value::SWIG_Callback1_t callback1, SwigDirector_TK_User_Value::SWIG_Callback2_t callback2, SwigDirector_TK_User_Value::SWIG_Callback3_t callback3, SwigDirector_TK_User_Value::SWIG_Callback4_t callback4, SwigDirector_TK_User_Value::SWIG_Callback5_t callback5, SwigDirector_TK_User_Value::SWIG_Callback6_t callback6, SwigDirector_TK_User_Value::SWIG_Callback7_t callback7, SwigDirector_TK_User_Value::SWIG_Callback8_t callback8, SwigDirector_TK_User_Value::SWIG_Callback9_t callback9) {
  TK_User_Value *obj = (TK_User_Value *)objarg;
  SwigDirector_TK_User_Value *director = dynamic_cast<SwigDirector_TK_User_Value *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Camera__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Camera *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Camera *)new SwigDirector_TK_Camera(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Camera__SWIG_1() {
  void * jresult ;
  TK_Camera *result = 0 ;
  
  result = (TK_Camera *)new SwigDirector_TK_Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Camera(void * jarg1) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_ReadSwigExplicitTK_Camera(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Camera::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_WriteSwigExplicitTK_Camera(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Camera::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Camera const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_CloneSwigExplicitTK_Camera(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Camera const *)arg1)->TK_Camera::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetPosition__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetPosition__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPosition((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Camera_GetPosition__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float *)((TK_Camera const *)arg1)->GetPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetPosition__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  ((TK_Camera const *)arg1)->GetPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDPosition__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPosition((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Camera_GetDPosition__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (double *)((TK_Camera const *)arg1)->GetDPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetDPosition__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  ((TK_Camera const *)arg1)->GetDPosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetTarget__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetTarget__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetTarget((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Camera_GetTarget__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float *)((TK_Camera const *)arg1)->GetTarget();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetTarget__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  ((TK_Camera const *)arg1)->GetTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDTarget__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDTarget__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDTarget((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Camera_GetDTarget__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (double *)((TK_Camera const *)arg1)->GetDTarget();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetDTarget__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  ((TK_Camera const *)arg1)->GetDTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetUpVector__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetUpVector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetUpVector__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetUpVector((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Camera_GetUpVector__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float *)((TK_Camera const *)arg1)->GetUpVector();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetUpVector__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  ((TK_Camera const *)arg1)->GetUpVector(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDUpVector__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDUpVector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDUpVector__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDUpVector((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Camera_GetDUpVector__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (double *)((TK_Camera const *)arg1)->GetDUpVector();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetDUpVector__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  ((TK_Camera const *)arg1)->GetDUpVector(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetField__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetField(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetField__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetField((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Camera_GetField__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float *)((TK_Camera const *)arg1)->GetField();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetField__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  ((TK_Camera const *)arg1)->GetField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDField__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetDField(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetDField__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDField((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Camera_GetDField__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (double *)((TK_Camera const *)arg1)->GetDField();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetDField__SWIG_1(void * jarg1, double * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (double *)jarg2; 
  ((TK_Camera const *)arg1)->GetDField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetOblique__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetOblique(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetOblique__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetOblique((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Camera_GetOblique__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float *)((TK_Camera const *)arg1)->GetOblique();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_GetOblique__SWIG_1(void * jarg1, float * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float *)jarg2; 
  ((TK_Camera const *)arg1)->GetOblique(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetNearLimit(void * jarg1, float jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetNearLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Camera_GetNearLimit(void * jarg1) {
  float jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  float result;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (float)((TK_Camera const *)arg1)->GetNearLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetProjection(void * jarg1, int jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetProjection(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Camera_GetProjection(void * jarg1) {
  int jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  int result;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (int)((TK_Camera const *)arg1)->GetProjection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetView__SWIG_0(void * jarg1, char * jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetView((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_SetView__SWIG_1(void * jarg1, int jarg2) {
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Camera *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetView(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Camera_GetView__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Camera *arg1 = (TK_Camera *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Camera *)jarg1; 
  result = (char *)((TK_Camera const *)arg1)->GetView();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Camera_director_connect(void *objarg, SwigDirector_TK_Camera::SWIG_Callback0_t callback0, SwigDirector_TK_Camera::SWIG_Callback1_t callback1, SwigDirector_TK_Camera::SWIG_Callback2_t callback2, SwigDirector_TK_Camera::SWIG_Callback3_t callback3, SwigDirector_TK_Camera::SWIG_Callback4_t callback4, SwigDirector_TK_Camera::SWIG_Callback5_t callback5, SwigDirector_TK_Camera::SWIG_Callback6_t callback6, SwigDirector_TK_Camera::SWIG_Callback7_t callback7, SwigDirector_TK_Camera::SWIG_Callback8_t callback8, SwigDirector_TK_Camera::SWIG_Callback9_t callback9) {
  TK_Camera *obj = (TK_Camera *)objarg;
  SwigDirector_TK_Camera *director = dynamic_cast<SwigDirector_TK_Camera *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Window() {
  void * jresult ;
  TK_Window *result = 0 ;
  
  result = (TK_Window *)new SwigDirector_TK_Window();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_ReadSwigExplicitTK_Window(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Window::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_WriteSwigExplicitTK_Window(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Window::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Window const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_CloneSwigExplicitTK_Window(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Window const *)arg1)->TK_Window::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Window_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Window_SetWindow__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Window *arg1 = (TK_Window *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetWindow(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Window_SetWindow__SWIG_1(void * jarg1, float * jarg2) {
  TK_Window *arg1 = (TK_Window *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Window *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetWindow((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Window_GetWindow(void * jarg1) {
  float * jresult ;
  TK_Window *arg1 = (TK_Window *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Window *)jarg1; 
  result = (float *)((TK_Window const *)arg1)->GetWindow();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Window(void * jarg1) {
  TK_Window *arg1 = (TK_Window *) 0 ;
  
  arg1 = (TK_Window *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Window_director_connect(void *objarg, SwigDirector_TK_Window::SWIG_Callback0_t callback0, SwigDirector_TK_Window::SWIG_Callback1_t callback1, SwigDirector_TK_Window::SWIG_Callback2_t callback2, SwigDirector_TK_Window::SWIG_Callback3_t callback3, SwigDirector_TK_Window::SWIG_Callback4_t callback4, SwigDirector_TK_Window::SWIG_Callback5_t callback5, SwigDirector_TK_Window::SWIG_Callback6_t callback6, SwigDirector_TK_Window::SWIG_Callback7_t callback7, SwigDirector_TK_Window::SWIG_Callback8_t callback8, SwigDirector_TK_Window::SWIG_Callback9_t callback9) {
  TK_Window *obj = (TK_Window *)objarg;
  SwigDirector_TK_Window *director = dynamic_cast<SwigDirector_TK_Window *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Text_Font() {
  void * jresult ;
  TK_Text_Font *result = 0 ;
  
  result = (TK_Text_Font *)new SwigDirector_TK_Text_Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Text_Font(void * jarg1) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_ReadSwigExplicitTK_Text_Font(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Text_Font::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_WriteSwigExplicitTK_Text_Font(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Text_Font::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Text_Font const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_CloneSwigExplicitTK_Text_Font(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Text_Font const *)arg1)->TK_Text_Font::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_Reset(void * jarg1) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_ResetSwigExplicitTK_Text_Font(void * jarg1) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  (arg1)->TK_Text_Font::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetMask(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetMask(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetValue(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetValue(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetValue(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetNames__SWIG_0(void * jarg1, char * jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetNames((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetNames__SWIG_1(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNames(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Text_Font_GetNames__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (char *)((TK_Text_Font const *)arg1)->GetNames();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetSize(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetSize(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetSizeUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSizeUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetSizeUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetSizeUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetTolerance(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTolerance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetTolerance(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetToleranceUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetToleranceUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetToleranceUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetToleranceUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetRotation(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRotation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetRotation(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetSlant(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSlant(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetSlant(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetSlant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetWidthScale(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetWidthScale(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetWidthScale(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetWidthScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetExtraSpace(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetExtraSpace(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetExtraSpace(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetExtraSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetExtraSpaceUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetExtraSpaceUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetExtraSpaceUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetExtraSpaceUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetLineSpacing(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLineSpacing(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetLineSpacing(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetLineSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetTransforms(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTransforms(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetTransforms(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetTransforms();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetGreekingLimit(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGreekingLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetGreekingLimit(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetGreekingLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetGreekingLimitUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGreekingLimitUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetGreekingLimitUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetGreekingLimitUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetGreekingMode(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGreekingMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetGreekingMode(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetGreekingMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetRenderer(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRenderer(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetRenderer(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetRenderer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetRenderers(void * jarg1, int jarg2, int jarg3) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetRenderers(arg2,arg3);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Text_Font_GetRenderers(void * jarg1) {
  int * jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int *)((TK_Text_Font const *)arg1)->GetRenderers();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetRendererCutoff(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRendererCutoff(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetRendererCutoff(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetRendererCutoff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetRendererCutoffUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRendererCutoffUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetRendererCutoffUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetRendererCutoffUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetPreference(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPreference(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetPreference(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetPreference();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetPreferences(void * jarg1, int jarg2, int jarg3) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetPreferences(arg2,arg3);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Text_Font_GetPreferences(void * jarg1) {
  int * jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int *)((TK_Text_Font const *)arg1)->GetPreferences();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetPreferenceCutoff(void * jarg1, float jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetPreferenceCutoff(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Text_Font_GetPreferenceCutoff(void * jarg1) {
  float jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  float result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (float)((TK_Text_Font const *)arg1)->GetPreferenceCutoff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetPreferenceCutoffUnits(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPreferenceCutoffUnits(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetPreferenceCutoffUnits(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetPreferenceCutoffUnits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_SetLayout(void * jarg1, int jarg2) {
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLayout(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Font_GetLayout(void * jarg1) {
  int jresult ;
  TK_Text_Font *arg1 = (TK_Text_Font *) 0 ;
  int result;
  
  arg1 = (TK_Text_Font *)jarg1; 
  result = (int)((TK_Text_Font const *)arg1)->GetLayout();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Font_director_connect(void *objarg, SwigDirector_TK_Text_Font::SWIG_Callback0_t callback0, SwigDirector_TK_Text_Font::SWIG_Callback1_t callback1, SwigDirector_TK_Text_Font::SWIG_Callback2_t callback2, SwigDirector_TK_Text_Font::SWIG_Callback3_t callback3, SwigDirector_TK_Text_Font::SWIG_Callback4_t callback4, SwigDirector_TK_Text_Font::SWIG_Callback5_t callback5, SwigDirector_TK_Text_Font::SWIG_Callback6_t callback6, SwigDirector_TK_Text_Font::SWIG_Callback7_t callback7, SwigDirector_TK_Text_Font::SWIG_Callback8_t callback8, SwigDirector_TK_Text_Font::SWIG_Callback9_t callback9) {
  TK_Text_Font *obj = (TK_Text_Font *)objarg;
  SwigDirector_TK_Text_Font *director = dynamic_cast<SwigDirector_TK_Text_Font *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Bounding__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Bounding *)new SwigDirector_TK_Bounding(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Bounding__SWIG_1(unsigned char jarg1, float * jarg2, float * jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  float *arg2 ;
  float *arg3 ;
  TK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Bounding *)new SwigDirector_TK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Bounding__SWIG_2(unsigned char jarg1, float * jarg2, float jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  float *arg2 ;
  float arg3 ;
  TK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (TK_Bounding *)new SwigDirector_TK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Bounding__SWIG_3(unsigned char jarg1, double * jarg2, double * jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  double *arg2 ;
  double *arg3 ;
  TK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (TK_Bounding *)new SwigDirector_TK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Bounding__SWIG_4(unsigned char jarg1, double * jarg2, double jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  double *arg2 ;
  double arg3 ;
  TK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = (TK_Bounding *)new SwigDirector_TK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_ReadSwigExplicitTK_Bounding(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Bounding::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_WriteSwigExplicitTK_Bounding(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Bounding::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Bounding const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_CloneSwigExplicitTK_Bounding(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Bounding const *)arg1)->TK_Bounding::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Bounding_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Bounding(void * jarg1) {
  TK_Bounding *arg1 = (TK_Bounding *) 0 ;
  
  arg1 = (TK_Bounding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Bounding_director_connect(void *objarg, SwigDirector_TK_Bounding::SWIG_Callback0_t callback0, SwigDirector_TK_Bounding::SWIG_Callback1_t callback1, SwigDirector_TK_Bounding::SWIG_Callback2_t callback2, SwigDirector_TK_Bounding::SWIG_Callback3_t callback3, SwigDirector_TK_Bounding::SWIG_Callback4_t callback4, SwigDirector_TK_Bounding::SWIG_Callback5_t callback5, SwigDirector_TK_Bounding::SWIG_Callback6_t callback6, SwigDirector_TK_Bounding::SWIG_Callback7_t callback7, SwigDirector_TK_Bounding::SWIG_Callback8_t callback8, SwigDirector_TK_Bounding::SWIG_Callback9_t callback9) {
  TK_Bounding *obj = (TK_Bounding *)objarg;
  SwigDirector_TK_Bounding *director = dynamic_cast<SwigDirector_TK_Bounding *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Point(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Point *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Point *)new SwigDirector_TK_Point(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_ReadSwigExplicitTK_Point(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Point::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_WriteSwigExplicitTK_Point(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Point::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Point const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_CloneSwigExplicitTK_Point(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Point const *)arg1)->TK_Point::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_Reset(void * jarg1) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  
  arg1 = (TK_Point *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_ResetSwigExplicitTK_Point(void * jarg1) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  
  arg1 = (TK_Point *)jarg1; 
  (arg1)->TK_Point::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_SetPoint__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPoint(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_SetPoint__SWIG_1(void * jarg1, float * jarg2) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPoint((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Point_GetPoint(void * jarg1) {
  float * jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Point *)jarg1; 
  result = (float *)((TK_Point const *)arg1)->GetPoint();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_SetDPoint__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDPoint(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_SetDPoint__SWIG_1(void * jarg1, double * jarg2) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPoint((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Point_GetDPoint(void * jarg1) {
  double * jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Point *)jarg1; 
  result = (double *)((TK_Point const *)arg1)->GetDPoint();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_SetOptions(void * jarg1, int jarg2) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Point *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Point_GetOptions(void * jarg1) {
  int jresult ;
  TK_Point *arg1 = (TK_Point *) 0 ;
  int result;
  
  arg1 = (TK_Point *)jarg1; 
  result = (int)((TK_Point const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Point(void * jarg1) {
  TK_Point *arg1 = (TK_Point *) 0 ;
  
  arg1 = (TK_Point *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Point_director_connect(void *objarg, SwigDirector_TK_Point::SWIG_Callback0_t callback0, SwigDirector_TK_Point::SWIG_Callback1_t callback1, SwigDirector_TK_Point::SWIG_Callback2_t callback2, SwigDirector_TK_Point::SWIG_Callback3_t callback3, SwigDirector_TK_Point::SWIG_Callback4_t callback4, SwigDirector_TK_Point::SWIG_Callback5_t callback5, SwigDirector_TK_Point::SWIG_Callback6_t callback6, SwigDirector_TK_Point::SWIG_Callback7_t callback7, SwigDirector_TK_Point::SWIG_Callback8_t callback8, SwigDirector_TK_Point::SWIG_Callback9_t callback9) {
  TK_Point *obj = (TK_Point *)objarg;
  SwigDirector_TK_Point *director = dynamic_cast<SwigDirector_TK_Point *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Line__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Line *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Line *)new SwigDirector_TK_Line(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Line__SWIG_1() {
  void * jresult ;
  TK_Line *result = 0 ;
  
  result = (TK_Line *)new SwigDirector_TK_Line();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_ReadSwigExplicitTK_Line(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Line::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_WriteSwigExplicitTK_Line(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Line::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Line const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_CloneSwigExplicitTK_Line(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Line const *)arg1)->TK_Line::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetPoints__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetPoints(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetPoints__SWIG_1(void * jarg1, float * jarg2, float * jarg3) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  float *arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints((float const (*))arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetPoints__SWIG_2(void * jarg1, float * jarg2) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPoints((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Line_GetPoints(void * jarg1) {
  float * jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Line *)jarg1; 
  result = (float *)((TK_Line const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetDPoints__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->SetDPoints(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetDPoints__SWIG_1(void * jarg1, double * jarg2, double * jarg3) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints((double const (*))arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_SetDPoints__SWIG_2(void * jarg1, double * jarg2) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Line *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPoints((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Line_GetDPoints(void * jarg1) {
  double * jresult ;
  TK_Line *arg1 = (TK_Line *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Line *)jarg1; 
  result = (double *)((TK_Line const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Line(void * jarg1) {
  TK_Line *arg1 = (TK_Line *) 0 ;
  
  arg1 = (TK_Line *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_director_connect(void *objarg, SwigDirector_TK_Line::SWIG_Callback0_t callback0, SwigDirector_TK_Line::SWIG_Callback1_t callback1, SwigDirector_TK_Line::SWIG_Callback2_t callback2, SwigDirector_TK_Line::SWIG_Callback3_t callback3, SwigDirector_TK_Line::SWIG_Callback4_t callback4, SwigDirector_TK_Line::SWIG_Callback5_t callback5, SwigDirector_TK_Line::SWIG_Callback6_t callback6, SwigDirector_TK_Line::SWIG_Callback7_t callback7, SwigDirector_TK_Line::SWIG_Callback8_t callback8, SwigDirector_TK_Line::SWIG_Callback9_t callback9) {
  TK_Line *obj = (TK_Line *)objarg;
  SwigDirector_TK_Line *director = dynamic_cast<SwigDirector_TK_Line *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Polypoint(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Polypoint *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Polypoint *)new SwigDirector_TK_Polypoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Polypoint(void * jarg1) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_ReadSwigExplicitTK_Polypoint(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Polypoint::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_WriteSwigExplicitTK_Polypoint(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Polypoint::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Polypoint const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_CloneSwigExplicitTK_Polypoint(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Polypoint const *)arg1)->TK_Polypoint::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_Reset(void * jarg1) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_ResetSwigExplicitTK_Polypoint(void * jarg1) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  (arg1)->TK_Polypoint::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoints(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polypoint_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  result = (float *)((TK_Polypoint const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPoints(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Polypoint_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Polypoint *)jarg1; 
  result = (double *)((TK_Polypoint const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polypoint_GetCount(void * jarg1) {
  int jresult ;
  TK_Polypoint *arg1 = (TK_Polypoint *) 0 ;
  int result;
  
  arg1 = (TK_Polypoint *)jarg1; 
  result = (int)((TK_Polypoint const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polypoint_director_connect(void *objarg, SwigDirector_TK_Polypoint::SWIG_Callback0_t callback0, SwigDirector_TK_Polypoint::SWIG_Callback1_t callback1, SwigDirector_TK_Polypoint::SWIG_Callback2_t callback2, SwigDirector_TK_Polypoint::SWIG_Callback3_t callback3, SwigDirector_TK_Polypoint::SWIG_Callback4_t callback4, SwigDirector_TK_Polypoint::SWIG_Callback5_t callback5, SwigDirector_TK_Polypoint::SWIG_Callback6_t callback6, SwigDirector_TK_Polypoint::SWIG_Callback7_t callback7, SwigDirector_TK_Polypoint::SWIG_Callback8_t callback8, SwigDirector_TK_Polypoint::SWIG_Callback9_t callback9) {
  TK_Polypoint *obj = (TK_Polypoint *)objarg;
  SwigDirector_TK_Polypoint *director = dynamic_cast<SwigDirector_TK_Polypoint *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NC_HAS_WEIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x01;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NC_HAS_KNOTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x02;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NC_HAS_START_get() {
  int jresult ;
  int result;
  
  result = (int) 0x04;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NC_HAS_END_get() {
  int jresult ;
  int result;
  
  result = (int) 0x08;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_NURBS_Curve() {
  void * jresult ;
  TK_NURBS_Curve *result = 0 ;
  
  result = (TK_NURBS_Curve *)new SwigDirector_TK_NURBS_Curve();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_NURBS_Curve(void * jarg1) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_ReadSwigExplicitTK_NURBS_Curve(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_NURBS_Curve::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_WriteSwigExplicitTK_NURBS_Curve(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_NURBS_Curve::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_NURBS_Curve const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_CloneSwigExplicitTK_NURBS_Curve(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_NURBS_Curve const *)arg1)->TK_NURBS_Curve::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_Reset(void * jarg1) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_ResetSwigExplicitTK_NURBS_Curve(void * jarg1) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  (arg1)->TK_NURBS_Curve::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_0(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6, float jarg7, float jarg8) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_1(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6, float jarg7) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_2(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_3(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_4(void * jarg1, int jarg2, int jarg3, float * jarg4) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetCurve__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetCurve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_0(void * jarg1, int jarg2, int jarg3, double * jarg4, float * jarg5, float * jarg6, float jarg7, float jarg8) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->SetDCurve(arg2,arg3,(double const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_1(void * jarg1, int jarg2, int jarg3, double * jarg4, float * jarg5, float * jarg6, float jarg7) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetDCurve(arg2,arg3,(double const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_2(void * jarg1, int jarg2, int jarg3, double * jarg4, float * jarg5, float * jarg6) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  float *arg5 ;
  float *arg6 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->SetDCurve(arg2,arg3,(double const (*))arg4,(float const (*))arg5,(float const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_3(void * jarg1, int jarg2, int jarg3, double * jarg4, float * jarg5) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  float *arg5 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->SetDCurve(arg2,arg3,(double const (*))arg4,(float const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_4(void * jarg1, int jarg2, int jarg3, double * jarg4) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->SetDCurve(arg2,arg3,(double const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetDCurve__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetDCurve(arg2,arg3);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Curve_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (float *)((TK_NURBS_Curve const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_NURBS_Curve_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (double *)((TK_NURBS_Curve const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_GetDegree(void * jarg1) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (int)((TK_NURBS_Curve const *)arg1)->GetDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_GetCount(void * jarg1) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (int)((TK_NURBS_Curve const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Curve_GetWeights__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (float *)((TK_NURBS_Curve const *)arg1)->GetWeights();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Curve_GetKnots__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (float *)((TK_NURBS_Curve const *)arg1)->GetKnots();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetStart(void * jarg1, float jarg2) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float arg2 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStart(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_NURBS_Curve_GetStart(void * jarg1) {
  float jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (float)((TK_NURBS_Curve const *)arg1)->GetStart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetEnd(void * jarg1, float jarg2) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float arg2 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEnd(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_NURBS_Curve_GetEnd(void * jarg1) {
  float jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  float result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (float)((TK_NURBS_Curve const *)arg1)->GetEnd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_SetOptions(void * jarg1, int jarg2) {
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int arg2 ;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Curve_GetOptions(void * jarg1) {
  int jresult ;
  TK_NURBS_Curve *arg1 = (TK_NURBS_Curve *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Curve *)jarg1; 
  result = (int)((TK_NURBS_Curve const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Curve_director_connect(void *objarg, SwigDirector_TK_NURBS_Curve::SWIG_Callback0_t callback0, SwigDirector_TK_NURBS_Curve::SWIG_Callback1_t callback1, SwigDirector_TK_NURBS_Curve::SWIG_Callback2_t callback2, SwigDirector_TK_NURBS_Curve::SWIG_Callback3_t callback3, SwigDirector_TK_NURBS_Curve::SWIG_Callback4_t callback4, SwigDirector_TK_NURBS_Curve::SWIG_Callback5_t callback5, SwigDirector_TK_NURBS_Curve::SWIG_Callback6_t callback6, SwigDirector_TK_NURBS_Curve::SWIG_Callback7_t callback7, SwigDirector_TK_NURBS_Curve::SWIG_Callback8_t callback8, SwigDirector_TK_NURBS_Curve::SWIG_Callback9_t callback9) {
  TK_NURBS_Curve *obj = (TK_NURBS_Curve *)objarg;
  SwigDirector_TK_NURBS_Curve *director = dynamic_cast<SwigDirector_TK_NURBS_Curve *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_HAS_WEIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x01;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_HAS_KNOTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x02;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_HAS_TRIMS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x04;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_END_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_POLY_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_CURVE_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_COLLECTION_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_LAST_KNOWN_TYPE_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_KEEP_get() {
  int jresult ;
  int result;
  
  result = (int) 0x01;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_HAS_WEIGHTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x02;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NS_TRIM_HAS_KNOTS_get() {
  int jresult ;
  int result;
  
  result = (int) 0x04;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HT_NURBS_Trim(void * jarg1) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetPoly__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoly(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetPoly__SWIG_1(void * jarg1, int jarg2) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoly(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_0(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6, float jarg7, float jarg8) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_1(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6, float jarg7) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  float arg7 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_2(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5, float * jarg6) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  float *arg6 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5,(float const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_3(void * jarg1, int jarg2, int jarg3, float * jarg4, float * jarg5) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  float *arg5 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4,(float const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_4(void * jarg1, int jarg2, int jarg3, float * jarg4) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->SetCurve(arg2,arg3,(float const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCurve__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetCurve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetCollection(void * jarg1) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  (arg1)->SetCollection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetOptions(void * jarg1, int jarg2) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int arg2 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetList(void * jarg1, void * jarg2) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  HT_NURBS_Trim *arg2 = (HT_NURBS_Trim *) 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (HT_NURBS_Trim *)jarg2; 
  (arg1)->SetList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HT_NURBS_Trim_SetNext(void * jarg1, void * jarg2) {
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  HT_NURBS_Trim *arg2 = (HT_NURBS_Trim *) 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (HT_NURBS_Trim *)jarg2; 
  (arg1)->SetNext(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_read_collection_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->read_collection_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_write_collection_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->write_collection_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HT_NURBS_Trim_GetNext(void * jarg1) {
  void * jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  HT_NURBS_Trim *result = 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (HT_NURBS_Trim *)(arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_GetTKType(void * jarg1) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (int)((HT_NURBS_Trim const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_GetCount(void * jarg1) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (int)((HT_NURBS_Trim const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HT_NURBS_Trim_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  float *result = 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (float *)((HT_NURBS_Trim const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_GetDegree(void * jarg1) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (int)((HT_NURBS_Trim const *)arg1)->GetDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HT_NURBS_Trim_GetOptions(void * jarg1) {
  int jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  int result;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (int)((HT_NURBS_Trim const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HT_NURBS_Trim_GetWeights__SWIG_0(void * jarg1) {
  float * jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  float *result = 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (float *)((HT_NURBS_Trim const *)arg1)->GetWeights();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HT_NURBS_Trim_GetKnots__SWIG_0(void * jarg1) {
  float * jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  float *result = 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (float *)((HT_NURBS_Trim const *)arg1)->GetKnots();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HT_NURBS_Trim_GetList__SWIG_0(void * jarg1) {
  void * jresult ;
  HT_NURBS_Trim *arg1 = (HT_NURBS_Trim *) 0 ;
  HT_NURBS_Trim *result = 0 ;
  
  arg1 = (HT_NURBS_Trim *)jarg1; 
  result = (HT_NURBS_Trim *)((HT_NURBS_Trim const *)arg1)->GetList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_NURBS_Surface() {
  void * jresult ;
  TK_NURBS_Surface *result = 0 ;
  
  result = (TK_NURBS_Surface *)new SwigDirector_TK_NURBS_Surface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_NURBS_Surface(void * jarg1) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_ReadSwigExplicitTK_NURBS_Surface(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_NURBS_Surface::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_WriteSwigExplicitTK_NURBS_Surface(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_NURBS_Surface::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_NURBS_Surface const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_CloneSwigExplicitTK_NURBS_Surface(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_NURBS_Surface const *)arg1)->TK_NURBS_Surface::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_Reset(void * jarg1) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_ResetSwigExplicitTK_NURBS_Surface(void * jarg1) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  (arg1)->TK_NURBS_Surface::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetSurface__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6, float * jarg7, float * jarg8, float * jarg9) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 ;
  float *arg7 ;
  float *arg8 ;
  float *arg9 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (float *)jarg9; 
  (arg1)->SetSurface(arg2,arg3,arg4,arg5,(float const (*))arg6,(float const (*))arg7,(float const (*))arg8,(float const (*))arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetSurface__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6, float * jarg7, float * jarg8) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 ;
  float *arg7 ;
  float *arg8 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  (arg1)->SetSurface(arg2,arg3,arg4,arg5,(float const (*))arg6,(float const (*))arg7,(float const (*))arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetSurface__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6, float * jarg7) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 ;
  float *arg7 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (float *)jarg7; 
  (arg1)->SetSurface(arg2,arg3,arg4,arg5,(float const (*))arg6,(float const (*))arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetSurface__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6; 
  (arg1)->SetSurface(arg2,arg3,arg4,arg5,(float const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetSurface__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetSurface(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetDSurface__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, double * jarg6, float * jarg7, float * jarg8, float * jarg9) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 ;
  float *arg7 ;
  float *arg8 ;
  float *arg9 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (float *)jarg9; 
  (arg1)->SetDSurface(arg2,arg3,arg4,arg5,(double const (*))arg6,(float const (*))arg7,(float const (*))arg8,(float const (*))arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetDSurface__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, double * jarg6, float * jarg7, float * jarg8) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 ;
  float *arg7 ;
  float *arg8 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (float *)jarg8; 
  (arg1)->SetDSurface(arg2,arg3,arg4,arg5,(double const (*))arg6,(float const (*))arg7,(float const (*))arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetDSurface__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, double * jarg6, float * jarg7) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 ;
  float *arg7 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double *)jarg6; 
  arg7 = (float *)jarg7; 
  (arg1)->SetDSurface(arg2,arg3,arg4,arg5,(double const (*))arg6,(float const (*))arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetDSurface__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, double * jarg6) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double *arg6 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double *)jarg6; 
  (arg1)->SetDSurface(arg2,arg3,arg4,arg5,(double const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetDSurface__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetDSurface(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (float *)((TK_NURBS_Surface const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (double *)((TK_NURBS_Surface const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_GetUDegree(void * jarg1) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (int)((TK_NURBS_Surface const *)arg1)->GetUDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_GetVDegree(void * jarg1) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (int)((TK_NURBS_Surface const *)arg1)->GetVDegree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_GetUSize(void * jarg1) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (int)((TK_NURBS_Surface const *)arg1)->GetUSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_GetVSize(void * jarg1) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (int)((TK_NURBS_Surface const *)arg1)->GetVSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetWeights__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (float *)((TK_NURBS_Surface const *)arg1)->GetWeights();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetUKnots__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (float *)((TK_NURBS_Surface const *)arg1)->GetUKnots();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetVKnots__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (float *)((TK_NURBS_Surface const *)arg1)->GetVKnots();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_SetOptions(void * jarg1, int jarg2) {
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_NURBS_Surface_GetOptions(void * jarg1) {
  int jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int result;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (int)((TK_NURBS_Surface const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_NURBS_Surface_NewTrim__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  int arg2 ;
  HT_NURBS_Trim *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HT_NURBS_Trim *)(arg1)->NewTrim(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_NURBS_Surface_NewTrim__SWIG_1(void * jarg1) {
  void * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  HT_NURBS_Trim *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (HT_NURBS_Trim *)(arg1)->NewTrim();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_NURBS_Surface_GetTrims(void * jarg1) {
  void * jresult ;
  TK_NURBS_Surface *arg1 = (TK_NURBS_Surface *) 0 ;
  HT_NURBS_Trim *result = 0 ;
  
  arg1 = (TK_NURBS_Surface *)jarg1; 
  result = (HT_NURBS_Trim *)(arg1)->GetTrims();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_NURBS_Surface_director_connect(void *objarg, SwigDirector_TK_NURBS_Surface::SWIG_Callback0_t callback0, SwigDirector_TK_NURBS_Surface::SWIG_Callback1_t callback1, SwigDirector_TK_NURBS_Surface::SWIG_Callback2_t callback2, SwigDirector_TK_NURBS_Surface::SWIG_Callback3_t callback3, SwigDirector_TK_NURBS_Surface::SWIG_Callback4_t callback4, SwigDirector_TK_NURBS_Surface::SWIG_Callback5_t callback5, SwigDirector_TK_NURBS_Surface::SWIG_Callback6_t callback6, SwigDirector_TK_NURBS_Surface::SWIG_Callback7_t callback7, SwigDirector_TK_NURBS_Surface::SWIG_Callback8_t callback8, SwigDirector_TK_NURBS_Surface::SWIG_Callback9_t callback9) {
  TK_NURBS_Surface *obj = (TK_NURBS_Surface *)objarg;
  SwigDirector_TK_NURBS_Surface *director = dynamic_cast<SwigDirector_TK_NURBS_Surface *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Area_Light() {
  void * jresult ;
  TK_Area_Light *result = 0 ;
  
  result = (TK_Area_Light *)new SwigDirector_TK_Area_Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Area_Light(void * jarg1) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_ReadSwigExplicitTK_Area_Light(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Area_Light::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_WriteSwigExplicitTK_Area_Light(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Area_Light::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Area_Light const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_CloneSwigExplicitTK_Area_Light(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Area_Light const *)arg1)->TK_Area_Light::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_Reset(void * jarg1) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_ResetSwigExplicitTK_Area_Light(void * jarg1) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  (arg1)->TK_Area_Light::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoints(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Area_Light_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  result = (float *)((TK_Area_Light const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPoints(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Area_Light_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  result = (double *)((TK_Area_Light const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_GetCount(void * jarg1) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  result = (int)((TK_Area_Light const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_SetOptions(void * jarg1, int jarg2) {
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Area_Light *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Area_Light_GetOptions(void * jarg1) {
  int jresult ;
  TK_Area_Light *arg1 = (TK_Area_Light *) 0 ;
  int result;
  
  arg1 = (TK_Area_Light *)jarg1; 
  result = (int)((TK_Area_Light const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Area_Light_director_connect(void *objarg, SwigDirector_TK_Area_Light::SWIG_Callback0_t callback0, SwigDirector_TK_Area_Light::SWIG_Callback1_t callback1, SwigDirector_TK_Area_Light::SWIG_Callback2_t callback2, SwigDirector_TK_Area_Light::SWIG_Callback3_t callback3, SwigDirector_TK_Area_Light::SWIG_Callback4_t callback4, SwigDirector_TK_Area_Light::SWIG_Callback5_t callback5, SwigDirector_TK_Area_Light::SWIG_Callback6_t callback6, SwigDirector_TK_Area_Light::SWIG_Callback7_t callback7, SwigDirector_TK_Area_Light::SWIG_Callback8_t callback8, SwigDirector_TK_Area_Light::SWIG_Callback9_t callback9) {
  TK_Area_Light *obj = (TK_Area_Light *)objarg;
  SwigDirector_TK_Area_Light *director = dynamic_cast<SwigDirector_TK_Area_Light *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Spot_Light() {
  void * jresult ;
  TK_Spot_Light *result = 0 ;
  
  result = (TK_Spot_Light *)new SwigDirector_TK_Spot_Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_ReadSwigExplicitTK_Spot_Light(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Spot_Light::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_WriteSwigExplicitTK_Spot_Light(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Spot_Light::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Spot_Light const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_CloneSwigExplicitTK_Spot_Light(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Spot_Light const *)arg1)->TK_Spot_Light::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetPosition__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetPosition__SWIG_1(void * jarg1, float * jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPosition((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Spot_Light_GetPosition(void * jarg1) {
  float * jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (float *)((TK_Spot_Light const *)arg1)->GetPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetDPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetDPosition__SWIG_1(void * jarg1, double * jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPosition((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Spot_Light_GetDPosition(void * jarg1) {
  double * jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (double *)((TK_Spot_Light const *)arg1)->GetDPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetTarget__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetTarget__SWIG_1(void * jarg1, float * jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetTarget((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Spot_Light_GetTarget(void * jarg1) {
  float * jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (float *)((TK_Spot_Light const *)arg1)->GetTarget();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetDTarget__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetDTarget__SWIG_1(void * jarg1, double * jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDTarget((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Spot_Light_GetDTarget(void * jarg1) {
  double * jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (double *)((TK_Spot_Light const *)arg1)->GetDTarget();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetOuter(void * jarg1, float jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetOuter(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Spot_Light_GetOuter(void * jarg1) {
  float jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (float)((TK_Spot_Light const *)arg1)->GetOuter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetInner(void * jarg1, float jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetInner(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Spot_Light_GetInner(void * jarg1) {
  float jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (float)((TK_Spot_Light const *)arg1)->GetInner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetConcentration(void * jarg1, float jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetConcentration(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Spot_Light_GetConcentration(void * jarg1) {
  float jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  float result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (float)((TK_Spot_Light const *)arg1)->GetConcentration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_SetOptions(void * jarg1, int jarg2) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Spot_Light_GetOptions(void * jarg1) {
  int jresult ;
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  int result;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  result = (int)((TK_Spot_Light const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Spot_Light(void * jarg1) {
  TK_Spot_Light *arg1 = (TK_Spot_Light *) 0 ;
  
  arg1 = (TK_Spot_Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Spot_Light_director_connect(void *objarg, SwigDirector_TK_Spot_Light::SWIG_Callback0_t callback0, SwigDirector_TK_Spot_Light::SWIG_Callback1_t callback1, SwigDirector_TK_Spot_Light::SWIG_Callback2_t callback2, SwigDirector_TK_Spot_Light::SWIG_Callback3_t callback3, SwigDirector_TK_Spot_Light::SWIG_Callback4_t callback4, SwigDirector_TK_Spot_Light::SWIG_Callback5_t callback5, SwigDirector_TK_Spot_Light::SWIG_Callback6_t callback6, SwigDirector_TK_Spot_Light::SWIG_Callback7_t callback7, SwigDirector_TK_Spot_Light::SWIG_Callback8_t callback8, SwigDirector_TK_Spot_Light::SWIG_Callback9_t callback9) {
  TK_Spot_Light *obj = (TK_Spot_Light *)objarg;
  SwigDirector_TK_Spot_Light *director = dynamic_cast<SwigDirector_TK_Spot_Light *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Cutting_Plane() {
  void * jresult ;
  TK_Cutting_Plane *result = 0 ;
  
  result = (TK_Cutting_Plane *)new SwigDirector_TK_Cutting_Plane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Cutting_Plane(void * jarg1) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_ReadSwigExplicitTK_Cutting_Plane(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Cutting_Plane::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_WriteSwigExplicitTK_Cutting_Plane(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Cutting_Plane::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Cutting_Plane const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_CloneSwigExplicitTK_Cutting_Plane(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Cutting_Plane const *)arg1)->TK_Cutting_Plane::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_Reset(void * jarg1) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_ResetSwigExplicitTK_Cutting_Plane(void * jarg1) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  (arg1)->TK_Cutting_Plane::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetPlanes__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPlanes(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetPlanes__SWIG_1(void * jarg1, int jarg2) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPlanes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetDPlanes__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPlanes(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetDPlanes__SWIG_1(void * jarg1, int jarg2) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPlanes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetPlane__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetDPlane__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->SetDPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetPlane__SWIG_1(void * jarg1, float * jarg2) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPlane((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_SetDPlane__SWIG_1(void * jarg1, double * jarg2) {
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPlane((double const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Cutting_Plane_GetPlane(void * jarg1) {
  float * jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  result = (float *)((TK_Cutting_Plane const *)arg1)->GetPlane();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Cutting_Plane_GetDPlane(void * jarg1) {
  double * jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  result = (double *)((TK_Cutting_Plane const *)arg1)->GetDPlane();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Cutting_Plane_GetPlanes(void * jarg1) {
  float * jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  result = (float *)((TK_Cutting_Plane const *)arg1)->GetPlanes();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Cutting_Plane_GetDPlanes(void * jarg1) {
  double * jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  result = (double *)((TK_Cutting_Plane const *)arg1)->GetDPlanes();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cutting_Plane_GetCount(void * jarg1) {
  int jresult ;
  TK_Cutting_Plane *arg1 = (TK_Cutting_Plane *) 0 ;
  int result;
  
  arg1 = (TK_Cutting_Plane *)jarg1; 
  result = (int)((TK_Cutting_Plane const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cutting_Plane_director_connect(void *objarg, SwigDirector_TK_Cutting_Plane::SWIG_Callback0_t callback0, SwigDirector_TK_Cutting_Plane::SWIG_Callback1_t callback1, SwigDirector_TK_Cutting_Plane::SWIG_Callback2_t callback2, SwigDirector_TK_Cutting_Plane::SWIG_Callback3_t callback3, SwigDirector_TK_Cutting_Plane::SWIG_Callback4_t callback4, SwigDirector_TK_Cutting_Plane::SWIG_Callback5_t callback5, SwigDirector_TK_Cutting_Plane::SWIG_Callback6_t callback6, SwigDirector_TK_Cutting_Plane::SWIG_Callback7_t callback7, SwigDirector_TK_Cutting_Plane::SWIG_Callback8_t callback8, SwigDirector_TK_Cutting_Plane::SWIG_Callback9_t callback9) {
  TK_Cutting_Plane *obj = (TK_Cutting_Plane *)objarg;
  SwigDirector_TK_Cutting_Plane *director = dynamic_cast<SwigDirector_TK_Cutting_Plane *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Circle(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Circle *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Circle *)new SwigDirector_TK_Circle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_ReadSwigExplicitTK_Circle(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Circle::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_WriteSwigExplicitTK_Circle(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Circle::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Circle const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_CloneSwigExplicitTK_Circle(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Circle const *)arg1)->TK_Circle::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Circle_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_Reset(void * jarg1) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_ResetSwigExplicitTK_Circle(void * jarg1) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  (arg1)->TK_Circle::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetStart__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetStart(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetStart__SWIG_1(void * jarg1, float * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetStart((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetMiddle__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetMiddle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetMiddle__SWIG_1(void * jarg1, float * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetMiddle((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetEnd__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetEnd(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetEnd__SWIG_1(void * jarg1, float * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetEnd((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetCenter__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetCenter__SWIG_1(void * jarg1, float * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetCenter((float const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetPoints__SWIG_0(void * jarg1, float * jarg2, float * jarg3, float * jarg4, float * jarg5) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  float *arg3 ;
  float *arg4 ;
  float *arg5 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->SetPoints((float const (*))arg2,(float const (*))arg3,(float const (*))arg4,(float const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetPoints__SWIG_1(void * jarg1, float * jarg2, float * jarg3, float * jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *arg2 ;
  float *arg3 ;
  float *arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->SetPoints((float const (*))arg2,(float const (*))arg3,(float const (*))arg4);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Circle_GetStart(void * jarg1) {
  float * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (float *)((TK_Circle const *)arg1)->GetStart();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Circle_GetMiddle(void * jarg1) {
  float * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (float *)((TK_Circle const *)arg1)->GetMiddle();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Circle_GetEnd(void * jarg1) {
  float * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (float *)((TK_Circle const *)arg1)->GetEnd();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Circle_GetCenter(void * jarg1) {
  float * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (float *)((TK_Circle const *)arg1)->GetCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDStart__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDStart(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDStart__SWIG_1(void * jarg1, double * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDStart((double const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDMiddle__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDMiddle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDMiddle__SWIG_1(void * jarg1, double * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDMiddle((double const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDEnd__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDEnd(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDEnd__SWIG_1(void * jarg1, double * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDEnd((double const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDCenter__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDCenter__SWIG_1(void * jarg1, double * jarg2) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDCenter((double const (*))arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDPoints__SWIG_0(void * jarg1, double * jarg2, double * jarg3, double * jarg4, double * jarg5) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  double *arg5 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  arg5 = (double *)jarg5; 
  (arg1)->SetDPoints((double const (*))arg2,(double const (*))arg3,(double const (*))arg4,(double const (*))arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_SetDPoints__SWIG_1(void * jarg1, double * jarg2, double * jarg3, double * jarg4) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *arg2 ;
  double *arg3 ;
  double *arg4 ;
  
  arg1 = (TK_Circle *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->SetDPoints((double const (*))arg2,(double const (*))arg3,(double const (*))arg4);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Circle_GetDStart(void * jarg1) {
  double * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (double *)((TK_Circle const *)arg1)->GetDStart();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Circle_GetDMiddle(void * jarg1) {
  double * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (double *)((TK_Circle const *)arg1)->GetDMiddle();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Circle_GetDEnd(void * jarg1) {
  double * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (double *)((TK_Circle const *)arg1)->GetDEnd();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Circle_GetDCenter(void * jarg1) {
  double * jresult ;
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  result = (double *)((TK_Circle const *)arg1)->GetDCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Circle(void * jarg1) {
  TK_Circle *arg1 = (TK_Circle *) 0 ;
  
  arg1 = (TK_Circle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Circle_director_connect(void *objarg, SwigDirector_TK_Circle::SWIG_Callback0_t callback0, SwigDirector_TK_Circle::SWIG_Callback1_t callback1, SwigDirector_TK_Circle::SWIG_Callback2_t callback2, SwigDirector_TK_Circle::SWIG_Callback3_t callback3, SwigDirector_TK_Circle::SWIG_Callback4_t callback4, SwigDirector_TK_Circle::SWIG_Callback5_t callback5, SwigDirector_TK_Circle::SWIG_Callback6_t callback6, SwigDirector_TK_Circle::SWIG_Callback7_t callback7, SwigDirector_TK_Circle::SWIG_Callback8_t callback8, SwigDirector_TK_Circle::SWIG_Callback9_t callback9) {
  TK_Circle *obj = (TK_Circle *)objarg;
  SwigDirector_TK_Circle *director = dynamic_cast<SwigDirector_TK_Circle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Ellipse(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Ellipse *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Ellipse *)new SwigDirector_TK_Ellipse(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_ReadSwigExplicitTK_Ellipse(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Ellipse::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_WriteSwigExplicitTK_Ellipse(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Ellipse::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Ellipse const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_CloneSwigExplicitTK_Ellipse(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Ellipse const *)arg1)->TK_Ellipse::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Ellipse_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetCenter__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetCenter__SWIG_1(void * jarg1, float * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetCenter((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Ellipse_GetCenter(void * jarg1) {
  float * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (float *)((TK_Ellipse const *)arg1)->GetCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetMajor__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetMajor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetMajor__SWIG_1(void * jarg1, float * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetMajor((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Ellipse_GetMajor(void * jarg1) {
  float * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (float *)((TK_Ellipse const *)arg1)->GetMajor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetMinor__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetMinor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetMinor__SWIG_1(void * jarg1, float * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetMinor((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Ellipse_GetMinor(void * jarg1) {
  float * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (float *)((TK_Ellipse const *)arg1)->GetMinor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDCenter__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDCenter__SWIG_1(void * jarg1, double * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDCenter((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Ellipse_GetDCenter(void * jarg1) {
  double * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (double *)((TK_Ellipse const *)arg1)->GetDCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDMajor__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDMajor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDMajor__SWIG_1(void * jarg1, double * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDMajor((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Ellipse_GetDMajor(void * jarg1) {
  double * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (double *)((TK_Ellipse const *)arg1)->GetDMajor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDMinor__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDMinor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetDMinor__SWIG_1(void * jarg1, double * jarg2) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDMinor((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Ellipse_GetDMinor(void * jarg1) {
  double * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (double *)((TK_Ellipse const *)arg1)->GetDMinor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_SetLimits(void * jarg1, float jarg2, float jarg3) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetLimits(arg2,arg3);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Ellipse_GetLimits(void * jarg1) {
  float * jresult ;
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  result = (float *)((TK_Ellipse const *)arg1)->GetLimits();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Ellipse(void * jarg1) {
  TK_Ellipse *arg1 = (TK_Ellipse *) 0 ;
  
  arg1 = (TK_Ellipse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Ellipse_director_connect(void *objarg, SwigDirector_TK_Ellipse::SWIG_Callback0_t callback0, SwigDirector_TK_Ellipse::SWIG_Callback1_t callback1, SwigDirector_TK_Ellipse::SWIG_Callback2_t callback2, SwigDirector_TK_Ellipse::SWIG_Callback3_t callback3, SwigDirector_TK_Ellipse::SWIG_Callback4_t callback4, SwigDirector_TK_Ellipse::SWIG_Callback5_t callback5, SwigDirector_TK_Ellipse::SWIG_Callback6_t callback6, SwigDirector_TK_Ellipse::SWIG_Callback7_t callback7, SwigDirector_TK_Ellipse::SWIG_Callback8_t callback8, SwigDirector_TK_Ellipse::SWIG_Callback9_t callback9) {
  TK_Ellipse *obj = (TK_Ellipse *)objarg;
  SwigDirector_TK_Ellipse *director = dynamic_cast<SwigDirector_TK_Ellipse *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Sphere() {
  void * jresult ;
  TK_Sphere *result = 0 ;
  
  result = (TK_Sphere *)new SwigDirector_TK_Sphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_ReadSwigExplicitTK_Sphere(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Sphere::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_WriteSwigExplicitTK_Sphere(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Sphere::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Sphere const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_CloneSwigExplicitTK_Sphere(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Sphere const *)arg1)->TK_Sphere::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Sphere_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_Reset(void * jarg1) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_ResetSwigExplicitTK_Sphere(void * jarg1) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  (arg1)->TK_Sphere::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetCenter__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetCenter__SWIG_1(void * jarg1, float * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetCenter((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Sphere_GetCenter(void * jarg1) {
  float * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (float *)((TK_Sphere const *)arg1)->GetCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetRadius(void * jarg1, float jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Sphere_GetRadius(void * jarg1) {
  float jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float result;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (float)((TK_Sphere const *)arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetAxis__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetAxis(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetAxis__SWIG_1(void * jarg1, float * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetAxis((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Sphere_GetAxis(void * jarg1) {
  float * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (float *)((TK_Sphere const *)arg1)->GetAxis();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetOrtho__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetOrtho(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetOrtho__SWIG_1(void * jarg1, float * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetOrtho((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Sphere_GetOrtho(void * jarg1) {
  float * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (float *)((TK_Sphere const *)arg1)->GetOrtho();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDCenter__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDCenter__SWIG_1(void * jarg1, double * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDCenter((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Sphere_GetDCenter(void * jarg1) {
  double * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (double *)((TK_Sphere const *)arg1)->GetDCenter();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDRadius(void * jarg1, double jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetDRadius(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_TK_Sphere_GetDRadius(void * jarg1) {
  double jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double result;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (double)((TK_Sphere const *)arg1)->GetDRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDAxis__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDAxis(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDAxis__SWIG_1(void * jarg1, double * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDAxis((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Sphere_GetDAxis(void * jarg1) {
  double * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (double *)((TK_Sphere const *)arg1)->GetDAxis();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDOrtho__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDOrtho(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_SetDOrtho__SWIG_1(void * jarg1, double * jarg2) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDOrtho((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Sphere_GetDOrtho(void * jarg1) {
  double * jresult ;
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  result = (double *)((TK_Sphere const *)arg1)->GetDOrtho();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Sphere(void * jarg1) {
  TK_Sphere *arg1 = (TK_Sphere *) 0 ;
  
  arg1 = (TK_Sphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Sphere_director_connect(void *objarg, SwigDirector_TK_Sphere::SWIG_Callback0_t callback0, SwigDirector_TK_Sphere::SWIG_Callback1_t callback1, SwigDirector_TK_Sphere::SWIG_Callback2_t callback2, SwigDirector_TK_Sphere::SWIG_Callback3_t callback3, SwigDirector_TK_Sphere::SWIG_Callback4_t callback4, SwigDirector_TK_Sphere::SWIG_Callback5_t callback5, SwigDirector_TK_Sphere::SWIG_Callback6_t callback6, SwigDirector_TK_Sphere::SWIG_Callback7_t callback7, SwigDirector_TK_Sphere::SWIG_Callback8_t callback8, SwigDirector_TK_Sphere::SWIG_Callback9_t callback9) {
  TK_Sphere *obj = (TK_Sphere *)objarg;
  SwigDirector_TK_Sphere *director = dynamic_cast<SwigDirector_TK_Sphere *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Cylinder() {
  void * jresult ;
  TK_Cylinder *result = 0 ;
  
  result = (TK_Cylinder *)new SwigDirector_TK_Cylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_ReadSwigExplicitTK_Cylinder(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Cylinder::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_WriteSwigExplicitTK_Cylinder(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Cylinder::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Cylinder const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_CloneSwigExplicitTK_Cylinder(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Cylinder const *)arg1)->TK_Cylinder::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetAxis__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetAxis(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetAxis__SWIG_1(void * jarg1, float * jarg2, float * jarg3) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float *arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetAxis((float const (*))arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetAxis__SWIG_2(void * jarg1, float * jarg2) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetAxis((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Cylinder_GetAxis(void * jarg1) {
  float * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (float *)((TK_Cylinder const *)arg1)->GetAxis();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Cylinder_GetStart(void * jarg1) {
  float * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (float *)((TK_Cylinder const *)arg1)->GetStart();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Cylinder_GetEnd(void * jarg1) {
  float * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (float *)((TK_Cylinder const *)arg1)->GetEnd();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetRadius(void * jarg1, float jarg2) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Cylinder_GetRadius(void * jarg1) {
  float jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  float result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (float)((TK_Cylinder const *)arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetDAxis__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, double jarg7) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->SetDAxis(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetDAxis__SWIG_1(void * jarg1, double * jarg2, double * jarg3) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDAxis((double const (*))arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetDAxis__SWIG_2(void * jarg1, double * jarg2) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDAxis((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Cylinder_GetDAxis(void * jarg1) {
  double * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (double *)((TK_Cylinder const *)arg1)->GetDAxis();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Cylinder_GetDStart(void * jarg1) {
  double * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (double *)((TK_Cylinder const *)arg1)->GetDStart();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Cylinder_GetDEnd(void * jarg1) {
  double * jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (double *)((TK_Cylinder const *)arg1)->GetDEnd();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetDRadius(void * jarg1, double jarg2) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double arg2 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetDRadius(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_TK_Cylinder_GetDRadius(void * jarg1) {
  double jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  double result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (double)((TK_Cylinder const *)arg1)->GetDRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_SetCaps(void * jarg1, int jarg2) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCaps(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Cylinder_GetCaps(void * jarg1) {
  int jresult ;
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  int result;
  
  arg1 = (TK_Cylinder *)jarg1; 
  result = (int)((TK_Cylinder const *)arg1)->GetCaps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Cylinder(void * jarg1) {
  TK_Cylinder *arg1 = (TK_Cylinder *) 0 ;
  
  arg1 = (TK_Cylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Cylinder_director_connect(void *objarg, SwigDirector_TK_Cylinder::SWIG_Callback0_t callback0, SwigDirector_TK_Cylinder::SWIG_Callback1_t callback1, SwigDirector_TK_Cylinder::SWIG_Callback2_t callback2, SwigDirector_TK_Cylinder::SWIG_Callback3_t callback3, SwigDirector_TK_Cylinder::SWIG_Callback4_t callback4, SwigDirector_TK_Cylinder::SWIG_Callback5_t callback5, SwigDirector_TK_Cylinder::SWIG_Callback6_t callback6, SwigDirector_TK_Cylinder::SWIG_Callback7_t callback7, SwigDirector_TK_Cylinder::SWIG_Callback8_t callback8, SwigDirector_TK_Cylinder::SWIG_Callback9_t callback9) {
  TK_Cylinder *obj = (TK_Cylinder *)objarg;
  SwigDirector_TK_Cylinder *director = dynamic_cast<SwigDirector_TK_Cylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_PolyCylinder() {
  void * jresult ;
  TK_PolyCylinder *result = 0 ;
  
  result = (TK_PolyCylinder *)new SwigDirector_TK_PolyCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_PolyCylinder(void * jarg1) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_PolyCylinder const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_Reset(void * jarg1) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_ResetSwigExplicitTK_PolyCylinder(void * jarg1) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  (arg1)->TK_PolyCylinder::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoints(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_PolyCylinder_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (float *)((TK_PolyCylinder const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetRadii__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetRadii(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetRadii__SWIG_1(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRadii(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetRadius(void * jarg1, float jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  float arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_PolyCylinder_GetRadii__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (float *)((TK_PolyCylinder const *)arg1)->GetRadii();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPoints(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_PolyCylinder_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (double *)((TK_PolyCylinder const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetDRadii__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDRadii(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetDRadii__SWIG_1(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDRadii(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetDRadius(void * jarg1, double jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  double arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetDRadius(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_PolyCylinder_GetDRadii__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (double *)((TK_PolyCylinder const *)arg1)->GetDRadii();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_GetCount(void * jarg1) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (int)((TK_PolyCylinder const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_GetRadiusCount(void * jarg1) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (int)((TK_PolyCylinder const *)arg1)->GetRadiusCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetCaps(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCaps(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyCylinder_GetCaps(void * jarg1) {
  int jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int result;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  result = (int)((TK_PolyCylinder const *)arg1)->GetCaps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetEndNormal__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetEndNormal(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_SetEndNormal__SWIG_1(void * jarg1, int jarg2) {
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEndNormal(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_PolyCylinder_GetEndNormal(void * jarg1, int jarg2) {
  float * jresult ;
  TK_PolyCylinder *arg1 = (TK_PolyCylinder *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (TK_PolyCylinder *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)((TK_PolyCylinder const *)arg1)->GetEndNormal(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyCylinder_director_connect(void *objarg, SwigDirector_TK_PolyCylinder::SWIG_Callback0_t callback0, SwigDirector_TK_PolyCylinder::SWIG_Callback1_t callback1, SwigDirector_TK_PolyCylinder::SWIG_Callback2_t callback2, SwigDirector_TK_PolyCylinder::SWIG_Callback3_t callback3, SwigDirector_TK_PolyCylinder::SWIG_Callback4_t callback4, SwigDirector_TK_PolyCylinder::SWIG_Callback5_t callback5, SwigDirector_TK_PolyCylinder::SWIG_Callback6_t callback6, SwigDirector_TK_PolyCylinder::SWIG_Callback7_t callback7, SwigDirector_TK_PolyCylinder::SWIG_Callback8_t callback8, SwigDirector_TK_PolyCylinder::SWIG_Callback9_t callback9, SwigDirector_TK_PolyCylinder::SWIG_Callback10_t callback10, SwigDirector_TK_PolyCylinder::SWIG_Callback11_t callback11, SwigDirector_TK_PolyCylinder::SWIG_Callback12_t callback12, SwigDirector_TK_PolyCylinder::SWIG_Callback13_t callback13, SwigDirector_TK_PolyCylinder::SWIG_Callback14_t callback14, SwigDirector_TK_PolyCylinder::SWIG_Callback15_t callback15, SwigDirector_TK_PolyCylinder::SWIG_Callback16_t callback16, SwigDirector_TK_PolyCylinder::SWIG_Callback17_t callback17, SwigDirector_TK_PolyCylinder::SWIG_Callback18_t callback18, SwigDirector_TK_PolyCylinder::SWIG_Callback19_t callback19, SwigDirector_TK_PolyCylinder::SWIG_Callback20_t callback20, SwigDirector_TK_PolyCylinder::SWIG_Callback21_t callback21, SwigDirector_TK_PolyCylinder::SWIG_Callback22_t callback22, SwigDirector_TK_PolyCylinder::SWIG_Callback23_t callback23, SwigDirector_TK_PolyCylinder::SWIG_Callback24_t callback24, SwigDirector_TK_PolyCylinder::SWIG_Callback25_t callback25) {
  TK_PolyCylinder *obj = (TK_PolyCylinder *)objarg;
  SwigDirector_TK_PolyCylinder *director = dynamic_cast<SwigDirector_TK_PolyCylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Grid() {
  void * jresult ;
  TK_Grid *result = 0 ;
  
  result = (TK_Grid *)new SwigDirector_TK_Grid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_ReadSwigExplicitTK_Grid(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Grid::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_WriteSwigExplicitTK_Grid(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Grid::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Grid const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_CloneSwigExplicitTK_Grid(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Grid const *)arg1)->TK_Grid::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetOrigin__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetOrigin(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetOrigin__SWIG_1(void * jarg1, float * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetOrigin((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Grid_GetOrigin__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (float *)((TK_Grid const *)arg1)->GetOrigin();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetRef1__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRef1(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetRef1__SWIG_1(void * jarg1, float * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetRef1((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Grid_GetRef1__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (float *)((TK_Grid const *)arg1)->GetRef1();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetRef2__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRef2(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetRef2__SWIG_1(void * jarg1, float * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetRef2((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Grid_GetRef2__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (float *)((TK_Grid const *)arg1)->GetRef2();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDOrigin__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDOrigin(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDOrigin__SWIG_1(void * jarg1, double * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDOrigin((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Grid_GetDOrigin__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (double *)((TK_Grid const *)arg1)->GetDOrigin();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDRef1__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDRef1(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDRef1__SWIG_1(void * jarg1, double * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDRef1((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Grid_GetDRef1__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (double *)((TK_Grid const *)arg1)->GetDRef1();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDRef2__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDRef2(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetDRef2__SWIG_1(void * jarg1, double * jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDRef2((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Grid_GetDRef2__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (double *)((TK_Grid const *)arg1)->GetDRef2();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetCounts(void * jarg1, int jarg2, int jarg3) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetCounts(arg2,arg3);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Grid_GetCounts__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (int *)((TK_Grid const *)arg1)->GetCounts();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_SetType(void * jarg1, int jarg2) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Grid *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Grid_GetTKType(void * jarg1) {
  int jresult ;
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  int result;
  
  arg1 = (TK_Grid *)jarg1; 
  result = (int)((TK_Grid const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Grid(void * jarg1) {
  TK_Grid *arg1 = (TK_Grid *) 0 ;
  
  arg1 = (TK_Grid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Grid_director_connect(void *objarg, SwigDirector_TK_Grid::SWIG_Callback0_t callback0, SwigDirector_TK_Grid::SWIG_Callback1_t callback1, SwigDirector_TK_Grid::SWIG_Callback2_t callback2, SwigDirector_TK_Grid::SWIG_Callback3_t callback3, SwigDirector_TK_Grid::SWIG_Callback4_t callback4, SwigDirector_TK_Grid::SWIG_Callback5_t callback5, SwigDirector_TK_Grid::SWIG_Callback6_t callback6, SwigDirector_TK_Grid::SWIG_Callback7_t callback7, SwigDirector_TK_Grid::SWIG_Callback8_t callback8, SwigDirector_TK_Grid::SWIG_Callback9_t callback9) {
  TK_Grid *obj = (TK_Grid *)objarg;
  SwigDirector_TK_Grid *director = dynamic_cast<SwigDirector_TK_Grid *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_size_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_size_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_vertical_offset_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->vertical_offset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_vertical_offset_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->vertical_offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_horizontal_offset_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->horizontal_offset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_horizontal_offset_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->horizontal_offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_slant_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->slant = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_slant_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->slant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_rotation_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rotation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_rotation_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_width_scale_set(void * jarg1, float jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->width_scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_TK_Character_Attribute_width_scale_get(void * jarg1) {
  float jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  float result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (float) ((arg1)->width_scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_mask_set(void * jarg1, unsigned short jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TK_Character_Attribute_mask_get(void * jarg1) {
  unsigned short jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned short result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (unsigned short) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_value_set(void * jarg1, unsigned short jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TK_Character_Attribute_value_get(void * jarg1) {
  unsigned short jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned short result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (unsigned short) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_size_units_set(void * jarg1, unsigned char jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->size_units = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TK_Character_Attribute_size_units_get(void * jarg1) {
  unsigned char jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (unsigned char) ((arg1)->size_units);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_vertical_offset_units_set(void * jarg1, unsigned char jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->vertical_offset_units = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TK_Character_Attribute_vertical_offset_units_get(void * jarg1) {
  unsigned char jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (unsigned char) ((arg1)->vertical_offset_units);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Character_Attribute_horizontal_offset_units_set(void * jarg1, unsigned char jarg2) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->horizontal_offset_units = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TK_Character_Attribute_horizontal_offset_units_get(void * jarg1) {
  unsigned char jresult ;
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  unsigned char result;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  result = (unsigned char) ((arg1)->horizontal_offset_units);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Character_Attribute() {
  void * jresult ;
  TK_Character_Attribute *result = 0 ;
  
  result = (TK_Character_Attribute *)new TK_Character_Attribute();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Character_Attribute(void * jarg1) {
  TK_Character_Attribute *arg1 = (TK_Character_Attribute *) 0 ;
  
  arg1 = (TK_Character_Attribute *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Text(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Text *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Text *)new SwigDirector_TK_Text(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Text(void * jarg1) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_ReadSwigExplicitTK_Text(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Text::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_WriteSwigExplicitTK_Text(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Text::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Text const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_CloneSwigExplicitTK_Text(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Text const *)arg1)->TK_Text::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_Reset(void * jarg1) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_ResetSwigExplicitTK_Text(void * jarg1) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  (arg1)->TK_Text::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetString__SWIG_0(void * jarg1, char * jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetString__SWIG_1(void * jarg1, unsigned short * jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  (arg1)->SetString((unsigned short const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetString__SWIG_2(void * jarg1, unsigned int * jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (unsigned int *)jarg2;
  (arg1)->SetString((unsigned int const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetString__SWIG_3(void * jarg1, int jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetString(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Text_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  result = (char *)((TK_Text const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetPosition__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetPosition__SWIG_1(void * jarg1, float * jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPosition((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Text_GetPosition(void * jarg1) {
  float * jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  result = (float *)((TK_Text const *)arg1)->GetPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetDPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetDPosition__SWIG_1(void * jarg1, double * jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPosition((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Text_GetDPosition(void * jarg1) {
  double * jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  result = (double *)((TK_Text const *)arg1)->GetDPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetEncoding(void * jarg1, int jarg2) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEncoding(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_GetEncoding(void * jarg1) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  int result;
  
  arg1 = (TK_Text *)jarg1; 
  result = (int)((TK_Text const *)arg1)->GetEncoding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetTextRegion__SWIG_0(void * jarg1, int jarg2, float * jarg3, int jarg4, int jarg5) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  int arg2 ;
  float *arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetTextRegion(arg2,(float const (*))arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetTextRegion__SWIG_1(void * jarg1, int jarg2, float * jarg3, int jarg4) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  int arg2 ;
  float *arg3 ;
  int arg4 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetTextRegion(arg2,(float const (*))arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_SetTextRegion__SWIG_2(void * jarg1, int jarg2, float * jarg3) {
  TK_Text *arg1 = (TK_Text *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Text *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetTextRegion(arg2,(float const (*))arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_GetTextRegionCount(void * jarg1) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  int result;
  
  arg1 = (TK_Text *)jarg1; 
  result = (int)((TK_Text const *)arg1)->GetTextRegionCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Text_GetTextRegionPoints(void * jarg1) {
  float * jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Text *)jarg1; 
  result = (float *)((TK_Text const *)arg1)->GetTextRegionPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_GetTextRegionOptions(void * jarg1) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  int result;
  
  arg1 = (TK_Text *)jarg1; 
  result = (int)((TK_Text const *)arg1)->GetTextRegionOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Text_GetTextRegionFitting(void * jarg1) {
  int jresult ;
  TK_Text *arg1 = (TK_Text *) 0 ;
  int result;
  
  arg1 = (TK_Text *)jarg1; 
  result = (int)((TK_Text const *)arg1)->GetTextRegionFitting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Text_director_connect(void *objarg, SwigDirector_TK_Text::SWIG_Callback0_t callback0, SwigDirector_TK_Text::SWIG_Callback1_t callback1, SwigDirector_TK_Text::SWIG_Callback2_t callback2, SwigDirector_TK_Text::SWIG_Callback3_t callback3, SwigDirector_TK_Text::SWIG_Callback4_t callback4, SwigDirector_TK_Text::SWIG_Callback5_t callback5, SwigDirector_TK_Text::SWIG_Callback6_t callback6, SwigDirector_TK_Text::SWIG_Callback7_t callback7, SwigDirector_TK_Text::SWIG_Callback8_t callback8, SwigDirector_TK_Text::SWIG_Callback9_t callback9) {
  TK_Text *obj = (TK_Text *)objarg;
  SwigDirector_TK_Text *director = dynamic_cast<SwigDirector_TK_Text *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Font() {
  void * jresult ;
  TK_Font *result = 0 ;
  
  result = (TK_Font *)new SwigDirector_TK_Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Font(void * jarg1) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_ReadSwigExplicitTK_Font(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Font::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_WriteSwigExplicitTK_Font(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Font::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Font const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_CloneSwigExplicitTK_Font(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Font const *)arg1)->TK_Font::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_Reset(void * jarg1) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_ResetSwigExplicitTK_Font(void * jarg1) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  (arg1)->TK_Font::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetType(void * jarg1, int jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_GetTKType(void * jarg1) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  int result;
  
  arg1 = (TK_Font *)jarg1; 
  result = (int)((TK_Font const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetBytes__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetBytes(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetBytes__SWIG_1(void * jarg1, int jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBytes(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_GetBytesCount(void * jarg1) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  int result;
  
  arg1 = (TK_Font *)jarg1; 
  result = (int)((TK_Font const *)arg1)->GetBytesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Font_GetBytes__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  result = (char *)((TK_Font const *)arg1)->GetBytes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Font_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  result = (char *)((TK_Font const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetLookup__SWIG_0(void * jarg1, char * jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLookup((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetLookup__SWIG_1(void * jarg1, int jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLookup(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Font_GetLookup__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Font *)jarg1; 
  result = (char *)((TK_Font const *)arg1)->GetLookup();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_SetEncoding(void * jarg1, int jarg2) {
  TK_Font *arg1 = (TK_Font *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Font *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetEncoding(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Font_GetEncoding(void * jarg1) {
  int jresult ;
  TK_Font *arg1 = (TK_Font *) 0 ;
  int result;
  
  arg1 = (TK_Font *)jarg1; 
  result = (int)((TK_Font const *)arg1)->GetEncoding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Font_director_connect(void *objarg, SwigDirector_TK_Font::SWIG_Callback0_t callback0, SwigDirector_TK_Font::SWIG_Callback1_t callback1, SwigDirector_TK_Font::SWIG_Callback2_t callback2, SwigDirector_TK_Font::SWIG_Callback3_t callback3, SwigDirector_TK_Font::SWIG_Callback4_t callback4, SwigDirector_TK_Font::SWIG_Callback5_t callback5, SwigDirector_TK_Font::SWIG_Callback6_t callback6, SwigDirector_TK_Font::SWIG_Callback7_t callback7, SwigDirector_TK_Font::SWIG_Callback8_t callback8, SwigDirector_TK_Font::SWIG_Callback9_t callback9) {
  TK_Font *obj = (TK_Font *)objarg;
  SwigDirector_TK_Font *director = dynamic_cast<SwigDirector_TK_Font *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Image_Data_Buffer() {
  void * jresult ;
  TK_Image_Data_Buffer *result = 0 ;
  
  result = (TK_Image_Data_Buffer *)new TK_Image_Data_Buffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Image_Data_Buffer(void * jarg1) {
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Resize(void * jarg1, unsigned int jarg2) {
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Expand(void * jarg1, unsigned int jarg2) {
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Expand(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Reset(void * jarg1) {
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Size(void * jarg1) {
  unsigned int jresult ;
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  result = (unsigned int *) &((TK_Image_Data_Buffer const *)arg1)->Size();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Used__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  result = (unsigned int *) &((TK_Image_Data_Buffer const *)arg1)->Used();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_TK_Image_Data_Buffer_Buffer__SWIG_0(void * jarg1) {
  unsigned char * jresult ;
  TK_Image_Data_Buffer *arg1 = (TK_Image_Data_Buffer *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (TK_Image_Data_Buffer *)jarg1; 
  result = (unsigned char *)((TK_Image_Data_Buffer const *)arg1)->Buffer();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Image() {
  void * jresult ;
  TK_Image *result = 0 ;
  
  result = (TK_Image *)new SwigDirector_TK_Image();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Image(void * jarg1) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_ReadSwigExplicitTK_Image(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Image::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_WriteSwigExplicitTK_Image(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Image::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Image const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_CloneSwigExplicitTK_Image(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Image const *)arg1)->TK_Image::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_compress_image_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->compress_image_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_Reset(void * jarg1) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_ResetSwigExplicitTK_Image(void * jarg1) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  (arg1)->TK_Image::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetBytes__SWIG_0(void * jarg1, int jarg2, char * jarg3, unsigned char jarg4) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned char arg4 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->SetBytes(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetBytes__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetBytes(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetBytes__SWIG_2(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBytes(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Image_GetBytes__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (char *)((TK_Image const *)arg1)->GetBytes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Image_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (char *)((TK_Image const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetReference__SWIG_0(void * jarg1, char * jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetReference((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetReference__SWIG_1(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetReference(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Image_GetReference__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (char *)((TK_Image const *)arg1)->GetReference();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetPosition__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetPosition__SWIG_1(void * jarg1, float * jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  float *arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPosition((float const (*))arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Image_GetPosition(void * jarg1) {
  float * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (float *)((TK_Image const *)arg1)->GetPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetDPosition__SWIG_0(void * jarg1, double jarg2, double jarg3, double jarg4) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetDPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetDPosition__SWIG_1(void * jarg1, double * jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  double *arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (double *)jarg2; 
  (arg1)->SetDPosition((double const (*))arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Image_GetDPosition(void * jarg1) {
  double * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (double *)((TK_Image const *)arg1)->GetDPosition();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetSize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetSize__SWIG_1(void * jarg1, int * jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int *arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->SetSize((int const (*))arg2);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Image_GetSize(void * jarg1) {
  int * jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Image *)jarg1; 
  result = (int *)((TK_Image const *)arg1)->GetSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetFormat(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFormat(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_GetFormat(void * jarg1) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  int result;
  
  arg1 = (TK_Image *)jarg1; 
  result = (int)((TK_Image const *)arg1)->GetFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetOptions(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_GetOptions(void * jarg1) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  int result;
  
  arg1 = (TK_Image *)jarg1; 
  result = (int)((TK_Image const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_SetCompression(void * jarg1, int jarg2) {
  TK_Image *arg1 = (TK_Image *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Image *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCompression(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Image_GetCompression(void * jarg1) {
  int jresult ;
  TK_Image *arg1 = (TK_Image *) 0 ;
  int result;
  
  arg1 = (TK_Image *)jarg1; 
  result = (int)((TK_Image const *)arg1)->GetCompression();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Image_director_connect(void *objarg, SwigDirector_TK_Image::SWIG_Callback0_t callback0, SwigDirector_TK_Image::SWIG_Callback1_t callback1, SwigDirector_TK_Image::SWIG_Callback2_t callback2, SwigDirector_TK_Image::SWIG_Callback3_t callback3, SwigDirector_TK_Image::SWIG_Callback4_t callback4, SwigDirector_TK_Image::SWIG_Callback5_t callback5, SwigDirector_TK_Image::SWIG_Callback6_t callback6, SwigDirector_TK_Image::SWIG_Callback7_t callback7, SwigDirector_TK_Image::SWIG_Callback8_t callback8, SwigDirector_TK_Image::SWIG_Callback9_t callback9) {
  TK_Image *obj = (TK_Image *)objarg;
  SwigDirector_TK_Image *director = dynamic_cast<SwigDirector_TK_Image *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Texture() {
  void * jresult ;
  TK_Texture *result = 0 ;
  
  result = (TK_Texture *)new SwigDirector_TK_Texture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Texture(void * jarg1) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_ReadSwigExplicitTK_Texture(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Texture::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_WriteSwigExplicitTK_Texture(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Texture::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Texture const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_CloneSwigExplicitTK_Texture(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Texture const *)arg1)->TK_Texture::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_Reset(void * jarg1) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_ResetSwigExplicitTK_Texture(void * jarg1) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  (arg1)->TK_Texture::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Texture_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (char *)((TK_Texture const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetShaderSource__SWIG_0(void * jarg1, char * jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetShaderSource((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetShaderSource__SWIG_1(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShaderSource(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Texture_GetShaderSource__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (char *)((TK_Texture const *)arg1)->GetShaderSource();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetImage__SWIG_0(void * jarg1, char * jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetImage((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetImage__SWIG_1(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetImage(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Texture_GetImage__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (char *)((TK_Texture const *)arg1)->GetImage();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetCamera__SWIG_0(void * jarg1, char * jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCamera((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetCamera__SWIG_1(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCamera(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Texture_GetCamera__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (char *)((TK_Texture const *)arg1)->GetCamera();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetFlags(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetFlags(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetParameterSource(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetParameterSource(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetParameterSource(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetParameterSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetInterpolation(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInterpolation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetInterpolation(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetInterpolation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetDecimation(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDecimation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetDecimation(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetDecimation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetRedMapping(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRedMapping(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetRedMapping(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetRedMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetGreenMapping(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGreenMapping(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetGreenMapping(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetGreenMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetBlueMapping(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBlueMapping(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetBlueMapping(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetBlueMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetAlphaMapping(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAlphaMapping(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetAlphaMapping(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetAlphaMapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetParameterFunction(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetParameterFunction(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetParameterFunction(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetParameterFunction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetLayout(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLayout(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetLayout(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetLayout();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetTiling(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTiling(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetTiling(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetTiling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetValueScale(void * jarg1, float jarg2, float jarg3) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetValueScale(arg2,arg3);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Texture_GetValueScale(void * jarg1) {
  float * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (float *)((TK_Texture const *)arg1)->GetValueScale();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetApplicationMode(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetApplicationMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetApplicationMode(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetApplicationMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetParameterOffset(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetParameterOffset(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Texture_GetParameterOffset(void * jarg1) {
  int jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int result;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (int)((TK_Texture const *)arg1)->GetParameterOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetTransform__SWIG_0(void * jarg1, char * jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTransform((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_SetTransform__SWIG_1(void * jarg1, int jarg2) {
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Texture *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTransform(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Texture_GetTransform__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Texture *arg1 = (TK_Texture *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Texture *)jarg1; 
  result = (char *)((TK_Texture const *)arg1)->GetTransform();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Texture_director_connect(void *objarg, SwigDirector_TK_Texture::SWIG_Callback0_t callback0, SwigDirector_TK_Texture::SWIG_Callback1_t callback1, SwigDirector_TK_Texture::SWIG_Callback2_t callback2, SwigDirector_TK_Texture::SWIG_Callback3_t callback3, SwigDirector_TK_Texture::SWIG_Callback4_t callback4, SwigDirector_TK_Texture::SWIG_Callback5_t callback5, SwigDirector_TK_Texture::SWIG_Callback6_t callback6, SwigDirector_TK_Texture::SWIG_Callback7_t callback7, SwigDirector_TK_Texture::SWIG_Callback8_t callback8, SwigDirector_TK_Texture::SWIG_Callback9_t callback9) {
  TK_Texture *obj = (TK_Texture *)objarg;
  SwigDirector_TK_Texture *director = dynamic_cast<SwigDirector_TK_Texture *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Thumbnail() {
  void * jresult ;
  TK_Thumbnail *result = 0 ;
  
  result = (TK_Thumbnail *)new SwigDirector_TK_Thumbnail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Thumbnail(void * jarg1) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_ReadSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Thumbnail::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_WriteSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Thumbnail::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Thumbnail const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_CloneSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Thumbnail const *)arg1)->TK_Thumbnail::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_ExecuteSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Thumbnail::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_InterpretSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->TK_Thumbnail::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_Interpret_specialSwigExplicitTK_Thumbnail(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->TK_Thumbnail::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_Reset(void * jarg1) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_ResetSwigExplicitTK_Thumbnail(void * jarg1) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  (arg1)->TK_Thumbnail::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_SetBytes__SWIG_0(void * jarg1, int jarg2, unsigned char * jarg3) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3;
  (arg1)->SetBytes(arg2,(unsigned char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_SetBytes__SWIG_1(void * jarg1, int jarg2) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBytes(arg2);
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_TK_Thumbnail_GetBytes__SWIG_0(void * jarg1) {
  unsigned char * jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  result = (unsigned char *)((TK_Thumbnail const *)arg1)->GetBytes();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_SetSize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_SetSize__SWIG_1(void * jarg1, int * jarg2) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int *arg2 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->SetSize((int const (*))arg2);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Thumbnail_GetSize(void * jarg1) {
  int * jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  result = (int *)((TK_Thumbnail const *)arg1)->GetSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_SetFormat(void * jarg1, int jarg2) {
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFormat(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Thumbnail_GetFormat(void * jarg1) {
  int jresult ;
  TK_Thumbnail *arg1 = (TK_Thumbnail *) 0 ;
  int result;
  
  arg1 = (TK_Thumbnail *)jarg1; 
  result = (int)((TK_Thumbnail const *)arg1)->GetFormat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Thumbnail_director_connect(void *objarg, SwigDirector_TK_Thumbnail::SWIG_Callback0_t callback0, SwigDirector_TK_Thumbnail::SWIG_Callback1_t callback1, SwigDirector_TK_Thumbnail::SWIG_Callback2_t callback2, SwigDirector_TK_Thumbnail::SWIG_Callback3_t callback3, SwigDirector_TK_Thumbnail::SWIG_Callback4_t callback4, SwigDirector_TK_Thumbnail::SWIG_Callback5_t callback5, SwigDirector_TK_Thumbnail::SWIG_Callback6_t callback6, SwigDirector_TK_Thumbnail::SWIG_Callback7_t callback7, SwigDirector_TK_Thumbnail::SWIG_Callback8_t callback8, SwigDirector_TK_Thumbnail::SWIG_Callback9_t callback9) {
  TK_Thumbnail *obj = (TK_Thumbnail *)objarg;
  SwigDirector_TK_Thumbnail *director = dynamic_cast<SwigDirector_TK_Thumbnail *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Glyph_Definition() {
  void * jresult ;
  TK_Glyph_Definition *result = 0 ;
  
  result = (TK_Glyph_Definition *)new SwigDirector_TK_Glyph_Definition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Glyph_Definition(void * jarg1) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_ReadSwigExplicitTK_Glyph_Definition(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Glyph_Definition::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_WriteSwigExplicitTK_Glyph_Definition(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Glyph_Definition::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Glyph_Definition const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_CloneSwigExplicitTK_Glyph_Definition(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Glyph_Definition const *)arg1)->TK_Glyph_Definition::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_Reset(void * jarg1) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_ResetSwigExplicitTK_Glyph_Definition(void * jarg1) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  (arg1)->TK_Glyph_Definition::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Glyph_Definition_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  result = (char *)((TK_Glyph_Definition const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_SetDefinition__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetDefinition(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_SetDefinition__SWIG_1(void * jarg1, int jarg2) {
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDefinition(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Glyph_Definition_GetDefinitionSize(void * jarg1) {
  int jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  int result;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  result = (int)((TK_Glyph_Definition const *)arg1)->GetDefinitionSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Glyph_Definition_GetDefinition__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Glyph_Definition *arg1 = (TK_Glyph_Definition *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Glyph_Definition *)jarg1; 
  result = (char *)((TK_Glyph_Definition const *)arg1)->GetDefinition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Glyph_Definition_director_connect(void *objarg, SwigDirector_TK_Glyph_Definition::SWIG_Callback0_t callback0, SwigDirector_TK_Glyph_Definition::SWIG_Callback1_t callback1, SwigDirector_TK_Glyph_Definition::SWIG_Callback2_t callback2, SwigDirector_TK_Glyph_Definition::SWIG_Callback3_t callback3, SwigDirector_TK_Glyph_Definition::SWIG_Callback4_t callback4, SwigDirector_TK_Glyph_Definition::SWIG_Callback5_t callback5, SwigDirector_TK_Glyph_Definition::SWIG_Callback6_t callback6, SwigDirector_TK_Glyph_Definition::SWIG_Callback7_t callback7, SwigDirector_TK_Glyph_Definition::SWIG_Callback8_t callback8, SwigDirector_TK_Glyph_Definition::SWIG_Callback9_t callback9) {
  TK_Glyph_Definition *obj = (TK_Glyph_Definition *)objarg;
  SwigDirector_TK_Glyph_Definition *director = dynamic_cast<SwigDirector_TK_Glyph_Definition *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Named_Style_Def() {
  void * jresult ;
  TK_Named_Style_Def *result = 0 ;
  
  result = (TK_Named_Style_Def *)new TK_Named_Style_Def();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Named_Style_Def(void * jarg1) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Style_Def_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Style_Def_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Style_Def_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Named_Style_Def const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Style_Def_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Named_Style_Def_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Style_Def_Reset(void * jarg1) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Style_Def_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Style_Def_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Named_Style_Def_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  result = (char *)((TK_Named_Style_Def const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Style_Def_SetSegment__SWIG_0(void * jarg1, char * jarg2) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetSegment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Named_Style_Def_SetSegment__SWIG_1(void * jarg1, int jarg2) {
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSegment(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Named_Style_Def_GetSegment__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Named_Style_Def *arg1 = (TK_Named_Style_Def *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Named_Style_Def *)jarg1; 
  result = (char *)((TK_Named_Style_Def const *)arg1)->GetSegment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Line_Style() {
  void * jresult ;
  TK_Line_Style *result = 0 ;
  
  result = (TK_Line_Style *)new SwigDirector_TK_Line_Style();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Line_Style(void * jarg1) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_ReadSwigExplicitTK_Line_Style(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Line_Style::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_WriteSwigExplicitTK_Line_Style(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Line_Style::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Line_Style const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_CloneSwigExplicitTK_Line_Style(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Line_Style const *)arg1)->TK_Line_Style::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Line_Style_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_Reset(void * jarg1) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_ResetSwigExplicitTK_Line_Style(void * jarg1) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  (arg1)->TK_Line_Style::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_SetName__SWIG_0(void * jarg1, char * jarg2) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_SetName__SWIG_1(void * jarg1, int jarg2) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Line_Style_GetName__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  result = (char *)((TK_Line_Style const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_SetDefinition__SWIG_0(void * jarg1, char * jarg2) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetDefinition((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_SetDefinition__SWIG_1(void * jarg1, int jarg2) {
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDefinition(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_Line_Style_GetDefinition__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_Line_Style *arg1 = (TK_Line_Style *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_Line_Style *)jarg1; 
  result = (char *)((TK_Line_Style const *)arg1)->GetDefinition();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Line_Style_director_connect(void *objarg, SwigDirector_TK_Line_Style::SWIG_Callback0_t callback0, SwigDirector_TK_Line_Style::SWIG_Callback1_t callback1, SwigDirector_TK_Line_Style::SWIG_Callback2_t callback2, SwigDirector_TK_Line_Style::SWIG_Callback3_t callback3, SwigDirector_TK_Line_Style::SWIG_Callback4_t callback4, SwigDirector_TK_Line_Style::SWIG_Callback5_t callback5, SwigDirector_TK_Line_Style::SWIG_Callback6_t callback6, SwigDirector_TK_Line_Style::SWIG_Callback7_t callback7, SwigDirector_TK_Line_Style::SWIG_Callback8_t callback8, SwigDirector_TK_Line_Style::SWIG_Callback9_t callback9) {
  TK_Line_Style *obj = (TK_Line_Style *)objarg;
  SwigDirector_TK_Line_Style *director = dynamic_cast<SwigDirector_TK_Line_Style *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Clip_Rectangle() {
  void * jresult ;
  TK_Clip_Rectangle *result = 0 ;
  
  result = (TK_Clip_Rectangle *)new SwigDirector_TK_Clip_Rectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_ReadSwigExplicitTK_Clip_Rectangle(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Clip_Rectangle::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_WriteSwigExplicitTK_Clip_Rectangle(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Clip_Rectangle::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Clip_Rectangle const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_CloneSwigExplicitTK_Clip_Rectangle(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Clip_Rectangle const *)arg1)->TK_Clip_Rectangle::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_Reset(void * jarg1) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_ResetSwigExplicitTK_Clip_Rectangle(void * jarg1) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  (arg1)->TK_Clip_Rectangle::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_SetRectangle__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetRectangle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_SetRectangle__SWIG_1(void * jarg1, float * jarg2) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (float *)jarg2;
  (arg1)->SetRectangle((float const *)arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Clip_Rectangle_GetRectangle(void * jarg1) {
  float * jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  result = (float *)((TK_Clip_Rectangle const *)arg1)->GetRectangle();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_SetOptions(void * jarg1, int jarg2) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Rectangle_GetOptions(void * jarg1) {
  int jresult ;
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  int result;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  result = (int)((TK_Clip_Rectangle const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Clip_Rectangle(void * jarg1) {
  TK_Clip_Rectangle *arg1 = (TK_Clip_Rectangle *) 0 ;
  
  arg1 = (TK_Clip_Rectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Rectangle_director_connect(void *objarg, SwigDirector_TK_Clip_Rectangle::SWIG_Callback0_t callback0, SwigDirector_TK_Clip_Rectangle::SWIG_Callback1_t callback1, SwigDirector_TK_Clip_Rectangle::SWIG_Callback2_t callback2, SwigDirector_TK_Clip_Rectangle::SWIG_Callback3_t callback3, SwigDirector_TK_Clip_Rectangle::SWIG_Callback4_t callback4, SwigDirector_TK_Clip_Rectangle::SWIG_Callback5_t callback5, SwigDirector_TK_Clip_Rectangle::SWIG_Callback6_t callback6, SwigDirector_TK_Clip_Rectangle::SWIG_Callback7_t callback7, SwigDirector_TK_Clip_Rectangle::SWIG_Callback8_t callback8, SwigDirector_TK_Clip_Rectangle::SWIG_Callback9_t callback9) {
  TK_Clip_Rectangle *obj = (TK_Clip_Rectangle *)objarg;
  SwigDirector_TK_Clip_Rectangle *director = dynamic_cast<SwigDirector_TK_Clip_Rectangle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Clip_Region() {
  void * jresult ;
  TK_Clip_Region *result = 0 ;
  
  result = (TK_Clip_Region *)new SwigDirector_TK_Clip_Region();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Clip_Region(void * jarg1) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_ReadSwigExplicitTK_Clip_Region(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Clip_Region::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_WriteSwigExplicitTK_Clip_Region(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Clip_Region::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Clip_Region const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_CloneSwigExplicitTK_Clip_Region(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Clip_Region const *)arg1)->TK_Clip_Region::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_Reset(void * jarg1) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_ResetSwigExplicitTK_Clip_Region(void * jarg1) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  (arg1)->TK_Clip_Region::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoints(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Clip_Region_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  result = (float *)((TK_Clip_Region const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPoints(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Clip_Region_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  result = (double *)((TK_Clip_Region const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_GetCount(void * jarg1) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  result = (int)((TK_Clip_Region const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_SetOptions(void * jarg1, int jarg2) {
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Clip_Region_GetOptions(void * jarg1) {
  int jresult ;
  TK_Clip_Region *arg1 = (TK_Clip_Region *) 0 ;
  int result;
  
  arg1 = (TK_Clip_Region *)jarg1; 
  result = (int)((TK_Clip_Region const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Clip_Region_director_connect(void *objarg, SwigDirector_TK_Clip_Region::SWIG_Callback0_t callback0, SwigDirector_TK_Clip_Region::SWIG_Callback1_t callback1, SwigDirector_TK_Clip_Region::SWIG_Callback2_t callback2, SwigDirector_TK_Clip_Region::SWIG_Callback3_t callback3, SwigDirector_TK_Clip_Region::SWIG_Callback4_t callback4, SwigDirector_TK_Clip_Region::SWIG_Callback5_t callback5, SwigDirector_TK_Clip_Region::SWIG_Callback6_t callback6, SwigDirector_TK_Clip_Region::SWIG_Callback7_t callback7, SwigDirector_TK_Clip_Region::SWIG_Callback8_t callback8, SwigDirector_TK_Clip_Region::SWIG_Callback9_t callback9) {
  TK_Clip_Region *obj = (TK_Clip_Region *)objarg;
  SwigDirector_TK_Clip_Region *director = dynamic_cast<SwigDirector_TK_Clip_Region *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Complex_Clip_Region() {
  void * jresult ;
  TK_Complex_Clip_Region *result = 0 ;
  
  result = (TK_Complex_Clip_Region *)new TK_Complex_Clip_Region();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Complex_Clip_Region(void * jarg1) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Complex_Clip_Region const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_Reset(void * jarg1) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetPoints(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPoints(arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (float *)((TK_Complex_Clip_Region const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  double *arg3 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  (arg1)->SetDPoints(arg2,(double const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDPoints(arg2);
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (double *)((TK_Complex_Clip_Region const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetLengths__SWIG_0(void * jarg1, int jarg2, int * jarg3) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  int *arg3 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->SetLengths(arg2,(int const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetLengths__SWIG_1(void * jarg1, int jarg2) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLengths(arg2);
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetLengths__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (int *)((TK_Complex_Clip_Region const *)arg1)->GetLengths();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetTotal(void * jarg1) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (int)((TK_Complex_Clip_Region const *)arg1)->GetTotal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetLoops(void * jarg1) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (int)((TK_Complex_Clip_Region const *)arg1)->GetLoops();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Complex_Clip_Region_SetOptions(void * jarg1, int jarg2) {
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetOptions(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Complex_Clip_Region_GetOptions(void * jarg1) {
  int jresult ;
  TK_Complex_Clip_Region *arg1 = (TK_Complex_Clip_Region *) 0 ;
  int result;
  
  arg1 = (TK_Complex_Clip_Region *)jarg1; 
  result = (int)((TK_Complex_Clip_Region const *)arg1)->GetOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_User_Data() {
  void * jresult ;
  TK_User_Data *result = 0 ;
  
  result = (TK_User_Data *)new SwigDirector_TK_User_Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_User_Data(void * jarg1) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_ReadSwigExplicitTK_User_Data(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Data::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_WriteSwigExplicitTK_User_Data(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Data::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Data const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_CloneSwigExplicitTK_User_Data(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_User_Data const *)arg1)->TK_User_Data::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_ExecuteSwigExplicitTK_User_Data(void * jarg1, void * jarg2) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_User_Data::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_Reset(void * jarg1) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_ResetSwigExplicitTK_User_Data(void * jarg1) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  (arg1)->TK_User_Data::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_SetUserData__SWIG_0(void * jarg1, int jarg2, unsigned char * jarg3) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char *)jarg3;
  (arg1)->SetUserData(arg2,(unsigned char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_SetUserData__SWIG_1(void * jarg1, int jarg2) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT unsigned char * SWIGSTDCALL CSharp_TK_User_Data_GetUserData__SWIG_0(void * jarg1) {
  unsigned char * jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  result = (unsigned char *)((TK_User_Data const *)arg1)->GetUserData();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_User_Data_GetSize(void * jarg1) {
  int jresult ;
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  int result;
  
  arg1 = (TK_User_Data *)jarg1; 
  result = (int)((TK_User_Data const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_Resize(void * jarg1, int jarg2) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_SetSize(void * jarg1, int jarg2) {
  TK_User_Data *arg1 = (TK_User_Data *) 0 ;
  int arg2 ;
  
  arg1 = (TK_User_Data *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_User_Data_director_connect(void *objarg, SwigDirector_TK_User_Data::SWIG_Callback0_t callback0, SwigDirector_TK_User_Data::SWIG_Callback1_t callback1, SwigDirector_TK_User_Data::SWIG_Callback2_t callback2, SwigDirector_TK_User_Data::SWIG_Callback3_t callback3, SwigDirector_TK_User_Data::SWIG_Callback4_t callback4, SwigDirector_TK_User_Data::SWIG_Callback5_t callback5, SwigDirector_TK_User_Data::SWIG_Callback6_t callback6, SwigDirector_TK_User_Data::SWIG_Callback7_t callback7, SwigDirector_TK_User_Data::SWIG_Callback8_t callback8, SwigDirector_TK_User_Data::SWIG_Callback9_t callback9) {
  TK_User_Data *obj = (TK_User_Data *)objarg;
  SwigDirector_TK_User_Data *director = dynamic_cast<SwigDirector_TK_User_Data *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Material() {
  void * jresult ;
  TK_Material *result = 0 ;
  
  result = (TK_Material *)new TK_Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Material(void * jarg1) {
  TK_Material *arg1 = (TK_Material *) 0 ;
  
  arg1 = (TK_Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_Material const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Material_Reset(void * jarg1) {
  TK_Material *arg1 = (TK_Material *) 0 ;
  
  arg1 = (TK_Material *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_PushUserData__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (TK_Status)(arg1)->PushUserData((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_PushUserData__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->PushUserData((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Material_GetBlock(void * jarg1, void * jarg2, int * jarg3) {
  int jresult ;
  TK_Material *arg1 = (TK_Material *) 0 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Material *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (int *)jarg3;
  result = (TK_Status)(arg1)->GetBlock((char const **)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_XML() {
  void * jresult ;
  TK_XML *result = 0 ;
  
  result = (TK_XML *)new SwigDirector_TK_XML();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_XML(void * jarg1) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_ReadSwigExplicitTK_XML(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_XML::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_WriteSwigExplicitTK_XML(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_XML::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_XML const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_CloneSwigExplicitTK_XML(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_XML const *)arg1)->TK_XML::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_ExecuteSwigExplicitTK_XML(void * jarg1, void * jarg2) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_XML::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_Reset(void * jarg1) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_ResetSwigExplicitTK_XML(void * jarg1) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  (arg1)->TK_XML::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_SetXML__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetXML(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_SetXML__SWIG_1(void * jarg1, int jarg2) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  int arg2 ;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetXML(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_AppendXML__SWIG_0(void * jarg1, int jarg2, char * jarg3) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AppendXML(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_AppendXML__SWIG_1(void * jarg1, int jarg2) {
  TK_XML *arg1 = (TK_XML *) 0 ;
  int arg2 ;
  
  arg1 = (TK_XML *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AppendXML(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_XML_GetXML__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_XML *)jarg1; 
  result = (char *)((TK_XML const *)arg1)->GetXML();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_XML_GetSize(void * jarg1) {
  int jresult ;
  TK_XML *arg1 = (TK_XML *) 0 ;
  int result;
  
  arg1 = (TK_XML *)jarg1; 
  result = (int)((TK_XML const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_XML_director_connect(void *objarg, SwigDirector_TK_XML::SWIG_Callback0_t callback0, SwigDirector_TK_XML::SWIG_Callback1_t callback1, SwigDirector_TK_XML::SWIG_Callback2_t callback2, SwigDirector_TK_XML::SWIG_Callback3_t callback3, SwigDirector_TK_XML::SWIG_Callback4_t callback4, SwigDirector_TK_XML::SWIG_Callback5_t callback5, SwigDirector_TK_XML::SWIG_Callback6_t callback6, SwigDirector_TK_XML::SWIG_Callback7_t callback7, SwigDirector_TK_XML::SWIG_Callback8_t callback8, SwigDirector_TK_XML::SWIG_Callback9_t callback9) {
  TK_XML *obj = (TK_XML *)objarg;
  SwigDirector_TK_XML *director = dynamic_cast<SwigDirector_TK_XML *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_URL() {
  void * jresult ;
  TK_URL *result = 0 ;
  
  result = (TK_URL *)new SwigDirector_TK_URL();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_URL(void * jarg1) {
  TK_URL *arg1 = (TK_URL *) 0 ;
  
  arg1 = (TK_URL *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_ReadSwigExplicitTK_URL(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_URL::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_WriteSwigExplicitTK_URL(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_URL::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_URL const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_CloneSwigExplicitTK_URL(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_URL const *)arg1)->TK_URL::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_URL_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_URL_Reset(void * jarg1) {
  TK_URL *arg1 = (TK_URL *) 0 ;
  
  arg1 = (TK_URL *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_URL_ResetSwigExplicitTK_URL(void * jarg1) {
  TK_URL *arg1 = (TK_URL *) 0 ;
  
  arg1 = (TK_URL *)jarg1; 
  (arg1)->TK_URL::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_URL_SetString__SWIG_0(void * jarg1, char * jarg2) {
  TK_URL *arg1 = (TK_URL *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_URL_SetString__SWIG_1(void * jarg1, int jarg2) {
  TK_URL *arg1 = (TK_URL *) 0 ;
  int arg2 ;
  
  arg1 = (TK_URL *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetString(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_URL_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_URL *arg1 = (TK_URL *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_URL *)jarg1; 
  result = (char *)((TK_URL const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_URL_director_connect(void *objarg, SwigDirector_TK_URL::SWIG_Callback0_t callback0, SwigDirector_TK_URL::SWIG_Callback1_t callback1, SwigDirector_TK_URL::SWIG_Callback2_t callback2, SwigDirector_TK_URL::SWIG_Callback3_t callback3, SwigDirector_TK_URL::SWIG_Callback4_t callback4, SwigDirector_TK_URL::SWIG_Callback5_t callback5, SwigDirector_TK_URL::SWIG_Callback6_t callback6, SwigDirector_TK_URL::SWIG_Callback7_t callback7, SwigDirector_TK_URL::SWIG_Callback8_t callback8, SwigDirector_TK_URL::SWIG_Callback9_t callback9) {
  TK_URL *obj = (TK_URL *)objarg;
  SwigDirector_TK_URL *director = dynamic_cast<SwigDirector_TK_URL *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_External_Reference() {
  void * jresult ;
  TK_External_Reference *result = 0 ;
  
  result = (TK_External_Reference *)new SwigDirector_TK_External_Reference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_External_Reference(void * jarg1) {
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_ReadSwigExplicitTK_External_Reference(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_External_Reference::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_WriteSwigExplicitTK_External_Reference(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_External_Reference::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_External_Reference const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_CloneSwigExplicitTK_External_Reference(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_External_Reference const *)arg1)->TK_External_Reference::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_ExecuteSwigExplicitTK_External_Reference(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_External_Reference::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_Reset(void * jarg1) {
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_ResetSwigExplicitTK_External_Reference(void * jarg1) {
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  (arg1)->TK_External_Reference::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_SetString__SWIG_0(void * jarg1, char * jarg2) {
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_SetString__SWIG_1(void * jarg1, int jarg2) {
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  int arg2 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetString(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TK_External_Reference_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  TK_External_Reference *arg1 = (TK_External_Reference *) 0 ;
  char *result = 0 ;
  
  arg1 = (TK_External_Reference *)jarg1; 
  result = (char *)((TK_External_Reference const *)arg1)->GetString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_director_connect(void *objarg, SwigDirector_TK_External_Reference::SWIG_Callback0_t callback0, SwigDirector_TK_External_Reference::SWIG_Callback1_t callback1, SwigDirector_TK_External_Reference::SWIG_Callback2_t callback2, SwigDirector_TK_External_Reference::SWIG_Callback3_t callback3, SwigDirector_TK_External_Reference::SWIG_Callback4_t callback4, SwigDirector_TK_External_Reference::SWIG_Callback5_t callback5, SwigDirector_TK_External_Reference::SWIG_Callback6_t callback6, SwigDirector_TK_External_Reference::SWIG_Callback7_t callback7, SwigDirector_TK_External_Reference::SWIG_Callback8_t callback8, SwigDirector_TK_External_Reference::SWIG_Callback9_t callback9) {
  TK_External_Reference *obj = (TK_External_Reference *)objarg;
  SwigDirector_TK_External_Reference *director = dynamic_cast<SwigDirector_TK_External_Reference *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_External_Reference_Unicode() {
  void * jresult ;
  TK_External_Reference_Unicode *result = 0 ;
  
  result = (TK_External_Reference_Unicode *)new TK_External_Reference_Unicode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_External_Reference_Unicode(void * jarg1) {
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Unicode_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Unicode_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Unicode_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_External_Reference_Unicode const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_External_Reference_Unicode_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_Unicode_Reset(void * jarg1) {
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_Unicode_SetString__SWIG_0(void * jarg1, void * jarg2) {
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  (arg1)->SetString((wchar_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_External_Reference_Unicode_SetString__SWIG_1(void * jarg1, int jarg2) {
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  int arg2 ;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetString(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_External_Reference_Unicode_GetString__SWIG_0(void * jarg1) {
  void * jresult ;
  TK_External_Reference_Unicode *arg1 = (TK_External_Reference_Unicode *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (TK_External_Reference_Unicode *)jarg1; 
  result = (wchar_t *)((TK_External_Reference_Unicode const *)arg1)->GetString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetPoints__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT double * SWIGSTDCALL CSharp_TK_Polyhedron_GetDPoints__SWIG_0(void * jarg1) {
  double * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  double *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (double *)((TK_Polyhedron const *)arg1)->GetDPoints();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_GetPointCount(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (int)((TK_Polyhedron const *)arg1)->GetPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int * SWIGSTDCALL CSharp_TK_Polyhedron_GetExists__SWIG_0(void * jarg1) {
  unsigned int * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (unsigned int *)((TK_Polyhedron const *)arg1)->GetExists();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int * SWIGSTDCALL CSharp_TK_Polyhedron_GetFaceExists__SWIG_0(void * jarg1) {
  unsigned int * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (unsigned int *)((TK_Polyhedron const *)arg1)->GetFaceExists();
  jresult = result;
  return jresult;
}


SWIGEXPORT ID_Key SWIGSTDCALL CSharp_TK_Polyhedron_GetKey(void * jarg1) {
  ID_Key jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  long result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (long)((TK_Polyhedron const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_TK_Polyhedron_GetSubop(void * jarg1) {
  unsigned char jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned char result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (unsigned char)((TK_Polyhedron const *)arg1)->GetSubop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_TK_Polyhedron_GetSubop2(void * jarg1) {
  unsigned short jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned short result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (unsigned short)((TK_Polyhedron const *)arg1)->GetSubop2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetBounding(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetBounding();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexNormals__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexNormals();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexParameters__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexParameters();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexFaceColors__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexFaceColors();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexEdgeColors__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexEdgeColors();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexMarkerColors__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexMarkerColors();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexMarkerRGBAs__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexMarkerRGBAs();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexColors__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexColors();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexFaceIndices__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexFaceIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexEdgeIndices__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexEdgeIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexMarkerIndices__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexMarkerIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetVertexIndices__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetVertexIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetFaceColors__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetFaceColors();
  jresult = result;
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_TK_Polyhedron_GetFaceIndices__SWIG_0(void * jarg1) {
  float * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (float *)((TK_Polyhedron const *)arg1)->GetFaceIndices();
  jresult = result;
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_TK_Polyhedron_GetFaceRegions__SWIG_0(void * jarg1) {
  int * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (int *)((TK_Polyhedron const *)arg1)->GetFaceRegions();
  jresult = result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_GetPriority(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (int)(arg1)->GetPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polyhedron_SetPriority(void * jarg1, int jarg2) {
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetPriority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetKey(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->SetKey(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetSubop(void * jarg1, unsigned char jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned char arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (TK_Status)(arg1)->SetSubop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetSubop2(void * jarg1, unsigned short jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned short arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  result = (TK_Status)(arg1)->SetSubop2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_InitSubop(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (TK_Status)(arg1)->InitSubop(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetBounding(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetBounding((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)(arg1)->SetPoints(arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->SetPoints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int arg2 ;
  double *arg3 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (TK_Status)(arg1)->SetDPoints(arg2,(double const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->SetDPoints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexNormals__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexNormals((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexNormals__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexParameters__SWIG_0(void * jarg1, float * jarg2, int jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->SetVertexParameters((float const (*))arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexParameters__SWIG_1(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexParameters((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexParameters__SWIG_2(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexParameters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexFaceColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexFaceColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexFaceColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexFaceColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexEdgeColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexEdgeColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexEdgeColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexEdgeColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerRGBAs((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerRGBAs__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerRGBAs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexFaceIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexFaceIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexFaceIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexFaceIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexEdgeIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexEdgeIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexEdgeIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexEdgeIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerVisibilities((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerVisibilities__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerSizes__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerSizes((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerSizes__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerSizes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerSymbols__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetVertexMarkerSymbols((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerSymbols__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerSymbols();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetVertexMarkerSymbolStrings(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetVertexMarkerSymbolStrings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceNormals__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceNormals((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceNormals__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceVisibilities__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceVisibilities((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceVisibilities__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFacePatterns__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetFacePatterns((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFacePatterns__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFacePatterns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceRegions__SWIG_0(void * jarg1, int * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  int *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceRegions((int const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceRegions__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceRegions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeColors__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeColors((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeColors__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeIndices__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeIndices((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeIndices__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeNormals__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeNormals((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeNormals__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeVisibilities__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeVisibilities((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeVisibilities__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgePatterns__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  char *arg2 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgePatterns((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgePatterns__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgePatterns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgePatternStrings(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgePatternStrings();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeWeights__SWIG_0(void * jarg1, float * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  float *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeWeights((float const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeWeights__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetExists__SWIG_0(void * jarg1, unsigned int * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned int *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (TK_Status)(arg1)->SetExists((unsigned int const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetExists__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetExists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceExists__SWIG_0(void * jarg1, unsigned int * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned int *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (TK_Status)(arg1)->SetFaceExists((unsigned int const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetFaceExists__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetFaceExists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeExists__SWIG_0(void * jarg1, unsigned int * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  unsigned int *arg2 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (TK_Status)(arg1)->SetEdgeExists((unsigned int const (*))arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_SetEdgeExists__SWIG_1(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (TK_Status)(arg1)->SetEdgeExists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_AppendObject(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler *arg3 = (BBaseOpcodeHandler *) 0 ;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler *)jarg3; 
  result = (TK_Status)(arg1)->AppendObject(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_Polyhedron_PopObject(void * jarg1) {
  void * jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BBaseOpcodeHandler *result = 0 ;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (BBaseOpcodeHandler *)(arg1)->PopObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasOptionals(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)(arg1)->HasOptionals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasOptionalsCommunicator(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)(arg1)->HasOptionalsCommunicator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexNormals(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexParameters(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexParameters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexFaceColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexFaceColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexEdgeColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexEdgeColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerRGBAs(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerRGBAs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexFaceIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexFaceIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexEdgeIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexEdgeIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerVisibilities(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerSymbols(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerSymbols();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexMarkerSizes(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexMarkerSizes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasVertexAttributes(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasVertexAttributes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceNormals(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceVisibilities(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFacePatterns(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFacePatterns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceRegions(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceRegions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceAttributes(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceAttributes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasFaceAttributesCommunicator(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasFaceAttributesCommunicator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeColors(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeIndices(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeNormals(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeVisibilities(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeVisibilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgePatterns(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgePatterns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeWeights(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_HasEdgeAttributes(void * jarg1) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  result = (bool)((TK_Polyhedron const *)arg1)->HasEdgeAttributes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_EnumerateEdges(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_EnumerateEdgesSwigExplicitTK_Polyhedron(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdgesSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_LabelFakeEdges(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->LabelFakeEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_LabelFakeEdgesSwigExplicitTK_Polyhedron(void * jarg1) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->LabelFakeEdgesSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_AllowInstancing(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (bool)((SwigDirector_TK_Polyhedron const *)darg)->AllowInstancing(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TK_Polyhedron_AllowInstancingSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  bool result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (bool)((SwigDirector_TK_Polyhedron const *)darg)->AllowInstancingSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Polyhedron(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_Polyhedron *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_Polyhedron *)new SwigDirector_TK_Polyhedron(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_ReadSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->ReadSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_WriteSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->WriteSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polyhedron_Reset(void * jarg1) {
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  (darg)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polyhedron_ResetSwigExplicitTK_Polyhedron(void * jarg1) {
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  (darg)->ResetSwigPublic();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_trivial_points(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_trivial_points(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_trivial_pointsSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_trivial_pointsSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_trivial_points(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_trivial_points(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_trivial_pointsSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_trivial_pointsSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_collection(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_collection(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_collectionSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_collectionSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_3arg(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_3argSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collectionSwigPublic(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_2arg(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_2argSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collectionSwigPublic(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collectionSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collectionSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_trivial_points_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_trivial_points_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_trivial_points_asciiSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_trivial_points_asciiSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_trivial_points_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_trivial_points_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_trivial_points_asciiSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_trivial_points_asciiSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_collection_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_collection_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_read_collection_asciiSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->read_collection_asciiSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_vertex_marker_sizes_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_vertex_marker_sizes_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_vertex_marker_sizes_asciiSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_vertex_marker_sizes_asciiSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_ascii_3arg(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_ascii(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_ascii_3argSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  int arg4 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_asciiSwigPublic(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_ascii_2arg(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_ascii(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_ascii_2argSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool arg3 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_asciiSwigPublic(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_ascii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_ascii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Polyhedron_write_collection_asciiSwigExplicitTK_Polyhedron(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Polyhedron *arg1 = (TK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  SwigDirector_TK_Polyhedron *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_TK_Polyhedron *>(arg1);
  result = (TK_Status)(darg)->write_collection_asciiSwigPublic(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Polyhedron_director_connect(void *objarg, SwigDirector_TK_Polyhedron::SWIG_Callback0_t callback0, SwigDirector_TK_Polyhedron::SWIG_Callback1_t callback1, SwigDirector_TK_Polyhedron::SWIG_Callback2_t callback2, SwigDirector_TK_Polyhedron::SWIG_Callback3_t callback3, SwigDirector_TK_Polyhedron::SWIG_Callback4_t callback4, SwigDirector_TK_Polyhedron::SWIG_Callback5_t callback5, SwigDirector_TK_Polyhedron::SWIG_Callback6_t callback6, SwigDirector_TK_Polyhedron::SWIG_Callback7_t callback7, SwigDirector_TK_Polyhedron::SWIG_Callback8_t callback8, SwigDirector_TK_Polyhedron::SWIG_Callback9_t callback9, SwigDirector_TK_Polyhedron::SWIG_Callback10_t callback10, SwigDirector_TK_Polyhedron::SWIG_Callback11_t callback11, SwigDirector_TK_Polyhedron::SWIG_Callback12_t callback12, SwigDirector_TK_Polyhedron::SWIG_Callback13_t callback13, SwigDirector_TK_Polyhedron::SWIG_Callback14_t callback14, SwigDirector_TK_Polyhedron::SWIG_Callback15_t callback15, SwigDirector_TK_Polyhedron::SWIG_Callback16_t callback16, SwigDirector_TK_Polyhedron::SWIG_Callback17_t callback17, SwigDirector_TK_Polyhedron::SWIG_Callback18_t callback18, SwigDirector_TK_Polyhedron::SWIG_Callback19_t callback19, SwigDirector_TK_Polyhedron::SWIG_Callback20_t callback20, SwigDirector_TK_Polyhedron::SWIG_Callback21_t callback21, SwigDirector_TK_Polyhedron::SWIG_Callback22_t callback22, SwigDirector_TK_Polyhedron::SWIG_Callback23_t callback23, SwigDirector_TK_Polyhedron::SWIG_Callback24_t callback24, SwigDirector_TK_Polyhedron::SWIG_Callback25_t callback25) {
  TK_Polyhedron *obj = (TK_Polyhedron *)objarg;
  SwigDirector_TK_Polyhedron *director = dynamic_cast<SwigDirector_TK_Polyhedron *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_EnumerateEdges(void * jarg1) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  SwigDirector_TK_Mesh *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Mesh *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_EnumerateEdgesSwigExplicitTK_Mesh(void * jarg1) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  SwigDirector_TK_Mesh *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Mesh *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdgesSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Mesh() {
  void * jresult ;
  TK_Mesh *result = 0 ;
  
  result = (TK_Mesh *)new SwigDirector_TK_Mesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Mesh(void * jarg1) {
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  
  arg1 = (TK_Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_ReadSwigExplicitTK_Mesh(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Mesh::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Mesh_WriteSwigExplicitTK_Mesh(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Mesh::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Mesh_Reset(void * jarg1) {
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  
  arg1 = (TK_Mesh *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Mesh_ResetSwigExplicitTK_Mesh(void * jarg1) {
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  
  arg1 = (TK_Mesh *)jarg1; 
  (arg1)->TK_Mesh::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Mesh_SetRows(void * jarg1, int jarg2) {
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRows(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Mesh_SetColumns(void * jarg1, int jarg2) {
  TK_Mesh *arg1 = (TK_Mesh *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetColumns(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Mesh_director_connect(void *objarg, SwigDirector_TK_Mesh::SWIG_Callback0_t callback0, SwigDirector_TK_Mesh::SWIG_Callback1_t callback1, SwigDirector_TK_Mesh::SWIG_Callback2_t callback2, SwigDirector_TK_Mesh::SWIG_Callback3_t callback3, SwigDirector_TK_Mesh::SWIG_Callback4_t callback4, SwigDirector_TK_Mesh::SWIG_Callback5_t callback5, SwigDirector_TK_Mesh::SWIG_Callback6_t callback6, SwigDirector_TK_Mesh::SWIG_Callback7_t callback7, SwigDirector_TK_Mesh::SWIG_Callback8_t callback8, SwigDirector_TK_Mesh::SWIG_Callback9_t callback9, SwigDirector_TK_Mesh::SWIG_Callback10_t callback10, SwigDirector_TK_Mesh::SWIG_Callback11_t callback11, SwigDirector_TK_Mesh::SWIG_Callback12_t callback12, SwigDirector_TK_Mesh::SWIG_Callback13_t callback13, SwigDirector_TK_Mesh::SWIG_Callback14_t callback14, SwigDirector_TK_Mesh::SWIG_Callback15_t callback15, SwigDirector_TK_Mesh::SWIG_Callback16_t callback16, SwigDirector_TK_Mesh::SWIG_Callback17_t callback17, SwigDirector_TK_Mesh::SWIG_Callback18_t callback18, SwigDirector_TK_Mesh::SWIG_Callback19_t callback19, SwigDirector_TK_Mesh::SWIG_Callback20_t callback20, SwigDirector_TK_Mesh::SWIG_Callback21_t callback21, SwigDirector_TK_Mesh::SWIG_Callback22_t callback22, SwigDirector_TK_Mesh::SWIG_Callback23_t callback23, SwigDirector_TK_Mesh::SWIG_Callback24_t callback24, SwigDirector_TK_Mesh::SWIG_Callback25_t callback25) {
  TK_Mesh *obj = (TK_Mesh *)objarg;
  SwigDirector_TK_Mesh *director = dynamic_cast<SwigDirector_TK_Mesh *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_EnumerateEdges(void * jarg1) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  SwigDirector_TK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Shell *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_EnumerateEdgesSwigExplicitTK_Shell(void * jarg1) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  SwigDirector_TK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  darg = dynamic_cast<SwigDirector_TK_Shell *>(arg1);
  result = (TK_Status)(darg)->EnumerateEdgesSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Shell() {
  void * jresult ;
  TK_Shell *result = 0 ;
  
  result = (TK_Shell *)new SwigDirector_TK_Shell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Shell(void * jarg1) {
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  
  arg1 = (TK_Shell *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Shell_set_flist__SWIG_0(void * jarg1, int jarg2, int * jarg3) {
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3;
  (arg1)->set_flist(arg2,(int const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Shell_set_flist__SWIG_1(void * jarg1, int jarg2) {
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  int arg2 ;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_flist(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_ReadSwigExplicitTK_Shell(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Shell::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_WriteSwigExplicitTK_Shell(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_Shell::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Shell_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Shell_Reset(void * jarg1) {
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  
  arg1 = (TK_Shell *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Shell_ResetSwigExplicitTK_Shell(void * jarg1) {
  TK_Shell *arg1 = (TK_Shell *) 0 ;
  
  arg1 = (TK_Shell *)jarg1; 
  (arg1)->TK_Shell::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Shell_director_connect(void *objarg, SwigDirector_TK_Shell::SWIG_Callback0_t callback0, SwigDirector_TK_Shell::SWIG_Callback1_t callback1, SwigDirector_TK_Shell::SWIG_Callback2_t callback2, SwigDirector_TK_Shell::SWIG_Callback3_t callback3, SwigDirector_TK_Shell::SWIG_Callback4_t callback4, SwigDirector_TK_Shell::SWIG_Callback5_t callback5, SwigDirector_TK_Shell::SWIG_Callback6_t callback6, SwigDirector_TK_Shell::SWIG_Callback7_t callback7, SwigDirector_TK_Shell::SWIG_Callback8_t callback8, SwigDirector_TK_Shell::SWIG_Callback9_t callback9, SwigDirector_TK_Shell::SWIG_Callback10_t callback10, SwigDirector_TK_Shell::SWIG_Callback11_t callback11, SwigDirector_TK_Shell::SWIG_Callback12_t callback12, SwigDirector_TK_Shell::SWIG_Callback13_t callback13, SwigDirector_TK_Shell::SWIG_Callback14_t callback14, SwigDirector_TK_Shell::SWIG_Callback15_t callback15, SwigDirector_TK_Shell::SWIG_Callback16_t callback16, SwigDirector_TK_Shell::SWIG_Callback17_t callback17, SwigDirector_TK_Shell::SWIG_Callback18_t callback18, SwigDirector_TK_Shell::SWIG_Callback19_t callback19, SwigDirector_TK_Shell::SWIG_Callback20_t callback20, SwigDirector_TK_Shell::SWIG_Callback21_t callback21, SwigDirector_TK_Shell::SWIG_Callback22_t callback22, SwigDirector_TK_Shell::SWIG_Callback23_t callback23, SwigDirector_TK_Shell::SWIG_Callback24_t callback24, SwigDirector_TK_Shell::SWIG_Callback25_t callback25) {
  TK_Shell *obj = (TK_Shell *)objarg;
  SwigDirector_TK_Shell *director = dynamic_cast<SwigDirector_TK_Shell *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_PolyPolypoint(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  TK_PolyPolypoint *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (TK_PolyPolypoint *)new SwigDirector_TK_PolyPolypoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_PolyPolypoint(void * jarg1) {
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_ReadSwigExplicitTK_PolyPolypoint(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_PolyPolypoint::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_Write(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_WriteSwigExplicitTK_PolyPolypoint(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_PolyPolypoint::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_PolyPolypoint const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_CloneSwigExplicitTK_PolyPolypoint(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((TK_PolyPolypoint const *)arg1)->TK_PolyPolypoint::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_ReadAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->ReadAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_WriteAscii(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->WriteAscii(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_ExecuteSwigExplicitTK_PolyPolypoint(void * jarg1, void * jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->TK_PolyPolypoint::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyPolypoint_Reset(void * jarg1) {
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyPolypoint_ResetSwigExplicitTK_PolyPolypoint(void * jarg1) {
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  (arg1)->TK_PolyPolypoint::Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetPoints__SWIG_0(void * jarg1, int jarg2, float * jarg3) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  float *arg3 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  result = (TK_Status)(arg1)->SetPoints(arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetPoints__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->SetPoints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetDPoints__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  double *arg3 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double *)jarg3; 
  result = (TK_Status)(arg1)->SetDPoints(arg2,(double const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetDPoints__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->SetDPoints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetLengths__SWIG_0(void * jarg1, int jarg2, int * jarg3) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  int *arg3 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (TK_Status)(arg1)->SetLengths(arg2,(int const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_PolyPolypoint_SetLengths__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  TK_PolyPolypoint *arg1 = (TK_PolyPolypoint *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (TK_PolyPolypoint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)(arg1)->SetLengths(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKPP_X_2D_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0300;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKPP_Y_2D_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0C00;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKPP_Z_2D_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) 0x3000;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKPP_ANY_2D_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) 0x3F00;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TKPP_EXPLICIT_PRIMITIVE_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) 0x0006;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_PolyPolypoint_director_connect(void *objarg, SwigDirector_TK_PolyPolypoint::SWIG_Callback0_t callback0, SwigDirector_TK_PolyPolypoint::SWIG_Callback1_t callback1, SwigDirector_TK_PolyPolypoint::SWIG_Callback2_t callback2, SwigDirector_TK_PolyPolypoint::SWIG_Callback3_t callback3, SwigDirector_TK_PolyPolypoint::SWIG_Callback4_t callback4, SwigDirector_TK_PolyPolypoint::SWIG_Callback5_t callback5, SwigDirector_TK_PolyPolypoint::SWIG_Callback6_t callback6, SwigDirector_TK_PolyPolypoint::SWIG_Callback7_t callback7, SwigDirector_TK_PolyPolypoint::SWIG_Callback8_t callback8, SwigDirector_TK_PolyPolypoint::SWIG_Callback9_t callback9) {
  TK_PolyPolypoint *obj = (TK_PolyPolypoint *)objarg;
  SwigDirector_TK_PolyPolypoint *director = dynamic_cast<SwigDirector_TK_PolyPolypoint *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Read_Stream_File__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  HStreamFileToolkit *arg2 = (HStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (HStreamFileToolkit *)jarg2; 
  result = (TK_Status)HTK_Read_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Read_Stream_File__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)HTK_Read_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Read_Stream_File__SWIG_2(void * jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  result = (TK_Status)HTK_Read_Stream_File((wchar_t const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Write_Stream_File__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  HStreamFileToolkit *arg2 = (HStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (HStreamFileToolkit *)jarg2; 
  result = (TK_Status)HTK_Write_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Write_Stream_File__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  int arg2 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  arg2 = (int)jarg2; 
  result = (TK_Status)HTK_Write_Stream_File((wchar_t const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Write_Stream_File__SWIG_2(void * jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  TK_Status result;
  
  arg1 = (wchar_t *)jarg1; 
  result = (TK_Status)HTK_Write_Stream_File((wchar_t const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HByteStream__SWIG_0(int jarg1, unsigned char * jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  HByteStream *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned char *)jarg2;
  arg3 = (int)jarg3; 
  result = (HByteStream *)new HByteStream(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HByteStream__SWIG_1() {
  void * jresult ;
  HByteStream *result = 0 ;
  
  result = (HByteStream *)new HByteStream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HByteStream_put(void * jarg1, unsigned short jarg2) {
  HByteStream *arg1 = (HByteStream *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (HByteStream *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->put(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HByteStream_get(void * jarg1, unsigned short * jarg2) {
  HByteStream *arg1 = (HByteStream *) 0 ;
  unsigned short *arg2 = 0 ;
  
  arg1 = (HByteStream *)jarg1; 
  arg2 = (unsigned short *)jarg2;
  (arg1)->get(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HByteStream(void * jarg1) {
  HByteStream *arg1 = (HByteStream *) 0 ;
  
  arg1 = (HByteStream *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_ExecuteSwigExplicitHTK_Open_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Open_Segment::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_InterpretSwigExplicitHTK_Open_Segment__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Open_Segment::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_InterpretSwigExplicitHTK_Open_Segment__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Open_Segment::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Interpret_specialSwigExplicitHTK_Open_Segment(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Open_Segment::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Open_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Open_Segment_CloneSwigExplicitHTK_Open_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Open_Segment const *)arg1)->HTK_Open_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Open_Segment() {
  void * jresult ;
  HTK_Open_Segment *result = 0 ;
  
  result = (HTK_Open_Segment *)new SwigDirector_HTK_Open_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Open_Segment(void * jarg1) {
  HTK_Open_Segment *arg1 = (HTK_Open_Segment *) 0 ;
  
  arg1 = (HTK_Open_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Open_Segment_director_connect(void *objarg, SwigDirector_HTK_Open_Segment::SWIG_Callback0_t callback0, SwigDirector_HTK_Open_Segment::SWIG_Callback1_t callback1, SwigDirector_HTK_Open_Segment::SWIG_Callback2_t callback2, SwigDirector_HTK_Open_Segment::SWIG_Callback3_t callback3, SwigDirector_HTK_Open_Segment::SWIG_Callback4_t callback4, SwigDirector_HTK_Open_Segment::SWIG_Callback5_t callback5, SwigDirector_HTK_Open_Segment::SWIG_Callback6_t callback6, SwigDirector_HTK_Open_Segment::SWIG_Callback7_t callback7, SwigDirector_HTK_Open_Segment::SWIG_Callback8_t callback8, SwigDirector_HTK_Open_Segment::SWIG_Callback9_t callback9) {
  HTK_Open_Segment *obj = (HTK_Open_Segment *)objarg;
  SwigDirector_HTK_Open_Segment *director = dynamic_cast<SwigDirector_HTK_Open_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_ExecuteSwigExplicitHTK_Close_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Close_Segment::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_InterpretSwigExplicitHTK_Close_Segment__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Close_Segment::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_InterpretSwigExplicitHTK_Close_Segment__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Close_Segment::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Interpret_specialSwigExplicitHTK_Close_Segment(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Close_Segment::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Close_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Close_Segment_CloneSwigExplicitHTK_Close_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Close_Segment const *)arg1)->HTK_Close_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Close_Segment() {
  void * jresult ;
  HTK_Close_Segment *result = 0 ;
  
  result = (HTK_Close_Segment *)new SwigDirector_HTK_Close_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Close_Segment(void * jarg1) {
  HTK_Close_Segment *arg1 = (HTK_Close_Segment *) 0 ;
  
  arg1 = (HTK_Close_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Close_Segment_director_connect(void *objarg, SwigDirector_HTK_Close_Segment::SWIG_Callback0_t callback0, SwigDirector_HTK_Close_Segment::SWIG_Callback1_t callback1, SwigDirector_HTK_Close_Segment::SWIG_Callback2_t callback2, SwigDirector_HTK_Close_Segment::SWIG_Callback3_t callback3, SwigDirector_HTK_Close_Segment::SWIG_Callback4_t callback4, SwigDirector_HTK_Close_Segment::SWIG_Callback5_t callback5, SwigDirector_HTK_Close_Segment::SWIG_Callback6_t callback6, SwigDirector_HTK_Close_Segment::SWIG_Callback7_t callback7, SwigDirector_HTK_Close_Segment::SWIG_Callback8_t callback8, SwigDirector_HTK_Close_Segment::SWIG_Callback9_t callback9) {
  HTK_Close_Segment *obj = (HTK_Close_Segment *)objarg;
  SwigDirector_HTK_Close_Segment *director = dynamic_cast<SwigDirector_HTK_Close_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_ExecuteSwigExplicitHTK_Reopen_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Reopen_Segment::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_InterpretSwigExplicitHTK_Reopen_Segment__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Reopen_Segment::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_InterpretSwigExplicitHTK_Reopen_Segment__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Reopen_Segment::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Interpret_specialSwigExplicitHTK_Reopen_Segment(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Reopen_Segment::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Reopen_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reopen_Segment_CloneSwigExplicitHTK_Reopen_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Reopen_Segment const *)arg1)->HTK_Reopen_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Reopen_Segment() {
  void * jresult ;
  HTK_Reopen_Segment *result = 0 ;
  
  result = (HTK_Reopen_Segment *)new SwigDirector_HTK_Reopen_Segment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Reopen_Segment(void * jarg1) {
  HTK_Reopen_Segment *arg1 = (HTK_Reopen_Segment *) 0 ;
  
  arg1 = (HTK_Reopen_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Reopen_Segment_director_connect(void *objarg, SwigDirector_HTK_Reopen_Segment::SWIG_Callback0_t callback0, SwigDirector_HTK_Reopen_Segment::SWIG_Callback1_t callback1, SwigDirector_HTK_Reopen_Segment::SWIG_Callback2_t callback2, SwigDirector_HTK_Reopen_Segment::SWIG_Callback3_t callback3, SwigDirector_HTK_Reopen_Segment::SWIG_Callback4_t callback4, SwigDirector_HTK_Reopen_Segment::SWIG_Callback5_t callback5, SwigDirector_HTK_Reopen_Segment::SWIG_Callback6_t callback6, SwigDirector_HTK_Reopen_Segment::SWIG_Callback7_t callback7, SwigDirector_HTK_Reopen_Segment::SWIG_Callback8_t callback8, SwigDirector_HTK_Reopen_Segment::SWIG_Callback9_t callback9) {
  HTK_Reopen_Segment *obj = (HTK_Reopen_Segment *)objarg;
  SwigDirector_HTK_Reopen_Segment *director = dynamic_cast<SwigDirector_HTK_Reopen_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Referenced_Segment(char jarg1) {
  void * jresult ;
  char arg1 ;
  HTK_Referenced_Segment *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (HTK_Referenced_Segment *)new SwigDirector_HTK_Referenced_Segment(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_WriteSwigExplicitHTK_Referenced_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Referenced_Segment::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_ExecuteSwigExplicitHTK_Referenced_Segment(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Referenced_Segment::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_InterpretSwigExplicitHTK_Referenced_Segment__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Referenced_Segment::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_InterpretSwigExplicitHTK_Referenced_Segment__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Referenced_Segment::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Interpret_specialSwigExplicitHTK_Referenced_Segment(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Referenced_Segment::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Referenced_Segment_Reset(void * jarg1) {
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Referenced_Segment_ResetSwigExplicitHTK_Referenced_Segment(void * jarg1) {
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  (arg1)->HTK_Referenced_Segment::Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Referenced_Segment const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Referenced_Segment_CloneSwigExplicitHTK_Referenced_Segment(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Referenced_Segment const *)arg1)->HTK_Referenced_Segment::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Referenced_Segment_SetRoot(void * jarg1, void * jarg2) {
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTK_Referenced_Segment_GetRoot(void * jarg1) {
  void * jresult ;
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  HC_KEY result;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  result = ((HTK_Referenced_Segment const *)arg1)->GetRoot();
  jresult = new HC_KEY((const HC_KEY &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Referenced_Segment(void * jarg1) {
  HTK_Referenced_Segment *arg1 = (HTK_Referenced_Segment *) 0 ;
  
  arg1 = (HTK_Referenced_Segment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Referenced_Segment_director_connect(void *objarg, SwigDirector_HTK_Referenced_Segment::SWIG_Callback0_t callback0, SwigDirector_HTK_Referenced_Segment::SWIG_Callback1_t callback1, SwigDirector_HTK_Referenced_Segment::SWIG_Callback2_t callback2, SwigDirector_HTK_Referenced_Segment::SWIG_Callback3_t callback3, SwigDirector_HTK_Referenced_Segment::SWIG_Callback4_t callback4, SwigDirector_HTK_Referenced_Segment::SWIG_Callback5_t callback5, SwigDirector_HTK_Referenced_Segment::SWIG_Callback6_t callback6, SwigDirector_HTK_Referenced_Segment::SWIG_Callback7_t callback7, SwigDirector_HTK_Referenced_Segment::SWIG_Callback8_t callback8, SwigDirector_HTK_Referenced_Segment::SWIG_Callback9_t callback9) {
  HTK_Referenced_Segment *obj = (HTK_Referenced_Segment *)objarg;
  SwigDirector_HTK_Referenced_Segment *director = dynamic_cast<SwigDirector_HTK_Referenced_Segment *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Reference() {
  void * jresult ;
  HTK_Reference *result = 0 ;
  
  result = (HTK_Reference *)new HTK_Reference();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Reference_NeedsContext(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  bool result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (bool)((HTK_Reference const *)arg1)->NeedsContext(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Reference_Reset(void * jarg1) {
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  
  arg1 = (HTK_Reference *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Reference_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Reference *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Reference const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Reference_Direct(void * jarg1) {
  unsigned int jresult ;
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  bool result;
  
  arg1 = (HTK_Reference *)jarg1; 
  result = (bool)((HTK_Reference const *)arg1)->Direct();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Reference(void * jarg1) {
  HTK_Reference *arg1 = (HTK_Reference *) 0 ;
  
  arg1 = (HTK_Reference *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_0(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5, float * jarg6) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float *)jarg6;
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1,arg2,arg3,arg4,arg5,(float const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_2(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_3(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_4(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_5(int jarg1) {
  void * jresult ;
  int arg1 ;
  HTK_Instance *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HTK_Instance *)new SwigDirector_HTK_Instance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Instance__SWIG_6() {
  void * jresult ;
  HTK_Instance *result = 0 ;
  
  result = (HTK_Instance *)new SwigDirector_HTK_Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_ExecuteSwigExplicitHTK_Instance(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Instance::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_InterpretSwigExplicitHTK_Instance(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Instance::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_Interpret_specialSwigExplicitHTK_Instance(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Instance::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Instance const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Instance_CloneSwigExplicitHTK_Instance(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Instance *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Instance const *)arg1)->HTK_Instance::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Instance(void * jarg1) {
  HTK_Instance *arg1 = (HTK_Instance *) 0 ;
  
  arg1 = (HTK_Instance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Instance_director_connect(void *objarg, SwigDirector_HTK_Instance::SWIG_Callback0_t callback0, SwigDirector_HTK_Instance::SWIG_Callback1_t callback1, SwigDirector_HTK_Instance::SWIG_Callback2_t callback2, SwigDirector_HTK_Instance::SWIG_Callback3_t callback3, SwigDirector_HTK_Instance::SWIG_Callback4_t callback4, SwigDirector_HTK_Instance::SWIG_Callback5_t callback5, SwigDirector_HTK_Instance::SWIG_Callback6_t callback6, SwigDirector_HTK_Instance::SWIG_Callback7_t callback7, SwigDirector_HTK_Instance::SWIG_Callback8_t callback8, SwigDirector_HTK_Instance::SWIG_Callback9_t callback9) {
  HTK_Instance *obj = (HTK_Instance *)objarg;
  SwigDirector_HTK_Instance *director = dynamic_cast<SwigDirector_HTK_Instance *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_ExecuteSwigExplicitHTK_Delete_Object(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Delete_Object::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_InterpretSwigExplicitHTK_Delete_Object__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Delete_Object::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_InterpretSwigExplicitHTK_Delete_Object__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Delete_Object::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Interpret_specialSwigExplicitHTK_Delete_Object(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Delete_Object::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Delete_Object const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Delete_Object_CloneSwigExplicitHTK_Delete_Object(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Delete_Object const *)arg1)->HTK_Delete_Object::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Delete_Object() {
  void * jresult ;
  HTK_Delete_Object *result = 0 ;
  
  result = (HTK_Delete_Object *)new SwigDirector_HTK_Delete_Object();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Delete_Object(void * jarg1) {
  HTK_Delete_Object *arg1 = (HTK_Delete_Object *) 0 ;
  
  arg1 = (HTK_Delete_Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Delete_Object_director_connect(void *objarg, SwigDirector_HTK_Delete_Object::SWIG_Callback0_t callback0, SwigDirector_HTK_Delete_Object::SWIG_Callback1_t callback1, SwigDirector_HTK_Delete_Object::SWIG_Callback2_t callback2, SwigDirector_HTK_Delete_Object::SWIG_Callback3_t callback3, SwigDirector_HTK_Delete_Object::SWIG_Callback4_t callback4, SwigDirector_HTK_Delete_Object::SWIG_Callback5_t callback5, SwigDirector_HTK_Delete_Object::SWIG_Callback6_t callback6, SwigDirector_HTK_Delete_Object::SWIG_Callback7_t callback7, SwigDirector_HTK_Delete_Object::SWIG_Callback8_t callback8, SwigDirector_HTK_Delete_Object::SWIG_Callback9_t callback9) {
  HTK_Delete_Object *obj = (HTK_Delete_Object *)objarg;
  SwigDirector_HTK_Delete_Object *director = dynamic_cast<SwigDirector_HTK_Delete_Object *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_ExecuteSwigExplicitHTK_LOD(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_LOD::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_InterpretSwigExplicitHTK_LOD__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_LOD::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_InterpretSwigExplicitHTK_LOD__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_LOD::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Interpret_specialSwigExplicitHTK_LOD(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_LOD::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_LOD const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_LOD_CloneSwigExplicitHTK_LOD(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_LOD *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_LOD const *)arg1)->HTK_LOD::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_LOD() {
  void * jresult ;
  HTK_LOD *result = 0 ;
  
  result = (HTK_LOD *)new SwigDirector_HTK_LOD();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_LOD(void * jarg1) {
  HTK_LOD *arg1 = (HTK_LOD *) 0 ;
  
  arg1 = (HTK_LOD *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_LOD_director_connect(void *objarg, SwigDirector_HTK_LOD::SWIG_Callback0_t callback0, SwigDirector_HTK_LOD::SWIG_Callback1_t callback1, SwigDirector_HTK_LOD::SWIG_Callback2_t callback2, SwigDirector_HTK_LOD::SWIG_Callback3_t callback3, SwigDirector_HTK_LOD::SWIG_Callback4_t callback4, SwigDirector_HTK_LOD::SWIG_Callback5_t callback5, SwigDirector_HTK_LOD::SWIG_Callback6_t callback6, SwigDirector_HTK_LOD::SWIG_Callback7_t callback7, SwigDirector_HTK_LOD::SWIG_Callback8_t callback8, SwigDirector_HTK_LOD::SWIG_Callback9_t callback9) {
  HTK_LOD *obj = (HTK_LOD *)objarg;
  SwigDirector_HTK_LOD *director = dynamic_cast<SwigDirector_HTK_LOD *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Renumber__SWIG_0(unsigned char jarg1, void * jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  HTK_Renumber *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (HTK_Renumber *)new SwigDirector_HTK_Renumber(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Renumber__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Renumber *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Renumber *)new SwigDirector_HTK_Renumber(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_ExecuteSwigExplicitHTK_Renumber(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Renumber::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_InterpretSwigExplicitHTK_Renumber__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Renumber::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_InterpretSwigExplicitHTK_Renumber__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Renumber::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Interpret_specialSwigExplicitHTK_Renumber(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Renumber::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Renumber const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Renumber_CloneSwigExplicitHTK_Renumber(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Renumber *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Renumber const *)arg1)->HTK_Renumber::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Renumber(void * jarg1) {
  HTK_Renumber *arg1 = (HTK_Renumber *) 0 ;
  
  arg1 = (HTK_Renumber *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Renumber_director_connect(void *objarg, SwigDirector_HTK_Renumber::SWIG_Callback0_t callback0, SwigDirector_HTK_Renumber::SWIG_Callback1_t callback1, SwigDirector_HTK_Renumber::SWIG_Callback2_t callback2, SwigDirector_HTK_Renumber::SWIG_Callback3_t callback3, SwigDirector_HTK_Renumber::SWIG_Callback4_t callback4, SwigDirector_HTK_Renumber::SWIG_Callback5_t callback5, SwigDirector_HTK_Renumber::SWIG_Callback6_t callback6, SwigDirector_HTK_Renumber::SWIG_Callback7_t callback7, SwigDirector_HTK_Renumber::SWIG_Callback8_t callback8, SwigDirector_HTK_Renumber::SWIG_Callback9_t callback9) {
  HTK_Renumber *obj = (HTK_Renumber *)objarg;
  SwigDirector_HTK_Renumber *director = dynamic_cast<SwigDirector_HTK_Renumber *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HTK_Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HTK_Color *)new SwigDirector_HTK_Color(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  HTK_Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HTK_Color *)new SwigDirector_HTK_Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color__SWIG_2() {
  void * jresult ;
  HTK_Color *result = 0 ;
  
  result = (HTK_Color *)new SwigDirector_HTK_Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_ExecuteSwigExplicitHTK_Color(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_InterpretSwigExplicitHTK_Color__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_InterpretSwigExplicitHTK_Color__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Interpret_specialSwigExplicitHTK_Color(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_CloneSwigExplicitHTK_Color(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color const *)arg1)->HTK_Color::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color(void * jarg1) {
  HTK_Color *arg1 = (HTK_Color *) 0 ;
  
  arg1 = (HTK_Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_director_connect(void *objarg, SwigDirector_HTK_Color::SWIG_Callback0_t callback0, SwigDirector_HTK_Color::SWIG_Callback1_t callback1, SwigDirector_HTK_Color::SWIG_Callback2_t callback2, SwigDirector_HTK_Color::SWIG_Callback3_t callback3, SwigDirector_HTK_Color::SWIG_Callback4_t callback4, SwigDirector_HTK_Color::SWIG_Callback5_t callback5, SwigDirector_HTK_Color::SWIG_Callback6_t callback6, SwigDirector_HTK_Color::SWIG_Callback7_t callback7, SwigDirector_HTK_Color::SWIG_Callback8_t callback8, SwigDirector_HTK_Color::SWIG_Callback9_t callback9) {
  HTK_Color *obj = (HTK_Color *)objarg;
  SwigDirector_HTK_Color *director = dynamic_cast<SwigDirector_HTK_Color *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_RGB__SWIG_0(int jarg1, float * jarg2) {
  void * jresult ;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  HTK_Color_RGB *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float *)jarg2;
  result = (HTK_Color_RGB *)new SwigDirector_HTK_Color_RGB(arg1,(float const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_RGB__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  HTK_Color_RGB *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HTK_Color_RGB *)new SwigDirector_HTK_Color_RGB(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_RGB__SWIG_2() {
  void * jresult ;
  HTK_Color_RGB *result = 0 ;
  
  result = (HTK_Color_RGB *)new SwigDirector_HTK_Color_RGB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_ExecuteSwigExplicitHTK_Color_RGB(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_RGB::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_InterpretSwigExplicitHTK_Color_RGB__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_RGB::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_InterpretSwigExplicitHTK_Color_RGB__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_RGB::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Interpret_specialSwigExplicitHTK_Color_RGB(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_RGB::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_RGB const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_RGB_CloneSwigExplicitHTK_Color_RGB(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_RGB const *)arg1)->HTK_Color_RGB::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_RGB(void * jarg1) {
  HTK_Color_RGB *arg1 = (HTK_Color_RGB *) 0 ;
  
  arg1 = (HTK_Color_RGB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_RGB_director_connect(void *objarg, SwigDirector_HTK_Color_RGB::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_RGB::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_RGB::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_RGB::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_RGB::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_RGB::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_RGB::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_RGB::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_RGB::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_RGB::SWIG_Callback9_t callback9) {
  HTK_Color_RGB *obj = (HTK_Color_RGB *)objarg;
  SwigDirector_HTK_Color_RGB *director = dynamic_cast<SwigDirector_HTK_Color_RGB *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_ExecuteSwigExplicitHTK_Color_By_Value(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_By_Value::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_InterpretSwigExplicitHTK_Color_By_Value__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_Value::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_InterpretSwigExplicitHTK_Color_By_Value__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_By_Value::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Interpret_specialSwigExplicitHTK_Color_By_Value(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_Value::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_Value const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Value_CloneSwigExplicitHTK_Color_By_Value(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_Value const *)arg1)->HTK_Color_By_Value::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_Value() {
  void * jresult ;
  HTK_Color_By_Value *result = 0 ;
  
  result = (HTK_Color_By_Value *)new SwigDirector_HTK_Color_By_Value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_By_Value(void * jarg1) {
  HTK_Color_By_Value *arg1 = (HTK_Color_By_Value *) 0 ;
  
  arg1 = (HTK_Color_By_Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_By_Value_director_connect(void *objarg, SwigDirector_HTK_Color_By_Value::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_By_Value::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_By_Value::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_By_Value::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_By_Value::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_By_Value::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_By_Value::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_By_Value::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_By_Value::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_By_Value::SWIG_Callback9_t callback9) {
  HTK_Color_By_Value *obj = (HTK_Color_By_Value *)objarg;
  SwigDirector_HTK_Color_By_Value *director = dynamic_cast<SwigDirector_HTK_Color_By_Value *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_Index__SWIG_0(unsigned char jarg1, int jarg2, int jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  int arg2 ;
  int arg3 ;
  HTK_Color_By_Index *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HTK_Color_By_Index *)new SwigDirector_HTK_Color_By_Index(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_Index__SWIG_1(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  int arg2 ;
  HTK_Color_By_Index *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (int)jarg2; 
  result = (HTK_Color_By_Index *)new SwigDirector_HTK_Color_By_Index(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_Index__SWIG_2(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Color_By_Index *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Color_By_Index *)new SwigDirector_HTK_Color_By_Index(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_ExecuteSwigExplicitHTK_Color_By_Index(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_By_Index::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_InterpretSwigExplicitHTK_Color_By_Index__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_Index::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_InterpretSwigExplicitHTK_Color_By_Index__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_By_Index::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Interpret_specialSwigExplicitHTK_Color_By_Index(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_Index::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_Index const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_Index_CloneSwigExplicitHTK_Color_By_Index(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_Index const *)arg1)->HTK_Color_By_Index::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_By_Index(void * jarg1) {
  HTK_Color_By_Index *arg1 = (HTK_Color_By_Index *) 0 ;
  
  arg1 = (HTK_Color_By_Index *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_By_Index_director_connect(void *objarg, SwigDirector_HTK_Color_By_Index::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_By_Index::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_By_Index::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_By_Index::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_By_Index::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_By_Index::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_By_Index::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_By_Index::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_By_Index::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_By_Index::SWIG_Callback9_t callback9) {
  HTK_Color_By_Index *obj = (HTK_Color_By_Index *)objarg;
  SwigDirector_HTK_Color_By_Index *director = dynamic_cast<SwigDirector_HTK_Color_By_Index *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_FIndex__SWIG_0(int jarg1, float jarg2) {
  void * jresult ;
  int arg1 ;
  float arg2 ;
  HTK_Color_By_FIndex *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  result = (HTK_Color_By_FIndex *)new SwigDirector_HTK_Color_By_FIndex(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_FIndex__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  HTK_Color_By_FIndex *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HTK_Color_By_FIndex *)new SwigDirector_HTK_Color_By_FIndex(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_By_FIndex__SWIG_2() {
  void * jresult ;
  HTK_Color_By_FIndex *result = 0 ;
  
  result = (HTK_Color_By_FIndex *)new SwigDirector_HTK_Color_By_FIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_ExecuteSwigExplicitHTK_Color_By_FIndex(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_By_FIndex::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_InterpretSwigExplicitHTK_Color_By_FIndex__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_FIndex::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_InterpretSwigExplicitHTK_Color_By_FIndex__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_By_FIndex::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Interpret_specialSwigExplicitHTK_Color_By_FIndex(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_By_FIndex::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_FIndex const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_By_FIndex_CloneSwigExplicitHTK_Color_By_FIndex(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_By_FIndex const *)arg1)->HTK_Color_By_FIndex::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_By_FIndex(void * jarg1) {
  HTK_Color_By_FIndex *arg1 = (HTK_Color_By_FIndex *) 0 ;
  
  arg1 = (HTK_Color_By_FIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_By_FIndex_director_connect(void *objarg, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_By_FIndex::SWIG_Callback9_t callback9) {
  HTK_Color_By_FIndex *obj = (HTK_Color_By_FIndex *)objarg;
  SwigDirector_HTK_Color_By_FIndex *director = dynamic_cast<SwigDirector_HTK_Color_By_FIndex *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_Composite() {
  void * jresult ;
  HTK_Color_Composite *result = 0 ;
  
  result = (HTK_Color_Composite *)new SwigDirector_HTK_Color_Composite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_Composite(void * jarg1) {
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_ReadSwigExplicitHTK_Color_Composite(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_WriteSwigExplicitHTK_Color_Composite(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_ExecuteSwigExplicitHTK_Color_Composite(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_InterpretSwigExplicitHTK_Color_Composite__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_InterpretSwigExplicitHTK_Color_Composite__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Interpret_specialSwigExplicitHTK_Color_Composite(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_Composite::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_Composite const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Composite_CloneSwigExplicitHTK_Color_Composite(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_Composite *arg1 = (HTK_Color_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_Composite const *)arg1)->HTK_Color_Composite::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_Composite_director_connect(void *objarg, SwigDirector_HTK_Color_Composite::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_Composite::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_Composite::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_Composite::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_Composite::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_Composite::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_Composite::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_Composite::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_Composite::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_Composite::SWIG_Callback9_t callback9) {
  HTK_Color_Composite *obj = (HTK_Color_Composite *)objarg;
  SwigDirector_HTK_Color_Composite *director = dynamic_cast<SwigDirector_HTK_Color_Composite *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_ExecuteSwigExplicitHTK_Color_Map(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Color_Map::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_InterpretSwigExplicitHTK_Color_Map__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_Map::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_InterpretSwigExplicitHTK_Color_Map__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Color_Map::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Interpret_specialSwigExplicitHTK_Color_Map(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Color_Map::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_Map const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Color_Map_CloneSwigExplicitHTK_Color_Map(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Color_Map const *)arg1)->HTK_Color_Map::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Color_Map() {
  void * jresult ;
  HTK_Color_Map *result = 0 ;
  
  result = (HTK_Color_Map *)new SwigDirector_HTK_Color_Map();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Color_Map(void * jarg1) {
  HTK_Color_Map *arg1 = (HTK_Color_Map *) 0 ;
  
  arg1 = (HTK_Color_Map *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Color_Map_director_connect(void *objarg, SwigDirector_HTK_Color_Map::SWIG_Callback0_t callback0, SwigDirector_HTK_Color_Map::SWIG_Callback1_t callback1, SwigDirector_HTK_Color_Map::SWIG_Callback2_t callback2, SwigDirector_HTK_Color_Map::SWIG_Callback3_t callback3, SwigDirector_HTK_Color_Map::SWIG_Callback4_t callback4, SwigDirector_HTK_Color_Map::SWIG_Callback5_t callback5, SwigDirector_HTK_Color_Map::SWIG_Callback6_t callback6, SwigDirector_HTK_Color_Map::SWIG_Callback7_t callback7, SwigDirector_HTK_Color_Map::SWIG_Callback8_t callback8, SwigDirector_HTK_Color_Map::SWIG_Callback9_t callback9) {
  HTK_Color_Map *obj = (HTK_Color_Map *)objarg;
  SwigDirector_HTK_Color_Map *director = dynamic_cast<SwigDirector_HTK_Color_Map *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_ExecuteSwigExplicitHTK_Callback(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Callback::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_InterpretSwigExplicitHTK_Callback__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Callback::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_InterpretSwigExplicitHTK_Callback__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Callback::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Interpret_specialSwigExplicitHTK_Callback(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Callback::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Callback const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Callback_CloneSwigExplicitHTK_Callback(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Callback *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Callback const *)arg1)->HTK_Callback::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Callback() {
  void * jresult ;
  HTK_Callback *result = 0 ;
  
  result = (HTK_Callback *)new SwigDirector_HTK_Callback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Callback(void * jarg1) {
  HTK_Callback *arg1 = (HTK_Callback *) 0 ;
  
  arg1 = (HTK_Callback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Callback_director_connect(void *objarg, SwigDirector_HTK_Callback::SWIG_Callback0_t callback0, SwigDirector_HTK_Callback::SWIG_Callback1_t callback1, SwigDirector_HTK_Callback::SWIG_Callback2_t callback2, SwigDirector_HTK_Callback::SWIG_Callback3_t callback3, SwigDirector_HTK_Callback::SWIG_Callback4_t callback4, SwigDirector_HTK_Callback::SWIG_Callback5_t callback5, SwigDirector_HTK_Callback::SWIG_Callback6_t callback6, SwigDirector_HTK_Callback::SWIG_Callback7_t callback7, SwigDirector_HTK_Callback::SWIG_Callback8_t callback8, SwigDirector_HTK_Callback::SWIG_Callback9_t callback9) {
  HTK_Callback *obj = (HTK_Callback *)objarg;
  SwigDirector_HTK_Callback *director = dynamic_cast<SwigDirector_HTK_Callback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_ExecuteSwigExplicitHTK_Rendering_Options(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Rendering_Options::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_InterpretSwigExplicitHTK_Rendering_Options__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Rendering_Options::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_InterpretSwigExplicitHTK_Rendering_Options__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Rendering_Options::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Interpret_specialSwigExplicitHTK_Rendering_Options(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Rendering_Options::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Rendering_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Rendering_Options_CloneSwigExplicitHTK_Rendering_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Rendering_Options const *)arg1)->HTK_Rendering_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Rendering_Options() {
  void * jresult ;
  HTK_Rendering_Options *result = 0 ;
  
  result = (HTK_Rendering_Options *)new SwigDirector_HTK_Rendering_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Rendering_Options(void * jarg1) {
  HTK_Rendering_Options *arg1 = (HTK_Rendering_Options *) 0 ;
  
  arg1 = (HTK_Rendering_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Rendering_Options_director_connect(void *objarg, SwigDirector_HTK_Rendering_Options::SWIG_Callback0_t callback0, SwigDirector_HTK_Rendering_Options::SWIG_Callback1_t callback1, SwigDirector_HTK_Rendering_Options::SWIG_Callback2_t callback2, SwigDirector_HTK_Rendering_Options::SWIG_Callback3_t callback3, SwigDirector_HTK_Rendering_Options::SWIG_Callback4_t callback4, SwigDirector_HTK_Rendering_Options::SWIG_Callback5_t callback5, SwigDirector_HTK_Rendering_Options::SWIG_Callback6_t callback6, SwigDirector_HTK_Rendering_Options::SWIG_Callback7_t callback7, SwigDirector_HTK_Rendering_Options::SWIG_Callback8_t callback8, SwigDirector_HTK_Rendering_Options::SWIG_Callback9_t callback9) {
  HTK_Rendering_Options *obj = (HTK_Rendering_Options *)objarg;
  SwigDirector_HTK_Rendering_Options *director = dynamic_cast<SwigDirector_HTK_Rendering_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_ExecuteSwigExplicitHTK_Heuristics(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Heuristics::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_InterpretSwigExplicitHTK_Heuristics__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Heuristics::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_InterpretSwigExplicitHTK_Heuristics__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Heuristics::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Interpret_specialSwigExplicitHTK_Heuristics(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Heuristics::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Heuristics const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Heuristics_CloneSwigExplicitHTK_Heuristics(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Heuristics const *)arg1)->HTK_Heuristics::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Heuristics() {
  void * jresult ;
  HTK_Heuristics *result = 0 ;
  
  result = (HTK_Heuristics *)new SwigDirector_HTK_Heuristics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Heuristics(void * jarg1) {
  HTK_Heuristics *arg1 = (HTK_Heuristics *) 0 ;
  
  arg1 = (HTK_Heuristics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Heuristics_director_connect(void *objarg, SwigDirector_HTK_Heuristics::SWIG_Callback0_t callback0, SwigDirector_HTK_Heuristics::SWIG_Callback1_t callback1, SwigDirector_HTK_Heuristics::SWIG_Callback2_t callback2, SwigDirector_HTK_Heuristics::SWIG_Callback3_t callback3, SwigDirector_HTK_Heuristics::SWIG_Callback4_t callback4, SwigDirector_HTK_Heuristics::SWIG_Callback5_t callback5, SwigDirector_HTK_Heuristics::SWIG_Callback6_t callback6, SwigDirector_HTK_Heuristics::SWIG_Callback7_t callback7, SwigDirector_HTK_Heuristics::SWIG_Callback8_t callback8, SwigDirector_HTK_Heuristics::SWIG_Callback9_t callback9) {
  HTK_Heuristics *obj = (HTK_Heuristics *)objarg;
  SwigDirector_HTK_Heuristics *director = dynamic_cast<SwigDirector_HTK_Heuristics *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Geometry_Options_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Geometry_Options_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Geometry_Options_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Geometry_Options_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Geometry_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Geometry_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Geometry_Options() {
  void * jresult ;
  HTK_Geometry_Options *result = 0 ;
  
  result = (HTK_Geometry_Options *)new HTK_Geometry_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Geometry_Options(void * jarg1) {
  HTK_Geometry_Options *arg1 = (HTK_Geometry_Options *) 0 ;
  
  arg1 = (HTK_Geometry_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_ExecuteSwigExplicitHTK_Visibility(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Visibility::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_InterpretSwigExplicitHTK_Visibility__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Visibility::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_InterpretSwigExplicitHTK_Visibility__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Visibility::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Interpret_specialSwigExplicitHTK_Visibility(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Visibility::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Visibility const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Visibility_CloneSwigExplicitHTK_Visibility(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Visibility *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Visibility const *)arg1)->HTK_Visibility::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Visibility() {
  void * jresult ;
  HTK_Visibility *result = 0 ;
  
  result = (HTK_Visibility *)new SwigDirector_HTK_Visibility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Visibility(void * jarg1) {
  HTK_Visibility *arg1 = (HTK_Visibility *) 0 ;
  
  arg1 = (HTK_Visibility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Visibility_director_connect(void *objarg, SwigDirector_HTK_Visibility::SWIG_Callback0_t callback0, SwigDirector_HTK_Visibility::SWIG_Callback1_t callback1, SwigDirector_HTK_Visibility::SWIG_Callback2_t callback2, SwigDirector_HTK_Visibility::SWIG_Callback3_t callback3, SwigDirector_HTK_Visibility::SWIG_Callback4_t callback4, SwigDirector_HTK_Visibility::SWIG_Callback5_t callback5, SwigDirector_HTK_Visibility::SWIG_Callback6_t callback6, SwigDirector_HTK_Visibility::SWIG_Callback7_t callback7, SwigDirector_HTK_Visibility::SWIG_Callback8_t callback8, SwigDirector_HTK_Visibility::SWIG_Callback9_t callback9) {
  HTK_Visibility *obj = (HTK_Visibility *)objarg;
  SwigDirector_HTK_Visibility *director = dynamic_cast<SwigDirector_HTK_Visibility *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_ExecuteSwigExplicitHTK_Selectability(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Selectability::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_InterpretSwigExplicitHTK_Selectability__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Selectability::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_InterpretSwigExplicitHTK_Selectability__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Selectability::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Interpret_specialSwigExplicitHTK_Selectability(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Selectability::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Selectability const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Selectability_CloneSwigExplicitHTK_Selectability(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Selectability *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Selectability const *)arg1)->HTK_Selectability::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Selectability() {
  void * jresult ;
  HTK_Selectability *result = 0 ;
  
  result = (HTK_Selectability *)new SwigDirector_HTK_Selectability();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Selectability(void * jarg1) {
  HTK_Selectability *arg1 = (HTK_Selectability *) 0 ;
  
  arg1 = (HTK_Selectability *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Selectability_director_connect(void *objarg, SwigDirector_HTK_Selectability::SWIG_Callback0_t callback0, SwigDirector_HTK_Selectability::SWIG_Callback1_t callback1, SwigDirector_HTK_Selectability::SWIG_Callback2_t callback2, SwigDirector_HTK_Selectability::SWIG_Callback3_t callback3, SwigDirector_HTK_Selectability::SWIG_Callback4_t callback4, SwigDirector_HTK_Selectability::SWIG_Callback5_t callback5, SwigDirector_HTK_Selectability::SWIG_Callback6_t callback6, SwigDirector_HTK_Selectability::SWIG_Callback7_t callback7, SwigDirector_HTK_Selectability::SWIG_Callback8_t callback8, SwigDirector_HTK_Selectability::SWIG_Callback9_t callback9) {
  HTK_Selectability *obj = (HTK_Selectability *)objarg;
  SwigDirector_HTK_Selectability *director = dynamic_cast<SwigDirector_HTK_Selectability *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Matrix(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Matrix *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Matrix *)new SwigDirector_HTK_Matrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_ExecuteSwigExplicitHTK_Matrix(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Matrix::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_InterpretSwigExplicitHTK_Matrix__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Matrix::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_InterpretSwigExplicitHTK_Matrix__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Matrix::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Interpret_specialSwigExplicitHTK_Matrix(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Matrix::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Matrix const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Matrix_CloneSwigExplicitHTK_Matrix(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Matrix *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Matrix const *)arg1)->HTK_Matrix::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Matrix(void * jarg1) {
  HTK_Matrix *arg1 = (HTK_Matrix *) 0 ;
  
  arg1 = (HTK_Matrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Matrix_director_connect(void *objarg, SwigDirector_HTK_Matrix::SWIG_Callback0_t callback0, SwigDirector_HTK_Matrix::SWIG_Callback1_t callback1, SwigDirector_HTK_Matrix::SWIG_Callback2_t callback2, SwigDirector_HTK_Matrix::SWIG_Callback3_t callback3, SwigDirector_HTK_Matrix::SWIG_Callback4_t callback4, SwigDirector_HTK_Matrix::SWIG_Callback5_t callback5, SwigDirector_HTK_Matrix::SWIG_Callback6_t callback6, SwigDirector_HTK_Matrix::SWIG_Callback7_t callback7, SwigDirector_HTK_Matrix::SWIG_Callback8_t callback8, SwigDirector_HTK_Matrix::SWIG_Callback9_t callback9) {
  HTK_Matrix *obj = (HTK_Matrix *)objarg;
  SwigDirector_HTK_Matrix *director = dynamic_cast<SwigDirector_HTK_Matrix *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Enumerated(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Enumerated *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Enumerated *)new SwigDirector_HTK_Enumerated(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_ExecuteSwigExplicitHTK_Enumerated(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Enumerated::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_InterpretSwigExplicitHTK_Enumerated__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Enumerated::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_InterpretSwigExplicitHTK_Enumerated__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Enumerated::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Interpret__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Interpret(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Interpret_specialSwigExplicitHTK_Enumerated(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Enumerated::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Enumerated const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Enumerated_CloneSwigExplicitHTK_Enumerated(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Enumerated const *)arg1)->HTK_Enumerated::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Enumerated(void * jarg1) {
  HTK_Enumerated *arg1 = (HTK_Enumerated *) 0 ;
  
  arg1 = (HTK_Enumerated *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Enumerated_director_connect(void *objarg, SwigDirector_HTK_Enumerated::SWIG_Callback0_t callback0, SwigDirector_HTK_Enumerated::SWIG_Callback1_t callback1, SwigDirector_HTK_Enumerated::SWIG_Callback2_t callback2, SwigDirector_HTK_Enumerated::SWIG_Callback3_t callback3, SwigDirector_HTK_Enumerated::SWIG_Callback4_t callback4, SwigDirector_HTK_Enumerated::SWIG_Callback5_t callback5, SwigDirector_HTK_Enumerated::SWIG_Callback6_t callback6, SwigDirector_HTK_Enumerated::SWIG_Callback7_t callback7, SwigDirector_HTK_Enumerated::SWIG_Callback8_t callback8, SwigDirector_HTK_Enumerated::SWIG_Callback9_t callback9) {
  HTK_Enumerated *obj = (HTK_Enumerated *)objarg;
  SwigDirector_HTK_Enumerated *director = dynamic_cast<SwigDirector_HTK_Enumerated *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Size(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Size *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Size *)new SwigDirector_HTK_Size(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_ExecuteSwigExplicitHTK_Size(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Size::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_InterpretSwigExplicitHTK_Size__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Size::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_InterpretSwigExplicitHTK_Size__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Size::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Interpret_specialSwigExplicitHTK_Size(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Size::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Size const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Size_CloneSwigExplicitHTK_Size(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Size *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Size const *)arg1)->HTK_Size::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Size(void * jarg1) {
  HTK_Size *arg1 = (HTK_Size *) 0 ;
  
  arg1 = (HTK_Size *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Size_director_connect(void *objarg, SwigDirector_HTK_Size::SWIG_Callback0_t callback0, SwigDirector_HTK_Size::SWIG_Callback1_t callback1, SwigDirector_HTK_Size::SWIG_Callback2_t callback2, SwigDirector_HTK_Size::SWIG_Callback3_t callback3, SwigDirector_HTK_Size::SWIG_Callback4_t callback4, SwigDirector_HTK_Size::SWIG_Callback5_t callback5, SwigDirector_HTK_Size::SWIG_Callback6_t callback6, SwigDirector_HTK_Size::SWIG_Callback7_t callback7, SwigDirector_HTK_Size::SWIG_Callback8_t callback8, SwigDirector_HTK_Size::SWIG_Callback9_t callback9) {
  HTK_Size *obj = (HTK_Size *)objarg;
  SwigDirector_HTK_Size *director = dynamic_cast<SwigDirector_HTK_Size *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Linear_Pattern(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Linear_Pattern *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Linear_Pattern *)new SwigDirector_HTK_Linear_Pattern(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_ExecuteSwigExplicitHTK_Linear_Pattern(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Linear_Pattern::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_InterpretSwigExplicitHTK_Linear_Pattern__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Linear_Pattern::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_InterpretSwigExplicitHTK_Linear_Pattern__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Linear_Pattern::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Interpret__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Interpret(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Interpret_specialSwigExplicitHTK_Linear_Pattern(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Linear_Pattern::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Linear_Pattern const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Linear_Pattern_CloneSwigExplicitHTK_Linear_Pattern(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Linear_Pattern const *)arg1)->HTK_Linear_Pattern::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Linear_Pattern(void * jarg1) {
  HTK_Linear_Pattern *arg1 = (HTK_Linear_Pattern *) 0 ;
  
  arg1 = (HTK_Linear_Pattern *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Linear_Pattern_director_connect(void *objarg, SwigDirector_HTK_Linear_Pattern::SWIG_Callback0_t callback0, SwigDirector_HTK_Linear_Pattern::SWIG_Callback1_t callback1, SwigDirector_HTK_Linear_Pattern::SWIG_Callback2_t callback2, SwigDirector_HTK_Linear_Pattern::SWIG_Callback3_t callback3, SwigDirector_HTK_Linear_Pattern::SWIG_Callback4_t callback4, SwigDirector_HTK_Linear_Pattern::SWIG_Callback5_t callback5, SwigDirector_HTK_Linear_Pattern::SWIG_Callback6_t callback6, SwigDirector_HTK_Linear_Pattern::SWIG_Callback7_t callback7, SwigDirector_HTK_Linear_Pattern::SWIG_Callback8_t callback8, SwigDirector_HTK_Linear_Pattern::SWIG_Callback9_t callback9) {
  HTK_Linear_Pattern *obj = (HTK_Linear_Pattern *)objarg;
  SwigDirector_HTK_Linear_Pattern *director = dynamic_cast<SwigDirector_HTK_Linear_Pattern *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Named(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Named *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Named *)new SwigDirector_HTK_Named(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_ExecuteSwigExplicitHTK_Named(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Named::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_InterpretSwigExplicitHTK_Named__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Named::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_InterpretSwigExplicitHTK_Named__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Named::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Interpret__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Interpret(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Interpret_specialSwigExplicitHTK_Named(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Named::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Named const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_CloneSwigExplicitHTK_Named(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Named const *)arg1)->HTK_Named::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Named(void * jarg1) {
  HTK_Named *arg1 = (HTK_Named *) 0 ;
  
  arg1 = (HTK_Named *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Named_director_connect(void *objarg, SwigDirector_HTK_Named::SWIG_Callback0_t callback0, SwigDirector_HTK_Named::SWIG_Callback1_t callback1, SwigDirector_HTK_Named::SWIG_Callback2_t callback2, SwigDirector_HTK_Named::SWIG_Callback3_t callback3, SwigDirector_HTK_Named::SWIG_Callback4_t callback4, SwigDirector_HTK_Named::SWIG_Callback5_t callback5, SwigDirector_HTK_Named::SWIG_Callback6_t callback6, SwigDirector_HTK_Named::SWIG_Callback7_t callback7, SwigDirector_HTK_Named::SWIG_Callback8_t callback8, SwigDirector_HTK_Named::SWIG_Callback9_t callback9) {
  HTK_Named *obj = (HTK_Named *)objarg;
  SwigDirector_HTK_Named *director = dynamic_cast<SwigDirector_HTK_Named *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_ExecuteSwigExplicitHTK_Streaming(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Streaming::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_InterpretSwigExplicitHTK_Streaming__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Streaming::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_InterpretSwigExplicitHTK_Streaming__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Streaming::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Interpret_specialSwigExplicitHTK_Streaming(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Streaming::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Streaming const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Streaming_CloneSwigExplicitHTK_Streaming(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Streaming *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Streaming const *)arg1)->HTK_Streaming::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Streaming() {
  void * jresult ;
  HTK_Streaming *result = 0 ;
  
  result = (HTK_Streaming *)new SwigDirector_HTK_Streaming();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Streaming(void * jarg1) {
  HTK_Streaming *arg1 = (HTK_Streaming *) 0 ;
  
  arg1 = (HTK_Streaming *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Streaming_director_connect(void *objarg, SwigDirector_HTK_Streaming::SWIG_Callback0_t callback0, SwigDirector_HTK_Streaming::SWIG_Callback1_t callback1, SwigDirector_HTK_Streaming::SWIG_Callback2_t callback2, SwigDirector_HTK_Streaming::SWIG_Callback3_t callback3, SwigDirector_HTK_Streaming::SWIG_Callback4_t callback4, SwigDirector_HTK_Streaming::SWIG_Callback5_t callback5, SwigDirector_HTK_Streaming::SWIG_Callback6_t callback6, SwigDirector_HTK_Streaming::SWIG_Callback7_t callback7, SwigDirector_HTK_Streaming::SWIG_Callback8_t callback8, SwigDirector_HTK_Streaming::SWIG_Callback9_t callback9) {
  HTK_Streaming *obj = (HTK_Streaming *)objarg;
  SwigDirector_HTK_Streaming *director = dynamic_cast<SwigDirector_HTK_Streaming *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_ExecuteSwigExplicitHTK_Conditions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Conditions::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_InterpretSwigExplicitHTK_Conditions__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Conditions::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_InterpretSwigExplicitHTK_Conditions__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Conditions::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Interpret_specialSwigExplicitHTK_Conditions(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Conditions::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Conditions const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditions_CloneSwigExplicitHTK_Conditions(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Conditions const *)arg1)->HTK_Conditions::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Conditions() {
  void * jresult ;
  HTK_Conditions *result = 0 ;
  
  result = (HTK_Conditions *)new SwigDirector_HTK_Conditions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Conditions(void * jarg1) {
  HTK_Conditions *arg1 = (HTK_Conditions *) 0 ;
  
  arg1 = (HTK_Conditions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Conditions_director_connect(void *objarg, SwigDirector_HTK_Conditions::SWIG_Callback0_t callback0, SwigDirector_HTK_Conditions::SWIG_Callback1_t callback1, SwigDirector_HTK_Conditions::SWIG_Callback2_t callback2, SwigDirector_HTK_Conditions::SWIG_Callback3_t callback3, SwigDirector_HTK_Conditions::SWIG_Callback4_t callback4, SwigDirector_HTK_Conditions::SWIG_Callback5_t callback5, SwigDirector_HTK_Conditions::SWIG_Callback6_t callback6, SwigDirector_HTK_Conditions::SWIG_Callback7_t callback7, SwigDirector_HTK_Conditions::SWIG_Callback8_t callback8, SwigDirector_HTK_Conditions::SWIG_Callback9_t callback9) {
  HTK_Conditions *obj = (HTK_Conditions *)objarg;
  SwigDirector_HTK_Conditions *director = dynamic_cast<SwigDirector_HTK_Conditions *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Action_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Action_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Action_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Action_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Action_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Conditional_Action const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Conditional_Action() {
  void * jresult ;
  HTK_Conditional_Action *result = 0 ;
  
  result = (HTK_Conditional_Action *)new HTK_Conditional_Action();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Conditional_Action(void * jarg1) {
  HTK_Conditional_Action *arg1 = (HTK_Conditional_Action *) 0 ;
  
  arg1 = (HTK_Conditional_Action *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Conditional_Actions() {
  void * jresult ;
  HTK_Conditional_Actions *result = 0 ;
  
  result = (HTK_Conditional_Actions *)new HTK_Conditional_Actions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Conditional_Actions(void * jarg1) {
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Conditional_Actions_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Conditional_Actions *arg1 = (HTK_Conditional_Actions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Conditional_Actions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Conditional_Actions const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_ExecuteSwigExplicitHTK_User_Options(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_User_Options::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_InterpretSwigExplicitHTK_User_Options__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Options::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_InterpretSwigExplicitHTK_User_Options__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_User_Options::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Interpret_specialSwigExplicitHTK_User_Options(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Options::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Options_CloneSwigExplicitHTK_User_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Options const *)arg1)->HTK_User_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_User_Options() {
  void * jresult ;
  HTK_User_Options *result = 0 ;
  
  result = (HTK_User_Options *)new SwigDirector_HTK_User_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_User_Options(void * jarg1) {
  HTK_User_Options *arg1 = (HTK_User_Options *) 0 ;
  
  arg1 = (HTK_User_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_User_Options_director_connect(void *objarg, SwigDirector_HTK_User_Options::SWIG_Callback0_t callback0, SwigDirector_HTK_User_Options::SWIG_Callback1_t callback1, SwigDirector_HTK_User_Options::SWIG_Callback2_t callback2, SwigDirector_HTK_User_Options::SWIG_Callback3_t callback3, SwigDirector_HTK_User_Options::SWIG_Callback4_t callback4, SwigDirector_HTK_User_Options::SWIG_Callback5_t callback5, SwigDirector_HTK_User_Options::SWIG_Callback6_t callback6, SwigDirector_HTK_User_Options::SWIG_Callback7_t callback7, SwigDirector_HTK_User_Options::SWIG_Callback8_t callback8, SwigDirector_HTK_User_Options::SWIG_Callback9_t callback9) {
  HTK_User_Options *obj = (HTK_User_Options *)objarg;
  SwigDirector_HTK_User_Options *director = dynamic_cast<SwigDirector_HTK_User_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_ExecuteSwigExplicitHTK_Unicode_Options(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Unicode_Options::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_InterpretSwigExplicitHTK_Unicode_Options__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Unicode_Options::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_InterpretSwigExplicitHTK_Unicode_Options__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Unicode_Options::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Interpret_specialSwigExplicitHTK_Unicode_Options(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Unicode_Options::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Unicode_Options const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Unicode_Options_CloneSwigExplicitHTK_Unicode_Options(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Unicode_Options const *)arg1)->HTK_Unicode_Options::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Unicode_Options() {
  void * jresult ;
  HTK_Unicode_Options *result = 0 ;
  
  result = (HTK_Unicode_Options *)new SwigDirector_HTK_Unicode_Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Unicode_Options(void * jarg1) {
  HTK_Unicode_Options *arg1 = (HTK_Unicode_Options *) 0 ;
  
  arg1 = (HTK_Unicode_Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Unicode_Options_director_connect(void *objarg, SwigDirector_HTK_Unicode_Options::SWIG_Callback0_t callback0, SwigDirector_HTK_Unicode_Options::SWIG_Callback1_t callback1, SwigDirector_HTK_Unicode_Options::SWIG_Callback2_t callback2, SwigDirector_HTK_Unicode_Options::SWIG_Callback3_t callback3, SwigDirector_HTK_Unicode_Options::SWIG_Callback4_t callback4, SwigDirector_HTK_Unicode_Options::SWIG_Callback5_t callback5, SwigDirector_HTK_Unicode_Options::SWIG_Callback6_t callback6, SwigDirector_HTK_Unicode_Options::SWIG_Callback7_t callback7, SwigDirector_HTK_Unicode_Options::SWIG_Callback8_t callback8, SwigDirector_HTK_Unicode_Options::SWIG_Callback9_t callback9) {
  HTK_Unicode_Options *obj = (HTK_Unicode_Options *)objarg;
  SwigDirector_HTK_Unicode_Options *director = dynamic_cast<SwigDirector_HTK_Unicode_Options *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_ExecuteSwigExplicitHTK_User_Index(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_User_Index::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_InterpretSwigExplicitHTK_User_Index__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Index::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_InterpretSwigExplicitHTK_User_Index__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_User_Index::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Interpret_specialSwigExplicitHTK_User_Index(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Index::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Index const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_CloneSwigExplicitHTK_User_Index(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Index const *)arg1)->HTK_User_Index::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_User_Index() {
  void * jresult ;
  HTK_User_Index *result = 0 ;
  
  result = (HTK_User_Index *)new SwigDirector_HTK_User_Index();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_User_Index(void * jarg1) {
  HTK_User_Index *arg1 = (HTK_User_Index *) 0 ;
  
  arg1 = (HTK_User_Index *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_User_Index_director_connect(void *objarg, SwigDirector_HTK_User_Index::SWIG_Callback0_t callback0, SwigDirector_HTK_User_Index::SWIG_Callback1_t callback1, SwigDirector_HTK_User_Index::SWIG_Callback2_t callback2, SwigDirector_HTK_User_Index::SWIG_Callback3_t callback3, SwigDirector_HTK_User_Index::SWIG_Callback4_t callback4, SwigDirector_HTK_User_Index::SWIG_Callback5_t callback5, SwigDirector_HTK_User_Index::SWIG_Callback6_t callback6, SwigDirector_HTK_User_Index::SWIG_Callback7_t callback7, SwigDirector_HTK_User_Index::SWIG_Callback8_t callback8, SwigDirector_HTK_User_Index::SWIG_Callback9_t callback9) {
  HTK_User_Index *obj = (HTK_User_Index *)objarg;
  SwigDirector_HTK_User_Index *director = dynamic_cast<SwigDirector_HTK_User_Index *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Data_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Data_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Data_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Data_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Index_Data_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Index_Data const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_User_Index_Data() {
  void * jresult ;
  HTK_User_Index_Data *result = 0 ;
  
  result = (HTK_User_Index_Data *)new HTK_User_Index_Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_User_Index_Data(void * jarg1) {
  HTK_User_Index_Data *arg1 = (HTK_User_Index_Data *) 0 ;
  
  arg1 = (HTK_User_Index_Data *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_ExecuteSwigExplicitHTK_User_Value(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_User_Value::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_InterpretSwigExplicitHTK_User_Value__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Value::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_InterpretSwigExplicitHTK_User_Value__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_User_Value::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Interpret_specialSwigExplicitHTK_User_Value(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_User_Value::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Value const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_User_Value_CloneSwigExplicitHTK_User_Value(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_User_Value *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_User_Value const *)arg1)->HTK_User_Value::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_User_Value() {
  void * jresult ;
  HTK_User_Value *result = 0 ;
  
  result = (HTK_User_Value *)new SwigDirector_HTK_User_Value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_User_Value(void * jarg1) {
  HTK_User_Value *arg1 = (HTK_User_Value *) 0 ;
  
  arg1 = (HTK_User_Value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_User_Value_director_connect(void *objarg, SwigDirector_HTK_User_Value::SWIG_Callback0_t callback0, SwigDirector_HTK_User_Value::SWIG_Callback1_t callback1, SwigDirector_HTK_User_Value::SWIG_Callback2_t callback2, SwigDirector_HTK_User_Value::SWIG_Callback3_t callback3, SwigDirector_HTK_User_Value::SWIG_Callback4_t callback4, SwigDirector_HTK_User_Value::SWIG_Callback5_t callback5, SwigDirector_HTK_User_Value::SWIG_Callback6_t callback6, SwigDirector_HTK_User_Value::SWIG_Callback7_t callback7, SwigDirector_HTK_User_Value::SWIG_Callback8_t callback8, SwigDirector_HTK_User_Value::SWIG_Callback9_t callback9) {
  HTK_User_Value *obj = (HTK_User_Value *)objarg;
  SwigDirector_HTK_User_Value *director = dynamic_cast<SwigDirector_HTK_User_Value *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Camera__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Camera *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Camera *)new SwigDirector_HTK_Camera(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Camera__SWIG_1() {
  void * jresult ;
  HTK_Camera *result = 0 ;
  
  result = (HTK_Camera *)new SwigDirector_HTK_Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_ExecuteSwigExplicitHTK_Camera(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Camera::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_InterpretSwigExplicitHTK_Camera__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Camera::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_InterpretSwigExplicitHTK_Camera__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Camera::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Interpret_specialSwigExplicitHTK_Camera(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Camera::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Camera const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Camera_CloneSwigExplicitHTK_Camera(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Camera *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Camera const *)arg1)->HTK_Camera::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Camera(void * jarg1) {
  HTK_Camera *arg1 = (HTK_Camera *) 0 ;
  
  arg1 = (HTK_Camera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Camera_director_connect(void *objarg, SwigDirector_HTK_Camera::SWIG_Callback0_t callback0, SwigDirector_HTK_Camera::SWIG_Callback1_t callback1, SwigDirector_HTK_Camera::SWIG_Callback2_t callback2, SwigDirector_HTK_Camera::SWIG_Callback3_t callback3, SwigDirector_HTK_Camera::SWIG_Callback4_t callback4, SwigDirector_HTK_Camera::SWIG_Callback5_t callback5, SwigDirector_HTK_Camera::SWIG_Callback6_t callback6, SwigDirector_HTK_Camera::SWIG_Callback7_t callback7, SwigDirector_HTK_Camera::SWIG_Callback8_t callback8, SwigDirector_HTK_Camera::SWIG_Callback9_t callback9) {
  HTK_Camera *obj = (HTK_Camera *)objarg;
  SwigDirector_HTK_Camera *director = dynamic_cast<SwigDirector_HTK_Camera *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_ExecuteSwigExplicitHTK_Window(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Window::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_InterpretSwigExplicitHTK_Window__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Window::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_InterpretSwigExplicitHTK_Window__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Window::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Interpret_specialSwigExplicitHTK_Window(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Window::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Window const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Window_CloneSwigExplicitHTK_Window(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Window *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Window const *)arg1)->HTK_Window::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Window() {
  void * jresult ;
  HTK_Window *result = 0 ;
  
  result = (HTK_Window *)new SwigDirector_HTK_Window();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Window(void * jarg1) {
  HTK_Window *arg1 = (HTK_Window *) 0 ;
  
  arg1 = (HTK_Window *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Window_director_connect(void *objarg, SwigDirector_HTK_Window::SWIG_Callback0_t callback0, SwigDirector_HTK_Window::SWIG_Callback1_t callback1, SwigDirector_HTK_Window::SWIG_Callback2_t callback2, SwigDirector_HTK_Window::SWIG_Callback3_t callback3, SwigDirector_HTK_Window::SWIG_Callback4_t callback4, SwigDirector_HTK_Window::SWIG_Callback5_t callback5, SwigDirector_HTK_Window::SWIG_Callback6_t callback6, SwigDirector_HTK_Window::SWIG_Callback7_t callback7, SwigDirector_HTK_Window::SWIG_Callback8_t callback8, SwigDirector_HTK_Window::SWIG_Callback9_t callback9) {
  HTK_Window *obj = (HTK_Window *)objarg;
  SwigDirector_HTK_Window *director = dynamic_cast<SwigDirector_HTK_Window *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_ExecuteSwigExplicitHTK_Clip_Region(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Clip_Region::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_InterpretSwigExplicitHTK_Clip_Region__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Clip_Region::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_InterpretSwigExplicitHTK_Clip_Region__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Clip_Region::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Interpret_specialSwigExplicitHTK_Clip_Region(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Clip_Region::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Clip_Region const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Region_CloneSwigExplicitHTK_Clip_Region(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Clip_Region const *)arg1)->HTK_Clip_Region::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Clip_Region() {
  void * jresult ;
  HTK_Clip_Region *result = 0 ;
  
  result = (HTK_Clip_Region *)new SwigDirector_HTK_Clip_Region();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Clip_Region(void * jarg1) {
  HTK_Clip_Region *arg1 = (HTK_Clip_Region *) 0 ;
  
  arg1 = (HTK_Clip_Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Clip_Region_director_connect(void *objarg, SwigDirector_HTK_Clip_Region::SWIG_Callback0_t callback0, SwigDirector_HTK_Clip_Region::SWIG_Callback1_t callback1, SwigDirector_HTK_Clip_Region::SWIG_Callback2_t callback2, SwigDirector_HTK_Clip_Region::SWIG_Callback3_t callback3, SwigDirector_HTK_Clip_Region::SWIG_Callback4_t callback4, SwigDirector_HTK_Clip_Region::SWIG_Callback5_t callback5, SwigDirector_HTK_Clip_Region::SWIG_Callback6_t callback6, SwigDirector_HTK_Clip_Region::SWIG_Callback7_t callback7, SwigDirector_HTK_Clip_Region::SWIG_Callback8_t callback8, SwigDirector_HTK_Clip_Region::SWIG_Callback9_t callback9) {
  HTK_Clip_Region *obj = (HTK_Clip_Region *)objarg;
  SwigDirector_HTK_Clip_Region *director = dynamic_cast<SwigDirector_HTK_Clip_Region *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Complex_Clip_Region_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Complex_Clip_Region_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Complex_Clip_Region_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Complex_Clip_Region_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Complex_Clip_Region_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Complex_Clip_Region const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Complex_Clip_Region() {
  void * jresult ;
  HTK_Complex_Clip_Region *result = 0 ;
  
  result = (HTK_Complex_Clip_Region *)new HTK_Complex_Clip_Region();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Complex_Clip_Region(void * jarg1) {
  HTK_Complex_Clip_Region *arg1 = (HTK_Complex_Clip_Region *) 0 ;
  
  arg1 = (HTK_Complex_Clip_Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Rectangle_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Clip_Rectangle *arg1 = (HTK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Rectangle_ExecuteSwigExplicitHTK_Clip_Rectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Clip_Rectangle *arg1 = (HTK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Clip_Rectangle::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Rectangle_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Clip_Rectangle *arg1 = (HTK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Clip_Rectangle const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Clip_Rectangle_CloneSwigExplicitHTK_Clip_Rectangle(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Clip_Rectangle *arg1 = (HTK_Clip_Rectangle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Clip_Rectangle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Clip_Rectangle const *)arg1)->HTK_Clip_Rectangle::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Clip_Rectangle() {
  void * jresult ;
  HTK_Clip_Rectangle *result = 0 ;
  
  result = (HTK_Clip_Rectangle *)new SwigDirector_HTK_Clip_Rectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Clip_Rectangle(void * jarg1) {
  HTK_Clip_Rectangle *arg1 = (HTK_Clip_Rectangle *) 0 ;
  
  arg1 = (HTK_Clip_Rectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Clip_Rectangle_director_connect(void *objarg, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback0_t callback0, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback1_t callback1, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback2_t callback2, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback3_t callback3, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback4_t callback4, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback5_t callback5, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback6_t callback6, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback7_t callback7, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback8_t callback8, SwigDirector_HTK_Clip_Rectangle::SWIG_Callback9_t callback9) {
  HTK_Clip_Rectangle *obj = (HTK_Clip_Rectangle *)objarg;
  SwigDirector_HTK_Clip_Rectangle *director = dynamic_cast<SwigDirector_HTK_Clip_Rectangle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_ExecuteSwigExplicitHTK_Text_Font(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Text_Font::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_InterpretSwigExplicitHTK_Text_Font__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Text_Font::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_InterpretSwigExplicitHTK_Text_Font__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Text_Font::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Interpret_specialSwigExplicitHTK_Text_Font(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Text_Font::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Text_Font const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Font_CloneSwigExplicitHTK_Text_Font(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Text_Font const *)arg1)->HTK_Text_Font::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Text_Font() {
  void * jresult ;
  HTK_Text_Font *result = 0 ;
  
  result = (HTK_Text_Font *)new SwigDirector_HTK_Text_Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Text_Font(void * jarg1) {
  HTK_Text_Font *arg1 = (HTK_Text_Font *) 0 ;
  
  arg1 = (HTK_Text_Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Text_Font_director_connect(void *objarg, SwigDirector_HTK_Text_Font::SWIG_Callback0_t callback0, SwigDirector_HTK_Text_Font::SWIG_Callback1_t callback1, SwigDirector_HTK_Text_Font::SWIG_Callback2_t callback2, SwigDirector_HTK_Text_Font::SWIG_Callback3_t callback3, SwigDirector_HTK_Text_Font::SWIG_Callback4_t callback4, SwigDirector_HTK_Text_Font::SWIG_Callback5_t callback5, SwigDirector_HTK_Text_Font::SWIG_Callback6_t callback6, SwigDirector_HTK_Text_Font::SWIG_Callback7_t callback7, SwigDirector_HTK_Text_Font::SWIG_Callback8_t callback8, SwigDirector_HTK_Text_Font::SWIG_Callback9_t callback9) {
  HTK_Text_Font *obj = (HTK_Text_Font *)objarg;
  SwigDirector_HTK_Text_Font *director = dynamic_cast<SwigDirector_HTK_Text_Font *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Bounding__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Bounding *)new SwigDirector_HTK_Bounding(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Bounding__SWIG_1(unsigned char jarg1, float * jarg2, float * jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  HTK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (float *)jarg2;
  arg3 = (float *)jarg3;
  result = (HTK_Bounding *)new SwigDirector_HTK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Bounding__SWIG_2(unsigned char jarg1, float * jarg2, float jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  HTK_Bounding *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (float *)jarg2;
  arg3 = (float)jarg3; 
  result = (HTK_Bounding *)new SwigDirector_HTK_Bounding(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_ExecuteSwigExplicitHTK_Bounding(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Bounding::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_InterpretSwigExplicitHTK_Bounding__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Bounding::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_InterpretSwigExplicitHTK_Bounding__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Bounding::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Interpret_specialSwigExplicitHTK_Bounding(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Bounding::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Bounding const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Bounding_CloneSwigExplicitHTK_Bounding(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Bounding *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Bounding const *)arg1)->HTK_Bounding::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Bounding(void * jarg1) {
  HTK_Bounding *arg1 = (HTK_Bounding *) 0 ;
  
  arg1 = (HTK_Bounding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Bounding_director_connect(void *objarg, SwigDirector_HTK_Bounding::SWIG_Callback0_t callback0, SwigDirector_HTK_Bounding::SWIG_Callback1_t callback1, SwigDirector_HTK_Bounding::SWIG_Callback2_t callback2, SwigDirector_HTK_Bounding::SWIG_Callback3_t callback3, SwigDirector_HTK_Bounding::SWIG_Callback4_t callback4, SwigDirector_HTK_Bounding::SWIG_Callback5_t callback5, SwigDirector_HTK_Bounding::SWIG_Callback6_t callback6, SwigDirector_HTK_Bounding::SWIG_Callback7_t callback7, SwigDirector_HTK_Bounding::SWIG_Callback8_t callback8, SwigDirector_HTK_Bounding::SWIG_Callback9_t callback9) {
  HTK_Bounding *obj = (HTK_Bounding *)objarg;
  SwigDirector_HTK_Bounding *director = dynamic_cast<SwigDirector_HTK_Bounding *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Point(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Point *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Point *)new SwigDirector_HTK_Point(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_ExecuteSwigExplicitHTK_Point(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Point::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_InterpretSwigExplicitHTK_Point__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Point::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_InterpretSwigExplicitHTK_Point__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Point::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Interpret_specialSwigExplicitHTK_Point(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Point::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Point const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Point_CloneSwigExplicitHTK_Point(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Point *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Point const *)arg1)->HTK_Point::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Point(void * jarg1) {
  HTK_Point *arg1 = (HTK_Point *) 0 ;
  
  arg1 = (HTK_Point *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Point_director_connect(void *objarg, SwigDirector_HTK_Point::SWIG_Callback0_t callback0, SwigDirector_HTK_Point::SWIG_Callback1_t callback1, SwigDirector_HTK_Point::SWIG_Callback2_t callback2, SwigDirector_HTK_Point::SWIG_Callback3_t callback3, SwigDirector_HTK_Point::SWIG_Callback4_t callback4, SwigDirector_HTK_Point::SWIG_Callback5_t callback5, SwigDirector_HTK_Point::SWIG_Callback6_t callback6, SwigDirector_HTK_Point::SWIG_Callback7_t callback7, SwigDirector_HTK_Point::SWIG_Callback8_t callback8, SwigDirector_HTK_Point::SWIG_Callback9_t callback9) {
  HTK_Point *obj = (HTK_Point *)objarg;
  SwigDirector_HTK_Point *director = dynamic_cast<SwigDirector_HTK_Point *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Line__SWIG_0(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Line *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Line *)new SwigDirector_HTK_Line(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Line__SWIG_1() {
  void * jresult ;
  HTK_Line *result = 0 ;
  
  result = (HTK_Line *)new SwigDirector_HTK_Line();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_ExecuteSwigExplicitHTK_Line(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Line::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_InterpretSwigExplicitHTK_Line__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_InterpretSwigExplicitHTK_Line__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Line::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Interpret_specialSwigExplicitHTK_Line(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_CloneSwigExplicitHTK_Line(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line const *)arg1)->HTK_Line::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Line(void * jarg1) {
  HTK_Line *arg1 = (HTK_Line *) 0 ;
  
  arg1 = (HTK_Line *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Line_director_connect(void *objarg, SwigDirector_HTK_Line::SWIG_Callback0_t callback0, SwigDirector_HTK_Line::SWIG_Callback1_t callback1, SwigDirector_HTK_Line::SWIG_Callback2_t callback2, SwigDirector_HTK_Line::SWIG_Callback3_t callback3, SwigDirector_HTK_Line::SWIG_Callback4_t callback4, SwigDirector_HTK_Line::SWIG_Callback5_t callback5, SwigDirector_HTK_Line::SWIG_Callback6_t callback6, SwigDirector_HTK_Line::SWIG_Callback7_t callback7, SwigDirector_HTK_Line::SWIG_Callback8_t callback8, SwigDirector_HTK_Line::SWIG_Callback9_t callback9) {
  HTK_Line *obj = (HTK_Line *)objarg;
  SwigDirector_HTK_Line *director = dynamic_cast<SwigDirector_HTK_Line *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Polypoint(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Polypoint *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Polypoint *)new SwigDirector_HTK_Polypoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_ExecuteSwigExplicitHTK_Polypoint(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Polypoint::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_InterpretSwigExplicitHTK_Polypoint__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Polypoint::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_InterpretSwigExplicitHTK_Polypoint__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Polypoint::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Interpret_specialSwigExplicitHTK_Polypoint(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Polypoint::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Polypoint const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polypoint_CloneSwigExplicitHTK_Polypoint(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Polypoint const *)arg1)->HTK_Polypoint::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Polypoint(void * jarg1) {
  HTK_Polypoint *arg1 = (HTK_Polypoint *) 0 ;
  
  arg1 = (HTK_Polypoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Polypoint_director_connect(void *objarg, SwigDirector_HTK_Polypoint::SWIG_Callback0_t callback0, SwigDirector_HTK_Polypoint::SWIG_Callback1_t callback1, SwigDirector_HTK_Polypoint::SWIG_Callback2_t callback2, SwigDirector_HTK_Polypoint::SWIG_Callback3_t callback3, SwigDirector_HTK_Polypoint::SWIG_Callback4_t callback4, SwigDirector_HTK_Polypoint::SWIG_Callback5_t callback5, SwigDirector_HTK_Polypoint::SWIG_Callback6_t callback6, SwigDirector_HTK_Polypoint::SWIG_Callback7_t callback7, SwigDirector_HTK_Polypoint::SWIG_Callback8_t callback8, SwigDirector_HTK_Polypoint::SWIG_Callback9_t callback9) {
  HTK_Polypoint *obj = (HTK_Polypoint *)objarg;
  SwigDirector_HTK_Polypoint *director = dynamic_cast<SwigDirector_HTK_Polypoint *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_ExecuteSwigExplicitHTK_NURBS_Curve(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_NURBS_Curve::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_InterpretSwigExplicitHTK_NURBS_Curve__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_NURBS_Curve::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_InterpretSwigExplicitHTK_NURBS_Curve__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_NURBS_Curve::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Interpret_specialSwigExplicitHTK_NURBS_Curve(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_NURBS_Curve::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_NURBS_Curve const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Curve_CloneSwigExplicitHTK_NURBS_Curve(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_NURBS_Curve const *)arg1)->HTK_NURBS_Curve::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_NURBS_Curve() {
  void * jresult ;
  HTK_NURBS_Curve *result = 0 ;
  
  result = (HTK_NURBS_Curve *)new SwigDirector_HTK_NURBS_Curve();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_NURBS_Curve(void * jarg1) {
  HTK_NURBS_Curve *arg1 = (HTK_NURBS_Curve *) 0 ;
  
  arg1 = (HTK_NURBS_Curve *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_NURBS_Curve_director_connect(void *objarg, SwigDirector_HTK_NURBS_Curve::SWIG_Callback0_t callback0, SwigDirector_HTK_NURBS_Curve::SWIG_Callback1_t callback1, SwigDirector_HTK_NURBS_Curve::SWIG_Callback2_t callback2, SwigDirector_HTK_NURBS_Curve::SWIG_Callback3_t callback3, SwigDirector_HTK_NURBS_Curve::SWIG_Callback4_t callback4, SwigDirector_HTK_NURBS_Curve::SWIG_Callback5_t callback5, SwigDirector_HTK_NURBS_Curve::SWIG_Callback6_t callback6, SwigDirector_HTK_NURBS_Curve::SWIG_Callback7_t callback7, SwigDirector_HTK_NURBS_Curve::SWIG_Callback8_t callback8, SwigDirector_HTK_NURBS_Curve::SWIG_Callback9_t callback9) {
  HTK_NURBS_Curve *obj = (HTK_NURBS_Curve *)objarg;
  SwigDirector_HTK_NURBS_Curve *director = dynamic_cast<SwigDirector_HTK_NURBS_Curve *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_ExecuteSwigExplicitHTK_NURBS_Surface(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_NURBS_Surface::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_InterpretSwigExplicitHTK_NURBS_Surface__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_NURBS_Surface::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_InterpretSwigExplicitHTK_NURBS_Surface__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_NURBS_Surface::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Interpret_specialSwigExplicitHTK_NURBS_Surface(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_NURBS_Surface::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_NURBS_Surface const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_NURBS_Surface_CloneSwigExplicitHTK_NURBS_Surface(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_NURBS_Surface const *)arg1)->HTK_NURBS_Surface::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_NURBS_Surface() {
  void * jresult ;
  HTK_NURBS_Surface *result = 0 ;
  
  result = (HTK_NURBS_Surface *)new SwigDirector_HTK_NURBS_Surface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_NURBS_Surface(void * jarg1) {
  HTK_NURBS_Surface *arg1 = (HTK_NURBS_Surface *) 0 ;
  
  arg1 = (HTK_NURBS_Surface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_NURBS_Surface_director_connect(void *objarg, SwigDirector_HTK_NURBS_Surface::SWIG_Callback0_t callback0, SwigDirector_HTK_NURBS_Surface::SWIG_Callback1_t callback1, SwigDirector_HTK_NURBS_Surface::SWIG_Callback2_t callback2, SwigDirector_HTK_NURBS_Surface::SWIG_Callback3_t callback3, SwigDirector_HTK_NURBS_Surface::SWIG_Callback4_t callback4, SwigDirector_HTK_NURBS_Surface::SWIG_Callback5_t callback5, SwigDirector_HTK_NURBS_Surface::SWIG_Callback6_t callback6, SwigDirector_HTK_NURBS_Surface::SWIG_Callback7_t callback7, SwigDirector_HTK_NURBS_Surface::SWIG_Callback8_t callback8, SwigDirector_HTK_NURBS_Surface::SWIG_Callback9_t callback9) {
  HTK_NURBS_Surface *obj = (HTK_NURBS_Surface *)objarg;
  SwigDirector_HTK_NURBS_Surface *director = dynamic_cast<SwigDirector_HTK_NURBS_Surface *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_ExecuteSwigExplicitHTK_Area_Light(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Area_Light::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_InterpretSwigExplicitHTK_Area_Light__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Area_Light::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_InterpretSwigExplicitHTK_Area_Light__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Area_Light::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Interpret_specialSwigExplicitHTK_Area_Light(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Area_Light::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Area_Light const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Area_Light_CloneSwigExplicitHTK_Area_Light(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Area_Light const *)arg1)->HTK_Area_Light::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Area_Light() {
  void * jresult ;
  HTK_Area_Light *result = 0 ;
  
  result = (HTK_Area_Light *)new SwigDirector_HTK_Area_Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Area_Light(void * jarg1) {
  HTK_Area_Light *arg1 = (HTK_Area_Light *) 0 ;
  
  arg1 = (HTK_Area_Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Area_Light_director_connect(void *objarg, SwigDirector_HTK_Area_Light::SWIG_Callback0_t callback0, SwigDirector_HTK_Area_Light::SWIG_Callback1_t callback1, SwigDirector_HTK_Area_Light::SWIG_Callback2_t callback2, SwigDirector_HTK_Area_Light::SWIG_Callback3_t callback3, SwigDirector_HTK_Area_Light::SWIG_Callback4_t callback4, SwigDirector_HTK_Area_Light::SWIG_Callback5_t callback5, SwigDirector_HTK_Area_Light::SWIG_Callback6_t callback6, SwigDirector_HTK_Area_Light::SWIG_Callback7_t callback7, SwigDirector_HTK_Area_Light::SWIG_Callback8_t callback8, SwigDirector_HTK_Area_Light::SWIG_Callback9_t callback9) {
  HTK_Area_Light *obj = (HTK_Area_Light *)objarg;
  SwigDirector_HTK_Area_Light *director = dynamic_cast<SwigDirector_HTK_Area_Light *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_ExecuteSwigExplicitHTK_Spot_Light(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Spot_Light::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_InterpretSwigExplicitHTK_Spot_Light__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Spot_Light::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_InterpretSwigExplicitHTK_Spot_Light__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Spot_Light::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Interpret_specialSwigExplicitHTK_Spot_Light(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Spot_Light::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Spot_Light const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Spot_Light_CloneSwigExplicitHTK_Spot_Light(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Spot_Light const *)arg1)->HTK_Spot_Light::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Spot_Light() {
  void * jresult ;
  HTK_Spot_Light *result = 0 ;
  
  result = (HTK_Spot_Light *)new SwigDirector_HTK_Spot_Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Spot_Light(void * jarg1) {
  HTK_Spot_Light *arg1 = (HTK_Spot_Light *) 0 ;
  
  arg1 = (HTK_Spot_Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Spot_Light_director_connect(void *objarg, SwigDirector_HTK_Spot_Light::SWIG_Callback0_t callback0, SwigDirector_HTK_Spot_Light::SWIG_Callback1_t callback1, SwigDirector_HTK_Spot_Light::SWIG_Callback2_t callback2, SwigDirector_HTK_Spot_Light::SWIG_Callback3_t callback3, SwigDirector_HTK_Spot_Light::SWIG_Callback4_t callback4, SwigDirector_HTK_Spot_Light::SWIG_Callback5_t callback5, SwigDirector_HTK_Spot_Light::SWIG_Callback6_t callback6, SwigDirector_HTK_Spot_Light::SWIG_Callback7_t callback7, SwigDirector_HTK_Spot_Light::SWIG_Callback8_t callback8, SwigDirector_HTK_Spot_Light::SWIG_Callback9_t callback9) {
  HTK_Spot_Light *obj = (HTK_Spot_Light *)objarg;
  SwigDirector_HTK_Spot_Light *director = dynamic_cast<SwigDirector_HTK_Spot_Light *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_ExecuteSwigExplicitHTK_Cutting_Plane(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Cutting_Plane::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_InterpretSwigExplicitHTK_Cutting_Plane__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Cutting_Plane::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_InterpretSwigExplicitHTK_Cutting_Plane__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Cutting_Plane::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Interpret_specialSwigExplicitHTK_Cutting_Plane(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Cutting_Plane::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Cutting_Plane const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cutting_Plane_CloneSwigExplicitHTK_Cutting_Plane(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Cutting_Plane const *)arg1)->HTK_Cutting_Plane::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Cutting_Plane() {
  void * jresult ;
  HTK_Cutting_Plane *result = 0 ;
  
  result = (HTK_Cutting_Plane *)new SwigDirector_HTK_Cutting_Plane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Cutting_Plane(void * jarg1) {
  HTK_Cutting_Plane *arg1 = (HTK_Cutting_Plane *) 0 ;
  
  arg1 = (HTK_Cutting_Plane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Cutting_Plane_director_connect(void *objarg, SwigDirector_HTK_Cutting_Plane::SWIG_Callback0_t callback0, SwigDirector_HTK_Cutting_Plane::SWIG_Callback1_t callback1, SwigDirector_HTK_Cutting_Plane::SWIG_Callback2_t callback2, SwigDirector_HTK_Cutting_Plane::SWIG_Callback3_t callback3, SwigDirector_HTK_Cutting_Plane::SWIG_Callback4_t callback4, SwigDirector_HTK_Cutting_Plane::SWIG_Callback5_t callback5, SwigDirector_HTK_Cutting_Plane::SWIG_Callback6_t callback6, SwigDirector_HTK_Cutting_Plane::SWIG_Callback7_t callback7, SwigDirector_HTK_Cutting_Plane::SWIG_Callback8_t callback8, SwigDirector_HTK_Cutting_Plane::SWIG_Callback9_t callback9) {
  HTK_Cutting_Plane *obj = (HTK_Cutting_Plane *)objarg;
  SwigDirector_HTK_Cutting_Plane *director = dynamic_cast<SwigDirector_HTK_Cutting_Plane *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Circle(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Circle *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Circle *)new SwigDirector_HTK_Circle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_ExecuteSwigExplicitHTK_Circle(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Circle::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_InterpretSwigExplicitHTK_Circle__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Circle::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_InterpretSwigExplicitHTK_Circle__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Circle::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Interpret_specialSwigExplicitHTK_Circle(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Circle::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Circle const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Circle_CloneSwigExplicitHTK_Circle(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Circle *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Circle const *)arg1)->HTK_Circle::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Circle(void * jarg1) {
  HTK_Circle *arg1 = (HTK_Circle *) 0 ;
  
  arg1 = (HTK_Circle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Circle_director_connect(void *objarg, SwigDirector_HTK_Circle::SWIG_Callback0_t callback0, SwigDirector_HTK_Circle::SWIG_Callback1_t callback1, SwigDirector_HTK_Circle::SWIG_Callback2_t callback2, SwigDirector_HTK_Circle::SWIG_Callback3_t callback3, SwigDirector_HTK_Circle::SWIG_Callback4_t callback4, SwigDirector_HTK_Circle::SWIG_Callback5_t callback5, SwigDirector_HTK_Circle::SWIG_Callback6_t callback6, SwigDirector_HTK_Circle::SWIG_Callback7_t callback7, SwigDirector_HTK_Circle::SWIG_Callback8_t callback8, SwigDirector_HTK_Circle::SWIG_Callback9_t callback9) {
  HTK_Circle *obj = (HTK_Circle *)objarg;
  SwigDirector_HTK_Circle *director = dynamic_cast<SwigDirector_HTK_Circle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Ellipse(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Ellipse *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Ellipse *)new SwigDirector_HTK_Ellipse(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_ExecuteSwigExplicitHTK_Ellipse(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Ellipse::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_InterpretSwigExplicitHTK_Ellipse__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Ellipse::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_InterpretSwigExplicitHTK_Ellipse__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Ellipse::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Interpret_specialSwigExplicitHTK_Ellipse(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Ellipse::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Ellipse const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Ellipse_CloneSwigExplicitHTK_Ellipse(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Ellipse const *)arg1)->HTK_Ellipse::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Ellipse(void * jarg1) {
  HTK_Ellipse *arg1 = (HTK_Ellipse *) 0 ;
  
  arg1 = (HTK_Ellipse *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Ellipse_director_connect(void *objarg, SwigDirector_HTK_Ellipse::SWIG_Callback0_t callback0, SwigDirector_HTK_Ellipse::SWIG_Callback1_t callback1, SwigDirector_HTK_Ellipse::SWIG_Callback2_t callback2, SwigDirector_HTK_Ellipse::SWIG_Callback3_t callback3, SwigDirector_HTK_Ellipse::SWIG_Callback4_t callback4, SwigDirector_HTK_Ellipse::SWIG_Callback5_t callback5, SwigDirector_HTK_Ellipse::SWIG_Callback6_t callback6, SwigDirector_HTK_Ellipse::SWIG_Callback7_t callback7, SwigDirector_HTK_Ellipse::SWIG_Callback8_t callback8, SwigDirector_HTK_Ellipse::SWIG_Callback9_t callback9) {
  HTK_Ellipse *obj = (HTK_Ellipse *)objarg;
  SwigDirector_HTK_Ellipse *director = dynamic_cast<SwigDirector_HTK_Ellipse *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Sphere() {
  void * jresult ;
  HTK_Sphere *result = 0 ;
  
  result = (HTK_Sphere *)new SwigDirector_HTK_Sphere();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_ExecuteSwigExplicitHTK_Sphere(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Sphere::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_InterpretSwigExplicitHTK_Sphere__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Sphere::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_InterpretSwigExplicitHTK_Sphere__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Sphere::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Interpret_specialSwigExplicitHTK_Sphere(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Sphere::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Sphere const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Sphere_CloneSwigExplicitHTK_Sphere(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Sphere *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Sphere const *)arg1)->HTK_Sphere::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Sphere(void * jarg1) {
  HTK_Sphere *arg1 = (HTK_Sphere *) 0 ;
  
  arg1 = (HTK_Sphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Sphere_director_connect(void *objarg, SwigDirector_HTK_Sphere::SWIG_Callback0_t callback0, SwigDirector_HTK_Sphere::SWIG_Callback1_t callback1, SwigDirector_HTK_Sphere::SWIG_Callback2_t callback2, SwigDirector_HTK_Sphere::SWIG_Callback3_t callback3, SwigDirector_HTK_Sphere::SWIG_Callback4_t callback4, SwigDirector_HTK_Sphere::SWIG_Callback5_t callback5, SwigDirector_HTK_Sphere::SWIG_Callback6_t callback6, SwigDirector_HTK_Sphere::SWIG_Callback7_t callback7, SwigDirector_HTK_Sphere::SWIG_Callback8_t callback8, SwigDirector_HTK_Sphere::SWIG_Callback9_t callback9) {
  HTK_Sphere *obj = (HTK_Sphere *)objarg;
  SwigDirector_HTK_Sphere *director = dynamic_cast<SwigDirector_HTK_Sphere *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Cylinder() {
  void * jresult ;
  HTK_Cylinder *result = 0 ;
  
  result = (HTK_Cylinder *)new SwigDirector_HTK_Cylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_ExecuteSwigExplicitHTK_Cylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Cylinder::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_InterpretSwigExplicitHTK_Cylinder__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Cylinder::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_InterpretSwigExplicitHTK_Cylinder__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Cylinder::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Interpret_specialSwigExplicitHTK_Cylinder(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Cylinder::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Cylinder const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Cylinder_CloneSwigExplicitHTK_Cylinder(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Cylinder const *)arg1)->HTK_Cylinder::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Cylinder(void * jarg1) {
  HTK_Cylinder *arg1 = (HTK_Cylinder *) 0 ;
  
  arg1 = (HTK_Cylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Cylinder_director_connect(void *objarg, SwigDirector_HTK_Cylinder::SWIG_Callback0_t callback0, SwigDirector_HTK_Cylinder::SWIG_Callback1_t callback1, SwigDirector_HTK_Cylinder::SWIG_Callback2_t callback2, SwigDirector_HTK_Cylinder::SWIG_Callback3_t callback3, SwigDirector_HTK_Cylinder::SWIG_Callback4_t callback4, SwigDirector_HTK_Cylinder::SWIG_Callback5_t callback5, SwigDirector_HTK_Cylinder::SWIG_Callback6_t callback6, SwigDirector_HTK_Cylinder::SWIG_Callback7_t callback7, SwigDirector_HTK_Cylinder::SWIG_Callback8_t callback8, SwigDirector_HTK_Cylinder::SWIG_Callback9_t callback9) {
  HTK_Cylinder *obj = (HTK_Cylinder *)objarg;
  SwigDirector_HTK_Cylinder *director = dynamic_cast<SwigDirector_HTK_Cylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_PolyCylinder() {
  void * jresult ;
  HTK_PolyCylinder *result = 0 ;
  
  result = (HTK_PolyCylinder *)new SwigDirector_HTK_PolyCylinder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyCylinder_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyCylinder_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyCylinder_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyCylinder_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyCylinder_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_PolyCylinder const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_PolyCylinder(void * jarg1) {
  HTK_PolyCylinder *arg1 = (HTK_PolyCylinder *) 0 ;
  
  arg1 = (HTK_PolyCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_PolyCylinder_director_connect(void *objarg, SwigDirector_HTK_PolyCylinder::SWIG_Callback0_t callback0, SwigDirector_HTK_PolyCylinder::SWIG_Callback1_t callback1, SwigDirector_HTK_PolyCylinder::SWIG_Callback2_t callback2, SwigDirector_HTK_PolyCylinder::SWIG_Callback3_t callback3, SwigDirector_HTK_PolyCylinder::SWIG_Callback4_t callback4, SwigDirector_HTK_PolyCylinder::SWIG_Callback5_t callback5, SwigDirector_HTK_PolyCylinder::SWIG_Callback6_t callback6, SwigDirector_HTK_PolyCylinder::SWIG_Callback7_t callback7, SwigDirector_HTK_PolyCylinder::SWIG_Callback8_t callback8, SwigDirector_HTK_PolyCylinder::SWIG_Callback9_t callback9, SwigDirector_HTK_PolyCylinder::SWIG_Callback10_t callback10, SwigDirector_HTK_PolyCylinder::SWIG_Callback11_t callback11, SwigDirector_HTK_PolyCylinder::SWIG_Callback12_t callback12, SwigDirector_HTK_PolyCylinder::SWIG_Callback13_t callback13, SwigDirector_HTK_PolyCylinder::SWIG_Callback14_t callback14, SwigDirector_HTK_PolyCylinder::SWIG_Callback15_t callback15, SwigDirector_HTK_PolyCylinder::SWIG_Callback16_t callback16, SwigDirector_HTK_PolyCylinder::SWIG_Callback17_t callback17, SwigDirector_HTK_PolyCylinder::SWIG_Callback18_t callback18, SwigDirector_HTK_PolyCylinder::SWIG_Callback19_t callback19, SwigDirector_HTK_PolyCylinder::SWIG_Callback20_t callback20, SwigDirector_HTK_PolyCylinder::SWIG_Callback21_t callback21, SwigDirector_HTK_PolyCylinder::SWIG_Callback22_t callback22, SwigDirector_HTK_PolyCylinder::SWIG_Callback23_t callback23, SwigDirector_HTK_PolyCylinder::SWIG_Callback24_t callback24, SwigDirector_HTK_PolyCylinder::SWIG_Callback25_t callback25) {
  HTK_PolyCylinder *obj = (HTK_PolyCylinder *)objarg;
  SwigDirector_HTK_PolyCylinder *director = dynamic_cast<SwigDirector_HTK_PolyCylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_ExecuteSwigExplicitHTK_Grid(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Grid::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_InterpretSwigExplicitHTK_Grid__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Grid::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_InterpretSwigExplicitHTK_Grid__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Grid::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Interpret_specialSwigExplicitHTK_Grid(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Grid::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Grid const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Grid_CloneSwigExplicitHTK_Grid(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Grid *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Grid const *)arg1)->HTK_Grid::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Grid() {
  void * jresult ;
  HTK_Grid *result = 0 ;
  
  result = (HTK_Grid *)new SwigDirector_HTK_Grid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Grid(void * jarg1) {
  HTK_Grid *arg1 = (HTK_Grid *) 0 ;
  
  arg1 = (HTK_Grid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Grid_director_connect(void *objarg, SwigDirector_HTK_Grid::SWIG_Callback0_t callback0, SwigDirector_HTK_Grid::SWIG_Callback1_t callback1, SwigDirector_HTK_Grid::SWIG_Callback2_t callback2, SwigDirector_HTK_Grid::SWIG_Callback3_t callback3, SwigDirector_HTK_Grid::SWIG_Callback4_t callback4, SwigDirector_HTK_Grid::SWIG_Callback5_t callback5, SwigDirector_HTK_Grid::SWIG_Callback6_t callback6, SwigDirector_HTK_Grid::SWIG_Callback7_t callback7, SwigDirector_HTK_Grid::SWIG_Callback8_t callback8, SwigDirector_HTK_Grid::SWIG_Callback9_t callback9) {
  HTK_Grid *obj = (HTK_Grid *)objarg;
  SwigDirector_HTK_Grid *director = dynamic_cast<SwigDirector_HTK_Grid *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Text(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_Text *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_Text *)new SwigDirector_HTK_Text(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_ExecuteSwigExplicitHTK_Text(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Text::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_InterpretSwigExplicitHTK_Text__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Text::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_InterpretSwigExplicitHTK_Text__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Text::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Interpret_specialSwigExplicitHTK_Text(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Text::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Text const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Text_CloneSwigExplicitHTK_Text(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Text *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Text const *)arg1)->HTK_Text::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Text(void * jarg1) {
  HTK_Text *arg1 = (HTK_Text *) 0 ;
  
  arg1 = (HTK_Text *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Text_director_connect(void *objarg, SwigDirector_HTK_Text::SWIG_Callback0_t callback0, SwigDirector_HTK_Text::SWIG_Callback1_t callback1, SwigDirector_HTK_Text::SWIG_Callback2_t callback2, SwigDirector_HTK_Text::SWIG_Callback3_t callback3, SwigDirector_HTK_Text::SWIG_Callback4_t callback4, SwigDirector_HTK_Text::SWIG_Callback5_t callback5, SwigDirector_HTK_Text::SWIG_Callback6_t callback6, SwigDirector_HTK_Text::SWIG_Callback7_t callback7, SwigDirector_HTK_Text::SWIG_Callback8_t callback8, SwigDirector_HTK_Text::SWIG_Callback9_t callback9) {
  HTK_Text *obj = (HTK_Text *)objarg;
  SwigDirector_HTK_Text *director = dynamic_cast<SwigDirector_HTK_Text *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_ExecuteSwigExplicitHTK_Font(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Font::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_InterpretSwigExplicitHTK_Font__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Font::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_InterpretSwigExplicitHTK_Font__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Font::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Interpret_specialSwigExplicitHTK_Font(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Font::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Font const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Font_CloneSwigExplicitHTK_Font(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Font *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Font const *)arg1)->HTK_Font::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Font() {
  void * jresult ;
  HTK_Font *result = 0 ;
  
  result = (HTK_Font *)new SwigDirector_HTK_Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Font(void * jarg1) {
  HTK_Font *arg1 = (HTK_Font *) 0 ;
  
  arg1 = (HTK_Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Font_director_connect(void *objarg, SwigDirector_HTK_Font::SWIG_Callback0_t callback0, SwigDirector_HTK_Font::SWIG_Callback1_t callback1, SwigDirector_HTK_Font::SWIG_Callback2_t callback2, SwigDirector_HTK_Font::SWIG_Callback3_t callback3, SwigDirector_HTK_Font::SWIG_Callback4_t callback4, SwigDirector_HTK_Font::SWIG_Callback5_t callback5, SwigDirector_HTK_Font::SWIG_Callback6_t callback6, SwigDirector_HTK_Font::SWIG_Callback7_t callback7, SwigDirector_HTK_Font::SWIG_Callback8_t callback8, SwigDirector_HTK_Font::SWIG_Callback9_t callback9) {
  HTK_Font *obj = (HTK_Font *)objarg;
  SwigDirector_HTK_Font *director = dynamic_cast<SwigDirector_HTK_Font *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Image() {
  void * jresult ;
  HTK_Image *result = 0 ;
  
  result = (HTK_Image *)new SwigDirector_HTK_Image();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_ExecuteSwigExplicitHTK_Image(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Image::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_InterpretSwigExplicitHTK_Image__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Image::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_InterpretSwigExplicitHTK_Image__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Image::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Interpret_specialSwigExplicitHTK_Image(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Image::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Image const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Image_CloneSwigExplicitHTK_Image(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Image *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Image const *)arg1)->HTK_Image::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Image(void * jarg1) {
  HTK_Image *arg1 = (HTK_Image *) 0 ;
  
  arg1 = (HTK_Image *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Image_director_connect(void *objarg, SwigDirector_HTK_Image::SWIG_Callback0_t callback0, SwigDirector_HTK_Image::SWIG_Callback1_t callback1, SwigDirector_HTK_Image::SWIG_Callback2_t callback2, SwigDirector_HTK_Image::SWIG_Callback3_t callback3, SwigDirector_HTK_Image::SWIG_Callback4_t callback4, SwigDirector_HTK_Image::SWIG_Callback5_t callback5, SwigDirector_HTK_Image::SWIG_Callback6_t callback6, SwigDirector_HTK_Image::SWIG_Callback7_t callback7, SwigDirector_HTK_Image::SWIG_Callback8_t callback8, SwigDirector_HTK_Image::SWIG_Callback9_t callback9) {
  HTK_Image *obj = (HTK_Image *)objarg;
  SwigDirector_HTK_Image *director = dynamic_cast<SwigDirector_HTK_Image *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Texture() {
  void * jresult ;
  HTK_Texture *result = 0 ;
  
  result = (HTK_Texture *)new SwigDirector_HTK_Texture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Texture(void * jarg1) {
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  
  arg1 = (HTK_Texture *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_WriteSwigExplicitHTK_Texture(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Texture::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_ExecuteSwigExplicitHTK_Texture(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Texture::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_InterpretSwigExplicitHTK_Texture__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Texture::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_InterpretSwigExplicitHTK_Texture__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Texture::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Interpret_specialSwigExplicitHTK_Texture(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Texture::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Texture_Reset(void * jarg1) {
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  
  arg1 = (HTK_Texture *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Texture_ResetSwigExplicitHTK_Texture(void * jarg1) {
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  
  arg1 = (HTK_Texture *)jarg1; 
  (arg1)->HTK_Texture::Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Texture const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_CloneSwigExplicitHTK_Texture(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Texture *arg1 = (HTK_Texture *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Texture const *)arg1)->HTK_Texture::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Texture_director_connect(void *objarg, SwigDirector_HTK_Texture::SWIG_Callback0_t callback0, SwigDirector_HTK_Texture::SWIG_Callback1_t callback1, SwigDirector_HTK_Texture::SWIG_Callback2_t callback2, SwigDirector_HTK_Texture::SWIG_Callback3_t callback3, SwigDirector_HTK_Texture::SWIG_Callback4_t callback4, SwigDirector_HTK_Texture::SWIG_Callback5_t callback5, SwigDirector_HTK_Texture::SWIG_Callback6_t callback6, SwigDirector_HTK_Texture::SWIG_Callback7_t callback7, SwigDirector_HTK_Texture::SWIG_Callback8_t callback8, SwigDirector_HTK_Texture::SWIG_Callback9_t callback9) {
  HTK_Texture *obj = (HTK_Texture *)objarg;
  SwigDirector_HTK_Texture *director = dynamic_cast<SwigDirector_HTK_Texture *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Texture_Definitions__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  HTK_Texture_Definitions *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (HTK_Texture_Definitions *)new SwigDirector_HTK_Texture_Definitions(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Texture_Definitions__SWIG_1() {
  void * jresult ;
  HTK_Texture_Definitions *result = 0 ;
  
  result = (HTK_Texture_Definitions *)new SwigDirector_HTK_Texture_Definitions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Texture_Definitions(void * jarg1) {
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_ReadSwigExplicitHTK_Texture_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_WriteSwigExplicitHTK_Texture_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_ExecuteSwigExplicitHTK_Texture_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_InterpretSwigExplicitHTK_Texture_Definitions__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_InterpretSwigExplicitHTK_Texture_Definitions__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Interpret_specialSwigExplicitHTK_Texture_Definitions(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Texture_Definitions::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Texture_Definitions const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Texture_Definitions_CloneSwigExplicitHTK_Texture_Definitions(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Texture_Definitions *arg1 = (HTK_Texture_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Texture_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Texture_Definitions const *)arg1)->HTK_Texture_Definitions::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Texture_Definitions_director_connect(void *objarg, SwigDirector_HTK_Texture_Definitions::SWIG_Callback0_t callback0, SwigDirector_HTK_Texture_Definitions::SWIG_Callback1_t callback1, SwigDirector_HTK_Texture_Definitions::SWIG_Callback2_t callback2, SwigDirector_HTK_Texture_Definitions::SWIG_Callback3_t callback3, SwigDirector_HTK_Texture_Definitions::SWIG_Callback4_t callback4, SwigDirector_HTK_Texture_Definitions::SWIG_Callback5_t callback5, SwigDirector_HTK_Texture_Definitions::SWIG_Callback6_t callback6, SwigDirector_HTK_Texture_Definitions::SWIG_Callback7_t callback7, SwigDirector_HTK_Texture_Definitions::SWIG_Callback8_t callback8, SwigDirector_HTK_Texture_Definitions::SWIG_Callback9_t callback9) {
  HTK_Texture_Definitions *obj = (HTK_Texture_Definitions *)objarg;
  SwigDirector_HTK_Texture_Definitions *director = dynamic_cast<SwigDirector_HTK_Texture_Definitions *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_ExecuteSwigExplicitHTK_Glyph_Definition(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Glyph_Definition::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_InterpretSwigExplicitHTK_Glyph_Definition__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definition::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_InterpretSwigExplicitHTK_Glyph_Definition__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definition::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Interpret_specialSwigExplicitHTK_Glyph_Definition(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definition::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Glyph_Definition const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definition_CloneSwigExplicitHTK_Glyph_Definition(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Glyph_Definition const *)arg1)->HTK_Glyph_Definition::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Glyph_Definition() {
  void * jresult ;
  HTK_Glyph_Definition *result = 0 ;
  
  result = (HTK_Glyph_Definition *)new SwigDirector_HTK_Glyph_Definition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Glyph_Definition(void * jarg1) {
  HTK_Glyph_Definition *arg1 = (HTK_Glyph_Definition *) 0 ;
  
  arg1 = (HTK_Glyph_Definition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Glyph_Definition_director_connect(void *objarg, SwigDirector_HTK_Glyph_Definition::SWIG_Callback0_t callback0, SwigDirector_HTK_Glyph_Definition::SWIG_Callback1_t callback1, SwigDirector_HTK_Glyph_Definition::SWIG_Callback2_t callback2, SwigDirector_HTK_Glyph_Definition::SWIG_Callback3_t callback3, SwigDirector_HTK_Glyph_Definition::SWIG_Callback4_t callback4, SwigDirector_HTK_Glyph_Definition::SWIG_Callback5_t callback5, SwigDirector_HTK_Glyph_Definition::SWIG_Callback6_t callback6, SwigDirector_HTK_Glyph_Definition::SWIG_Callback7_t callback7, SwigDirector_HTK_Glyph_Definition::SWIG_Callback8_t callback8, SwigDirector_HTK_Glyph_Definition::SWIG_Callback9_t callback9) {
  HTK_Glyph_Definition *obj = (HTK_Glyph_Definition *)objarg;
  SwigDirector_HTK_Glyph_Definition *director = dynamic_cast<SwigDirector_HTK_Glyph_Definition *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Glyph_Definitions() {
  void * jresult ;
  HTK_Glyph_Definitions *result = 0 ;
  
  result = (HTK_Glyph_Definitions *)new SwigDirector_HTK_Glyph_Definitions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Glyph_Definitions(void * jarg1) {
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_ReadSwigExplicitHTK_Glyph_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_WriteSwigExplicitHTK_Glyph_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_ExecuteSwigExplicitHTK_Glyph_Definitions(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_InterpretSwigExplicitHTK_Glyph_Definitions__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_InterpretSwigExplicitHTK_Glyph_Definitions__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Interpret_specialSwigExplicitHTK_Glyph_Definitions(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Glyph_Definitions::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Glyph_Definitions const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Glyph_Definitions_CloneSwigExplicitHTK_Glyph_Definitions(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Glyph_Definitions *arg1 = (HTK_Glyph_Definitions *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Glyph_Definitions *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Glyph_Definitions const *)arg1)->HTK_Glyph_Definitions::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Glyph_Definitions_director_connect(void *objarg, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback0_t callback0, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback1_t callback1, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback2_t callback2, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback3_t callback3, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback4_t callback4, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback5_t callback5, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback6_t callback6, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback7_t callback7, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback8_t callback8, SwigDirector_HTK_Glyph_Definitions::SWIG_Callback9_t callback9) {
  HTK_Glyph_Definitions *obj = (HTK_Glyph_Definitions *)objarg;
  SwigDirector_HTK_Glyph_Definitions *director = dynamic_cast<SwigDirector_HTK_Glyph_Definitions *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Named_Style_Def() {
  void * jresult ;
  HTK_Named_Style_Def *result = 0 ;
  
  result = (HTK_Named_Style_Def *)new HTK_Named_Style_Def();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Def_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Named_Style_Def const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Named_Style_Def_SetRoot(void * jarg1, void * jarg2) {
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTK_Named_Style_Def_GetRoot(void * jarg1) {
  void * jresult ;
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  HC_KEY result;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  result = ((HTK_Named_Style_Def const *)arg1)->GetRoot();
  jresult = new HC_KEY((const HC_KEY &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Named_Style_Def_Reset(void * jarg1) {
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Named_Style_Def(void * jarg1) {
  HTK_Named_Style_Def *arg1 = (HTK_Named_Style_Def *) 0 ;
  
  arg1 = (HTK_Named_Style_Def *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Named_Style_Defs() {
  void * jresult ;
  HTK_Named_Style_Defs *result = 0 ;
  
  result = (HTK_Named_Style_Defs *)new HTK_Named_Style_Defs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Named_Style_Defs(void * jarg1) {
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Named_Style_Defs_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Named_Style_Defs const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Named_Style_Defs_SetRoot(void * jarg1, void * jarg2) {
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTK_Named_Style_Defs_GetRoot(void * jarg1) {
  void * jresult ;
  HTK_Named_Style_Defs *arg1 = (HTK_Named_Style_Defs *) 0 ;
  HC_KEY result;
  
  arg1 = (HTK_Named_Style_Defs *)jarg1; 
  result = ((HTK_Named_Style_Defs const *)arg1)->GetRoot();
  jresult = new HC_KEY((const HC_KEY &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_ExecuteSwigExplicitHTK_Line_Style(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Line_Style::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_InterpretSwigExplicitHTK_Line_Style__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line_Style::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_InterpretSwigExplicitHTK_Line_Style__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Line_Style::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Interpret_specialSwigExplicitHTK_Line_Style(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line_Style::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line_Style const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Style_CloneSwigExplicitHTK_Line_Style(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line_Style const *)arg1)->HTK_Line_Style::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Line_Style() {
  void * jresult ;
  HTK_Line_Style *result = 0 ;
  
  result = (HTK_Line_Style *)new SwigDirector_HTK_Line_Style();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Line_Style(void * jarg1) {
  HTK_Line_Style *arg1 = (HTK_Line_Style *) 0 ;
  
  arg1 = (HTK_Line_Style *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Line_Style_director_connect(void *objarg, SwigDirector_HTK_Line_Style::SWIG_Callback0_t callback0, SwigDirector_HTK_Line_Style::SWIG_Callback1_t callback1, SwigDirector_HTK_Line_Style::SWIG_Callback2_t callback2, SwigDirector_HTK_Line_Style::SWIG_Callback3_t callback3, SwigDirector_HTK_Line_Style::SWIG_Callback4_t callback4, SwigDirector_HTK_Line_Style::SWIG_Callback5_t callback5, SwigDirector_HTK_Line_Style::SWIG_Callback6_t callback6, SwigDirector_HTK_Line_Style::SWIG_Callback7_t callback7, SwigDirector_HTK_Line_Style::SWIG_Callback8_t callback8, SwigDirector_HTK_Line_Style::SWIG_Callback9_t callback9) {
  HTK_Line_Style *obj = (HTK_Line_Style *)objarg;
  SwigDirector_HTK_Line_Style *director = dynamic_cast<SwigDirector_HTK_Line_Style *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Line_Styles() {
  void * jresult ;
  HTK_Line_Styles *result = 0 ;
  
  result = (HTK_Line_Styles *)new SwigDirector_HTK_Line_Styles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Line_Styles(void * jarg1) {
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_ReadSwigExplicitHTK_Line_Styles(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_WriteSwigExplicitHTK_Line_Styles(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_ExecuteSwigExplicitHTK_Line_Styles(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_InterpretSwigExplicitHTK_Line_Styles__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_InterpretSwigExplicitHTK_Line_Styles__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Interpret_specialSwigExplicitHTK_Line_Styles(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Line_Styles::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line_Styles const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Line_Styles_CloneSwigExplicitHTK_Line_Styles(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Line_Styles *arg1 = (HTK_Line_Styles *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Line_Styles *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Line_Styles const *)arg1)->HTK_Line_Styles::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Line_Styles_director_connect(void *objarg, SwigDirector_HTK_Line_Styles::SWIG_Callback0_t callback0, SwigDirector_HTK_Line_Styles::SWIG_Callback1_t callback1, SwigDirector_HTK_Line_Styles::SWIG_Callback2_t callback2, SwigDirector_HTK_Line_Styles::SWIG_Callback3_t callback3, SwigDirector_HTK_Line_Styles::SWIG_Callback4_t callback4, SwigDirector_HTK_Line_Styles::SWIG_Callback5_t callback5, SwigDirector_HTK_Line_Styles::SWIG_Callback6_t callback6, SwigDirector_HTK_Line_Styles::SWIG_Callback7_t callback7, SwigDirector_HTK_Line_Styles::SWIG_Callback8_t callback8, SwigDirector_HTK_Line_Styles::SWIG_Callback9_t callback9) {
  HTK_Line_Styles *obj = (HTK_Line_Styles *)objarg;
  SwigDirector_HTK_Line_Styles *director = dynamic_cast<SwigDirector_HTK_Line_Styles *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Usefulness(void * jarg1, void * jarg2, void * jarg3, int jarg4, float * jarg5) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HC_KEY arg3 ;
  int arg4 ;
  float *arg5 = 0 ;
  HC_KEY *argp3 ;
  SwigDirector_HTK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  argp3 = (HC_KEY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5;
  darg = dynamic_cast<SwigDirector_HTK_Shell *>(arg1);
  result = (TK_Status)((SwigDirector_HTK_Shell const *)darg)->Usefulness(*arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_UsefulnessSwigExplicitHTK_Shell(void * jarg1, void * jarg2, void * jarg3, int jarg4, float * jarg5) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HC_KEY arg3 ;
  int arg4 ;
  float *arg5 = 0 ;
  HC_KEY *argp3 ;
  SwigDirector_HTK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  argp3 = (HC_KEY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (float *)jarg5;
  darg = dynamic_cast<SwigDirector_HTK_Shell *>(arg1);
  result = (TK_Status)((SwigDirector_HTK_Shell const *)darg)->UsefulnessSwigPublic(*arg2,arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_LabelFakeEdges(void * jarg1) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  SwigDirector_HTK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  darg = dynamic_cast<SwigDirector_HTK_Shell *>(arg1);
  result = (TK_Status)(darg)->LabelFakeEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_LabelFakeEdgesSwigExplicitHTK_Shell(void * jarg1) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  SwigDirector_HTK_Shell *darg = 0;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  darg = dynamic_cast<SwigDirector_HTK_Shell *>(arg1);
  result = (TK_Status)(darg)->LabelFakeEdgesSwigPublic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_ExecuteSwigExplicitHTK_Shell(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Shell::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_InterpretSwigExplicitHTK_Shell__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Shell::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_InterpretSwigExplicitHTK_Shell__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Shell::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Interpret_specialSwigExplicitHTK_Shell(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Shell::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Shell const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Shell_CloneSwigExplicitHTK_Shell(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Shell const *)arg1)->HTK_Shell::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Shell_Match_Instance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Shell_Match_InstanceSwigExplicitHTK_Shell(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (HTK_Shell *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->HTK_Shell::Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Shell() {
  void * jresult ;
  HTK_Shell *result = 0 ;
  
  result = (HTK_Shell *)new SwigDirector_HTK_Shell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Shell(void * jarg1) {
  HTK_Shell *arg1 = (HTK_Shell *) 0 ;
  
  arg1 = (HTK_Shell *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Shell_director_connect(void *objarg, SwigDirector_HTK_Shell::SWIG_Callback0_t callback0, SwigDirector_HTK_Shell::SWIG_Callback1_t callback1, SwigDirector_HTK_Shell::SWIG_Callback2_t callback2, SwigDirector_HTK_Shell::SWIG_Callback3_t callback3, SwigDirector_HTK_Shell::SWIG_Callback4_t callback4, SwigDirector_HTK_Shell::SWIG_Callback5_t callback5, SwigDirector_HTK_Shell::SWIG_Callback6_t callback6, SwigDirector_HTK_Shell::SWIG_Callback7_t callback7, SwigDirector_HTK_Shell::SWIG_Callback8_t callback8, SwigDirector_HTK_Shell::SWIG_Callback9_t callback9, SwigDirector_HTK_Shell::SWIG_Callback10_t callback10, SwigDirector_HTK_Shell::SWIG_Callback11_t callback11, SwigDirector_HTK_Shell::SWIG_Callback12_t callback12, SwigDirector_HTK_Shell::SWIG_Callback13_t callback13, SwigDirector_HTK_Shell::SWIG_Callback14_t callback14, SwigDirector_HTK_Shell::SWIG_Callback15_t callback15, SwigDirector_HTK_Shell::SWIG_Callback16_t callback16, SwigDirector_HTK_Shell::SWIG_Callback17_t callback17, SwigDirector_HTK_Shell::SWIG_Callback18_t callback18, SwigDirector_HTK_Shell::SWIG_Callback19_t callback19, SwigDirector_HTK_Shell::SWIG_Callback20_t callback20, SwigDirector_HTK_Shell::SWIG_Callback21_t callback21, SwigDirector_HTK_Shell::SWIG_Callback22_t callback22, SwigDirector_HTK_Shell::SWIG_Callback23_t callback23, SwigDirector_HTK_Shell::SWIG_Callback24_t callback24, SwigDirector_HTK_Shell::SWIG_Callback25_t callback25, SwigDirector_HTK_Shell::SWIG_Callback26_t callback26) {
  HTK_Shell *obj = (HTK_Shell *)objarg;
  SwigDirector_HTK_Shell *director = dynamic_cast<SwigDirector_HTK_Shell *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polyhedron_HExecute__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->HExecute(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polyhedron_HExecute__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HExecute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polyhedron_HInterpret__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  HC_KEY *argp3 ;
  TK_Status result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  argp3 = (HC_KEY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (TK_Status)(arg1)->HInterpret(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polyhedron_HInterpret__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HC_KEY arg3 ;
  int arg4 ;
  HC_KEY *argp3 ;
  TK_Status result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  argp3 = (HC_KEY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HInterpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Polyhedron_HInterpret__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HC_KEY arg3 ;
  HC_KEY *argp3 ;
  TK_Status result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  argp3 = (HC_KEY *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (TK_Status)(arg1)->HInterpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Polyhedron_match_points(void * jarg1, void * jarg2, float * jarg3) {
  unsigned int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  Recorded_Instance *arg2 = (Recorded_Instance *) 0 ;
  float *arg3 ;
  bool result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (Recorded_Instance *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)(arg1)->match_points((Recorded_Instance const *)arg2,(float const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Polyhedron_match_attributes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  Recorded_Instance *arg2 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  arg2 = (Recorded_Instance *)jarg2; 
  result = (bool)(arg1)->match_attributes((Recorded_Instance const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Polyhedron(void * jarg1) {
  HTK_Polyhedron *arg1 = (HTK_Polyhedron *) 0 ;
  
  arg1 = (HTK_Polyhedron *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_ExecuteSwigExplicitHTK_Mesh(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_Mesh::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_InterpretSwigExplicitHTK_Mesh__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_Mesh::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_InterpretSwigExplicitHTK_Mesh__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_Mesh::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Interpret_specialSwigExplicitHTK_Mesh(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_Mesh::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Mesh const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Mesh_CloneSwigExplicitHTK_Mesh(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_Mesh const *)arg1)->HTK_Mesh::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Mesh_Match_Instance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HTK_Mesh_Match_InstanceSwigExplicitHTK_Mesh(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  Recorded_Instance *arg3 = (Recorded_Instance *) 0 ;
  bool result;
  
  arg1 = (HTK_Mesh *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit const & type is null", 0);
    return 0;
  } 
  arg3 = (Recorded_Instance *)jarg3; 
  result = (bool)(arg1)->HTK_Mesh::Match_Instance((BStreamFileToolkit const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Mesh() {
  void * jresult ;
  HTK_Mesh *result = 0 ;
  
  result = (HTK_Mesh *)new SwigDirector_HTK_Mesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Mesh(void * jarg1) {
  HTK_Mesh *arg1 = (HTK_Mesh *) 0 ;
  
  arg1 = (HTK_Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_Mesh_director_connect(void *objarg, SwigDirector_HTK_Mesh::SWIG_Callback0_t callback0, SwigDirector_HTK_Mesh::SWIG_Callback1_t callback1, SwigDirector_HTK_Mesh::SWIG_Callback2_t callback2, SwigDirector_HTK_Mesh::SWIG_Callback3_t callback3, SwigDirector_HTK_Mesh::SWIG_Callback4_t callback4, SwigDirector_HTK_Mesh::SWIG_Callback5_t callback5, SwigDirector_HTK_Mesh::SWIG_Callback6_t callback6, SwigDirector_HTK_Mesh::SWIG_Callback7_t callback7, SwigDirector_HTK_Mesh::SWIG_Callback8_t callback8, SwigDirector_HTK_Mesh::SWIG_Callback9_t callback9, SwigDirector_HTK_Mesh::SWIG_Callback10_t callback10, SwigDirector_HTK_Mesh::SWIG_Callback11_t callback11, SwigDirector_HTK_Mesh::SWIG_Callback12_t callback12, SwigDirector_HTK_Mesh::SWIG_Callback13_t callback13, SwigDirector_HTK_Mesh::SWIG_Callback14_t callback14, SwigDirector_HTK_Mesh::SWIG_Callback15_t callback15, SwigDirector_HTK_Mesh::SWIG_Callback16_t callback16, SwigDirector_HTK_Mesh::SWIG_Callback17_t callback17, SwigDirector_HTK_Mesh::SWIG_Callback18_t callback18, SwigDirector_HTK_Mesh::SWIG_Callback19_t callback19, SwigDirector_HTK_Mesh::SWIG_Callback20_t callback20, SwigDirector_HTK_Mesh::SWIG_Callback21_t callback21, SwigDirector_HTK_Mesh::SWIG_Callback22_t callback22, SwigDirector_HTK_Mesh::SWIG_Callback23_t callback23, SwigDirector_HTK_Mesh::SWIG_Callback24_t callback24, SwigDirector_HTK_Mesh::SWIG_Callback25_t callback25) {
  HTK_Mesh *obj = (HTK_Mesh *)objarg;
  SwigDirector_HTK_Mesh *director = dynamic_cast<SwigDirector_HTK_Mesh *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_PolyPolypoint(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HTK_PolyPolypoint *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HTK_PolyPolypoint *)new SwigDirector_HTK_PolyPolypoint(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_PolyPolypoint(void * jarg1) {
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_ExecuteSwigExplicitHTK_PolyPolypoint(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->HTK_PolyPolypoint::Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Interpret__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_InterpretSwigExplicitHTK_PolyPolypoint__SWIG_0(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->HTK_PolyPolypoint::Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Interpret__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_InterpretSwigExplicitHTK_PolyPolypoint__SWIG_1(void * jarg1, void * jarg2, ID_Key jarg3) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (TK_Status)(arg1)->HTK_PolyPolypoint::Interpret(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Interpret_special(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Interpret_specialSwigExplicitHTK_PolyPolypoint(void * jarg1, void * jarg2, ID_Key jarg3, char * jarg4) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->HTK_PolyPolypoint::Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_Clone(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_PolyPolypoint const *)arg1)->Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_PolyPolypoint_CloneSwigExplicitHTK_PolyPolypoint(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)((HTK_PolyPolypoint const *)arg1)->HTK_PolyPolypoint::Clone(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_PolyPolypoint_Reset(void * jarg1) {
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_PolyPolypoint_ResetSwigExplicitHTK_PolyPolypoint(void * jarg1) {
  HTK_PolyPolypoint *arg1 = (HTK_PolyPolypoint *) 0 ;
  
  arg1 = (HTK_PolyPolypoint *)jarg1; 
  (arg1)->HTK_PolyPolypoint::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_PolyPolypoint_director_connect(void *objarg, SwigDirector_HTK_PolyPolypoint::SWIG_Callback0_t callback0, SwigDirector_HTK_PolyPolypoint::SWIG_Callback1_t callback1, SwigDirector_HTK_PolyPolypoint::SWIG_Callback2_t callback2, SwigDirector_HTK_PolyPolypoint::SWIG_Callback3_t callback3, SwigDirector_HTK_PolyPolypoint::SWIG_Callback4_t callback4, SwigDirector_HTK_PolyPolypoint::SWIG_Callback5_t callback5, SwigDirector_HTK_PolyPolypoint::SWIG_Callback6_t callback6, SwigDirector_HTK_PolyPolypoint::SWIG_Callback7_t callback7, SwigDirector_HTK_PolyPolypoint::SWIG_Callback8_t callback8, SwigDirector_HTK_PolyPolypoint::SWIG_Callback9_t callback9) {
  HTK_PolyPolypoint *obj = (HTK_PolyPolypoint *)objarg;
  SwigDirector_HTK_PolyPolypoint *director = dynamic_cast<SwigDirector_HTK_PolyPolypoint *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HStreamFileToolkit() {
  void * jresult ;
  HStreamFileToolkit *result = 0 ;
  
  result = (HStreamFileToolkit *)new HStreamFileToolkit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HStreamFileToolkit(void * jarg1) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_Restart(void * jarg1) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  (arg1)->Restart();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_GenerateBuffer__SWIG_0(void * jarg1, char * jarg2, int jarg3, int * jarg4, char * jarg5) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  arg5 = (char *)jarg5; 
  result = (TK_Status)(arg1)->GenerateBuffer(arg2,arg3,*arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_GenerateBuffer__SWIG_1(void * jarg1, char * jarg2, int jarg3, int * jarg4) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = 0 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  result = (TK_Status)(arg1)->GenerateBuffer(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_GenerateOneItemBuffer(void * jarg1, char * jarg2, int jarg3, int * jarg4, void * jarg5) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = 0 ;
  HC_KEY arg5 ;
  HC_KEY *argp5 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4;
  argp5 = (HC_KEY *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (TK_Status)(arg1)->GenerateOneItemBuffer(arg2,arg3,*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HStreamFileToolkit_CountObjects__SWIG_0(void * jarg1, char * jarg2) {
  unsigned long jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned long result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned long)(arg1)->CountObjects((char const *)arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HStreamFileToolkit_CountObjects__SWIG_1(void * jarg1) {
  unsigned long jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  unsigned long result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (unsigned long)(arg1)->CountObjects();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_ActivateContext(void * jarg1, ID_Key jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ActivateContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_DeactivateContext(void * jarg1, ID_Key jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->DeactivateContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_NewFileContext(void * jarg1, ID_Key jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  long arg2 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = jarg2; 
  (arg1)->NewFileContext(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_GetHoopsVersion(void * jarg1) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (int)(arg1)->GetHoopsVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_StringToHandler(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  BBaseOpcodeHandler **arg3 = (BBaseOpcodeHandler **) 0 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (BBaseOpcodeHandler **)jarg3; 
  result = (TK_Status)(arg1)->StringToHandler((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_StringToOpcode(void * jarg1, char * jarg2, unsigned char * jarg3) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned char *)jarg3;
  result = (TK_Status)(arg1)->StringToOpcode((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_SetThumbnail__SWIG_0(void * jarg1, void * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  BBaseOpcodeHandler *arg2 = (BBaseOpcodeHandler *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (BBaseOpcodeHandler *)jarg2; 
  (arg1)->SetThumbnail(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_SetThumbnail__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned char * jarg5) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned char *)jarg5;
  (arg1)->SetThumbnail(arg2,arg3,arg4,(unsigned char const *)arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_Write_Stream_File(void * jarg1) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  TK_Status result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (TK_Status)(arg1)->Write_Stream_File();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_AddExcludedSegments(void * jarg1, int jarg2, void * jarg3) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  int arg2 ;
  HC_KEY *arg3 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  (arg1)->AddExcludedSegments(arg2,(HC_KEY const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_AddExcludedSegment(void * jarg1, void * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddExcludedSegment(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HStreamFileToolkit_SegmentIsExcluded(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *argp2 ;
  bool result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  argp2 = (HC_KEY *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HC_KEY", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((HStreamFileToolkit const *)arg1)->SegmentIsExcluded(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_ClearExcludedSegments(void * jarg1) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  (arg1)->ClearExcludedSegments();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HStreamFileToolkit_GetExcludedSegmentCount(void * jarg1) {
  int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  int result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (int)((HStreamFileToolkit const *)arg1)->GetExcludedSegmentCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HStreamFileToolkit_GetExcludedSegments(void * jarg1) {
  void * jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (HC_KEY *)((HStreamFileToolkit const *)arg1)->GetExcludedSegments();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_SetPrependRootSegment(void * jarg1, char * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPrependRootSegment((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HStreamFileToolkit_GetPrependRootSegment(void * jarg1) {
  char * jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char *result = 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (char *)(arg1)->GetPrependRootSegment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HStreamFileToolkit_MatchPreviousExRef(void * jarg1) {
  unsigned int jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  bool result;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (bool)((HStreamFileToolkit const *)arg1)->MatchPreviousExRef();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HStreamFileToolkit_m_search_strings_set(void * jarg1, void * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char **arg2 = (char **) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (char **)jarg2; 
  if (arg1) (arg1)->m_search_strings = (char const **)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HStreamFileToolkit_m_search_strings_get(void * jarg1) {
  void * jresult ;
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  char **result = 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  result = (char **) ((arg1)->m_search_strings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT BControlledMemoryObject * SWIGSTDCALL CSharp_Internal_TranslatorUpcast(Internal_Translator *objectRef) {
    return (BControlledMemoryObject *)objectRef;
}

SWIGEXPORT BControlledMemoryObject * SWIGSTDCALL CSharp_Internal_Key_RecordUpcast(Internal_Key_Record *objectRef) {
    return (BControlledMemoryObject *)objectRef;
}

SWIGEXPORT BControlledMemoryObject * SWIGSTDCALL CSharp_Recorded_InstanceUpcast(Recorded_Instance *objectRef) {
    return (BControlledMemoryObject *)objectRef;
}

SWIGEXPORT BControlledMemoryObject * SWIGSTDCALL CSharp_BStreamFileToolkitUpcast(BStreamFileToolkit *objectRef) {
    return (BControlledMemoryObject *)objectRef;
}

SWIGEXPORT BControlledMemoryObject * SWIGSTDCALL CSharp_BBaseOpcodeHandlerUpcast(BBaseOpcodeHandler *objectRef) {
    return (BControlledMemoryObject *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_DefaultUpcast(TK_Default *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_UnavailableUpcast(TK_Unavailable *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_HeaderUpcast(TK_Header *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_File_InfoUpcast(TK_File_Info *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CommentUpcast(TK_Comment *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_TerminatorUpcast(TK_Terminator *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CompressionUpcast(TK_Compression *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_Lock_MasksUpcast(Lock_Masks *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Open_SegmentUpcast(TK_Open_Segment *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Close_SegmentUpcast(TK_Close_Segment *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Reopen_SegmentUpcast(TK_Reopen_Segment *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Referenced_SegmentUpcast(TK_Referenced_Segment *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_ReferenceUpcast(TK_Reference *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_InstanceUpcast(TK_Instance *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Delete_ObjectUpcast(TK_Delete_Object *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_LODUpcast(TK_LOD *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Geometry_AttributesUpcast(TK_Geometry_Attributes *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_RenumberUpcast(TK_Renumber *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_TagUpcast(TK_Tag *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_DictionaryUpcast(TK_Dictionary *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Dictionary_LocaterUpcast(TK_Dictionary_Locater *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_ColorUpcast(TK_Color *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Color_RGBUpcast(TK_Color_RGB *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Color_By_ValueUpcast(TK_Color_By_Value *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Color_By_IndexUpcast(TK_Color_By_Index *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Color_By_FIndexUpcast(TK_Color_By_FIndex *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Color_MapUpcast(TK_Color_Map *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CallbackUpcast(TK_Callback *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Rendering_OptionsUpcast(TK_Rendering_Options *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_HeuristicsUpcast(TK_Heuristics *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Geometry_OptionsUpcast(TK_Geometry_Options *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_VisibilityUpcast(TK_Visibility *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_SelectabilityUpcast(TK_Selectability *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_MatrixUpcast(TK_Matrix *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_EnumeratedUpcast(TK_Enumerated *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_SizeUpcast(TK_Size *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Linear_PatternUpcast(TK_Linear_Pattern *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_NamedUpcast(TK_Named *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_StreamingUpcast(TK_Streaming *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_ConditionsUpcast(TK_Conditions *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Conditional_ActionUpcast(TK_Conditional_Action *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_User_OptionsUpcast(TK_User_Options *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Unicode_OptionsUpcast(TK_Unicode_Options *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_User_IndexUpcast(TK_User_Index *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_User_Index_DataUpcast(TK_User_Index_Data *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_User_ValueUpcast(TK_User_Value *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CameraUpcast(TK_Camera *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_WindowUpcast(TK_Window *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Text_FontUpcast(TK_Text_Font *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_BoundingUpcast(TK_Bounding *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_PointUpcast(TK_Point *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_LineUpcast(TK_Line *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_PolypointUpcast(TK_Polypoint *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_NURBS_CurveUpcast(TK_NURBS_Curve *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HT_NURBS_TrimUpcast(HT_NURBS_Trim *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_NURBS_SurfaceUpcast(TK_NURBS_Surface *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Area_LightUpcast(TK_Area_Light *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Spot_LightUpcast(TK_Spot_Light *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Cutting_PlaneUpcast(TK_Cutting_Plane *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CircleUpcast(TK_Circle *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_EllipseUpcast(TK_Ellipse *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_SphereUpcast(TK_Sphere *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_CylinderUpcast(TK_Cylinder *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Polyhedron * SWIGSTDCALL CSharp_TK_PolyCylinderUpcast(TK_PolyCylinder *objectRef) {
    return (TK_Polyhedron *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_GridUpcast(TK_Grid *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_TextUpcast(TK_Text *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_FontUpcast(TK_Font *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_ImageUpcast(TK_Image *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_TextureUpcast(TK_Texture *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_ThumbnailUpcast(TK_Thumbnail *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Glyph_DefinitionUpcast(TK_Glyph_Definition *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Named_Style_DefUpcast(TK_Named_Style_Def *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Line_StyleUpcast(TK_Line_Style *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Clip_RectangleUpcast(TK_Clip_Rectangle *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Clip_RegionUpcast(TK_Clip_Region *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_Complex_Clip_RegionUpcast(TK_Complex_Clip_Region *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_User_DataUpcast(TK_User_Data *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_MaterialUpcast(TK_Material *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_XMLUpcast(TK_XML *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_URLUpcast(TK_URL *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_External_ReferenceUpcast(TK_External_Reference *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_External_Reference_UnicodeUpcast(TK_External_Reference_Unicode *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_PolyhedronUpcast(TK_Polyhedron *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Polyhedron * SWIGSTDCALL CSharp_TK_MeshUpcast(TK_Mesh *objectRef) {
    return (TK_Polyhedron *)objectRef;
}

SWIGEXPORT TK_Polyhedron * SWIGSTDCALL CSharp_TK_ShellUpcast(TK_Shell *objectRef) {
    return (TK_Polyhedron *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_TK_PolyPolypointUpcast(TK_PolyPolypoint *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Open_Segment * SWIGSTDCALL CSharp_HTK_Open_SegmentUpcast(HTK_Open_Segment *objectRef) {
    return (TK_Open_Segment *)objectRef;
}

SWIGEXPORT TK_Close_Segment * SWIGSTDCALL CSharp_HTK_Close_SegmentUpcast(HTK_Close_Segment *objectRef) {
    return (TK_Close_Segment *)objectRef;
}

SWIGEXPORT TK_Reopen_Segment * SWIGSTDCALL CSharp_HTK_Reopen_SegmentUpcast(HTK_Reopen_Segment *objectRef) {
    return (TK_Reopen_Segment *)objectRef;
}

SWIGEXPORT TK_Referenced_Segment * SWIGSTDCALL CSharp_HTK_Referenced_SegmentUpcast(HTK_Referenced_Segment *objectRef) {
    return (TK_Referenced_Segment *)objectRef;
}

SWIGEXPORT TK_Reference * SWIGSTDCALL CSharp_HTK_ReferenceUpcast(HTK_Reference *objectRef) {
    return (TK_Reference *)objectRef;
}

SWIGEXPORT TK_Instance * SWIGSTDCALL CSharp_HTK_InstanceUpcast(HTK_Instance *objectRef) {
    return (TK_Instance *)objectRef;
}

SWIGEXPORT TK_Delete_Object * SWIGSTDCALL CSharp_HTK_Delete_ObjectUpcast(HTK_Delete_Object *objectRef) {
    return (TK_Delete_Object *)objectRef;
}

SWIGEXPORT TK_LOD * SWIGSTDCALL CSharp_HTK_LODUpcast(HTK_LOD *objectRef) {
    return (TK_LOD *)objectRef;
}

SWIGEXPORT TK_Renumber * SWIGSTDCALL CSharp_HTK_RenumberUpcast(HTK_Renumber *objectRef) {
    return (TK_Renumber *)objectRef;
}

SWIGEXPORT TK_Color * SWIGSTDCALL CSharp_HTK_ColorUpcast(HTK_Color *objectRef) {
    return (TK_Color *)objectRef;
}

SWIGEXPORT TK_Color_RGB * SWIGSTDCALL CSharp_HTK_Color_RGBUpcast(HTK_Color_RGB *objectRef) {
    return (TK_Color_RGB *)objectRef;
}

SWIGEXPORT TK_Color_By_Value * SWIGSTDCALL CSharp_HTK_Color_By_ValueUpcast(HTK_Color_By_Value *objectRef) {
    return (TK_Color_By_Value *)objectRef;
}

SWIGEXPORT TK_Color_By_Index * SWIGSTDCALL CSharp_HTK_Color_By_IndexUpcast(HTK_Color_By_Index *objectRef) {
    return (TK_Color_By_Index *)objectRef;
}

SWIGEXPORT TK_Color_By_FIndex * SWIGSTDCALL CSharp_HTK_Color_By_FIndexUpcast(HTK_Color_By_FIndex *objectRef) {
    return (TK_Color_By_FIndex *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Color_CompositeUpcast(HTK_Color_Composite *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Color_Map * SWIGSTDCALL CSharp_HTK_Color_MapUpcast(HTK_Color_Map *objectRef) {
    return (TK_Color_Map *)objectRef;
}

SWIGEXPORT TK_Callback * SWIGSTDCALL CSharp_HTK_CallbackUpcast(HTK_Callback *objectRef) {
    return (TK_Callback *)objectRef;
}

SWIGEXPORT TK_Rendering_Options * SWIGSTDCALL CSharp_HTK_Rendering_OptionsUpcast(HTK_Rendering_Options *objectRef) {
    return (TK_Rendering_Options *)objectRef;
}

SWIGEXPORT TK_Heuristics * SWIGSTDCALL CSharp_HTK_HeuristicsUpcast(HTK_Heuristics *objectRef) {
    return (TK_Heuristics *)objectRef;
}

SWIGEXPORT TK_Geometry_Options * SWIGSTDCALL CSharp_HTK_Geometry_OptionsUpcast(HTK_Geometry_Options *objectRef) {
    return (TK_Geometry_Options *)objectRef;
}

SWIGEXPORT TK_Visibility * SWIGSTDCALL CSharp_HTK_VisibilityUpcast(HTK_Visibility *objectRef) {
    return (TK_Visibility *)objectRef;
}

SWIGEXPORT TK_Selectability * SWIGSTDCALL CSharp_HTK_SelectabilityUpcast(HTK_Selectability *objectRef) {
    return (TK_Selectability *)objectRef;
}

SWIGEXPORT TK_Matrix * SWIGSTDCALL CSharp_HTK_MatrixUpcast(HTK_Matrix *objectRef) {
    return (TK_Matrix *)objectRef;
}

SWIGEXPORT TK_Enumerated * SWIGSTDCALL CSharp_HTK_EnumeratedUpcast(HTK_Enumerated *objectRef) {
    return (TK_Enumerated *)objectRef;
}

SWIGEXPORT TK_Size * SWIGSTDCALL CSharp_HTK_SizeUpcast(HTK_Size *objectRef) {
    return (TK_Size *)objectRef;
}

SWIGEXPORT TK_Linear_Pattern * SWIGSTDCALL CSharp_HTK_Linear_PatternUpcast(HTK_Linear_Pattern *objectRef) {
    return (TK_Linear_Pattern *)objectRef;
}

SWIGEXPORT TK_Named * SWIGSTDCALL CSharp_HTK_NamedUpcast(HTK_Named *objectRef) {
    return (TK_Named *)objectRef;
}

SWIGEXPORT TK_Streaming * SWIGSTDCALL CSharp_HTK_StreamingUpcast(HTK_Streaming *objectRef) {
    return (TK_Streaming *)objectRef;
}

SWIGEXPORT TK_Conditions * SWIGSTDCALL CSharp_HTK_ConditionsUpcast(HTK_Conditions *objectRef) {
    return (TK_Conditions *)objectRef;
}

SWIGEXPORT TK_Conditional_Action * SWIGSTDCALL CSharp_HTK_Conditional_ActionUpcast(HTK_Conditional_Action *objectRef) {
    return (TK_Conditional_Action *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Conditional_ActionsUpcast(HTK_Conditional_Actions *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_User_Options * SWIGSTDCALL CSharp_HTK_User_OptionsUpcast(HTK_User_Options *objectRef) {
    return (TK_User_Options *)objectRef;
}

SWIGEXPORT TK_Unicode_Options * SWIGSTDCALL CSharp_HTK_Unicode_OptionsUpcast(HTK_Unicode_Options *objectRef) {
    return (TK_Unicode_Options *)objectRef;
}

SWIGEXPORT TK_User_Index * SWIGSTDCALL CSharp_HTK_User_IndexUpcast(HTK_User_Index *objectRef) {
    return (TK_User_Index *)objectRef;
}

SWIGEXPORT TK_User_Index_Data * SWIGSTDCALL CSharp_HTK_User_Index_DataUpcast(HTK_User_Index_Data *objectRef) {
    return (TK_User_Index_Data *)objectRef;
}

SWIGEXPORT TK_User_Value * SWIGSTDCALL CSharp_HTK_User_ValueUpcast(HTK_User_Value *objectRef) {
    return (TK_User_Value *)objectRef;
}

SWIGEXPORT TK_Camera * SWIGSTDCALL CSharp_HTK_CameraUpcast(HTK_Camera *objectRef) {
    return (TK_Camera *)objectRef;
}

SWIGEXPORT TK_Window * SWIGSTDCALL CSharp_HTK_WindowUpcast(HTK_Window *objectRef) {
    return (TK_Window *)objectRef;
}

SWIGEXPORT TK_Clip_Region * SWIGSTDCALL CSharp_HTK_Clip_RegionUpcast(HTK_Clip_Region *objectRef) {
    return (TK_Clip_Region *)objectRef;
}

SWIGEXPORT TK_Complex_Clip_Region * SWIGSTDCALL CSharp_HTK_Complex_Clip_RegionUpcast(HTK_Complex_Clip_Region *objectRef) {
    return (TK_Complex_Clip_Region *)objectRef;
}

SWIGEXPORT TK_Clip_Rectangle * SWIGSTDCALL CSharp_HTK_Clip_RectangleUpcast(HTK_Clip_Rectangle *objectRef) {
    return (TK_Clip_Rectangle *)objectRef;
}

SWIGEXPORT TK_Text_Font * SWIGSTDCALL CSharp_HTK_Text_FontUpcast(HTK_Text_Font *objectRef) {
    return (TK_Text_Font *)objectRef;
}

SWIGEXPORT TK_Bounding * SWIGSTDCALL CSharp_HTK_BoundingUpcast(HTK_Bounding *objectRef) {
    return (TK_Bounding *)objectRef;
}

SWIGEXPORT TK_Point * SWIGSTDCALL CSharp_HTK_PointUpcast(HTK_Point *objectRef) {
    return (TK_Point *)objectRef;
}

SWIGEXPORT TK_Line * SWIGSTDCALL CSharp_HTK_LineUpcast(HTK_Line *objectRef) {
    return (TK_Line *)objectRef;
}

SWIGEXPORT TK_Polypoint * SWIGSTDCALL CSharp_HTK_PolypointUpcast(HTK_Polypoint *objectRef) {
    return (TK_Polypoint *)objectRef;
}

SWIGEXPORT TK_NURBS_Curve * SWIGSTDCALL CSharp_HTK_NURBS_CurveUpcast(HTK_NURBS_Curve *objectRef) {
    return (TK_NURBS_Curve *)objectRef;
}

SWIGEXPORT TK_NURBS_Surface * SWIGSTDCALL CSharp_HTK_NURBS_SurfaceUpcast(HTK_NURBS_Surface *objectRef) {
    return (TK_NURBS_Surface *)objectRef;
}

SWIGEXPORT TK_Area_Light * SWIGSTDCALL CSharp_HTK_Area_LightUpcast(HTK_Area_Light *objectRef) {
    return (TK_Area_Light *)objectRef;
}

SWIGEXPORT TK_Spot_Light * SWIGSTDCALL CSharp_HTK_Spot_LightUpcast(HTK_Spot_Light *objectRef) {
    return (TK_Spot_Light *)objectRef;
}

SWIGEXPORT TK_Cutting_Plane * SWIGSTDCALL CSharp_HTK_Cutting_PlaneUpcast(HTK_Cutting_Plane *objectRef) {
    return (TK_Cutting_Plane *)objectRef;
}

SWIGEXPORT TK_Circle * SWIGSTDCALL CSharp_HTK_CircleUpcast(HTK_Circle *objectRef) {
    return (TK_Circle *)objectRef;
}

SWIGEXPORT TK_Ellipse * SWIGSTDCALL CSharp_HTK_EllipseUpcast(HTK_Ellipse *objectRef) {
    return (TK_Ellipse *)objectRef;
}

SWIGEXPORT TK_Sphere * SWIGSTDCALL CSharp_HTK_SphereUpcast(HTK_Sphere *objectRef) {
    return (TK_Sphere *)objectRef;
}

SWIGEXPORT TK_Cylinder * SWIGSTDCALL CSharp_HTK_CylinderUpcast(HTK_Cylinder *objectRef) {
    return (TK_Cylinder *)objectRef;
}

SWIGEXPORT TK_PolyCylinder * SWIGSTDCALL CSharp_HTK_PolyCylinderUpcast(HTK_PolyCylinder *objectRef) {
    return (TK_PolyCylinder *)objectRef;
}

SWIGEXPORT TK_Grid * SWIGSTDCALL CSharp_HTK_GridUpcast(HTK_Grid *objectRef) {
    return (TK_Grid *)objectRef;
}

SWIGEXPORT TK_Text * SWIGSTDCALL CSharp_HTK_TextUpcast(HTK_Text *objectRef) {
    return (TK_Text *)objectRef;
}

SWIGEXPORT TK_Font * SWIGSTDCALL CSharp_HTK_FontUpcast(HTK_Font *objectRef) {
    return (TK_Font *)objectRef;
}

SWIGEXPORT TK_Image * SWIGSTDCALL CSharp_HTK_ImageUpcast(HTK_Image *objectRef) {
    return (TK_Image *)objectRef;
}

SWIGEXPORT TK_Texture * SWIGSTDCALL CSharp_HTK_TextureUpcast(HTK_Texture *objectRef) {
    return (TK_Texture *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Texture_DefinitionsUpcast(HTK_Texture_Definitions *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Glyph_Definition * SWIGSTDCALL CSharp_HTK_Glyph_DefinitionUpcast(HTK_Glyph_Definition *objectRef) {
    return (TK_Glyph_Definition *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Glyph_DefinitionsUpcast(HTK_Glyph_Definitions *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Named_Style_Def * SWIGSTDCALL CSharp_HTK_Named_Style_DefUpcast(HTK_Named_Style_Def *objectRef) {
    return (TK_Named_Style_Def *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Named_Style_DefsUpcast(HTK_Named_Style_Defs *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Line_Style * SWIGSTDCALL CSharp_HTK_Line_StyleUpcast(HTK_Line_Style *objectRef) {
    return (TK_Line_Style *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_Line_StylesUpcast(HTK_Line_Styles *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT TK_Shell * SWIGSTDCALL CSharp_HTK_ShellUpcast(HTK_Shell *objectRef) {
    return (TK_Shell *)objectRef;
}

SWIGEXPORT TK_Polyhedron * SWIGSTDCALL CSharp_HTK_PolyhedronUpcast(HTK_Polyhedron *objectRef) {
    return (TK_Polyhedron *)objectRef;
}

SWIGEXPORT TK_Mesh * SWIGSTDCALL CSharp_HTK_MeshUpcast(HTK_Mesh *objectRef) {
    return (TK_Mesh *)objectRef;
}

SWIGEXPORT TK_PolyPolypoint * SWIGSTDCALL CSharp_HTK_PolyPolypointUpcast(HTK_PolyPolypoint *objectRef) {
    return (TK_PolyPolypoint *)objectRef;
}

SWIGEXPORT BStreamFileToolkit * SWIGSTDCALL CSharp_HStreamFileToolkitUpcast(HStreamFileToolkit *objectRef) {
    return (BStreamFileToolkit *)objectRef;
}

#ifdef __cplusplus
}
#endif

