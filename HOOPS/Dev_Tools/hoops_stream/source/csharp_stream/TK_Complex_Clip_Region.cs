/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using HLONG = System.Int64;
using ID_Key = System.Int64;
#else
using HLONG = System.Int32;
using ID_Key = System.Int32;
#endif


public class TK_Complex_Clip_Region : BBaseOpcodeHandler {
  private HandleRef swigCPtr;

  public TK_Complex_Clip_Region(IntPtr cPtr, bool cMemoryOwn) : base(HCSSTREAMPINVOKE.TK_Complex_Clip_RegionUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_Complex_Clip_Region obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Complex_Clip_Region() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSSTREAMPINVOKE.delete_TK_Complex_Clip_Region(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Complex_Clip_Region() : this(HCSSTREAMPINVOKE.new_TK_Complex_Clip_Region(), true) {
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Complex_Clip_Region_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Write(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Complex_Clip_Region_Write(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Clone(BStreamFileToolkit tk, SWIGTYPE_p_p_BBaseOpcodeHandler handler) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Complex_Clip_Region_Clone(swigCPtr, BStreamFileToolkit.getCPtr(tk), SWIGTYPE_p_p_BBaseOpcodeHandler.getCPtr(handler));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status ReadAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Complex_Clip_Region_ReadAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TK_Status WriteAscii(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSSTREAMPINVOKE.TK_Complex_Clip_Region_WriteAscii(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSSTREAMPINVOKE.SWIGPendingException.Pending) throw HCSSTREAMPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset() {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_Reset(swigCPtr);
  }

  public void SetPoints(int count, float[] points) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetPoints__SWIG_0(swigCPtr, count, points);
  }

  public void SetPoints(int count) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetPoints__SWIG_1(swigCPtr, count);
  }

  public IntPtr GetPoints() {return HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetPoints__SWIG_0(swigCPtr);}

  public void SetDPoints(int count, double[] points) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetDPoints__SWIG_0(swigCPtr, count, points);
  }

  public void SetDPoints(int count) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetDPoints__SWIG_1(swigCPtr, count);
  }

  public IntPtr GetDPoints() {return HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetDPoints__SWIG_0(swigCPtr);}

  public void SetLengths(int count, int[] lengths) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetLengths__SWIG_0(swigCPtr, count, lengths);
  }

  public void SetLengths(int count) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetLengths__SWIG_1(swigCPtr, count);
  }

  public IntPtr GetLengths() {return HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetLengths__SWIG_0(swigCPtr);}

  public int GetTotal() {
    int ret = HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetTotal(swigCPtr);
    return ret;
  }

  public int GetLoops() {
    int ret = HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetLoops(swigCPtr);
    return ret;
  }

  public void SetOptions(int o) {
    HCSSTREAMPINVOKE.TK_Complex_Clip_Region_SetOptions(swigCPtr, o);
  }

  public int GetOptions() {
    int ret = HCSSTREAMPINVOKE.TK_Complex_Clip_Region_GetOptions(swigCPtr);
    return ret;
  }

}
