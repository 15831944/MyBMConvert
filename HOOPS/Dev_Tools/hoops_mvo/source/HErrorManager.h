// Copyright (c) Tech Soft 3D
//
// The information contained herein is confidential and proprietary to Tech Soft 3D, Inc.,
// and considered a trade secret as defined under civil and criminal statutes.
// Tech Soft 3D, Inc. shall pursue its civil and criminal remedies in the event of
// unauthorized use or misappropriation of its trade secrets.  Use of this information
// by anyone other than authorized employees of Tech Soft 3D, Inc. is granted only under
// a written non-disclosure agreement, expressly prescribing the scope and manner of such use.

/*! \file HErrorManager.h
	Defines datatypes associated with the HErrorManager class. 
*/

#ifndef _HERRORMANAGER_H
#define _HERRORMANAGER_H

#ifdef H_PACK_8
#pragma pack(push)
#pragma pack(8)
#endif

#include "HTools.h"

/* forward declaration.  
 * private helper class */
class HErrorDescriptorNode;

//! The HSuppressInfo contains information used to identify which errors should be suppressed.
struct HSuppressInfo
{
	HSuppressInfo(int s, int c, int sp)
	{
		severity = s;
		category = c;
		specific = sp;
	}
	int severity;//!< The level of seriousness of this error.
	int category;//!< The category that this error falls under as described in #HC_Define_Error_Handler.
	int specific;//!< The specific error under the category as described in #HC_Define_Error_Handler.
};


//! The HErrorNode class encapsulates error message information.
/*!The HErrorNode class represents a specific error message and its properties.
*/
class MVO_API HErrorNode
{

public:
	/*! Constructs an HErrorNode object.
	\param specific An integer that identifies the specific error under the category already defined as described in
	#HC_Define_Error_Handler. For example, running out of memory, HES_OUT_OF_MEMORY, is a specific memory error in the                          
           HEC_MEMORY category.    
	\param msgc The length of the msgv array.
	\param msgv An array of pointers to a list of messages.
	\param stackc The length of stackv.
	\param stackv An array of strings that indicates the list of methods that were called. The last being the currently active
	HOOPS routine and the first being the originating function.
	\param time The time associated with when the error was generated.
	*/
	HErrorNode(int category, int specific, int severity, int msgc, char const ** msgv, int stackc, char const ** stackv, double time);
	~HErrorNode();

	/*!This method calls #HC_Report_Error which display the error messages associated with this error node.
	*/
	void Report();

	int m_category;//!< The category that this error falls under as described in #HC_Define_Error_Handler.
	int m_specific;//!< The specific error under the category as described in #HC_Define_Error_Handler.
	int m_severity;//!< The level of seriousness of this error.
	int m_messagelength;//!< The number of messages associated with this error.
	double m_time;//!< The time that the error was generated in seconds.
	char const ** m_message;//!< The list messages associated with the error.
	int m_stacklength;//!< The length of the call stack.
	char const ** m_stack;//!< The list of functions that generated the error.
	

};

   


//! The HErrorManager class handles all the error messaging in MVO.
/*!
*/
class MVO_API HErrorManager 
{
private:   
	static 	struct vlist_s *	m_ErrorList;			
	static 	struct vlist_s *	m_UpdateErrorList;			
	static 	struct vlist_s *	m_SuppressList;			
	static 	void			(* m_pfError)(HErrorNode *, void *); /*!< A pointer to an event checker function */
	static  void *			m_UserData;
	static  bool *			m_ErrorClass;
	static	bool			m_bShowDialog;
	static  bool			m_bDialogRunning;
	static  bool			m_bBlocked;
	static  bool			m_bInterrupted;
	static  bool			m_bSpoolUpdateErrors;

public:
	/*!This method initialized the error and suppression lists as well as registers the callback that handles 
	errors that are generated by the HOOPS database.
	*/
	static void Init();
	/*!This method cleans up the error and suppression list and unregisters all callbacks.
	*/
	static void Cleanup();
	/*!This method prepares the error handler for iteration through the error list.  Call this method before making calls 
	to #GetNextError.
	*/
	static void BeginErrorIteration();
	/*!\return A pointer to the next error message in the error list.
	*/
	static HErrorNode * GetNextError();
	/*!\return A pointer to the last error message that was generated.
	*/
	static HErrorNode * GetLastError();
	/*!This method remove the last error message from the error list and deletes it.
	*/
	static void DeleteLastError();
	/*!This method iterates through all the messages the error list and displays them to the user.
	*/
	static void ShowAllErrors();
	/*!This method iterates through the update error list which holds errors associated with #HC_Update_Display and adds 
	those errors that should not be suppress to the main error list. Note that no errors messages can be displayed during 
	an update.  Call this method after an update has occurred to ensure that an errors that were generated during an 
	update will be displayed.  
	*/
	static void SpoolUpdateErrors();

	/*! This method sets the event checker callback. */
 	static void	SetErrorCallback(void (* err)(HErrorNode *, void *), void *user_data) { m_pfError = err; m_UserData = user_data; }

	/*!This method takes a given the severity, category and specific and uses this combination to suppress errors that have the 
	corresponding values.
	\param severity An integer that defines the seriousness of the error as described in #HC_Define_Error_Handler.
	\param categeory An integer that dentifies the general category the error belongs to as described in #HC_Define_Error_Handler. 
	For example, memory errors fall in the HEC_MEMORY error category.             
	\param specific An integer that identifies the specific error under the category already defined as described in
	#HC_Define_Error_Handler. For example, running out of memory, HES_OUT_OF_MEMORY, is a specific memory error in the                          
           HEC_MEMORY category.                       
	*/
	static void SuppressError(int severity, int category, int specific);

	/*!This method removes all the errors from the mail error list and the update error list.*/
	static void Flush();

	/*!This method sets the show dialog member variable.
	\param s Pass true to show the error dialor or false not to show it.
	*/
	static void SetShowDialog(bool s) { m_bShowDialog = s; }
	/*!This method had not been implemented yet.
	*/
	static void SetSpoolUpdateErrors(bool s) { m_bSpoolUpdateErrors = s; }
	/*!\return True if HOOPS will show an error dialog or false if it will not. 
	*/
	static bool GetShowDialog() { return m_bShowDialog; }
	/*!This method sets the system option to turn on all error, warning and information messages.  It also clear the 
	suppress errors list.
	*/
	static void AllowAllErrors();

	/*! \return True if the error dialog is currently running or false if it isn't.*/
	static bool	GetDialogRunning() { return m_bDialogRunning; }
	
	/*!This is the callback function that handles the errors that are generated putting the in the correct error list.  Note 
	that when Update errors are received they are not immediately put in the error list and displayed.  They are put in an update
	error list because error messages cannot be displayed while an update is occurring.  When the update is finished, call 
	SpoolUpdateError to move the update errors into the main error list to be displayed.
	\param severity An integer that defines the seriousness of the error as described in #HC_Define_Error_Handler.
	\param categeory An integer that dentifies the general category the error belongs to as described in #HC_Define_Error_Handler. 
	For example, memory errors fall in the HEC_MEMORY error category.             
	\param specific An integer that identifies the specific error under the category already defined as described in
	#HC_Define_Error_Handler. For example, running out of memory, HES_OUT_OF_MEMORY, is a specific memory error in the                          
           HEC_MEMORY category.    
	\param msgc The length of the msgv array.
	\param msgv An array of pointers to a list of messages.
	\param stackc The length of stackv.
	\param stackv An array of strings that indicates the list of methods that were called. The last being the currently active
	HOOPS routine and the first being the originating function.
	*/
	static void CallbackEntryPoint( 
		int category, int specific, int severity,
		int msgc, char const * msgv[], int stackc, char const * stackv[]);

};



#ifdef H_PACK_8
#pragma pack(pop)
#endif

#endif



