/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class HShellWrapper {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public HShellWrapper(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(HShellWrapper obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJMVOJNI.delete_HShellWrapper(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public HShellWrapper(long key) {
    this(HJMVOJNI.new_HShellWrapper__SWIG_0(key), true);
  }

  public HShellWrapper() {
    this(HJMVOJNI.new_HShellWrapper__SWIG_1(), true);
  }

  public long Insert(int plen, HPoint[] points, int flen, int[] flist, long insertkey) {return HJMVOJNI.HShellWrapper_Insert__SWIG_0(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, insertkey);}

  public long Insert(int plen, HPoint[] points, int flen, int[] flist) {return HJMVOJNI.HShellWrapper_Insert__SWIG_1(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist);}

  public long Show(int[] plen, SWIGTYPE_p_p_HPoint points, int[] flen, SWIGTYPE_p_p_int flist) {return HJMVOJNI.HShellWrapper_Show(swigCPtr, this, plen, SWIGTYPE_p_p_HPoint.getCPtr(points), flen, SWIGTYPE_p_p_int.getCPtr(flist));}

  public long GetKey() {return HJMVOJNI.HShellWrapper_GetKey(swigCPtr, this);}

  public void TransformPoints(float[] matrix) {
    HJMVOJNI.HShellWrapper_TransformPoints(swigCPtr, this, matrix);
  }

  public long Optimize(StringBuffer options) {return HJMVOJNI.HShellWrapper_Optimize(swigCPtr, this, options);}

  public long Optimize2(StringBuffer options) {return HJMVOJNI.HShellWrapper_Optimize2(swigCPtr, this, options);}

  public void MakePolygon(int facelen, int[] face, HPoint[] points) {
    HJMVOJNI.HShellWrapper_MakePolygon(swigCPtr, this, facelen, face, HPoint.cArrayUnwrap(points));
  }

  public void OpenOwnerSegment() {
    HJMVOJNI.HShellWrapper_OpenOwnerSegment(swigCPtr, this);
  }

  public void BeginFaceIteration() {
    HJMVOJNI.HShellWrapper_BeginFaceIteration(swigCPtr, this);
  }

  public void EndFaceIteration() {
    HJMVOJNI.HShellWrapper_EndFaceIteration(swigCPtr, this);
  }

  public int GetFace(int facenum, SWIGTYPE_p_p_int face) {
    return HJMVOJNI.HShellWrapper_GetFace(swigCPtr, this, facenum, SWIGTYPE_p_p_int.getCPtr(face));
  }

  public int NextFace(SWIGTYPE_p_p_int face) {
    return HJMVOJNI.HShellWrapper_NextFace(swigCPtr, this, SWIGTYPE_p_p_int.getCPtr(face));
  }

  public void CalculateFaceCenter(int[] face, int flen, HPoint mid) {
    HJMVOJNI.HShellWrapper_CalculateFaceCenter(swigCPtr, this, face, flen, HPoint.getCPtr(mid), mid);
  }

  public void AddPoints(HPoint[] points, int pnum, HPoint[] param, HPoint[] normals, boolean AddImmediately) {
    HJMVOJNI.HShellWrapper_AddPoints__SWIG_0(swigCPtr, this, HPoint.cArrayUnwrap(points), pnum, HPoint.cArrayUnwrap(param), HPoint.cArrayUnwrap(normals), AddImmediately);
  }

  public void AddPoints(HPoint[] points, int pnum, HPoint[] param, HPoint[] normals) {
    HJMVOJNI.HShellWrapper_AddPoints__SWIG_1(swigCPtr, this, HPoint.cArrayUnwrap(points), pnum, HPoint.cArrayUnwrap(param), HPoint.cArrayUnwrap(normals));
  }

  public void AddPoints(HPoint[] points, int pnum, HPoint[] param) {
    HJMVOJNI.HShellWrapper_AddPoints__SWIG_2(swigCPtr, this, HPoint.cArrayUnwrap(points), pnum, HPoint.cArrayUnwrap(param));
  }

  public void AddPoints(HPoint[] points, int pnum) {
    HJMVOJNI.HShellWrapper_AddPoints__SWIG_3(swigCPtr, this, HPoint.cArrayUnwrap(points), pnum);
  }

  public void AddFace(int[] face, int fnum, int regionnum, HPoint[] points, HPoint[] normals, boolean AddImediately) {
    HJMVOJNI.HShellWrapper_AddFace__SWIG_0(swigCPtr, this, face, fnum, regionnum, HPoint.cArrayUnwrap(points), HPoint.cArrayUnwrap(normals), AddImediately);
  }

  public void AddFace(int[] face, int fnum, int regionnum, HPoint[] points, HPoint[] normals) {
    HJMVOJNI.HShellWrapper_AddFace__SWIG_1(swigCPtr, this, face, fnum, regionnum, HPoint.cArrayUnwrap(points), HPoint.cArrayUnwrap(normals));
  }

  public void AddFace(int[] face, int fnum, int regionnum, HPoint[] points) {
    HJMVOJNI.HShellWrapper_AddFace__SWIG_2(swigCPtr, this, face, fnum, regionnum, HPoint.cArrayUnwrap(points));
  }

  public void AddFaceDirect(int[] face, int fnum, boolean reverse, boolean AddImmediatly) {
    HJMVOJNI.HShellWrapper_AddFaceDirect__SWIG_0(swigCPtr, this, face, fnum, reverse, AddImmediatly);
  }

  public void AddFaceDirect(int[] face, int fnum, boolean reverse) {
    HJMVOJNI.HShellWrapper_AddFaceDirect__SWIG_1(swigCPtr, this, face, fnum, reverse);
  }

  public void AddFaceDirect(int[] face, int fnum) {
    HJMVOJNI.HShellWrapper_AddFaceDirect__SWIG_2(swigCPtr, this, face, fnum);
  }

  public void AddFace(HPoint[] points, int fnum, boolean AddImmediatly) {
    HJMVOJNI.HShellWrapper_AddFace__SWIG_3(swigCPtr, this, HPoint.cArrayUnwrap(points), fnum, AddImmediatly);
  }

  public void AddFace(HPoint[] points, int fnum) {
    HJMVOJNI.HShellWrapper_AddFace__SWIG_4(swigCPtr, this, HPoint.cArrayUnwrap(points), fnum);
  }

  public void Set(long key) {
    HJMVOJNI.HShellWrapper_Set(swigCPtr, this, key);
  }

  public void Regenerate(long newowner, boolean makeSegment, boolean regenerate) {
    HJMVOJNI.HShellWrapper_Regenerate__SWIG_0(swigCPtr, this, newowner, makeSegment, regenerate);
  }

  public void Regenerate(long newowner, boolean makeSegment) {
    HJMVOJNI.HShellWrapper_Regenerate__SWIG_1(swigCPtr, this, newowner, makeSegment);
  }

  public void Regenerate(long newowner) {
    HJMVOJNI.HShellWrapper_Regenerate__SWIG_2(swigCPtr, this, newowner);
  }

  public void Regenerate() {
    HJMVOJNI.HShellWrapper_Regenerate__SWIG_3(swigCPtr, this);
  }

  public void GrowArrays(int fnum) {
    HJMVOJNI.HShellWrapper_GrowArrays(swigCPtr, this, fnum);
  }

  public void GrowPointArray(int fnum, boolean gorwvparams, boolean grownormals) {
    HJMVOJNI.HShellWrapper_GrowPointArray__SWIG_0(swigCPtr, this, fnum, gorwvparams, grownormals);
  }

  public void GrowPointArray(int fnum, boolean gorwvparams) {
    HJMVOJNI.HShellWrapper_GrowPointArray__SWIG_1(swigCPtr, this, fnum, gorwvparams);
  }

  public void GrowPointArray(int fnum) {
    HJMVOJNI.HShellWrapper_GrowPointArray__SWIG_2(swigCPtr, this, fnum);
  }

  public void GrowPointArray2(int fnum, boolean growparamarray, boolean grownormalarray, boolean growfnarray, boolean growcolorarray) {
    HJMVOJNI.HShellWrapper_GrowPointArray2__SWIG_0(swigCPtr, this, fnum, growparamarray, grownormalarray, growfnarray, growcolorarray);
  }

  public void GrowPointArray2(int fnum, boolean growparamarray, boolean grownormalarray, boolean growfnarray) {
    HJMVOJNI.HShellWrapper_GrowPointArray2__SWIG_1(swigCPtr, this, fnum, growparamarray, grownormalarray, growfnarray);
  }

  public void GrowPointArray2(int fnum, boolean growparamarray, boolean grownormalarray) {
    HJMVOJNI.HShellWrapper_GrowPointArray2__SWIG_2(swigCPtr, this, fnum, growparamarray, grownormalarray);
  }

  public void GrowPointArray2(int fnum, boolean growparamarray) {
    HJMVOJNI.HShellWrapper_GrowPointArray2__SWIG_3(swigCPtr, this, fnum, growparamarray);
  }

  public void GrowPointArray2(int fnum) {
    HJMVOJNI.HShellWrapper_GrowPointArray2__SWIG_4(swigCPtr, this, fnum);
  }

  public void AddNextFaceWithDistinctNormals(HPoint points, HPoint normals, int[] face1, int[] face2, int fnum) {
    HJMVOJNI.HShellWrapper_AddNextFaceWithDistinctNormals(swigCPtr, this, HPoint.getCPtr(points), points, HPoint.getCPtr(normals), normals, face1, face2, fnum);
  }

  public void AddNextFaceWithDistinctNormalsAndTexture(HPoint points, HPoint normals, HPoint texcor, int[] face1, int[] face2, int[] face3, int fnum) {
    HJMVOJNI.HShellWrapper_AddNextFaceWithDistinctNormalsAndTexture(swigCPtr, this, HPoint.getCPtr(points), points, HPoint.getCPtr(normals), normals, HPoint.getCPtr(texcor), texcor, face1, face2, face3, fnum);
  }

  public void AddNextFaceWithDistinctNormalsAndColor(HPoint points, HPoint normals, int[] face1, int[] face2, HPoint face3, int fnum) {
    HJMVOJNI.HShellWrapper_AddNextFaceWithDistinctNormalsAndColor(swigCPtr, this, HPoint.getCPtr(points), points, HPoint.getCPtr(normals), normals, face1, face2, HPoint.getCPtr(face3), face3, fnum);
  }

  public void BeginAddFaces(int pnum) {
    HJMVOJNI.HShellWrapper_BeginAddFaces(swigCPtr, this, pnum);
  }

  public void EndAddFaces() {
    HJMVOJNI.HShellWrapper_EndAddFaces(swigCPtr, this);
  }

  public void GrowFaceArray(int fnum) {
    HJMVOJNI.HShellWrapper_GrowFaceArray(swigCPtr, this, fnum);
  }

  public void SubdivideOneQuadFace(int[] face, HShellWrapper wrapper, boolean generateIsolines, int[] facecolorlist, int[] fclnum) {
    HJMVOJNI.HShellWrapper_SubdivideOneQuadFace(swigCPtr, this, face, HShellWrapper.getCPtr(wrapper), wrapper, generateIsolines, facecolorlist, fclnum);
  }

  public void SubdivideOneQuadFace2(int[] face) {
    HJMVOJNI.HShellWrapper_SubdivideOneQuadFace2(swigCPtr, this, face);
  }

  public void SubdivideQuadFaces(boolean GenerateIsolines) {
    HJMVOJNI.HShellWrapper_SubdivideQuadFaces(swigCPtr, this, GenerateIsolines);
  }

  public void SetVertexColors(HPoint color) {
    HJMVOJNI.HShellWrapper_SetVertexColors__SWIG_0(swigCPtr, this, HPoint.getCPtr(color), color);
  }

  public void ShowVertexColors(HPoint color) {
    HJMVOJNI.HShellWrapper_ShowVertexColors__SWIG_0(swigCPtr, this, HPoint.getCPtr(color), color);
  }

  public void SetVertexColors(float[] findex) {
    HJMVOJNI.HShellWrapper_SetVertexColors__SWIG_1(swigCPtr, this, findex);
  }

  public void ShowVertexColors(float[] color) {
    HJMVOJNI.HShellWrapper_ShowVertexColors__SWIG_1(swigCPtr, this, color);
  }

  public void MakeLod(int lodnum, int percent) {
    HJMVOJNI.HShellWrapper_MakeLod(swigCPtr, this, lodnum, percent);
  }

  public void FindExtents(HPoint center, HPoint min, HPoint max) {
    HJMVOJNI.HShellWrapper_FindExtents(swigCPtr, this, HPoint.getCPtr(center), center, HPoint.getCPtr(min), min, HPoint.getCPtr(max), max);
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, float[] params, int paranum, HPoint[] vcolors, boolean emptyshell) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_0(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), params, paranum, HPoint.cArrayUnwrap(vcolors), emptyshell);
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, float[] params, int paranum, HPoint[] vcolors) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_1(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), params, paranum, HPoint.cArrayUnwrap(vcolors));
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, float[] params, int paranum) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_2(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), params, paranum);
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, float[] params) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_3(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), params);
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_4(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals));
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_5(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist);
  }

  public void ReplaceWithParameters(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, float[] params, int paranum, boolean emptyshell) {
    HJMVOJNI.HShellWrapper_ReplaceWithParameters__SWIG_6(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), params, paranum, emptyshell);
  }

  public void Replace(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals, boolean emptyshell) {
    HJMVOJNI.HShellWrapper_Replace__SWIG_0(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals), emptyshell);
  }

  public void Replace(int plen, HPoint[] points, int flen, int[] flist, HPoint[] normals) {
    HJMVOJNI.HShellWrapper_Replace__SWIG_1(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist, HPoint.cArrayUnwrap(normals));
  }

  public void Replace(int plen, HPoint[] points, int flen, int[] flist) {
    HJMVOJNI.HShellWrapper_Replace__SWIG_2(swigCPtr, this, plen, HPoint.cArrayUnwrap(points), flen, flist);
  }

  public void SetFaceRegion(int regionnum) {
    HJMVOJNI.HShellWrapper_SetFaceRegion(swigCPtr, this, regionnum);
  }

  public void SetEmptyShell(long segmentkey, boolean MakeSegment) {
    HJMVOJNI.HShellWrapper_SetEmptyShell(swigCPtr, this, segmentkey, MakeSegment);
  }

  public void setM_plen(int value) {
    HJMVOJNI.HShellWrapper_m_plen_set(swigCPtr, this, value);
  }

  public int getM_plen() {
    return HJMVOJNI.HShellWrapper_m_plen_get(swigCPtr, this);
  }

  public void setM_flen(int value) {
    HJMVOJNI.HShellWrapper_m_flen_set(swigCPtr, this, value);
  }

  public int getM_flen() {
    return HJMVOJNI.HShellWrapper_m_flen_get(swigCPtr, this);
  }

  public void setM_Key(long value) {
    HJMVOJNI.HShellWrapper_m_Key_set(swigCPtr, this, value);
  }

  public long getM_Key() {return HJMVOJNI.HShellWrapper_m_Key_get(swigCPtr, this);}

  public void setM_facepointer(int value) {
    HJMVOJNI.HShellWrapper_m_facepointer_set(swigCPtr, this, value);
  }

  public int getM_facepointer() {
    return HJMVOJNI.HShellWrapper_m_facepointer_get(swigCPtr, this);
  }

  public void setM_totalflen(int value) {
    HJMVOJNI.HShellWrapper_m_totalflen_set(swigCPtr, this, value);
  }

  public int getM_totalflen() {
    return HJMVOJNI.HShellWrapper_m_totalflen_get(swigCPtr, this);
  }

  public void setM_totalplen(int value) {
    HJMVOJNI.HShellWrapper_m_totalplen_set(swigCPtr, this, value);
  }

  public int getM_totalplen() {
    return HJMVOJNI.HShellWrapper_m_totalplen_get(swigCPtr, this);
  }

  public void setM_totalnumfaceslen(int value) {
    HJMVOJNI.HShellWrapper_m_totalnumfaceslen_set(swigCPtr, this, value);
  }

  public int getM_totalnumfaceslen() {
    return HJMVOJNI.HShellWrapper_m_totalnumfaceslen_get(swigCPtr, this);
  }

  public void setM_numfaceslen(int value) {
    HJMVOJNI.HShellWrapper_m_numfaceslen_set(swigCPtr, this, value);
  }

  public int getM_numfaceslen() {
    return HJMVOJNI.HShellWrapper_m_numfaceslen_get(swigCPtr, this);
  }

  public void get_m_Points(HPoint[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_Points(swigCPtr, this, HPoint.cArrayUnwrap(values), count);
  }

  public void get_m_VParams(HPoint[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_VParams(swigCPtr, this, HPoint.cArrayUnwrap(values), count);
  }

  public void get_m_VColors(HPoint[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_VColors(swigCPtr, this, HPoint.cArrayUnwrap(values), count);
  }

  public void get_m_VNormals(HPoint[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_VNormals(swigCPtr, this, HPoint.cArrayUnwrap(values), count);
  }

  public void get_m_Flist(int[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_Flist(swigCPtr, this, values, count);
  }

  public void get_m_faceregion(float[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_faceregion(swigCPtr, this, values, count);
  }

  public void get_m_faceindirect(float[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_faceindirect(swigCPtr, this, values, count);
  }

  public void get_m_FNArray(FaceWithNormalInfo[] values, int count) {
    HJMVOJNI.HShellWrapper_get_m_FNArray(swigCPtr, this, FaceWithNormalInfo.cArrayUnwrap(values), count);
  }

}
