/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class HOpMarkupMeasure extends HBaseOperator {
  private long swigCPtr;

  public HOpMarkupMeasure(long cPtr, boolean cMemoryOwn) {
    super(HJMVOJNI.HOpMarkupMeasure_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(HOpMarkupMeasure obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJMVOJNI.delete_HOpMarkupMeasure(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    HJMVOJNI.HOpMarkupMeasure_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    HJMVOJNI.HOpMarkupMeasure_change_ownership(this, swigCPtr, true);
  }

  public HOpMarkupMeasure(HBaseView view, boolean AddToLayer, int DoRepeat, int DoCapture) {
    this(HJMVOJNI.new_HOpMarkupMeasure__SWIG_0(HBaseView.getCPtr(view), view, AddToLayer, DoRepeat, DoCapture), true);
    HJMVOJNI.HOpMarkupMeasure_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public HOpMarkupMeasure(HBaseView view, boolean AddToLayer, int DoRepeat) {
    this(HJMVOJNI.new_HOpMarkupMeasure__SWIG_1(HBaseView.getCPtr(view), view, AddToLayer, DoRepeat), true);
    HJMVOJNI.HOpMarkupMeasure_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public HOpMarkupMeasure(HBaseView view, boolean AddToLayer) {
    this(HJMVOJNI.new_HOpMarkupMeasure__SWIG_2(HBaseView.getCPtr(view), view, AddToLayer), true);
    HJMVOJNI.HOpMarkupMeasure_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public HOpMarkupMeasure(HBaseView view) {
    this(HJMVOJNI.new_HOpMarkupMeasure__SWIG_3(HBaseView.getCPtr(view), view), true);
    HJMVOJNI.HOpMarkupMeasure_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public String GetName() {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_GetName(swigCPtr, this) : HJMVOJNI.HOpMarkupMeasure_GetNameSwigExplicitHOpMarkupMeasure(swigCPtr, this);
  }

  public int OnLButtonDown(HEventInfo hevent) {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_OnLButtonDown(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent) : HJMVOJNI.HOpMarkupMeasure_OnLButtonDownSwigExplicitHOpMarkupMeasure(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent);
  }

  public int OnLButtonDownAndMove(HEventInfo hevent) {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_OnLButtonDownAndMove(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent) : HJMVOJNI.HOpMarkupMeasure_OnLButtonDownAndMoveSwigExplicitHOpMarkupMeasure(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent);
  }

  public int OnLButtonUp(HEventInfo hevent) {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_OnLButtonUp(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent) : HJMVOJNI.HOpMarkupMeasure_OnLButtonUpSwigExplicitHOpMarkupMeasure(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent);
  }

  public int OnRButtonDown(HEventInfo hevent) {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_OnRButtonDown(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent) : HJMVOJNI.HOpMarkupMeasure_OnRButtonDownSwigExplicitHOpMarkupMeasure(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent);
  }

  public int OnKeyDown(HEventInfo hevent) {
    return (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_OnKeyDown(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent) : HJMVOJNI.HOpMarkupMeasure_OnKeyDownSwigExplicitHOpMarkupMeasure(swigCPtr, this, HEventInfo.getCPtr(hevent), hevent);
  }

  public HBaseOperator Clone() {
    long cPtr = (getClass() == HOpMarkupMeasure.class) ? HJMVOJNI.HOpMarkupMeasure_Clone(swigCPtr, this) : HJMVOJNI.HOpMarkupMeasure_CloneSwigExplicitHOpMarkupMeasure(swigCPtr, this);
    return (cPtr == 0) ? null : new HBaseOperator(cPtr, false);
  }

  protected void StartOp() {
    HJMVOJNI.HOpMarkupMeasure_StartOp(swigCPtr, this);
  }

  protected boolean EndOp() {
    return HJMVOJNI.HOpMarkupMeasure_EndOp(swigCPtr, this);
  }

  protected void setM_Annotation(HUtilityAnnotationMeasure value) {
    HJMVOJNI.HOpMarkupMeasure_m_Annotation_set(swigCPtr, this, HUtilityAnnotationMeasure.getCPtr(value), value);
  }

  protected HUtilityAnnotationMeasure getM_Annotation() {
    long cPtr = HJMVOJNI.HOpMarkupMeasure_m_Annotation_get(swigCPtr, this);
    return (cPtr == 0) ? null : new HUtilityAnnotationMeasure(cPtr, false);
  }

  protected void setM_iBackgroundType(int value) {
    HJMVOJNI.HOpMarkupMeasure_m_iBackgroundType_set(swigCPtr, this, value);
  }

  protected int getM_iBackgroundType() {
    return HJMVOJNI.HOpMarkupMeasure_m_iBackgroundType_get(swigCPtr, this);
  }

  protected void setM_bAddToLayer(boolean value) {
    HJMVOJNI.HOpMarkupMeasure_m_bAddToLayer_set(swigCPtr, this, value);
  }

  protected boolean getM_bAddToLayer() {
    return HJMVOJNI.HOpMarkupMeasure_m_bAddToLayer_get(swigCPtr, this);
  }

  protected void setM_bNewNote(boolean value) {
    HJMVOJNI.HOpMarkupMeasure_m_bNewNote_set(swigCPtr, this, value);
  }

  protected boolean getM_bNewNote() {
    return HJMVOJNI.HOpMarkupMeasure_m_bNewNote_get(swigCPtr, this);
  }

  protected void setM_bTouchedText(boolean value) {
    HJMVOJNI.HOpMarkupMeasure_m_bTouchedText_set(swigCPtr, this, value);
  }

  protected boolean getM_bTouchedText() {
    return HJMVOJNI.HOpMarkupMeasure_m_bTouchedText_get(swigCPtr, this);
  }

  protected void setM_bHideOverlappedText(boolean value) {
    HJMVOJNI.HOpMarkupMeasure_m_bHideOverlappedText_set(swigCPtr, this, value);
  }

  protected boolean getM_bHideOverlappedText() {
    return HJMVOJNI.HOpMarkupMeasure_m_bHideOverlappedText_get(swigCPtr, this);
  }

}
