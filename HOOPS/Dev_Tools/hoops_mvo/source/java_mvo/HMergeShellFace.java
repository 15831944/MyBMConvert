/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class HMergeShellFace {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public HMergeShellFace(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(HMergeShellFace obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        HJMVOJNI.delete_HMergeShellFace(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public HMergeShellFace() {
    this(HJMVOJNI.new_HMergeShellFace(), true);
  }

  public void Init(int[] flist) {
    HJMVOJNI.HMergeShellFace_Init(swigCPtr, this, flist);
  }

  public void MakeChildFaces(int[] addpoint, HPoint points, boolean AddExtraPoints, int[] newpoints, int[] newpointslen) {
    HJMVOJNI.HMergeShellFace_MakeChildFaces(swigCPtr, this, addpoint, HPoint.getCPtr(points), points, AddExtraPoints, newpoints, newpointslen);
  }

  public void Divide(int pnum, HPoint points) {
    HJMVOJNI.HMergeShellFace_Divide(swigCPtr, this, pnum, HPoint.getCPtr(points), points);
  }

  public boolean CheckHit(HPoint p, HPoint normal, HPoint plist, HPoint pres) {
    return HJMVOJNI.HMergeShellFace_CheckHit(swigCPtr, this, HPoint.getCPtr(p), p, HPoint.getCPtr(normal), normal, HPoint.getCPtr(plist), plist, HPoint.getCPtr(pres), pres);
  }

  public HMergeShellFace FindHitFaceRecursive(HPoint p, HPoint normal, HPoint plist, HPoint respoint) {
    long cPtr = HJMVOJNI.HMergeShellFace_FindHitFaceRecursive(swigCPtr, this, HPoint.getCPtr(p), p, HPoint.getCPtr(normal), normal, HPoint.getCPtr(plist), plist, HPoint.getCPtr(respoint), respoint);
    return (cPtr == 0) ? null : new HMergeShellFace(cPtr, false);
  }

  public HMergeShellFace FindHitFace(HPoint p, HPoint normal, HPoint plist, HPoint respoint) {
    long cPtr = HJMVOJNI.HMergeShellFace_FindHitFace(swigCPtr, this, HPoint.getCPtr(p), p, HPoint.getCPtr(normal), normal, HPoint.getCPtr(plist), plist, HPoint.getCPtr(respoint), respoint);
    return (cPtr == 0) ? null : new HMergeShellFace(cPtr, false);
  }

  public boolean CheckIfColinear(HPoint point) {
    return HJMVOJNI.HMergeShellFace_CheckIfColinear(swigCPtr, this, HPoint.getCPtr(point), point);
  }

  public int GetLengthRecursive(int l) {
    return HJMVOJNI.HMergeShellFace_GetLengthRecursive(swigCPtr, this, l);
  }

  public int GetLength() {
    return HJMVOJNI.HMergeShellFace_GetLength(swigCPtr, this);
  }

  public int AddToFacelistRecursive(int[] start, int l) {
    return HJMVOJNI.HMergeShellFace_AddToFacelistRecursive(swigCPtr, this, start, l);
  }

  public int AddToFacelist(int[] start) {
    return HJMVOJNI.HMergeShellFace_AddToFacelist(swigCPtr, this, start);
  }

}
