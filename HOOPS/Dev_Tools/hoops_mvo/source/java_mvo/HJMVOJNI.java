/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.techsoft.hoops;

public class HJMVOJNI {

  static {
    System.loadLibrary("hjmvo2120");
  }

  public final static native int MVO_BIGENDIAN_get();
  public final static native double H_M_PI_get();
  public final static native int INVALID_KEY_get();
  public final static native int NO_RELATED_SELECTION_LIMIT_get();
  public final static native double MVO_SQRT_MAX_FLOAT_get();
  public final static native int MVO_MESSAGE_BUFFER_SIZE_get();
  public final static native int MVO_SEGMENT_PATHNAME_BUFFER_get();
  public final static native int MVO_BUFFER_SIZE_get();
  public final static native int MVO_SMALL_BUFFER_SIZE_get();
  public final static native int MVO_BIG_BUFFER_SIZE_get();
  public final static native int HIO_OK_get();
  public final static native int HIO_VersionMismatch_get();
  public final static native int HIO_Fail_get();
  public final static native int HIO_NotHandled_get();
  public final static native int HIO_BadFileName_get();
  public final static native int HIO_BadOptions_get();
  public final static native int HIO_BadLicense_get();
  public final static native int HIO_LibraryNotFound_get();
  public final static native int HSignalDelete_get();
  public final static native int HSignalCameraPositionChanged_get();
  public final static native int HSignalSelected_get();
  public final static native int HSignalDeSelectedOne_get();
  public final static native int HSignalDeSelectedAll_get();
  public final static native int HSignalPaint_get();
  public final static native int HSignalClash_get();
  public final static native int HSignalRenderModeChanged_get();
  public final static native int HSignalResize_get();
  public final static native int HShadowNone_get();
  public final static native int HShadowSoft_get();
  public final static native int HShadowHard_get();
  public final static native int HCutGeometryVisibilityNone_get();
  public final static native int HCutGeometryVisibilityFaces_get();
  public final static native int HCutGeometryVisibilityEdges_get();
  public final static native int HCutGeometryVisibilityAll_get();
  public final static native void HPoint_x_set(long jarg1, HPoint jarg1_, float jarg2);
  public final static native float HPoint_x_get(long jarg1, HPoint jarg1_);
  public final static native void HPoint_y_set(long jarg1, HPoint jarg1_, float jarg2);
  public final static native float HPoint_y_get(long jarg1, HPoint jarg1_);
  public final static native void HPoint_z_set(long jarg1, HPoint jarg1_, float jarg2);
  public final static native float HPoint_z_get(long jarg1, HPoint jarg1_);
  public final static native long new_HPoint__SWIG_0();
  public final static native long new_HPoint__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HPoint__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HPoint__SWIG_3(long jarg1, HPoint jarg1_);
  public final static native void HPoint_Set__SWIG_0(long jarg1, HPoint jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HPoint_Set__SWIG_1(long jarg1, HPoint jarg1_, float jarg2, float jarg3);
  public final static native void HPoint_Set__SWIG_2(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HPoint_Add__SWIG_0(long jarg1, HPoint jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HPoint_Add__SWIG_1(long jarg1, HPoint jarg1_, float jarg2, float jarg3);
  public final static native double HPOINT_EPSILON_get();
  public final static native boolean HPoint_Equal__SWIG_0(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, float jarg3);
  public final static native boolean HPoint_Equal__SWIG_1(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void delete_HPoint(long jarg1);
  public final static native long new_HPointKey__SWIG_0();
  public final static native long new_HPointKey__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HPointKey__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HPointKey__SWIG_3(long jarg1, HPoint jarg1_);
  public final static native void delete_HPointKey(long jarg1);
  public final static native void HIntRectangle_left_set(long jarg1, HIntRectangle jarg1_, int jarg2);
  public final static native int HIntRectangle_left_get(long jarg1, HIntRectangle jarg1_);
  public final static native void HIntRectangle_right_set(long jarg1, HIntRectangle jarg1_, int jarg2);
  public final static native int HIntRectangle_right_get(long jarg1, HIntRectangle jarg1_);
  public final static native void HIntRectangle_bottom_set(long jarg1, HIntRectangle jarg1_, int jarg2);
  public final static native int HIntRectangle_bottom_get(long jarg1, HIntRectangle jarg1_);
  public final static native void HIntRectangle_top_set(long jarg1, HIntRectangle jarg1_, int jarg2);
  public final static native int HIntRectangle_top_get(long jarg1, HIntRectangle jarg1_);
  public final static native long new_HIntRectangle();
  public final static native void delete_HIntRectangle(long jarg1);
  public final static native long new_HPlane__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HPlane__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HPlane__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HPlane__SWIG_3(float jarg1);
  public final static native long new_HPlane__SWIG_4();
  public final static native long new_HPlane__SWIG_5(long jarg1, HPoint jarg1_, float jarg2);
  public final static native long new_HPlane__SWIG_6(long jarg1, HPlane jarg1_);
  public final static native void HPlane_Set(long jarg1, HPlane jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native double HPlane_ClassifyPoint(long jarg1, HPlane jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HPlane_CalculateNormal(long jarg1, HPlane jarg1_, long jarg2, HPoint jarg2_);
  public final static native boolean HPlane_Equal__SWIG_0(long jarg1, HPlane jarg1_, long jarg2, HPlane jarg2_, float jarg3, float jarg4);
  public final static native boolean HPlane_Equal__SWIG_1(long jarg1, HPlane jarg1_, long jarg2, HPlane jarg2_, float jarg3);
  public final static native boolean HPlane_Equal__SWIG_2(long jarg1, HPlane jarg1_, long jarg2, HPlane jarg2_);
  public final static native float HPlane_a__SWIG_0(long jarg1, HPlane jarg1_);
  public final static native float HPlane_b__SWIG_0(long jarg1, HPlane jarg1_);
  public final static native float HPlane_c__SWIG_0(long jarg1, HPlane jarg1_);
  public final static native float HPlane_d__SWIG_0(long jarg1, HPlane jarg1_);
  public final static native void HPlane_a__SWIG_1(long jarg1, HPlane jarg1_, float jarg2);
  public final static native void HPlane_b__SWIG_1(long jarg1, HPlane jarg1_, float jarg2);
  public final static native void HPlane_c__SWIG_1(long jarg1, HPlane jarg1_, float jarg2);
  public final static native void HPlane_d__SWIG_1(long jarg1, HPlane jarg1_, float jarg2);
  public final static native void delete_HPlane(long jarg1);
  public final static native long new_HPlaneKey__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HPlaneKey__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HPlaneKey__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HPlaneKey__SWIG_3(float jarg1);
  public final static native long new_HPlaneKey__SWIG_4();
  public final static native long new_HPlaneKey__SWIG_5(long jarg1, HPoint jarg1_, float jarg2);
  public final static native long new_HPlaneKey__SWIG_6(long jarg1, HPlane jarg1_);
  public final static native void delete_HPlaneKey(long jarg1);
  public final static native long new_HPixelRGB__SWIG_0(short jarg1, short jarg2, short jarg3);
  public final static native long new_HPixelRGB__SWIG_1(short jarg1, short jarg2);
  public final static native long new_HPixelRGB__SWIG_2(short jarg1);
  public final static native long new_HPixelRGB__SWIG_3();
  public final static native long new_HPixelRGB__SWIG_4(long jarg1, HPixelRGB jarg1_);
  public final static native short HPixelRGB_r__SWIG_0(long jarg1, HPixelRGB jarg1_);
  public final static native short HPixelRGB_g__SWIG_0(long jarg1, HPixelRGB jarg1_);
  public final static native short HPixelRGB_b__SWIG_0(long jarg1, HPixelRGB jarg1_);
  public final static native void HPixelRGB_r__SWIG_1(long jarg1, HPixelRGB jarg1_, short jarg2);
  public final static native void HPixelRGB_g__SWIG_1(long jarg1, HPixelRGB jarg1_, short jarg2);
  public final static native void HPixelRGB_b__SWIG_1(long jarg1, HPixelRGB jarg1_, short jarg2);
  public final static native void HPixelRGB_Set(long jarg1, HPixelRGB jarg1_, short jarg2, short jarg3, short jarg4);
  public final static native void HPixelRGB_Setf(long jarg1, HPixelRGB jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void delete_HPixelRGB(long jarg1);
  public final static native long new_HPixelRGBA__SWIG_0(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native long new_HPixelRGBA__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native long new_HPixelRGBA__SWIG_2(short jarg1, short jarg2);
  public final static native long new_HPixelRGBA__SWIG_3(short jarg1);
  public final static native long new_HPixelRGBA__SWIG_4();
  public final static native long new_HPixelRGBA__SWIG_5(long jarg1, HPixelRGBA jarg1_);
  public final static native void HPixelRGBA_Set__SWIG_0(long jarg1, HPixelRGBA jarg1_, short jarg2, short jarg3, short jarg4, short jarg5);
  public final static native void HPixelRGBA_Set__SWIG_1(long jarg1, HPixelRGBA jarg1_, short jarg2, short jarg3, short jarg4);
  public final static native void HPixelRGBA_Setf__SWIG_0(long jarg1, HPixelRGBA jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HPixelRGBA_Setf__SWIG_1(long jarg1, HPixelRGBA jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native short HPixelRGBA_a__SWIG_0(long jarg1, HPixelRGBA jarg1_);
  public final static native void HPixelRGBA_a__SWIG_1(long jarg1, HPixelRGBA jarg1_, short jarg2);
  public final static native void delete_HPixelRGBA(long jarg1);
  public final static native int NoEdges_get();
  public final static native int FacesUnmodified_get();
  public final static native int HLISTENER_PASS_EVENT_get();
  public final static native int HLISTENER_CONSUME_EVENT_get();
  public final static native int HLISTENER_PRIORITY_NORMAL_get();
  public final static native int HLISTENER_PRIORITY_HIGH_get();
  public final static native int HLISTENER_PRIORITY_LOW_get();
  public final static native long new_HEventListenerManager();
  public final static native void delete_HEventListenerManager(long jarg1);
  public final static native void HEventListenerManager_AddEventListener(long jarg1, HEventListenerManager jarg1_, long jarg2, HEventListener jarg2_, int jarg3);
  public final static native void HEventListenerManager_Reset(long jarg1, HEventListenerManager jarg1_);
  public final static native void HEventListenerManager_StartQuery(long jarg1, HEventListenerManager jarg1_);
  public final static native long HEventListenerManager_GetEventListener(long jarg1, HEventListenerManager jarg1_);
  public final static native boolean HEventListenerManager_RemoveEventListener(long jarg1, HEventListenerManager jarg1_, long jarg2, HEventListener jarg2_);
  public final static native long new_HEventListener();
  public final static native void delete_HEventListener(long jarg1);
  public final static native void HEventListener_ConvertToManager(long jarg1, HEventListener jarg1_);
  public final static native long HEventListener_CreateListenerManager(long jarg1, HEventListener jarg1_);
  public final static native long HEventListener_CreateListenerManagerSwigExplicitHEventListener(long jarg1, HEventListener jarg1_);
  public final static native long HEventListener_GetEventListenerManager(long jarg1, HEventListener jarg1_);
  public final static native void HEventListener_SetRequestedPriority(long jarg1, HEventListener jarg1_, int jarg2);
  public final static native int HEventListener_GetRequestedPriority(long jarg1, HEventListener jarg1_);
  public final static native void HEventListener_m_pEventListenerManager_set(long jarg1, HEventListener jarg1_, long jarg2, HEventListenerManager jarg2_);
  public final static native long HEventListener_m_pEventListenerManager_get(long jarg1, HEventListener jarg1_);
  public final static native void HEventListener_m_RequestedPriority_set(long jarg1, HEventListener jarg1_, int jarg2);
  public final static native int HEventListener_m_RequestedPriority_get(long jarg1, HEventListener jarg1_);
  public final static native void HEventListener_director_connect(HEventListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HEventListener_change_ownership(HEventListener obj, long cptr, boolean take_or_release);
  public final static native int HUpdateListener_GetEventType();
  public final static native long HUpdateListener_CreateListenerManager(long jarg1, HUpdateListener jarg1_);
  public final static native long HUpdateListener_CreateListenerManagerSwigExplicitHUpdateListener(long jarg1, HUpdateListener jarg1_);
  public final static native int HUpdateListener_CameraChangedEvent(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HUpdateListener_CameraChangedEventSwigExplicitHUpdateListener(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HUpdateListener_UpdateEvent(long jarg1, HUpdateListener jarg1_, boolean jarg2, boolean jarg3);
  public final static native int HUpdateListener_UpdateEventSwigExplicitHUpdateListener(long jarg1, HUpdateListener jarg1_, boolean jarg2, boolean jarg3);
  public final static native int HUpdateListener_ViewDestroyedEvent(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HUpdateListener_ViewDestroyedEventSwigExplicitHUpdateListener(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HUpdateListener_SmoothTransitionFinishedEvent(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HUpdateListener_SmoothTransitionFinishedEventSwigExplicitHUpdateListener(long jarg1, HUpdateListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long new_HUpdateListener();
  public final static native void delete_HUpdateListener(long jarg1);
  public final static native void HUpdateListener_director_connect(HUpdateListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HUpdateListener_change_ownership(HUpdateListener obj, long cptr, boolean take_or_release);
  public final static native int HFitWorldListener_GetEventType();
  public final static native long HFitWorldListener_CreateListenerManager(long jarg1, HFitWorldListener jarg1_);
  public final static native long HFitWorldListener_CreateListenerManagerSwigExplicitHFitWorldListener(long jarg1, HFitWorldListener jarg1_);
  public final static native int HFitWorldListener_PreFitWorldEvent(long jarg1, HFitWorldListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HFitWorldListener_PreFitWorldEventSwigExplicitHFitWorldListener(long jarg1, HFitWorldListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HFitWorldListener_PostFitWorldEvent(long jarg1, HFitWorldListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HFitWorldListener_PostFitWorldEventSwigExplicitHFitWorldListener(long jarg1, HFitWorldListener jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long new_HFitWorldListener();
  public final static native void delete_HFitWorldListener(long jarg1);
  public final static native void HFitWorldListener_director_connect(HFitWorldListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HFitWorldListener_change_ownership(HFitWorldListener obj, long cptr, boolean take_or_release);
  public final static native int HObjectManipulationListener_GetEventType();
  public final static native long HObjectManipulationListener_CreateListenerManager(long jarg1, HObjectManipulationListener jarg1_);
  public final static native long HObjectManipulationListener_CreateListenerManagerSwigExplicitHObjectManipulationListener(long jarg1, HObjectManipulationListener jarg1_);
  public final static native int HObjectManipulationListener_SetupHandlesEvent(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native int HObjectManipulationListener_SetupHandlesEventSwigExplicitHObjectManipulationListener(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native int HObjectManipulationListener_ObjectBeforeMoveEvent(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HObjectManipulationListener_ObjectBeforeMoveEventSwigExplicitHObjectManipulationListener(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HObjectManipulationListener_ObjectMovedEvent(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HObjectManipulationListener_ObjectMovedEventSwigExplicitHObjectManipulationListener(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HObjectManipulationListener_ObjectScaledEvent(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HObjectManipulationListener_ObjectScaledEventSwigExplicitHObjectManipulationListener(long jarg1, HObjectManipulationListener jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native long new_HObjectManipulationListener();
  public final static native void delete_HObjectManipulationListener(long jarg1);
  public final static native void HObjectManipulationListener_director_connect(HObjectManipulationListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HObjectManipulationListener_change_ownership(HObjectManipulationListener obj, long cptr, boolean take_or_release);
  public final static native int HAnimationListener_GetEventType();
  public final static native long HAnimationListener_CreateListenerManager(long jarg1, HAnimationListener jarg1_);
  public final static native int HAnimationListener_AnimationFinishedEvent(long jarg1, HAnimationListener jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native int HAnimationListener_KeyframeEditorExistsQuery(long jarg1, HAnimationListener jarg1_, boolean[] jarg2);
  public final static native int HAnimationListener_KeyframeAddedEvent(long jarg1, HAnimationListener jarg1_);
  public final static native int HAnimationListener_ObjectCollisionEvent(long jarg1, HAnimationListener jarg1_, long jarg2, HBhvTargetObject jarg2_);
  public final static native int HAnimationListener_ObjectNoCollisionEvent(long jarg1, HAnimationListener jarg1_, long jarg2, HBhvTargetObject jarg2_);
  public final static native long new_HAnimationListener();
  public final static native void delete_HAnimationListener(long jarg1);
  public final static native int HSensorListener_GetEventType();
  public final static native long HSensorListener_CreateListenerManager(long jarg1, HSensorListener jarg1_);
  public final static native long HSensorListener_CreateListenerManagerSwigExplicitHSensorListener(long jarg1, HSensorListener jarg1_);
  public final static native int HSensorListener_SensorActivatedEvent(long jarg1, HSensorListener jarg1_, long jarg2);
  public final static native int HSensorListener_SensorActivatedEventSwigExplicitHSensorListener(long jarg1, HSensorListener jarg1_, long jarg2);
  public final static native int HSensorListener_SensorActionEvent(long jarg1, HSensorListener jarg1_, String jarg2);
  public final static native int HSensorListener_SensorActionEventSwigExplicitHSensorListener(long jarg1, HSensorListener jarg1_, String jarg2);
  public final static native long new_HSensorListener();
  public final static native void delete_HSensorListener(long jarg1);
  public final static native void HSensorListener_director_connect(HSensorListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HSensorListener_change_ownership(HSensorListener obj, long cptr, boolean take_or_release);
  public final static native int HMouseListener_GetEventType();
  public final static native long HMouseListener_CreateListenerManager(long jarg1, HMouseListener jarg1_);
  public final static native long HMouseListener_CreateListenerManagerSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_);
  public final static native int HMouseListener_OnLButtonDown(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnLButtonDownSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMouseMove(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMouseMoveSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnLButtonUp(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnLButtonUpSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnLButtonDblClk(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnLButtonDblClkSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonDown(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonDownSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonUp(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonUpSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonDblClk(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMButtonDblClkSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonDown(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonDownSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonUp(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonUpSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonDblClk(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnRButtonDblClkSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMouseWheel(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnMouseWheelSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnKeyDown(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnKeyDownSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnKeyUp(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnKeyUpSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesDown(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesDownSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesMove(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesMoveSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesUp(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HMouseListener_OnTouchesUpSwigExplicitHMouseListener(long jarg1, HMouseListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long new_HMouseListener();
  public final static native void delete_HMouseListener(long jarg1);
  public final static native void HMouseListener_director_connect(HMouseListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HMouseListener_change_ownership(HMouseListener obj, long cptr, boolean take_or_release);
  public final static native int HJoyStickListener_GetEventType();
  public final static native long HJoyStickListener_CreateListenerManager(long jarg1, HJoyStickListener jarg1_);
  public final static native long HJoyStickListener_CreateListenerManagerSwigExplicitHJoyStickListener(long jarg1, HJoyStickListener jarg1_);
  public final static native int HJoyStickListener_OnJoyStickRotation(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HJoyStickListener_OnJoyStickRotationSwigExplicitHJoyStickListener(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HJoyStickListener_OnJoyStickTranslation(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HJoyStickListener_OnJoyStickTranslationSwigExplicitHJoyStickListener(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HJoyStickListener_OnJoyStickButton(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HJoyStickListener_OnJoyStickButtonSwigExplicitHJoyStickListener(long jarg1, HJoyStickListener jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long new_HJoyStickListener();
  public final static native void delete_HJoyStickListener(long jarg1);
  public final static native void HJoyStickListener_director_connect(HJoyStickListener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HJoyStickListener_change_ownership(HJoyStickListener obj, long cptr, boolean take_or_release);
  public final static native long new_HBaseModel__SWIG_0(String jarg1);
  public final static native long new_HBaseModel__SWIG_1();
  public final static native void delete_HBaseModel(long jarg1);
  public final static native void HBaseModel_Init(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_InitSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_Flush(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_FlushSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_GetFileLoadComplete(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetFileLoadComplete__SWIG_0(long jarg1, HBaseModel jarg1_, boolean jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HBaseModel_SetFileLoadComplete__SWIG_1(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_GetObjectCheck(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetObjectCheck(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_SetStaticModel(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_GetStaticModel(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_GetStaticModelOn(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetLMVModel(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_GetLMVModel(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_GetFirstFitComplete(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetFirstFitComplete(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native int HBaseModel_Read__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, boolean jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, boolean jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HBaseModel_Read__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, boolean jarg4);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, boolean jarg4);
  public final static native int HBaseModel_Read__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_Read__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_Read__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, boolean jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, boolean jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HBaseModel_Read__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, boolean jarg4);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, boolean jarg4);
  public final static native int HBaseModel_Read__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_Read__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_ReadSwigExplicitHBaseModel__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_WriteWithOptions__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseModel_WriteWithOptions__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithOptions__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_WriteWithOptions__SWIG_3(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_3(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseModel_WriteWithOptions__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithOptions__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_Write__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_Write__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_Write__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_Write__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_Write__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_Write__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_Write__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_Write__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_WriteSwigExplicitHBaseModel__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native long HBaseModel_GetHModelInfo(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetStreamFileTK(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetStreamFileTKSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetModelKey(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetModelKeySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetModelIncludeKey(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetModelIncludeKeySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetBBoxKey(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetBBoxKeySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_IsBRepGeometry(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_IsBRepGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetBRepGeometry(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_SetBRepGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_IsFEAGeometry(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_IsFEAGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetFEAGeometry(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_SetFEAGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_IsVectorGeometry(long jarg1, HBaseModel jarg1_);
  public final static native boolean HBaseModel_IsVectorGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetVectorGeometry(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_SetVectorGeometrySwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_CleanIncludes(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_CleanIncludesSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_DeleteIncludedSegments(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_DeleteIncludedSegmentsSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetBhvBehaviorManager(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetBhvBehaviorManagerSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_SetBhvBehaviorManager(long jarg1, HBaseModel jarg1_, long jarg2, HBhvBehaviorManager jarg2_);
  public final static native long HBaseModel_GetEventManager(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_Update__SWIG_0(long jarg1, HBaseModel jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseModel_Update__SWIG_1(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native void HBaseModel_Update__SWIG_2(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_MakeAnimationSnapshot(long jarg1, HBaseModel jarg1_, int jarg2);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_1(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_2(long jarg1, HBaseModel jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_3(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4, float jarg5);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_, float jarg4);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, long jarg3, HBaseView jarg3_);
  public final static native int HBaseModel_WriteWithAnimation__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native int HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native void HBaseModel_CreateIncludeSegment(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_CreateIncludeSegmentSwigExplicitHBaseModel(long jarg1, HBaseModel jarg1_);
  public final static native long HBaseModel_GetDispatchXML(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_ModelKey_set(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native long HBaseModel_m_ModelKey_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_ModelIncludeKey_set(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native long HBaseModel_m_ModelIncludeKey_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_BBoxKey_set(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native long HBaseModel_m_BBoxKey_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_pHFile_set(long jarg1, HBaseModel jarg1_, long jarg2, HStreamFileToolkit jarg2_);
  public final static native long HBaseModel_m_pHFile_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_pModelInfo_set(long jarg1, HBaseModel jarg1_, long jarg2, HModelInfo jarg2_);
  public final static native long HBaseModel_m_pModelInfo_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bBRepGeometry_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bBRepGeometry_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bFEAGeometry_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bFEAGeometry_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bVectorGeometry_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bVectorGeometry_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bNeedsStencilBuffer_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bNeedsStencilBuffer_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bFileLoadComplete_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bFileLoadComplete_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bObjectCheck_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bObjectCheck_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_bFirstFitComplete_set(long jarg1, HBaseModel jarg1_, boolean jarg2);
  public final static native boolean HBaseModel_m_bFirstFitComplete_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_pBhvBehaviorManager_set(long jarg1, HBaseModel jarg1_, long jarg2, HBhvBehaviorManager jarg2_);
  public final static native long HBaseModel_m_pBhvBehaviorManager_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_m_pEventManager_set(long jarg1, HBaseModel jarg1_, long jarg2, HEventManager jarg2_);
  public final static native long HBaseModel_m_pEventManager_get(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseModel_director_connect(HBaseModel obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HBaseModel_change_ownership(HBaseModel obj, long cptr, boolean take_or_release);
  public final static native int HRenderWireframe_get();
  public final static native int HRenderTriangulation_get();
  public final static native int HRenderSilhouette_get();
  public final static native int HRenderHiddenLine_get();
  public final static native int HRenderHiddenLineHOOPS_get();
  public final static native int HRenderHiddenLineFast_get();
  public final static native int HRenderFlat_get();
  public final static native int HRenderGouraud_get();
  public final static native int HRenderGouraudWithEdges_get();
  public final static native int HRenderPhong_get();
  public final static native int HRenderShaded_get();
  public final static native int HRenderShadedWithLines_get();
  public final static native int HRenderWireframeWithSilhouette_get();
  public final static native int HRenderShadedWireframe_get();
  public final static native int HRenderVertices_get();
  public final static native int HRenderShadedVertices_get();
  public final static native int HRenderGouraudWithLines_get();
  public final static native int HRenderLOD1_get();
  public final static native int HRenderLOD2_get();
  public final static native int HRenderBRepHiddenLine_get();
  public final static native int HRenderBRepHiddenLineFast_get();
  public final static native int HRenderBRepWireframe_get();
  public final static native int HRenderGoochShaded_get();
  public final static native int HRenderFakeHiddenLine_get();
  public final static native int HRenderUnknown_get();
  public final static native int UpDirectionX_get();
  public final static native long new_HBaseView__SWIG_0(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7, long jarg8, String jarg9);
  public final static native long new_HBaseView__SWIG_1(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7, long jarg8);
  public final static native long new_HBaseView__SWIG_2(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7);
  public final static native long new_HBaseView__SWIG_3(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6);
  public final static native long new_HBaseView__SWIG_4(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4, long jarg5);
  public final static native long new_HBaseView__SWIG_5(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long new_HBaseView__SWIG_6(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3);
  public final static native long new_HBaseView__SWIG_7(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native long new_HBaseView__SWIG_8(long jarg1, HBaseModel jarg1_);
  public final static native void HBaseView_RebindView__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7, long jarg8, int jarg9);
  public final static native void HBaseView_RebindView__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7, long jarg8);
  public final static native void HBaseView_RebindView__SWIG_2(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6, long jarg7);
  public final static native void HBaseView_RebindView__SWIG_3(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4, long jarg5, long jarg6);
  public final static native void HBaseView_RebindView__SWIG_4(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4, long jarg5);
  public final static native void HBaseView_RebindView__SWIG_5(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void HBaseView_RebindView__SWIG_6(long jarg1, HBaseView jarg1_, String jarg2, String jarg3);
  public final static native void HBaseView_RebindView__SWIG_7(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_RebindView__SWIG_8(long jarg1, HBaseView jarg1_);
  public final static native void delete_HBaseView(long jarg1);
  public final static native void HBaseView_Init(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_InitSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitWorld__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_FitWorldSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_FitWorld__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitWorldSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitWorldExact__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_FitWorldExact__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ZoomToExtents(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ZoomToExtentsSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ZoomToInitialCamera(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ZoomToInitialCameraSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitSegment(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_FitSelection__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HBaseView_FitSelection__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_FitSelection__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FitItemByPath(long jarg1, HBaseView jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native void HBaseView_RenderAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_InitAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetMarkupManager(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_HaveMarkupManager(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetMarkupManager(long jarg1, HBaseView jarg1_, long jarg2, HMarkupManager jarg2_);
  public final static native void HBaseView_RenderWireframe(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderSilhouette(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderHiddenLine(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderHiddenLineFast(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderFlat(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderGooch(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderGouraud(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderPhong(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderWireframeWithSilhouette(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderShadedWireframe(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderVertices(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderShadedVertices(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderFakeHiddenLine(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderBRepHiddenLine(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderBRepHiddenLineFast(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderBRepWireframe(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderShaded(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderShadedWithLines(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderGouraudWithLines(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderLOD1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RenderLOD2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RemoveTransforms(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_Update(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ForceUpdate(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ForceUpdateSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_FileInput__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HInputHandler jarg3_, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HBaseView_FileInputSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HInputHandler jarg3_, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HBaseView_FileInput__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HInputHandler jarg3_);
  public final static native int HBaseView_FileInputSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HInputHandler jarg3_);
  public final static native int HBaseView_FileInput__SWIG_2(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HInputHandler jarg3_, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HBaseView_FileInputSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HInputHandler jarg3_, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HBaseView_FileInput__SWIG_3(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HInputHandler jarg3_);
  public final static native int HBaseView_FileInputSwigExplicitHBaseView__SWIG_3(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HInputHandler jarg3_);
  public final static native int HBaseView_FileOutput__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HOutputHandler jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseView_FileOutputSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HOutputHandler jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseView_FileOutput__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HOutputHandler jarg3_);
  public final static native int HBaseView_FileOutputSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, long jarg3, HOutputHandler jarg3_);
  public final static native int HBaseView_FileOutput__SWIG_2(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HOutputHandler jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseView_FileOutputSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HOutputHandler jarg3_, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HBaseView_FileOutput__SWIG_3(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HOutputHandler jarg3_);
  public final static native int HBaseView_FileOutputSwigExplicitHBaseView__SWIG_3(long jarg1, HBaseView jarg1_, String jarg2, long jarg3, HOutputHandler jarg3_);
  public final static native String HBaseView_GetDriverPath(long jarg1, HBaseView jarg1_);
  public final static native String HBaseView_GetDriverType(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateHighlighting(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateHighlightingSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetSelection(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSelection(long jarg1, HBaseView jarg1_, long jarg2, HSelectionSet jarg2_);
  public final static native long HBaseView_GetModel(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetModelSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetModelKey(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetRenderMode(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetViewMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetViewMode__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native void HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native void HBaseView_SetViewMode__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetViewMode__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native boolean HBaseView_GetCPLineVisibility(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetCPFaceVisibility(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCPGeomVisibility__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_SetCPGeomVisibility__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetCuttingPlanesExist__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native boolean HBaseView_GetCuttingPlanesExist__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCuttingPlanesExist(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetCuttingPlanesVisibility(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCuttingPlanesVisibility(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long HBaseView_GetConstantFrameRateObject(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetConstantFrameRateObject(long jarg1, HBaseView jarg1_, long jarg2, HConstantFrameRate jarg2_);
  public final static native void HBaseView_SetEventCheckerCallback(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_SetKeyStateCallback(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetKeyStateCallback(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetEventCheckerCallback(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetOcclusionCullingMode__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3, int jarg4);
  public final static native void HBaseView_SetOcclusionCullingMode__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_SetOcclusionCullingMode__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetHandedness(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetHandedness__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetHandedness__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetHandednessFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetHandednessFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetFontSize__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native void HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native void HBaseView_SetFontSize__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetFontSizeFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetFontSizeFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native boolean HBaseView_GetBackplaneCulling(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetBackplaneCulling(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetProjMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetProjMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetDisplayListType(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDisplayListType(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native boolean HBaseView_GetDisplayListMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDisplayListMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetPolygonHandednessMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetPolygonHandednessMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native boolean HBaseView_GetLodMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetLodMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetSpritingMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSpritingMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetLodThreshold(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetLodThreshold(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long HBaseView_GetViewKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetViewKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetIncludeLinkKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetIncludeLinkKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetSceneKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSceneKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetOverwriteKey(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetShadowMapSegmentKey(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetLightsKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetLightsKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native float HBaseView_GetZoomLimit(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetZoomLimit__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native void HBaseView_SetZoomLimit__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetZoomLimitSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetWindowspaceKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetWindowspaceKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetConstructionKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetConstructionKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetBBoxGeometryKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetBBoxGeometryKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetCuttingPlanesKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCuttingPlanesKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetCuttingPlaneGeomKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCuttingPlaneGeomKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetIntersectPolylinesKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetIntersectPolylinesKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_GetProgressBarKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetProgressBarKey(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native int HBaseView_GetUpdateInterrupted(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetUpdateInterrupted(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native float HBaseView_GetIdleTime(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ResetIdleTime(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetQuickMovesMethod(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetDebugZBuffer(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDebugZBuffer(long jarg1, HBaseView jarg1_, long jarg2, HDebugZBuffer jarg2_);
  public final static native int HBaseView_GetAxisMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetAxisMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetAxisModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_OnSetAxisMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_OnSetAxisModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_UpdateAxisTriad(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_AdjustAxisWindow__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, long jarg3, HIntRectangle jarg3_);
  public final static native void HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, long jarg3, HIntRectangle jarg3_);
  public final static native void HBaseView_AdjustAxisWindow__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_AdjustAxisWindow__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_AdjustAxisWindowCallback(int jarg1, long jarg2, long jarg3);
  public final static native void HBaseView_AdjustWindowCallback(int jarg1, long jarg2, long jarg3);
  public final static native int HBaseView_GetShadowMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetShadowMode__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetShadowMode__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetReflectionPlane__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7, boolean jarg8, int jarg9);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7, boolean jarg8, int jarg9);
  public final static native void HBaseView_SetReflectionPlane__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native void HBaseView_SetReflectionPlane__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6, float jarg7);
  public final static native void HBaseView_SetReflectionPlane__SWIG_3(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_3(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5, float jarg6);
  public final static native void HBaseView_SetReflectionPlane__SWIG_4(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_4(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4, boolean jarg5);
  public final static native void HBaseView_SetReflectionPlane__SWIG_5(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_5(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3, boolean jarg4);
  public final static native void HBaseView_SetReflectionPlane__SWIG_6(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_6(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3);
  public final static native void HBaseView_SetReflectionPlane__SWIG_7(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_7(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long HBaseView_GetDefaultLightKey__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long HBaseView_GetDefaultLightKey__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetTransparentSelectionBoxMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetTransparentSelectionBoxMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_DeleteSelectionList__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_DeleteSelectionList__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RotateOnUpdate(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetWindowColor__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, boolean jarg3);
  public final static native void HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, boolean jarg3);
  public final static native void HBaseView_SetWindowColor__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetWindowColor__SWIG_2(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, boolean jarg4);
  public final static native void HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, boolean jarg4);
  public final static native void HBaseView_SetWindowColor__SWIG_3(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_3(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetWindowColorRange__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int jarg4, boolean jarg5);
  public final static native void HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int jarg4, boolean jarg5);
  public final static native void HBaseView_SetWindowColorRange__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HBaseView_SetWindowMaterial__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native void HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native void HBaseView_SetWindowMaterial__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetWindowColorFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetWindowColorFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_GetWindowColor__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_GetWindowColor__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_GetWindowColor__SWIG_2(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int[] jarg4);
  public final static native void HBaseView_GetWindowMaterial(long jarg1, HBaseView jarg1_, StringBuffer jarg2, StringBuffer jarg3);
  public final static native void HBaseView_SetOperator(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native void HBaseView_SetCurrentOperator(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HBaseView_GetOperator(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetCurrentOperator(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetAxisTriadKey(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetHideOverlappedText(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetHideOverlappedText(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetNavCube(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetSmoothTransition(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSmoothTransition(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetSmoothTransitionDuration(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_GetSmoothTransitionDuration(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_IsLightFollowCamera(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetLightFollowsCamera(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_MaxLights_get();
  public final static native void HBaseView_SetLightCount(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetLightCount(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_CameraPositionChanged__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_CameraPositionChanged__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_CameraPositionChanged__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_PrepareForCameraChange(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_PrepareForCameraChangeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCamera__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5, float jarg6, String jarg7);
  public final static native void HBaseView_SetCameraSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5, float jarg6, String jarg7);
  public final static native void HBaseView_SetInitialCamera(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5, float jarg6, String jarg7);
  public final static native void HBaseView_SetInitialCameraSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5, float jarg6, String jarg7);
  public final static native void HBaseView_GetCamera__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float[] jarg5, float[] jarg6, StringBuffer jarg7);
  public final static native void HBaseView_GetCameraSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float[] jarg5, float[] jarg6, StringBuffer jarg7);
  public final static native void HBaseView_SetCamera__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HBaseView_SetCameraSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HBaseView_GetCamera__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HBaseView_GetCameraSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HBaseView_SetCameraFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetCameraFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_InsertHSFData__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4, boolean jarg5);
  public final static native void HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4, boolean jarg5);
  public final static native void HBaseView_InsertHSFData__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native void HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native void HBaseView_InsertHSFDataFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_InsertHSFDataFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_EmitHSFData(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native void HBaseView_EmitHSFDataSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native void HBaseView_SetRenderMode__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, boolean jarg3);
  public final static native void HBaseView_SetRenderMode__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetRenderModeFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetRenderModeFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_EmitFlushMessage(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitFlushMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FlushFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_FlushFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_Flush__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_FlushSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_Flush__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_FlushSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetEmitMessageFunction__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, long jarg3);
  public final static native void HBaseView_SetEmitMessageFunction__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native boolean HBaseView_EmittingMessages(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetEmitMessageFunction(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetEmitMessageFunctionUserData(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitSelectMessage(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HBaseView_EmitSelectMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HBaseView_SelectFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SelectFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_EmitDeSelectAllMessage(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitDeSelectAllMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitDeleteSelectionListMessage(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitDeleteSelectionListMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DeleteSelectionListFromMessage(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DeleteSelectionListFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DeSelectAllFromMessage(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DeSelectAllFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitSetModellingMatrixMessage__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_EmitSetModellingMatrixMessage__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EmitSegment__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HBaseView_EmitSegment__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_EmitDeleteByKeyMessage(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_EmitDeleteByKeyMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_DeleteByKeyFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_DeleteByKeyFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetModellingMatrixFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native void HBaseView_SetModellingMatrixFromMessageSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native long HBaseView_GetSharedKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_StartSharedKey(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_StartSharedKeySwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_HAnimateScene_get();
  public final static native void HBaseView_Animate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void HBaseView_AnimateSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void HBaseView_Animate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native void HBaseView_AnimateSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native void HBaseView_Animate__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_AnimateSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_Animate__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_AnimateSwigExplicitHBaseView__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetGeometryChanged(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetGeometryChangedSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetSceneBoundingSet(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSceneBounding(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_InvalidateSceneBounding(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetFastMarkerDrawing(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetFastMarkerDrawing(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDoubleBuffering(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_ClearGeometryChanged(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ClearGeometryChangedSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GeometryChanged(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GeometryChangedSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_SetSignalNotify(long jarg1, HBaseView jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void HBaseView_UnSetSignalNotify(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HBaseView_SetColorInterpolation(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetColorIndexInterpolation__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_SetColorIndexInterpolation__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetColorIndexInterpolation__SWIG_0(long jarg1, HBaseView jarg1_, StringBuffer jarg2);
  public final static native boolean HBaseView_GetColorIndexInterpolation__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetFrameBufferEffectsOptions__SWIG_0(long jarg1, HBaseView jarg1_, StringBuffer jarg2, int[] jarg3);
  public final static native boolean HBaseView_GetFrameBufferEffectsOptions__SWIG_1(long jarg1, HBaseView jarg1_, StringBuffer jarg2);
  public final static native boolean HBaseView_GetFrameBufferEffectsOptions__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_Notify__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, long jarg3);
  public final static native void HBaseView_Notify__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_UpdateEvent__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native int HBaseView_UpdateEventSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native int HBaseView_UpdateEvent__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_UpdateEvent__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetUpdateRequested(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_RequestUpdate(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ClearUpdateRequest(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSuppressUpdate(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetSuppressUpdate(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSuppressUpdateTick(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetSuppressUpdateTick(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetViewUpdateMode__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, float jarg3);
  public final static native void HBaseView_SetViewUpdateMode__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetViewUpdateMode(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_UpdateTick(float jarg1, float jarg2, long jarg3);
  public final static native boolean HBaseView_StreamProgressCallback(long jarg1, long jarg2, long jarg3);
  public final static native void HBaseView_FlushProgressBar(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetUndoManager(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetEventManager(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetHObjectManager(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetDynamicHighlighting(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDynamicHighlighting(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_OnNoButtonDownAndMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnNoButtonDownAndMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDownAndMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDownAndMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDblClk(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDblClkSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnRButtonDownAndMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnRButtonDownAndMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMButtonDownAndMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMButtonDownAndMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLRButtonDownAndMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLRButtonDownAndMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDown(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonDownSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMouseMove(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMouseMoveSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonUp(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnLButtonUpSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMouseWheel(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnMouseWheelSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native boolean HBaseView_ComputeReasonableTarget(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native boolean HBaseView_ComputeReasonableTargetSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HBaseView_ComputeNewField(long jarg1, HBaseView jarg1_, float[] jarg2, float[] jarg3, long jarg4, HPoint jarg4_, long jarg5, HCamera jarg5_);
  public final static native int HBaseView_OnKeyDown(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnKeyDownSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnKeyUp(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseView_OnKeyUpSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HBaseView_SetShadowColor(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetShadowColorSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetShadowLightDirection__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetShadowLightDirection__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetShadowLightDirection__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native boolean HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native boolean HBaseView_GetShadowLightDirection__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetShadowIgnoresTransparency(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetShadowIgnoresTransparencySwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetShadowIgnoresTransparency(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetShadowIgnoresTransparencySwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_DoDynamicHighlighting(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_DoDynamicHighlightingSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetShadowResolution(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetShadowResolutionSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetShadowBlurring(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetShadowBlurringSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_InternalUpdate(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_InternalUpdateSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetShadowRegenerationMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetShadowRegenerationModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetShadowRegenerationToggle(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetShadowRegenerationToggleSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetCuttingPlaneRegenerationMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCuttingPlaneRegenerationMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetCuttingPlaneRegenerationModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetShadowRegenerationMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCameraChanged__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetCameraChanged__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetCameraChanged(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetCameraChangedSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetInvertMouseWheelZoom__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetInvertMouseWheelZoom__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetInvertMouseWheelZoom(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetInvertMouseWheelZoomSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetAxisManipulateOperator(long jarg1, HBaseView jarg1_, long jarg2, HOpCameraManipulate jarg2_);
  public final static native void HBaseView_SetAxisManipulateOperatorSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HOpCameraManipulate jarg2_);
  public final static native void HBaseView_SetVisibilitySelectionMode(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetVisibilitySelectionModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetVisibilitySelectionMode(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetVisibilitySelectionModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetRelatedSelectionLimit(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetRelatedSelectionLimitSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetRelatedSelectionLimit(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetRelatedSelectionLimitSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDetailSelection(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetDetailSelectionSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetDetailSelectionMode(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetDetailSelectionModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetRespectSelectionCulling(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetRespectSelectionCullingSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetRespectSelectionCulling(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetRespectSelectionCullingSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SmartFilterCircumcuboid(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native void HBaseView_SmartFilterCircumcuboidSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, String jarg2, String jarg3, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native int HBaseView_SetupHandlesEvent(long jarg1, HBaseView jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native int HBaseView_SetupHandlesEventSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native boolean HBaseView_GetHasObjects(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetHasObjectsSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetHasObjects(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetHasObjectsSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetHandleOperator(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native void HBaseView_SetHandleOperatorSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HBaseView_GetHandleOperator(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetHandleOperatorSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native float HBaseView_GetDefaultSelectionProximity(long jarg1, HBaseView jarg1_);
  public final static native float HBaseView_GetDefaultSelectionProximitySwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDefaultSelectionProximity(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native void HBaseView_SetDefaultSelectionProximitySwigExplicitHBaseView(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native boolean HBaseView_GetAllowInteractiveShadows(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetAllowInteractiveShadows(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetShadowRenderingMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetShadowRenderingMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native boolean HBaseView_GetAllowInteractiveCutGeometry(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetAllowInteractiveCutGeometry(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native int HBaseView_GetCutGeometryVisibility(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCutGeometryVisibility(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long HBaseView_GetWindowHandle(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetInitialCameraSet(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_ObjectMovedEvent(long jarg1, HBaseView jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HBaseView_ObjectMovedEventSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native void HBaseView_SetRecordCamera(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetRecordMode(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_InjectEvent(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HBaseView_SetForceFastHiddenLine(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetForceFastHiddenLine(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetTransparency__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native void HBaseView_SetTransparency__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native void HBaseView_SetLineAntialiasing(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetLineAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetTextAntialiasing(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetDepthOfField__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, float jarg3);
  public final static native void HBaseView_SetDepthOfField__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetDepthOfFieldRange__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3);
  public final static native void HBaseView_SetDepthOfFieldRange__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native void HBaseView_SetDepthOfFieldRange__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetTextAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetIsoDefault(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetIsoDefault(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetCullingThreshold(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetCullingThreshold(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetHardExtent(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetHardExtent(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_BeginShellSelection(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_EndShellSelection(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetHighlightSelection(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetViewAxis(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_GetViewAxis(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetDefaultHSRA(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetMaximumUpdateTime(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_GetMaximumUpdateTime(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetHighlightMode(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetHighlightModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetHighlightMode(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetHighlightModeSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_SetReferenceSelection(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetReferenceSelectionSwigExplicitHBaseView(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetKeyState(long jarg1, HBaseView jarg1_, int jarg2, int[] jarg3);
  public final static native void HBaseView_ResetKeyState(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetFastFitWorld(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetDetailedFitWorld(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetFastFitWorld(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetDetailedFitWorld(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_GetSceneExtents(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetLightScaling(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native void HBaseView_SetXYSizeOverride(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native int HBaseView_GetXSize(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetYSize(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetViewSelectionLevel(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetViewSelectionLevel(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void HBaseView_EnableTargetFrameRate__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void HBaseView_EnableTargetFrameRate__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4);
  public final static native void HBaseView_EnableTargetFrameRate__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3);
  public final static native void HBaseView_EnableTargetFrameRate__SWIG_3(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_EnableTargetFrameRate__SWIG_4(long jarg1, HBaseView jarg1_);
  public final static native float HBaseView_GetFramerate(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetFramerateMode(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetFramerateCullingThreshold(long jarg1, HBaseView jarg1_);
  public final static native int HBaseView_GetFramerateSteps(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_IsFramerateLodEnabled(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetFramerateMode__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, float jarg3, int jarg4, boolean jarg5, int jarg6, int jarg7);
  public final static native void HBaseView_SetFramerateMode__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, float jarg3, int jarg4, boolean jarg5, int jarg6);
  public final static native void HBaseView_SetFramerateMode__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2, float jarg3, int jarg4, boolean jarg5);
  public final static native void HBaseView_SetFramerateMode__SWIG_3(long jarg1, HBaseView jarg1_, int jarg2, float jarg3, int jarg4);
  public final static native void HBaseView_SetFramerateMode__SWIG_4(long jarg1, HBaseView jarg1_, int jarg2, float jarg3);
  public final static native void HBaseView_SetFramerateMode__SWIG_5(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native boolean HBaseView_IsFrameRateEnabled(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetViewActive(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_cleanupSimpList(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetAnnotationResize(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetAnnotationResize(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetFirstUpdate(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetDisplayHandlesOnDblClk(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_HasInitialView__SWIG_0(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_HasInitialView__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_ExhaustiveUpdate(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetUpdateNotFinished(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetUpdateNotFinished(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_SetMouseWheelSensitivity(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_GetMouseWheelSensitivity(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSplatRendering(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_GetSplatRendering(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSplatSize(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetSplatSize(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetSplatSymbol(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetSplatSymbol(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateFakeHLRColor(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_SetHardwareAntialiasing(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_GetHardwareAntialiasing(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_StaticForceUpdateRequest(long jarg1);
  public final static native void HBaseView_VisualizeBounding__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, long jarg3, int jarg4, long[] jarg5);
  public final static native void HBaseView_VisualizeBounding__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, long jarg3, int jarg4);
  public final static native void HBaseView_VisualizeBounding__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2, long jarg3);
  public final static native void HBaseView_VisualizeBounding__SWIG_3(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long HBaseView_GetFakeHLRColor(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetFakeHLRColor(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBaseView_FocusOnSelection__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_FocusOnSelection__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native boolean HBaseView_GetFocusOnSelection(long jarg1, HBaseView jarg1_);
  public final static native long HBaseView_GetTouchManager(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_FakeHLRStyle_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_FakeHLRStyle_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_FakeHLRSource_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_FakeHLRSource_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCPLineVisibility_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCPLineVisibility_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCPFaceVisibility_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCPFaceVisibility_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_CPMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_CPMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCuttingPlanesExist_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCuttingPlanesExist_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCuttingPlanesVisibility_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCuttingPlanesVisibility_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bSpritingAllowed_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bSpritingAllowed_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bAxisTriadTransparencyAllowed_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bAxisTriadTransparencyAllowed_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_AxisWindowSize_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_AxisWindowSize_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bForceFastHiddenLine_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bForceFastHiddenLine_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bLineAntialiasing_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bLineAntialiasing_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bTextAntialiasing_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bTextAntialiasing_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bBeginShellSelection_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bBeginShellSelection_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bDisplayHandlesOnDblClk_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bDisplayHandlesOnDblClk_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_has_initial_view_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_has_initial_view_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_TouchManager_set(long jarg1, HBaseView jarg1_, long jarg2, HTouchManager jarg2_);
  public final static native long HBaseView_m_TouchManager_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_HardwareAntialiasing_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_HardwareAntialiasing_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_IsoDefault_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_IsoDefault_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_HighlightMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_HighlightMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_DisplayListType_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_DisplayListType_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bGeometryChanged_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bGeometryChanged_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SceneBoundingMin_set(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseView_m_SceneBoundingMin_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SceneBoundingMax_set(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseView_m_SceneBoundingMax_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bSceneBoundingSet_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bSceneBoundingSet_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bFastFitWorld_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bFastFitWorld_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bDetailedFitWorld_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bDetailedFitWorld_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pHImCuttingGeometry_set(long jarg1, HBaseView jarg1_, long jarg2, HImCuttingGeometry jarg2_);
  public final static native long HBaseView_m_pHImCuttingGeometry_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pAntialiasing_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_pAntialiasing_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pMarkupManager_set(long jarg1, HBaseView jarg1_, long jarg2, HMarkupManager jarg2_);
  public final static native long HBaseView_m_pMarkupManager_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bAxisMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_bAxisMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bHideOverlappedText_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bHideOverlappedText_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bNavCube_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bNavCube_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bSmoothTransition_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bSmoothTransition_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SmoothTransitionDuration_set(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_m_SmoothTransitionDuration_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bLightFollowsCamera_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bLightFollowsCamera_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_WindowColorPercentage_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_WindowColorPercentage_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_FrontAxis_set(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseView_m_FrontAxis_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_TopAxis_set(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseView_m_TopAxis_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pModel_set(long jarg1, HBaseView jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native long HBaseView_m_pModel_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ViewKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_ViewKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SceneKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_SceneKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_OverwriteKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_OverwriteKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_BBoxGeometryKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_BBoxGeometryKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_WindowspaceKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_WindowspaceKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ConstructionKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_ConstructionKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_CuttingPlanesKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_CuttingPlanesKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_CuttingPlaneGeomKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_CuttingPlaneGeomKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_IntersectPolylinesKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_IntersectPolylinesKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_AxisTriadKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_AxisTriadKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ProgressBarKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_ProgressBarKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_InfoTextKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_InfoTextKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_lIncludeLinkKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_lIncludeLinkKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_LightsKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_LightsKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_RenderMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_RenderMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ViewMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_ViewMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pOperator_set(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HBaseView_m_pOperator_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pEvent_set(long jarg1, HBaseView jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HBaseView_m_pEvent_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pSelection_set(long jarg1, HBaseView jarg1_, long jarg2, HSelectionSet jarg2_);
  public final static native long HBaseView_m_pSelection_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pHighlight_set(long jarg1, HBaseView jarg1_, long jarg2, HSelectionSet jarg2_);
  public final static native long HBaseView_m_pHighlight_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pConstantFrameRate_set(long jarg1, HBaseView jarg1_, long jarg2, HConstantFrameRate jarg2_);
  public final static native long HBaseView_m_pConstantFrameRate_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ShadowMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_ShadowMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pSharedKey_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_pSharedKey_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_UpdateInterrupted_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_UpdateInterrupted_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_InUpdateInternal_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_InUpdateInternal_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pfEventChecker_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_pfEventChecker_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pfKeyState_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_pfKeyState_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_ViewUpdateMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_ViewUpdateMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bUpdateRequested_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bUpdateRequested_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pEventManager_set(long jarg1, HBaseView jarg1_, long jarg2, HEventManager jarg2_);
  public final static native long HBaseView_m_pEventManager_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pUndoManager_set(long jarg1, HBaseView jarg1_, long jarg2, HUndoManager jarg2_);
  public final static native long HBaseView_m_pUndoManager_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pObjectManager_set(long jarg1, HBaseView jarg1_, long jarg2, HObjectManager jarg2_);
  public final static native long HBaseView_m_pObjectManager_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pDebugZBuffer_set(long jarg1, HBaseView jarg1_, long jarg2, HDebugZBuffer jarg2_);
  public final static native long HBaseView_m_pDebugZBuffer_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bLButtonDown_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bLButtonDown_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bMouseMove_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bMouseMove_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pManipulateOperator_set(long jarg1, HBaseView jarg1_, long jarg2, HOpCameraManipulate jarg2_);
  public final static native long HBaseView_m_pManipulateOperator_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bShadowRegeneration_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bShadowRegeneration_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bShadowRegenerationToggle_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bShadowRegenerationToggle_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCuttingPlaneRegeneration_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCuttingPlaneRegeneration_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bCameraChanged_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bCameraChanged_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_IdleTime_set(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_m_IdleTime_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bFirstUpdate_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bFirstUpdate_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_pHandleOperator_set(long jarg1, HBaseView jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HBaseView_m_pHandleOperator_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bAllowInteractiveShadows_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bAllowInteractiveShadows_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bAllowInteractiveCutGeometry_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bAllowInteractiveCutGeometry_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_DefaultSelectionProximity_set(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_m_DefaultSelectionProximity_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_MaximumUpdateTime_set(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native float HBaseView_m_MaximumUpdateTime_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_InitialCamera_set(long jarg1, HBaseView jarg1_, long jarg2, HCamera jarg2_);
  public final static native long HBaseView_m_InitialCamera_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bInitialCameraSet_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bInitialCameraSet_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bRecordCamera_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bRecordCamera_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bTransparentSelectionBox_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bTransparentSelectionBox_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bInvertMouseWheelZoom_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bInvertMouseWheelZoom_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_AnnotationCookie_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_AnnotationCookie_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_AxisResizeCookie_set(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native long HBaseView_m_AxisResizeCookie_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_FramerateMode_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_FramerateMode_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_bSplatRendering_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_bSplatRendering_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SplatSize_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_SplatSize_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_SplatSymbol_set(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native int HBaseView_m_SplatSymbol_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_m_FocusedOnSelection_set(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native boolean HBaseView_m_FocusedOnSelection_get(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_ComputeShadowParams(long jarg1, HBaseView jarg1_, long jarg2, HPlane jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_AdjustShadowPlane(long jarg1, HBaseView jarg1_, long jarg2, HPlane jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_SetShadowParams__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPlane jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, String jarg5);
  public final static native void HBaseView_SetShadowParams__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPlane jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HBaseView_SetShadowParams__SWIG_2(long jarg1, HBaseView jarg1_, long jarg2, HPlane jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HBaseView_RefreshViewSize(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_QueryDeviceCapabilities(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateInternal__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, boolean jarg3);
  public final static native void HBaseView_UpdateInternal__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native void HBaseView_UpdateInternal__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetupLights(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_SetupLightsSwigExplicitHBaseView(long jarg1, HBaseView jarg1_);
  public final static native void HBaseView_director_connect(HBaseView obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HBaseView_change_ownership(HBaseView obj, long cptr, boolean take_or_release);
  public final static native long new_HMaterialLibrary();
  public final static native void delete_HMaterialLibrary(long jarg1);
  public final static native boolean HMaterialLibrary_RegisterMaterials__SWIG_0(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_RegisterMaterials__SWIG_1(long jarg1, HMaterialLibrary jarg1_, long jarg2);
  public final static native boolean HMaterialLibrary_IsValid(long jarg1, HMaterialLibrary jarg1_);
  public final static native boolean HMaterialLibrary_ApplyStyles(long jarg1, HMaterialLibrary jarg1_);
  public final static native String HMaterialLibrary_GetContainerSegment(long jarg1, HMaterialLibrary jarg1_);
  public final static native String HMaterialLibrary_GetMaterialList__SWIG_0(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2, int jarg3);
  public final static native String HMaterialLibrary_GetMaterialList__SWIG_1(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2);
  public final static native String HMaterialLibrary_GetMaterialList__SWIG_2(long jarg1, HMaterialLibrary jarg1_);
  public final static native boolean HMaterialLibrary_IsValidMaterial(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_ApplyMaterial(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_ReloadMaterial(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_CloneMaterial(long jarg1, HMaterialLibrary jarg1_, String jarg2, StringBuffer jarg3);
  public final static native boolean HMaterialLibrary_RenameMaterial(long jarg1, HMaterialLibrary jarg1_, String jarg2, String jarg3);
  public final static native boolean HMaterialLibrary_GetTweakablesCount(long jarg1, HMaterialLibrary jarg1_, String jarg2, int[] jarg3);
  public final static native boolean HMaterialLibrary_GetTweakableByIndex(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, StringBuffer jarg4, StringBuffer jarg5);
  public final static native boolean HMaterialLibrary_GetTweakableByName(long jarg1, HMaterialLibrary jarg1_, String jarg2, String jarg3, int[] jarg4, StringBuffer jarg5);
  public final static native int HMaterialLibrary_CountFromType(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_GetTweakableDefaults(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float[] jarg4);
  public final static native boolean HMaterialLibrary_Tweak__SWIG_0(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float[] jarg4);
  public final static native boolean HMaterialLibrary_Tweak__SWIG_1(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean HMaterialLibrary_Tweak__SWIG_2(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean HMaterialLibrary_Tweak__SWIG_3(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float jarg4, float jarg5);
  public final static native boolean HMaterialLibrary_Tweak__SWIG_4(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3, float jarg4);
  public final static native String HMaterialLibrary_GetEnvironmentList__SWIG_0(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2, int jarg3);
  public final static native String HMaterialLibrary_GetEnvironmentList__SWIG_1(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2);
  public final static native String HMaterialLibrary_GetEnvironmentList__SWIG_2(long jarg1, HMaterialLibrary jarg1_);
  public final static native boolean HMaterialLibrary_IsValidEnvironment(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_SetEnvironment(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_EnsureMaterialInitialized(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_EnsureEnvironmentInitialized(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native boolean HMaterialLibrary_FindReferencedMaterials(long jarg1, HMaterialLibrary jarg1_, long jarg2, StringBuffer jarg3, int jarg4);
  public final static native boolean HMaterialLibrary_InitWrite(long jarg1, HMaterialLibrary jarg1_, String jarg2, int[] jarg3);
  public final static native boolean HMaterialLibrary_InitRead(long jarg1, HMaterialLibrary jarg1_, int jarg2);
  public final static native int HMaterialLibrary_ParseBuffer(long jarg1, HMaterialLibrary jarg1_, String jarg2, int jarg3);
  public final static native String HMaterialLibrary_GetCurrentEnvironment__SWIG_0(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2, int jarg3);
  public final static native String HMaterialLibrary_GetCurrentEnvironment__SWIG_1(long jarg1, HMaterialLibrary jarg1_, StringBuffer jarg2);
  public final static native String HMaterialLibrary_GetCurrentEnvironment__SWIG_2(long jarg1, HMaterialLibrary jarg1_);
  public final static native boolean HMaterialLibrary_Compile(long jarg1, HMaterialLibrary jarg1_, String jarg2);
  public final static native int HMaterialLibrary_Read_Flags_Default_get();
  public final static native int HMaterialLibrary_Prefer_Embedded_get();
  public final static native int HMaterialLibrary_Prefer_Highest_Resolution_get();
  public final static native void HMaterialLibrary_SetReadFlags(long jarg1, HMaterialLibrary jarg1_, int jarg2);
  public final static native int HMaterialLibrary_GetReadFlags(long jarg1, HMaterialLibrary jarg1_);
  public final static native int HMaterialLibrary_Write_Flags_Default_get();
  public final static native int HMaterialLibrary_Embedded_get();
  public final static native void HMaterialLibrary_SetWriteFlags(long jarg1, HMaterialLibrary jarg1_, int jarg2);
  public final static native int HMaterialLibrary_GetWriteFlags(long jarg1, HMaterialLibrary jarg1_);
  public final static native long new_HTK_Material_Composite__SWIG_0(long jarg1, HMaterialLibrary jarg1_, long jarg2);
  public final static native long new_HTK_Material_Composite__SWIG_1(long jarg1, HMaterialLibrary jarg1_);
  public final static native int HTK_Material_Composite_Interpret(long jarg1, HTK_Material_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int HTK_Material_Composite_Execute(long jarg1, HTK_Material_Composite jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void delete_HTK_Material_Composite(long jarg1);
  public final static native long new_HTK_One_Material__SWIG_0();
  public final static native long new_HTK_One_Material__SWIG_1(long jarg1, HMaterialLibrary jarg1_);
  public final static native void delete_HTK_One_Material(long jarg1);
  public final static native int HTK_One_Material_Interpret(long jarg1, HTK_One_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_, long jarg3, HMaterialLibrary jarg3_, String jarg4);
  public final static native int HTK_One_Material_Execute(long jarg1, HTK_One_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_One_Material_Read(long jarg1, HTK_One_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int HTK_One_Material_Write(long jarg1, HTK_One_Material jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void HTK_One_Material_Reset(long jarg1, HTK_One_Material jarg1_);
  public final static native int HTK_One_Material_OMF_Environment_get();
  public final static native int HTK_One_Material_OMF_Instancee_get();
  public final static native int HTK_One_Material_OMF_Tweaks_get();
  public final static native int HTK_One_Material_OMF_Embedded_get();
  public final static native int HTK_One_Material_OMF_Height_Field_get();
  public final static native int HTK_One_Material_OMT_Float1_get();
  public final static native int HTK_One_Material_OMT_Float2_get();
  public final static native int HTK_One_Material_OMT_Float3_get();
  public final static native int HTK_One_Material_OMT_Float4_get();
  public final static native long new_HDB();
  public final static native void delete_HDB(long jarg1);
  public final static native void HDB_Init(long jarg1, HDB jarg1_);
  public final static native void HDB_InitSwigExplicitHDB(long jarg1, HDB jarg1_);
  public final static native long HDB_GetHDB();
  public final static native void HDB_IncrementInstanceCount();
  public final static native void HDB_DecrementInstanceCount();
  public final static native void HDB_SetInstanceBase(String jarg1);
  public final static native String HDB_GetInstanceBase();
  public final static native void HDB_SetDriverType(String jarg1);
  public final static native String HDB_GetDriverType();
  public final static native boolean HDB_GetCleanInclude();
  public final static native void HDB_SetCleanInclude(boolean jarg1);
  public final static native int HDB_GetInstanceCount();
  public final static native int HDB_GetUniqueID();
  public final static native void HDB_SetInstanceCount(int jarg1);
  public final static native long HDB_GetHImManager();
  public final static native long HDB_SetHImManager(long jarg1, HImManager jarg1_);
  public final static native long HDB_GetHIOManager();
  public final static native long HDB_SetHIOManager(long jarg1, HIOManager jarg1_);
  public final static native long HDB_GetMaterialLibrary();
  public final static native void HDB_SetMaterialLibrary(long jarg1, HMaterialLibrary jarg1_);
  public final static native long HDB_GetHTManager();
  public final static native long HDB_SetHTManager(long jarg1, HTManager jarg1_);
  public final static native long HDB_GetUniqueIncludeKey();
  public final static native long HDB_GetNextCookie();
  public final static native void HDB_ReportError__SWIG_0(String jarg1, int jarg2, int jarg3, int jarg4);
  public final static native void HDB_ReportError__SWIG_1(String jarg1, int jarg2, int jarg3);
  public final static native void HDB_ReportError__SWIG_2(String jarg1, int jarg2);
  public final static native void HDB_ReportError__SWIG_3(String jarg1);
  public final static native void HDB_EnableErrorManager();
  public final static native void HDB_DisableErrorManager();
  public final static native void HDB_SetOwnsSystem(boolean jarg1);
  public final static native boolean HDB_GetOwnsSystem();
  public final static native void HDB_SetIsolatedDrivers(boolean jarg1);
  public final static native boolean HDB_GetIsolatedDrivers();
  public final static native void HDB_Lock();
  public final static native void HDB_UnLock();
  public final static native boolean HDB_GetPublishExchangeLicenseSet();
  public final static native void HDB_SetPublishExchangeLicenseSet(boolean jarg1);
  public final static native boolean HDB_GetPublishInitialized();
  public final static native void HDB_SetPublishInitialized(boolean jarg1);
  public final static native void HDB_director_connect(HDB obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HDB_change_ownership(HDB obj, long cptr, boolean take_or_release);
  public final static native long new_HTouchInfo__SWIG_0(float jarg1, float jarg2, float jarg3, int jarg4, long jarg5, boolean jarg6);
  public final static native long new_HTouchInfo__SWIG_1(float jarg1, float jarg2, float jarg3, int jarg4, long jarg5);
  public final static native long new_HTouchInfo__SWIG_2();
  public final static native void HTouchInfo_Init__SWIG_0(long jarg1, HTouchInfo jarg1_, float jarg2, float jarg3, float jarg4, int jarg5, long jarg6, boolean jarg7);
  public final static native void HTouchInfo_Init__SWIG_1(long jarg1, HTouchInfo jarg1_, float jarg2, float jarg3, float jarg4, int jarg5, long jarg6);
  public final static native void HTouchInfo_Init__SWIG_2(long jarg1, HTouchInfo jarg1_, float jarg2, float jarg3, float jarg4, int jarg5);
  public final static native void HTouchInfo_Init__SWIG_3(long jarg1, HTouchInfo jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HTouchInfo_Init__SWIG_4(long jarg1, HTouchInfo jarg1_, float jarg2, float jarg3);
  public final static native void HTouchInfo_Init__SWIG_5(long jarg1, HTouchInfo jarg1_, float jarg2);
  public final static native void HTouchInfo_Init__SWIG_6(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_x_set(long jarg1, HTouchInfo jarg1_, float jarg2);
  public final static native float HTouchInfo_m_x_get(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_y_set(long jarg1, HTouchInfo jarg1_, float jarg2);
  public final static native float HTouchInfo_m_y_get(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_timestamp_set(long jarg1, HTouchInfo jarg1_, float jarg2);
  public final static native float HTouchInfo_m_timestamp_get(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_taps_set(long jarg1, HTouchInfo jarg1_, int jarg2);
  public final static native int HTouchInfo_m_taps_get(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_bActive_set(long jarg1, HTouchInfo jarg1_, boolean jarg2);
  public final static native boolean HTouchInfo_m_bActive_get(long jarg1, HTouchInfo jarg1_);
  public final static native void HTouchInfo_m_id_set(long jarg1, HTouchInfo jarg1_, long jarg2);
  public final static native long HTouchInfo_m_id_get(long jarg1, HTouchInfo jarg1_);
  public final static native void delete_HTouchInfo(long jarg1);
  public final static native long new_HTouchManager();
  public final static native void delete_HTouchManager(long jarg1);
  public final static native long HTouchManager_AddTouch(long jarg1, HTouchManager jarg1_, float jarg2, float jarg3, float jarg4, int jarg5, long jarg6);
  public final static native void HTouchManager_ClearTouchActivity(long jarg1, HTouchManager jarg1_);
  public final static native void HTouchManager_ClearTouches(long jarg1, HTouchManager jarg1_);
  public final static native boolean HTouchManager_RemoveTouch(long jarg1, HTouchManager jarg1_, long jarg2);
  public final static native int HTouchManager_GetActiveTouchCount(long jarg1, HTouchManager jarg1_);
  public final static native int HTouchManager_GetTouchCount(long jarg1, HTouchManager jarg1_);
  public final static native long HTouchManager_GetTouch__SWIG_0(long jarg1, HTouchManager jarg1_, int jarg2, boolean jarg3);
  public final static native long HTouchManager_GetTouch__SWIG_1(long jarg1, HTouchManager jarg1_, int jarg2);
  public final static native long new_HEventInfo(long jarg1, HBaseView jarg1_);
  public final static native int MVO_CONTROL_get();
  public final static native int MVO_SHIFT_get();
  public final static native int MVO_ALT_get();
  public final static native int MVO_LBUTTON_get();
  public final static native int MVO_MBUTTON_get();
  public final static native int MVO_RBUTTON_get();
  public final static native int MVO_RIGHT_CONTROL_get();
  public final static native int MVO_RIGHT_SHIFT_get();
  public final static native int MVO_RIGHT_ALT_get();
  public final static native int MVO_LEFT_CONTROL_get();
  public final static native int MVO_LEFT_SHIFT_get();
  public final static native int MVO_LEFT_ALT_get();
  public final static native int MVO_LEFT_ARROW_get();
  public final static native int MVO_UP_ARROW_get();
  public final static native int MVO_RIGHT_ARROW_get();
  public final static native int MVO_DOWN_ARROW_get();
  public final static native int MVO_JOYSTICK_BUTTON_1_get();
  public final static native int MVO_JOYSTICK_BUTTON_2_get();
  public final static native int MVO_JOYSTICK_BUTTON_3_get();
  public final static native int MVO_JOYSTICK_BUTTON_4_get();
  public final static native int MVO_JOYSTICK_BUTTON_5_get();
  public final static native int MVO_JOYSTICK_BUTTON_6_get();
  public final static native int MVO_JOYSTICK_BUTTON_7_get();
  public final static native int MVO_JOYSTICK_BUTTON_8_get();
  public final static native int HEventInfo_MAX_TOUCHES_get();
  public final static native boolean HEventInfo_Control(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_Shift(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_Alt(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_LeftAlt(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_LeftControl(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_LeftShift(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_RightAlt(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_RightControl(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_RightShift(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_LButton(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_MButton(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_RButton(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_LeftArrow(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_UpArrow(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_RightArrow(long jarg1, HEventInfo jarg1_);
  public final static native boolean HEventInfo_DownArrow(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetView(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetMousePixelPos(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetMouseWindowPos(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetMouseWorldPos(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetMouseViewpointPos(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetJoystickRotation(long jarg1, HEventInfo jarg1_);
  public final static native long HEventInfo_GetJoystickTranslation(long jarg1, HEventInfo jarg1_);
  public final static native int HEventInfo_GetChar(long jarg1, HEventInfo jarg1_);
  public final static native int HEventInfo_GetCharRepCount(long jarg1, HEventInfo jarg1_);
  public final static native int HEventInfo_GetTimerId(long jarg1, HEventInfo jarg1_);
  public final static native int HEventInfo_GetFlags(long jarg1, HEventInfo jarg1_);
  public final static native void HEventInfo_SetType(long jarg1, HEventInfo jarg1_, int jarg2);
  public final static native int HEventInfo_GetEventType(long jarg1, HEventInfo jarg1_);
  public final static native void HEventInfo_SetPoint(long jarg1, HEventInfo jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void HEventInfo_SetPixelPos(long jarg1, HEventInfo jarg1_, int jarg2, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HEventInfo_SetWindowPos(long jarg1, HEventInfo jarg1_, int jarg2, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HEventInfo_SetWorldPos(long jarg1, HEventInfo jarg1_, int jarg2, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HEventInfo_SetViewpointPos(long jarg1, HEventInfo jarg1_, int jarg2, long jarg3, HPoint jarg3_, int jarg4);
  public final static native void HEventInfo_SetKey(long jarg1, HEventInfo jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void HEventInfo_SetTimer(long jarg1, HEventInfo jarg1_, int jarg2, int jarg3);
  public final static native void HEventInfo_SetMouseWheelDelta(long jarg1, HEventInfo jarg1_, int jarg2);
  public final static native void HEventInfo_SetFlags(long jarg1, HEventInfo jarg1_, int jarg2);
  public final static native int HEventInfo_GetMouseWheelDelta(long jarg1, HEventInfo jarg1_);
  public final static native void delete_HEventInfo(long jarg1);
  public final static native double EPSILON_get();
  public final static native void HBaseOperator_m_bOpStarted_set(long jarg1, HBaseOperator jarg1_, boolean jarg2);
  public final static native boolean HBaseOperator_m_bOpStarted_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_doRepeat_set(long jarg1, HBaseOperator jarg1_, int jarg2);
  public final static native int HBaseOperator_m_doRepeat_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_doCapture_set(long jarg1, HBaseOperator jarg1_, int jarg2);
  public final static native int HBaseOperator_m_doCapture_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_ptFirst_set(long jarg1, HBaseOperator jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseOperator_m_ptFirst_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_ptNew_set(long jarg1, HBaseOperator jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseOperator_m_ptNew_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_pView_set(long jarg1, HBaseOperator jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HBaseOperator_m_pView_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_bMapTouchesToMouseEvents_set(long jarg1, HBaseOperator jarg1_, boolean jarg2);
  public final static native boolean HBaseOperator_m_bMapTouchesToMouseEvents_get(long jarg1, HBaseOperator jarg1_);
  public final static native boolean HBaseOperator_IsSpecialKey(long jarg1, HBaseOperator jarg1_, long jarg2);
  public final static native void HBaseOperator_m_TempShadowMode_set(long jarg1, HBaseOperator jarg1_, int jarg2);
  public final static native int HBaseOperator_m_TempShadowMode_get(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_m_TempCutGeometryVisibility_set(long jarg1, HBaseOperator jarg1_, int jarg2);
  public final static native int HBaseOperator_m_TempCutGeometryVisibility_get(long jarg1, HBaseOperator jarg1_);
  public final static native int HBaseOperator_Repeat(long jarg1, HBaseOperator jarg1_);
  public final static native int HBaseOperator_Capture(long jarg1, HBaseOperator jarg1_);
  public final static native long HBaseOperator_Clone(long jarg1, HBaseOperator jarg1_);
  public final static native long HBaseOperator_CloneSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_SetFirstPoint(long jarg1, HBaseOperator jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseOperator_GetFirstPoint(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_SetNewPoint(long jarg1, HBaseOperator jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBaseOperator_GetNewPoint(long jarg1, HBaseOperator jarg1_);
  public final static native long HBaseOperator_GetView(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_SetView(long jarg1, HBaseOperator jarg1_, long jarg2, HBaseView jarg2_);
  public final static native boolean HBaseOperator_OperatorStarted(long jarg1, HBaseOperator jarg1_);
  public final static native boolean HBaseOperator_OperatorStartedSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_);
  public final static native void HBaseOperator_SetOperatorStarted(long jarg1, HBaseOperator jarg1_, boolean jarg2);
  public final static native void HBaseOperator_SetMapTouchesToMouseEvents(long jarg1, HBaseOperator jarg1_, boolean jarg2);
  public final static native long new_HBaseOperator__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HBaseOperator__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HBaseOperator__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HBaseOperator(long jarg1);
  public final static native int HBaseOperator_OnMouseMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMouseMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native String HBaseOperator_GetName(long jarg1, HBaseOperator jarg1_);
  public final static native String HBaseOperator_GetNameSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_);
  public final static native int HBaseOperator_OnLButtonDown(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonDownSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonUp(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonUpSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonDblClk(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonDblClkSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonDownAndMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLButtonDownAndMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDown(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDownSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonUp(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonUpSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDblClk(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDblClkSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDownAndMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMButtonDownAndMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDown(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDownSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonUp(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonUpSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDblClk(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDblClkSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDownAndMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnRButtonDownAndMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLRButtonDownAndMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnLRButtonDownAndMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnNoButtonDownAndMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnNoButtonDownAndMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTimer(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTimerSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnKeyDown(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnKeyDownSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnKeyUp(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnKeyUpSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMouseWheel(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnMouseWheelSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesDown(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesDownSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesMove(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesMoveSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesUp(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HBaseOperator_OnTouchesUpSwigExplicitHBaseOperator(long jarg1, HBaseOperator jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HBaseOperator_director_connect(HBaseOperator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HBaseOperator_change_ownership(HBaseOperator obj, long cptr, boolean take_or_release);
  public final static native long new_FaceWithNormalInfo();
  public final static native void FaceWithNormalInfo_nindex_set(long jarg1, FaceWithNormalInfo jarg1_, int jarg2);
  public final static native int FaceWithNormalInfo_nindex_get(long jarg1, FaceWithNormalInfo jarg1_);
  public final static native void FaceWithNormalInfo_nextindex_set(long jarg1, FaceWithNormalInfo jarg1_, int jarg2);
  public final static native int FaceWithNormalInfo_nextindex_get(long jarg1, FaceWithNormalInfo jarg1_);
  public final static native void FaceWithNormalInfo_tcindex_set(long jarg1, FaceWithNormalInfo jarg1_, int jarg2);
  public final static native int FaceWithNormalInfo_tcindex_get(long jarg1, FaceWithNormalInfo jarg1_);
  public final static native void delete_FaceWithNormalInfo(long jarg1);
  public final static native long new_ShellToRegionMapper();
  public final static native void ShellToRegionMapper_AddRegion__SWIG_0(long jarg1, ShellToRegionMapper jarg1_, long jarg2, long jarg3, int jarg4, boolean jarg5);
  public final static native void ShellToRegionMapper_AddRegion__SWIG_1(long jarg1, ShellToRegionMapper jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long ShellToRegionMapper_GetOriginalShell(long jarg1, ShellToRegionMapper jarg1_, long jarg2, int jarg3);
  public final static native int ShellToRegionMapper_GetRegionsFromOriginalShell(long jarg1, ShellToRegionMapper jarg1_, long jarg2, long jarg3, int[] jarg4);
  public final static native void ShellToRegionMapper_BuildSegmentTreeRecursive(long jarg1, ShellToRegionMapper jarg1_, long jarg2, long jarg3);
  public final static native void ShellToRegionMapper_MapSegmentTree(long jarg1, ShellToRegionMapper jarg1_, long jarg2);
  public final static native void ShellToRegionMapper_AddSegmentMapping(long jarg1, ShellToRegionMapper jarg1_, long jarg2, long jarg3);
  public final static native void ShellToRegionMapper_m_RegionToShellHash_set(long jarg1, ShellToRegionMapper jarg1_, long jarg2);
  public final static native long ShellToRegionMapper_m_RegionToShellHash_get(long jarg1, ShellToRegionMapper jarg1_);
  public final static native void ShellToRegionMapper_m_ShellToRegionHash_set(long jarg1, ShellToRegionMapper jarg1_, long jarg2);
  public final static native long ShellToRegionMapper_m_ShellToRegionHash_get(long jarg1, ShellToRegionMapper jarg1_);
  public final static native void ShellToRegionMapper_m_ShellToSegmentHash_set(long jarg1, ShellToRegionMapper jarg1_, long jarg2);
  public final static native long ShellToRegionMapper_m_ShellToSegmentHash_get(long jarg1, ShellToRegionMapper jarg1_);
  public final static native void delete_ShellToRegionMapper(long jarg1);
  public final static native long new_HShellEdge__SWIG_0(int jarg1, int jarg2);
  public final static native long new_HShellEdge__SWIG_1(int jarg1);
  public final static native long new_HShellEdge__SWIG_2();
  public final static native int HShellEdge_GetFirst(long jarg1, HShellEdge jarg1_);
  public final static native int HShellEdge_GetSecond(long jarg1, HShellEdge jarg1_);
  public final static native void HShellEdge_Set(long jarg1, HShellEdge jarg1_, int jarg2, int jarg3);
  public final static native void delete_HShellEdge(long jarg1);
  public final static native long new_HShellFace(long jarg1, HShellObject jarg1_, int jarg2);
  public final static native int HShellFace_GetPointCount(long jarg1, HShellFace jarg1_);
  public final static native int HShellFace_GetEdgeCount(long jarg1, HShellFace jarg1_);
  public final static native long HShellFace_GetEdge(long jarg1, HShellFace jarg1_, int jarg2);
  public final static native void HShellFace_OpenEdge(long jarg1, HShellFace jarg1_, int jarg2);
  public final static native void HShellFace_CloseEdge(long jarg1, HShellFace jarg1_);
  public final static native void delete_HShellFace(long jarg1);
  public final static native long new_HShellRegion(long jarg1, HShellObject jarg1_, int jarg2);
  public final static native void delete_HShellRegion(long jarg1);
  public final static native int HShellRegion_GetFaceCount(long jarg1, HShellRegion jarg1_);
  public final static native long HShellRegion_GetFace(long jarg1, HShellRegion jarg1_, int jarg2);
  public final static native long new_HShellObject__SWIG_0(long jarg1);
  public final static native long new_HShellObject__SWIG_1(long jarg1, HShellObject jarg1_);
  public final static native void delete_HShellObject(long jarg1);
  public final static native long HShellObject_GetRegion(long jarg1, HShellObject jarg1_, int jarg2);
  public final static native int HShellObject_GetFaceCount(long jarg1, HShellObject jarg1_);
  public final static native int HShellObject_GetFaceFlistIndex(long jarg1, HShellObject jarg1_, int jarg2);
  public final static native long HShellObject_GetKey(long jarg1, HShellObject jarg1_);
  public final static native int HShellObject_GetFlistLen(long jarg1, HShellObject jarg1_);
  public final static native void HShellObject_GetFlist(long jarg1, HShellObject jarg1_, int[] jarg2);
  public final static native long new_HShell();
  public final static native void delete_HShell(long jarg1);
  public final static native void HShell_point_list_len_set(long jarg1, HShell jarg1_, int jarg2);
  public final static native int HShell_point_list_len_get(long jarg1, HShell jarg1_);
  public final static native void HShell_face_list_len_set(long jarg1, HShell jarg1_, int jarg2);
  public final static native int HShell_face_list_len_get(long jarg1, HShell jarg1_);
  public final static native void HShell_face_count_set(long jarg1, HShell jarg1_, int jarg2);
  public final static native int HShell_face_count_get(long jarg1, HShell jarg1_);
  public final static native void HShell_region_count_set(long jarg1, HShell jarg1_, int jarg2);
  public final static native int HShell_region_count_get(long jarg1, HShell jarg1_);
  public final static native void HShell_get_point_list(long jarg1, HShell jarg1_, long[] jarg2, int jarg3);
  public final static native void HShell_get_normal_list(long jarg1, HShell jarg1_, long[] jarg2, int jarg3);
  public final static native void HShell_get_face_list(long jarg1, HShell jarg1_, int[] jarg2, int jarg3);
  public final static native void HShell_get_region_list(long jarg1, HShell jarg1_, int[] jarg2, int jarg3);
  public final static native long new_HShellWrapper__SWIG_0(long jarg1);
  public final static native long new_HShellWrapper__SWIG_1();
  public final static native void delete_HShellWrapper(long jarg1);
  public final static native long HShellWrapper_Insert__SWIG_0(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long jarg6);
  public final static native long HShellWrapper_Insert__SWIG_1(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5);
  public final static native long HShellWrapper_Show(long jarg1, HShellWrapper jarg1_, int[] jarg2, long jarg3, int[] jarg4, long jarg5);
  public final static native long HShellWrapper_GetKey(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_TransformPoints(long jarg1, HShellWrapper jarg1_, float[] jarg2);
  public final static native long HShellWrapper_Optimize(long jarg1, HShellWrapper jarg1_, StringBuffer jarg2);
  public final static native long HShellWrapper_Optimize2(long jarg1, HShellWrapper jarg1_, StringBuffer jarg2);
  public final static native void HShellWrapper_MakePolygon(long jarg1, HShellWrapper jarg1_, int jarg2, int[] jarg3, long[] jarg4);
  public final static native void HShellWrapper_OpenOwnerSegment(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_BeginFaceIteration(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_EndFaceIteration(long jarg1, HShellWrapper jarg1_);
  public final static native int HShellWrapper_GetFace(long jarg1, HShellWrapper jarg1_, int jarg2, long jarg3);
  public final static native int HShellWrapper_NextFace(long jarg1, HShellWrapper jarg1_, long jarg2);
  public final static native void HShellWrapper_CalculateFaceCenter(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, long jarg4, HPoint jarg4_);
  public final static native void HShellWrapper_AddPoints__SWIG_0(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3, long[] jarg4, long[] jarg5, boolean jarg6);
  public final static native void HShellWrapper_AddPoints__SWIG_1(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3, long[] jarg4, long[] jarg5);
  public final static native void HShellWrapper_AddPoints__SWIG_2(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3, long[] jarg4);
  public final static native void HShellWrapper_AddPoints__SWIG_3(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_AddFace__SWIG_0(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, int jarg4, long[] jarg5, long[] jarg6, boolean jarg7);
  public final static native void HShellWrapper_AddFace__SWIG_1(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, int jarg4, long[] jarg5, long[] jarg6);
  public final static native void HShellWrapper_AddFace__SWIG_2(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, int jarg4, long[] jarg5);
  public final static native void HShellWrapper_AddFaceDirect__SWIG_0(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, boolean jarg4, boolean jarg5);
  public final static native void HShellWrapper_AddFaceDirect__SWIG_1(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3, boolean jarg4);
  public final static native void HShellWrapper_AddFaceDirect__SWIG_2(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3);
  public final static native void HShellWrapper_AddFace__SWIG_3(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3, boolean jarg4);
  public final static native void HShellWrapper_AddFace__SWIG_4(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_Set(long jarg1, HShellWrapper jarg1_, long jarg2);
  public final static native void HShellWrapper_Regenerate__SWIG_0(long jarg1, HShellWrapper jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native void HShellWrapper_Regenerate__SWIG_1(long jarg1, HShellWrapper jarg1_, long jarg2, boolean jarg3);
  public final static native void HShellWrapper_Regenerate__SWIG_2(long jarg1, HShellWrapper jarg1_, long jarg2);
  public final static native void HShellWrapper_Regenerate__SWIG_3(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_GrowArrays(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_GrowPointArray__SWIG_0(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native void HShellWrapper_GrowPointArray__SWIG_1(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3);
  public final static native void HShellWrapper_GrowPointArray__SWIG_2(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_GrowPointArray2__SWIG_0(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3, boolean jarg4, boolean jarg5, boolean jarg6);
  public final static native void HShellWrapper_GrowPointArray2__SWIG_1(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native void HShellWrapper_GrowPointArray2__SWIG_2(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native void HShellWrapper_GrowPointArray2__SWIG_3(long jarg1, HShellWrapper jarg1_, int jarg2, boolean jarg3);
  public final static native void HShellWrapper_GrowPointArray2__SWIG_4(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_AddNextFaceWithDistinctNormals(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int[] jarg4, int[] jarg5, int jarg6);
  public final static native void HShellWrapper_AddNextFaceWithDistinctNormalsAndTexture(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, int[] jarg5, int[] jarg6, int[] jarg7, int jarg8);
  public final static native void HShellWrapper_AddNextFaceWithDistinctNormalsAndColor(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int[] jarg4, int[] jarg5, long jarg6, HPoint jarg6_, int jarg7);
  public final static native void HShellWrapper_BeginAddFaces(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_EndAddFaces(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_GrowFaceArray(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_SubdivideOneQuadFace(long jarg1, HShellWrapper jarg1_, int[] jarg2, long jarg3, HShellWrapper jarg3_, boolean jarg4, int[] jarg5, int[] jarg6);
  public final static native void HShellWrapper_SubdivideOneQuadFace2(long jarg1, HShellWrapper jarg1_, int[] jarg2);
  public final static native void HShellWrapper_SubdivideQuadFaces(long jarg1, HShellWrapper jarg1_, boolean jarg2);
  public final static native void HShellWrapper_SetVertexColors__SWIG_0(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HShellWrapper_ShowVertexColors__SWIG_0(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HShellWrapper_SetVertexColors__SWIG_1(long jarg1, HShellWrapper jarg1_, float[] jarg2);
  public final static native void HShellWrapper_ShowVertexColors__SWIG_1(long jarg1, HShellWrapper jarg1_, float[] jarg2);
  public final static native void HShellWrapper_MakeLod(long jarg1, HShellWrapper jarg1_, int jarg2, int jarg3);
  public final static native void HShellWrapper_FindExtents(long jarg1, HShellWrapper jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_0(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, float[] jarg7, int jarg8, long[] jarg9, boolean jarg10);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_1(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, float[] jarg7, int jarg8, long[] jarg9);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_2(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, float[] jarg7, int jarg8);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_3(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, float[] jarg7);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_4(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_5(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5);
  public final static native void HShellWrapper_ReplaceWithParameters__SWIG_6(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, float[] jarg7, int jarg8, boolean jarg9);
  public final static native void HShellWrapper_Replace__SWIG_0(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6, boolean jarg7);
  public final static native void HShellWrapper_Replace__SWIG_1(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5, long[] jarg6);
  public final static native void HShellWrapper_Replace__SWIG_2(long jarg1, HShellWrapper jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5);
  public final static native void HShellWrapper_SetFaceRegion(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native void HShellWrapper_SetEmptyShell(long jarg1, HShellWrapper jarg1_, long jarg2, boolean jarg3);
  public final static native void HShellWrapper_m_plen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_plen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_flen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_flen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_Key_set(long jarg1, HShellWrapper jarg1_, long jarg2);
  public final static native long HShellWrapper_m_Key_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_facepointer_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_facepointer_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_totalflen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_totalflen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_totalplen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_totalplen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_totalnumfaceslen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_totalnumfaceslen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_m_numfaceslen_set(long jarg1, HShellWrapper jarg1_, int jarg2);
  public final static native int HShellWrapper_m_numfaceslen_get(long jarg1, HShellWrapper jarg1_);
  public final static native void HShellWrapper_get_m_Points(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_VParams(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_VColors(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_VNormals(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_Flist(long jarg1, HShellWrapper jarg1_, int[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_faceregion(long jarg1, HShellWrapper jarg1_, float[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_faceindirect(long jarg1, HShellWrapper jarg1_, float[] jarg2, int jarg3);
  public final static native void HShellWrapper_get_m_FNArray(long jarg1, HShellWrapper jarg1_, long[] jarg2, int jarg3);
  public final static native void HCamera_valid_set(long jarg1, HCamera jarg1_, boolean jarg2);
  public final static native boolean HCamera_valid_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_position_set(long jarg1, HCamera jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HCamera_position_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_target_set(long jarg1, HCamera jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HCamera_target_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_up_vector_set(long jarg1, HCamera jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HCamera_up_vector_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_field_width_set(long jarg1, HCamera jarg1_, float jarg2);
  public final static native float HCamera_field_width_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_field_height_set(long jarg1, HCamera jarg1_, float jarg2);
  public final static native float HCamera_field_height_get(long jarg1, HCamera jarg1_);
  public final static native void HCamera_projection_set(long jarg1, HCamera jarg1_, String jarg2);
  public final static native String HCamera_projection_get(long jarg1, HCamera jarg1_);
  public final static native long new_HCamera();
  public final static native void HCamera_InvalidateCamera(long jarg1, HCamera jarg1_);
  public final static native boolean HCamera_CameraDifferent(long jarg1, HCamera jarg1_, long jarg2, HCamera jarg2_);
  public final static native boolean HCamera_CameraDifferentByAngle(long jarg1, HCamera jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HCamera_GetFromView(long jarg1, HCamera jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void HCamera_Show(long jarg1, HCamera jarg1_);
  public final static native void HCamera_Set(long jarg1, HCamera jarg1_);
  public final static native void delete_HCamera(long jarg1);
  public final static native void HBSurfVertex_x_set(long jarg1, HBSurfVertex jarg1_, double jarg2);
  public final static native double HBSurfVertex_x_get(long jarg1, HBSurfVertex jarg1_);
  public final static native void HBSurfVertex_y_set(long jarg1, HBSurfVertex jarg1_, double jarg2);
  public final static native double HBSurfVertex_y_get(long jarg1, HBSurfVertex jarg1_);
  public final static native void HBSurfVertex_z_set(long jarg1, HBSurfVertex jarg1_, double jarg2);
  public final static native double HBSurfVertex_z_get(long jarg1, HBSurfVertex jarg1_);
  public final static native void HBSurfVertex_w_set(long jarg1, HBSurfVertex jarg1_, double jarg2);
  public final static native double HBSurfVertex_w_get(long jarg1, HBSurfVertex jarg1_);
  public final static native void HBSurfVertex_Set(long jarg1, HBSurfVertex jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native long new_HBSurfVertex();
  public final static native void delete_HBSurfVertex(long jarg1);
  public final static native void HPolyline_m_PointCount_set(long jarg1, HPolyline jarg1_, int jarg2);
  public final static native int HPolyline_m_PointCount_get(long jarg1, HPolyline jarg1_);
  public final static native void HPolyline_m_pNextPolyline_set(long jarg1, HPolyline jarg1_, long jarg2, HPolyline jarg2_);
  public final static native long HPolyline_m_pNextPolyline_get(long jarg1, HPolyline jarg1_);
  public final static native void HPolyline_get_m_pHPointArray(long jarg1, HPolyline jarg1_, long[] jarg2, int jarg3);
  public final static native long new_HPolyline();
  public final static native void delete_HPolyline(long jarg1);
  public final static native long new_HShellVertexData();
  public final static native void delete_HShellVertexData(long jarg1);
  public final static native void HShellVertexData_SetKey(long jarg1, HShellVertexData jarg1_, long jarg2);
  public final static native StringBuffer HShellVertexData_GetType(long jarg1, HShellVertexData jarg1_);
  public final static native int HShellVertexData_GetVertexCount(long jarg1, HShellVertexData jarg1_);
  public final static native long HShellVertexData_GetKey(long jarg1, HShellVertexData jarg1_);
  public final static native int HShellVertexData_GetFIndexDataSize(long jarg1, HShellVertexData jarg1_);
  public final static native void HShellVertexData_GetFIndexData(long jarg1, HShellVertexData jarg1_, float[] jarg2);
  public final static native void HShellVertexData_SetFIndexData(long jarg1, HShellVertexData jarg1_, int jarg2, float[] jarg3);
  public final static native void HShowContentsWithPathType_get_patharray(long jarg1, HShowContentsWithPathType jarg1_, long[] jarg2, int jarg3);
  public final static native void HShowContentsWithPathType_len_set(long jarg1, HShowContentsWithPathType jarg1_, int jarg2);
  public final static native int HShowContentsWithPathType_len_get(long jarg1, HShowContentsWithPathType jarg1_);
  public final static native long new_HShowContentsWithPathType();
  public final static native void delete_HShowContentsWithPathType(long jarg1);
  public final static native void HUserOptions_m_data_set(long jarg1, HUserOptions jarg1_, StringBuffer jarg2);
  public final static native StringBuffer HUserOptions_m_data_get(long jarg1, HUserOptions jarg1_);
  public final static native void HUserOptions_m_length_set(long jarg1, HUserOptions jarg1_, int jarg2);
  public final static native int HUserOptions_m_length_get(long jarg1, HUserOptions jarg1_);
  public final static native void HUserOptions_m_valid_set(long jarg1, HUserOptions jarg1_, boolean jarg2);
  public final static native boolean HUserOptions_m_valid_get(long jarg1, HUserOptions jarg1_);
  public final static native long new_HUserOptions__SWIG_0();
  public final static native long new_HUserOptions__SWIG_1(long jarg1, HUserOptions jarg1_);
  public final static native void delete_HUserOptions(long jarg1);
  public final static native boolean HUserOptions_IsValid(long jarg1, HUserOptions jarg1_);
  public final static native String HUserOptions_Show_User_Options(long jarg1, HUserOptions jarg1_);
  public final static native String HUserOptions_Show_One_Net_User_Option(long jarg1, HUserOptions jarg1_, String jarg2);
  public final static native String HUserOptions_Show_One_User_Option(long jarg1, HUserOptions jarg1_, String jarg2);
  public final static native String HUserOptions_Show_Net_User_Options(long jarg1, HUserOptions jarg1_);
  public final static native float HUtility_PI_get();
  public final static native int HUtility_X_get();
  public final static native int HUtility_Y_get();
  public final static native int HUtility_Z_get();
  public final static native int HUtility_W_get();
  public final static native int HUtility_XY_get();
  public final static native int HUtility_XZ_get();
  public final static native int HUtility_YZ_get();
  public final static native float HUtility_EH_Epsilon_get();
  public final static native void HUtility_Order(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtility_Find_Relative_Path(long jarg1, long jarg2, StringBuffer jarg3);
  public final static native float HUtility_GetTime();
  public final static native void HUtility_ClampPointToWindow(long jarg1, HPoint jarg1_);
  public final static native long HUtility_InsertBox(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HUtility_InsertWireframeBox(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtility_GenerateCuboidPoints(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native long HUtility_InsertRectangle__SWIG_0(String jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, boolean jarg7);
  public final static native long HUtility_InsertRectangle__SWIG_1(String jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native long HUtility_InsertRectangle__SWIG_2(String jarg1, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HUtility_InsertArrow__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, String jarg5, String jarg6, String jarg7, int jarg8, float jarg9, boolean jarg10);
  public final static native void HUtility_InsertArrow__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, String jarg5, String jarg6, String jarg7, int jarg8, float jarg9);
  public final static native void HUtility_InsertArrow__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, String jarg5, String jarg6, String jarg7, int jarg8);
  public final static native void HUtility_InsertArrow__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, String jarg5, String jarg6, String jarg7);
  public final static native void HUtility_ComputeDoublePrecisionCrossProduct(double[] jarg1, double[] jarg2, double[] jarg3);
  public final static native double HUtility_ComputeDoublePrecisionDotProduct(double[] jarg1, double[] jarg2);
  public final static native double HUtility_ComputeDoublePrecisionVectorLength(double[] jarg1);
  public final static native void HUtility_GetViewplaneVectors(long jarg1, double[] jarg2, double[] jarg3);
  public final static native void HUtility_NormalizeDoublePrecisionVector(double[] jarg1);
  public final static native boolean HUtility_PointsEqual(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native boolean HUtility_CreateAxisCircle__SWIG_0(long jarg1, HPoint jarg1_, float jarg2, int jarg3, boolean jarg4);
  public final static native boolean HUtility_CreateAxisCircle__SWIG_1(long jarg1, HPoint jarg1_, float jarg2, int jarg3);
  public final static native void HUtility_RotateToVector__SWIG_0(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, boolean jarg3);
  public final static native void HUtility_RotateToVector__SWIG_1(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtility_SmoothTransition__SWIG_0(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, float jarg4, float jarg5, long jarg6, HPoint jarg6_, long jarg7, HPoint jarg7_, long jarg8, HPoint jarg8_, float jarg9, float jarg10, long jarg11, HBaseView jarg11_);
  public final static native void HUtility_SmoothTransition__SWIG_1(long jarg1, HCamera jarg1_, long jarg2, HCamera jarg2_, long jarg3, HBaseView jarg3_);
  public final static native boolean HUtility_CamerasEqual(long jarg1, HCamera jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HUtility_ComputeVectorToVectorRotationMatrix(float[] jarg1, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native boolean HUtility_ExtractRGB(StringBuffer jarg1, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void HUtility_TransitionQuaternion(float[] jarg1, float[] jarg2, float jarg3, float[] jarg4);
  public final static native void HUtility_MatrixToQuaternion(float[] jarg1, float[] jarg2);
  public final static native void HUtility_QuaternionToMatrix(float[] jarg1, float[] jarg2);
  public final static native void HUtility_SmoothQuaternionTransition(long jarg1, HBaseView jarg1_, StringBuffer jarg2, StringBuffer jarg3, int jarg4);
  public final static native void HUtility_SmoothMatrixTransition(long jarg1, HBaseView jarg1_, long jarg2, float[] jarg3);
  public final static native void HUtility_MultiSmoothTransitions__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, long[] jarg3, float[] jarg4, long jarg5, HCamera jarg5_);
  public final static native void HUtility_MultiSmoothTransitions__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, long[] jarg3, float[] jarg4);
  public final static native long HUtility_GetCentroid(long jarg1);
  public final static native long HUtility_GetTransformedCentroid__SWIG_0(long jarg1, float[] jarg2);
  public final static native long HUtility_GetTransformedCentroid__SWIG_1(long jarg1);
  public final static native void HUtility_URIencode(String jarg1, long jarg2, StringBuffer jarg3);
  public final static native void HUtility_URIdecode(String jarg1, StringBuffer jarg2, long jarg3);
  public final static native void HUtility_GetCameraFromMatrix(float[] jarg1, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native void HUtility_GetMatrixFromCamera(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float[] jarg5);
  public final static native void HUtility_GetCameraFromGLFrustum(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7, long jarg8, HPoint jarg8_, long jarg9, HPoint jarg9_, long jarg10, HPoint jarg10_, StringBuffer jarg11, double[] jarg12, double[] jarg13, double[] jarg14);
  public final static native boolean HUtility_PushAttribute__SWIG_0(String jarg1);
  public final static native void HUtility_PushAttribute__SWIG_1(String jarg1, String jarg2);
  public final static native boolean HUtility_PopAttribute(String jarg1);
  public final static native boolean HUtility_ModifyPushedAttribute(String jarg1, String jarg2);
  public final static native boolean HUtility_ShowPushedAttribute(String jarg1, long jarg2, HUserOptions jarg2_);
  public final static native void HUtility_Recursive_Merge_Shells__SWIG_0(long jarg1, HShell jarg1_, long jarg2, HShell jarg2_, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native void HUtility_Recursive_Merge_Shells__SWIG_1(long jarg1, HShell jarg1_, long jarg2, HShell jarg2_, boolean jarg3, boolean jarg4);
  public final static native void HUtility_Recursive_Merge_Shells__SWIG_2(long jarg1, HShell jarg1_, long jarg2, HShell jarg2_, boolean jarg3);
  public final static native long HUtility_Merge_Shells__SWIG_0(boolean jarg1, boolean jarg2, boolean jarg3, boolean jarg4);
  public final static native long HUtility_Merge_Shells__SWIG_1(boolean jarg1, boolean jarg2, boolean jarg3);
  public final static native long HUtility_Merge_Shells__SWIG_2(boolean jarg1, boolean jarg2);
  public final static native long HUtility_Merge_Shells__SWIG_3(boolean jarg1);
  public final static native long HUtility_Merge_Shells_Generate_Regions__SWIG_0(int jarg1, long[] jarg2, boolean jarg3);
  public final static native long HUtility_Merge_Shells_Generate_Regions__SWIG_1(int jarg1, long[] jarg2);
  public final static native void HUtility_Generate_LODs__SWIG_0(boolean jarg1, boolean jarg2, boolean jarg3, int jarg4, float jarg5);
  public final static native void HUtility_Generate_LODs__SWIG_1(boolean jarg1, boolean jarg2, boolean jarg3, int jarg4);
  public final static native void HUtility_Generate_LODs__SWIG_2(boolean jarg1, boolean jarg2, boolean jarg3);
  public final static native void HUtility_Generate_LODs__SWIG_3(boolean jarg1, boolean jarg2);
  public final static native void HUtility_Generate_LODs__SWIG_4(boolean jarg1);
  public final static native void HUtility_Generate_LODs__SWIG_5();
  public final static native boolean HUtility_Segment_Shell_Allocate(long jarg1, HShell jarg1_, long jarg2, HShell jarg2_, boolean jarg3);
  public final static native void HUtility_Shell_Search(long jarg1, HShell jarg1_, long jarg2, HShell jarg2_, boolean jarg3);
  public final static native void HUtility_OptimizeSegmentTree__SWIG_0(long jarg1, long[] jarg2, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native void HUtility_OptimizeSegmentTree__SWIG_1(long jarg1, long[] jarg2, boolean jarg3, boolean jarg4);
  public final static native void HUtility_OptimizeSegmentTree__SWIG_2(long jarg1, long[] jarg2, boolean jarg3);
  public final static native void HUtility_OptimizeSegmentTree__SWIG_3(long jarg1, long[] jarg2);
  public final static native void HUtility_CountShellData__SWIG_0(long jarg1, int[] jarg2, int[] jarg3, int[] jarg4, int[] jarg5);
  public final static native void HUtility_CountShellData__SWIG_1(long jarg1, int[] jarg2, int[] jarg3, int[] jarg4);
  public final static native void HUtility_FindFileNameExtension__SWIG_0(String jarg1, StringBuffer jarg2, int jarg3);
  public final static native void HUtility_FindFileNameExtension__SWIG_1(String jarg1, StringBuffer jarg2);
  public final static native void HUtility_FindFileNameExtension__SWIG_2(long jarg1, long jarg2, int jarg3);
  public final static native void HUtility_FindFileNameExtension__SWIG_3(long jarg1, long jarg2);
  public final static native void HUtility_FindUnicodeFileNameExtension(int[] jarg1, StringBuffer jarg2);
  public final static native void HUtility_FindFileNameAndDirectory__SWIG_0(String jarg1, StringBuffer jarg2, StringBuffer jarg3);
  public final static native void HUtility_FindFileNameAndDirectory__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native String HUtility_extra_pointer_format();
  public final static native long HUtility_CreateScaleIndependentSegment__SWIG_0(String jarg1, boolean jarg2);
  public final static native long HUtility_CreateScaleIndependentSegment__SWIG_1(String jarg1);
  public final static native long HUtility_GetScaleIndependentGeomSegmentKey(long jarg1);
  public final static native void HUtility_SetScaleIndependentGeomPosition(long jarg1, float jarg2, float jarg3, float jarg4);
  public final static native void HUtility_GetScaleIndependentGeomPosition(long jarg1, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void HUtility_RegisterCallbacks();
  public final static native boolean HUtility_IsModelKey(long jarg1, long jarg2);
  public final static native long HUtility_UserOptionExists(long jarg1, String jarg2, StringBuffer jarg3);
  public final static native void HUtility_InsertRotatedArrow(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, float jarg7, String jarg8, String jarg9, int jarg10, float jarg11, boolean jarg12);
  public final static native int HUtility_CalculateKeyPath(long jarg1, long jarg2, HBaseView jarg2_, long[] jarg3, int jarg4);
  public final static native boolean HUtility_SegmentExists(String jarg1);
  public final static native void HUtility_UnsetAttributes();
  public final static native int HUtility_IsChildOf__SWIG_0(long jarg1, long jarg2, long[] jarg3);
  public final static native int HUtility_IsChildOf__SWIG_1(long jarg1, long jarg2);
  public final static native boolean HUtility_IsIdentityMatrix(float[] jarg1);
  public final static native void HUtility_ComputeShellNormal(long jarg1, long jarg2, HPoint jarg2_);
  public final static native long HUtility_SelectUnderCursor__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, boolean jarg4, boolean jarg5);
  public final static native long HUtility_SelectUnderCursor__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native long HUtility_SelectUnderCursor__SWIG_2(long jarg1, HBaseView jarg1_, float jarg2, float jarg3);
  public final static native long HUtility_SmartSelectUnderCursor__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, boolean jarg4, boolean jarg5);
  public final static native long HUtility_SmartSelectUnderCursor__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native long HUtility_SmartSelectUnderCursor__SWIG_2(long jarg1, HBaseView jarg1_, float jarg2, float jarg3);
  public final static native boolean HUtility_ShowOneHeuristic__SWIG_0(String jarg1, StringBuffer jarg2);
  public final static native boolean HUtility_ShowOneHeuristic__SWIG_1(String jarg1);
  public final static native boolean HUtility_ShowOneRenderingOption__SWIG_0(String jarg1, StringBuffer jarg2);
  public final static native boolean HUtility_ShowOneRenderingOption__SWIG_1(String jarg1);
  public final static native float HUtility_EaseInEaseOut(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native void HUtility_UnwindIncludes__SWIG_0(long[] jarg1);
  public final static native void HUtility_UnwindIncludes__SWIG_1(long[] jarg1, long[] jarg2, int jarg3);
  public final static native boolean HUtility_SafeSetUserOption(String jarg1);
  public final static native boolean HUtility_SafeShowUserOption(StringBuffer jarg1);
  public final static native void HUtility_ProjectShell(long jarg1);
  public final static native long HUtility_MergeShells(long jarg1, long jarg2);
  public final static native void HUtility_ShowModellingMatrix(float[] jarg1);
  public final static native void HUtility_ConvertLocalPixelsToLocalWindow__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HUtility_ConvertLocalPixelsToLocalWindow__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HUtility_GrabSegment(long jarg1);
  public final static native void HUtility_RenameSegment(long jarg1, String jarg2);
  public final static native void HUtility_InterpolateNormalAlongEdge(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_, long jarg6, HPoint jarg6_);
  public final static native void HUtility_ShowNormals(long jarg1, float jarg2);
  public final static native boolean HUtility_IsSegmentKey(long jarg1);
  public final static native int HUtility_FindContents(long[] jarg1);
  public final static native int HUtility_CalculateMajorAxis(long jarg1, HBaseView jarg1_);
  public final static native long HUtility_FindOneObject__SWIG_0(String jarg1, boolean jarg2);
  public final static native long HUtility_FindOneObject__SWIG_1(String jarg1);
  public final static native void HUtility_CloseAllSegments__SWIG_0(long jarg1);
  public final static native void HUtility_CloseAllSegments__SWIG_1();
  public final static native void HUtility_ReadjustTarget(long jarg1, HBaseView jarg1_);
  public final static native boolean HUtility_GetAllowAnimation(long jarg1);
  public final static native void HUtility_SuppressAnimation();
  public final static native int HUtility_FindFaceByIndex(int jarg1, int[] jarg2, int jarg3);
  public final static native boolean HUtility_ShowOneUserOption(String jarg1, StringBuffer jarg2);
  public final static native long HUtility_GetNextRenumberedKey(long jarg1, HBaseView jarg1_);
  public final static native void HUtility_NameSegments(long[] jarg1, long jarg2, HBaseView jarg2_);
  public final static native void HUtility_MoveToTemp(long jarg1, long jarg2);
  public final static native void HUtility_ShowContentsWithPath__SWIG_0(String jarg1, long jarg2, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native void HUtility_ShowContentsWithPath__SWIG_1(String jarg1, long jarg2, boolean jarg3, boolean jarg4);
  public final static native void HUtility_ShowContentsWithPath__SWIG_2(String jarg1, long jarg2, boolean jarg3);
  public final static native void HUtility_ShowContentsWithPath__SWIG_3(String jarg1, long jarg2);
  public final static native int HUtility_ustrlen(int[] jarg1);
  public final static native boolean HUtility_RLECompress(int jarg1, short[] jarg2, int[] jarg3, short[] jarg4);
  public final static native boolean HUtility_ZlibCompress(int jarg1, short[] jarg2, int[] jarg3, short[] jarg4);
  public final static native boolean HUtility_ZlibDecompress(int jarg1, short[] jarg2, int[] jarg3, short[] jarg4);
  public final static native boolean HUtility_BuildIncludePath__SWIG_0(long jarg1, long[] jarg2, int jarg3, long[] jarg4, int[] jarg5, long jarg6);
  public final static native boolean HUtility_BuildIncludePath__SWIG_1(long jarg1, long[] jarg2, int jarg3, long[] jarg4, int[] jarg5);
  public final static native void HUtility_BuildIncludePathFromSelection(long jarg1, HSmartSelItem jarg1_, int[] jarg2, long[] jarg3);
  public final static native void HUtility_MakeViewSnapshot__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4);
  public final static native void HUtility_MakeViewSnapshot__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native int HUtility_ConstrainToVector(float[] jarg1, long jarg2, HPoint jarg2_, float[] jarg3);
  public final static native void HUtility_Camera_To_Transform(long jarg1, HCamera jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void HUtility_LocalPixelsToWorld(long jarg1, HCamera jarg1_, boolean jarg2, float jarg3, float jarg4, int jarg5, int jarg6, float[] jarg7);
  public final static native float HUtility_ComputeAngleBetweenVector(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native int HUtility_strlen16(int[] jarg1);
  public final static native void HUtility_CalculateBoundingInfo(long jarg1, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native int HUtility_ClipPolygonAgainstPlane__SWIG_0(int jarg1, long[] jarg2, float[] jarg3, long[] jarg4, boolean[] jarg5);
  public final static native int HUtility_ClipPolygonAgainstPlane__SWIG_1(int jarg1, long[] jarg2, float[] jarg3, long[] jarg4);
  public final static native int HUtility_TwoPassPrint(String jarg1, long jarg2, HOutputHandlerOptions jarg2_);
  public final static native long HUtility_OpenSegmentFromKey(long jarg1, StringBuffer jarg2);
  public final static native boolean HUtility_IsPointInsideAllEdges(float[] jarg1, float[] jarg2, int jarg3, int[] jarg4, float[] jarg5, float jarg6);
  public final static native void HUtility_IntersectionLinePlane(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPlane jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HUtility_DeleteManipulators(long jarg1);
  public final static native void HUtility_MergePointsIntoShell(int jarg1, long[] jarg2, int jarg3, int[] jarg4, int jarg5, long[] jarg6, long[] jarg7, float jarg8, boolean jarg9, int[] jarg10, int[] jarg11);
  public final static native void HUtility_SubdivideShells__SWIG_0(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6, long jarg7, ShellToRegionMapper jarg7_, boolean jarg8, boolean jarg9, boolean jarg10);
  public final static native void HUtility_SubdivideShells__SWIG_1(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6, long jarg7, ShellToRegionMapper jarg7_, boolean jarg8, boolean jarg9);
  public final static native void HUtility_SubdivideShells__SWIG_2(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6, long jarg7, ShellToRegionMapper jarg7_, boolean jarg8);
  public final static native void HUtility_SubdivideShells__SWIG_3(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6, long jarg7, ShellToRegionMapper jarg7_);
  public final static native void HUtility_SubdivideShells__SWIG_4(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6);
  public final static native void HUtility_MergePolylines();
  public final static native void HUtility_CreateZebraStripeTexture(int jarg1, int jarg2, int jarg3, boolean jarg4, long jarg5, HPixelRGB jarg5_, long jarg6, HPixelRGB jarg6_);
  public final static native void HUtility_ascii_to_unicode(String jarg1, int[] jarg2);
  public final static native void HUtility_unicode_to_ascii(int[] jarg1, StringBuffer jarg2);
  public final static native void HUtility_BatchRead(long jarg1, HBaseModel jarg1_, String jarg2, String jarg3);
  public final static native void HUtility_AdjustPositionToPlane(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HUtility_CalculateCornerImagePosition(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, int jarg4, float[] jarg5, float[] jarg6);
  public final static native void HUtility_OptimizeModelByGrid(long jarg1, HBaseView jarg1_, long jarg2, ShellToRegionMapper jarg2_);
  public final static native void HUtility_DecipherTextureString__SWIG_0(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9, boolean[] jarg10, boolean[] jarg11, float[] jarg12, float[] jarg13, StringBuffer jarg14);
  public final static native void HUtility_DecipherTextureString__SWIG_1(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9, boolean[] jarg10, boolean[] jarg11, float[] jarg12, float[] jarg13);
  public final static native void HUtility_DecipherTextureString__SWIG_2(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9, boolean[] jarg10, boolean[] jarg11, float[] jarg12);
  public final static native void HUtility_DecipherTextureString__SWIG_3(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9, boolean[] jarg10, boolean[] jarg11);
  public final static native void HUtility_DecipherTextureString__SWIG_4(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9, boolean[] jarg10);
  public final static native void HUtility_DecipherTextureString__SWIG_5(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8, StringBuffer jarg9);
  public final static native void HUtility_DecipherTextureString__SWIG_6(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7, StringBuffer jarg8);
  public final static native void HUtility_DecipherTextureString__SWIG_7(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6, StringBuffer jarg7);
  public final static native void HUtility_DecipherTextureString__SWIG_8(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5, StringBuffer jarg6);
  public final static native void HUtility_DecipherTextureString__SWIG_9(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4, StringBuffer jarg5);
  public final static native void HUtility_DecipherTextureString__SWIG_10(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3, boolean[] jarg4);
  public final static native void HUtility_DecipherTextureString__SWIG_11(StringBuffer jarg1, StringBuffer jarg2, boolean[] jarg3);
  public final static native void HUtility_DecipherTextureString__SWIG_12(StringBuffer jarg1, StringBuffer jarg2);
  public final static native long new_HUtility();
  public final static native void delete_HUtility(long jarg1);
  public final static native long new_HQualifiedKey(long jarg1, long[] jarg2, int jarg3);
  public final static native void delete_HQualifiedKey(long jarg1);
  public final static native int HQualifiedKey_MakeHashKey__SWIG_0(long jarg1, HQualifiedKey jarg1_);
  public final static native int HQualifiedKey_MakeHashKey__SWIG_1(long jarg1, int jarg2, long[] jarg3);
  public final static native void HQualifiedKey_m_Key_set(long jarg1, HQualifiedKey jarg1_, long jarg2);
  public final static native long HQualifiedKey_m_Key_get(long jarg1, HQualifiedKey jarg1_);
  public final static native void HQualifiedKey_m_IncludeListLength_set(long jarg1, HQualifiedKey jarg1_, int jarg2);
  public final static native int HQualifiedKey_m_IncludeListLength_get(long jarg1, HQualifiedKey jarg1_);
  public final static native void HQualifiedKey_get_m_pIncludeList(long jarg1, HQualifiedKey jarg1_, long[] jarg2, int jarg3);
  public final static native long new_HMergeShellFace();
  public final static native void delete_HMergeShellFace(long jarg1);
  public final static native void HMergeShellFace_Init(long jarg1, HMergeShellFace jarg1_, int[] jarg2);
  public final static native void HMergeShellFace_MakeChildFaces(long jarg1, HMergeShellFace jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, boolean jarg4, int[] jarg5, int[] jarg6);
  public final static native void HMergeShellFace_Divide(long jarg1, HMergeShellFace jarg1_, int jarg2, long jarg3, HPoint jarg3_);
  public final static native boolean HMergeShellFace_CheckHit(long jarg1, HMergeShellFace jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native long HMergeShellFace_FindHitFaceRecursive(long jarg1, HMergeShellFace jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native long HMergeShellFace_FindHitFace(long jarg1, HMergeShellFace jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native boolean HMergeShellFace_CheckIfColinear(long jarg1, HMergeShellFace jarg1_, long jarg2, HPoint jarg2_);
  public final static native int HMergeShellFace_GetLengthRecursive(long jarg1, HMergeShellFace jarg1_, int jarg2);
  public final static native int HMergeShellFace_GetLength(long jarg1, HMergeShellFace jarg1_);
  public final static native int HMergeShellFace_AddToFacelistRecursive(long jarg1, HMergeShellFace jarg1_, int[] jarg2, int jarg3);
  public final static native int HMergeShellFace_AddToFacelist(long jarg1, HMergeShellFace jarg1_, int[] jarg2);
  public final static native long new_ColorPiece(int[] jarg1, int jarg2, int jarg3);
  public final static native void delete_ColorPiece(long jarg1);
  public final static native void ColorPiece_m_len_set(long jarg1, ColorPiece jarg1_, int jarg2);
  public final static native int ColorPiece_m_len_get(long jarg1, ColorPiece jarg1_);
  public final static native void ColorPiece_m_col_set(long jarg1, ColorPiece jarg1_, int jarg2);
  public final static native int ColorPiece_m_col_get(long jarg1, ColorPiece jarg1_);
  public final static native void ColorPiece_m_done_set(long jarg1, ColorPiece jarg1_, boolean jarg2);
  public final static native boolean ColorPiece_m_done_get(long jarg1, ColorPiece jarg1_);
  public final static native void ColorPiece_get_m_uvindex(long jarg1, ColorPiece jarg1_, int[] jarg2, int jarg3);
  public final static native void ColorPiece_get_m_fllen(long jarg1, ColorPiece jarg1_, int[] jarg2, int jarg3);
  public final static native void ColorPiece_get_m_flindex(long jarg1, ColorPiece jarg1_, int[] jarg2, int jarg3);
  public final static native long new_ColorPieceList();
  public final static native void delete_ColorPieceList(long jarg1);
  public final static native void ColorPieceList_AddColorPiece(long jarg1, ColorPieceList jarg1_, int[] jarg2, int jarg3, int jarg4);
  public final static native long ColorPieceList_FindMatch(long jarg1, ColorPieceList jarg1_, int jarg2, int jarg3, int jarg4, int[] jarg5, int[] jarg6, boolean[] jarg7);
  public final static native void ColorPieceList_m_ColorPieceList_set(long jarg1, ColorPieceList jarg1_, long jarg2);
  public final static native long ColorPieceList_m_ColorPieceList_get(long jarg1, ColorPieceList jarg1_);
  public final static native void HVerticalUtility_ColorizePointCloud(long jarg1);
  public final static native long new_HVerticalUtility();
  public final static native void delete_HVerticalUtility(long jarg1);
  public final static native long new_HAbsoluteWindow__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9, int jarg10, boolean jarg11);
  public final static native long new_HAbsoluteWindow__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9, int jarg10);
  public final static native long new_HAbsoluteWindow__SWIG_2(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9);
  public final static native long new_HAbsoluteWindow__SWIG_3(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8);
  public final static native long new_HAbsoluteWindow__SWIG_4(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7);
  public final static native long new_HAbsoluteWindow__SWIG_5(long jarg1, HBaseView jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native long new_HAbsoluteWindow__SWIG_6(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HAbsoluteWindow_DecipherOptions(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_AdjustX(long jarg1, HAbsoluteWindow jarg1_, float jarg2, int jarg3, float[] jarg4);
  public final static native void HAbsoluteWindow_AdjustY(long jarg1, HAbsoluteWindow jarg1_, float jarg2, int jarg3, float[] jarg4);
  public final static native boolean HAbsoluteWindow_Adjust(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_AdjustAll(long jarg1, HBaseView jarg1_);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8, int jarg9, boolean jarg10);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8, int jarg9);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_2(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_3(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_4(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6);
  public final static native boolean HAbsoluteWindow_SetWindow__SWIG_5(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean HAbsoluteWindow_IsPositionInWindow__SWIG_0(long jarg1, HAbsoluteWindow jarg1_, float jarg2, float jarg3);
  public final static native boolean HAbsoluteWindow_IsPositionInWindow__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2, float jarg3);
  public final static native void HAbsoluteWindow_CalculateLocalWindowPos__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float[] jarg4, float[] jarg5);
  public final static native void HAbsoluteWindow_CalculateLocalWindowPos__SWIG_1(long jarg1, HAbsoluteWindow jarg1_, float jarg2, float jarg3, float[] jarg4, float[] jarg5);
  public final static native void HAbsoluteWindow_CalculateOuterWindowPos__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, float[] jarg4, float[] jarg5);
  public final static native void HAbsoluteWindow_CalculateOuterWindowPos__SWIG_1(long jarg1, HAbsoluteWindow jarg1_, float jarg2, float jarg3, float[] jarg4, float[] jarg5);
  public final static native void HAbsoluteWindow_m_pView_set(long jarg1, HAbsoluteWindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HAbsoluteWindow_m_pView_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_width_set(long jarg1, HAbsoluteWindow jarg1_, float jarg2);
  public final static native float HAbsoluteWindow_m_width_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_height_set(long jarg1, HAbsoluteWindow jarg1_, float jarg2);
  public final static native float HAbsoluteWindow_m_height_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_xpos_set(long jarg1, HAbsoluteWindow jarg1_, float jarg2);
  public final static native float HAbsoluteWindow_m_xpos_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_ypos_set(long jarg1, HAbsoluteWindow jarg1_, float jarg2);
  public final static native float HAbsoluteWindow_m_ypos_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_xpos_type_set(long jarg1, HAbsoluteWindow jarg1_, int jarg2);
  public final static native int HAbsoluteWindow_m_xpos_type_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_ypos_type_set(long jarg1, HAbsoluteWindow jarg1_, int jarg2);
  public final static native int HAbsoluteWindow_m_ypos_type_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_width_type_set(long jarg1, HAbsoluteWindow jarg1_, int jarg2);
  public final static native int HAbsoluteWindow_m_width_type_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_height_type_set(long jarg1, HAbsoluteWindow jarg1_, int jarg2);
  public final static native int HAbsoluteWindow_m_height_type_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_bShowBackground_set(long jarg1, HAbsoluteWindow jarg1_, boolean jarg2);
  public final static native boolean HAbsoluteWindow_m_bShowBackground_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void HAbsoluteWindow_m_key_set(long jarg1, HAbsoluteWindow jarg1_, long jarg2);
  public final static native long HAbsoluteWindow_m_key_get(long jarg1, HAbsoluteWindow jarg1_);
  public final static native void delete_HAbsoluteWindow(long jarg1);
  public final static native void HUnicodeOptions_m_data_set(long jarg1, HUnicodeOptions jarg1_, long jarg2);
  public final static native long HUnicodeOptions_m_data_get(long jarg1, HUnicodeOptions jarg1_);
  public final static native void HUnicodeOptions_m_length_set(long jarg1, HUnicodeOptions jarg1_, int jarg2);
  public final static native int HUnicodeOptions_m_length_get(long jarg1, HUnicodeOptions jarg1_);
  public final static native void HUnicodeOptions_m_valid_set(long jarg1, HUnicodeOptions jarg1_, boolean jarg2);
  public final static native boolean HUnicodeOptions_m_valid_get(long jarg1, HUnicodeOptions jarg1_);
  public final static native long new_HUnicodeOptions__SWIG_0();
  public final static native long new_HUnicodeOptions__SWIG_1(long jarg1, HUnicodeOptions jarg1_);
  public final static native void delete_HUnicodeOptions(long jarg1);
  public final static native boolean HUnicodeOptions_IsValid(long jarg1, HUnicodeOptions jarg1_);
  public final static native long HUnicodeOptions_Show_Unicode_Options(long jarg1, HUnicodeOptions jarg1_);
  public final static native long HUnicodeOptions_Show_One_Net_Unicode_Option(long jarg1, HUnicodeOptions jarg1_, long jarg2);
  public final static native long HUnicodeOptions_Show_One_Unicode_Option(long jarg1, HUnicodeOptions jarg1_, long jarg2);
  public final static native long HUnicodeOptions_Show_Net_Unicode_Options(long jarg1, HUnicodeOptions jarg1_);
  public final static native long new_BREP_Edge(long jarg1);
  public final static native void BREP_Edge_m_edgekey_set(long jarg1, BREP_Edge jarg1_, long jarg2);
  public final static native long BREP_Edge_m_edgekey_get(long jarg1, BREP_Edge jarg1_);
  public final static native void BREP_Edge_m_vertex1_set(long jarg1, BREP_Edge jarg1_, long jarg2);
  public final static native long BREP_Edge_m_vertex1_get(long jarg1, BREP_Edge jarg1_);
  public final static native void BREP_Edge_m_vertex2_set(long jarg1, BREP_Edge jarg1_, long jarg2);
  public final static native long BREP_Edge_m_vertex2_get(long jarg1, BREP_Edge jarg1_);
  public final static native void delete_BREP_Edge(long jarg1);
  public final static native long new_BREP_CoEdge(long jarg1, BREP_Edge jarg1_);
  public final static native void BREP_CoEdge_m_edge_set(long jarg1, BREP_CoEdge jarg1_, long jarg2, BREP_Edge jarg2_);
  public final static native long BREP_CoEdge_m_edge_get(long jarg1, BREP_CoEdge jarg1_);
  public final static native void delete_BREP_CoEdge(long jarg1);
  public final static native long new_BREP_Face(long jarg1);
  public final static native void delete_BREP_Face(long jarg1);
  public final static native long BREP_Face_AddCoEdge(long jarg1, BREP_Face jarg1_, long jarg2, BREP_Topology jarg2_, long jarg3, long jarg4);
  public final static native void BREP_Face_m_CoEdgeList_set(long jarg1, BREP_Face jarg1_, long jarg2);
  public final static native long BREP_Face_m_CoEdgeList_get(long jarg1, BREP_Face jarg1_);
  public final static native void BREP_Face_m_facekey_set(long jarg1, BREP_Face jarg1_, long jarg2);
  public final static native long BREP_Face_m_facekey_get(long jarg1, BREP_Face jarg1_);
  public final static native void BREP_Topology_m_FaceHash_set(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_m_FaceHash_get(long jarg1, BREP_Topology jarg1_);
  public final static native void BREP_Topology_m_EdgeHash_set(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_m_EdgeHash_get(long jarg1, BREP_Topology jarg1_);
  public final static native void BREP_Topology_m_VertexHash_set(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_m_VertexHash_get(long jarg1, BREP_Topology jarg1_);
  public final static native void BREP_Topology_m_CurrentFace_set(long jarg1, BREP_Topology jarg1_, long jarg2, BREP_Face jarg2_);
  public final static native long BREP_Topology_m_CurrentFace_get(long jarg1, BREP_Topology jarg1_);
  public final static native long new_BREP_Topology();
  public final static native void delete_BREP_Topology(long jarg1);
  public final static native long BREP_Topology_AddFace(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_GetFace(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_FindEdge(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_AddEdge(long jarg1, BREP_Topology jarg1_, long jarg2, long jarg3);
  public final static native long BREP_Topology_AddVertex(long jarg1, BREP_Topology jarg1_, long jarg2, long jarg3, HPoint jarg3_);
  public final static native long BREP_Topology_FindVertex(long jarg1, BREP_Topology jarg1_, long jarg2);
  public final static native long BREP_Topology_GetCurrentFace(long jarg1, BREP_Topology jarg1_);
  public final static native long new_HBestImageDriver__SWIG_0(String jarg1);
  public final static native long new_HBestImageDriver__SWIG_1();
  public final static native void delete_HBestImageDriver(long jarg1);
  public final static native long HBestImageDriver_GetKey(long jarg1, HBestImageDriver jarg1_);
  public final static native long new_HPVOOptions(String jarg1);
  public final static native void delete_HPVOOptions(long jarg1);
  public final static native String HPVOOptions_getOption(long jarg1, HPVOOptions jarg1_, String jarg2);
  public final static native int H_OUTPUT_TYPE_DEFAULT_get();
  public final static native long HInputOpNone_get();
  public final static native long HInputOpFileInputByKey_get();
  public final static native long HInputOpFileInputToImageKey_get();
  public final static native long HOutputOpNone_get();
  public final static native long HOutputOpFileOutputByKey_get();
  public final static native long HOutputOpFileOutputFromImageKey_get();
  public final static native void delete_HIONoticeCallback(long jarg1);
  public final static native void HIONoticeCallback_Notice__SWIG_0(long jarg1, HIONoticeCallback jarg1_, String jarg2);
  public final static native void HIONoticeCallback_Notice__SWIG_1(long jarg1, HIONoticeCallback jarg1_, long jarg2);
  public final static native void HIONoticeCallback_NoticeSwigExplicitHIONoticeCallback__SWIG_1(long jarg1, HIONoticeCallback jarg1_, long jarg2);
  public final static native long new_HIONoticeCallback();
  public final static native void HIONoticeCallback_director_connect(HIONoticeCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HIONoticeCallback_change_ownership(HIONoticeCallback obj, long cptr, boolean take_or_release);
  public final static native void delete_HIOPercentNoticeCallback(long jarg1);
  public final static native void HIOPercentNoticeCallback_Notice(long jarg1, HIOPercentNoticeCallback jarg1_, float jarg2);
  public final static native long new_HIOPercentNoticeCallback();
  public final static native void HIOPercentNoticeCallback_director_connect(HIOPercentNoticeCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HIOPercentNoticeCallback_change_ownership(HIOPercentNoticeCallback obj, long cptr, boolean take_or_release);
  public final static native long new_HIOConnector();
  public final static native void delete_HIOConnector(long jarg1);
  public final static native long HIOConnector_GetHoopsEntity__SWIG_0(long jarg1, HIOConnector jarg1_, long jarg2);
  public final static native long HIOConnector_GetHoopsEntity__SWIG_1(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3);
  public final static native long HIOConnector_GetKernelEntity__SWIG_0(long jarg1, HIOConnector jarg1_, long jarg2);
  public final static native long HIOConnector_GetKernelEntity__SWIG_1(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3);
  public final static native boolean HIOConnector_GetHoopsEntities__SWIG_0(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3);
  public final static native boolean HIOConnector_GetHoopsEntities__SWIG_1(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean HIOConnector_GetKernelEntities__SWIG_0(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3);
  public final static native boolean HIOConnector_GetKernelEntities__SWIG_1(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HIOConnector_AddConnection__SWIG_0(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3);
  public final static native void HIOConnector_AddConnection__SWIG_1(long jarg1, HIOConnector jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HIOConnector_OptimizeTree(long jarg1, HIOConnector jarg1_, String jarg2, String jarg3);
  public final static native long new_HInputHandlerOptions__SWIG_0();
  public final static native long new_HInputHandlerOptions__SWIG_1(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void delete_HInputHandlerOptions(long jarg1);
  public final static native void HInputHandlerOptions_m_pHBaseView_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HInputHandlerOptions_m_pHBaseView_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pImageName_set(long jarg1, HInputHandlerOptions jarg1_, String jarg2);
  public final static native String HInputHandlerOptions_m_pImageName_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pImageFormat_set(long jarg1, HInputHandlerOptions jarg1_, String jarg2);
  public final static native String HInputHandlerOptions_m_pImageFormat_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bLocal_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bLocal_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_tk_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2, HStreamFileToolkit jarg2_);
  public final static native long HInputHandlerOptions_m_tk_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bLogging_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bLogging_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pConnector_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2, HIOConnector jarg2_);
  public final static native long HInputHandlerOptions_m_pConnector_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pExtendedData_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2);
  public final static native long HInputHandlerOptions_m_pExtendedData_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bImportMetadata_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bImportMetadata_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_license_set(long jarg1, HInputHandlerOptions jarg1_, String jarg2);
  public final static native String HInputHandlerOptions_m_license_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bIgnoreOffEntities_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bIgnoreOffEntities_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_coneFactor_set(long jarg1, HInputHandlerOptions jarg1_, double jarg2);
  public final static native double HInputHandlerOptions_m_coneFactor_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_factorForSmartSolids_set(long jarg1, HInputHandlerOptions jarg1_, double jarg2);
  public final static native double HInputHandlerOptions_m_factorForSmartSolids_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_iDGNCellHeaderOption_set(long jarg1, HInputHandlerOptions jarg1_, int jarg2);
  public final static native int HInputHandlerOptions_m_iDGNCellHeaderOption_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native int HInputHandlerOptions_SINGLE_ENTITY_CELLHEADER_get();
  public final static native int HInputHandlerOptions_BREAK_CELLHEADER_get();
  public final static native int HInputHandlerOptions_OPT_CELLHEADER_get();
  public final static native void HInputHandlerOptions_m_pPRCAsmModelFile_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2);
  public final static native long HInputHandlerOptions_m_pPRCAsmModelFile_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pPRCDeleteModelFile_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_pPRCDeleteModelFile_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pPRCPMIConnector_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2, HIOConnector jarg2_);
  public final static native long HInputHandlerOptions_m_pPRCPMIConnector_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pPRCTopologyManager_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2, BREP_Topology jarg2_);
  public final static native long HInputHandlerOptions_m_pPRCTopologyManager_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCMergeFaces_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCMergeFaces_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCImportNonBrepFaces_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCImportNonBrepFaces_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCCreatePRCFileOnly_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCCreatePRCFileOnly_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCInstanceShells_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCInstanceShells_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCCalculatePhysicalProperties_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCCalculatePhysicalProperties_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pPRCMultiModelSelectionCallback_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2);
  public final static native long HInputHandlerOptions_m_pPRCMultiModelSelectionCallback_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCStoreUserAttributes_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCStoreUserAttributes_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pPRCDeleteModelCallback_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2);
  public final static native long HInputHandlerOptions_m_pPRCDeleteModelCallback_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bPRCImportHiddenObjects_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bPRCImportHiddenObjects_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bDGNRebaselineModel_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bDGNRebaselineModel_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bDGNImportAllModels_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bDGNImportAllModels_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bDisableDWFDrawOrder_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bDisableDWFDrawOrder_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bImportThumbnail_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bImportThumbnail_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bDWFRebaselineModel_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bDWFRebaselineModel_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bOptimizeSegmentTree_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bOptimizeSegmentTree_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bLegacyOptimize_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bLegacyOptimize_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bDwgSkipUnreferencedBlocks_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bDwgSkipUnreferencedBlocks_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_z_separation_set(long jarg1, HInputHandlerOptions jarg1_, double jarg2);
  public final static native double HInputHandlerOptions_m_z_separation_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_depth_range_set(long jarg1, HInputHandlerOptions jarg1_, double jarg2);
  public final static native double HInputHandlerOptions_m_depth_range_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_pOOCNodeDeltas_set(long jarg1, HInputHandlerOptions jarg1_, long jarg2);
  public final static native long HInputHandlerOptions_m_pOOCNodeDeltas_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bOOCAutoUpdate_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bOOCAutoUpdate_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void HInputHandlerOptions_m_bOOCAutoCleanup_set(long jarg1, HInputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HInputHandlerOptions_m_bOOCAutoCleanup_get(long jarg1, HInputHandlerOptions jarg1_);
  public final static native void delete_HInputHandler(long jarg1);
  public final static native long HInputHandler_GetInputOps(long jarg1, HInputHandler jarg1_);
  public final static native String HInputHandler_GetInputName(long jarg1, HInputHandler jarg1_);
  public final static native void HInputHandler_RegisterInputHandlerTypes(long jarg1, HInputHandler jarg1_);
  public final static native int HInputHandler_GetInputStyle(long jarg1, HInputHandler jarg1_);
  public final static native int HInputHandler_FileInputByKey__SWIG_0(long jarg1, HInputHandler jarg1_, String jarg2, long jarg3, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HInputHandler_FileInputByKey__SWIG_1(long jarg1, HInputHandler jarg1_, long jarg2, long jarg3, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HInputHandler_FileInputByKey__SWIG_2(long jarg1, HInputHandler jarg1_, int[] jarg2, long jarg3, long jarg4, HInputHandlerOptions jarg4_);
  public final static native int HInputHandler_FileInputToImageKey__SWIG_0(long jarg1, HInputHandler jarg1_, String jarg2, long[] jarg3, long jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HInputHandler_FileInputToImageKey__SWIG_1(long jarg1, HInputHandler jarg1_, long jarg2, long[] jarg3, long jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native int HInputHandler_FileInputToImageKey__SWIG_2(long jarg1, HInputHandler jarg1_, int[] jarg2, long[] jarg3, long jarg4, long jarg5, HInputHandlerOptions jarg5_);
  public final static native String HInputHandler_GetInputTypesString(long jarg1, HInputHandler jarg1_);
  public final static native long HInputHandler_GetInputProgress(long jarg1, HInputHandler jarg1_);
  public final static native float HInputHandler_GetInputPercentProgress(long jarg1, HInputHandler jarg1_);
  public final static native long HInputHandler_GetInputInformation(long jarg1, HInputHandler jarg1_);
  public final static native long HInputHandler_SetInputProgressNoticeCallback(long jarg1, HInputHandler jarg1_, long jarg2, HIONoticeCallback jarg2_);
  public final static native long HInputHandler_SetInputPercentProgressNoticeCallback(long jarg1, HInputHandler jarg1_, long jarg2, HIOPercentNoticeCallback jarg2_);
  public final static native long HInputHandler_SetInputInformationNoticeCallback(long jarg1, HInputHandler jarg1_, long jarg2, HIONoticeCallback jarg2_);
  public final static native void HInputHandler_ReportInputProgress__SWIG_0(long jarg1, HInputHandler jarg1_, String jarg2);
  public final static native void HInputHandler_ReportInputProgress__SWIG_1(long jarg1, HInputHandler jarg1_, long jarg2);
  public final static native void HInputHandler_ReportInputPercentProgress(long jarg1, HInputHandler jarg1_, float jarg2);
  public final static native void HInputHandler_ReportInputInformation__SWIG_0(long jarg1, HInputHandler jarg1_, String jarg2);
  public final static native void HInputHandler_ReportInputInformation__SWIG_1(long jarg1, HInputHandler jarg1_, long jarg2);
  public final static native void HInputHandler_SetModuleDirectory__SWIG_0(long jarg1, HInputHandler jarg1_, String jarg2);
  public final static native void HInputHandler_SetModuleDirectory__SWIG_1(long jarg1, HInputHandler jarg1_, long jarg2);
  public final static native long new_HOutputHandlerOptions__SWIG_0();
  public final static native String HOutputHandlerOptions_GetType(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_PopulateOptions(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long new_HOutputHandlerOptions__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void delete_HOutputHandlerOptions(long jarg1);
  public final static native void HOutputHandlerOptions_Init(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HOutputHandlerOptions jarg2_);
  public final static native void HOutputHandlerOptions_m_pHBaseView_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HOutputHandlerOptions_m_pHBaseView_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_View__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_View__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void HOutputHandlerOptions_m_pHBaseModel_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native long HOutputHandlerOptions_m_pHBaseModel_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_Model__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Model__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native void HOutputHandlerOptions_m_pCamera_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HCamera jarg2_);
  public final static native long HOutputHandlerOptions_m_pCamera_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_Camera__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Camera__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HOutputHandlerOptions_m_Key_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_Key_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_Key__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Key__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native void HOutputHandlerOptions_m_pHSRAOptions_set(long jarg1, HOutputHandlerOptions jarg1_, String jarg2);
  public final static native String HOutputHandlerOptions_m_pHSRAOptions_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native StringBuffer HOutputHandlerOptions_HSRAOptions__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_HSRAOptions__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, StringBuffer jarg2);
  public final static native void HOutputHandlerOptions_m_pWindowColor_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOutputHandlerOptions_m_pWindowColor_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_WindowColor__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_WindowColor__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HOutputHandlerOptions_m_bUseWindowColor_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bUseWindowColor_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_UseWindowColor__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_UseWindowColor__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_Window_Width_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_Window_Width_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native float HOutputHandlerOptions_WindowWidth__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_WindowWidth__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native void HOutputHandlerOptions_m_Window_Height_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_Window_Height_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native float HOutputHandlerOptions_WindowHeight__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_WindowHeight__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native void HOutputHandlerOptions_m_Paper_Width_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_Paper_Width_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native float HOutputHandlerOptions_PaperWidth__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_PaperWidth__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native void HOutputHandlerOptions_m_Paper_Height_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_Paper_Height_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native float HOutputHandlerOptions_PaperHeight__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_PaperHeight__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native void HOutputHandlerOptions_m_ForceGrayscale_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_ForceGrayscale_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_ForceGrayscale__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_ForceGrayscale__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_lineFuseThreshold_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_lineFuseThreshold_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_LineFuseThreshold__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_LineFuseThreshold__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native void HOutputHandlerOptions_m_bFastPrint_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bFastPrint_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_FastPrint__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_FastPrint__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bConserveMemory_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bConserveMemory_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_ConserveMemory__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_ConserveMemory__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bWriteAnimations_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bWriteAnimations_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_WriteAnimations__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_WriteAnimations__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bWindowFrame_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bWindowFrame_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_WindowFrame__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_WindowFrame__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bUseSubscreen_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bUseSubscreen_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_UseSubscreen__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_UseSubscreen__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_Image_Dpi_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_Image_Dpi_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native int HOutputHandlerOptions_ImageDpi__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_ImageDpi__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native void HOutputHandlerOptions_m_Paper_Dpi_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_Paper_Dpi_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native int HOutputHandlerOptions_PaperDpi__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_PaperDpi__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native void HOutputHandlerOptions_m_pExtendedData_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_pExtendedData_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native long HOutputHandlerOptions_ExtendedData__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_ExtendedData__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native void HOutputHandlerOptions_ExtendedData__SWIG_2(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native boolean HOutputHandlerOptions_ActivateOnPageOpen__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_ActivateOnPageOpen__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native float HOutputHandlerOptions_AnnotLeft__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_AnnotLeft__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_AnnotRight__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_AnnotRight__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_AnnotBottom__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_AnnotBottom__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_AnnotTop__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_AnnotTop__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native void HOutputHandlerOptions_m_license_set(long jarg1, HOutputHandlerOptions jarg1_, String jarg2);
  public final static native String HOutputHandlerOptions_m_license_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_antialiasLevel_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_antialiasLevel_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_jpeg_quality_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_jpeg_quality_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_imageOutputBufferSize_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_imageOutputBufferSize_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_Version_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_Version_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native int HOutputHandlerOptions_Version__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Version__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native void HOutputHandlerOptions_m_OutputType_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_OutputType_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native int HOutputHandlerOptions_OutputType__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_OutputType__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native void HOutputHandlerOptions_m_b3dOutput_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_b3dOutput_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_Output3d__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Output3d__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bAscii_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bAscii_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_Ascii__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_Ascii__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_bStlNormals_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bStlNormals_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native boolean HOutputHandlerOptions_StlNormals__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_StlNormals__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native void HOutputHandlerOptions_m_ratio_cm_to_internal_units_set(long jarg1, HOutputHandlerOptions jarg1_, double jarg2);
  public final static native double HOutputHandlerOptions_m_ratio_cm_to_internal_units_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native double HOutputHandlerOptions_PrintToScale__SWIG_0(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_PrintToScale__SWIG_1(long jarg1, HOutputHandlerOptions jarg1_, double jarg2);
  public final static native void HOutputHandlerOptions_m_pBehaviorManager_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2, HBhvBehaviorManager jarg2_);
  public final static native long HOutputHandlerOptions_m_pBehaviorManager_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_pDWFModelName_set(long jarg1, HOutputHandlerOptions jarg1_, String jarg2);
  public final static native String HOutputHandlerOptions_m_pDWFModelName_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_pPDFResourceDirectory_set(long jarg1, HOutputHandlerOptions jarg1_, String jarg2);
  public final static native String HOutputHandlerOptions_m_pPDFResourceDirectory_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_pPRCAsmModelFile_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_pPRCAsmModelFile_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bActivateOnPageOpen_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bActivateOnPageOpen_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_fAnnotLeft_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_fAnnotLeft_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_fAnnotRight_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_fAnnotRight_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_fAnnotBottom_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_fAnnotBottom_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_fAnnotTop_set(long jarg1, HOutputHandlerOptions jarg1_, float jarg2);
  public final static native float HOutputHandlerOptions_m_fAnnotTop_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_ePrcBrepCompression_set(long jarg1, HOutputHandlerOptions jarg1_, int jarg2);
  public final static native int HOutputHandlerOptions_m_ePrcBrepCompression_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bPrcRemoveBRep_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bPrcRemoveBRep_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bPrcRemoveAttributes_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bPrcRemoveAttributes_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bPrcUseNameUserData_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bPrcUseNameUserData_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_iPrcNameUserDataIndex_set(long jarg1, HOutputHandlerOptions jarg1_, long jarg2);
  public final static native long HOutputHandlerOptions_m_iPrcNameUserDataIndex_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bPrcCompressTessellation_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bPrcCompressTessellation_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bAVIShowCompressionDialog_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bAVIShowCompressionDialog_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bAVICodec_set(long jarg1, HOutputHandlerOptions jarg1_, String jarg2);
  public final static native String HOutputHandlerOptions_m_bAVICodec_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_m_bExporting2DDwf_set(long jarg1, HOutputHandlerOptions jarg1_, boolean jarg2);
  public final static native boolean HOutputHandlerOptions_m_bExporting2DDwf_get(long jarg1, HOutputHandlerOptions jarg1_);
  public final static native void HOutputHandlerOptions_get_m_PageMargins(long jarg1, HOutputHandlerOptions jarg1_, float[] jarg2, int jarg3);
  public final static native void delete_HOutputHandler(long jarg1);
  public final static native String HOutputHandler_GetOutputName(long jarg1, HOutputHandler jarg1_);
  public final static native long HOutputHandler_GetOutputOps(long jarg1, HOutputHandler jarg1_);
  public final static native void HOutputHandler_RegisterOutputHandlerTypes(long jarg1, HOutputHandler jarg1_);
  public final static native int HOutputHandler_FileOutputByKey__SWIG_0(long jarg1, HOutputHandler jarg1_, String jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HOutputHandler_FileOutputByKey__SWIG_1(long jarg1, HOutputHandler jarg1_, long jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HOutputHandler_FileOutputByKey__SWIG_2(long jarg1, HOutputHandler jarg1_, int[] jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HOutputHandler_FileOutputFromImageKey__SWIG_0(long jarg1, HOutputHandler jarg1_, String jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HOutputHandler_FileOutputFromImageKey__SWIG_1(long jarg1, HOutputHandler jarg1_, long jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native String HOutputHandler_GetOutputTypesString(long jarg1, HOutputHandler jarg1_);
  public final static native int HOutputHandler_GetOutputStyle(long jarg1, HOutputHandler jarg1_);
  public final static native String HOutputHandler_GetOutputDefaultHSRA(long jarg1, HOutputHandler jarg1_);
  public final static native String HOutputHandler_GetOutputProgress(long jarg1, HOutputHandler jarg1_);
  public final static native float HOutputHandler_GetOutputPercentProgress(long jarg1, HOutputHandler jarg1_);
  public final static native long HOutputHandler_GetOutputInformation(long jarg1, HOutputHandler jarg1_);
  public final static native long HOutputHandler_SetOutputProgressNoticeCallback(long jarg1, HOutputHandler jarg1_, long jarg2, HIONoticeCallback jarg2_);
  public final static native long HOutputHandler_SetOutputPercentProgressNoticeCallback(long jarg1, HOutputHandler jarg1_, long jarg2, HIOPercentNoticeCallback jarg2_);
  public final static native long HOutputHandler_SetOutputInformationNoticeCallback(long jarg1, HOutputHandler jarg1_, long jarg2, HIONoticeCallback jarg2_);
  public final static native void HOutputHandler_ReportOutputProgress(long jarg1, HOutputHandler jarg1_, String jarg2);
  public final static native void HOutputHandler_ReportOutputPercentProgress(long jarg1, HOutputHandler jarg1_, float jarg2);
  public final static native void HOutputHandler_ReportOutputInformation(long jarg1, HOutputHandler jarg1_, String jarg2);
  public final static native void HOutputHandler_SetModuleDirectory__SWIG_0(long jarg1, HOutputHandler jarg1_, String jarg2);
  public final static native void HOutputHandler_SetModuleDirectory__SWIG_1(long jarg1, HOutputHandler jarg1_, long jarg2);
  public final static native long new_HIOManager();
  public final static native void delete_HIOManager(long jarg1);
  public final static native long HIOManager_RegisterInputHandler(long jarg1, HIOManager jarg1_, String jarg2, long jarg3, HInputHandler jarg3_);
  public final static native long HIOManager_RegisterOutputHandler(long jarg1, HIOManager jarg1_, String jarg2, long jarg3, HOutputHandler jarg3_);
  public final static native long HIOManager_RegisterConnector(long jarg1, HIOManager jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native long HIOManager_GetInputHandler__SWIG_0(long jarg1, HIOManager jarg1_, String jarg2);
  public final static native long HIOManager_GetInputHandler__SWIG_1(long jarg1, HIOManager jarg1_, long jarg2);
  public final static native long HIOManager_GetOutputHandler__SWIG_0(long jarg1, HIOManager jarg1_, String jarg2);
  public final static native long HIOManager_GetOutputHandler__SWIG_1(long jarg1, HIOManager jarg1_, long jarg2);
  public final static native void HIOManager_RegisterHandlers(long jarg1, HIOManager jarg1_);
  public final static native String HIOManager_GetInputHandlerTypes(long jarg1, HIOManager jarg1_);
  public final static native String HIOManager_GetOutputHandlerTypes(long jarg1, HIOManager jarg1_);
  public final static native long HIOManager_CreateConnector(long jarg1, HIOManager jarg1_, String jarg2);
  public final static native void HIOManager_FreeConnector(long jarg1, HIOManager jarg1_, long jarg2, HIOConnector jarg2_);
  public final static native long HIOManager_GetCurrentHIOManager();
  public final static native void HIOManager_GetFileOutputResultString(int jarg1, StringBuffer jarg2);
  public final static native long new_HImManager();
  public final static native void delete_HImManager(long jarg1);
  public final static native void HImManager_RegisterCallbacks(long jarg1, HImManager jarg1_);
  public final static native void HImManager_RegisterOneCallback(long jarg1, HImManager jarg1_, String jarg2, long jarg3);
  public final static native void HImManager_SetCallback__SWIG_0(long jarg1, HImManager jarg1_, long jarg2, String jarg3, String jarg4);
  public final static native void HImManager_SetCallback__SWIG_1(long jarg1, HImManager jarg1_, String jarg2, String jarg3);
  public final static native void HImManager_UnSetOneCallback__SWIG_0(long jarg1, HImManager jarg1_, long jarg2, String jarg3);
  public final static native void HImManager_UnSetOneCallback__SWIG_1(long jarg1, HImManager jarg1_, String jarg2);
  public final static native void HImManager_ShowCallback(long jarg1, HImManager jarg1_, String jarg2, StringBuffer jarg3);
  public final static native long HImManager_GetCurrentHImManager();
  public final static native void HImUtility_RegisterCallbacks();
  public final static native void HImUtility_set_clip_rectangle(long jarg1, long jarg2);
  public final static native void HImUtility_suppress_3d_geometry(long jarg1, long jarg2);
  public final static native void HImUtility_draw_gradiated_window_background(long jarg1, long jarg2);
  public final static native void HImUtility_draw_annotation_lines(long jarg1, long jarg2);
  public final static native void HImUtility_drawTextInfront(long jarg1, long jarg2);
  public final static native void delete_HImUtility(long jarg1);
  public final static native void HConstFRSimpType_m_SimpLevelMin_set(long jarg1, HConstFRSimpType jarg1_, int jarg2);
  public final static native int HConstFRSimpType_m_SimpLevelMin_get(long jarg1, HConstFRSimpType jarg1_);
  public final static native void HConstFRSimpType_m_SimpLevelMax_set(long jarg1, HConstFRSimpType jarg1_, int jarg2);
  public final static native int HConstFRSimpType_m_SimpLevelMax_get(long jarg1, HConstFRSimpType jarg1_);
  public final static native void delete_HConstFRSimpType(long jarg1);
  public final static native void HConstFRSimpType_Reset(long jarg1, HConstFRSimpType jarg1_, long jarg2, HConstantFrameRate jarg2_);
  public final static native void HConstFRSimpType_Set(long jarg1, HConstFRSimpType jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native void HConstFRSimpType_Update(long jarg1, HConstFRSimpType jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HConstFRSimpType_GetFRType(long jarg1, HConstFRSimpType jarg1_);
  public final static native int HConstFRSimpType_GetMinSimpLevel(long jarg1, HConstFRSimpType jarg1_);
  public final static native int HConstFRSimpType_GetMaxSimpLevel(long jarg1, HConstFRSimpType jarg1_);
  public final static native long HConstFRSimpType_CreateList(int jarg1);
  public final static native long new_HFrExtent__SWIG_0();
  public final static native long new_HFrExtent__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrExtent(long jarg1);
  public final static native void HFrExtent_SetMultiplier(long jarg1, HFrExtent jarg1_, int jarg2);
  public final static native void HFrExtent_Set(long jarg1, HFrExtent jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native void HFrExtent_SetUseLod(long jarg1, HFrExtent jarg1_, boolean jarg2);
  public final static native boolean HFrExtent_GetUseLod(long jarg1, HFrExtent jarg1_);
  public final static native int HFrExtent_GetFRType(long jarg1, HFrExtent jarg1_);
  public final static native long HFrExtent_Create(int jarg1, int jarg2);
  public final static native long new_HFrNoSimpAA__SWIG_0();
  public final static native long new_HFrNoSimpAA__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrNoSimpAA(long jarg1);
  public final static native void HFrNoSimpAA_Set(long jarg1, HFrNoSimpAA jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrNoSimpAA_GetFRType(long jarg1, HFrNoSimpAA jarg1_);
  public final static native void HFrNoSimpAA_Update(long jarg1, HFrNoSimpAA jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native long HFrNoSimpAA_Create(int jarg1, int jarg2);
  public final static native long new_HFrNoSimp__SWIG_0();
  public final static native long new_HFrNoSimp__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrNoSimp(long jarg1);
  public final static native void HFrNoSimp_Set(long jarg1, HFrNoSimp jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrNoSimp_GetFRType(long jarg1, HFrNoSimp jarg1_);
  public final static native long HFrNoSimp_Create(int jarg1, int jarg2);
  public final static native long new_HFrLodClamp__SWIG_0();
  public final static native long new_HFrLodClamp__SWIG_1(int jarg1, int jarg2);
  public final static native void HFrLodClamp_Reset(long jarg1, HFrLodClamp jarg1_, long jarg2, HConstantFrameRate jarg2_);
  public final static native void delete_HFrLodClamp(long jarg1);
  public final static native void HFrLodClamp_Set(long jarg1, HFrLodClamp jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrLodClamp_GetFRType(long jarg1, HFrLodClamp jarg1_);
  public final static native long HFrLodClamp_Create(int jarg1, int jarg2);
  public final static native void HFrLodClamp_SetSegmentSwitch(long jarg1, HFrLodClamp jarg1_, boolean jarg2);
  public final static native void HFrLodClamp_m_bSegmentSwitch_set(long jarg1, HFrLodClamp jarg1_, boolean jarg2);
  public final static native boolean HFrLodClamp_m_bSegmentSwitch_get(long jarg1, HFrLodClamp jarg1_);
  public final static native long new_HFrLodThreshold__SWIG_0();
  public final static native long new_HFrLodThreshold__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrLodThreshold(long jarg1);
  public final static native void HFrLodThreshold_Set(long jarg1, HFrLodThreshold jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrLodThreshold_GetFRType(long jarg1, HFrLodThreshold jarg1_);
  public final static native long HFrLodThreshold_Create(int jarg1, int jarg2);
  public final static native long new_HFrSolidBBox__SWIG_0();
  public final static native long new_HFrSolidBBox__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrSolidBBox(long jarg1);
  public final static native void HFrSolidBBox_Set(long jarg1, HFrSolidBBox jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrSolidBBox_GetFRType(long jarg1, HFrSolidBBox jarg1_);
  public final static native void HFrSolidBBox_RegisterCallbacks();
  public final static native long HFrSolidBBox_Create(int jarg1, int jarg2);
  public final static native long new_HFrWireframeBBox__SWIG_0();
  public final static native long new_HFrWireframeBBox__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrWireframeBBox(long jarg1);
  public final static native void HFrWireframeBBox_Set(long jarg1, HFrWireframeBBox jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrWireframeBBox_GetFRType(long jarg1, HFrWireframeBBox jarg1_);
  public final static native void HFrWireframeBBox_RegisterCallbacks();
  public final static native long HFrWireframeBBox_Create(int jarg1, int jarg2);
  public final static native long new_HFrWireframe__SWIG_0();
  public final static native long new_HFrWireframe__SWIG_1(int jarg1, int jarg2);
  public final static native void delete_HFrWireframe(long jarg1);
  public final static native void HFrWireframe_Set(long jarg1, HFrWireframe jarg1_, long jarg2, HConstantFrameRate jarg2_, int jarg3);
  public final static native int HFrWireframe_GetFRType(long jarg1, HFrWireframe jarg1_);
  public final static native long HFrWireframe_Create(int jarg1, int jarg2);
  public final static native long new_HConstantFrameRate(long jarg1, HBaseView jarg1_);
  public final static native void delete_HConstantFrameRate(long jarg1);
  public final static native long HConstantFrameRate_GetView(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_UpdateLevel(long jarg1, HConstantFrameRate jarg1_, int jarg2, int jarg3);
  public final static native boolean HConstantFrameRate_GetMode__SWIG_0(long jarg1, HConstantFrameRate jarg1_, long jarg2, float[] jarg3, int[] jarg4);
  public final static native boolean HConstantFrameRate_GetMode__SWIG_1(long jarg1, HConstantFrameRate jarg1_, long jarg2, float[] jarg3);
  public final static native boolean HConstantFrameRate_GetMode__SWIG_2(long jarg1, HConstantFrameRate jarg1_, long jarg2);
  public final static native boolean HConstantFrameRate_GetMode__SWIG_3(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_Init__SWIG_0(long jarg1, HConstantFrameRate jarg1_, float jarg2, long jarg3, int jarg4, float jarg5);
  public final static native void HConstantFrameRate_Init__SWIG_1(long jarg1, HConstantFrameRate jarg1_, float jarg2, long jarg3, int jarg4);
  public final static native void HConstantFrameRate_Init__SWIG_2(long jarg1, HConstantFrameRate jarg1_, float jarg2, long jarg3);
  public final static native void HConstantFrameRate_Init__SWIG_3(long jarg1, HConstantFrameRate jarg1_, float jarg2);
  public final static native void HConstantFrameRate_Init__SWIG_4(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_Shutdown(long jarg1, HConstantFrameRate jarg1_);
  public final static native boolean HConstantFrameRate_GetActive(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_Watch(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_Start(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_Stop(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_IncreaseDetailTemp(long jarg1, HConstantFrameRate jarg1_);
  public final static native boolean HConstantFrameRate_ViewpointHasChanged__SWIG_0(long jarg1, HConstantFrameRate jarg1_, boolean jarg2);
  public final static native boolean HConstantFrameRate_ViewpointHasChanged__SWIG_1(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_SetDetailIncMode(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native void HConstantFrameRate_SetDetailIncOnIdleMode(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native int HConstantFrameRate_GetDetailIncMode(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_SetDetailDecMode(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native int HConstantFrameRate_GetDetailDecMode(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_ResetListPointers(long jarg1, HConstantFrameRate jarg1_);
  public final static native float HConstantFrameRate_GetTargetFrameRate(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_SetTargetFrameRate(long jarg1, HConstantFrameRate jarg1_, float jarg2);
  public final static native void HConstantFrameRate_SetDeadZone(long jarg1, HConstantFrameRate jarg1_, float jarg2);
  public final static native void HConstantFrameRate_SetEmergencyDetailDecrease(long jarg1, HConstantFrameRate jarg1_, boolean jarg2);
  public final static native void HConstantFrameRate_SetActivityType(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native int HConstantFrameRate_GetActivityType(long jarg1, HConstantFrameRate jarg1_);
  public final static native int HConstantFrameRate_GetSimpLevel(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_AdjustLodOptions(long jarg1, HConstantFrameRate jarg1_);
  public final static native boolean HConstantFrameRate_GetDetailIncreaseState(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_SetDetailLevel(long jarg1, HConstantFrameRate jarg1_, int jarg2, int jarg3);
  public final static native long HConstantFrameRate_GetSimpType(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native void HConstantFrameRate_SetSimpLevel(long jarg1, HConstantFrameRate jarg1_, int jarg2);
  public final static native void HConstantFrameRate_AdjustDefaultDetailLevelToModel(long jarg1, HConstantFrameRate jarg1_);
  public final static native boolean HConstantFrameRate_Tick(float jarg1, float jarg2, long jarg3);
  public final static native void HConstantFrameRate_SetDisableIncreaseTemp(long jarg1, HConstantFrameRate jarg1_, boolean jarg2);
  public final static native void HConstantFrameRate_InitiateDelay(long jarg1, HConstantFrameRate jarg1_);
  public final static native int HConstantFrameRate_GetDetailLevelNum(long jarg1, HConstantFrameRate jarg1_);
  public final static native int HConstantFrameRate_GetTotalDetailLevelNum(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_SetWatchActivity(long jarg1, HConstantFrameRate jarg1_, boolean jarg2);
  public final static native void HConstantFrameRate_MajorDetailDecrease(long jarg1, HConstantFrameRate jarg1_);
  public final static native void HConstantFrameRate_MajorDetailIncrease(long jarg1, HConstantFrameRate jarg1_);
  public final static native long new_HDebugZBuffer(long jarg1, HBaseView jarg1_);
  public final static native void delete_HDebugZBuffer(long jarg1);
  public final static native void HDebugZBuffer_OpenglFinishPicture(long jarg1, HDebugZBuffer jarg1_, long jarg2, boolean jarg3);
  public final static native void HDebugZBuffer_Update(long jarg1, HDebugZBuffer jarg1_);
  public final static native void HDebugZBuffer_RegisterCallbacks();
  public final static native void HDebugZBuffer_ogl_finish_picture(long jarg1, boolean jarg2);
  public final static native long new_HOpObjectTranslate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpObjectTranslate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpObjectTranslate__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpObjectTranslate(long jarg1);
  public final static native String HOpObjectTranslate_GetName(long jarg1, HOpObjectTranslate jarg1_);
  public final static native String HOpObjectTranslate_GetNameSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_);
  public final static native int HOpObjectTranslate_OnLButtonDown(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonDownSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonDownAndMove(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonDownAndMoveSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonUp(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonUpSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonDblClk(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectTranslate_OnLButtonDblClkSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpObjectTranslate_m_ptRecent_set(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectTranslate_m_ptRecent_get(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_m_ptRecentVP_set(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectTranslate_m_ptRecentVP_get(long jarg1, HOpObjectTranslate jarg1_);
  public final static native long HOpObjectTranslate_Clone(long jarg1, HOpObjectTranslate jarg1_);
  public final static native long HOpObjectTranslate_CloneSwigExplicitHOpObjectTranslate(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_Init(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_Cleanup(long jarg1, HOpObjectTranslate jarg1_);
  public final static native int HOpObjectTranslate_GetMatrix(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_, int jarg3, long[] jarg4, float[] jarg5);
  public final static native int HOpObjectTranslate_UpdateMousePos(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpObjectTranslate_m_bTemporarySelection_set(long jarg1, HOpObjectTranslate jarg1_, boolean jarg2);
  public final static native boolean HOpObjectTranslate_m_bTemporarySelection_get(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_m_bInitialMatrix_set(long jarg1, HOpObjectTranslate jarg1_, boolean jarg2);
  public final static native boolean HOpObjectTranslate_m_bInitialMatrix_get(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_m_ptLast_set(long jarg1, HOpObjectTranslate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectTranslate_m_ptLast_get(long jarg1, HOpObjectTranslate jarg1_);
  public final static native void HOpObjectTranslate_director_connect(HOpObjectTranslate obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpObjectTranslate_change_ownership(HOpObjectTranslate obj, long cptr, boolean take_or_release);
  public final static native long new_HOpConstructCircle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native long new_HOpConstructCircle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructCircle__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructCircle__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructCircle(long jarg1);
  public final static native String HOpConstructCircle_GetName(long jarg1, HOpConstructCircle jarg1_);
  public final static native String HOpConstructCircle_GetNameSwigExplicitHOpConstructCircle(long jarg1, HOpConstructCircle jarg1_);
  public final static native int HOpConstructCircle_OnLButtonDown(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCircle_OnLButtonDownSwigExplicitHOpConstructCircle(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCircle_OnLButtonDownAndMove(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCircle_OnLButtonDownAndMoveSwigExplicitHOpConstructCircle(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCircle_OnLButtonUp(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCircle_OnLButtonUpSwigExplicitHOpConstructCircle(long jarg1, HOpConstructCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpConstructCircle_Clone(long jarg1, HOpConstructCircle jarg1_);
  public final static native long HOpConstructCircle_CloneSwigExplicitHOpConstructCircle(long jarg1, HOpConstructCircle jarg1_);
  public final static native void HOpConstructCircle_m_radius_set(long jarg1, HOpConstructCircle jarg1_, float jarg2);
  public final static native float HOpConstructCircle_m_radius_get(long jarg1, HOpConstructCircle jarg1_);
  public final static native void HOpConstructCircle_director_connect(HOpConstructCircle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructCircle_change_ownership(HOpConstructCircle obj, long cptr, boolean take_or_release);
  public final static native void HOpConstructCone_m_height_set(long jarg1, HOpConstructCone jarg1_, float jarg2);
  public final static native float HOpConstructCone_m_height_get(long jarg1, HOpConstructCone jarg1_);
  public final static native void HOpConstructCone_m_RadiusLength_set(long jarg1, HOpConstructCone jarg1_, float jarg2);
  public final static native float HOpConstructCone_m_RadiusLength_get(long jarg1, HOpConstructCone jarg1_);
  public final static native void HOpConstructCone_m_WorldRadiusVector_set(long jarg1, HOpConstructCone jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpConstructCone_m_WorldRadiusVector_get(long jarg1, HOpConstructCone jarg1_);
  public final static native void HOpConstructCone_ConstructWireframeCone(long jarg1, HOpConstructCone jarg1_, long jarg2, HPoint jarg2_, float jarg3, float jarg4);
  public final static native long new_HOpConstructCone__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructCone__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructCone__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructCone(long jarg1);
  public final static native String HOpConstructCone_GetName(long jarg1, HOpConstructCone jarg1_);
  public final static native String HOpConstructCone_GetNameSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_);
  public final static native int HOpConstructCone_OnLButtonDown(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnLButtonDownSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnNoButtonDownAndMove(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnNoButtonDownAndMoveSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnLButtonDownAndMove(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnLButtonDownAndMoveSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnLButtonUp(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCone_OnLButtonUpSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpConstructCone_Clone(long jarg1, HOpConstructCone jarg1_);
  public final static native long HOpConstructCone_CloneSwigExplicitHOpConstructCone(long jarg1, HOpConstructCone jarg1_);
  public final static native void HOpConstructCone_director_connect(HOpConstructCone obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructCone_change_ownership(HOpConstructCone obj, long cptr, boolean take_or_release);
  public final static native void HOpConstructCuboid_m_ptEdge_set(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpConstructCuboid_m_ptEdge_get(long jarg1, HOpConstructCuboid jarg1_);
  public final static native long new_HOpConstructCuboid__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructCuboid__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructCuboid__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructCuboid(long jarg1);
  public final static native String HOpConstructCuboid_GetName(long jarg1, HOpConstructCuboid jarg1_);
  public final static native String HOpConstructCuboid_GetNameSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_);
  public final static native int HOpConstructCuboid_OnLButtonDown(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnLButtonDownSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnNoButtonDownAndMove(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnNoButtonDownAndMoveSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnLButtonDownAndMove(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnLButtonDownAndMoveSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnLButtonUp(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCuboid_OnLButtonUpSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpConstructCuboid_CreateCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HOpConstructCuboid_CreateCuboidSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HOpConstructCuboid_CreateSquare(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HOpConstructCuboid_CreateSquareSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native long HOpConstructCuboid_Clone(long jarg1, HOpConstructCuboid jarg1_);
  public final static native long HOpConstructCuboid_CloneSwigExplicitHOpConstructCuboid(long jarg1, HOpConstructCuboid jarg1_);
  public final static native void HOpConstructCuboid_director_connect(HOpConstructCuboid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructCuboid_change_ownership(HOpConstructCuboid obj, long cptr, boolean take_or_release);
  public final static native void HOpConstructCylinder_m_height_set(long jarg1, HOpConstructCylinder jarg1_, float jarg2);
  public final static native float HOpConstructCylinder_m_height_get(long jarg1, HOpConstructCylinder jarg1_);
  public final static native void HOpConstructCylinder_m_RadiusLength_set(long jarg1, HOpConstructCylinder jarg1_, float jarg2);
  public final static native float HOpConstructCylinder_m_RadiusLength_get(long jarg1, HOpConstructCylinder jarg1_);
  public final static native void HOpConstructCylinder_m_WorldRadiusVector_set(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpConstructCylinder_m_WorldRadiusVector_get(long jarg1, HOpConstructCylinder jarg1_);
  public final static native void HOpConstructCylinder_ConstructWireframeCylinder(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HPoint jarg2_, float jarg3, float jarg4);
  public final static native long new_HOpConstructCylinder__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructCylinder__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructCylinder__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructCylinder(long jarg1);
  public final static native String HOpConstructCylinder_GetName(long jarg1, HOpConstructCylinder jarg1_);
  public final static native String HOpConstructCylinder_GetNameSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_);
  public final static native int HOpConstructCylinder_OnLButtonDown(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnLButtonDownSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnNoButtonDownAndMove(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnNoButtonDownAndMoveSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnLButtonDownAndMove(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnLButtonDownAndMoveSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnLButtonUp(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructCylinder_OnLButtonUpSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpConstructCylinder_Clone(long jarg1, HOpConstructCylinder jarg1_);
  public final static native long HOpConstructCylinder_CloneSwigExplicitHOpConstructCylinder(long jarg1, HOpConstructCylinder jarg1_);
  public final static native void HOpConstructCylinder_director_connect(HOpConstructCylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructCylinder_change_ownership(HOpConstructCylinder obj, long cptr, boolean take_or_release);
  public final static native void HOpConstructNurbsCurve_m_Degree_set(long jarg1, HOpConstructNurbsCurve jarg1_, int jarg2);
  public final static native int HOpConstructNurbsCurve_m_Degree_get(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native void HOpConstructNurbsCurve_m_StartU_set(long jarg1, HOpConstructNurbsCurve jarg1_, int jarg2);
  public final static native int HOpConstructNurbsCurve_m_StartU_get(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native void HOpConstructNurbsCurve_m_EndU_set(long jarg1, HOpConstructNurbsCurve jarg1_, int jarg2);
  public final static native int HOpConstructNurbsCurve_m_EndU_get(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native void HOpConstructNurbsCurve_m_bFirstTimeThrough_set(long jarg1, HOpConstructNurbsCurve jarg1_, boolean jarg2);
  public final static native boolean HOpConstructNurbsCurve_m_bFirstTimeThrough_get(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native long new_HOpConstructNurbsCurve__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructNurbsCurve__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructNurbsCurve__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructNurbsCurve(long jarg1);
  public final static native long HOpConstructNurbsCurve_Clone(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native long HOpConstructNurbsCurve_CloneSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native String HOpConstructNurbsCurve_GetName(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native String HOpConstructNurbsCurve_GetNameSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_);
  public final static native int HOpConstructNurbsCurve_OnNoButtonDownAndMove(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnNoButtonDownAndMoveSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnLButtonDown(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnLButtonDownSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnLButtonDblClk(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnLButtonDblClkSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnMButtonDown(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructNurbsCurve_OnMButtonDownSwigExplicitHOpConstructNurbsCurve(long jarg1, HOpConstructNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpConstructNurbsCurve_director_connect(HOpConstructNurbsCurve obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructNurbsCurve_change_ownership(HOpConstructNurbsCurve obj, long cptr, boolean take_or_release);
  public final static native long new_HOpConstructPolyline__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructPolyline__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructPolyline__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructPolyline(long jarg1);
  public final static native long HOpConstructPolyline_Clone(long jarg1, HOpConstructPolyline jarg1_);
  public final static native long HOpConstructPolyline_CloneSwigExplicitHOpConstructPolyline(long jarg1, HOpConstructPolyline jarg1_);
  public final static native String HOpConstructPolyline_GetName(long jarg1, HOpConstructPolyline jarg1_);
  public final static native String HOpConstructPolyline_GetNameSwigExplicitHOpConstructPolyline(long jarg1, HOpConstructPolyline jarg1_);
  public final static native void HOpConstructPolyline_m_PolylineKey_set(long jarg1, HOpConstructPolyline jarg1_, long jarg2);
  public final static native long HOpConstructPolyline_m_PolylineKey_get(long jarg1, HOpConstructPolyline jarg1_);
  public final static native int HOpConstructPolyline_OnNoButtonDownAndMove(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructPolyline_OnNoButtonDownAndMoveSwigExplicitHOpConstructPolyline(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructPolyline_OnLButtonDown(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructPolyline_OnLButtonDownSwigExplicitHOpConstructPolyline(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructPolyline_OnLButtonDblClk(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructPolyline_OnLButtonDblClkSwigExplicitHOpConstructPolyline(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpConstructPolyline_m_ptLast_set(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpConstructPolyline_m_ptLast_get(long jarg1, HOpConstructPolyline jarg1_);
  public final static native void HOpConstructPolyline_m_pPolyline_set(long jarg1, HOpConstructPolyline jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpConstructPolyline_m_pPolyline_get(long jarg1, HOpConstructPolyline jarg1_);
  public final static native void HOpConstructPolyline_m_PolylineCount_set(long jarg1, HOpConstructPolyline jarg1_, int jarg2);
  public final static native int HOpConstructPolyline_m_PolylineCount_get(long jarg1, HOpConstructPolyline jarg1_);
  public final static native void HOpConstructPolyline_director_connect(HOpConstructPolyline obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructPolyline_change_ownership(HOpConstructPolyline obj, long cptr, boolean take_or_release);
  public final static native long new_HOpConstructRectangle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native long new_HOpConstructRectangle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructRectangle__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructRectangle__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructRectangle(long jarg1);
  public final static native String HOpConstructRectangle_GetName(long jarg1, HOpConstructRectangle jarg1_);
  public final static native String HOpConstructRectangle_GetNameSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_);
  public final static native long HOpConstructRectangle_Clone(long jarg1, HOpConstructRectangle jarg1_);
  public final static native long HOpConstructRectangle_CloneSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_);
  public final static native int HOpConstructRectangle_OnLButtonDown(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnLButtonDownSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnLButtonDownAndMove(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnLButtonDownAndMoveSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnLButtonUp(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnLButtonUpSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnRButtonUp(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructRectangle_OnRButtonUpSwigExplicitHOpConstructRectangle(long jarg1, HOpConstructRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpConstructRectangle_m_bRectangleExists_set(long jarg1, HOpConstructRectangle jarg1_, boolean jarg2);
  public final static native boolean HOpConstructRectangle_m_bRectangleExists_get(long jarg1, HOpConstructRectangle jarg1_);
  public final static native void HOpConstructRectangle_m_pSavedVisibility_set(long jarg1, HOpConstructRectangle jarg1_, String jarg2);
  public final static native String HOpConstructRectangle_m_pSavedVisibility_get(long jarg1, HOpConstructRectangle jarg1_);
  public final static native void HOpConstructRectangle_m_pSavedColor_set(long jarg1, HOpConstructRectangle jarg1_, String jarg2);
  public final static native String HOpConstructRectangle_m_pSavedColor_get(long jarg1, HOpConstructRectangle jarg1_);
  public final static native void HOpConstructRectangle_director_connect(HOpConstructRectangle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructRectangle_change_ownership(HOpConstructRectangle obj, long cptr, boolean take_or_release);
  public final static native void HOpConstructSphere_m_radius_set(long jarg1, HOpConstructSphere jarg1_, float jarg2);
  public final static native float HOpConstructSphere_m_radius_get(long jarg1, HOpConstructSphere jarg1_);
  public final static native void HOpConstructSphere_ConstructWireframeSphere(long jarg1, HOpConstructSphere jarg1_, long jarg2, HPoint jarg2_, float jarg3);
  public final static native long new_HOpConstructSphere__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpConstructSphere__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpConstructSphere__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpConstructSphere(long jarg1);
  public final static native String HOpConstructSphere_GetName(long jarg1, HOpConstructSphere jarg1_);
  public final static native String HOpConstructSphere_GetNameSwigExplicitHOpConstructSphere(long jarg1, HOpConstructSphere jarg1_);
  public final static native int HOpConstructSphere_OnLButtonDown(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructSphere_OnLButtonDownSwigExplicitHOpConstructSphere(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructSphere_OnLButtonDownAndMove(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructSphere_OnLButtonDownAndMoveSwigExplicitHOpConstructSphere(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructSphere_OnLButtonUp(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpConstructSphere_OnLButtonUpSwigExplicitHOpConstructSphere(long jarg1, HOpConstructSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpConstructSphere_Clone(long jarg1, HOpConstructSphere jarg1_);
  public final static native long HOpConstructSphere_CloneSwigExplicitHOpConstructSphere(long jarg1, HOpConstructSphere jarg1_);
  public final static native void HOpConstructSphere_director_connect(HOpConstructSphere obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpConstructSphere_change_ownership(HOpConstructSphere obj, long cptr, boolean take_or_release);
  public final static native int BOOLEAN_TYPE_NONE_get();
  public final static native int BOOLEAN_TYPE_INTERSECT_get();
  public final static native int BOOLEAN_TYPE_SUBTRACT_get();
  public final static native int BOOLEAN_TYPE_UNION_get();
  public final static native long new_HOpCreateBoolean__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native long new_HOpCreateBoolean__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateBoolean__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native void delete_HOpCreateBoolean(long jarg1);
  public final static native String HOpCreateBoolean_GetName(long jarg1, HOpCreateBoolean jarg1_);
  public final static native String HOpCreateBoolean_GetNameSwigExplicitHOpCreateBoolean(long jarg1, HOpCreateBoolean jarg1_);
  public final static native int HOpCreateBoolean_OnLButtonDown(long jarg1, HOpCreateBoolean jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateBoolean_OnLButtonDownSwigExplicitHOpCreateBoolean(long jarg1, HOpCreateBoolean jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateBoolean_Clone(long jarg1, HOpCreateBoolean jarg1_);
  public final static native long HOpCreateBoolean_CloneSwigExplicitHOpCreateBoolean(long jarg1, HOpCreateBoolean jarg1_);
  public final static native void HOpCreateBoolean_director_connect(HOpCreateBoolean obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateBoolean_change_ownership(HOpCreateBoolean obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateCircle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native long new_HOpCreateCircle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateCircle__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateCircle__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateCircle(long jarg1);
  public final static native String HOpCreateCircle_GetName(long jarg1, HOpCreateCircle jarg1_);
  public final static native String HOpCreateCircle_GetNameSwigExplicitHOpCreateCircle(long jarg1, HOpCreateCircle jarg1_);
  public final static native int HOpCreateCircle_OnLButtonUp(long jarg1, HOpCreateCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCircle_OnLButtonUpSwigExplicitHOpCreateCircle(long jarg1, HOpCreateCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateCircle_Clone(long jarg1, HOpCreateCircle jarg1_);
  public final static native long HOpCreateCircle_CloneSwigExplicitHOpCreateCircle(long jarg1, HOpCreateCircle jarg1_);
  public final static native void HOpCreateCircle_director_connect(HOpCreateCircle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateCircle_change_ownership(HOpCreateCircle obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateCone__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateCone__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateCone__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateCone(long jarg1);
  public final static native String HOpCreateCone_GetName(long jarg1, HOpCreateCone jarg1_);
  public final static native String HOpCreateCone_GetNameSwigExplicitHOpCreateCone(long jarg1, HOpCreateCone jarg1_);
  public final static native int HOpCreateCone_OnLButtonDown(long jarg1, HOpCreateCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCone_OnLButtonDownSwigExplicitHOpCreateCone(long jarg1, HOpCreateCone jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateCone_Clone(long jarg1, HOpCreateCone jarg1_);
  public final static native long HOpCreateCone_CloneSwigExplicitHOpCreateCone(long jarg1, HOpCreateCone jarg1_);
  public final static native void HOpCreateCone_director_connect(HOpCreateCone obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateCone_change_ownership(HOpCreateCone obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateCuboid__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateCuboid__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateCuboid__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateCuboid(long jarg1);
  public final static native String HOpCreateCuboid_GetName(long jarg1, HOpCreateCuboid jarg1_);
  public final static native String HOpCreateCuboid_GetNameSwigExplicitHOpCreateCuboid(long jarg1, HOpCreateCuboid jarg1_);
  public final static native int HOpCreateCuboid_OnLButtonDown(long jarg1, HOpCreateCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCuboid_OnLButtonDownSwigExplicitHOpCreateCuboid(long jarg1, HOpCreateCuboid jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateCuboid_Clone(long jarg1, HOpCreateCuboid jarg1_);
  public final static native long HOpCreateCuboid_CloneSwigExplicitHOpCreateCuboid(long jarg1, HOpCreateCuboid jarg1_);
  public final static native void HOpCreateCuboid_director_connect(HOpCreateCuboid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateCuboid_change_ownership(HOpCreateCuboid obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateCuttingPlane__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateCuttingPlane__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateCuttingPlane__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native String HOpCreateCuttingPlane_GetName(long jarg1, HOpCreateCuttingPlane jarg1_);
  public final static native String HOpCreateCuttingPlane_GetNameSwigExplicitHOpCreateCuttingPlane(long jarg1, HOpCreateCuttingPlane jarg1_);
  public final static native int HOpCreateCuttingPlane_OnLButtonDown(long jarg1, HOpCreateCuttingPlane jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCuttingPlane_OnLButtonDownSwigExplicitHOpCreateCuttingPlane(long jarg1, HOpCreateCuttingPlane jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCuttingPlane_OnLButtonUp(long jarg1, HOpCreateCuttingPlane jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCuttingPlane_OnLButtonUpSwigExplicitHOpCreateCuttingPlane(long jarg1, HOpCreateCuttingPlane jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateCuttingPlane_Clone(long jarg1, HOpCreateCuttingPlane jarg1_);
  public final static native long HOpCreateCuttingPlane_CloneSwigExplicitHOpCreateCuttingPlane(long jarg1, HOpCreateCuttingPlane jarg1_);
  public final static native void delete_HOpCreateCuttingPlane(long jarg1);
  public final static native void HOpCreateCuttingPlane_director_connect(HOpCreateCuttingPlane obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateCuttingPlane_change_ownership(HOpCreateCuttingPlane obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateCylinder__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateCylinder__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateCylinder__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateCylinder(long jarg1);
  public final static native String HOpCreateCylinder_GetName(long jarg1, HOpCreateCylinder jarg1_);
  public final static native String HOpCreateCylinder_GetNameSwigExplicitHOpCreateCylinder(long jarg1, HOpCreateCylinder jarg1_);
  public final static native int HOpCreateCylinder_OnLButtonDown(long jarg1, HOpCreateCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateCylinder_OnLButtonDownSwigExplicitHOpCreateCylinder(long jarg1, HOpCreateCylinder jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateCylinder_Clone(long jarg1, HOpCreateCylinder jarg1_);
  public final static native long HOpCreateCylinder_CloneSwigExplicitHOpCreateCylinder(long jarg1, HOpCreateCylinder jarg1_);
  public final static native void HOpCreateCylinder_director_connect(HOpCreateCylinder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateCylinder_change_ownership(HOpCreateCylinder obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateNurbs3D__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateNurbs3D__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateNurbs3D__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateNurbs3D(long jarg1);
  public final static native long HOpCreateNurbs3D_Clone(long jarg1, HOpCreateNurbs3D jarg1_);
  public final static native long HOpCreateNurbs3D_CloneSwigExplicitHOpCreateNurbs3D(long jarg1, HOpCreateNurbs3D jarg1_);
  public final static native String HOpCreateNurbs3D_GetName(long jarg1, HOpCreateNurbs3D jarg1_);
  public final static native String HOpCreateNurbs3D_GetNameSwigExplicitHOpCreateNurbs3D(long jarg1, HOpCreateNurbs3D jarg1_);
  public final static native int HOpCreateNurbs3D_OnLButtonDown(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbs3D_OnLButtonDownSwigExplicitHOpCreateNurbs3D(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbs3D_OnLButtonUp(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbs3D_OnLButtonUpSwigExplicitHOpCreateNurbs3D(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbs3D_OnLButtonDownAndMove(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbs3D_OnLButtonDownAndMoveSwigExplicitHOpCreateNurbs3D(long jarg1, HOpCreateNurbs3D jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateNurbs3D_InsertNurbs(long jarg1, HBaseView jarg1_, long jarg2, HNurbsSurface jarg2_, boolean jarg3);
  public final static native void HOpCreateNurbs3D_InsertNurbsFromMessage(String jarg1, int jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HOpCreateNurbs3D_EmitModifyControlPointMessage(long jarg1, HBaseView jarg1_, long jarg2, int jarg3, float jarg4, float jarg5, float jarg6);
  public final static native void HOpCreateNurbs3D_ModifyControlPointFromMessage(String jarg1, int jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HOpCreateNurbs3D_EmitFinishNurbsEditing(long jarg1, HBaseView jarg1_, long jarg2, boolean jarg3);
  public final static native void HOpCreateNurbs3D_FinishNurbsEditingFromMessage(String jarg1, int jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HOpCreateNurbs3D_director_connect(HOpCreateNurbs3D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateNurbs3D_change_ownership(HOpCreateNurbs3D obj, long cptr, boolean take_or_release);
  public final static native long new_HNurbsSurface();
  public final static native void delete_HNurbsSurface(long jarg1);
  public final static native void HNurbsSurface_Init__SWIG_0(long jarg1, HNurbsSurface jarg1_, long jarg2);
  public final static native long HNurbsSurface_Init__SWIG_1(long jarg1, HNurbsSurface jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, int jarg4, int jarg5, int jarg6, int jarg7, float jarg8, int jarg9);
  public final static native void HNurbsSurface_Recalculate(long jarg1, HNurbsSurface jarg1_);
  public final static native long HNurbsSurface_GetKey(long jarg1, HNurbsSurface jarg1_);
  public final static native void HNurbsSurface_DisplayVertices(long jarg1, HNurbsSurface jarg1_);
  public final static native void HNurbsSurface_HideVertices(long jarg1, HNurbsSurface jarg1_);
  public final static native void HNurbsSurface_EnableSelectability(long jarg1, HNurbsSurface jarg1_);
  public final static native void HNurbsSurface_DisableSelectability(long jarg1, HNurbsSurface jarg1_);
  public final static native void HNurbsSurface_UpdateVertex(long jarg1, HNurbsSurface jarg1_, int jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HNurbsSurface_ShowVertex(long jarg1, HNurbsSurface jarg1_, int jarg2, long jarg3, HPoint jarg3_);
  public final static native void HNurbsSurface_CreateDefaultVertices(long jarg1, HNurbsSurface jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native long HNurbsSurface_GetSurfaceMeshKey(long jarg1, HNurbsSurface jarg1_);
  public final static native long new_HOpCreateNurbsCurve__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateNurbsCurve__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateNurbsCurve__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateNurbsCurve(long jarg1);
  public final static native long HOpCreateNurbsCurve_Clone(long jarg1, HOpCreateNurbsCurve jarg1_);
  public final static native long HOpCreateNurbsCurve_CloneSwigExplicitHOpCreateNurbsCurve(long jarg1, HOpCreateNurbsCurve jarg1_);
  public final static native String HOpCreateNurbsCurve_GetName(long jarg1, HOpCreateNurbsCurve jarg1_);
  public final static native String HOpCreateNurbsCurve_GetNameSwigExplicitHOpCreateNurbsCurve(long jarg1, HOpCreateNurbsCurve jarg1_);
  public final static native int HOpCreateNurbsCurve_OnLButtonDblClk(long jarg1, HOpCreateNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateNurbsCurve_OnLButtonDblClkSwigExplicitHOpCreateNurbsCurve(long jarg1, HOpCreateNurbsCurve jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCreateNurbsCurve_director_connect(HOpCreateNurbsCurve obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateNurbsCurve_change_ownership(HOpCreateNurbsCurve obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreatePolyline__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreatePolyline__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreatePolyline__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreatePolyline(long jarg1);
  public final static native long HOpCreatePolyline_Clone(long jarg1, HOpCreatePolyline jarg1_);
  public final static native long HOpCreatePolyline_CloneSwigExplicitHOpCreatePolyline(long jarg1, HOpCreatePolyline jarg1_);
  public final static native String HOpCreatePolyline_GetName(long jarg1, HOpCreatePolyline jarg1_);
  public final static native String HOpCreatePolyline_GetNameSwigExplicitHOpCreatePolyline(long jarg1, HOpCreatePolyline jarg1_);
  public final static native int HOpCreatePolyline_OnLButtonDblClk(long jarg1, HOpCreatePolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreatePolyline_OnLButtonDblClkSwigExplicitHOpCreatePolyline(long jarg1, HOpCreatePolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCreatePolyline_director_connect(HOpCreatePolyline obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreatePolyline_change_ownership(HOpCreatePolyline obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateRectangle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native long new_HOpCreateRectangle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateRectangle__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateRectangle__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateRectangle(long jarg1);
  public final static native String HOpCreateRectangle_GetName(long jarg1, HOpCreateRectangle jarg1_);
  public final static native String HOpCreateRectangle_GetNameSwigExplicitHOpCreateRectangle(long jarg1, HOpCreateRectangle jarg1_);
  public final static native long HOpCreateRectangle_Clone(long jarg1, HOpCreateRectangle jarg1_);
  public final static native long HOpCreateRectangle_CloneSwigExplicitHOpCreateRectangle(long jarg1, HOpCreateRectangle jarg1_);
  public final static native int HOpCreateRectangle_OnLButtonUp(long jarg1, HOpCreateRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateRectangle_OnLButtonUpSwigExplicitHOpCreateRectangle(long jarg1, HOpCreateRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCreateRectangle_director_connect(HOpCreateRectangle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateRectangle_change_ownership(HOpCreateRectangle obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCreateSphere__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCreateSphere__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCreateSphere__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCreateSphere(long jarg1);
  public final static native String HOpCreateSphere_GetName(long jarg1, HOpCreateSphere jarg1_);
  public final static native String HOpCreateSphere_GetNameSwigExplicitHOpCreateSphere(long jarg1, HOpCreateSphere jarg1_);
  public final static native int HOpCreateSphere_OnLButtonUp(long jarg1, HOpCreateSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCreateSphere_OnLButtonUpSwigExplicitHOpCreateSphere(long jarg1, HOpCreateSphere jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCreateSphere_Clone(long jarg1, HOpCreateSphere jarg1_);
  public final static native long HOpCreateSphere_CloneSwigExplicitHOpCreateSphere(long jarg1, HOpCreateSphere jarg1_);
  public final static native void HOpCreateSphere_director_connect(HOpCreateSphere obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCreateSphere_change_ownership(HOpCreateSphere obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraManipulate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4, HBaseOperator jarg4_, long jarg5, HBaseOperator jarg5_, long jarg6, HBaseOperator jarg6_, long jarg7, HBaseOperator jarg7_, boolean jarg8);
  public final static native long new_HOpCameraManipulate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4, HBaseOperator jarg4_, long jarg5, HBaseOperator jarg5_, long jarg6, HBaseOperator jarg6_, long jarg7, HBaseOperator jarg7_);
  public final static native long new_HOpCameraManipulate__SWIG_2(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4, HBaseOperator jarg4_, long jarg5, HBaseOperator jarg5_, long jarg6, HBaseOperator jarg6_);
  public final static native long new_HOpCameraManipulate__SWIG_3(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4, HBaseOperator jarg4_, long jarg5, HBaseOperator jarg5_);
  public final static native long new_HOpCameraManipulate__SWIG_4(long jarg1, HBaseView jarg1_, int jarg2, int jarg3, long jarg4, HBaseOperator jarg4_);
  public final static native long new_HOpCameraManipulate__SWIG_5(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraManipulate__SWIG_6(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraManipulate__SWIG_7(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraManipulate(long jarg1);
  public final static native String HOpCameraManipulate_GetName(long jarg1, HOpCameraManipulate jarg1_);
  public final static native String HOpCameraManipulate_GetNameSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_);
  public final static native int HOpCameraManipulate_OnLButtonDown(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnLButtonDownSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnLButtonDownAndMove(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnLButtonDownAndMoveSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnLButtonUp(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnLButtonUpSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonDown(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonDownSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonDownAndMove(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonDownAndMoveSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonUp(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnMButtonUpSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonDown(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonDownSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonDownAndMove(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonDownAndMoveSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonUp(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraManipulate_OnRButtonUpSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCameraManipulate_Clone(long jarg1, HOpCameraManipulate jarg1_);
  public final static native long HOpCameraManipulate_CloneSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_);
  public final static native boolean HOpCameraManipulate_OperatorStarted(long jarg1, HOpCameraManipulate jarg1_);
  public final static native boolean HOpCameraManipulate_OperatorStartedSwigExplicitHOpCameraManipulate(long jarg1, HOpCameraManipulate jarg1_);
  public final static native long HOpCameraManipulate_GetOrbitOperator(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_HandleDblClk(long jarg1, HOpCameraManipulate jarg1_, float jarg2, float jarg3);
  public final static native boolean HOpCameraManipulate_GetLButtonDown(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_pDblClkTimer_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HTClient jarg2_);
  public final static native long HOpCameraManipulate_m_pDblClkTimer_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_pOrbitOperator_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HOpCameraManipulate_m_pOrbitOperator_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_pRelativeOrbitOperator_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HOpCameraManipulate_m_pRelativeOrbitOperator_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_pPanOperator_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HOpCameraManipulate_m_pPanOperator_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_pZoomOperator_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HBaseOperator jarg2_);
  public final static native long HOpCameraManipulate_m_pZoomOperator_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_m_ptRealOld_set(long jarg1, HOpCameraManipulate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpCameraManipulate_m_ptRealOld_get(long jarg1, HOpCameraManipulate jarg1_);
  public final static native void HOpCameraManipulate_director_connect(HOpCameraManipulate obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraManipulate_change_ownership(HOpCameraManipulate obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraOrbit__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraOrbit__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraOrbit__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraOrbit(long jarg1);
  public final static native String HOpCameraOrbit_GetName(long jarg1, HOpCameraOrbit jarg1_);
  public final static native String HOpCameraOrbit_GetNameSwigExplicitHOpCameraOrbit(long jarg1, HOpCameraOrbit jarg1_);
  public final static native int HOpCameraOrbit_OnLButtonDown(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbit_OnLButtonDownSwigExplicitHOpCameraOrbit(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbit_OnLButtonDownAndMove(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbit_OnLButtonDownAndMoveSwigExplicitHOpCameraOrbit(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbit_OnLButtonUp(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbit_OnLButtonUpSwigExplicitHOpCameraOrbit(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraOrbit_SetLightFollowsCamera(long jarg1, HOpCameraOrbit jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbit_GetLightFollowsCamera(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_SetSceneBoundingBoxVis(long jarg1, HOpCameraOrbit jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbit_GetSceneBoundingBoxVis(long jarg1, HOpCameraOrbit jarg1_);
  public final static native long HOpCameraOrbit_Clone(long jarg1, HOpCameraOrbit jarg1_);
  public final static native long HOpCameraOrbit_CloneSwigExplicitHOpCameraOrbit(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_Angle2_set(long jarg1, HOpCameraOrbit jarg1_, float jarg2);
  public final static native float HOpCameraOrbit_m_Angle2_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_Angle1_set(long jarg1, HOpCameraOrbit jarg1_, float jarg2);
  public final static native float HOpCameraOrbit_m_Angle1_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_Angle3_set(long jarg1, HOpCameraOrbit jarg1_, float jarg2);
  public final static native float HOpCameraOrbit_m_Angle3_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native boolean HOpCameraOrbit_GetSingleClick(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_bLightFollowsCamera_set(long jarg1, HOpCameraOrbit jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbit_m_bLightFollowsCamera_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_bSceneBoundingBoxVis_set(long jarg1, HOpCameraOrbit jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbit_m_bSceneBoundingBoxVis_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_bSingleClick_set(long jarg1, HOpCameraOrbit jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbit_m_bSingleClick_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_m_ptRealOld_set(long jarg1, HOpCameraOrbit jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpCameraOrbit_m_ptRealOld_get(long jarg1, HOpCameraOrbit jarg1_);
  public final static native void HOpCameraOrbit_director_connect(HOpCameraOrbit obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraOrbit_change_ownership(HOpCameraOrbit obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraOrbitTurntable__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraOrbitTurntable__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraOrbitTurntable__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraOrbitTurntable(long jarg1);
  public final static native String HOpCameraOrbitTurntable_GetName(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native String HOpCameraOrbitTurntable_GetNameSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonDown(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonDownSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonDownAndMove(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonDownAndMoveSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonUp(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnLButtonUpSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnMouseWheel(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraOrbitTurntable_OnMouseWheelSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraOrbitTurntable_SetLightFollowsCamera(long jarg1, HOpCameraOrbitTurntable jarg1_, boolean jarg2);
  public final static native boolean HOpCameraOrbitTurntable_GetLightFollowsCamera(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native void HOpCameraOrbitTurntable_SetCenter(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HOpCameraOrbitTurntable_UnSetCenter(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native long HOpCameraOrbitTurntable_Clone(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native long HOpCameraOrbitTurntable_CloneSwigExplicitHOpCameraOrbitTurntable(long jarg1, HOpCameraOrbitTurntable jarg1_);
  public final static native void HOpCameraOrbitTurntable_RotateAroundAxis(long jarg1, HOpCameraOrbitTurntable jarg1_, long jarg2, HPoint jarg2_, float jarg3);
  public final static native void HOpCameraOrbitTurntable_director_connect(HOpCameraOrbitTurntable obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraOrbitTurntable_change_ownership(HOpCameraOrbitTurntable obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraPan__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraPan__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraPan__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraPan(long jarg1);
  public final static native String HOpCameraPan_GetName(long jarg1, HOpCameraPan jarg1_);
  public final static native String HOpCameraPan_GetNameSwigExplicitHOpCameraPan(long jarg1, HOpCameraPan jarg1_);
  public final static native int HOpCameraPan_OnLButtonDown(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraPan_OnLButtonDownSwigExplicitHOpCameraPan(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraPan_OnLButtonDownAndMove(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraPan_OnLButtonDownAndMoveSwigExplicitHOpCameraPan(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraPan_OnLButtonUp(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraPan_OnLButtonUpSwigExplicitHOpCameraPan(long jarg1, HOpCameraPan jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraPan_SetLightFollowsCamera(long jarg1, HOpCameraPan jarg1_, boolean jarg2);
  public final static native boolean HOpCameraPan_GetLightFollowsCamera(long jarg1, HOpCameraPan jarg1_);
  public final static native long HOpCameraPan_Clone(long jarg1, HOpCameraPan jarg1_);
  public final static native long HOpCameraPan_CloneSwigExplicitHOpCameraPan(long jarg1, HOpCameraPan jarg1_);
  public final static native void HOpCameraPan_director_connect(HOpCameraPan obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraPan_change_ownership(HOpCameraPan obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraRelativeOrbit__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraRelativeOrbit__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraRelativeOrbit__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraRelativeOrbit(long jarg1);
  public final static native String HOpCameraRelativeOrbit_GetName(long jarg1, HOpCameraRelativeOrbit jarg1_);
  public final static native String HOpCameraRelativeOrbit_GetNameSwigExplicitHOpCameraRelativeOrbit(long jarg1, HOpCameraRelativeOrbit jarg1_);
  public final static native int HOpCameraRelativeOrbit_OnLButtonDown(long jarg1, HOpCameraRelativeOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraRelativeOrbit_OnLButtonDownSwigExplicitHOpCameraRelativeOrbit(long jarg1, HOpCameraRelativeOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraRelativeOrbit_OnLButtonDownAndMove(long jarg1, HOpCameraRelativeOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraRelativeOrbit_OnLButtonDownAndMoveSwigExplicitHOpCameraRelativeOrbit(long jarg1, HOpCameraRelativeOrbit jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCameraRelativeOrbit_Clone(long jarg1, HOpCameraRelativeOrbit jarg1_);
  public final static native long HOpCameraRelativeOrbit_CloneSwigExplicitHOpCameraRelativeOrbit(long jarg1, HOpCameraRelativeOrbit jarg1_);
  public final static native void HOpCameraRelativeOrbit_SetCenter(long jarg1, HOpCameraRelativeOrbit jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpCameraRelativeOrbit_GetCenter(long jarg1, HOpCameraRelativeOrbit jarg1_);
  public final static native void HOpCameraRelativeOrbit_director_connect(HOpCameraRelativeOrbit obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraRelativeOrbit_change_ownership(HOpCameraRelativeOrbit obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraWalk__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraWalk__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraWalk__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraWalk(long jarg1);
  public final static native String HOpCameraWalk_GetName(long jarg1, HOpCameraWalk jarg1_);
  public final static native String HOpCameraWalk_GetNameSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_);
  public final static native int HOpCameraWalk_OnLButtonDown(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnLButtonDownSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnLButtonDownAndMove(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnLButtonDownAndMoveSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnLButtonUp(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnLButtonUpSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraWalk_SetLightFollowsCamera(long jarg1, HOpCameraWalk jarg1_, boolean jarg2);
  public final static native boolean HOpCameraWalk_GetLightFollowsCamera(long jarg1, HOpCameraWalk jarg1_);
  public final static native int HOpCameraWalk_OnMouseWheel(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMouseWheelSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonDown(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonDownSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonDownAndMove(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonDownAndMoveSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonUp(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnMButtonUpSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpCameraWalk_Clone(long jarg1, HOpCameraWalk jarg1_);
  public final static native long HOpCameraWalk_CloneSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_OnWalk(long jarg1, HOpCameraWalk jarg1_, float jarg2, float jarg3);
  public final static native void HOpCameraWalk_OnKeyWalk(long jarg1, HOpCameraWalk jarg1_, float jarg2, float jarg3);
  public final static native void HOpCameraWalk_OnButtonWalk(long jarg1, HOpCameraWalk jarg1_, String jarg2, int jarg3);
  public final static native boolean HOpCameraWalk_WalkTimerClbk(float jarg1, float jarg2, long jarg3);
  public final static native void HOpCameraWalk_ViewDeleted(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_SetKeyboardWalk(long jarg1, HOpCameraWalk jarg1_, boolean jarg2);
  public final static native void HOpCameraWalk_SetCollision(long jarg1, HOpCameraWalk jarg1_, boolean jarg2);
  public final static native void HOpCameraWalk_SetSnapToFloor(long jarg1, HOpCameraWalk jarg1_, boolean jarg2);
  public final static native void HOpCameraWalk_SetAvatarHeight(long jarg1, HOpCameraWalk jarg1_, float jarg2);
  public final static native void HOpCameraWalk_SetStepHeightUp(long jarg1, HOpCameraWalk jarg1_, float jarg2);
  public final static native void HOpCameraWalk_SetStepHeightDown(long jarg1, HOpCameraWalk jarg1_, float jarg2);
  public final static native float HOpCameraWalk_GetAvatarHeight(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_SetSpeed(long jarg1, HOpCameraWalk jarg1_, float jarg2);
  public final static native float HOpCameraWalk_GetSpeed(long jarg1, HOpCameraWalk jarg1_);
  public final static native float HOpCameraWalk_CalculateExtents(long jarg1, HBaseView jarg1_);
  public final static native int HOpCameraWalk_OnKeyDown(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_OnKeyDownSwigExplicitHOpCameraWalk(long jarg1, HOpCameraWalk jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraWalk_ImageAction(long jarg1, HImageRegion jarg1_, long jarg2, int jarg3);
  public final static native void HOpCameraWalk_ShowNavigationWindow__SWIG_0(long jarg1, HOpCameraWalk jarg1_, StringBuffer jarg2);
  public final static native void HOpCameraWalk_ShowNavigationWindow__SWIG_1(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_RemoveNavigationWindow(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_FitControlsToCorner(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_SnapToGround(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_AdjustCameraCollision__SWIG_0(long jarg1, HOpCameraWalk jarg1_, long jarg2, HCamera jarg2_, boolean jarg3);
  public final static native void HOpCameraWalk_AdjustCameraCollision__SWIG_1(long jarg1, HOpCameraWalk jarg1_, long jarg2, HCamera jarg2_);
  public final static native void HOpCameraWalk_AdjustHeight(long jarg1, HOpCameraWalk jarg1_, long jarg2, HCamera jarg2_);
  public final static native boolean HOpCameraWalk_signal_callback(int jarg1, long jarg2, long jarg3);
  public final static native void HOpCameraWalk_ReadjustPosition(long jarg1, HOpCameraWalk jarg1_);
  public final static native void HOpCameraWalk_SetupControls(long jarg1, HOpCameraWalk jarg1_, char jarg2, char jarg3, char jarg4, char jarg5, char jarg6, char jarg7);
  public final static native void HOpCameraWalk_director_connect(HOpCameraWalk obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraWalk_change_ownership(HOpCameraWalk obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraZoom__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraZoom__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraZoom__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraZoom(long jarg1);
  public final static native String HOpCameraZoom_GetName(long jarg1, HOpCameraZoom jarg1_);
  public final static native String HOpCameraZoom_GetNameSwigExplicitHOpCameraZoom(long jarg1, HOpCameraZoom jarg1_);
  public final static native int HOpCameraZoom_OnLButtonDown(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoom_OnLButtonDownSwigExplicitHOpCameraZoom(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoom_OnLButtonDownAndMove(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoom_OnLButtonDownAndMoveSwigExplicitHOpCameraZoom(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoom_OnLButtonUp(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoom_OnLButtonUpSwigExplicitHOpCameraZoom(long jarg1, HOpCameraZoom jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraZoom_SetLightFollowsCamera(long jarg1, HOpCameraZoom jarg1_, boolean jarg2);
  public final static native boolean HOpCameraZoom_GetLightFollowsCamera(long jarg1, HOpCameraZoom jarg1_);
  public final static native long HOpCameraZoom_Clone(long jarg1, HOpCameraZoom jarg1_);
  public final static native long HOpCameraZoom_CloneSwigExplicitHOpCameraZoom(long jarg1, HOpCameraZoom jarg1_);
  public final static native void HOpCameraZoom_director_connect(HOpCameraZoom obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraZoom_change_ownership(HOpCameraZoom obj, long cptr, boolean take_or_release);
  public final static native long new_HOpCameraZoomBox__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpCameraZoomBox__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpCameraZoomBox__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpCameraZoomBox(long jarg1);
  public final static native String HOpCameraZoomBox_GetName(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native String HOpCameraZoomBox_GetNameSwigExplicitHOpCameraZoomBox(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native int HOpCameraZoomBox_OnLButtonUp(long jarg1, HOpCameraZoomBox jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoomBox_OnLButtonUpSwigExplicitHOpCameraZoomBox(long jarg1, HOpCameraZoomBox jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoomBox_OnLButtonDblClk(long jarg1, HOpCameraZoomBox jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpCameraZoomBox_OnLButtonDblClkSwigExplicitHOpCameraZoomBox(long jarg1, HOpCameraZoomBox jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpCameraZoomBox_SetLightFollowsCamera(long jarg1, HOpCameraZoomBox jarg1_, boolean jarg2);
  public final static native boolean HOpCameraZoomBox_GetLightFollowsCamera(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native long HOpCameraZoomBox_Clone(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native long HOpCameraZoomBox_CloneSwigExplicitHOpCameraZoomBox(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native boolean HOpCameraZoomBox_ComputeReasonableTarget(long jarg1, HOpCameraZoomBox jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native void HOpCameraZoomBox_ComputeNewField(long jarg1, HOpCameraZoomBox jarg1_, float[] jarg2, float[] jarg3, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_, long jarg6, HPoint jarg6_);
  public final static native void HOpCameraZoomBox_m_LightFollowsCamera_set(long jarg1, HOpCameraZoomBox jarg1_, boolean jarg2);
  public final static native boolean HOpCameraZoomBox_m_LightFollowsCamera_get(long jarg1, HOpCameraZoomBox jarg1_);
  public final static native void HOpCameraZoomBox_director_connect(HOpCameraZoomBox obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpCameraZoomBox_change_ownership(HOpCameraZoomBox obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupAnnotate__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4, boolean jarg5);
  public final static native long new_HOpMarkupAnnotate__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4);
  public final static native long new_HOpMarkupAnnotate__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3);
  public final static native long new_HOpMarkupAnnotate__SWIG_3(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long new_HOpMarkupAnnotate__SWIG_4(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpMarkupAnnotate(long jarg1);
  public final static native String HOpMarkupAnnotate_GetName(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native String HOpMarkupAnnotate_GetNameSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native int HOpMarkupAnnotate_OnLButtonDown(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnLButtonDownSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnLButtonDownAndMove(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnLButtonDownAndMoveSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnRButtonDown(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnRButtonDownSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnLButtonUp(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnLButtonUpSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnKeyDown(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupAnnotate_OnKeyDownSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMarkupAnnotate_Clone(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native long HOpMarkupAnnotate_CloneSwigExplicitHOpMarkupAnnotate(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_m_iBackgroundType_set(long jarg1, HOpMarkupAnnotate jarg1_, int jarg2);
  public final static native int HOpMarkupAnnotate_m_iBackgroundType_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native int HOpMarkupAnnotate_GetBackgroundType(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetBackgroundType(long jarg1, HOpMarkupAnnotate jarg1_, int jarg2);
  public final static native void HOpMarkupAnnotate_m_pNoteKey_set(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2);
  public final static native long HOpMarkupAnnotate_m_pNoteKey_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native long HOpMarkupAnnotate_GetNoteKey(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetNoteKey(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2);
  public final static native void HOpMarkupAnnotate_m_Annotation_set(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HUtilityAnnotation jarg2_);
  public final static native long HOpMarkupAnnotate_m_Annotation_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native long HOpMarkupAnnotate_GetAnnotation(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetAnnotation(long jarg1, HOpMarkupAnnotate jarg1_, long jarg2, HUtilityAnnotation jarg2_);
  public final static native void HOpMarkupAnnotate_m_bAddToLayer_set(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupAnnotate_m_bAddToLayer_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native boolean HOpMarkupAnnotate_GetAddToLayer(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetAddToLayer(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native void HOpMarkupAnnotate_m_bTouchedText_set(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupAnnotate_m_bTouchedText_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native boolean HOpMarkupAnnotate_GetTouchedText(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetTouchedText(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native void HOpMarkupAnnotate_m_bHideOverlappedText_set(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupAnnotate_m_bHideOverlappedText_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native boolean HOpMarkupAnnotate_GetHideOverlappedText(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetHideOverlappedText(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native void HOpMarkupAnnotate_m_bCreateNewNotes_set(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupAnnotate_m_bCreateNewNotes_get(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native boolean HOpMarkupAnnotate_GetCreateNewNotes(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_SetCreateNewNotes(long jarg1, HOpMarkupAnnotate jarg1_, boolean jarg2);
  public final static native void HOpMarkupAnnotate_StartOp(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native boolean HOpMarkupAnnotate_EndOp(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_TransmitMarkupSegment(long jarg1, HOpMarkupAnnotate jarg1_);
  public final static native void HOpMarkupAnnotate_director_connect(HOpMarkupAnnotate obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupAnnotate_change_ownership(HOpMarkupAnnotate obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupCircle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpMarkupCircle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpMarkupCircle__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpMarkupCircle(long jarg1);
  public final static native String HOpMarkupCircle_GetName(long jarg1, HOpMarkupCircle jarg1_);
  public final static native String HOpMarkupCircle_GetNameSwigExplicitHOpMarkupCircle(long jarg1, HOpMarkupCircle jarg1_);
  public final static native int HOpMarkupCircle_OnLButtonUp(long jarg1, HOpMarkupCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupCircle_OnLButtonUpSwigExplicitHOpMarkupCircle(long jarg1, HOpMarkupCircle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMarkupCircle_Clone(long jarg1, HOpMarkupCircle jarg1_);
  public final static native long HOpMarkupCircle_CloneSwigExplicitHOpMarkupCircle(long jarg1, HOpMarkupCircle jarg1_);
  public final static native void HOpMarkupCircle_director_connect(HOpMarkupCircle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupCircle_change_ownership(HOpMarkupCircle obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupFreehand__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpMarkupFreehand__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpMarkupFreehand__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HOpMarkupFreehand_CreateMarkupFreehand(long jarg1, HBaseView jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5);
  public final static native long HOpMarkupFreehand_Clone(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native long HOpMarkupFreehand_CloneSwigExplicitHOpMarkupFreehand(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native String HOpMarkupFreehand_GetName(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native String HOpMarkupFreehand_GetNameSwigExplicitHOpMarkupFreehand(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native void HOpMarkupFreehand_m_lPolyline_set(long jarg1, HOpMarkupFreehand jarg1_, long jarg2);
  public final static native long HOpMarkupFreehand_m_lPolyline_get(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native int HOpMarkupFreehand_OnLButtonDownAndMove(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupFreehand_OnLButtonDownAndMoveSwigExplicitHOpMarkupFreehand(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupFreehand_OnLButtonDown(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupFreehand_OnLButtonDownSwigExplicitHOpMarkupFreehand(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupFreehand_OnLButtonUp(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupFreehand_OnLButtonUpSwigExplicitHOpMarkupFreehand(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpMarkupFreehand_m_ptLast_set(long jarg1, HOpMarkupFreehand jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpMarkupFreehand_m_ptLast_get(long jarg1, HOpMarkupFreehand jarg1_);
  public final static native void delete_HOpMarkupFreehand(long jarg1);
  public final static native void HOpMarkupFreehand_director_connect(HOpMarkupFreehand obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupFreehand_change_ownership(HOpMarkupFreehand obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupMeasure__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4);
  public final static native long new_HOpMarkupMeasure__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3);
  public final static native long new_HOpMarkupMeasure__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long new_HOpMarkupMeasure__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpMarkupMeasure(long jarg1);
  public final static native String HOpMarkupMeasure_GetName(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native String HOpMarkupMeasure_GetNameSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native int HOpMarkupMeasure_OnLButtonDown(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnLButtonDownSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnLButtonDownAndMove(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnLButtonDownAndMoveSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnLButtonUp(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnLButtonUpSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnRButtonDown(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnRButtonDownSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnKeyDown(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupMeasure_OnKeyDownSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMarkupMeasure_Clone(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native long HOpMarkupMeasure_CloneSwigExplicitHOpMarkupMeasure(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_StartOp(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native boolean HOpMarkupMeasure_EndOp(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_Annotation_set(long jarg1, HOpMarkupMeasure jarg1_, long jarg2, HUtilityAnnotationMeasure jarg2_);
  public final static native long HOpMarkupMeasure_m_Annotation_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_iBackgroundType_set(long jarg1, HOpMarkupMeasure jarg1_, int jarg2);
  public final static native int HOpMarkupMeasure_m_iBackgroundType_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_bAddToLayer_set(long jarg1, HOpMarkupMeasure jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupMeasure_m_bAddToLayer_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_bNewNote_set(long jarg1, HOpMarkupMeasure jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupMeasure_m_bNewNote_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_bTouchedText_set(long jarg1, HOpMarkupMeasure jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupMeasure_m_bTouchedText_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_m_bHideOverlappedText_set(long jarg1, HOpMarkupMeasure jarg1_, boolean jarg2);
  public final static native boolean HOpMarkupMeasure_m_bHideOverlappedText_get(long jarg1, HOpMarkupMeasure jarg1_);
  public final static native void HOpMarkupMeasure_director_connect(HOpMarkupMeasure obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupMeasure_change_ownership(HOpMarkupMeasure obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupPostIt__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpMarkupPostIt__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpMarkupPostIt__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native String HOpMarkupPostIt_GetName(long jarg1, HOpMarkupPostIt jarg1_);
  public final static native String HOpMarkupPostIt_GetNameSwigExplicitHOpMarkupPostIt(long jarg1, HOpMarkupPostIt jarg1_);
  public final static native int HOpMarkupPostIt_OnLButtonDown(long jarg1, HOpMarkupPostIt jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupPostIt_OnLButtonDownSwigExplicitHOpMarkupPostIt(long jarg1, HOpMarkupPostIt jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void delete_HOpMarkupPostIt(long jarg1);
  public final static native void HOpMarkupPostIt_director_connect(HOpMarkupPostIt obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupPostIt_change_ownership(HOpMarkupPostIt obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMarkupRectangle__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpMarkupRectangle__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpMarkupRectangle__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpMarkupRectangle(long jarg1);
  public final static native String HOpMarkupRectangle_GetName(long jarg1, HOpMarkupRectangle jarg1_);
  public final static native String HOpMarkupRectangle_GetNameSwigExplicitHOpMarkupRectangle(long jarg1, HOpMarkupRectangle jarg1_);
  public final static native int HOpMarkupRectangle_OnLButtonUp(long jarg1, HOpMarkupRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMarkupRectangle_OnLButtonUpSwigExplicitHOpMarkupRectangle(long jarg1, HOpMarkupRectangle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMarkupRectangle_Clone(long jarg1, HOpMarkupRectangle jarg1_);
  public final static native long HOpMarkupRectangle_CloneSwigExplicitHOpMarkupRectangle(long jarg1, HOpMarkupRectangle jarg1_);
  public final static native void HOpMarkupRectangle_director_connect(HOpMarkupRectangle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMarkupRectangle_change_ownership(HOpMarkupRectangle obj, long cptr, boolean take_or_release);
  public final static native long new_HOpMoveHandle__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3, int jarg4);
  public final static native long new_HOpMoveHandle__SWIG_1(long jarg1, HBaseView jarg1_, boolean jarg2, int jarg3);
  public final static native long new_HOpMoveHandle__SWIG_2(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long new_HOpMoveHandle__SWIG_3(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpMoveHandle(long jarg1);
  public final static native String HOpMoveHandle_GetName(long jarg1, HOpMoveHandle jarg1_);
  public final static native String HOpMoveHandle_GetNameSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_);
  public final static native int HOpMoveHandle_OnLButtonDown(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnLButtonDownSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnLButtonDownAndMove(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnLButtonDownAndMoveSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnNoButtonDownAndMove(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnNoButtonDownAndMoveSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnLButtonUp(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpMoveHandle_OnLButtonUpSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMoveHandle_FindHandle(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpMoveHandle_FindObject__SWIG_0(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_, long jarg3, boolean jarg4);
  public final static native long HOpMoveHandle_FindObject__SWIG_1(long jarg1, HOpMoveHandle jarg1_, long jarg2, HEventInfo jarg2_, long jarg3);
  public final static native void HOpMoveHandle_SetupObject(long jarg1, HOpMoveHandle jarg1_, long jarg2);
  public final static native void HOpMoveHandle_Reset(long jarg1, HOpMoveHandle jarg1_);
  public final static native long HOpMoveHandle_Clone(long jarg1, HOpMoveHandle jarg1_);
  public final static native long HOpMoveHandle_CloneSwigExplicitHOpMoveHandle(long jarg1, HOpMoveHandle jarg1_);
  public final static native void HOpMoveHandle_m_pHandleKey_set(long jarg1, HOpMoveHandle jarg1_, long jarg2);
  public final static native long HOpMoveHandle_m_pHandleKey_get(long jarg1, HOpMoveHandle jarg1_);
  public final static native void HOpMoveHandle_m_pObjectKey_set(long jarg1, HOpMoveHandle jarg1_, long jarg2);
  public final static native long HOpMoveHandle_m_pObjectKey_get(long jarg1, HOpMoveHandle jarg1_);
  public final static native void HOpMoveHandle_m_bAllowSelect_set(long jarg1, HOpMoveHandle jarg1_, boolean jarg2);
  public final static native boolean HOpMoveHandle_m_bAllowSelect_get(long jarg1, HOpMoveHandle jarg1_);
  public final static native void HOpMoveHandle_director_connect(HOpMoveHandle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpMoveHandle_change_ownership(HOpMoveHandle obj, long cptr, boolean take_or_release);
  public final static native long new_HOpNavCube__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpNavCube__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpNavCube__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpNavCube(long jarg1);
  public final static native String HOpNavCube_GetName(long jarg1, HOpNavCube jarg1_);
  public final static native String HOpNavCube_GetNameSwigExplicitHOpNavCube(long jarg1, HOpNavCube jarg1_);
  public final static native int HOpNavCube_OnLButtonDown(long jarg1, HOpNavCube jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNavCube_OnLButtonDownSwigExplicitHOpNavCube(long jarg1, HOpNavCube jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpNavCube_Clone(long jarg1, HOpNavCube jarg1_);
  public final static native long HOpNavCube_CloneSwigExplicitHOpNavCube(long jarg1, HOpNavCube jarg1_);
  public final static native void HOpNavCube_director_connect(HOpNavCube obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpNavCube_change_ownership(HOpNavCube obj, long cptr, boolean take_or_release);
  public final static native long new_HOpNetwork(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpNetwork(long jarg1);
  public final static native int HOpNetwork_OnLButtonDown(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnLButtonDownSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnLButtonDownAndMove(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnLButtonDownAndMoveSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnLButtonUp(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnLButtonUpSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonDown(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonDownSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonDownAndMove(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonDownAndMoveSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonUp(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpNetwork_OnRButtonUpSwigExplicitHOpNetwork(long jarg1, HOpNetwork jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpNetwork_m_NetworkKey_set(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_m_NetworkKey_get(long jarg1, HOpNetwork jarg1_);
  public final static native void HOpNetwork_m_NodesKey_set(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_m_NodesKey_get(long jarg1, HOpNetwork jarg1_);
  public final static native void HOpNetwork_m_SelectedNodeKey_set(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_m_SelectedNodeKey_get(long jarg1, HOpNetwork jarg1_);
  public final static native void HOpNetwork_m_SelectedLineKey_set(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_m_SelectedLineKey_get(long jarg1, HOpNetwork jarg1_);
  public final static native long HOpNetwork_My_KInsert_Line(long jarg1, HOpNetwork jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void HOpNetwork_My_Line_Common(long jarg1, HOpNetwork jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native void HOpNetwork_My_Edit_Line(long jarg1, HOpNetwork jarg1_, long jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native void HOpNetwork_My_Delete_Line(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_My_KInsert_Node(long jarg1, HOpNetwork jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HOpNetwork_My_Edit_Node(long jarg1, HOpNetwork jarg1_, long jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HOpNetwork_Show_Node_Position(long jarg1, HOpNetwork jarg1_, long jarg2, float[] jarg3, float[] jarg4, float[] jarg5);
  public final static native long HOpNetwork_Get_Node_Key(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native void HOpNetwork_My_Open_Node(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native void HOpNetwork_My_Close_Node(long jarg1, HOpNetwork jarg1_);
  public final static native long HOpNetwork_My_Renumber_Key(long jarg1, HOpNetwork jarg1_, long jarg2);
  public final static native long HOpNetwork_GetNextKey(long jarg1, HOpNetwork jarg1_);
  public final static native void HOpNetwork_director_connect(HOpNetwork obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpNetwork_change_ownership(HOpNetwork obj, long cptr, boolean take_or_release);
  public final static native long new_HOpObjectAnnotate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpObjectAnnotate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpObjectAnnotate__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpObjectAnnotate(long jarg1);
  public final static native String HOpObjectAnnotate_GetName(long jarg1, HOpObjectAnnotate jarg1_);
  public final static native String HOpObjectAnnotate_GetNameSwigExplicitHOpObjectAnnotate(long jarg1, HOpObjectAnnotate jarg1_);
  public final static native long HOpObjectAnnotate_Clone(long jarg1, HOpObjectAnnotate jarg1_);
  public final static native long HOpObjectAnnotate_CloneSwigExplicitHOpObjectAnnotate(long jarg1, HOpObjectAnnotate jarg1_);
  public final static native void HOpObjectAnnotate_AnnotateObject(long jarg1, HBaseView jarg1_, String jarg2, StringBuffer jarg3, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_, boolean jarg6);
  public final static native void HOpObjectAnnotate_AnnotateObjectFromMessage(long jarg1, HBaseView jarg1_, String jarg2, int jarg3);
  public final static native int HOpObjectAnnotate_OnLButtonDown(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectAnnotate_OnLButtonDownSwigExplicitHOpObjectAnnotate(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectAnnotate_OnNoButtonDownAndMove(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectAnnotate_OnNoButtonDownAndMoveSwigExplicitHOpObjectAnnotate(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectAnnotate_OnKeyDown(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectAnnotate_OnKeyDownSwigExplicitHOpObjectAnnotate(long jarg1, HOpObjectAnnotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpObjectAnnotate_finalize_text(long jarg1, HOpObjectAnnotate jarg1_);
  public final static native void HOpObjectAnnotate_director_connect(HOpObjectAnnotate obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpObjectAnnotate_change_ownership(HOpObjectAnnotate obj, long cptr, boolean take_or_release);
  public final static native int HOpObjectClash_IntersectPolyline(long jarg1, HOpObjectClash jarg1_, long jarg2, float[] jarg3);
  public final static native void HOpObjectClash_ProcessSelectionResults__SWIG_0(long jarg1, HOpObjectClash jarg1_, long jarg2, float[] jarg3);
  public final static native void HOpObjectClash_ProcessSelectionResults__SWIG_1(long jarg1, HOpObjectClash jarg1_, long jarg2);
  public final static native void HOpObjectClash_ProcessSelectionResults__SWIG_2(long jarg1, HOpObjectClash jarg1_);
  public final static native int HOpObjectClash_TestEnclosure(long jarg1, HOpObjectClash jarg1_, long jarg2, float[] jarg3);
  public final static native int HOpObjectClash_GetScreenVolume(long jarg1, HOpObjectClash jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native int HOpObjectClash_SelectByScreenVolume(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByScreenVolumeSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByWorldVolume(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByWorldVolumeSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByEnclosure(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByEnclosureSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByShell(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native int HOpObjectClash_SelectByShellSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HSmartSelItem jarg2_);
  public final static native void HOpObjectClash_SetSelectMode(long jarg1, HOpObjectClash jarg1_, int jarg2);
  public final static native int HOpObjectClash_GetWorldVolume(long jarg1, HOpObjectClash jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HOpObjectClash_GrabSelectionSet(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_RestoreSelectionSet(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_m_save_spriting_mode_set(long jarg1, HOpObjectClash jarg1_, boolean jarg2);
  public final static native boolean HOpObjectClash_m_save_spriting_mode_get(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_m_pClashSelection_set(long jarg1, HOpObjectClash jarg1_, long jarg2, HSelectionSet jarg2_);
  public final static native long HOpObjectClash_m_pClashSelection_get(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_m_SelectMode_set(long jarg1, HOpObjectClash jarg1_, int jarg2);
  public final static native int HOpObjectClash_m_SelectMode_get(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_m_IntersectPolylinesVisible_set(long jarg1, HOpObjectClash jarg1_, int jarg2);
  public final static native int HOpObjectClash_m_IntersectPolylinesVisible_get(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_m_TempSegKey_set(long jarg1, HOpObjectClash jarg1_, long jarg2);
  public final static native long HOpObjectClash_m_TempSegKey_get(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_ClashDetect(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long new_HOpObjectClash__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpObjectClash__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpObjectClash__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpObjectClash(long jarg1);
  public final static native String HOpObjectClash_GetName(long jarg1, HOpObjectClash jarg1_);
  public final static native String HOpObjectClash_GetNameSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_);
  public final static native int HOpObjectClash_OnLButtonDown(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnLButtonDownSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnLButtonDownAndMove(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnLButtonDownAndMoveSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnLButtonUp(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnLButtonUpSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnKeyDown(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectClash_OnKeyDownSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpObjectClash_Clone(long jarg1, HOpObjectClash jarg1_);
  public final static native long HOpObjectClash_CloneSwigExplicitHOpObjectClash(long jarg1, HOpObjectClash jarg1_);
  public final static native void HOpObjectClash_director_connect(HOpObjectClash obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpObjectClash_change_ownership(HOpObjectClash obj, long cptr, boolean take_or_release);
  public final static native long new_HOpObjectRotate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpObjectRotate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpObjectRotate__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpObjectRotate(long jarg1);
  public final static native String HOpObjectRotate_GetName(long jarg1, HOpObjectRotate jarg1_);
  public final static native String HOpObjectRotate_GetNameSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_);
  public final static native int HOpObjectRotate_OnLButtonDown(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonDownSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonDownAndMove(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonDownAndMoveSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonUp(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonUpSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonDblClk(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpObjectRotate_OnLButtonDblClkSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpObjectRotate_Clone(long jarg1, HOpObjectRotate jarg1_);
  public final static native long HOpObjectRotate_CloneSwigExplicitHOpObjectRotate(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_ptCentroid_set(long jarg1, HOpObjectRotate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectRotate_m_ptCentroid_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_ptCentroidWorld_set(long jarg1, HOpObjectRotate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectRotate_m_ptCentroidWorld_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_ptCentroidViewpoint_set(long jarg1, HOpObjectRotate jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HOpObjectRotate_m_ptCentroidViewpoint_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_radius_set(long jarg1, HOpObjectRotate jarg1_, float jarg2);
  public final static native float HOpObjectRotate_m_radius_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_bTemporarySelection_set(long jarg1, HOpObjectRotate jarg1_, boolean jarg2);
  public final static native boolean HOpObjectRotate_m_bTemporarySelection_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_m_bInitialMatrix_set(long jarg1, HOpObjectRotate jarg1_, boolean jarg2);
  public final static native boolean HOpObjectRotate_m_bInitialMatrix_get(long jarg1, HOpObjectRotate jarg1_);
  public final static native void HOpObjectRotate_director_connect(HOpObjectRotate obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpObjectRotate_change_ownership(HOpObjectRotate obj, long cptr, boolean take_or_release);
  public final static native long new_HOpSelectArea__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpSelectArea__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpSelectArea__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpSelectArea(long jarg1);
  public final static native String HOpSelectArea_GetName(long jarg1, HOpSelectArea jarg1_);
  public final static native String HOpSelectArea_GetNameSwigExplicitHOpSelectArea(long jarg1, HOpSelectArea jarg1_);
  public final static native int HOpSelectArea_OnLButtonDown(long jarg1, HOpSelectArea jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectArea_OnLButtonDownSwigExplicitHOpSelectArea(long jarg1, HOpSelectArea jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectArea_OnLButtonUp(long jarg1, HOpSelectArea jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectArea_OnLButtonUpSwigExplicitHOpSelectArea(long jarg1, HOpSelectArea jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpSelectArea_Clone(long jarg1, HOpSelectArea jarg1_);
  public final static native long HOpSelectArea_CloneSwigExplicitHOpSelectArea(long jarg1, HOpSelectArea jarg1_);
  public final static native void HOpSelectArea_director_connect(HOpSelectArea obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpSelectArea_change_ownership(HOpSelectArea obj, long cptr, boolean take_or_release);
  public final static native long new_HOpSelectAperture__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpSelectAperture__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpSelectAperture__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpSelectAperture(long jarg1);
  public final static native String HOpSelectAperture_GetName(long jarg1, HOpSelectAperture jarg1_);
  public final static native String HOpSelectAperture_GetNameSwigExplicitHOpSelectAperture(long jarg1, HOpSelectAperture jarg1_);
  public final static native int HOpSelectAperture_OnLButtonDown(long jarg1, HOpSelectAperture jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectAperture_OnLButtonDownSwigExplicitHOpSelectAperture(long jarg1, HOpSelectAperture jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native long HOpSelectAperture_Clone(long jarg1, HOpSelectAperture jarg1_);
  public final static native long HOpSelectAperture_CloneSwigExplicitHOpSelectAperture(long jarg1, HOpSelectAperture jarg1_);
  public final static native void HOpSelectAperture_HandleSelection(long jarg1, HOpSelectAperture jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpSelectAperture_HandleSelectionSwigExplicitHOpSelectAperture(long jarg1, HOpSelectAperture jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpSelectAperture_director_connect(HOpSelectAperture obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpSelectAperture_change_ownership(HOpSelectAperture obj, long cptr, boolean take_or_release);
  public final static native long new_HOpSelectPolygon__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpSelectPolygon__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpSelectPolygon__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpSelectPolygon(long jarg1);
  public final static native String HOpSelectPolygon_GetName(long jarg1, HOpSelectPolygon jarg1_);
  public final static native String HOpSelectPolygon_GetNameSwigExplicitHOpSelectPolygon(long jarg1, HOpSelectPolygon jarg1_);
  public final static native long HOpSelectPolygon_Clone(long jarg1, HOpSelectPolygon jarg1_);
  public final static native long HOpSelectPolygon_CloneSwigExplicitHOpSelectPolygon(long jarg1, HOpSelectPolygon jarg1_);
  public final static native int HOpSelectPolygon_OnLButtonDblClk(long jarg1, HOpSelectPolygon jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectPolygon_OnLButtonDblClkSwigExplicitHOpSelectPolygon(long jarg1, HOpSelectPolygon jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectPolygon_OnLButtonDown(long jarg1, HOpSelectPolygon jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectPolygon_OnLButtonDownSwigExplicitHOpSelectPolygon(long jarg1, HOpSelectPolygon jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpSelectPolygon_director_connect(HOpSelectPolygon obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpSelectPolygon_change_ownership(HOpSelectPolygon obj, long cptr, boolean take_or_release);
  public final static native long new_HOpSelectPolyline__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HOpSelectPolyline__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HOpSelectPolyline__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void delete_HOpSelectPolyline(long jarg1);
  public final static native String HOpSelectPolyline_GetName(long jarg1, HOpSelectPolyline jarg1_);
  public final static native String HOpSelectPolyline_GetNameSwigExplicitHOpSelectPolyline(long jarg1, HOpSelectPolyline jarg1_);
  public final static native long HOpSelectPolyline_Clone(long jarg1, HOpSelectPolyline jarg1_);
  public final static native long HOpSelectPolyline_CloneSwigExplicitHOpSelectPolyline(long jarg1, HOpSelectPolyline jarg1_);
  public final static native int HOpSelectPolyline_OnLButtonDblClk(long jarg1, HOpSelectPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HOpSelectPolyline_OnLButtonDblClkSwigExplicitHOpSelectPolyline(long jarg1, HOpSelectPolyline jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HOpSelectPolyline_director_connect(HOpSelectPolyline obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HOpSelectPolyline_change_ownership(HOpSelectPolyline obj, long cptr, boolean take_or_release);
  public final static native void delete_HSelectionItem(long jarg1);
  public final static native String HSelectionItem_GetName(long jarg1, HSelectionItem jarg1_);
  public final static native long HSelectionItem_GetKey(long jarg1, HSelectionItem jarg1_);
  public final static native long HSelectionItem_GetSegmentKey(long jarg1, HSelectionItem jarg1_);
  public final static native boolean HSelectionItem_Equals(long jarg1, HSelectionItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSelectionItem_Highlight(long jarg1, HSelectionItem jarg1_);
  public final static native boolean HSelectionItem_UnHighlight(long jarg1, HSelectionItem jarg1_);
  public final static native boolean HSelectionItem_IsHighlighted(long jarg1, HSelectionItem jarg1_);
  public final static native boolean HSelectionItem_Delete(long jarg1, HSelectionItem jarg1_);
  public final static native boolean HSelectionItem_IsInstanced(long jarg1, HSelectionItem jarg1_);
  public final static native int HSelectionItem_GetIncludeCount(long jarg1, HSelectionItem jarg1_);
  public final static native void HSelectionItem_GetIncludeKeys(long jarg1, HSelectionItem jarg1_, long[] jarg2);
  public final static native boolean HSelectionItem_QueryIncludeDependency(long jarg1, HSelectionItem jarg1_, long jarg2, long[] jarg3);
  public final static native boolean HSelectionItem_UpdateIncludeDependency(long jarg1, HSelectionItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int HSelectionItem_GetFullPathCount(long jarg1, HSelectionItem jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void HSelectionItem_GetFullPathKeys(long jarg1, HSelectionItem jarg1_, long jarg2, HBaseView jarg2_, long[] jarg3);
  public final static native void HSelectionItem_SetTimeStamp(long jarg1, HSelectionItem jarg1_, float jarg2);
  public final static native float HSelectionItem_GetTimeStamp(long jarg1, HSelectionItem jarg1_);
  public final static native long new_HSmartSelItem__SWIG_0(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4);
  public final static native long new_HSmartSelItem__SWIG_1(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, boolean jarg5);
  public final static native void delete_HSmartSelItem(long jarg1);
  public final static native String HSmartSelItem_GetName(long jarg1, HSmartSelItem jarg1_);
  public final static native int HSmartSelItem_GetIncludeCount(long jarg1, HSmartSelItem jarg1_);
  public final static native void HSmartSelItem_GetIncludeKeys(long jarg1, HSmartSelItem jarg1_, long[] jarg2);
  public final static native void HSmartSelItem_GetFullPathKeys(long jarg1, HSmartSelItem jarg1_, long jarg2, HBaseView jarg2_, long[] jarg3);
  public final static native boolean HSmartSelItem_Equals(long jarg1, HSmartSelItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSmartSelItem_Highlight(long jarg1, HSmartSelItem jarg1_);
  public final static native boolean HSmartSelItem_UnHighlight(long jarg1, HSmartSelItem jarg1_);
  public final static native boolean HSmartSelItem_IsHighlighted__SWIG_0(long jarg1, HSmartSelItem jarg1_);
  public final static native boolean HSmartSelItem_IsHighlighted__SWIG_1(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4);
  public final static native boolean HSmartSelItem_IsRegionHighlighted(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5);
  public final static native boolean HSmartSelItem_Delete(long jarg1, HSmartSelItem jarg1_);
  public final static native boolean HSmartSelItem_IsInstanced(long jarg1, HSmartSelItem jarg1_);
  public final static native boolean HSmartSelItem_QueryIncludeDependency(long jarg1, HSmartSelItem jarg1_, long jarg2, long[] jarg3);
  public final static native boolean HSmartSelItem_UpdateIncludeDependency(long jarg1, HSmartSelItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HSmartSelItem_UpdateIncludePath(long jarg1, HSmartSelItem jarg1_, int jarg2, long[] jarg3);
  public final static native int HSmartSelItem_GetHighlightMode(long jarg1, HSmartSelItem jarg1_);
  public final static native void HSmartSelItem_SetHighlightMode(long jarg1, HSmartSelItem jarg1_, int jarg2);
  public final static native int HSmartSelItem_GetHighlightedRefListCount(long jarg1, HSmartSelItem jarg1_);
  public final static native void HSmartSelItem_GetHighlightedRefList(long jarg1, HSmartSelItem jarg1_, long[] jarg2);
  public final static native boolean HSmartSelItem_IsSegment(long jarg1, HSmartSelItem jarg1_);
  public final static native long new_HRegionSelItem(long jarg1, HShellObject jarg1_, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5);
  public final static native void delete_HRegionSelItem(long jarg1);
  public final static native String HRegionSelItem_GetName(long jarg1, HRegionSelItem jarg1_);
  public final static native int HRegionSelItem_GetRegion(long jarg1, HRegionSelItem jarg1_);
  public final static native boolean HRegionSelItem_Equals(long jarg1, HRegionSelItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HRegionSelItem_Highlight(long jarg1, HRegionSelItem jarg1_);
  public final static native boolean HRegionSelItem_UnHighlight(long jarg1, HRegionSelItem jarg1_);
  public final static native int HSUBENTITY_FACES_get();
  public final static native int HSUBENTITY_VERTICES_get();
  public final static native int HSUBENTITY_EDGES_get();
  public final static native long new_HSubentitySelItem__SWIG_0(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int jarg7, int[] jarg8, int[] jarg9, boolean jarg10, boolean jarg11, boolean jarg12, boolean jarg13);
  public final static native long new_HSubentitySelItem__SWIG_1(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int jarg7, int[] jarg8, int[] jarg9, boolean jarg10, boolean jarg11, boolean jarg12);
  public final static native long new_HSubentitySelItem__SWIG_2(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int jarg7, int[] jarg8, int[] jarg9, boolean jarg10, boolean jarg11);
  public final static native long new_HSubentitySelItem__SWIG_3(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int jarg7, int[] jarg8, int[] jarg9, boolean jarg10);
  public final static native long new_HSubentitySelItem__SWIG_4(long jarg1, long jarg2, HSelectionSet jarg2_, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int jarg7, int[] jarg8, int[] jarg9);
  public final static native void delete_HSubentitySelItem(long jarg1);
  public final static native String HSubentitySelItem_GetName(long jarg1, HSubentitySelItem jarg1_);
  public final static native boolean HSubentitySelItem_Equals(long jarg1, HSubentitySelItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSubentitySelItem_Similar(long jarg1, HSubentitySelItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSubentitySelItem_Highlight(long jarg1, HSubentitySelItem jarg1_);
  public final static native boolean HSubentitySelItem_UnHighlight__SWIG_0(long jarg1, HSubentitySelItem jarg1_);
  public final static native boolean HSubentitySelItem_UnHighlight__SWIG_1(long jarg1, HSubentitySelItem jarg1_, long jarg2, HSubentitySelItem jarg2_);
  public final static native boolean HSubentitySelItem_IsEmpty(long jarg1, HSubentitySelItem jarg1_);
  public final static native boolean HSubentitySelItem_Delete(long jarg1, HSubentitySelItem jarg1_);
  public final static native int HSubentitySelItem_GetFaceCount(long jarg1, HSubentitySelItem jarg1_);
  public final static native void HSubentitySelItem_GetFaces(long jarg1, HSubentitySelItem jarg1_, int[] jarg2);
  public final static native int HSubentitySelItem_GetVertexCount(long jarg1, HSubentitySelItem jarg1_);
  public final static native void HSubentitySelItem_GetVertices(long jarg1, HSubentitySelItem jarg1_, int[] jarg2, int[] jarg3);
  public final static native boolean HSubentitySelItem_MaintainMaps__SWIG_0(long jarg1, HSubentitySelItem jarg1_);
  public final static native void HSubentitySelItem_MaintainMaps__SWIG_1(long jarg1, HSubentitySelItem jarg1_, boolean jarg2);
  public final static native void HSubentitySelItem_GetMapCounts(long jarg1, HSubentitySelItem jarg1_, int[] jarg2, int[] jarg3);
  public final static native void HSubentitySelItem_GetMaps(long jarg1, HSubentitySelItem jarg1_, int[] jarg2, int[] jarg3);
  public final static native void HSubentitySelItem_MergeMaps(long jarg1, HSubentitySelItem jarg1_, long jarg2, HSubentitySelItem jarg2_);
  public final static native long new_HOldSelItem(long jarg1, long jarg2, HSelectionSet jarg2_, String jarg3, long jarg4, long jarg5);
  public final static native void delete_HOldSelItem(long jarg1);
  public final static native String HOldSelItem_GetName(long jarg1, HOldSelItem jarg1_);
  public final static native boolean HOldSelItem_Equals(long jarg1, HOldSelItem jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HOldSelItem_Highlight(long jarg1, HOldSelItem jarg1_);
  public final static native boolean HOldSelItem_UnHighlight(long jarg1, HOldSelItem jarg1_);
  public final static native boolean HOldSelItem_IsHighlighted(long jarg1, HOldSelItem jarg1_);
  public final static native boolean HOldSelItem_Delete(long jarg1, HOldSelItem jarg1_);
  public final static native boolean HOldSelItem_IsInstanced(long jarg1, HOldSelItem jarg1_);
  public final static native int HOldSelItem_GetIncludeCount(long jarg1, HOldSelItem jarg1_);
  public final static native void HOldSelItem_GetIncludeKeys(long jarg1, HOldSelItem jarg1_, long[] jarg2);
  public final static native boolean HOldSelItem_QueryIncludeDependency(long jarg1, HOldSelItem jarg1_, long jarg2, long[] jarg3);
  public final static native boolean HOldSelItem_UpdateIncludeDependency(long jarg1, HOldSelItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HSelectionSet_m_pView_set(long jarg1, HSelectionSet jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HSelectionSet_m_pView_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_pSelItemsList_set(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native long HSelectionSet_m_pSelItemsList_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_pHighlightSegsHash_set(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native long HSelectionSet_m_pHighlightSegsHash_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_SelectionSegment_set(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native long HSelectionSet_m_SelectionSegment_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_TransparencyStyle_set(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native long HSelectionSet_m_TransparencyStyle_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_selectedFaceColor_set(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native long HSelectionSet_m_selectedFaceColor_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_selectedEdgeColor_set(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native long HSelectionSet_m_selectedEdgeColor_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_selectedCutEdgeColor_set(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native long HSelectionSet_m_selectedCutEdgeColor_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_selectedCutFaceColor_set(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native long HSelectionSet_m_selectedCutFaceColor_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_selectedMarkerColor_set(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native long HSelectionSet_m_selectedMarkerColor_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_fselectedEdgeWeight_set(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native float HSelectionSet_m_fselectedEdgeWeight_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_fselectedMarkerSize_set(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native float HSelectionSet_m_fselectedMarkerSize_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bForceGrayScale_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bForceGrayScale_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bForceInvisible_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bForceInvisible_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bAllowDisplacement_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bAllowDisplacement_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bHighlightRegionEdges_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bHighlightRegionEdges_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bHighlightAnnotations_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bHighlightAnnotations_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_set(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native int HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bHighlightRegionFacesAutoVisibility_set(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native int HSelectionSet_m_bHighlightRegionFacesAutoVisibility_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_HighlightMode_set(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native int HSelectionSet_m_HighlightMode_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_fTransmission_set(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native float HSelectionSet_m_fTransmission_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bSortSelectionList_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bSortSelectionList_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bNotify_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bNotify_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_m_bUseDefinedHighlight_set(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_m_bUseDefinedHighlight_get(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_UpdateTransparency__SWIG_0(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_UpdateTransparency__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native long new_HSelectionSet__SWIG_0(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long new_HSelectionSet__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native void delete_HSelectionSet(long jarg1);
  public final static native void HSelectionSet_Init(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_InitSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_Select__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native void HSelectionSet_Select__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native void HSelectionSet_Select__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_, boolean jarg3);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_, boolean jarg3);
  public final static native void HSelectionSet_Select__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native void HSelectionSet_SelectRegion(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5, boolean jarg6);
  public final static native void HSelectionSet_SelectRegionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5, boolean jarg6);
  public final static native void HSelectionSet_SelectSubentity__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native void HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native void HSelectionSet_SelectSubentity__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native void HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native void HSelectionSet_SelectSubentity__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7);
  public final static native void HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7);
  public final static native void HSelectionSet_SelectSubentity__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6);
  public final static native void HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6);
  public final static native void HSelectionSet_SelectSubentity__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native void HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native void HSelectionSet_Select__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, String jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, String jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native void HSelectionSet_Select__SWIG_5(long jarg1, HSelectionSet jarg1_, long jarg2, String jarg3, long jarg4, long jarg5);
  public final static native void HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_5(long jarg1, HSelectionSet jarg1_, long jarg2, String jarg3, long jarg4, long jarg5);
  public final static native void HSelectionSet_DeSelect__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, boolean jarg3);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, boolean jarg3);
  public final static native void HSelectionSet_DeSelect__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native void HSelectionSet_DeSelect__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native void HSelectionSet_DeSelect__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native void HSelectionSet_DeSelect__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_, boolean jarg3);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_, boolean jarg3);
  public final static native void HSelectionSet_DeSelect__SWIG_5(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native void HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_5(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native void HSelectionSet_DeSelectRegion__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, boolean jarg4);
  public final static native void HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, boolean jarg4);
  public final static native void HSelectionSet_DeSelectRegion__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5, boolean jarg6);
  public final static native void HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5, boolean jarg6);
  public final static native void HSelectionSet_DeSelectRegion__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5);
  public final static native void HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HShellObject jarg2_, int jarg3, long[] jarg4, int jarg5);
  public final static native void HSelectionSet_DeSelectSubentity__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native void HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native void HSelectionSet_DeSelectSubentity__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native void HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native boolean HSelectionSet_SelectSubentityOOC__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native boolean HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8, boolean jarg9);
  public final static native boolean HSelectionSet_SelectSubentityOOC__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native boolean HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7, int[] jarg8);
  public final static native boolean HSelectionSet_SelectSubentityOOC__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7);
  public final static native boolean HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6, int[] jarg7);
  public final static native boolean HSelectionSet_SelectSubentityOOC__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6);
  public final static native boolean HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_3(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5, int[] jarg6);
  public final static native boolean HSelectionSet_SelectSubentityOOC__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native boolean HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_4(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native boolean HSelectionSet_DeSelectOOC__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native boolean HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, boolean jarg5);
  public final static native boolean HSelectionSet_DeSelectOOC__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native boolean HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native boolean HSelectionSet_HighlightRegionEdges__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_HighlightRegionEdges__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_HighlightAnnotations__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_HighlightAnnotations__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native int HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_2(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_0(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native int HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_DeSelectAll(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_DeSelectAllSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_IsSelected__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native boolean HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native boolean HSelectionSet_IsSelected__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native boolean HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4);
  public final static native boolean HSelectionSet_IsSelected__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_2(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSelectionSet_IsRegionSelected(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native boolean HSelectionSet_IsRegionSelectedSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, int jarg3, long[] jarg4, int jarg5);
  public final static native boolean HSelectionSet_IsHighlightSegment(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native boolean HSelectionSet_IsHighlightSegmentSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native void HSelectionSet_SetSelectionFaceColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionFaceColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetGrayScale(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetGrayScaleSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetInvisible(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetInvisibleSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetInvisible(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetInvisibleSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetAllowDisplacement(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowDisplacementSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetAllowDisplacement(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetAllowDisplacementSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_GetSelectionFaceColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionFaceColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionEdgeColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionEdgeColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionEdgeColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionEdgeColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionCutEdgeColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionCutEdgeColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionCutEdgeColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionCutEdgeColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionCutFaceColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionCutFaceColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionCutFaceColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionCutFaceColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionMarkerColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionMarkerColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionMarkerColor(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_GetSelectionMarkerColorSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2, HPixelRGBA jarg2_);
  public final static native void HSelectionSet_SetSelectionEdgeWeight(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native void HSelectionSet_SetSelectionEdgeWeightSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native float HSelectionSet_GetSelectionEdgeWeight(long jarg1, HSelectionSet jarg1_);
  public final static native float HSelectionSet_GetSelectionEdgeWeightSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSelectionMarkerSize(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native void HSelectionSet_SetSelectionMarkerSizeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native float HSelectionSet_GetSelectionMarkerSize(long jarg1, HSelectionSet jarg1_);
  public final static native float HSelectionSet_GetSelectionMarkerSizeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetAt(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native long HSelectionSet_GetAtSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native boolean HSelectionSet_GetAll(long jarg1, HSelectionSet jarg1_, long[] jarg2);
  public final static native boolean HSelectionSet_GetAllSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long[] jarg2);
  public final static native long HSelectionSet_GetSelectionItemAt(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native long HSelectionSet_GetSelectionItem(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native int HSelectionSet_GetSize(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_Reset(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_ResetSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_DeleteSelection__SWIG_0(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_0(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_DeleteSelection__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_1(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetHighlightStyle(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetHighlightStyle(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native String HSelectionSet_GetHighlightStyleName(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_DeInstance__SWIG_0(long jarg1, HSelectionSet jarg1_, long jarg2, HSelectionItem jarg2_);
  public final static native boolean HSelectionSet_DeInstance__SWIG_1(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native boolean HSelectionSet_GetSubwindowPenetration(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubwindowPenetrationSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSubwindowPenetration(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSubwindowPenetrationSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetAllowSubentitySelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetAllowSubentitySelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetAllowSubentitySelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowSubentitySelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native int HSelectionSet_GetSelectionLevel(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_GetSelectionLevelSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSelectionLevel(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_SetSelectionLevelSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native boolean HSelectionSet_GetAllowEntitySelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetAllowEntitySelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetAllowEntitySelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowEntitySelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetAllowRegionSelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetAllowRegionSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetAllowRegionSelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowRegionSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_RegisterHighlightSeg(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native void HSelectionSet_UnRegisterHighlightSeg(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native int HSelectionSet_GetHighlightMode(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_GetHighlightModeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetHighlightMode(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_SetHighlightModeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_SetHighlightTransparency(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native void HSelectionSet_SetHighlightTransparencySwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, float jarg2);
  public final static native long HSelectionSet_GetSelectionSegment(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetSelectionSegmentSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_ToggleHighlightStyle(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetIsSelection(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native boolean HSelectionSet_GetIsSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native boolean HSelectionSet_GetReferenceSelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetReferenceSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetReferenceSelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetReferenceSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetUseDefinedHighlight(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetUseDefinedHighlight(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetReferenceSelectionType(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native void HSelectionSet_SetReferenceSelectionTypeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, int jarg2);
  public final static native int HSelectionSet_GetReferenceSelectionType(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_GetReferenceSelectionTypeSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_UpdateHighlightStyle(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_UpdateHighlightStyleSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetPShowCache(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetPShowCache(long jarg1, HSelectionSet jarg1_, long jarg2);
  public final static native void HSelectionSet_FlushPShowCache(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_UpdateHighlighting(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetView(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSortSelectionList(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetSortSelectionList(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubentityFaceSelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubentityFaceSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSubentityFaceSelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSubentityFaceSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetSubentityEdgeSelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubentityEdgeSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSubentityEdgeSelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSubentityEdgeSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetSubentityVertexSelection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubentityVertexSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSubentityVertexSelection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSubentityVertexSelectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowSubentityDeselection(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetAllowSubentityDeselectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetAllowSubentityDeselection(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetAllowSubentityDeselectionSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_SetSubentityTracking(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSubentityTrackingSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetSubentityTracking(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSubentityTrackingSwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_GetSelectionBounding(long jarg1, HSelectionSet jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HSelectionSet_SetSelectWillNotify(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native void HSelectionSet_SetSelectWillNotifySwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_, boolean jarg2);
  public final static native boolean HSelectionSet_GetSelectWillNotify(long jarg1, HSelectionSet jarg1_);
  public final static native boolean HSelectionSet_GetSelectWillNotifySwigExplicitHSelectionSet(long jarg1, HSelectionSet jarg1_);
  public final static native int HSelectionSet_GetAttrLookupID(long jarg1, HSelectionSet jarg1_, String jarg2);
  public final static native long HSelectionSet_GetSelectionSegmentConditionInfo(long jarg1, HSelectionSet jarg1_);
  public final static native long HSelectionSet_GetConditionStyleKeyInfo(long jarg1, HSelectionSet jarg1_);
  public final static native void HSelectionSet_director_connect(HSelectionSet obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HSelectionSet_change_ownership(HSelectionSet obj, long cptr, boolean take_or_release);
  public final static native int BG_CIRCLE_get();
  public final static native int BG_QUAD_get();
  public final static native int BG_CLOUD_get();
  public final static native int BG_NONE_get();
  public final static native long new_HUtilityAnnotation();
  public final static native void delete_HUtilityAnnotation(long jarg1);
  public final static native void HUtilityAnnotation_AddChar__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, char jarg2);
  public final static native void HUtilityAnnotation_AddChar__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, int jarg2);
  public final static native long HUtilityAnnotation_GetBackgroundSegmentKey(long jarg1, HUtilityAnnotation jarg1_);
  public final static native long HUtilityAnnotation_GetKey__SWIG_0(long jarg1, HUtilityAnnotation jarg1_);
  public final static native long HUtilityAnnotation_GetKey__SWIG_1(long jarg1);
  public final static native void HUtilityAnnotation_GetText(long jarg1, HUtilityAnnotation jarg1_, StringBuffer jarg2, int[] jarg3);
  public final static native int HUtilityAnnotation_GetTextLength(long jarg1, HUtilityAnnotation jarg1_);
  public final static native void HUtilityAnnotation_GetTextWithEncoding(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, int[] jarg3);
  public final static native String HUtilityAnnotation_GetType(long jarg1, HUtilityAnnotation jarg1_);
  public final static native long HUtilityAnnotation_Insert__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8, long[] jarg9, int jarg10);
  public final static native long HUtilityAnnotation_Insert__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8, long[] jarg9);
  public final static native long HUtilityAnnotation_Insert__SWIG_2(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8);
  public final static native long HUtilityAnnotation_Insert__SWIG_3(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7);
  public final static native long HUtilityAnnotation_Insert__SWIG_4(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6);
  public final static native long HUtilityAnnotation_Insert__SWIG_5(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_);
  public final static native long HUtilityAnnotation_Insert__SWIG_6(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10, int jarg11);
  public final static native long HUtilityAnnotation_Insert__SWIG_7(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10);
  public final static native long HUtilityAnnotation_Insert__SWIG_8(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9);
  public final static native long HUtilityAnnotation_Insert__SWIG_9(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8);
  public final static native long HUtilityAnnotation_Insert__SWIG_10(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7);
  public final static native long HUtilityAnnotation_Insert__SWIG_11(long jarg1, HUtilityAnnotation jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10, int jarg11);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_2(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_3(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_4(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7);
  public final static native long HUtilityAnnotation_InsertWithEncoding__SWIG_5(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_);
  public final static native boolean HUtilityAnnotation_IsAnnotation(long jarg1);
  public final static native boolean HUtilityAnnotation_IsNote(long jarg1);
  public final static native void HUtilityAnnotation_ChangeAllFonts__SWIG_0(long jarg1, HBaseView jarg1_, StringBuffer jarg2, long jarg3);
  public final static native void HUtilityAnnotation_ChangeAllFonts__SWIG_1(long jarg1, HBaseView jarg1_, StringBuffer jarg2);
  public final static native void HUtilityAnnotation_MoveText__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HCamera jarg3_);
  public final static native void HUtilityAnnotation_MoveText__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityAnnotation_MoveText__SWIG_2(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HCamera jarg4_);
  public final static native void HUtilityAnnotation_MoveText__SWIG_3(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HUtilityAnnotation_SetBackgroundType(long jarg1, HUtilityAnnotation jarg1_, int jarg2);
  public final static native void HUtilityAnnotation_SetColor(long jarg1, HUtilityAnnotation jarg1_, String jarg2);
  public final static native void HUtilityAnnotation_SetEdgeWeight(long jarg1, HUtilityAnnotation jarg1_, float jarg2);
  public final static native void HUtilityAnnotation_SetExtents(long jarg1, HUtilityAnnotation jarg1_, int jarg2, int jarg3, long jarg4);
  public final static native void HUtilityAnnotation_SetFacePattern(long jarg1, HUtilityAnnotation jarg1_, String jarg2);
  public final static native void HUtilityAnnotation_SetLinePattern(long jarg1, HUtilityAnnotation jarg1_, String jarg2);
  public final static native void HUtilityAnnotation_SetLineWeight(long jarg1, HUtilityAnnotation jarg1_, float jarg2);
  public final static native void HUtilityAnnotation_SetNote__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, long jarg2, long jarg3);
  public final static native void HUtilityAnnotation_SetNote__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HUtilityAnnotation_SetOnTop(long jarg1, HUtilityAnnotation jarg1_, boolean jarg2);
  public final static native boolean HUtilityAnnotation_GetOnTop(long jarg1, HUtilityAnnotation jarg1_);
  public final static native void HUtilityAnnotation_SetText(long jarg1, HUtilityAnnotation jarg1_, String jarg2);
  public final static native void HUtilityAnnotation_SetTextFont(long jarg1, HUtilityAnnotation jarg1_, String jarg2);
  public final static native void HUtilityAnnotation_SetTextWithEncoding(long jarg1, HUtilityAnnotation jarg1_, int[] jarg2);
  public final static native void HUtilityAnnotation_ShowPosition__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityAnnotation_ShowPosition__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void HUtilityAnnotation_ShowTarget__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityAnnotation_ShowTarget__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void HUtilityAnnotation_UnSetExtents(long jarg1, HUtilityAnnotation jarg1_);
  public final static native void HUtilityAnnotation_Resize__SWIG_0(long jarg1, HUtilityAnnotation jarg1_, int jarg2, long[] jarg3, long jarg4);
  public final static native void HUtilityAnnotation_Resize__SWIG_1(long jarg1, HUtilityAnnotation jarg1_, long jarg2, long jarg3);
  public final static native long HUtilityAnnotation_GetFacing(long jarg1, HUtilityAnnotation jarg1_);
  public final static native long HUtilityAnnotation_GetUp(long jarg1, HUtilityAnnotation jarg1_);
  public final static native void HUtilityAnnotation_WindowResizeCallback(int jarg1, long jarg2, long jarg3);
  public final static native void HUtilityAnnotation_recursive_resize(long jarg1, int jarg2, long[] jarg3, long jarg4);
  public final static native void HUtilityAnnotation_drawLineCallback(long jarg1, int jarg2, long jarg3);
  public final static native void HUtilityAnnotation_drawLineCallbackClip(long jarg1, int jarg2, long jarg3);
  public final static native void HUtilityAnnotation_drawMarkerCallback(long jarg1, long jarg2);
  public final static native long new_HEventListenerItem();
  public final static native void HEventListenerItem_m_Priority_set(long jarg1, HEventListenerItem jarg1_, int jarg2);
  public final static native int HEventListenerItem_m_Priority_get(long jarg1, HEventListenerItem jarg1_);
  public final static native void HEventListenerItem_m_pEventListener_set(long jarg1, HEventListenerItem jarg1_, long jarg2, HEventListener jarg2_);
  public final static native long HEventListenerItem_m_pEventListener_get(long jarg1, HEventListenerItem jarg1_);
  public final static native void delete_HEventListenerItem(long jarg1);
  public final static native long new_HEventManager();
  public final static native void delete_HEventManager(long jarg1);
  public final static native void HEventManager_RegisterHandler__SWIG_0(long jarg1, HEventManager jarg1_, long jarg2, HEventListener jarg2_, String jarg3, int jarg4);
  public final static native void HEventManager_RegisterHandler__SWIG_1(long jarg1, HEventManager jarg1_, long jarg2, HEventListener jarg2_, int jarg3, int jarg4);
  public final static native long HEventManager_GetEventListenerManager__SWIG_0(long jarg1, HEventManager jarg1_, String jarg2);
  public final static native long HEventManager_GetEventListenerManager__SWIG_1(long jarg1, HEventManager jarg1_, int jarg2);
  public final static native boolean HEventManager_UnRegisterHandler__SWIG_0(long jarg1, HEventManager jarg1_, long jarg2, HEventListener jarg2_, String jarg3);
  public final static native boolean HEventManager_UnRegisterHandler__SWIG_1(long jarg1, HEventManager jarg1_, long jarg2, HEventListener jarg2_, int jarg3);
  public final static native void HEventManager_UnRegisterHandler__SWIG_2(long jarg1, HEventManager jarg1_, long jarg2, HEventListener jarg2_);
  public final static native long new_HObject();
  public final static native void delete_HObject(long jarg1);
  public final static native String HObject_GetName(long jarg1, HObject jarg1_);
  public final static native void HObject_director_connect(HObject obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HObject_change_ownership(HObject obj, long cptr, boolean take_or_release);
  public final static native long new_HObjectManager();
  public final static native void delete_HObjectManager(long jarg1);
  public final static native long HObjectManager_AddHObject(long jarg1, HObjectManager jarg1_, long jarg2, HObject jarg2_);
  public final static native long HObjectManager_RemoveHObject(long jarg1, HObjectManager jarg1_, String jarg2);
  public final static native long HObjectManager_GetHObject(long jarg1, HObjectManager jarg1_, String jarg2);
  public final static native long HObjectManager_FindHObjectSegment__SWIG_0(long jarg1, StringBuffer jarg2, StringBuffer jarg3);
  public final static native long HObjectManager_FindHObjectSegment__SWIG_1(long jarg1, StringBuffer jarg2);
  public final static native long HObjectManager_FindHObjectSegment__SWIG_2(long jarg1);
  public final static native void HObjectManager_FileLoadHObjectCheck(long jarg1);
  public final static native void HObjectManager_SetHObjectSegment(String jarg1);
  public final static native void HObjectManager_SetHObjectInfo(String jarg1);
  public final static native long new_HEdgeVertexSelectionObject(long jarg1, HBaseView jarg1_);
  public final static native void delete_HEdgeVertexSelectionObject(long jarg1);
  public final static native int HEdgeVertexSelectionObject_OnMouseMove(long jarg1, HEdgeVertexSelectionObject jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HEdgeVertexSelectionObject_OnLButtonDown(long jarg1, HEdgeVertexSelectionObject jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HEdgeVertexSelectionObject_OnLButtonUp(long jarg1, HEdgeVertexSelectionObject jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HEdgeVertexSelectionObject_IncludeEntity(long jarg1, HEdgeVertexSelectionObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3);
  public final static native String HEdgeVertexSelectionObject_GetStaticName();
  public final static native String HEdgeVertexSelectionObject_GetName(long jarg1, HEdgeVertexSelectionObject jarg1_);
  public final static native long new_HImageRegion(int jarg1, StringBuffer jarg2);
  public final static native void delete_HImageRegion(long jarg1);
  public final static native boolean HImageRegion_IsSelected(long jarg1, HImageRegion jarg1_, float jarg2, float jarg3, long jarg4, int jarg5, int jarg6);
  public final static native String HImageRegion_GetName(long jarg1, HImageRegion jarg1_);
  public final static native int HImageRegion_GetID(long jarg1, HImageRegion jarg1_);
  public final static native long new_HImagePanelManagerObject();
  public final static native void delete_HImagePanelManagerObject(long jarg1);
  public final static native String HImagePanelManagerObject_GetStaticName();
  public final static native String HImagePanelManagerObject_GetName(long jarg1, HImagePanelManagerObject jarg1_);
  public final static native void HImagePanelManagerObject_AddImagePanel(long jarg1, HImagePanelManagerObject jarg1_, long jarg2, HImagePanel jarg2_);
  public final static native boolean HImagePanelManagerObject_DeleteImagePanel__SWIG_0(long jarg1, HImagePanelManagerObject jarg1_, String jarg2, boolean jarg3, long jarg4);
  public final static native boolean HImagePanelManagerObject_DeleteImagePanel__SWIG_1(long jarg1, HImagePanelManagerObject jarg1_, String jarg2, boolean jarg3);
  public final static native boolean HImagePanelManagerObject_DeleteImagePanel__SWIG_2(long jarg1, HImagePanelManagerObject jarg1_, String jarg2);
  public final static native boolean HImagePanelManagerObject_DeleteImagePanel__SWIG_3(long jarg1, HImagePanelManagerObject jarg1_, long jarg2, HImagePanel jarg2_, boolean jarg3);
  public final static native boolean HImagePanelManagerObject_DeleteImagePanel__SWIG_4(long jarg1, HImagePanelManagerObject jarg1_, long jarg2, HImagePanel jarg2_);
  public final static native long HImagePanelManagerObject_GetImagePanelByName(long jarg1, HImagePanelManagerObject jarg1_, String jarg2);
  public final static native long new_HImagePanel(long jarg1, HBaseView jarg1_, long jarg2, int jarg3, int jarg4, float jarg5, float jarg6, StringBuffer jarg7);
  public final static native void delete_HImagePanel(long jarg1);
  public final static native long HImagePanel_FindSelectedRegion(long jarg1, HImagePanel jarg1_, float jarg2, float jarg3);
  public final static native int HImagePanel_OnLButtonDownAndMove(long jarg1, HImagePanel jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HImagePanel_OnLButtonDown(long jarg1, HImagePanel jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HImagePanel_OnLButtonUp(long jarg1, HImagePanel jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native void HImagePanel_AddImageRegion(long jarg1, HImagePanel jarg1_, int jarg2, StringBuffer jarg3);
  public final static native String HImagePanel_GetPanelName(long jarg1, HImagePanel jarg1_);
  public final static native void HImagePanel_SetImageAction(long jarg1, HImagePanel jarg1_, long jarg2, long jarg3);
  public final static native boolean HImagePanel_ButtonTimerClbk(float jarg1, float jarg2, long jarg3);
  public final static native void HImagePanel_SetImagesFromFile(long jarg1, HImagePanel jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void HImagePanel_SetImages(long jarg1, HImagePanel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HImagePanel_ZoomIn(long jarg1, HImagePanel jarg1_);
  public final static native void HImagePanel_ZoomOut(long jarg1, HImagePanel jarg1_);
  public final static native void HImagePanel_SetPosition__SWIG_0(long jarg1, HImagePanel jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HImagePanel_SetPosition__SWIG_1(long jarg1, HImagePanel jarg1_, float jarg2, float jarg3);
  public final static native long new_HInfoWindowObject__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, int jarg4, int jarg5);
  public final static native long new_HInfoWindowObject__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2, float jarg3, int jarg4);
  public final static native long new_HInfoWindowObject__SWIG_2(long jarg1, HBaseView jarg1_, float jarg2, float jarg3);
  public final static native long new_HInfoWindowObject__SWIG_3(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native long new_HInfoWindowObject__SWIG_4(long jarg1, HBaseView jarg1_);
  public final static native void delete_HInfoWindowObject(long jarg1);
  public final static native String HInfoWindowObject_GetStaticName();
  public final static native String HInfoWindowObject_GetName(long jarg1, HInfoWindowObject jarg1_);
  public final static native void HInfoWindowObject_AddLine__SWIG_0(long jarg1, HInfoWindowObject jarg1_, String jarg2, String jarg3, String jarg4, boolean jarg5, int jarg6);
  public final static native void HInfoWindowObject_AddLine__SWIG_1(long jarg1, HInfoWindowObject jarg1_, String jarg2, String jarg3, String jarg4, boolean jarg5);
  public final static native void HInfoWindowObject_AddLine__SWIG_2(long jarg1, HInfoWindowObject jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void HInfoWindowObject_AddLine__SWIG_3(long jarg1, HInfoWindowObject jarg1_, String jarg2, String jarg3);
  public final static native void HInfoWindowObject_AddLine__SWIG_4(long jarg1, HInfoWindowObject jarg1_, String jarg2);
  public final static native void HInfoWindowObject_UpdateInfoBox(long jarg1, HInfoWindowObject jarg1_);
  public final static native void HInfoWindowObject_Flush(long jarg1, HInfoWindowObject jarg1_);
  public final static native void HInfoWindowObject_WindowResizeCallback(int jarg1, long jarg2, long jarg3);
  public final static native long new_HLightsObject(long jarg1, HBaseView jarg1_);
  public final static native void delete_HLightsObject(long jarg1);
  public final static native String HLightsObject_GetStaticName();
  public final static native String HLightsObject_GetName(long jarg1, HLightsObject jarg1_);
  public final static native int HLightsObject_SetupHandlesEvent(long jarg1, HLightsObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native void HLightsObject_InsertLocalLight(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HLightsObject_InsertDistantLight(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HLightsObject_InsertSpotLight(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HLightsObject_TurnLightsOnOff(long jarg1, HBaseView jarg1_, boolean jarg2);
  public final static native long new_HDraggerObject__SWIG_0(long jarg1, HBaseView jarg1_);
  public final static native long new_HDraggerObject__SWIG_1();
  public final static native void delete_HDraggerObject(long jarg1);
  public final static native String HDraggerObject_GetStaticName();
  public final static native String HDraggerObject_GetName(long jarg1, HDraggerObject jarg1_);
  public final static native void HDraggerObject_SetupDraggerSegment(long jarg1, HDraggerObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, float[] jarg4, long[] jarg5, long[] jarg6);
  public final static native long HDraggerObject_Insert(long jarg1, HDraggerObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, float[] jarg4, long jarg5, HBhvAnimation jarg5_, long jarg6, HBhvAnimation jarg6_, int jarg7, boolean jarg8);
  public final static native int HDraggerObject_SetupHandlesEvent(long jarg1, HDraggerObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native int HDraggerObject_ObjectMovedEvent(long jarg1, HDraggerObject jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native String HUtilityAnnotationMeasure_GetType(long jarg1, HUtilityAnnotationMeasure jarg1_);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_0(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8, long[] jarg9, int jarg10);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_1(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8, long[] jarg9);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_2(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7, boolean jarg8);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_3(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6, int jarg7);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_4(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_, long jarg6);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_5(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_6(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10, int jarg11);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_7(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_8(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_9(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_10(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7);
  public final static native long HUtilityAnnotationMeasure_Insert__SWIG_11(long jarg1, HUtilityAnnotationMeasure jarg1_, String jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_0(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10, int jarg11);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_1(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9, long[] jarg10);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_2(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8, boolean jarg9);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_3(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7, int jarg8);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_4(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_, long jarg7);
  public final static native long HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_5(long jarg1, HUtilityAnnotationMeasure jarg1_, int[] jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, long jarg6, HBaseView jarg6_);
  public final static native void HUtilityAnnotationMeasure_MoveText__SWIG_0(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityAnnotationMeasure_MoveText__SWIG_1(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native boolean HUtilityAnnotationMeasure_IsMeasurement(long jarg1);
  public final static native void HUtilityAnnotationMeasure_SetNote(long jarg1, HUtilityAnnotationMeasure jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HUtilityAnnotationMeasure_drawLineCallbackDummy(long jarg1, int jarg2, long jarg3);
  public final static native long new_HUtilityAnnotationMeasure();
  public final static native void delete_HUtilityAnnotationMeasure(long jarg1);
  public final static native boolean HUtilityGeometryCreation_GeneratePointOnCircle__SWIG_0(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, float jarg3, int jarg4, float jarg5, boolean jarg6);
  public final static native boolean HUtilityGeometryCreation_GeneratePointOnCircle__SWIG_1(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, float jarg3, int jarg4, float jarg5);
  public final static native boolean HUtilityGeometryCreation_GeneratePointsOnCircle__SWIG_0(long[] jarg1, long jarg2, HPoint jarg2_, float jarg3, int jarg4, int jarg5, boolean jarg6);
  public final static native boolean HUtilityGeometryCreation_GeneratePointsOnCircle__SWIG_1(long[] jarg1, long jarg2, HPoint jarg2_, float jarg3, int jarg4, int jarg5);
  public final static native boolean HUtilityGeometryCreation_GeneratePointsOnCircularArc(long[] jarg1, long jarg2, HPoint jarg2_, float jarg3, int jarg4, int jarg5, boolean jarg6, float jarg7, float jarg8);
  public final static native long HUtilityGeometryCreation_CreateWireframeCircleWithEllipse(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native long HUtilityGeometryCreation_CreateSphere__SWIG_0(String jarg1, long jarg2, HPoint jarg2_, float jarg3, int jarg4);
  public final static native long HUtilityGeometryCreation_CreateSphere__SWIG_1(long jarg1, HPoint jarg1_, float jarg2, int jarg3, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native long HUtilityGeometryCreation_CreateCone(long jarg1, HPoint jarg1_, float jarg2, float jarg3, int jarg4, long jarg5, HPoint jarg5_, long jarg6, HPoint jarg6_);
  public final static native long HUtilityGeometryCreation_CreateCylinder(long jarg1, HPoint jarg1_, float jarg2, float jarg3, int jarg4, long jarg5, HPoint jarg5_, long jarg6, HPoint jarg6_);
  public final static native long HUtilityGeometryCreation_CreateCuboid(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityGeometryCreation_SetupModellingMatrix(long jarg1, HPoint jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native long HUtilityGeometryCreation_CreateCuttingPlane__SWIG_0(long jarg1, HBaseView jarg1_, String jarg2, boolean jarg3);
  public final static native long HUtilityGeometryCreation_CreateCuttingPlane__SWIG_1(long jarg1, HBaseView jarg1_, String jarg2);
  public final static native long HUtilityGeometryCreation_CreateCuttingPlane__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native void HUtilityGeometryCreation_SetCuttingPlaneVisibilityForAll(long jarg1, String jarg2);
  public final static native void HUtilityGeometryCreation_AdjustCuttingPlaneRendering(long jarg1, HBaseView jarg1_);
  public final static native void HUtilityGeometryCreation_AdjustSection(long jarg1, HBaseView jarg1_, long jarg2);
  public final static native void HUtilityGeometryCreation_CreateThreeSidedSection(long jarg1, HBaseView jarg1_);
  public final static native void HUtilityGeometryCreation_CreateTwoSidedSection(long jarg1, HBaseView jarg1_);
  public final static native void HUtilityGeometryCreation_CreateSlice__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native void HUtilityGeometryCreation_CreateSlice__SWIG_1(long jarg1, HBaseView jarg1_);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_0(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8, int[] jarg9, float[] jarg10, int[] jarg11, int jarg12, float jarg13);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_1(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8, int[] jarg9, float[] jarg10, int[] jarg11, int jarg12);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_2(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8, int[] jarg9, float[] jarg10, int[] jarg11);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_3(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8, int[] jarg9, float[] jarg10);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_4(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8, int[] jarg9);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_5(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7, float[] jarg8);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_6(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6, int[] jarg7);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_7(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5, float[] jarg6);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_8(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4, int[] jarg5);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_9(float[] jarg1, int jarg2, int[] jarg3, float[] jarg4);
  public final static native long HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_10(float[] jarg1, int jarg2, int[] jarg3);
  public final static native long HUtilityGeometryCreation_GenerateFEAShell(long jarg1, boolean jarg2, String jarg3);
  public final static native long HUtilityGeometryCreation_CreateSmoothedShell(int jarg1, long[] jarg2, int jarg3, int[] jarg4, float jarg5);
  public final static native boolean HUtilityGeometryCreation_ComputeFIndexDemoData__SWIG_0(long jarg1, HShellVertexData jarg1_, int jarg2);
  public final static native boolean HUtilityGeometryCreation_ComputeFIndexDemoData__SWIG_1(long jarg1, HShellVertexData jarg1_);
  public final static native long HUtilityGeometryCreation_CreateBoolean(long jarg1, long jarg2, int jarg3);
  public final static native long HUtilityGeometryCreation_CreateShellFromRotationalSweep(int jarg1, long[] jarg2, float[] jarg3, float jarg4, float jarg5, int jarg6, boolean[] jarg7, int jarg8);
  public final static native long HUtilityGeometryCreation_CreateShellFromPathSweep(int jarg1, long[] jarg2, long[] jarg3, int jarg4, long[] jarg5, boolean jarg6);
  public final static native long new_HUtilityGeometryCreation();
  public final static native void delete_HUtilityGeometryCreation(long jarg1);
  public final static native void delete_HUtilityGeomHandle(long jarg1);
  public final static native void HUtilityGeomHandle_RegisterCallbacks();
  public final static native long HUtilityGeomHandle_Insert__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, HPoint jarg2_, boolean jarg3, int jarg4);
  public final static native long HUtilityGeomHandle_Insert__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, HPoint jarg2_, boolean jarg3);
  public final static native long HUtilityGeomHandle_Insert__SWIG_2(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HUtilityGeomHandle_SetupGeomHandleSegment(long jarg1, HUtilityGeomHandle jarg1_, boolean jarg2);
  public final static native void HUtilityGeomHandle_ConstrainToPlane__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_, long jarg6, HBaseView jarg6_);
  public final static native void HUtilityGeomHandle_ConstrainToPlane__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native void HUtilityGeomHandle_ConstrainToViewplane__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HUtilityGeomHandle_ConstrainToViewplane__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_ConstrainToRay__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HBaseView jarg5_);
  public final static native void HUtilityGeomHandle_ConstrainToRay__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HUtilityGeomHandle_ConstrainToRotationVector__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HBaseView jarg5_);
  public final static native void HUtilityGeomHandle_ConstrainToRotationVector__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HUtilityGeomHandle_ConstrainToScale__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HBaseView jarg5_);
  public final static native void HUtilityGeomHandle_ConstrainToScale__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HUtilityGeomHandle_ConstrainToOnOff__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HBaseView jarg3_);
  public final static native void HUtilityGeomHandle_ConstrainToOnOff__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_Move__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_);
  public final static native void HUtilityGeomHandle_Move__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4);
  public final static native void HUtilityGeomHandle_ShowBasePosition(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_);
  public final static native void HUtilityGeomHandle_GetConstraintParameters(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_Rotate(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3);
  public final static native float HUtilityGeomHandle_CalculatePlaneZ(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_);
  public final static native void HUtilityGeomHandle_AdjustPositionToRay(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, long jarg5, HPoint jarg5_);
  public final static native void HUtilityGeomHandle_CalculatePositionOnPlane(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void HUtilityGeomHandle_AdjustPointToRay(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, long jarg5, HBaseView jarg5_);
  public final static native void HUtilityGeomHandle_AdjustPositionToPlane(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, long jarg8);
  public final static native long HUtilityGeomHandle_IsGeomHandle(long jarg1);
  public final static native boolean HUtilityGeomHandle_ContainsGeomHandles(long jarg1);
  public final static native void HUtilityGeomHandle_CalculateTransformedPosition(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, long jarg3, HPoint jarg3_, long jarg4, HBaseView jarg4_);
  public final static native int HUtilityGeomHandle_GetConstraintType(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_ShowHandle__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3, long jarg4, HBaseView jarg4_);
  public final static native void HUtilityGeomHandle_ShowHandle__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3);
  public final static native void HUtilityGeomHandle_ShowHandle__SWIG_2(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_ResetHandle__SWIG_0(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3, long jarg4, HBaseView jarg4_);
  public final static native void HUtilityGeomHandle_ResetHandle__SWIG_1(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3);
  public final static native void HUtilityGeomHandle_ResetHandle__SWIG_2(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_Scale(long jarg1, HUtilityGeomHandle jarg1_, long jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HUtilityGeomHandle_TurnOff(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native long HUtilityGeomHandle_GetRotationAxis(long jarg1, HUtilityGeomHandle jarg1_, long jarg2);
  public final static native void HUtilityGeomHandle_ClearAllHandles(long jarg1, HBaseView jarg1_);
  public final static native long HUtilityGeomHandle_SelectHandle(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HUtilityGeomHandle_SelectObject__SWIG_0(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, boolean jarg4, float jarg5);
  public final static native long HUtilityGeomHandle_SelectObject__SWIG_1(long jarg1, HBaseView jarg1_, long jarg2, HPoint jarg2_, long jarg3, boolean jarg4);
  public final static native void HUtilityGeomHandle_SetupObject__SWIG_0(long jarg1, long jarg2, HBaseView jarg2_, float jarg3);
  public final static native void HUtilityGeomHandle_SetupObject__SWIG_1(long jarg1, long jarg2, HBaseView jarg2_);
  public final static native void HUtilityGeomHandle_SetupTextObject__SWIG_0(long jarg1, long jarg2, HBaseView jarg2_, float jarg3, float jarg4);
  public final static native void HUtilityGeomHandle_SetupTextObject__SWIG_1(long jarg1, long jarg2, HBaseView jarg2_, float jarg3);
  public final static native void HUtilityGeomHandle_SetupTextObject__SWIG_2(long jarg1, long jarg2, HBaseView jarg2_);
  public final static native void HUtilityGeomHandle_SetupCuttingPlane(long jarg1, long jarg2, HBaseView jarg2_);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_0(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4, boolean jarg5, boolean jarg6, boolean jarg7, boolean jarg8, boolean jarg9);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_1(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4, boolean jarg5, boolean jarg6, boolean jarg7, boolean jarg8);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_2(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4, boolean jarg5, boolean jarg6, boolean jarg7);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_3(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4, boolean jarg5, boolean jarg6);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_4(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4, boolean jarg5);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_5(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4);
  public final static native long HUtilityGeomHandle_SetupManipulator__SWIG_6(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_0(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean jarg4);
  public final static native void HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_1(long jarg1, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_2(long jarg1, long jarg2, HBaseView jarg2_);
  public final static native long HUtilityGeomHandle_GetMMSegment(long jarg1);
  public final static native void HUtilityGeomHandle_GetCenterPoint(long jarg1, long jarg2, HPoint jarg2_);
  public final static native void HUtilityGeomHandle_SetVisibilityForAll(long jarg1, String jarg2);
  public final static native long new_HUtilityGeomHandle();
  public final static native long new_HRectangle__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long new_HRectangle__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HRectangle__SWIG_2(float jarg1, float jarg2, float jarg3);
  public final static native long new_HRectangle__SWIG_3(float jarg1, float jarg2);
  public final static native long new_HRectangle__SWIG_4(float jarg1);
  public final static native long new_HRectangle__SWIG_5();
  public final static native long new_HRectangle__SWIG_6(long jarg1, HRectangle jarg1_);
  public final static native void delete_HRectangle(long jarg1);
  public final static native float HRectangle_GetLeft(long jarg1, HRectangle jarg1_);
  public final static native float HRectangle_GetRight(long jarg1, HRectangle jarg1_);
  public final static native float HRectangle_GetTop(long jarg1, HRectangle jarg1_);
  public final static native float HRectangle_GetBottom(long jarg1, HRectangle jarg1_);
  public final static native float HRectangle_GetZ(long jarg1, HRectangle jarg1_);
  public final static native void HRectangle_SetCoordinates__SWIG_0(long jarg1, HRectangle jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native void HRectangle_SetCoordinates__SWIG_1(long jarg1, HRectangle jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean HRectangle_IsRectInside(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, long jarg3, HRectangle jarg3_);
  public final static native boolean HRectangle_IsRectAbove(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, float jarg3);
  public final static native boolean HRectangle_IsRectBelow(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, float jarg3);
  public final static native boolean HRectangle_IsRectRight(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, float jarg3);
  public final static native boolean HRectangle_IsRectLeft(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, float jarg3);
  public final static native boolean HRectangle_RectOverlap(long jarg1, HRectangle jarg1_, long jarg2, HRectangle jarg2_, long jarg3, HRectangle jarg3_);
  public final static native long new_HQuadTreeItem__SWIG_0(long jarg1, HQuadTreeItem jarg1_);
  public final static native long new_HQuadTreeItem__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, long jarg5);
  public final static native long new_HQuadTreeItem__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HQuadTreeItem__SWIG_3(float jarg1, float jarg2, float jarg3);
  public final static native long new_HQuadTreeItem__SWIG_4(float jarg1, float jarg2);
  public final static native long new_HQuadTreeItem__SWIG_5(float jarg1);
  public final static native long new_HQuadTreeItem__SWIG_6();
  public final static native void delete_HQuadTreeItem(long jarg1);
  public final static native long new_HQuadTreeNode(float jarg1, float jarg2, float jarg3, float jarg4, long jarg5, HQuadTreeNode jarg5_);
  public final static native void delete_HQuadTreeNode(long jarg1);
  public final static native long new_HQuadTree__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5, boolean jarg6, boolean jarg7);
  public final static native long new_HQuadTree__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5, boolean jarg6);
  public final static native long new_HQuadTree__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5);
  public final static native long new_HQuadTree__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HQuadTree__SWIG_4(float jarg1, float jarg2, float jarg3);
  public final static native long new_HQuadTree__SWIG_5(float jarg1, float jarg2);
  public final static native long new_HQuadTree__SWIG_6(float jarg1);
  public final static native long new_HQuadTree__SWIG_7();
  public final static native void delete_HQuadTree(long jarg1);
  public final static native int HQuadTree_Insert(long jarg1, HQuadTree jarg1_, long jarg2, HQuadTreeItem jarg2_);
  public final static native long new_HShadow__SWIG_0(long jarg1, long jarg2, float[] jarg3);
  public final static native long new_HShadow__SWIG_1(long jarg1, long jarg2);
  public final static native void HShadow_CalculateTotalModelExtents(long jarg1, HShadow jarg1_);
  public final static native void HShadow_GetModelExtents(long jarg1, HShadow jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HShadow_GetShadowLightPos(long jarg1, HShadow jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HShadow_GetShadowGroundPlane(long jarg1, HShadow jarg1_, long jarg2, HPlane jarg2_);
  public final static native long HShadow_GetShadowKey(long jarg1, HShadow jarg1_);
  public final static native void HShadow_SetShadowLightPos(long jarg1, HShadow jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HShadow_SetShadowGroundPlane(long jarg1, HShadow jarg1_, long jarg2, HPlane jarg2_);
  public final static native void HShadow_SetShadowBrightness(long jarg1, HShadow jarg1_, int jarg2);
  public final static native int HShadow_GetShadowBrightness(long jarg1, HShadow jarg1_);
  public final static native void delete_HShadow(long jarg1);
  public final static native long new_HSmoothShadow__SWIG_0(long jarg1, long jarg2, boolean jarg3);
  public final static native long new_HSmoothShadow__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_HSmoothShadow(long jarg1);
  public final static native void HSmoothShadow_CleanUp(long jarg1, HSmoothShadow jarg1_);
  public final static native void HSmoothShadow_Create__SWIG_0(long jarg1, HSmoothShadow jarg1_, int jarg2, int jarg3, int jarg4, int[] jarg5);
  public final static native void HSmoothShadow_Create__SWIG_1(long jarg1, HSmoothShadow jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void HSmoothShadow_Create__SWIG_2(long jarg1, HSmoothShadow jarg1_, int jarg2, int jarg3);
  public final static native void HSmoothShadow_Create__SWIG_3(long jarg1, HSmoothShadow jarg1_, int jarg2);
  public final static native void HSmoothShadow_Create__SWIG_4(long jarg1, HSmoothShadow jarg1_);
  public final static native int HSmoothShadow_GetFilterSize(long jarg1, HSmoothShadow jarg1_);
  public final static native int HSmoothShadow_GetTextureSize(long jarg1, HSmoothShadow jarg1_);
  public final static native void HSmoothShadow_SetTextureSize(long jarg1, HSmoothShadow jarg1_, int jarg2);
  public final static native void HSmoothShadow_SetFilter(long jarg1, HSmoothShadow jarg1_, int[] jarg2, int jarg3);
  public final static native void HSmoothShadow_UnDefineShadowTexture(long jarg1, HSmoothShadow jarg1_);
  public final static native void HSmoothShadow_UnDefineAllShadowTextures(long jarg1);
  public final static native void HSmoothShadow_SetAllowOpenglShadow(long jarg1, HSmoothShadow jarg1_, boolean jarg2);
  public final static native long new_HHardShadow(long jarg1, long jarg2);
  public final static native void delete_HHardShadow(long jarg1);
  public final static native void HHardShadow_Create__SWIG_0(long jarg1, HHardShadow jarg1_, int jarg2);
  public final static native void HHardShadow_Create__SWIG_1(long jarg1, HHardShadow jarg1_);
  public final static native int SUBWINDOW_NOTYPE_get();
  public final static native int SUBWINDOW_MAGNIFIER_get();
  public final static native int SUBWINDOW_SNAPSHOT_get();
  public final static native int SUBWINDOW_POINTER_get();
  public final static native int SW_ACTION_NOACTION_get();
  public final static native int SW_ACTION_MOVE_get();
  public final static native int SW_ACTION_SIZING_get();
  public final static native int SW_ACTION_MAGNIFYING_get();
  public final static native int SW_ACTION_POINTERMOVE_get();
  public final static native int SW_ACTION_DRAGGING_get();
  public final static native int SW_BORDER_get();
  public final static native int SW_SIZE_FIELD_get();
  public final static native int SW_MOVE_FIELD_get();
  public final static native int SW_DRAG_FIELD_get();
  public final static native int SW_DELETE_FIELD_get();
  public final static native int SW_MAGNIFIER_FIELD_get();
  public final static native int SW_BACKGROUND_BOX_get();
  public final static native long new_HSubwindow__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HSubwindow__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HSubwindow__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native long new_HSubwindow__SWIG_3();
  public final static native void delete_HSubwindow(long jarg1);
  public final static native void HSubwindow_Insert__SWIG_0(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7);
  public final static native void HSubwindow_Insert__SWIG_1(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6);
  public final static native void HSubwindow_Insert__SWIG_2(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HSubwindow_Reset(long jarg1, HSubwindow jarg1_);
  public final static native boolean HSubwindow_IsActive(long jarg1, HSubwindow jarg1_);
  public final static native void HSubwindow_GetFromKey(long jarg1, HSubwindow jarg1_, long jarg2);
  public final static native boolean HSubwindow_IsSubwindow(long jarg1, HSubwindow jarg1_, long jarg2);
  public final static native boolean HSubwindow_FindSubwindow(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, boolean[] jarg4);
  public final static native long HSubwindow_FindSubwindowFromSegment(long jarg1, HSubwindow jarg1_, long jarg2);
  public final static native void HSubwindow_GetPosition(long jarg1, HSubwindow jarg1_, float[] jarg2, float[] jarg3);
  public final static native void HSubwindow_SetPosition(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3);
  public final static native long HSubwindow_GetWindowKey(long jarg1, HSubwindow jarg1_);
  public final static native void HSubwindow_GetSize(long jarg1, HSubwindow jarg1_, float[] jarg2, float[] jarg3);
  public final static native void HSubwindow_SetSize__SWIG_0(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3);
  public final static native void HSubwindow_MakeCameraSnapshot(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void HSubwindow_ConvertFromSubwindowToView(long jarg1, HSubwindow jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HSubwindow_ConvertFromViewToSubwindow(long jarg1, HSubwindow jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_);
  public final static native void HSubwindow_ChangeType__SWIG_0(long jarg1, HSubwindow jarg1_, int jarg2, int jarg3);
  public final static native void HSubwindow_ChangeType__SWIG_1(long jarg1, HSubwindow jarg1_, int jarg2);
  public final static native void HSubwindow_GetPointerPosition(long jarg1, HSubwindow jarg1_, float[] jarg2, float[] jarg3);
  public final static native void HSubwindow_SetPointerPosition(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3);
  public final static native void HSubwindow_SetSize__SWIG_1(long jarg1, HSubwindow jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void HSubwindow_ComputeCoordinates(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, String jarg3, long jarg4, HPoint jarg4_, String jarg5, long jarg6, HPoint jarg6_);
  public final static native void HSubwindow_Drag(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HSubwindow_SyncViewToWindow(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HSubwindow_GetEventType(long jarg1, HSubwindow jarg1_);
  public final static native long HSubwindow_GetKey(long jarg1, HSubwindow jarg1_);
  public final static native String HSubwindow_GetName(long jarg1, HSubwindow jarg1_);
  public final static native String HSubwindow_GetStaticName();
  public final static native int HSubwindow_OnLButtonDown(long jarg1, HSubwindow jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HSubwindow_OnLButtonUp(long jarg1, HSubwindow jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HSubwindow_CameraChangedEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HSubwindow_PreFitWorldEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HSubwindow_PostFitWorldEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_);
  public final static native int HSubwindow_OnLButtonDownAndMove(long jarg1, HSubwindow jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native int HSubwindow_SetupHandlesEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, long jarg3, boolean jarg4);
  public final static native int HSubwindow_ObjectMovedEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native int HSubwindow_ObjectScaledEvent(long jarg1, HSubwindow jarg1_, long jarg2, HBaseView jarg2_, long jarg3, long jarg4, HPoint jarg4_);
  public final static native void delimiter_t_sd_set(long jarg1, delimiter_t jarg1_, String jarg2);
  public final static native String delimiter_t_sd_get(long jarg1, delimiter_t jarg1_);
  public final static native void delimiter_t_sd_exclude_set(long jarg1, delimiter_t jarg1_, boolean jarg2);
  public final static native boolean delimiter_t_sd_exclude_get(long jarg1, delimiter_t jarg1_);
  public final static native void delimiter_t_ed_set(long jarg1, delimiter_t jarg1_, String jarg2);
  public final static native String delimiter_t_ed_get(long jarg1, delimiter_t jarg1_);
  public final static native void delimiter_t_ed_exclude_set(long jarg1, delimiter_t jarg1_, boolean jarg2);
  public final static native boolean delimiter_t_ed_exclude_get(long jarg1, delimiter_t jarg1_);
  public final static native void delimiter_t_checkopenclose_set(long jarg1, delimiter_t jarg1_, boolean jarg2);
  public final static native boolean delimiter_t_checkopenclose_get(long jarg1, delimiter_t jarg1_);
  public final static native long new_delimiter_t();
  public final static native void delete_delimiter_t(long jarg1);
  public final static native void delimiter_full_t_mc1_set(long jarg1, delimiter_full_t jarg1_, String jarg2);
  public final static native String delimiter_full_t_mc1_get(long jarg1, delimiter_full_t jarg1_);
  public final static native void delimiter_full_t_mc2_set(long jarg1, delimiter_full_t jarg1_, String jarg2);
  public final static native String delimiter_full_t_mc2_get(long jarg1, delimiter_full_t jarg1_);
  public final static native void delimiter_full_t_i1_set(long jarg1, delimiter_full_t jarg1_, int jarg2);
  public final static native int delimiter_full_t_i1_get(long jarg1, delimiter_full_t jarg1_);
  public final static native void delimiter_full_t_i2_set(long jarg1, delimiter_full_t jarg1_, int jarg2);
  public final static native int delimiter_full_t_i2_get(long jarg1, delimiter_full_t jarg1_);
  public final static native void delimiter_full_t_len_set(long jarg1, delimiter_full_t jarg1_, int jarg2);
  public final static native int delimiter_full_t_len_get(long jarg1, delimiter_full_t jarg1_);
  public final static native long new_delimiter_full_t();
  public final static native void delete_delimiter_full_t(long jarg1);
  public final static native long new_HUtilityTextParser();
  public final static native void delete_HUtilityTextParser(long jarg1);
  public final static native void HUtilityTextParser_SetDelimiterList(long jarg1, HUtilityTextParser jarg1_, long jarg2, delimiter_t jarg2_, int jarg3);
  public final static native char HUtilityTextParser_GetStartDelimiter(long jarg1, HUtilityTextParser jarg1_);
  public final static native char HUtilityTextParser_GetEndDelimiter(long jarg1, HUtilityTextParser jarg1_);
  public final static native char HUtilityTextParser_PeekAt__SWIG_0(long jarg1, HUtilityTextParser jarg1_, int jarg2);
  public final static native char HUtilityTextParser_PeekAt__SWIG_1(long jarg1, HUtilityTextParser jarg1_);
  public final static native void HUtilityTextParser_Rewind(long jarg1, HUtilityTextParser jarg1_);
  public final static native void HUtilityTextParser_SkipAhead(long jarg1, HUtilityTextParser jarg1_, int jarg2);
  public final static native boolean HUtilityTextParser_ParseBuffer__SWIG_0(long jarg1, HUtilityTextParser jarg1_, StringBuffer jarg2, int[] jarg3, long jarg4, delimiter_t jarg4_, int jarg5, boolean jarg6);
  public final static native boolean HUtilityTextParser_ParseBuffer__SWIG_1(long jarg1, HUtilityTextParser jarg1_, StringBuffer jarg2, int[] jarg3, long jarg4, delimiter_t jarg4_, int jarg5);
  public final static native boolean HUtilityTextParser_ParseBuffer__SWIG_2(long jarg1, HUtilityTextParser jarg1_, String jarg2, StringBuffer jarg3, int[] jarg4, long jarg5, delimiter_t jarg5_, int jarg6, boolean jarg7);
  public final static native boolean HUtilityTextParser_ParseBuffer__SWIG_3(long jarg1, HUtilityTextParser jarg1_, String jarg2, StringBuffer jarg3, int[] jarg4, long jarg5, delimiter_t jarg5_, int jarg6);
  public final static native void HUtilityTextParser_InsertBuffer(long jarg1, HUtilityTextParser jarg1_, String jarg2, int jarg3);
  public final static native long new_HMarkupManager(long jarg1, HBaseView jarg1_);
  public final static native void HMarkupManager_ReInit(long jarg1, HMarkupManager jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void delete_HMarkupManager(long jarg1);
  public final static native long HMarkupManager_OpenLayer__SWIG_0(long jarg1, HMarkupManager jarg1_, String jarg2, boolean jarg3, boolean jarg4);
  public final static native long HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_0(long jarg1, HMarkupManager jarg1_, String jarg2, boolean jarg3, boolean jarg4);
  public final static native long HMarkupManager_OpenLayer__SWIG_1(long jarg1, HMarkupManager jarg1_, String jarg2, boolean jarg3);
  public final static native long HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_1(long jarg1, HMarkupManager jarg1_, String jarg2, boolean jarg3);
  public final static native long HMarkupManager_OpenLayer__SWIG_2(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native long HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_2(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native long HMarkupManager_RenameLayer(long jarg1, HMarkupManager jarg1_, long jarg2, String jarg3);
  public final static native long HMarkupManager_RenameLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, String jarg3);
  public final static native long HMarkupManager_CopyLayer(long jarg1, HMarkupManager jarg1_, long jarg2, String jarg3);
  public final static native long HMarkupManager_CopyLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, String jarg3);
  public final static native boolean HMarkupManager_GetCamera(long jarg1, HMarkupManager jarg1_, long jarg2, long jarg3, HCamera jarg3_);
  public final static native boolean HMarkupManager_GetCameraSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, long jarg3, HCamera jarg3_);
  public final static native long HMarkupManager_OpenLayer__SWIG_3(long jarg1, HMarkupManager jarg1_, long jarg2, boolean jarg3);
  public final static native long HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_3(long jarg1, HMarkupManager jarg1_, long jarg2, boolean jarg3);
  public final static native long HMarkupManager_OpenLayer__SWIG_4(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_4(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_FindLayer(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native long HMarkupManager_FindLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native String HMarkupManager_GetLayerNames(long jarg1, HMarkupManager jarg1_);
  public final static native String HMarkupManager_GetLayerNamesSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native long HMarkupManager_GetCurrentLayerKey(long jarg1, HMarkupManager jarg1_);
  public final static native long HMarkupManager_GetCurrentLayerKeySwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native String HMarkupManager_GetCurrentLayerName(long jarg1, HMarkupManager jarg1_);
  public final static native String HMarkupManager_GetCurrentLayerNameSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_DisableCurrentLayer__SWIG_0(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native void HMarkupManager_DisableCurrentLayerSwigExplicitHMarkupManager__SWIG_0(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native void HMarkupManager_DisableCurrentLayer__SWIG_1(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_DisableCurrentLayerSwigExplicitHMarkupManager__SWIG_1(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_DeleteLayer__SWIG_0(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native void HMarkupManager_DeleteLayerSwigExplicitHMarkupManager__SWIG_0(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native void HMarkupManager_DeleteLayer__SWIG_1(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_DeleteLayerSwigExplicitHMarkupManager__SWIG_1(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_SetDefaultLayerKey(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_GetDefaultLayerKey(long jarg1, HMarkupManager jarg1_);
  public final static native long HMarkupManager_GetMarkupKey(long jarg1, HMarkupManager jarg1_);
  public final static native long HMarkupManager_GetMarkupLayerKey(long jarg1, HMarkupManager jarg1_);
  public final static native float HMarkupManager_GetMarkupWeight(long jarg1, HMarkupManager jarg1_);
  public final static native float HMarkupManager_GetMarkupWeightSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_SetMarkupWeight(long jarg1, HMarkupManager jarg1_, float jarg2);
  public final static native void HMarkupManager_SetMarkupWeightSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, float jarg2);
  public final static native void HMarkupManager_GetMarkupColor(long jarg1, HMarkupManager jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HMarkupManager_GetMarkupColorSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HMarkupManager_SetMarkupColor(long jarg1, HMarkupManager jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HMarkupManager_SetMarkupColorSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HMarkupManager_EmitMarkupSegment(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_EmitMarkupSegmentSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_InsertMarkupSegmentFromMessage(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native void HMarkupManager_InsertMarkupSegmentFromMessageSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native void HMarkupManager_EmitDisableCurrentMarkupLayer(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_EmitDisableCurrentMarkupLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_DisableCurrentMarkupLayerFromMessage(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native void HMarkupManager_DisableCurrentMarkupLayerFromMessageSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native void HMarkupManager_EmitSetMarkupLayer(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native void HMarkupManager_EmitSetMarkupLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, String jarg2);
  public final static native void HMarkupManager_SetMarkupLayerFromMessage(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native void HMarkupManager_SetMarkupLayerFromMessageSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, String jarg2, int jarg3);
  public final static native boolean HMarkupManager_GetPreviewImage(long jarg1, HMarkupManager jarg1_, String jarg2, int[] jarg3, int[] jarg4, int[] jarg5, long jarg6);
  public final static native void HMarkupManager_UpdatePreviewImage__SWIG_0(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native void HMarkupManager_UpdatePreviewImageSwigExplicitHMarkupManager__SWIG_0(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native void HMarkupManager_UpdatePreviewImage__SWIG_1(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_UpdatePreviewImageSwigExplicitHMarkupManager__SWIG_1(long jarg1, HMarkupManager jarg1_);
  public final static native boolean HMarkupManager_IsCameraLayer(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_SetLayerCondition(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_UnsetCurrentLayerCondition(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_UnsetLayerCondition(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_SetGeneratePreviewImage(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native boolean HMarkupManager_GetGeneratePreviewImage(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_SetNoResetOnCameraChange(long jarg1, HMarkupManager jarg1_);
  public final static native boolean HMarkupManager_GetResetOnCameraChange(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native void HMarkupManager_SetupNewLayer(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_SetupNewLayerSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_OpenLayerInternal(long jarg1, HMarkupManager jarg1_, long jarg2, boolean jarg3);
  public final static native void HMarkupManager_OpenLayerInternalSwigExplicitHMarkupManager(long jarg1, HMarkupManager jarg1_, long jarg2, boolean jarg3);
  public final static native void HMarkupManager_m_pHView_set(long jarg1, HMarkupManager jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HMarkupManager_m_pHView_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_ActiveLayerKey_set(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_m_ActiveLayerKey_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_ActiveLayerName_set(long jarg1, HMarkupManager jarg1_, StringBuffer jarg2);
  public final static native StringBuffer HMarkupManager_m_ActiveLayerName_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_DefaultLayerKey_set(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_m_DefaultLayerKey_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_MarkupKey_set(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_m_MarkupKey_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_MarkupLayerKey_set(long jarg1, HMarkupManager jarg1_, long jarg2);
  public final static native long HMarkupManager_m_MarkupLayerKey_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_MarkupColor_set(long jarg1, HMarkupManager jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HMarkupManager_m_MarkupColor_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_fMarkupWeight_set(long jarg1, HMarkupManager jarg1_, float jarg2);
  public final static native float HMarkupManager_m_fMarkupWeight_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_allNames_set(long jarg1, HMarkupManager jarg1_, StringBuffer jarg2);
  public final static native StringBuffer HMarkupManager_m_allNames_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_m_bGeneratePreviewImage_set(long jarg1, HMarkupManager jarg1_, boolean jarg2);
  public final static native boolean HMarkupManager_m_bGeneratePreviewImage_get(long jarg1, HMarkupManager jarg1_);
  public final static native void HMarkupManager_director_connect(HMarkupManager obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HMarkupManager_change_ownership(HMarkupManager obj, long cptr, boolean take_or_release);
  public final static native long new_HModelInfo__SWIG_0(long jarg1);
  public final static native long new_HModelInfo__SWIG_1();
  public final static native void delete_HModelInfo(long jarg1);
  public final static native void HModelInfo_ComputeModelInfo__SWIG_0(long jarg1, HModelInfo jarg1_, long jarg2, boolean jarg3);
  public final static native void HModelInfo_ComputeModelInfo__SWIG_1(long jarg1, HModelInfo jarg1_, long jarg2);
  public final static native void HModelInfo_ComputeModelInfo__SWIG_2(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalFaces(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalVertices(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalTriangles(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalTristrips(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalSegments(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCircle(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCircularArc(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCircularChord(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCircularWedge(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalEllipse(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalEllipticalArc(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalGrid(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalImage(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalIncludes(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalIncluders(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalLine(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalMarker(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalMesh(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalPolygon(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalPolyline(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalShell(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalStringCursor(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalText(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalMatrices(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalSpotLight(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalDistantLight(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalLocalLight(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCuttingPlane(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalCylinders(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalPolyCylinders(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalSpheres(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalNURBSCurves(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalNURBSSurfaces(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalReferences(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalInfiniteLines(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalInfiniteRays(long jarg1, HModelInfo jarg1_);
  public final static native long HModelInfo_GetTotalOthers(long jarg1, HModelInfo jarg1_);
  public final static native long new_HSnapGrid(long jarg1, HBaseView jarg1_);
  public final static native void delete_HSnapGrid(long jarg1);
  public final static native boolean HSnapGrid_Create__SWIG_0(long jarg1, HSnapGrid jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, int jarg5, int jarg6);
  public final static native boolean HSnapGrid_Create__SWIG_1(long jarg1, HSnapGrid jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, int jarg5);
  public final static native boolean HSnapGrid_Create__SWIG_2(long jarg1, HSnapGrid jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HSnapGrid_SetOnTop(long jarg1, HSnapGrid jarg1_, boolean jarg2);
  public final static native boolean HSnapGrid_GetOnTop(long jarg1, HSnapGrid jarg1_);
  public final static native boolean HSnapGrid_GetSnappedViewpointPos(long jarg1, HSnapGrid jarg1_, long jarg2, HPoint jarg2_);
  public final static native boolean HSnapGrid_GetSnappedWorldPos(long jarg1, HSnapGrid jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HSnapGrid_GetGridSegment(long jarg1, HSnapGrid jarg1_);
  public final static native long HSnapGrid_GetGridGeometry(long jarg1, HSnapGrid jarg1_);
  public final static native long new_HTCObjectRotate__SWIG_0(long jarg1, HBaseView jarg1_, int jarg2, int jarg3);
  public final static native long new_HTCObjectRotate__SWIG_1(long jarg1, HBaseView jarg1_, int jarg2);
  public final static native long new_HTCObjectRotate__SWIG_2(long jarg1, HBaseView jarg1_);
  public final static native long new_HTCObjectRotate__SWIG_3(long jarg1, HTCObjectRotate jarg1_);
  public final static native void delete_HTCObjectRotate(long jarg1);
  public final static native int HTCObjectRotate_OnLButtonDown(long jarg1, HTCObjectRotate jarg1_, long jarg2, HEventInfo jarg2_);
  public final static native boolean HTCObjectRotate_Tick(long jarg1, HTCObjectRotate jarg1_, float jarg2, float jarg3);
  public final static native void HTCObjectRotate_SetDeleteOnUnRegister(long jarg1, HTCObjectRotate jarg1_);
  public final static native void HTCObjectRotate_UnRegister(long jarg1, HTCObjectRotate jarg1_);
  public final static native boolean HTCObjectRotate_OnSignal(long jarg1, HTCObjectRotate jarg1_, int jarg2);
  public final static native long new_HUndoItem();
  public final static native void delete_HUndoItem(long jarg1);
  public final static native void HUndoItem_Undo__SWIG_0(long jarg1, HUndoItem jarg1_, boolean jarg2);
  public final static native void HUndoItem_UndoSwigExplicitHUndoItem__SWIG_0(long jarg1, HUndoItem jarg1_, boolean jarg2);
  public final static native void HUndoItem_Undo__SWIG_1(long jarg1, HUndoItem jarg1_);
  public final static native void HUndoItem_UndoSwigExplicitHUndoItem__SWIG_1(long jarg1, HUndoItem jarg1_);
  public final static native void HUndoItem_Redo__SWIG_0(long jarg1, HUndoItem jarg1_, boolean jarg2);
  public final static native void HUndoItem_RedoSwigExplicitHUndoItem__SWIG_0(long jarg1, HUndoItem jarg1_, boolean jarg2);
  public final static native void HUndoItem_Redo__SWIG_1(long jarg1, HUndoItem jarg1_);
  public final static native void HUndoItem_RedoSwigExplicitHUndoItem__SWIG_1(long jarg1, HUndoItem jarg1_);
  public final static native String HUndoItem_GetName(long jarg1, HUndoItem jarg1_);
  public final static native String HUndoItem_GetNameSwigExplicitHUndoItem(long jarg1, HUndoItem jarg1_);
  public final static native void HUndoItem_director_connect(HUndoItem obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HUndoItem_change_ownership(HUndoItem obj, long cptr, boolean take_or_release);
  public final static native long new_HUndoItemCamera(long jarg1, HBaseView jarg1_);
  public final static native void delete_HUndoItemCamera(long jarg1);
  public final static native void HUndoItemCamera_Undo__SWIG_0(long jarg1, HUndoItemCamera jarg1_, boolean jarg2);
  public final static native void HUndoItemCamera_Undo__SWIG_1(long jarg1, HUndoItemCamera jarg1_);
  public final static native void HUndoItemCamera_Redo__SWIG_0(long jarg1, HUndoItemCamera jarg1_, boolean jarg2);
  public final static native void HUndoItemCamera_Redo__SWIG_1(long jarg1, HUndoItemCamera jarg1_);
  public final static native long HUndoItemCamera_GetCamera(long jarg1, HUndoItemCamera jarg1_);
  public final static native String HUndoItemCamera_GetName(long jarg1, HUndoItemCamera jarg1_);
  public final static native long new_HUndoItemMatrix(long jarg1, HBaseView jarg1_, int jarg2, long[] jarg3, float[] jarg4);
  public final static native void delete_HUndoItemMatrix(long jarg1);
  public final static native void HUndoItemMatrix_Undo__SWIG_0(long jarg1, HUndoItemMatrix jarg1_, boolean jarg2);
  public final static native void HUndoItemMatrix_Undo__SWIG_1(long jarg1, HUndoItemMatrix jarg1_);
  public final static native void HUndoItemMatrix_Redo__SWIG_0(long jarg1, HUndoItemMatrix jarg1_, boolean jarg2);
  public final static native void HUndoItemMatrix_Redo__SWIG_1(long jarg1, HUndoItemMatrix jarg1_);
  public final static native int HUndoItemMatrix_GetCount(long jarg1, HUndoItemMatrix jarg1_);
  public final static native void HUndoItemMatrix_GetKey(long jarg1, HUndoItemMatrix jarg1_, long[] jarg2);
  public final static native void HUndoItemMatrix_GetMatrix(long jarg1, HUndoItemMatrix jarg1_, float[] jarg2);
  public final static native String HUndoItemMatrix_GetName(long jarg1, HUndoItemMatrix jarg1_);
  public final static native long new_HUndoManager();
  public final static native void delete_HUndoManager(long jarg1);
  public final static native int HUndoManager_Undo__SWIG_0(long jarg1, HUndoManager jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native int HUndoManager_Undo__SWIG_1(long jarg1, HUndoManager jarg1_, int jarg2, boolean jarg3);
  public final static native int HUndoManager_Undo__SWIG_2(long jarg1, HUndoManager jarg1_, int jarg2);
  public final static native int HUndoManager_Undo__SWIG_3(long jarg1, HUndoManager jarg1_);
  public final static native int HUndoManager_Redo__SWIG_0(long jarg1, HUndoManager jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native int HUndoManager_Redo__SWIG_1(long jarg1, HUndoManager jarg1_, int jarg2, boolean jarg3);
  public final static native int HUndoManager_Redo__SWIG_2(long jarg1, HUndoManager jarg1_, int jarg2);
  public final static native int HUndoManager_Redo__SWIG_3(long jarg1, HUndoManager jarg1_);
  public final static native void HUndoManager_AddUndoItem(long jarg1, HUndoManager jarg1_, long jarg2, HUndoItem jarg2_);
  public final static native void HUndoManager_Flush(long jarg1, HUndoManager jarg1_);
  public final static native long HUndoManager_Peek(long jarg1, HUndoManager jarg1_);
  public final static native void HUndoManager_Reset(long jarg1, HUndoManager jarg1_, long jarg2, HBaseView jarg2_);
  public final static native void HUndoManager_BeginUndoItemIteration(long jarg1, HUndoManager jarg1_);
  public final static native long HUndoManager_GetNextUndoItem(long jarg1, HUndoManager jarg1_);
  public final static native void HUndoManager_EndUndoItemIteration(long jarg1, HUndoManager jarg1_);
  public final static native long new_HTManager__SWIG_0(int jarg1);
  public final static native long new_HTManager__SWIG_1();
  public final static native void delete_HTManager(long jarg1);
  public final static native void HTManager_Tick(long jarg1, HTManager jarg1_, float jarg2);
  public final static native void HTManager_RegisterClient(long jarg1, HTManager jarg1_, long jarg2, HTClient jarg2_);
  public final static native void HTManager_UnRegisterClient(long jarg1, HTManager jarg1_, long jarg2, HTClient jarg2_);
  public final static native long HTManager_GetCurrentHTManager();
  public final static native long new_HTClient__SWIG_0(float jarg1, int jarg2, long jarg3, long jarg4);
  public final static native long new_HTClient__SWIG_1(float jarg1, int jarg2, long jarg3);
  public final static native long new_HTClient__SWIG_2(float jarg1, int jarg2);
  public final static native long new_HTClient__SWIG_3(float jarg1);
  public final static native long new_HTClient__SWIG_4();
  public final static native void delete_HTClient(long jarg1);
  public final static native boolean HTClient_Tick(long jarg1, HTClient jarg1_, float jarg2, float jarg3);
  public final static native boolean HTClient_TickSwigExplicitHTClient(long jarg1, HTClient jarg1_, float jarg2, float jarg3);
  public final static native void HTClient_SetInterval(long jarg1, HTClient jarg1_, float jarg2);
  public final static native float HTClient_GetInterval(long jarg1, HTClient jarg1_);
  public final static native void HTClient_SetStyle(long jarg1, HTClient jarg1_, int jarg2);
  public final static native int HTClient_GetStyle(long jarg1, HTClient jarg1_);
  public final static native void HTClient_SetNextRequest(long jarg1, HTClient jarg1_, float jarg2);
  public final static native float HTClient_GetNextRequest(long jarg1, HTClient jarg1_);
  public final static native int HTClient_GetPriority(long jarg1, HTClient jarg1_);
  public final static native void HTClient_SetPriorityLowest(long jarg1, HTClient jarg1_);
  public final static native void HTClient_SetUserData(long jarg1, HTClient jarg1_, long jarg2);
  public final static native long HTClient_GetUserData(long jarg1, HTClient jarg1_);
  public final static native void HTClient_SetTickFunction(long jarg1, HTClient jarg1_, long jarg2);
  public final static native long HTClient_GetTickFunction(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_style_set(long jarg1, HTClient jarg1_, int jarg2);
  public final static native int HTClient_mt_style_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_interval_set(long jarg1, HTClient jarg1_, float jarg2);
  public final static native float HTClient_mt_interval_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_next_request_set(long jarg1, HTClient jarg1_, float jarg2);
  public final static native float HTClient_mt_next_request_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_priority_set(long jarg1, HTClient jarg1_, int jarg2);
  public final static native int HTClient_mt_priority_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_user_data_set(long jarg1, HTClient jarg1_, long jarg2);
  public final static native long HTClient_mt_user_data_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_mt_tick_function_set(long jarg1, HTClient jarg1_, long jarg2);
  public final static native long HTClient_mt_tick_function_get(long jarg1, HTClient jarg1_);
  public final static native void HTClient_director_connect(HTClient obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HTClient_change_ownership(HTClient obj, long cptr, boolean take_or_release);
  public final static native int HIM_CUTTING_GEOMETRY_TYPE_LINES_get();
  public final static native int HIM_CUTTING_GEOMETRY_TYPE_POLYLINES_get();
  public final static native int HIM_CUTTING_GEOMETRY_TYPE_FACES_get();
  public final static native int HIM_CUTTING_GEOMETRY_SEGMENT_BODY_get();
  public final static native int HIM_CUTTING_GEOMETRY_SHELL_BODY_get();
  public final static native long new_HImCuttingGeometry();
  public final static native void delete_HImCuttingGeometry(long jarg1);
  public final static native void HImCuttingGeometry_CreateCuttingGeometry__SWIG_0(long jarg1, HImCuttingGeometry jarg1_, long jarg2, long jarg3, int jarg4, int jarg5);
  public final static native void HImCuttingGeometry_CreateCuttingGeometry__SWIG_1(long jarg1, HImCuttingGeometry jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void HImCuttingGeometry_CreateCuttingGeometry__SWIG_2(long jarg1, HImCuttingGeometry jarg1_, long jarg2, long jarg3);
  public final static native void HImCuttingGeometry_CreateCuttingGeometry__SWIG_3(long jarg1, HImCuttingGeometry jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native void HImCuttingGeometry_RegisterCallbacks();
  public final static native void HImCuttingGeometry_SetSmallestFeature(long jarg1, HImCuttingGeometry jarg1_, float jarg2);
  public final static native float HImCuttingGeometry_GetSmallestFeature(long jarg1, HImCuttingGeometry jarg1_);
  public final static native void HImCuttingGeometry_SetTolerance(long jarg1, HImCuttingGeometry jarg1_, float jarg2);
  public final static native float HImCuttingGeometry_GetTolerance(long jarg1, HImCuttingGeometry jarg1_);
  public final static native long new_HImErrorHandler__SWIG_0(boolean jarg1);
  public final static native long new_HImErrorHandler__SWIG_1();
  public final static native void delete_HImErrorHandler(long jarg1);
  public final static native void HImErrorHandler_RegisterCallbacks();
  public final static native void HImErrorHandler_Block(int jarg1, int jarg2, int jarg3);
  public final static native void HImErrorHandler_Pass(int jarg1, int jarg2, int jarg3);
  public final static native void HImErrorHandler_SetBlockByDefault(long jarg1, HImErrorHandler jarg1_, boolean jarg2);
  public final static native boolean HImErrorHandler_BlockByDefault();
  public final static native void HImErrorHandler_CallbackEntryPoint(int jarg1, int jarg2, int jarg3, int jarg4, long jarg5, int jarg6, long jarg7);
  public final static native int VI_BITS_get();
  public final static native int VI_MASK_get();
  public final static native int MAX_SI_INDEX_get();
  public final static native void ShellInfo_key_set(long jarg1, ShellInfo jarg1_, long jarg2);
  public final static native long ShellInfo_key_get(long jarg1, ShellInfo jarg1_);
  public final static native void ShellInfo_offset_set(long jarg1, ShellInfo jarg1_, long jarg2);
  public final static native long ShellInfo_offset_get(long jarg1, ShellInfo jarg1_);
  public final static native long new_ShellInfo();
  public final static native void delete_ShellInfo(long jarg1);
  public final static native void PairToIndex_get_bigIndices(long jarg1, PairToIndex jarg1_, int[] jarg2, int jarg3);
  public final static native void PairToIndex_key_set(long jarg1, PairToIndex jarg1_, long jarg2);
  public final static native long PairToIndex_key_get(long jarg1, PairToIndex jarg1_);
  public final static native long new_PairToIndex();
  public final static native void delete_PairToIndex(long jarg1);
  public final static native int UNUSED_INDEX_TO_PAIR_get();
  public final static native void SharedVertex_get_IndexToPair(long jarg1, SharedVertex jarg1_, int[] jarg2, int jarg3);
  public final static native long new_SharedVertex();
  public final static native void delete_SharedVertex(long jarg1);
  public final static native long new_HUtilitySparseShell(boolean jarg1, boolean jarg2);
  public final static native void delete_HUtilitySparseShell(long jarg1);
  public final static native long HUtilitySparseShell_KInsertShell(long jarg1, HUtilitySparseShell jarg1_, int jarg2, long[] jarg3, int jarg4, int[] jarg5);
  public final static native void HUtilitySparseShell_DeleteByKey(long jarg1, HUtilitySparseShell jarg1_, long jarg2);
  public final static native void HUtilitySparseShell_EditShellPoints(long jarg1, HUtilitySparseShell jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, long[] jarg6);
  public final static native void HUtilitySparseShell_EditShellFaces(long jarg1, HUtilitySparseShell jarg1_, long jarg2, int jarg3, int jarg4, int jarg5, int[] jarg6);
  public final static native int HUtilitySparseShell_GetPairCount(long jarg1, HUtilitySparseShell jarg1_, int jarg2);
  public final static native boolean HUtilitySparseShell_GetPair(long jarg1, HUtilitySparseShell jarg1_, int jarg2, int jarg3, long[] jarg4, int[] jarg5);
  public final static native boolean HUtilitySparseShell_GetPairs(long jarg1, HUtilitySparseShell jarg1_, int jarg2, long[] jarg3, int[] jarg4);
  public final static native boolean HUtilitySparseShell_GetIndex(long jarg1, HUtilitySparseShell jarg1_, long jarg2, int jarg3, int[] jarg4);
  public final static native long new_HU3DOptions();
  public final static native void HU3DOptions_Reset(long jarg1, HU3DOptions jarg1_);
  public final static native void HU3DOptions_m_bExportLines_set(long jarg1, HU3DOptions jarg1_, boolean jarg2);
  public final static native boolean HU3DOptions_m_bExportLines_get(long jarg1, HU3DOptions jarg1_);
  public final static native void HU3DOptions_m_bExportAnnotations_set(long jarg1, HU3DOptions jarg1_, boolean jarg2);
  public final static native boolean HU3DOptions_m_bExportAnnotations_get(long jarg1, HU3DOptions jarg1_);
  public final static native boolean HU3DOptions_ExportLines__SWIG_0(long jarg1, HU3DOptions jarg1_);
  public final static native void HU3DOptions_ExportLines__SWIG_1(long jarg1, HU3DOptions jarg1_, boolean jarg2);
  public final static native boolean HU3DOptions_ExportAnnotations__SWIG_0(long jarg1, HU3DOptions jarg1_);
  public final static native void HU3DOptions_ExportAnnotations__SWIG_1(long jarg1, HU3DOptions jarg1_, boolean jarg2);
  public final static native void delete_HU3DOptions(long jarg1);
  public final static native long new_HIOUtilityPDF();
  public final static native void delete_HIOUtilityPDF(long jarg1);
  public final static native String HIOUtilityPDF_GetOutputName(long jarg1, HIOUtilityPDF jarg1_);
  public final static native void HIOUtilityPDF_RegisterOutputHandlerTypes(long jarg1, HIOUtilityPDF jarg1_);
  public final static native String HIOUtilityPDF_GetOutputTypesString(long jarg1, HIOUtilityPDF jarg1_);
  public final static native int HIOUtilityPDF_GetOutputStyle(long jarg1, HIOUtilityPDF jarg1_);
  public final static native String HIOUtilityPDF_GetOutputDefaultHSRA(long jarg1, HIOUtilityPDF jarg1_);
  public final static native boolean HIOUtilityPDF_Has3dSupport(long jarg1, HIOUtilityPDF jarg1_);
  public final static native int HIOUtilityPDF_FileOutputByKey__SWIG_0(long jarg1, HIOUtilityPDF jarg1_, long jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native int HIOUtilityPDF_FileOutputByKey__SWIG_1(long jarg1, HIOUtilityPDF jarg1_, String jarg2, long jarg3, long jarg4, HOutputHandlerOptions jarg4_);
  public final static native long new_TK_Dispatch_XML(long jarg1, HBaseModel jarg1_);
  public final static native void delete_TK_Dispatch_XML(long jarg1);
  public final static native int TK_Dispatch_XML_Interpret(long jarg1, TK_Dispatch_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_, int jarg3, int jarg4);
  public final static native int TK_Dispatch_XML_Execute(long jarg1, TK_Dispatch_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native int TK_Dispatch_XML_Read(long jarg1, TK_Dispatch_XML jarg1_, long jarg2, BStreamFileToolkit jarg2_);
  public final static native void TK_Dispatch_XML_AddHandler(long jarg1, TK_Dispatch_XML jarg1_, long jarg2, TK_XML jarg2_);
  public final static native void TK_Dispatch_XML_StopIteration(long jarg1, TK_Dispatch_XML jarg1_);
  public final static native long TK_Dispatch_XML_MakeCopy(long jarg1, TK_Dispatch_XML jarg1_);
  public final static native long new_HBhvTargetObject__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3, long jarg4, HPoint jarg4_);
  public final static native long new_HBhvTargetObject__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3);
  public final static native String HBhvTargetObject_GetName(long jarg1, HBhvTargetObject jarg1_);
  public final static native String HBhvTargetObject_GetPath(long jarg1, HBhvTargetObject jarg1_);
  public final static native long HBhvTargetObject_GetTargetKey(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_SetTargetKey(long jarg1, HBhvTargetObject jarg1_, long jarg2);
  public final static native String HBhvTargetObject_GetResolvedPath(long jarg1, HBhvTargetObject jarg1_);
  public final static native String HBhvTargetObject_GetType(long jarg1, HBhvTargetObject jarg1_);
  public final static native boolean HBhvTargetObject_IsEqual(long jarg1, HBhvTargetObject jarg1_, String jarg2);
  public final static native int HBhvTargetObject_GetCameraType(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_ResolveTarget(String jarg1, StringBuffer jarg2, StringBuffer jarg3, long jarg4, HBaseModel jarg4_, long jarg5);
  public final static native void HBhvTargetObject_CreateTargetString__SWIG_0(String jarg1, String jarg2, StringBuffer jarg3, boolean jarg4);
  public final static native void HBhvTargetObject_CreateTargetString__SWIG_1(String jarg1, String jarg2, StringBuffer jarg3);
  public final static native void HBhvTargetObject_SetPivot__SWIG_0(long jarg1, HBhvTargetObject jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HBhvTargetObject_SetCollision(long jarg1, HBhvTargetObject jarg1_, boolean jarg2);
  public final static native boolean HBhvTargetObject_GetCollision(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_SetPivot__SWIG_1(long jarg1, HBhvTargetObject jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void HBhvTargetObject_GetPivot__SWIG_0(long jarg1, HBhvTargetObject jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HBhvTargetObject_GetPivot__SWIG_1(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_Serialize(long jarg1, HBhvTargetObject jarg1_, long jarg2);
  public final static native long HBhvTargetObject_XMLCallback(long jarg1, boolean jarg2, long jarg3);
  public final static native void HBhvTargetObject_FlagForCollision(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_ResetForCollision(long jarg1, HBhvTargetObject jarg1_);
  public final static native boolean HBhvTargetObject_HasMoved(long jarg1, HBhvTargetObject jarg1_);
  public final static native void HBhvTargetObject_SetSerializeFromKey(long jarg1, HBhvTargetObject jarg1_, boolean jarg2);
  public final static native void delete_HBhvTargetObject(long jarg1);
  public final static native long new_HBhvBehaviorManager__SWIG_0(long jarg1, HBaseModel jarg1_, int jarg2, int jarg3, String jarg4, String jarg5, String jarg6);
  public final static native long new_HBhvBehaviorManager__SWIG_1(long jarg1, HBaseModel jarg1_, int jarg2, int jarg3, String jarg4, String jarg5);
  public final static native long new_HBhvBehaviorManager__SWIG_2(long jarg1, HBaseModel jarg1_, int jarg2, int jarg3, String jarg4);
  public final static native long new_HBhvBehaviorManager__SWIG_3(long jarg1, HBaseModel jarg1_, int jarg2, int jarg3);
  public final static native long new_HBhvBehaviorManager__SWIG_4(long jarg1, HBaseModel jarg1_, int jarg2);
  public final static native long new_HBhvBehaviorManager__SWIG_5(long jarg1, HBaseModel jarg1_);
  public final static native void delete_HBhvBehaviorManager(long jarg1);
  public final static native void HBhvBehaviorManager_SetTicksPerSecond(long jarg1, HBhvBehaviorManager jarg1_, int jarg2);
  public final static native int HBhvBehaviorManager_GetTicksPerSecond(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_Serialize(long jarg1, HBhvBehaviorManager jarg1_, long jarg2);
  public final static native void HBhvBehaviorManager_ScheduleAnimation(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBhvAnimation jarg2_, float jarg3);
  public final static native long HBhvBehaviorManager_AddAnimation__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3, long jarg4, long jarg5);
  public final static native void HBhvBehaviorManager_AddAnimation__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native boolean HBhvBehaviorManager_Tick(long jarg1, HBhvBehaviorManager jarg1_, float jarg2, float jarg3);
  public final static native long HBhvBehaviorManager_GetAnimationList(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native int HBhvBehaviorManager_GetFreeName(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_DeleteAllAnimations(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native long HBhvBehaviorManager_FindAnimation(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3);
  public final static native long HBhvBehaviorManager_FindAnimationByName(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_ScheduleAllAnimations__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native void HBhvBehaviorManager_ScheduleAllAnimations__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_DeleteAnimation(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native long HBhvBehaviorManager_CreateTargetObjectByPath(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3);
  public final static native void HBhvBehaviorManager_AddTargetObject(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBhvTargetObject jarg2_);
  public final static native long HBhvBehaviorManager_FindTargetObjectByName(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native long HBhvBehaviorManager_FindTargetObjectByPath(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_WriteToFile__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, long jarg2);
  public final static native void HBhvBehaviorManager_WriteToFile__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_ReadFromFile__SWIG_0(long jarg1, HBaseModel jarg1_, long jarg2);
  public final static native void HBhvBehaviorManager_ReadFromFile__SWIG_1(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_ProcessXMLData(long jarg1, HBaseModel jarg1_, String jarg2);
  public final static native long HBhvBehaviorManager_XMLCallback(long jarg1, boolean jarg2, long jarg3);
  public final static native long HBhvBehaviorManager_GetModel(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetCurrentTickByTime(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native void HBhvBehaviorManager_SetCurrentTick__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native void HBhvBehaviorManager_SetCurrentTick__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native float HBhvBehaviorManager_GetCurrentTick(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetCurrentTickByPercentage(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native float HBhvBehaviorManager_GetCurrentTickByPercentage(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_Rewind(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native boolean HBhvBehaviorManager_IsPlaying(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native long HBhvBehaviorManager_GetActiveSceneKey(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetActiveView(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBaseView jarg2_);
  public final static native long HBhvBehaviorManager_GetActiveView(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native boolean HBhvBehaviorManager_GetRenderEveryTick(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetRenderEveryTick(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native boolean HBhvBehaviorManager_GetUpdateCamera(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native boolean HBhvBehaviorManager_IsAtFinalTick(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetUpdateCamera(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native int HBhvBehaviorManager_GetNextKeyframe(long jarg1, HBhvBehaviorManager jarg1_, int jarg2, boolean jarg3);
  public final static native void HBhvBehaviorManager_AddSensor(long jarg1, HBhvBehaviorManager jarg1_, long jarg2);
  public final static native void HBhvBehaviorManager_RemoveScheduledAnimation(long jarg1, HBhvBehaviorManager jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native boolean HBhvBehaviorManager_HasAnimations(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native int HBhvBehaviorManager_GetLastTick(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native long HBhvBehaviorManager_FindSensorByName(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_ExecuteAnimations(long jarg1, HBhvBehaviorManager jarg1_, float jarg2, float jarg3);
  public final static native void HBhvBehaviorManager_SetContinuousPlay(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native void HBhvBehaviorManager_SetInfinitePlay(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native boolean HBhvBehaviorManager_GetContinuousPlay(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_CameraUpdated(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native boolean HBhvBehaviorManager_GetCameraUpdated(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_Play(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_Stop(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_Continue(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_SetPositionMatrix(long jarg1, HBhvBehaviorManager jarg1_, float[] jarg2);
  public final static native void HBhvBehaviorManager_GetPositionMatrix(long jarg1, HBhvBehaviorManager jarg1_, float[] jarg2);
  public final static native void HBhvBehaviorManager_SetTargetMatrix(long jarg1, HBhvBehaviorManager jarg1_, float[] jarg2);
  public final static native void HBhvBehaviorManager_GetTargetMatrix(long jarg1, HBhvBehaviorManager jarg1_, float[] jarg2);
  public final static native void HBhvBehaviorManager_SetFov(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native void HBhvBehaviorManager_GetFov(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native void HBhvBehaviorManager_Reset(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_DeactivateAllAnimations(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_ActivateAllAnimations(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native void HBhvBehaviorManager_ActivateAnimationByName__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, boolean jarg3);
  public final static native void HBhvBehaviorManager_ActivateAnimationByName__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_DeactivateAnimationByName__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, boolean jarg3);
  public final static native void HBhvBehaviorManager_DeactivateAnimationByName__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2);
  public final static native void HBhvBehaviorManager_SetStartTime(long jarg1, HBhvBehaviorManager jarg1_, float jarg2);
  public final static native void HBhvBehaviorManager_SetMerge(long jarg1, HBhvBehaviorManager jarg1_, boolean jarg2);
  public final static native boolean HBhvBehaviorManager_GetMerge(long jarg1, HBhvBehaviorManager jarg1_);
  public final static native long HBhvBehaviorManager_AddAnimation__SWIG_2(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, String jarg3, long jarg4, HPoint jarg4_);
  public final static native void HBhvBehaviorManager_AddPositionKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5);
  public final static native void HBhvBehaviorManager_AddQuatSquadKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HQuat jarg4_, boolean jarg5);
  public final static native void HBhvBehaviorManager_AddMatrixKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, float[] jarg4);
  public final static native void HBhvBehaviorManager_AddSegmentMoveKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, StringBuffer jarg4);
  public final static native void HBhvBehaviorManager_AddTrailKeyframe__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5, long jarg6, int[] jarg7, String jarg8, String jarg9);
  public final static native void HBhvBehaviorManager_AddTrailKeyframe__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5, long jarg6, int[] jarg7, String jarg8);
  public final static native void HBhvBehaviorManager_AddTrailKeyframe__SWIG_2(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5, long jarg6, int[] jarg7);
  public final static native void HBhvBehaviorManager_AddTrailKeyframe__SWIG_3(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5, long jarg6);
  public final static native void HBhvBehaviorManager_AddTrailKeyframe__SWIG_4(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5);
  public final static native void HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, float jarg4, long jarg5, HPoint jarg5_);
  public final static native void HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, float jarg4);
  public final static native void HBhvBehaviorManager_AddColorKeyframe__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, String jarg5, String jarg6);
  public final static native void HBhvBehaviorManager_AddColorKeyframe__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, String jarg5);
  public final static native void HBhvBehaviorManager_AddColorKeyframe__SWIG_2(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_);
  public final static native void HBhvBehaviorManager_AddScaleKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_);
  public final static native void HBhvBehaviorManager_AddAttributeSwitchKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, String jarg4);
  public final static native void HBhvBehaviorManager_AddVertexMorphInterpolator(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, String jarg4, boolean jarg5);
  public final static native void HBhvBehaviorManager_AddColorMorphInterpolator(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, String jarg4, boolean jarg5);
  public final static native void HBhvBehaviorManager_AddSegmentSwitchKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, String jarg4);
  public final static native void HBhvBehaviorManager_AddInstanceCreateKeyframe(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, int jarg3, String jarg4);
  public final static native void HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, long jarg3, HPoint jarg3_, int jarg4, long jarg5, HBaseModel jarg5_, int jarg6);
  public final static native void HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, long jarg3, HPoint jarg3_, int jarg4, long jarg5, HBaseModel jarg5_);
  public final static native void HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_0(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, long jarg3, HPoint jarg3_, int jarg4, long jarg5, HBaseModel jarg5_, int jarg6);
  public final static native void HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_1(long jarg1, HBhvBehaviorManager jarg1_, String jarg2, long jarg3, HPoint jarg3_, int jarg4, long jarg5, HBaseModel jarg5_);
  public final static native int BHV_MAX_NAME_LENGTH_get();
  public final static native int BHV_MAX_VERSION_LENGTH_get();
  public final static native int BHV_MAX_VENDOR_LENGTH_get();
  public final static native int BHV_MAX_TYPE_LENGTH_get();
  public final static native void HQuat_x_set(long jarg1, HQuat jarg1_, float jarg2);
  public final static native float HQuat_x_get(long jarg1, HQuat jarg1_);
  public final static native void HQuat_y_set(long jarg1, HQuat jarg1_, float jarg2);
  public final static native float HQuat_y_get(long jarg1, HQuat jarg1_);
  public final static native void HQuat_z_set(long jarg1, HQuat jarg1_, float jarg2);
  public final static native float HQuat_z_get(long jarg1, HQuat jarg1_);
  public final static native void HQuat_w_set(long jarg1, HQuat jarg1_, float jarg2);
  public final static native float HQuat_w_get(long jarg1, HQuat jarg1_);
  public final static native long HQuat_Normalize(long jarg1, HQuat jarg1_);
  public final static native long new_HQuat__SWIG_0();
  public final static native long new_HQuat__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HQuat__SWIG_2(long jarg1, HQuat jarg1_);
  public final static native void HQuat_Set(long jarg1, HQuat jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long HQuat_Qlog(long jarg1, HQuat jarg1_);
  public final static native void HQuat_ToMatrix(long jarg1, HQuat jarg1_, float[] jarg2);
  public final static native long HQuat_Qexp(long jarg1, HQuat jarg1_);
  public final static native long HQuat_Qlerp(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, float jarg3);
  public final static native long HQuat_Qslerp(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, float jarg3);
  public final static native long HQuat_QslerpNoInvert(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, float jarg3);
  public final static native long HQuat_QslerpNoInvertExtraSpins(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, float jarg3, int jarg4);
  public final static native long HQuat_Qsquad(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, long jarg3, HQuat jarg3_, long jarg4, HQuat jarg4_, float jarg5);
  public final static native long HQuat_Qspline(long jarg1, HQuat jarg1_, long jarg2, HQuat jarg2_, long jarg3, HQuat jarg3_);
  public final static native long HQuat_MatrixToQuaternion(float[] jarg1);
  public final static native void delete_HQuat(long jarg1);
  public final static native long new_HKeyframe();
  public final static native void delete_HKeyframe(long jarg1);
  public final static native long HKeyframe_Clone(long jarg1, HKeyframe jarg1_);
  public final static native void HKeyframe_Serialize(long jarg1, HKeyframe jarg1_, long jarg2);
  public final static native void HKeyframe_SetConstant(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native void HKeyframe_SetEaseInOut(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native void HKeyframe_SetRelative(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native void HKeyframe_m_type_set(long jarg1, HKeyframe jarg1_, int jarg2);
  public final static native int HKeyframe_m_type_get(long jarg1, HKeyframe jarg1_);
  public final static native void HKeyframe_m_bConstant_set(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native boolean HKeyframe_m_bConstant_get(long jarg1, HKeyframe jarg1_);
  public final static native void HKeyframe_m_bRelative_set(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native boolean HKeyframe_m_bRelative_get(long jarg1, HKeyframe jarg1_);
  public final static native void HKeyframe_m_bEaseInOut_set(long jarg1, HKeyframe jarg1_, boolean jarg2);
  public final static native boolean HKeyframe_m_bEaseInOut_get(long jarg1, HKeyframe jarg1_);
  public final static native long new_HKeyframeChannel();
  public final static native void delete_HKeyframeChannel(long jarg1);
  public final static native long HKeyframeChannel_Clone(long jarg1, HKeyframeChannel jarg1_);
  public final static native void HKeyframeChannel_Interpolate(long jarg1, HKeyframeChannel jarg1_, long jarg2, int jarg3, float jarg4, int jarg5, long jarg6, HPoint jarg6_);
  public final static native void HKeyframeChannel_m_cp_set(long jarg1, HKeyframeChannel jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HKeyframeChannel_m_cp_get(long jarg1, HKeyframeChannel jarg1_);
  public final static native void HKeyframeChannel_m_channeltype_set(long jarg1, HKeyframeChannel jarg1_, int jarg2);
  public final static native int HKeyframeChannel_m_channeltype_get(long jarg1, HKeyframeChannel jarg1_);
  public final static native long new_HKeyframeChannelLinear__SWIG_0(float jarg1, float jarg2, float jarg3);
  public final static native long new_HKeyframeChannelLinear__SWIG_1(float jarg1, float jarg2);
  public final static native long new_HKeyframeChannelLinear__SWIG_2(float jarg1);
  public final static native long new_HKeyframeChannelLinear__SWIG_3();
  public final static native void delete_HKeyframeChannelLinear(long jarg1);
  public final static native long HKeyframeChannelLinear_Clone(long jarg1, HKeyframeChannelLinear jarg1_);
  public final static native void HKeyframeChannelLinear_Interpolate(long jarg1, HKeyframeChannelLinear jarg1_, long jarg2, int jarg3, float jarg4, int jarg5, long jarg6, HPoint jarg6_);
  public final static native void HKeyframeChannelLinear_Serialize(long jarg1, HKeyframeChannelLinear jarg1_, long jarg2);
  public final static native long new_HKeyframeChannelDiscrete__SWIG_0(float jarg1, float jarg2, float jarg3);
  public final static native long new_HKeyframeChannelDiscrete__SWIG_1(float jarg1, float jarg2);
  public final static native long new_HKeyframeChannelDiscrete__SWIG_2(float jarg1);
  public final static native long new_HKeyframeChannelDiscrete__SWIG_3();
  public final static native void delete_HKeyframeChannelDiscrete(long jarg1);
  public final static native long HKeyframeChannelDiscrete_Clone(long jarg1, HKeyframeChannelDiscrete jarg1_);
  public final static native void HKeyframeChannelDiscrete_Interpolate(long jarg1, HKeyframeChannelDiscrete jarg1_, long jarg2, int jarg3, float jarg4, int jarg5, long jarg6, HPoint jarg6_);
  public final static native void HKeyframeChannelDiscrete_Serialize(long jarg1, HKeyframeChannelDiscrete jarg1_, long jarg2);
  public final static native long new_HKeyframeChannelCurve__SWIG_0(float jarg1, float jarg2, float jarg3);
  public final static native long new_HKeyframeChannelCurve__SWIG_1(float jarg1, float jarg2);
  public final static native long new_HKeyframeChannelCurve__SWIG_2(float jarg1);
  public final static native long new_HKeyframeChannelCurve__SWIG_3();
  public final static native void delete_HKeyframeChannelCurve(long jarg1);
  public final static native long HKeyframeChannelCurve_Clone(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_CalculateCurveFactor(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, int jarg3);
  public final static native void HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_0(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5);
  public final static native void HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_1(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native long HKeyframeChannelCurve_InterpolateHermiteSpline(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_);
  public final static native void HKeyframeChannelCurve_CalculateCurveLength(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HKeyframeChannelCurve_DrawTangents(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_);
  public final static native void HKeyframeChannelCurve_Interpolate(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, int jarg3, float jarg4, int jarg5, long jarg6, HPoint jarg6_);
  public final static native void HKeyframeChannelCurve_Serialize(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2);
  public final static native void HKeyframeChannelCurve_m_tangent1_set(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HKeyframeChannelCurve_m_tangent1_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_m_tangent2_set(long jarg1, HKeyframeChannelCurve jarg1_, long jarg2, HPoint jarg2_);
  public final static native long HKeyframeChannelCurve_m_tangent2_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_m_factor1_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_m_factor1_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_m_factor2_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_m_factor2_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_ItemType_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_ItemType_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_c_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_c_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_b_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_b_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_m_curvelength_set(long jarg1, HKeyframeChannelCurve jarg1_, float jarg2);
  public final static native float HKeyframeChannelCurve_m_curvelength_get(long jarg1, HKeyframeChannelCurve jarg1_);
  public final static native void HKeyframeChannelCurve_get_control_polygon(long jarg1, HKeyframeChannelCurve jarg1_, long[] jarg2, int jarg3);
  public final static native long new_HKeyframeChannelFollowPath();
  public final static native void delete_HKeyframeChannelFollowPath(long jarg1);
  public final static native long HKeyframeChannelFollowPath_Clone(long jarg1, HKeyframeChannelFollowPath jarg1_);
  public final static native void HKeyframeChannelFollowPath_Interpolate(long jarg1, HKeyframeChannelFollowPath jarg1_, long jarg2, int jarg3, float jarg4, int jarg5, long jarg6, HPoint jarg6_);
  public final static native void HKeyframeChannelFollowPath_Serialize(long jarg1, HKeyframeChannelFollowPath jarg1_, long jarg2);
  public final static native void HKeyframeChannelFollowPath_m_bLinear_set(long jarg1, HKeyframeChannelFollowPath jarg1_, boolean jarg2);
  public final static native boolean HKeyframeChannelFollowPath_m_bLinear_get(long jarg1, HKeyframeChannelFollowPath jarg1_);
  public final static native void HKeyframeChannelFollowPath_m_bNoRotate_set(long jarg1, HKeyframeChannelFollowPath jarg1_, boolean jarg2);
  public final static native boolean HKeyframeChannelFollowPath_m_bNoRotate_get(long jarg1, HKeyframeChannelFollowPath jarg1_);
  public final static native void HKeyframeChannelFollowPath_get_tmatrix(long jarg1, HKeyframeChannelFollowPath jarg1_, float[] jarg2, int jarg3);
  public final static native void HKeyframeChannelFollowPath_get_tmatrix2(long jarg1, HKeyframeChannelFollowPath jarg1_, float[] jarg2, int jarg3);
  public final static native long new_HKeyframeRotation();
  public final static native void delete_HKeyframeRotation(long jarg1);
  public final static native long HKeyframeRotation_Clone(long jarg1, HKeyframeRotation jarg1_);
  public final static native void HKeyframeRotation_m_rotationtype_set(long jarg1, HKeyframeRotation jarg1_, int jarg2);
  public final static native int HKeyframeRotation_m_rotationtype_get(long jarg1, HKeyframeRotation jarg1_);
  public final static native void HKeyframeRotation_m_bLinear_set(long jarg1, HKeyframeRotation jarg1_, boolean jarg2);
  public final static native boolean HKeyframeRotation_m_bLinear_get(long jarg1, HKeyframeRotation jarg1_);
  public final static native long new_HKeyframeAxisRotation__SWIG_0(float jarg1);
  public final static native long new_HKeyframeAxisRotation__SWIG_1();
  public final static native void delete_HKeyframeAxisRotation(long jarg1);
  public final static native long HKeyframeAxisRotation_Clone(long jarg1, HKeyframeAxisRotation jarg1_);
  public final static native void HKeyframeAxisRotation_Serialize(long jarg1, HKeyframeAxisRotation jarg1_, long jarg2);
  public final static native void HKeyframeAxisRotation_m_angle_set(long jarg1, HKeyframeAxisRotation jarg1_, float jarg2);
  public final static native float HKeyframeAxisRotation_m_angle_get(long jarg1, HKeyframeAxisRotation jarg1_);
  public final static native long new_HKeyframeQuatSlerp__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HKeyframeQuatSlerp__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HKeyframeQuatSlerp__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HKeyframeQuatSlerp__SWIG_3(float jarg1);
  public final static native long new_HKeyframeQuatSlerp__SWIG_4();
  public final static native void delete_HKeyframeQuatSlerp(long jarg1);
  public final static native long HKeyframeQuatSlerp_Clone(long jarg1, HKeyframeQuatSlerp jarg1_);
  public final static native void HKeyframeQuatSlerp_m_quat_set(long jarg1, HKeyframeQuatSlerp jarg1_, long jarg2, HQuat jarg2_);
  public final static native long HKeyframeQuatSlerp_m_quat_get(long jarg1, HKeyframeQuatSlerp jarg1_);
  public final static native long new_HKeyframeQuatSquad__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_HKeyframeQuatSquad__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native long new_HKeyframeQuatSquad__SWIG_2(float jarg1, float jarg2);
  public final static native long new_HKeyframeQuatSquad__SWIG_3(float jarg1);
  public final static native long new_HKeyframeQuatSquad__SWIG_4();
  public final static native void delete_HKeyframeQuatSquad(long jarg1);
  public final static native long HKeyframeQuatSquad_Clone(long jarg1, HKeyframeQuatSquad jarg1_);
  public final static native void HKeyframeQuatSquad_Serialize(long jarg1, HKeyframeQuatSquad jarg1_, long jarg2);
  public final static native void HKeyframeQuatSquad_m_quat_set(long jarg1, HKeyframeQuatSquad jarg1_, long jarg2, HQuat jarg2_);
  public final static native long HKeyframeQuatSquad_m_quat_get(long jarg1, HKeyframeQuatSquad jarg1_);
  public final static native void HKeyframeQuatSquad_m_ExtraSpins_set(long jarg1, HKeyframeQuatSquad jarg1_, int jarg2);
  public final static native int HKeyframeQuatSquad_m_ExtraSpins_get(long jarg1, HKeyframeQuatSquad jarg1_);
  public final static native long new_HKeyframeMatrix__SWIG_0(float[] jarg1);
  public final static native long new_HKeyframeMatrix__SWIG_1();
  public final static native void delete_HKeyframeMatrix(long jarg1);
  public final static native long HKeyframeMatrix_Clone(long jarg1, HKeyframeMatrix jarg1_);
  public final static native void HKeyframeMatrix_Serialize(long jarg1, HKeyframeMatrix jarg1_, long jarg2);
  public final static native void HKeyframeMatrix_m_ExtraSpins_set(long jarg1, HKeyframeMatrix jarg1_, int jarg2);
  public final static native int HKeyframeMatrix_m_ExtraSpins_get(long jarg1, HKeyframeMatrix jarg1_);
  public final static native void HKeyframeMatrix_get_m_matrix(long jarg1, HKeyframeMatrix jarg1_, float[] jarg2, int jarg3);
  public final static native long new_HKeyframeString();
  public final static native void delete_HKeyframeString(long jarg1);
  public final static native long HKeyframeString_Clone(long jarg1, HKeyframeString jarg1_);
  public final static native void HKeyframeString_Serialize(long jarg1, HKeyframeString jarg1_, long jarg2);
  public final static native void HKeyframeString_SetTarget(long jarg1, HKeyframeString jarg1_, String jarg2);
  public final static native StringBuffer HKeyframeString_GetTarget(long jarg1, HKeyframeString jarg1_);
  public final static native void HKeyframeString_m_target_set(long jarg1, HKeyframeString jarg1_, String jarg2);
  public final static native String HKeyframeString_m_target_get(long jarg1, HKeyframeString jarg1_);
  public final static native void HKeyframeString_m_bDiscrete_set(long jarg1, HKeyframeString jarg1_, boolean jarg2);
  public final static native boolean HKeyframeString_m_bDiscrete_get(long jarg1, HKeyframeString jarg1_);
  public final static native long new_HKeyframe3String();
  public final static native void delete_HKeyframe3String(long jarg1);
  public final static native long HKeyframe3String_Clone(long jarg1, HKeyframe3String jarg1_);
  public final static native void HKeyframe3String_Serialize(long jarg1, HKeyframe3String jarg1_, long jarg2);
  public final static native void HKeyframe3String_SetTarget(long jarg1, HKeyframe3String jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native StringBuffer HKeyframe3String_GetTarget1(long jarg1, HKeyframe3String jarg1_);
  public final static native StringBuffer HKeyframe3String_GetTarget2(long jarg1, HKeyframe3String jarg1_);
  public final static native StringBuffer HKeyframe3String_GetTarget3(long jarg1, HKeyframe3String jarg1_);
  public final static native void HKeyframe3String_m_t1_set(long jarg1, HKeyframe3String jarg1_, String jarg2);
  public final static native String HKeyframe3String_m_t1_get(long jarg1, HKeyframe3String jarg1_);
  public final static native void HKeyframe3String_m_t2_set(long jarg1, HKeyframe3String jarg1_, String jarg2);
  public final static native String HKeyframe3String_m_t2_get(long jarg1, HKeyframe3String jarg1_);
  public final static native void HKeyframe3String_m_t3_set(long jarg1, HKeyframe3String jarg1_, String jarg2);
  public final static native String HKeyframe3String_m_t3_get(long jarg1, HKeyframe3String jarg1_);
  public final static native long new_ShellMorphInfo();
  public final static native void ShellMorphInfo_arrays_list_set(long jarg1, ShellMorphInfo jarg1_, long jarg2);
  public final static native long ShellMorphInfo_arrays_list_get(long jarg1, ShellMorphInfo jarg1_);
  public final static native void ShellMorphInfo_original_key_set(long jarg1, ShellMorphInfo jarg1_, long jarg2);
  public final static native long ShellMorphInfo_original_key_get(long jarg1, ShellMorphInfo jarg1_);
  public final static native void ShellMorphInfo_temp_key_set(long jarg1, ShellMorphInfo jarg1_, long jarg2);
  public final static native long ShellMorphInfo_temp_key_get(long jarg1, ShellMorphInfo jarg1_);
  public final static native void delete_ShellMorphInfo(long jarg1);
  public final static native void HBhvUtility_GetQuatPoint__SWIG_0(long jarg1, HUtilityTextParser jarg1_, long jarg2, HQuat jarg2_);
  public final static native void HBhvUtility_GetMatrix__SWIG_0(long jarg1, HUtilityTextParser jarg1_, float[] jarg2);
  public final static native void HBhvUtility_GetQuatPoint__SWIG_1(String jarg1, long jarg2, HQuat jarg2_);
  public final static native void HBhvUtility_GetMatrix__SWIG_1(String jarg1, float[] jarg2);
  public final static native void HBhvUtility_ConvertHSFtoMorph(String jarg1, long jarg2, HBaseModel jarg2_);
  public final static native void HBhvUtility_ConvertHSFtoSegSwitch(String jarg1, long jarg2, HBaseModel jarg2_);
  public final static native void HBhvUtility_SetupAnimationReadFromHSF(long jarg1, HStreamFileToolkit jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native void HBhvUtility_SetupAnimationWriteFromHSF(long jarg1, HStreamFileToolkit jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native void HBhvUtility_ShowModellingMatrix(float[] jarg1);
  public final static native void HBhvUtility_MakeCameraKeyframe__SWIG_0(long jarg1, HBaseView jarg1_, float jarg2, boolean jarg3);
  public final static native void HBhvUtility_MakeCameraKeyframe__SWIG_1(long jarg1, HBaseView jarg1_, float jarg2);
  public final static native long HBhvUtility_AddAnimation(long jarg1, HBaseModel jarg1_, StringBuffer jarg2, StringBuffer jarg3, long jarg4, HPoint jarg4_);
  public final static native void HBhvUtility_AddPosKeyframe(long jarg1, HBaseModel jarg1_, StringBuffer jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5);
  public final static native void HBhvUtility_AddRotKeyframe(long jarg1, HBaseModel jarg1_, StringBuffer jarg2, int jarg3, long jarg4, HQuat jarg4_, boolean jarg5);
  public final static native void HBhvUtility_AddPosRotKeyframe__SWIG_0(long jarg1, HBaseModel jarg1_, String jarg2, int jarg3, long jarg4, HPoint jarg4_, float[] jarg5);
  public final static native void HBhvUtility_AddMatrixKeyframe(long jarg1, HBaseModel jarg1_, long jarg2, HBhvAnimation jarg2_, int jarg3, float[] jarg4);
  public final static native void HBhvUtility_AddPosRotKeyframe__SWIG_1(long jarg1, HBaseModel jarg1_, StringBuffer jarg2, int jarg3, long jarg4, HPoint jarg4_, boolean jarg5, long jarg6, HQuat jarg6_, boolean jarg7);
  public final static native void HBhvUtility_AddInstanceCreateKeyframe(long jarg1, HBaseModel jarg1_, StringBuffer jarg2, int jarg3, StringBuffer jarg4, StringBuffer jarg5, StringBuffer jarg6);
  public final static native void HBhvUtility_AddSegmentMoveKeyframe(long jarg1, HBaseModel jarg1_, long jarg2, HBhvAnimation jarg2_, int jarg3, StringBuffer jarg4);
  public final static native long new_HBhvUtility();
  public final static native void delete_HBhvUtility(long jarg1);
  public final static native void segmentanimation_get_matrix(long jarg1, segmentanimation jarg1_, float[] jarg2, int jarg3);
  public final static native void segmentanimation_segkey_set(long jarg1, segmentanimation jarg1_, long jarg2);
  public final static native long segmentanimation_segkey_get(long jarg1, segmentanimation jarg1_);
  public final static native void segmentanimation_anim_set(long jarg1, segmentanimation jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native long segmentanimation_anim_get(long jarg1, segmentanimation jarg1_);
  public final static native void segmentanimation_anim2_set(long jarg1, segmentanimation jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native long segmentanimation_anim2_get(long jarg1, segmentanimation jarg1_);
  public final static native void segmentanimation_tick_set(long jarg1, segmentanimation jarg1_, int jarg2);
  public final static native int segmentanimation_tick_get(long jarg1, segmentanimation jarg1_);
  public final static native void segmentanimation_tick2_set(long jarg1, segmentanimation jarg1_, int jarg2);
  public final static native int segmentanimation_tick2_get(long jarg1, segmentanimation jarg1_);
  public final static native void segmentanimation_path_set(long jarg1, segmentanimation jarg1_, StringBuffer jarg2);
  public final static native StringBuffer segmentanimation_path_get(long jarg1, segmentanimation jarg1_);
  public final static native long new_segmentanimation();
  public final static native void delete_segmentanimation(long jarg1);
  public final static native long new_HBhvSegmentTracker(long jarg1, HBaseModel jarg1_);
  public final static native void HBhvSegmentTracker_MakeTreeSnapshotRecursive(long jarg1, HBhvSegmentTracker jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void HBhvSegmentTracker_MakeTreeSnapshot(long jarg1, HBhvSegmentTracker jarg1_);
  public final static native void HBhvSegmentTracker_m_TrackerKey_set(long jarg1, HBhvSegmentTracker jarg1_, long jarg2);
  public final static native long HBhvSegmentTracker_m_TrackerKey_get(long jarg1, HBhvSegmentTracker jarg1_);
  public final static native void HBhvSegmentTracker_m_pModel_set(long jarg1, HBhvSegmentTracker jarg1_, long jarg2, HBaseModel jarg2_);
  public final static native long HBhvSegmentTracker_m_pModel_get(long jarg1, HBhvSegmentTracker jarg1_);
  public final static native void HBhvSegmentTracker_m_NewIncludesHash_set(long jarg1, HBhvSegmentTracker jarg1_, long jarg2);
  public final static native long HBhvSegmentTracker_m_NewIncludesHash_get(long jarg1, HBhvSegmentTracker jarg1_);
  public final static native void delete_HBhvSegmentTracker(long jarg1);
  public final static native long new_HBhvKeyframeGenerator(long jarg1, HBaseModel jarg1_);
  public final static native void HBhvKeyframeGenerator_NewFrame(long jarg1, HBhvKeyframeGenerator jarg1_);
  public final static native void HBhvKeyframeGenerator_StartFrames(long jarg1, HBhvKeyframeGenerator jarg1_);
  public final static native boolean HBhvKeyframeGenerator_CompareMatrices(long jarg1, HBhvKeyframeGenerator jarg1_, float[] jarg2, float[] jarg3);
  public final static native void delete_HBhvKeyframeGenerator(long jarg1);
  public final static native long new_HBhvAnimation__SWIG_0(String jarg1, long jarg2, HBhvBehaviorManager jarg2_, long jarg3, HBhvAnimation jarg3_);
  public final static native long new_HBhvAnimation__SWIG_1(String jarg1, long jarg2, HBhvBehaviorManager jarg2_);
  public final static native void delete_HBhvAnimation(long jarg1);
  public final static native String HBhvAnimation_GetType(long jarg1, HBhvAnimation jarg1_);
  public final static native String HBhvAnimation_GetName(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetName(long jarg1, HBhvAnimation jarg1_, String jarg2);
  public final static native boolean HBhvAnimation_Animate__SWIG_0(long jarg1, HBhvAnimation jarg1_, float jarg2);
  public final static native boolean HBhvAnimation_Animate__SWIG_1(long jarg1, HBhvAnimation jarg1_, float jarg2, float jarg3);
  public final static native void HBhvAnimation_DeleteKeyframe(long jarg1, HBhvAnimation jarg1_, int jarg2);
  public final static native void HBhvAnimation_DuplicateNextOrPrevious(long jarg1, HBhvAnimation jarg1_, int jarg2, boolean jarg3);
  public final static native void HBhvAnimation_Duplicate(long jarg1, HBhvAnimation jarg1_, int jarg2, int jarg3);
  public final static native void HBhvAnimation_PlotCurve(long jarg1, HBhvAnimation jarg1_, boolean jarg2);
  public final static native void HBhvAnimation_Serialize__SWIG_0(long jarg1, HBhvAnimation jarg1_, long jarg2, long jarg3);
  public final static native void HBhvAnimation_Serialize__SWIG_1(long jarg1, HBhvAnimation jarg1_, long jarg2);
  public final static native long HBhvAnimation_XMLCallback(long jarg1, boolean jarg2, long jarg3);
  public final static native long HBhvAnimation_GetBehaviorManager(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetBehaviorManager(long jarg1, HBhvAnimation jarg1_, long jarg2, HBhvBehaviorManager jarg2_);
  public final static native int HBhvAnimation_GetFirstTick(long jarg1, HBhvAnimation jarg1_);
  public final static native int HBhvAnimation_GetLastTick(long jarg1, HBhvAnimation jarg1_);
  public final static native int HBhvAnimation_GetLoop(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetLoop(long jarg1, HBhvAnimation jarg1_, int jarg2);
  public final static native long HBhvAnimation_GetTimeline(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetTimeline(long jarg1, HBhvAnimation jarg1_, long jarg2);
  public final static native long HBhvAnimation_CreateInstance(long jarg1, HBhvAnimation jarg1_);
  public final static native long HBhvAnimation_GetInterpolatorList(long jarg1, HBhvAnimation jarg1_);
  public final static native long HBhvAnimation_GetChildAnimationList(long jarg1, HBhvAnimation jarg1_);
  public final static native long HBhvAnimation_GetInterpolator__SWIG_0(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_AddInterpolator(long jarg1, HBhvAnimation jarg1_, long jarg2);
  public final static native void HBhvAnimation_AddChildAnimation(long jarg1, HBhvAnimation jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native long HBhvAnimation_GetParentAnimation(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetDelay(long jarg1, HBhvAnimation jarg1_, int jarg2);
  public final static native int HBhvAnimation_GetDelay(long jarg1, HBhvAnimation jarg1_);
  public final static native long HBhvAnimation_GetTarget(long jarg1, HBhvAnimation jarg1_);
  public final static native long HBhvAnimation_GetInstancedAnimation(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetInstancedAnimation(long jarg1, HBhvAnimation jarg1_, long jarg2, HBhvAnimation jarg2_);
  public final static native void HBhvAnimation_Reset(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetTargetByPath__SWIG_0(long jarg1, HBhvAnimation jarg1_, String jarg2);
  public final static native void HBhvAnimation_SetTargetByPath__SWIG_1(long jarg1, HBhvAnimation jarg1_, String jarg2, String jarg3);
  public final static native void HBhvAnimation_SetTarget(long jarg1, HBhvAnimation jarg1_, long jarg2, HBhvTargetObject jarg2_);
  public final static native boolean HBhvAnimation_GetInterpolator__SWIG_1(long jarg1, HBhvAnimation jarg1_, int jarg2, int[] jarg3, long jarg4);
  public final static native void HBhvAnimation_SetDefaultActive(long jarg1, HBhvAnimation jarg1_, boolean jarg2);
  public final static native boolean HBhvAnimation_GetDefaultActive(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetCurrentlyRunning(long jarg1, HBhvAnimation jarg1_, boolean jarg2);
  public final static native boolean HBhvAnimation_GetCurrentlyRunning(long jarg1, HBhvAnimation jarg1_);
  public final static native float HBhvAnimation_GetCurrentTick(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_AdjustKeyframe__SWIG_0(long jarg1, HBhvAnimation jarg1_, int jarg2, int jarg3, boolean jarg4, boolean jarg5);
  public final static native void HBhvAnimation_AdjustKeyframe__SWIG_1(long jarg1, HBhvAnimation jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native void HBhvAnimation_AdjustKeyframe__SWIG_2(long jarg1, HBhvAnimation jarg1_, int jarg2, int jarg3);
  public final static native void HBhvAnimation_CleanWithoutDelete(long jarg1, HBhvAnimation jarg1_);
  public final static native boolean HBhvAnimation_ExecuteOnce(long jarg1, HBhvAnimation jarg1_);
  public final static native void HBhvAnimation_SetExecuteOnce(long jarg1, HBhvAnimation jarg1_, boolean jarg2);
  public final static native void HBhvAnimation_Evaluate(long jarg1, HBhvAnimation jarg1_, float jarg2, boolean[] jarg3, long jarg4, HPoint jarg4_, boolean[] jarg5, long jarg6, HQuat jarg6_, boolean[] jarg7, long jarg8, HPoint jarg8_);
  public final static native void HBhvAnimation_SetTargetScaleMatrix(long jarg1, HBhvAnimation jarg1_, float[] jarg2);
  public final static native float[] HBhvAnimation_GetTargetScaleMatrix(long jarg1, HBhvAnimation jarg1_);
  public final static native long new_Frame__SWIG_0();
  public final static native long new_Frame__SWIG_1(long jarg1, Frame jarg1_);
  public final static native void delete_Frame(long jarg1);
  public final static native void Frame_Set(long jarg1, Frame jarg1_, long jarg2, Frame jarg2_);
  public final static native int Frame_GetPolylineCount(long jarg1, Frame jarg1_);
  public final static native void Frame_GetPolylines(long jarg1, Frame jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Frame_SetPolylines(long jarg1, Frame jarg1_, int jarg2, long[] jarg3);
  public final static native long new_Drawing__SWIG_0();
  public final static native long new_Drawing__SWIG_1(long jarg1, Drawing jarg1_);
  public final static native void delete_Drawing(long jarg1);
  public final static native void Drawing_Set(long jarg1, Drawing jarg1_, long jarg2, Drawing jarg2_);
  public final static native int Drawing_GetPolygonCount(long jarg1, Drawing jarg1_);
  public final static native void Drawing_GetPolygons(long jarg1, Drawing jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Drawing_SetPolygons(long jarg1, Drawing jarg1_, int jarg2, long[] jarg3);
  public final static native long new_Orientation__SWIG_0();
  public final static native long new_Orientation__SWIG_1(long jarg1, Orientation jarg1_);
  public final static native void delete_Orientation(long jarg1);
  public final static native void Orientation_Set(long jarg1, Orientation jarg1_, long jarg2, Orientation jarg2_);
  public final static native void Orientation_GetXComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_GetXComponent__SWIG_1(long jarg1, Orientation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Orientation_SetXComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_SetXComponent__SWIG_1(long jarg1, Orientation jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Orientation_GetYComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_GetYComponent__SWIG_1(long jarg1, Orientation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Orientation_SetYComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_SetYComponent__SWIG_1(long jarg1, Orientation jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Orientation_GetZComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_GetZComponent__SWIG_1(long jarg1, Orientation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Orientation_SetZComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_SetZComponent__SWIG_1(long jarg1, Orientation jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Orientation_GetOriginComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_GetOriginComponent__SWIG_1(long jarg1, Orientation jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Orientation_SetOriginComponent__SWIG_0(long jarg1, Orientation jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Orientation_SetOriginComponent__SWIG_1(long jarg1, Orientation jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Orientation_GetMatrix(long jarg1, Orientation jarg1_, float[] jarg2);
  public final static native void Orientation_SetMatrix(long jarg1, Orientation jarg1_, float[] jarg2);
  public final static native long new_Polyline__SWIG_0();
  public final static native long new_Polyline__SWIG_1(long jarg1, Polyline jarg1_);
  public final static native void delete_Polyline(long jarg1);
  public final static native void Polyline_Set(long jarg1, Polyline jarg1_, long jarg2, Polyline jarg2_);
  public final static native void Polyline_GetRGBColor__SWIG_0(long jarg1, Polyline jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Polyline_GetRGBColor__SWIG_1(long jarg1, Polyline jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Polyline_SetRGBColor__SWIG_0(long jarg1, Polyline jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Polyline_SetRGBColor__SWIG_1(long jarg1, Polyline jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Polyline_GetLinePattern(long jarg1, Polyline jarg1_, StringBuffer jarg2);
  public final static native void Polyline_SetLinePattern(long jarg1, Polyline jarg1_, String jarg2);
  public final static native int Polyline_GetPointCount(long jarg1, Polyline jarg1_);
  public final static native void Polyline_GetPoints__SWIG_0(long jarg1, Polyline jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Polyline_GetPoints__SWIG_1(long jarg1, Polyline jarg1_, int[] jarg2, float[] jarg3);
  public final static native void Polyline_SetPoints__SWIG_0(long jarg1, Polyline jarg1_, int jarg2, long[] jarg3);
  public final static native void Polyline_SetPoints__SWIG_1(long jarg1, Polyline jarg1_, int jarg2, float[] jarg3);
  public final static native long new_Polygon__SWIG_0();
  public final static native long new_Polygon__SWIG_1(long jarg1, Polygon jarg1_);
  public final static native void delete_Polygon(long jarg1);
  public final static native void Polygon_Set(long jarg1, Polygon jarg1_, long jarg2, Polygon jarg2_);
  public final static native void Polygon_GetRGBColor__SWIG_0(long jarg1, Polygon jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Polygon_GetRGBColor__SWIG_1(long jarg1, Polygon jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void Polygon_SetRGBColor__SWIG_0(long jarg1, Polygon jarg1_, long jarg2, HPoint jarg2_);
  public final static native void Polygon_SetRGBColor__SWIG_1(long jarg1, Polygon jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native int Polygon_GetPointCount(long jarg1, Polygon jarg1_);
  public final static native void Polygon_GetPoints__SWIG_0(long jarg1, Polygon jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Polygon_GetPoints__SWIG_1(long jarg1, Polygon jarg1_, int[] jarg2, float[] jarg3);
  public final static native void Polygon_SetPoints__SWIG_0(long jarg1, Polygon jarg1_, int jarg2, long[] jarg3);
  public final static native void Polygon_SetPoints__SWIG_1(long jarg1, Polygon jarg1_, int jarg2, float[] jarg3);
  public final static native long new_TextAttributes__SWIG_0();
  public final static native long new_TextAttributes__SWIG_1(long jarg1, TextAttributes jarg1_);
  public final static native void delete_TextAttributes(long jarg1);
  public final static native void TextAttributes_Set(long jarg1, TextAttributes jarg1_, long jarg2, TextAttributes jarg2_);
  public final static native void TextAttributes_GetInsertionPoint__SWIG_0(long jarg1, TextAttributes jarg1_, long jarg2, HPoint jarg2_);
  public final static native void TextAttributes_GetInsertionPoint__SWIG_1(long jarg1, TextAttributes jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void TextAttributes_SetInsertionPoint__SWIG_0(long jarg1, TextAttributes jarg1_, long jarg2, HPoint jarg2_);
  public final static native void TextAttributes_SetInsertionPoint__SWIG_1(long jarg1, TextAttributes jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void TextAttributes_GetFontSize(long jarg1, TextAttributes jarg1_, float[] jarg2);
  public final static native void TextAttributes_SetFontSize(long jarg1, TextAttributes jarg1_, float jarg2);
  public final static native void TextAttributes_GetFontName(long jarg1, TextAttributes jarg1_, StringBuffer jarg2);
  public final static native void TextAttributes_SetFontName(long jarg1, TextAttributes jarg1_, String jarg2);
  public final static native void TextAttributes_GetOrientation(long jarg1, TextAttributes jarg1_, long jarg2, Orientation jarg2_);
  public final static native void TextAttributes_SetOrientation(long jarg1, TextAttributes jarg1_, long jarg2, Orientation jarg2_);
  public final static native void TextAttributes_GetRGBColor__SWIG_0(long jarg1, TextAttributes jarg1_, long jarg2, HPoint jarg2_);
  public final static native void TextAttributes_GetRGBColor__SWIG_1(long jarg1, TextAttributes jarg1_, float[] jarg2, float[] jarg3, float[] jarg4);
  public final static native void TextAttributes_SetRGBColor__SWIG_0(long jarg1, TextAttributes jarg1_, long jarg2, HPoint jarg2_);
  public final static native void TextAttributes_SetRGBColor__SWIG_1(long jarg1, TextAttributes jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native boolean TextAttributes_IsBold(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsItalic(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsUnderlined(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsStrikedThrough(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsOverlined(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsStreched(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsWired(long jarg1, TextAttributes jarg1_);
  public final static native boolean TextAttributes_IsFixedWidth(long jarg1, TextAttributes jarg1_);
  public final static native void TextAttributes_SetFormat(long jarg1, TextAttributes jarg1_, String jarg2);
  public final static native double TextAttributes_WidthScale(long jarg1, TextAttributes jarg1_);
  public final static native void TextAttributes_SetWidthScale(long jarg1, TextAttributes jarg1_, double jarg2);
  public final static native long new_PMI_String__SWIG_0();
  public final static native long new_PMI_String__SWIG_1(String jarg1);
  public final static native long new_PMI_String__SWIG_2(long jarg1, PMI_String jarg1_);
  public final static native void delete_PMI_String(long jarg1);
  public final static native void PMI_String_Set(long jarg1, PMI_String jarg1_, long jarg2, PMI_String jarg2_);
  public final static native String PMI_String_CStr(long jarg1, PMI_String jarg1_);
  public final static native String PMI_String_WStr(long jarg1, PMI_String jarg1_);
  public final static native long PMI_String_WLength(long jarg1, PMI_String jarg1_);
  public final static native boolean PMI_String_Equals(long jarg1, PMI_String jarg1_, long jarg2, PMI_String jarg2_);
  public final static native long new_Options__SWIG_0();
  public final static native long new_Options__SWIG_1(long jarg1, Options jarg1_);
  public final static native void delete_Options(long jarg1);
  public final static native void Options_Set(long jarg1, Options jarg1_, long jarg2, Options jarg2_);
  public final static native void Options_SetDisplayParallelToScreen__SWIG_0(long jarg1, Options jarg1_, boolean jarg2);
  public final static native void Options_SetDisplayParallelToScreen__SWIG_1(long jarg1, Options jarg1_);
  public final static native boolean Options_IsDisplayParallelToScreen(long jarg1, Options jarg1_);
  public final static native long new_Entity__SWIG_0(long jarg1);
  public final static native long new_Entity__SWIG_1();
  public final static native long new_Entity__SWIG_2(long jarg1, Entity jarg1_);
  public final static native void delete_Entity(long jarg1);
  public final static native void Entity_Set(long jarg1, Entity jarg1_, long jarg2, Entity jarg2_);
  public final static native int Entity_GetType(long jarg1, Entity jarg1_);
  public final static native long Entity_GetSegmentKey(long jarg1, Entity jarg1_);
  public final static native void Entity_GetFrame(long jarg1, Entity jarg1_, long jarg2, Frame jarg2_);
  public final static native void Entity_SetFrame(long jarg1, Entity jarg1_, long jarg2, Frame jarg2_);
  public final static native int Entity_GetLeaderLineCount(long jarg1, Entity jarg1_);
  public final static native void Entity_GetLeaderLines(long jarg1, Entity jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Entity_SetLeaderLines(long jarg1, Entity jarg1_, int jarg2, long[] jarg3);
  public final static native int Entity_GetLeaderSymbolCount(long jarg1, Entity jarg1_);
  public final static native void Entity_GetLeaderSymbols(long jarg1, Entity jarg1_, int[] jarg2, long[] jarg3);
  public final static native void Entity_SetLeaderSymbols(long jarg1, Entity jarg1_, int jarg2, long[] jarg3);
  public final static native void Entity_SetDisplayParallelToScreen__SWIG_0(long jarg1, Entity jarg1_, boolean jarg2);
  public final static native void Entity_SetDisplayParallelToScreen__SWIG_1(long jarg1, Entity jarg1_);
  public final static native boolean Entity_IsDisplayParallelToScreen(long jarg1, Entity jarg1_);
  public final static native void Entity_GetDrawing(long jarg1, Entity jarg1_, long jarg2, Drawing jarg2_);
  public final static native void Entity_SetDrawing(long jarg1, Entity jarg1_, long jarg2, Drawing jarg2_);
  public final static native long new_DatumEntity__SWIG_0(long jarg1);
  public final static native long new_DatumEntity__SWIG_1();
  public final static native long new_DatumEntity__SWIG_2(long jarg1, DatumEntity jarg1_);
  public final static native void delete_DatumEntity(long jarg1);
  public final static native void DatumEntity_Set(long jarg1, DatumEntity jarg1_, long jarg2, DatumEntity jarg2_);
  public final static native int DatumEntity_GetType(long jarg1, DatumEntity jarg1_);
  public final static native int DatumEntity_GetDatumType(long jarg1, DatumEntity jarg1_);
  public final static native void DatumEntity_SetDatumType(long jarg1, DatumEntity jarg1_, int jarg2);
  public final static native int DatumEntity_GetLabelCount(long jarg1, DatumEntity jarg1_);
  public final static native void DatumEntity_GetLabels(long jarg1, DatumEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void DatumEntity_SetLabels(long jarg1, DatumEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4);
  public final static native long new_DimensionEntity__SWIG_0(long jarg1);
  public final static native long new_DimensionEntity__SWIG_1();
  public final static native long new_DimensionEntity__SWIG_2(long jarg1, DimensionEntity jarg1_);
  public final static native void delete_DimensionEntity(long jarg1);
  public final static native void DimensionEntity_Set(long jarg1, DimensionEntity jarg1_, long jarg2, DimensionEntity jarg2_);
  public final static native int DimensionEntity_GetType(long jarg1, DimensionEntity jarg1_);
  public final static native int DimensionEntity_GetDimensionType(long jarg1, DimensionEntity jarg1_);
  public final static native void DimensionEntity_SetDimensionType(long jarg1, DimensionEntity jarg1_, int jarg2);
  public final static native int DimensionEntity_GetDimensionSubType(long jarg1, DimensionEntity jarg1_);
  public final static native void DimensionEntity_SetDimensionSubType(long jarg1, DimensionEntity jarg1_, int jarg2);
  public final static native int DimensionEntity_GetStringCount(long jarg1, DimensionEntity jarg1_);
  public final static native void DimensionEntity_GetStrings(long jarg1, DimensionEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void DimensionEntity_SetStrings(long jarg1, DimensionEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4);
  public final static native long new_FeatureControlFrameEntity__SWIG_0(long jarg1);
  public final static native long new_FeatureControlFrameEntity__SWIG_1();
  public final static native long new_FeatureControlFrameEntity__SWIG_2(long jarg1, FeatureControlFrameEntity jarg1_);
  public final static native void delete_FeatureControlFrameEntity(long jarg1);
  public final static native void FeatureControlFrameEntity_Set(long jarg1, FeatureControlFrameEntity jarg1_, long jarg2, FeatureControlFrameEntity jarg2_);
  public final static native int FeatureControlFrameEntity_GetType(long jarg1, FeatureControlFrameEntity jarg1_);
  public final static native void FeatureControlFrameEntity_GetToleranceType(long jarg1, FeatureControlFrameEntity jarg1_, int[] jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetToleranceType(long jarg1, FeatureControlFrameEntity jarg1_, int jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_GetDiameterModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int[] jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetDiameterModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_GetZoneToleranceMagnitude(long jarg1, FeatureControlFrameEntity jarg1_, long jarg2, PMI_String jarg2_, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetZoneToleranceMagnitude(long jarg1, FeatureControlFrameEntity jarg1_, long jarg2, PMI_String jarg2_, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_GetFirstZoneModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int[] jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetFirstZoneModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_GetSecondZoneModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int[] jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetSecondZoneModifierType(long jarg1, FeatureControlFrameEntity jarg1_, int jarg2, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_GetProjectedMagnitude(long jarg1, FeatureControlFrameEntity jarg1_, long jarg2, PMI_String jarg2_, long jarg3, TextAttributes jarg3_);
  public final static native void FeatureControlFrameEntity_SetProjectedMagnitude(long jarg1, FeatureControlFrameEntity jarg1_, long jarg2, PMI_String jarg2_, long jarg3, TextAttributes jarg3_);
  public final static native int FeatureControlFrameEntity_GetDatumReferenceCount(long jarg1, FeatureControlFrameEntity jarg1_);
  public final static native void FeatureControlFrameEntity_GetDatumReferences(long jarg1, FeatureControlFrameEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4, int[] jarg5, long[] jarg6);
  public final static native void FeatureControlFrameEntity_SetDatumReferences(long jarg1, FeatureControlFrameEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4, int[] jarg5, long[] jarg6);
  public final static native long new_GenericEntity__SWIG_0(long jarg1);
  public final static native long new_GenericEntity__SWIG_1();
  public final static native long new_GenericEntity__SWIG_2(long jarg1, GenericEntity jarg1_);
  public final static native void delete_GenericEntity(long jarg1);
  public final static native void GenericEntity_Set(long jarg1, GenericEntity jarg1_, long jarg2, GenericEntity jarg2_);
  public final static native int GenericEntity_GetType(long jarg1, GenericEntity jarg1_);
  public final static native int GenericEntity_GetStringCount(long jarg1, GenericEntity jarg1_);
  public final static native void GenericEntity_GetStrings(long jarg1, GenericEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void GenericEntity_SetStrings(long jarg1, GenericEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4);
  public final static native void GenericEntity_SetDisplayParallelToScreen__SWIG_0(long jarg1, GenericEntity jarg1_, boolean jarg2);
  public final static native void GenericEntity_SetDisplayParallelToScreen__SWIG_1(long jarg1, GenericEntity jarg1_);
  public final static native boolean GenericEntity_IsDisplayParallelToScreen(long jarg1, GenericEntity jarg1_);
  public final static native long new_NoteEntity__SWIG_0(long jarg1);
  public final static native long new_NoteEntity__SWIG_1();
  public final static native long new_NoteEntity__SWIG_2(long jarg1, NoteEntity jarg1_);
  public final static native void delete_NoteEntity(long jarg1);
  public final static native void NoteEntity_Set(long jarg1, NoteEntity jarg1_, long jarg2, NoteEntity jarg2_);
  public final static native int NoteEntity_GetType(long jarg1, NoteEntity jarg1_);
  public final static native int NoteEntity_GetStringCount(long jarg1, NoteEntity jarg1_);
  public final static native void NoteEntity_GetStrings(long jarg1, NoteEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void NoteEntity_SetStrings(long jarg1, NoteEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4);
  public final static native long new_RoughnessEntity__SWIG_0(long jarg1);
  public final static native long new_RoughnessEntity__SWIG_1();
  public final static native long new_RoughnessEntity__SWIG_2(long jarg1, RoughnessEntity jarg1_);
  public final static native void delete_RoughnessEntity(long jarg1);
  public final static native void RoughnessEntity_Set(long jarg1, RoughnessEntity jarg1_, long jarg2, RoughnessEntity jarg2_);
  public final static native int RoughnessEntity_GetType(long jarg1, RoughnessEntity jarg1_);
  public final static native int RoughnessEntity_GetObtentionType(long jarg1, RoughnessEntity jarg1_);
  public final static native void RoughnessEntity_SetObtentionType(long jarg1, RoughnessEntity jarg1_, int jarg2);
  public final static native int RoughnessEntity_GetApplicabilityType(long jarg1, RoughnessEntity jarg1_);
  public final static native void RoughnessEntity_SetApplicabilityType(long jarg1, RoughnessEntity jarg1_, int jarg2);
  public final static native int RoughnessEntity_GetModeType(long jarg1, RoughnessEntity jarg1_);
  public final static native void RoughnessEntity_SetModeType(long jarg1, RoughnessEntity jarg1_, int jarg2);
  public final static native int RoughnessEntity_GetFieldCount(long jarg1, RoughnessEntity jarg1_);
  public final static native void RoughnessEntity_GetFields(long jarg1, RoughnessEntity jarg1_, int[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void RoughnessEntity_SetFields(long jarg1, RoughnessEntity jarg1_, int jarg2, long[] jarg3, long[] jarg4);
  public final static native long new_ViewEntity__SWIG_0(long jarg1);
  public final static native long new_ViewEntity__SWIG_1();
  public final static native long new_ViewEntity__SWIG_2(long jarg1, ViewEntity jarg1_);
  public final static native void delete_ViewEntity(long jarg1);
  public final static native void ViewEntity_Set(long jarg1, ViewEntity jarg1_, long jarg2, ViewEntity jarg2_);
  public final static native void ViewEntity_GetCamera__SWIG_0(long jarg1, ViewEntity jarg1_, long jarg2, HCamera jarg2_);
  public final static native void ViewEntity_GetCamera__SWIG_1(long jarg1, ViewEntity jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float[] jarg5, float[] jarg6, StringBuffer jarg7);
  public final static native void ViewEntity_GetCamera__SWIG_2(long jarg1, ViewEntity jarg1_, float[] jarg2, float[] jarg3, float[] jarg4, float[] jarg5, float[] jarg6, StringBuffer jarg7);
  public final static native void ViewEntity_SetCamera__SWIG_0(long jarg1, ViewEntity jarg1_, long jarg2, HCamera jarg2_);
  public final static native void ViewEntity_SetCamera__SWIG_1(long jarg1, ViewEntity jarg1_, long jarg2, HPoint jarg2_, long jarg3, HPoint jarg3_, long jarg4, HPoint jarg4_, float jarg5, float jarg6, String jarg7);
  public final static native void ViewEntity_SetCamera__SWIG_2(long jarg1, ViewEntity jarg1_, float[] jarg2, float[] jarg3, float[] jarg4, float jarg5, float jarg6, String jarg7);
  public final static native void ViewEntity_GetFrame(long jarg1, ViewEntity jarg1_, long jarg2, Frame jarg2_);
  public final static native void ViewEntity_SetFrame(long jarg1, ViewEntity jarg1_, long jarg2, Frame jarg2_);
  public final static native void ViewEntity_GetName(long jarg1, ViewEntity jarg1_, long jarg2, PMI_String jarg2_);
  public final static native void ViewEntity_SetName(long jarg1, ViewEntity jarg1_, long jarg2, PMI_String jarg2_);
  public final static native int ViewEntity_GetAssociatedEntityCount(long jarg1, ViewEntity jarg1_);
  public final static native void ViewEntity_GetAssociatedEntities(long jarg1, ViewEntity jarg1_, int[] jarg2, long[] jarg3);
  public final static native void ViewEntity_SetAssociatedEntities(long jarg1, ViewEntity jarg1_, int jarg2, long[] jarg3);
  public final static native long HPointKey_SWIGUpcast(long jarg1);
  public final static native long HPlaneKey_SWIGUpcast(long jarg1);
  public final static native long HPixelRGBA_SWIGUpcast(long jarg1);
  public final static native long HUpdateListener_SWIGUpcast(long jarg1);
  public final static native long HFitWorldListener_SWIGUpcast(long jarg1);
  public final static native long HObjectManipulationListener_SWIGUpcast(long jarg1);
  public final static native long HAnimationListener_SWIGUpcast(long jarg1);
  public final static native long HSensorListener_SWIGUpcast(long jarg1);
  public final static native long HMouseListener_SWIGUpcast(long jarg1);
  public final static native long HJoyStickListener_SWIGUpcast(long jarg1);
  public final static native long HBaseView_SWIGUpcast(long jarg1);
  public final static native long HTK_Material_Composite_SWIGUpcast(long jarg1);
  public final static native long HTK_One_Material_SWIGUpcast(long jarg1);
  public final static native long HBaseOperator_SWIGUpcast(long jarg1);
  public final static native long HVerticalUtility_SWIGUpcast(long jarg1);
  public final static native long HFrExtent_SWIGUpcast(long jarg1);
  public final static native long HFrNoSimpAA_SWIGUpcast(long jarg1);
  public final static native long HFrNoSimp_SWIGUpcast(long jarg1);
  public final static native long HFrLodClamp_SWIGUpcast(long jarg1);
  public final static native long HFrLodThreshold_SWIGUpcast(long jarg1);
  public final static native long HFrSolidBBox_SWIGUpcast(long jarg1);
  public final static native long HFrWireframeBBox_SWIGUpcast(long jarg1);
  public final static native long HFrWireframe_SWIGUpcast(long jarg1);
  public final static native long HOpObjectTranslate_SWIGUpcast(long jarg1);
  public final static native long HOpConstructCircle_SWIGUpcast(long jarg1);
  public final static native long HOpConstructCone_SWIGUpcast(long jarg1);
  public final static native long HOpConstructCuboid_SWIGUpcast(long jarg1);
  public final static native long HOpConstructCylinder_SWIGUpcast(long jarg1);
  public final static native long HOpConstructNurbsCurve_SWIGUpcast(long jarg1);
  public final static native long HOpConstructPolyline_SWIGUpcast(long jarg1);
  public final static native long HOpConstructRectangle_SWIGUpcast(long jarg1);
  public final static native long HOpConstructSphere_SWIGUpcast(long jarg1);
  public final static native long HOpCreateBoolean_SWIGUpcast(long jarg1);
  public final static native long HOpCreateCircle_SWIGUpcast(long jarg1);
  public final static native long HOpCreateCone_SWIGUpcast(long jarg1);
  public final static native long HOpCreateCuboid_SWIGUpcast(long jarg1);
  public final static native long HOpCreateCuttingPlane_SWIGUpcast(long jarg1);
  public final static native long HOpCreateCylinder_SWIGUpcast(long jarg1);
  public final static native long HOpCreateNurbs3D_SWIGUpcast(long jarg1);
  public final static native long HOpCreateNurbsCurve_SWIGUpcast(long jarg1);
  public final static native long HOpCreatePolyline_SWIGUpcast(long jarg1);
  public final static native long HOpCreateRectangle_SWIGUpcast(long jarg1);
  public final static native long HOpCreateSphere_SWIGUpcast(long jarg1);
  public final static native long HOpCameraManipulate_SWIGUpcast(long jarg1);
  public final static native long HOpCameraOrbit_SWIGUpcast(long jarg1);
  public final static native long HOpCameraOrbitTurntable_SWIGUpcast(long jarg1);
  public final static native long HOpCameraPan_SWIGUpcast(long jarg1);
  public final static native long HOpCameraRelativeOrbit_SWIGUpcast(long jarg1);
  public final static native long HOpCameraWalk_SWIGUpcast(long jarg1);
  public final static native long HOpCameraZoom_SWIGUpcast(long jarg1);
  public final static native long HOpCameraZoomBox_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupAnnotate_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupCircle_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupFreehand_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupMeasure_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupPostIt_SWIGUpcast(long jarg1);
  public final static native long HOpMarkupRectangle_SWIGUpcast(long jarg1);
  public final static native long HOpMoveHandle_SWIGUpcast(long jarg1);
  public final static native long HOpNavCube_SWIGUpcast(long jarg1);
  public final static native long HOpNetwork_SWIGUpcast(long jarg1);
  public final static native long HOpObjectAnnotate_SWIGUpcast(long jarg1);
  public final static native long HOpObjectClash_SWIGUpcast(long jarg1);
  public final static native long HOpObjectRotate_SWIGUpcast(long jarg1);
  public final static native long HOpSelectArea_SWIGUpcast(long jarg1);
  public final static native long HOpSelectAperture_SWIGUpcast(long jarg1);
  public final static native long HOpSelectPolygon_SWIGUpcast(long jarg1);
  public final static native long HOpSelectPolyline_SWIGUpcast(long jarg1);
  public final static native long HSmartSelItem_SWIGUpcast(long jarg1);
  public final static native long HRegionSelItem_SWIGUpcast(long jarg1);
  public final static native long HSubentitySelItem_SWIGUpcast(long jarg1);
  public final static native long HOldSelItem_SWIGUpcast(long jarg1);
  public final static native long HEdgeVertexSelectionObject_SWIGUpcast(long jarg1);
  public final static native long HImagePanelManagerObject_SWIGUpcast(long jarg1);
  public final static native long HImagePanel_SWIGUpcast(long jarg1);
  public final static native long HInfoWindowObject_SWIGUpcast(long jarg1);
  public final static native long HLightsObject_SWIGUpcast(long jarg1);
  public final static native long HDraggerObject_SWIGUpcast(long jarg1);
  public final static native long HUtilityAnnotationMeasure_SWIGUpcast(long jarg1);
  public final static native long HQuadTreeItem_SWIGUpcast(long jarg1);
  public final static native long HQuadTreeNode_SWIGUpcast(long jarg1);
  public final static native long HQuadTree_SWIGUpcast(long jarg1);
  public final static native long HSmoothShadow_SWIGUpcast(long jarg1);
  public final static native long HHardShadow_SWIGUpcast(long jarg1);
  public final static native long HSubwindow_SWIGUpcast(long jarg1);
  public final static native long HTCObjectRotate_SWIGUpcast(long jarg1);
  public final static native long HUndoItemCamera_SWIGUpcast(long jarg1);
  public final static native long HUndoItemMatrix_SWIGUpcast(long jarg1);
  public final static native long HIOUtilityPDF_SWIGUpcast(long jarg1);
  public final static native long TK_Dispatch_XML_SWIGUpcast(long jarg1);
  public final static native long HBhvBehaviorManager_SWIGUpcast(long jarg1);
  public final static native long HKeyframeChannel_SWIGUpcast(long jarg1);
  public final static native long HKeyframeChannelLinear_SWIGUpcast(long jarg1);
  public final static native long HKeyframeChannelDiscrete_SWIGUpcast(long jarg1);
  public final static native long HKeyframeChannelCurve_SWIGUpcast(long jarg1);
  public final static native long HKeyframeChannelFollowPath_SWIGUpcast(long jarg1);
  public final static native long HKeyframeRotation_SWIGUpcast(long jarg1);
  public final static native long HKeyframeAxisRotation_SWIGUpcast(long jarg1);
  public final static native long HKeyframeQuatSlerp_SWIGUpcast(long jarg1);
  public final static native long HKeyframeQuatSquad_SWIGUpcast(long jarg1);
  public final static native long HKeyframeMatrix_SWIGUpcast(long jarg1);
  public final static native long HKeyframeString_SWIGUpcast(long jarg1);
  public final static native long HKeyframe3String_SWIGUpcast(long jarg1);
  public final static native long DatumEntity_SWIGUpcast(long jarg1);
  public final static native long DimensionEntity_SWIGUpcast(long jarg1);
  public final static native long FeatureControlFrameEntity_SWIGUpcast(long jarg1);
  public final static native long GenericEntity_SWIGUpcast(long jarg1);
  public final static native long NoteEntity_SWIGUpcast(long jarg1);
  public final static native long RoughnessEntity_SWIGUpcast(long jarg1);

  public static long SwigDirector_HEventListener_CreateListenerManager(HEventListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static long SwigDirector_HUpdateListener_CreateListenerManager(HUpdateListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HUpdateListener_CameraChangedEvent(HUpdateListener self, long param_1) {
    return self.CameraChangedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static int SwigDirector_HUpdateListener_UpdateEvent(HUpdateListener self, boolean antialias, boolean forceUpdate) {
    return self.UpdateEvent(antialias, forceUpdate);
  }
  public static int SwigDirector_HUpdateListener_ViewDestroyedEvent(HUpdateListener self, long param_1) {
    return self.ViewDestroyedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static int SwigDirector_HUpdateListener_SmoothTransitionFinishedEvent(HUpdateListener self, long param_1) {
    return self.SmoothTransitionFinishedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static long SwigDirector_HFitWorldListener_CreateListenerManager(HFitWorldListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HFitWorldListener_PreFitWorldEvent(HFitWorldListener self, long param_1) {
    return self.PreFitWorldEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static int SwigDirector_HFitWorldListener_PostFitWorldEvent(HFitWorldListener self, long param_1) {
    return self.PostFitWorldEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static long SwigDirector_HObjectManipulationListener_CreateListenerManager(HObjectManipulationListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HObjectManipulationListener_SetupHandlesEvent(HObjectManipulationListener self, long view, long key, boolean complex) {
    return self.SetupHandlesEvent((view == 0) ? null : new HBaseView(view, false), key, complex);
  }
  public static int SwigDirector_HObjectManipulationListener_ObjectBeforeMoveEvent(HObjectManipulationListener self, long view, long key, long p) {
    return self.ObjectBeforeMoveEvent((view == 0) ? null : new HBaseView(view, false), key, (p == 0) ? null : new HPoint(p, false));
  }
  public static int SwigDirector_HObjectManipulationListener_ObjectMovedEvent(HObjectManipulationListener self, long view, long key, long p) {
    return self.ObjectMovedEvent((view == 0) ? null : new HBaseView(view, false), key, (p == 0) ? null : new HPoint(p, false));
  }
  public static int SwigDirector_HObjectManipulationListener_ObjectScaledEvent(HObjectManipulationListener self, long view, long key, long p) {
    return self.ObjectScaledEvent((view == 0) ? null : new HBaseView(view, false), key, new HPoint(p, false));
  }
  public static long SwigDirector_HSensorListener_CreateListenerManager(HSensorListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HSensorListener_SensorActivatedEvent(HSensorListener self, long param_1) {
    return self.SensorActivatedEvent((param_1 == 0) ? null : new SWIGTYPE_p_HBhvSensor(param_1, false));
  }
  public static int SwigDirector_HSensorListener_SensorActionEvent(HSensorListener self, String param_1) {
    return self.SensorActionEvent(param_1);
  }
  public static long SwigDirector_HMouseListener_CreateListenerManager(HMouseListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HMouseListener_OnLButtonDown(HMouseListener self, long param_1) {
    return self.OnLButtonDown(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnMouseMove(HMouseListener self, long param_1) {
    return self.OnMouseMove(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnLButtonUp(HMouseListener self, long param_1) {
    return self.OnLButtonUp(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnLButtonDblClk(HMouseListener self, long param_1) {
    return self.OnLButtonDblClk(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnMButtonDown(HMouseListener self, long param_1) {
    return self.OnMButtonDown(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnMButtonUp(HMouseListener self, long param_1) {
    return self.OnMButtonUp(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnMButtonDblClk(HMouseListener self, long param_1) {
    return self.OnMButtonDblClk(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnRButtonDown(HMouseListener self, long param_1) {
    return self.OnRButtonDown(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnRButtonUp(HMouseListener self, long param_1) {
    return self.OnRButtonUp(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnRButtonDblClk(HMouseListener self, long param_1) {
    return self.OnRButtonDblClk(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnMouseWheel(HMouseListener self, long param_1) {
    return self.OnMouseWheel(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnKeyDown(HMouseListener self, long param_1) {
    return self.OnKeyDown(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnKeyUp(HMouseListener self, long param_1) {
    return self.OnKeyUp(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnTouchesDown(HMouseListener self, long param_1) {
    return self.OnTouchesDown(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnTouchesMove(HMouseListener self, long param_1) {
    return self.OnTouchesMove(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HMouseListener_OnTouchesUp(HMouseListener self, long param_1) {
    return self.OnTouchesUp(new HEventInfo(param_1, false));
  }
  public static long SwigDirector_HJoyStickListener_CreateListenerManager(HJoyStickListener self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HJoyStickListener_OnJoyStickRotation(HJoyStickListener self, long param_1) {
    return self.OnJoyStickRotation(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HJoyStickListener_OnJoyStickTranslation(HJoyStickListener self, long param_1) {
    return self.OnJoyStickTranslation(new HEventInfo(param_1, false));
  }
  public static int SwigDirector_HJoyStickListener_OnJoyStickButton(HJoyStickListener self, long param_1) {
    return self.OnJoyStickButton(new HEventInfo(param_1, false));
  }
  public static void SwigDirector_HBaseModel_Init(HBaseModel self) {
    self.Init();
  }
  public static void SwigDirector_HBaseModel_Flush(HBaseModel self) {
    self.Flush();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_0(HBaseModel self, long FileName, long pHView, boolean clean_include, long options) {
    return (self.Read((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), clean_include, (options == 0) ? null : new HInputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_1(HBaseModel self, long FileName, long pHView, boolean clean_include) {
    return (self.Read((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), clean_include)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_2(HBaseModel self, long FileName, long pHView) {
    return (self.Read((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_3(HBaseModel self, long FileName) {
    return (self.Read((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_4(HBaseModel self, String FileName, long pHView, boolean clean_include, long options) {
    return (self.Read(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), clean_include, (options == 0) ? null : new HInputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_5(HBaseModel self, String FileName, long pHView, boolean clean_include) {
    return (self.Read(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), clean_include)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_6(HBaseModel self, String FileName, long pHView) {
    return (self.Read(FileName, (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Read__SWIG_7(HBaseModel self, String FileName) {
    return (self.Read(FileName)).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_0(HBaseModel self, long FileName, long pHView, long options) {
    return (self.WriteWithOptions((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), (options == 0) ? null : new HOutputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_1(HBaseModel self, long FileName, long pHView) {
    return (self.WriteWithOptions((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_2(HBaseModel self, long FileName) {
    return (self.WriteWithOptions((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_3(HBaseModel self, String FileName, long pHView, long options) {
    return (self.WriteWithOptions(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), (options == 0) ? null : new HOutputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_4(HBaseModel self, String FileName, long pHView) {
    return (self.WriteWithOptions(FileName, (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithOptions__SWIG_5(HBaseModel self, String FileName) {
    return (self.WriteWithOptions(FileName)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_0(HBaseModel self, long FileName, long pHView, float width, float height) {
    return (self.Write((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), width, height)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_1(HBaseModel self, long FileName, long pHView, float width) {
    return (self.Write((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), width)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_2(HBaseModel self, long FileName, long pHView) {
    return (self.Write((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_3(HBaseModel self, long FileName) {
    return (self.Write((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_4(HBaseModel self, String FileName, long pHView, float width, float height) {
    return (self.Write(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), width, height)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_5(HBaseModel self, String FileName, long pHView, float width) {
    return (self.Write(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), width)).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_6(HBaseModel self, String FileName, long pHView) {
    return (self.Write(FileName, (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_Write__SWIG_7(HBaseModel self, String FileName) {
    return (self.Write(FileName)).swigValue();
  }
  public static long SwigDirector_HBaseModel_GetStreamFileTK(HBaseModel self) {
    return HStreamFileToolkit.getCPtr(self.GetStreamFileTK());
  }
  public static long SwigDirector_HBaseModel_GetModelKey(HBaseModel self) {
    return self.GetModelKey();
  }
  public static long SwigDirector_HBaseModel_GetModelIncludeKey(HBaseModel self) {
    return self.GetModelIncludeKey();
  }
  public static long SwigDirector_HBaseModel_GetBBoxKey(HBaseModel self) {
    return self.GetBBoxKey();
  }
  public static boolean SwigDirector_HBaseModel_IsBRepGeometry(HBaseModel self) {
    return self.IsBRepGeometry();
  }
  public static void SwigDirector_HBaseModel_SetBRepGeometry(HBaseModel self, boolean brep) {
    self.SetBRepGeometry(brep);
  }
  public static boolean SwigDirector_HBaseModel_IsFEAGeometry(HBaseModel self) {
    return self.IsFEAGeometry();
  }
  public static void SwigDirector_HBaseModel_SetFEAGeometry(HBaseModel self, boolean fea) {
    self.SetFEAGeometry(fea);
  }
  public static boolean SwigDirector_HBaseModel_IsVectorGeometry(HBaseModel self) {
    return self.IsVectorGeometry();
  }
  public static void SwigDirector_HBaseModel_SetVectorGeometry(HBaseModel self, boolean vector) {
    self.SetVectorGeometry(vector);
  }
  public static void SwigDirector_HBaseModel_CleanIncludes(HBaseModel self) {
    self.CleanIncludes();
  }
  public static void SwigDirector_HBaseModel_DeleteIncludedSegments(HBaseModel self) {
    self.DeleteIncludedSegments();
  }
  public static long SwigDirector_HBaseModel_GetBhvBehaviorManager(HBaseModel self) {
    return HBhvBehaviorManager.getCPtr(self.GetBhvBehaviorManager());
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_0(HBaseModel self, long FileName, long pHView, float width, float height) {
    return (self.WriteWithAnimation((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), width, height)).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_1(HBaseModel self, long FileName, long pHView, float width) {
    return (self.WriteWithAnimation((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false), width)).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_2(HBaseModel self, long FileName, long pHView) {
    return (self.WriteWithAnimation((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_3(HBaseModel self, long FileName) {
    return (self.WriteWithAnimation((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_4(HBaseModel self, String FileName, long pHView, float width, float height) {
    return (self.WriteWithAnimation(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), width, height)).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_5(HBaseModel self, String FileName, long pHView, float width) {
    return (self.WriteWithAnimation(FileName, (pHView == 0) ? null : new HBaseView(pHView, false), width)).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_6(HBaseModel self, String FileName, long pHView) {
    return (self.WriteWithAnimation(FileName, (pHView == 0) ? null : new HBaseView(pHView, false))).swigValue();
  }
  public static int SwigDirector_HBaseModel_WriteWithAnimation__SWIG_7(HBaseModel self, String FileName) {
    return (self.WriteWithAnimation(FileName)).swigValue();
  }
  public static void SwigDirector_HBaseModel_CreateIncludeSegment(HBaseModel self) {
    self.CreateIncludeSegment();
  }
  public static long SwigDirector_HBaseView_CreateListenerManager(HBaseView self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HBaseView_CameraChangedEvent(HBaseView self, long param_1) {
    return self.CameraChangedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static int SwigDirector_HBaseView_UpdateEvent__SWIG_0(HBaseView self, boolean antialias, boolean forceUpdate) {
    return self.UpdateEvent(antialias, forceUpdate);
  }
  public static int SwigDirector_HBaseView_ViewDestroyedEvent(HBaseView self, long param_1) {
    return self.ViewDestroyedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static int SwigDirector_HBaseView_SmoothTransitionFinishedEvent(HBaseView self, long param_1) {
    return self.SmoothTransitionFinishedEvent((param_1 == 0) ? null : new HBaseView(param_1, false));
  }
  public static void SwigDirector_HBaseView_Init(HBaseView self) {
    self.Init();
  }
  public static void SwigDirector_HBaseView_FitWorld__SWIG_0(HBaseView self, long center_out) {
    self.FitWorld((center_out == 0) ? null : new HPoint(center_out, false));
  }
  public static void SwigDirector_HBaseView_FitWorld__SWIG_1(HBaseView self) {
    self.FitWorld();
  }
  public static void SwigDirector_HBaseView_FitWorldExact__SWIG_0(HBaseView self, long center_out) {
    self.FitWorldExact((center_out == 0) ? null : new HPoint(center_out, false));
  }
  public static void SwigDirector_HBaseView_FitWorldExact__SWIG_1(HBaseView self) {
    self.FitWorldExact();
  }
  public static void SwigDirector_HBaseView_ZoomToExtents(HBaseView self) {
    self.ZoomToExtents();
  }
  public static void SwigDirector_HBaseView_ZoomToInitialCamera(HBaseView self) {
    self.ZoomToInitialCamera();
  }
  public static void SwigDirector_HBaseView_Update(HBaseView self) {
    self.Update();
  }
  public static void SwigDirector_HBaseView_ForceUpdate(HBaseView self) {
    self.ForceUpdate();
  }
  public static int SwigDirector_HBaseView_FileInput__SWIG_0(HBaseView self, long FileName, long handler, long options) {
    return (self.FileInput((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (handler == 0) ? null : new HInputHandler(handler, false), (options == 0) ? null : new HInputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileInput__SWIG_1(HBaseView self, long FileName, long handler) {
    return (self.FileInput((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (handler == 0) ? null : new HInputHandler(handler, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileInput__SWIG_2(HBaseView self, String FileName, long handler, long options) {
    return (self.FileInput(FileName, (handler == 0) ? null : new HInputHandler(handler, false), (options == 0) ? null : new HInputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileInput__SWIG_3(HBaseView self, String FileName, long handler) {
    return (self.FileInput(FileName, (handler == 0) ? null : new HInputHandler(handler, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileOutput__SWIG_0(HBaseView self, long FileName, long handler, long options) {
    return (self.FileOutput((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (handler == 0) ? null : new HOutputHandler(handler, false), (options == 0) ? null : new HOutputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileOutput__SWIG_1(HBaseView self, long FileName, long handler) {
    return (self.FileOutput((FileName == 0) ? null : new SWIGTYPE_p_wchar_t(FileName, false), (handler == 0) ? null : new HOutputHandler(handler, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileOutput__SWIG_2(HBaseView self, String FileName, long handler, long options) {
    return (self.FileOutput(FileName, (handler == 0) ? null : new HOutputHandler(handler, false), (options == 0) ? null : new HOutputHandlerOptions(options, false))).swigValue();
  }
  public static int SwigDirector_HBaseView_FileOutput__SWIG_3(HBaseView self, String FileName, long handler) {
    return (self.FileOutput(FileName, (handler == 0) ? null : new HOutputHandler(handler, false))).swigValue();
  }
  public static void SwigDirector_HBaseView_UpdateHighlighting(HBaseView self) {
    self.UpdateHighlighting();
  }
  public static long SwigDirector_HBaseView_GetModel(HBaseView self) {
    return HBaseModel.getCPtr(self.GetModel());
  }
  public static void SwigDirector_HBaseView_SetViewMode__SWIG_0(HBaseView self, int mode, boolean invert, boolean fitWorld) {
    self.SetViewMode(ViewMode.swigToEnum(mode), invert, fitWorld);
  }
  public static void SwigDirector_HBaseView_SetViewMode__SWIG_1(HBaseView self, int mode, boolean invert) {
    self.SetViewMode(ViewMode.swigToEnum(mode), invert);
  }
  public static void SwigDirector_HBaseView_SetViewMode__SWIG_2(HBaseView self, int mode) {
    self.SetViewMode(ViewMode.swigToEnum(mode));
  }
  public static void SwigDirector_HBaseView_SetHandedness__SWIG_0(HBaseView self, int mode, boolean emit_message) {
    self.SetHandedness(HandednessMode.swigToEnum(mode), emit_message);
  }
  public static void SwigDirector_HBaseView_SetHandedness__SWIG_1(HBaseView self, int mode) {
    self.SetHandedness(HandednessMode.swigToEnum(mode));
  }
  public static void SwigDirector_HBaseView_SetHandednessFromMessage(HBaseView self, String in_data, int data_length) {
    self.SetHandednessFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_SetFontSize__SWIG_0(HBaseView self, String font_size, boolean emit_message) {
    self.SetFontSize(font_size, emit_message);
  }
  public static void SwigDirector_HBaseView_SetFontSize__SWIG_1(HBaseView self, String font_size) {
    self.SetFontSize(font_size);
  }
  public static void SwigDirector_HBaseView_SetFontSizeFromMessage(HBaseView self, String in_data, int data_length) {
    self.SetFontSizeFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_SetZoomLimit__SWIG_1(HBaseView self) {
    self.SetZoomLimit();
  }
  public static void SwigDirector_HBaseView_SetAxisMode(HBaseView self, int mode) {
    self.SetAxisMode(AxisMode.swigToEnum(mode));
  }
  public static void SwigDirector_HBaseView_OnSetAxisMode(HBaseView self, int mode) {
    self.OnSetAxisMode(AxisMode.swigToEnum(mode));
  }
  public static void SwigDirector_HBaseView_AdjustAxisWindow__SWIG_0(HBaseView self, int axis_window_pixels_in, long rect_in) {
    self.AdjustAxisWindow(axis_window_pixels_in, (rect_in == 0) ? null : new HIntRectangle(rect_in, false));
  }
  public static void SwigDirector_HBaseView_AdjustAxisWindow__SWIG_1(HBaseView self, int axis_window_pixels_in) {
    self.AdjustAxisWindow(axis_window_pixels_in);
  }
  public static void SwigDirector_HBaseView_AdjustAxisWindow__SWIG_2(HBaseView self) {
    self.AdjustAxisWindow();
  }
  public static void SwigDirector_HBaseView_SetShadowMode__SWIG_0(HBaseView self, int sm, boolean saveMode) {
    self.SetShadowMode(HShadowMode.swigToEnum(sm), saveMode);
  }
  public static void SwigDirector_HBaseView_SetShadowMode__SWIG_1(HBaseView self, int sm) {
    self.SetShadowMode(HShadowMode.swigToEnum(sm));
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_0(HBaseView self, boolean state, float opacity, boolean fading, boolean attenuate, float hither, float yon, boolean blur, int blur_level) {
    self.SetReflectionPlane(state, opacity, fading, attenuate, hither, yon, blur, blur_level);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_1(HBaseView self, boolean state, float opacity, boolean fading, boolean attenuate, float hither, float yon, boolean blur) {
    self.SetReflectionPlane(state, opacity, fading, attenuate, hither, yon, blur);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_2(HBaseView self, boolean state, float opacity, boolean fading, boolean attenuate, float hither, float yon) {
    self.SetReflectionPlane(state, opacity, fading, attenuate, hither, yon);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_3(HBaseView self, boolean state, float opacity, boolean fading, boolean attenuate, float hither) {
    self.SetReflectionPlane(state, opacity, fading, attenuate, hither);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_4(HBaseView self, boolean state, float opacity, boolean fading, boolean attenuate) {
    self.SetReflectionPlane(state, opacity, fading, attenuate);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_5(HBaseView self, boolean state, float opacity, boolean fading) {
    self.SetReflectionPlane(state, opacity, fading);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_6(HBaseView self, boolean state, float opacity) {
    self.SetReflectionPlane(state, opacity);
  }
  public static void SwigDirector_HBaseView_SetReflectionPlane__SWIG_7(HBaseView self, boolean state) {
    self.SetReflectionPlane(state);
  }
  public static void SwigDirector_HBaseView_DeleteSelectionList__SWIG_0(HBaseView self, boolean emit_message) {
    self.DeleteSelectionList(emit_message);
  }
  public static void SwigDirector_HBaseView_DeleteSelectionList__SWIG_1(HBaseView self) {
    self.DeleteSelectionList();
  }
  public static void SwigDirector_HBaseView_SetWindowColor__SWIG_0(HBaseView self, long rgb, boolean emit_message) {
    self.SetWindowColor(new HPoint(rgb, false), emit_message);
  }
  public static void SwigDirector_HBaseView_SetWindowColor__SWIG_1(HBaseView self, long rgb) {
    self.SetWindowColor(new HPoint(rgb, false));
  }
  public static void SwigDirector_HBaseView_SetWindowColor__SWIG_2(HBaseView self, long rgbtop, long rgbbottom, boolean emit_message) {
    self.SetWindowColor(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), emit_message);
  }
  public static void SwigDirector_HBaseView_SetWindowColor__SWIG_3(HBaseView self, long rgbtop, long rgbbottom) {
    self.SetWindowColor(new HPoint(rgbtop, false), new HPoint(rgbbottom, false));
  }
  public static void SwigDirector_HBaseView_SetWindowColorRange__SWIG_0(HBaseView self, long rgbtop, long rgbbottom, int percentage, boolean emit_message) {
    self.SetWindowColorRange(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), percentage, emit_message);
  }
  public static void SwigDirector_HBaseView_SetWindowColorRange__SWIG_1(HBaseView self, long rgbtop, long rgbbottom, int percentage) {
    self.SetWindowColorRange(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), percentage);
  }
  public static void SwigDirector_HBaseView_SetWindowMaterial__SWIG_0(HBaseView self, String name, boolean emit_message) {
    self.SetWindowMaterial(name, emit_message);
  }
  public static void SwigDirector_HBaseView_SetWindowMaterial__SWIG_1(HBaseView self, String name) {
    self.SetWindowMaterial(name);
  }
  public static void SwigDirector_HBaseView_SetWindowColorFromMessage(HBaseView self, String in_data, int data_length) {
    self.SetWindowColorFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_CameraPositionChanged__SWIG_0(HBaseView self, boolean emit_message, boolean smooth_camera_transition) {
    self.CameraPositionChanged(emit_message, smooth_camera_transition);
  }
  public static void SwigDirector_HBaseView_CameraPositionChanged__SWIG_1(HBaseView self, boolean emit_message) {
    self.CameraPositionChanged(emit_message);
  }
  public static void SwigDirector_HBaseView_CameraPositionChanged__SWIG_2(HBaseView self) {
    self.CameraPositionChanged();
  }
  public static void SwigDirector_HBaseView_PrepareForCameraChange(HBaseView self) {
    self.PrepareForCameraChange();
  }
  public static void SwigDirector_HBaseView_SetCamera__SWIG_0(HBaseView self, long pos, long tar, long up, float fieldx, float fieldy, String proj) {
    self.SetCamera(new HPoint(pos, false), new HPoint(tar, false), new HPoint(up, false), fieldx, fieldy, proj);
  }
  public static void SwigDirector_HBaseView_SetInitialCamera(HBaseView self, long pos, long tar, long up, float fieldx, float fieldy, String proj) {
    self.SetInitialCamera(new HPoint(pos, false), new HPoint(tar, false), new HPoint(up, false), fieldx, fieldy, proj);
  }
  public static void SwigDirector_HBaseView_GetCamera__SWIG_0(HBaseView self, long pos, long tar, long up, float[] fieldx, float[] fieldy, StringBuffer proj) {
    self.GetCamera((pos == 0) ? null : new HPoint(pos, false), (tar == 0) ? null : new HPoint(tar, false), (up == 0) ? null : new HPoint(up, false), fieldx, fieldy, proj);
  }
  public static void SwigDirector_HBaseView_SetCamera__SWIG_1(HBaseView self, long camera) {
    self.SetCamera(new HCamera(camera, false));
  }
  public static void SwigDirector_HBaseView_GetCamera__SWIG_1(HBaseView self, long camera) {
    self.GetCamera((camera == 0) ? null : new HCamera(camera, false));
  }
  public static void SwigDirector_HBaseView_SetCameraFromMessage(HBaseView self, String data, int data_length) {
    self.SetCameraFromMessage(data, data_length);
  }
  public static void SwigDirector_HBaseView_InsertHSFData__SWIG_0(HBaseView self, String segment, String in_data, int data_length, boolean emit_message) {
    self.InsertHSFData(segment, in_data, data_length, emit_message);
  }
  public static void SwigDirector_HBaseView_InsertHSFData__SWIG_1(HBaseView self, String segment, String in_data, int data_length) {
    self.InsertHSFData(segment, in_data, data_length);
  }
  public static void SwigDirector_HBaseView_InsertHSFDataFromMessage(HBaseView self, String in_data, int data_length) {
    self.InsertHSFDataFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_EmitHSFData(HBaseView self, String segment, String in_data, int data_length) {
    self.EmitHSFData(segment, in_data, data_length);
  }
  public static void SwigDirector_HBaseView_SetRenderMode__SWIG_0(HBaseView self, int NewRenderMode, boolean emit_message) {
    self.SetRenderMode(HRenderMode.swigToEnum(NewRenderMode), emit_message);
  }
  public static void SwigDirector_HBaseView_SetRenderMode__SWIG_1(HBaseView self, int NewRenderMode) {
    self.SetRenderMode(HRenderMode.swigToEnum(NewRenderMode));
  }
  public static void SwigDirector_HBaseView_SetRenderModeFromMessage(HBaseView self, String in_data, int data_length) {
    self.SetRenderModeFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_EmitFlushMessage(HBaseView self) {
    self.EmitFlushMessage();
  }
  public static void SwigDirector_HBaseView_FlushFromMessage(HBaseView self, String in_data, int data_length) {
    self.FlushFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_Flush__SWIG_0(HBaseView self, boolean emit_message) {
    self.Flush(emit_message);
  }
  public static void SwigDirector_HBaseView_Flush__SWIG_1(HBaseView self) {
    self.Flush();
  }
  public static void SwigDirector_HBaseView_EmitSelectMessage(HBaseView self, long key, boolean isSelect) {
    self.EmitSelectMessage(key, isSelect);
  }
  public static void SwigDirector_HBaseView_SelectFromMessage(HBaseView self, String in_data, int data_length) {
    self.SelectFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_EmitDeSelectAllMessage(HBaseView self) {
    self.EmitDeSelectAllMessage();
  }
  public static void SwigDirector_HBaseView_EmitDeleteSelectionListMessage(HBaseView self) {
    self.EmitDeleteSelectionListMessage();
  }
  public static void SwigDirector_HBaseView_DeleteSelectionListFromMessage(HBaseView self) {
    self.DeleteSelectionListFromMessage();
  }
  public static void SwigDirector_HBaseView_DeSelectAllFromMessage(HBaseView self) {
    self.DeSelectAllFromMessage();
  }
  public static void SwigDirector_HBaseView_EmitSetModellingMatrixMessage__SWIG_0(HBaseView self, long key) {
    self.EmitSetModellingMatrixMessage(key);
  }
  public static void SwigDirector_HBaseView_EmitSetModellingMatrixMessage__SWIG_1(HBaseView self) {
    self.EmitSetModellingMatrixMessage();
  }
  public static void SwigDirector_HBaseView_EmitSegment__SWIG_0(HBaseView self, long key, boolean emit_contents_only) {
    self.EmitSegment(key, emit_contents_only);
  }
  public static void SwigDirector_HBaseView_EmitSegment__SWIG_1(HBaseView self, long key) {
    self.EmitSegment(key);
  }
  public static void SwigDirector_HBaseView_EmitDeleteByKeyMessage(HBaseView self, long key) {
    self.EmitDeleteByKeyMessage(key);
  }
  public static void SwigDirector_HBaseView_DeleteByKeyFromMessage(HBaseView self, String in_data, int data_length) {
    self.DeleteByKeyFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_SetModellingMatrixFromMessage(HBaseView self, String in_data, int data_length) {
    self.SetModellingMatrixFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HBaseView_StartSharedKey(HBaseView self) {
    self.StartSharedKey();
  }
  public static void SwigDirector_HBaseView_Animate__SWIG_0(HBaseView self, int animation_steps, int animate_flags, int MaxRotation) {
    self.Animate(animation_steps, HBaseView.HAnimateMode.swigToEnum(animate_flags), MaxRotation);
  }
  public static void SwigDirector_HBaseView_Animate__SWIG_1(HBaseView self, int animation_steps, int animate_flags) {
    self.Animate(animation_steps, HBaseView.HAnimateMode.swigToEnum(animate_flags));
  }
  public static void SwigDirector_HBaseView_Animate__SWIG_2(HBaseView self, int animation_steps) {
    self.Animate(animation_steps);
  }
  public static void SwigDirector_HBaseView_Animate__SWIG_3(HBaseView self) {
    self.Animate();
  }
  public static void SwigDirector_HBaseView_SetGeometryChanged(HBaseView self) {
    self.SetGeometryChanged();
  }
  public static void SwigDirector_HBaseView_ClearGeometryChanged(HBaseView self) {
    self.ClearGeometryChanged();
  }
  public static boolean SwigDirector_HBaseView_GeometryChanged(HBaseView self) {
    return self.GeometryChanged();
  }
  public static int SwigDirector_HBaseView_OnNoButtonDownAndMove(HBaseView self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnLButtonDownAndMove(HBaseView self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnLButtonDblClk(HBaseView self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnRButtonDownAndMove(HBaseView self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnMButtonDownAndMove(HBaseView self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnLRButtonDownAndMove(HBaseView self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnLButtonDown(HBaseView self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnMouseMove(HBaseView self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnLButtonUp(HBaseView self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnMouseWheel(HBaseView self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static boolean SwigDirector_HBaseView_ComputeReasonableTarget(HBaseView self, long new_tar, long mouse_win, long tar_orig) {
    return self.ComputeReasonableTarget(new HPoint(new_tar, false), new HPoint(mouse_win, false), new HPoint(tar_orig, false));
  }
  public static int SwigDirector_HBaseView_OnKeyDown(HBaseView self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseView_OnKeyUp(HBaseView self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HBaseView_SetShadowColor(HBaseView self, long color) {
    self.SetShadowColor(new HPoint(color, false));
  }
  public static void SwigDirector_HBaseView_SetShadowLightDirection__SWIG_0(HBaseView self, boolean explicit_light, long direction) {
    self.SetShadowLightDirection(explicit_light, (direction == 0) ? null : new HPoint(direction, false));
  }
  public static void SwigDirector_HBaseView_SetShadowLightDirection__SWIG_1(HBaseView self, boolean explicit_light) {
    self.SetShadowLightDirection(explicit_light);
  }
  public static boolean SwigDirector_HBaseView_GetShadowLightDirection__SWIG_0(HBaseView self, long direction) {
    return self.GetShadowLightDirection((direction == 0) ? null : new HPoint(direction, false));
  }
  public static boolean SwigDirector_HBaseView_GetShadowLightDirection__SWIG_1(HBaseView self) {
    return self.GetShadowLightDirection();
  }
  public static void SwigDirector_HBaseView_SetShadowIgnoresTransparency(HBaseView self, boolean ignore) {
    self.SetShadowIgnoresTransparency(ignore);
  }
  public static boolean SwigDirector_HBaseView_GetShadowIgnoresTransparency(HBaseView self) {
    return self.GetShadowIgnoresTransparency();
  }
  public static void SwigDirector_HBaseView_DoDynamicHighlighting(HBaseView self, long mouse_pos) {
    self.DoDynamicHighlighting(new HPoint(mouse_pos, false));
  }
  public static void SwigDirector_HBaseView_SetShadowResolution(HBaseView self, int res) {
    self.SetShadowResolution(res);
  }
  public static void SwigDirector_HBaseView_SetShadowBlurring(HBaseView self, int blur) {
    self.SetShadowBlurring(blur);
  }
  public static void SwigDirector_HBaseView_InternalUpdate(HBaseView self) {
    self.InternalUpdate();
  }
  public static void SwigDirector_HBaseView_SetShadowRegenerationMode(HBaseView self, boolean onoff) {
    self.SetShadowRegenerationMode(onoff);
  }
  public static void SwigDirector_HBaseView_SetShadowRegenerationToggle(HBaseView self) {
    self.SetShadowRegenerationToggle();
  }
  public static void SwigDirector_HBaseView_SetCuttingPlaneRegenerationMode(HBaseView self, boolean onoff) {
    self.SetCuttingPlaneRegenerationMode(onoff);
  }
  public static void SwigDirector_HBaseView_SetCameraChanged__SWIG_0(HBaseView self, boolean val) {
    self.SetCameraChanged(val);
  }
  public static void SwigDirector_HBaseView_SetCameraChanged__SWIG_1(HBaseView self) {
    self.SetCameraChanged();
  }
  public static boolean SwigDirector_HBaseView_GetCameraChanged(HBaseView self) {
    return self.GetCameraChanged();
  }
  public static void SwigDirector_HBaseView_SetInvertMouseWheelZoom__SWIG_0(HBaseView self, boolean val) {
    self.SetInvertMouseWheelZoom(val);
  }
  public static void SwigDirector_HBaseView_SetInvertMouseWheelZoom__SWIG_1(HBaseView self) {
    self.SetInvertMouseWheelZoom();
  }
  public static boolean SwigDirector_HBaseView_GetInvertMouseWheelZoom(HBaseView self) {
    return self.GetInvertMouseWheelZoom();
  }
  public static void SwigDirector_HBaseView_SetAxisManipulateOperator(HBaseView self, long op) {
    self.SetAxisManipulateOperator((op == 0) ? null : new HOpCameraManipulate(op, false));
  }
  public static void SwigDirector_HBaseView_SetVisibilitySelectionMode(HBaseView self, boolean onoff) {
    self.SetVisibilitySelectionMode(onoff);
  }
  public static boolean SwigDirector_HBaseView_GetVisibilitySelectionMode(HBaseView self) {
    return self.GetVisibilitySelectionMode();
  }
  public static void SwigDirector_HBaseView_SetRelatedSelectionLimit(HBaseView self, int limit) {
    self.SetRelatedSelectionLimit(limit);
  }
  public static int SwigDirector_HBaseView_GetRelatedSelectionLimit(HBaseView self) {
    return self.GetRelatedSelectionLimit();
  }
  public static void SwigDirector_HBaseView_SetDetailSelection(HBaseView self, boolean onoff) {
    self.SetDetailSelection(onoff);
  }
  public static boolean SwigDirector_HBaseView_GetDetailSelectionMode(HBaseView self) {
    return self.GetDetailSelectionMode();
  }
  public static void SwigDirector_HBaseView_SetRespectSelectionCulling(HBaseView self, boolean onoff) {
    self.SetRespectSelectionCulling(onoff);
  }
  public static boolean SwigDirector_HBaseView_GetRespectSelectionCulling(HBaseView self) {
    return self.GetRespectSelectionCulling();
  }
  public static void SwigDirector_HBaseView_SmartFilterCircumcuboid(HBaseView self, String segment, String defaults, long bottomfrontleft, long topbackright) {
    self.SmartFilterCircumcuboid(segment, defaults, (bottomfrontleft == 0) ? null : new HPoint(bottomfrontleft, false), (topbackright == 0) ? null : new HPoint(topbackright, false));
  }
  public static int SwigDirector_HBaseView_SetupHandlesEvent(HBaseView self, long view, long key, boolean complex) {
    return self.SetupHandlesEvent((view == 0) ? null : new HBaseView(view, false), key, complex);
  }
  public static boolean SwigDirector_HBaseView_GetHasObjects(HBaseView self) {
    return self.GetHasObjects();
  }
  public static void SwigDirector_HBaseView_SetHasObjects(HBaseView self, boolean hasobjects) {
    self.SetHasObjects(hasobjects);
  }
  public static void SwigDirector_HBaseView_SetHandleOperator(HBaseView self, long op) {
    self.SetHandleOperator((op == 0) ? null : new HBaseOperator(op, false));
  }
  public static long SwigDirector_HBaseView_GetHandleOperator(HBaseView self) {
    return HBaseOperator.getCPtr(self.GetHandleOperator());
  }
  public static float SwigDirector_HBaseView_GetDefaultSelectionProximity(HBaseView self) {
    return self.GetDefaultSelectionProximity();
  }
  public static void SwigDirector_HBaseView_SetDefaultSelectionProximity(HBaseView self, float selectionproximity) {
    self.SetDefaultSelectionProximity(selectionproximity);
  }
  public static int SwigDirector_HBaseView_ObjectMovedEvent(HBaseView self, long view, long key, long pos) {
    return self.ObjectMovedEvent((view == 0) ? null : new HBaseView(view, false), key, (pos == 0) ? null : new HPoint(pos, false));
  }
  public static int SwigDirector_HBaseView_GetHighlightMode(HBaseView self) {
    return (self.GetHighlightMode()).swigValue();
  }
  public static void SwigDirector_HBaseView_SetHighlightMode(HBaseView self, int m) {
    self.SetHighlightMode(HSelectionHighlightMode.swigToEnum(m));
  }
  public static void SwigDirector_HBaseView_SetReferenceSelection(HBaseView self, boolean use_ref) {
    self.SetReferenceSelection(use_ref);
  }
  public static void SwigDirector_HBaseView_UpdateInternal__SWIG_0(HBaseView self, boolean antialias, boolean force_update) {
    self.UpdateInternal(antialias, force_update);
  }
  public static void SwigDirector_HBaseView_UpdateInternal__SWIG_1(HBaseView self, boolean antialias) {
    self.UpdateInternal(antialias);
  }
  public static void SwigDirector_HBaseView_UpdateInternal__SWIG_2(HBaseView self) {
    self.UpdateInternal();
  }
  public static void SwigDirector_HBaseView_SetupLights(HBaseView self) {
    self.SetupLights();
  }
  public static void SwigDirector_HDB_Init(HDB self) {
    self.Init();
  }
  public static long SwigDirector_HBaseOperator_CreateListenerManager(HBaseOperator self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HBaseOperator_OnLButtonDown(HBaseOperator self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMouseMove(HBaseOperator self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnLButtonUp(HBaseOperator self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnLButtonDblClk(HBaseOperator self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMButtonDown(HBaseOperator self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMButtonUp(HBaseOperator self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMButtonDblClk(HBaseOperator self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnRButtonDown(HBaseOperator self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnRButtonUp(HBaseOperator self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnRButtonDblClk(HBaseOperator self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMouseWheel(HBaseOperator self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnKeyDown(HBaseOperator self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnKeyUp(HBaseOperator self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnTouchesDown(HBaseOperator self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnTouchesMove(HBaseOperator self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnTouchesUp(HBaseOperator self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HBaseOperator_Clone(HBaseOperator self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HBaseOperator_OperatorStarted(HBaseOperator self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HBaseOperator_GetName(HBaseOperator self) {
    return self.GetName();
  }
  public static int SwigDirector_HBaseOperator_OnLButtonDownAndMove(HBaseOperator self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnMButtonDownAndMove(HBaseOperator self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnRButtonDownAndMove(HBaseOperator self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnLRButtonDownAndMove(HBaseOperator self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnNoButtonDownAndMove(HBaseOperator self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HBaseOperator_OnTimer(HBaseOperator self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HIONoticeCallback_Notice__SWIG_0(HIONoticeCallback self, String notice) {
    self.Notice(notice);
  }
  public static void SwigDirector_HIONoticeCallback_Notice__SWIG_1(HIONoticeCallback self, long notice) {
    self.Notice((notice == 0) ? null : new SWIGTYPE_p_wchar_t(notice, false));
  }
  public static void SwigDirector_HIOPercentNoticeCallback_Notice(HIOPercentNoticeCallback self, float notice) {
    self.Notice(notice);
  }
  public static long SwigDirector_HOpObjectTranslate_CreateListenerManager(HOpObjectTranslate self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpObjectTranslate_OnLButtonDown(HOpObjectTranslate self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMouseMove(HOpObjectTranslate self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnLButtonUp(HOpObjectTranslate self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnLButtonDblClk(HOpObjectTranslate self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMButtonDown(HOpObjectTranslate self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMButtonUp(HOpObjectTranslate self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMButtonDblClk(HOpObjectTranslate self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnRButtonDown(HOpObjectTranslate self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnRButtonUp(HOpObjectTranslate self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnRButtonDblClk(HOpObjectTranslate self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMouseWheel(HOpObjectTranslate self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnKeyDown(HOpObjectTranslate self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnKeyUp(HOpObjectTranslate self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnTouchesDown(HOpObjectTranslate self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnTouchesMove(HOpObjectTranslate self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnTouchesUp(HOpObjectTranslate self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectTranslate_Clone(HOpObjectTranslate self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpObjectTranslate_OperatorStarted(HOpObjectTranslate self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpObjectTranslate_GetName(HOpObjectTranslate self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpObjectTranslate_OnLButtonDownAndMove(HOpObjectTranslate self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnMButtonDownAndMove(HOpObjectTranslate self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnRButtonDownAndMove(HOpObjectTranslate self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnLRButtonDownAndMove(HOpObjectTranslate self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnNoButtonDownAndMove(HOpObjectTranslate self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectTranslate_OnTimer(HOpObjectTranslate self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCircle_CreateListenerManager(HOpConstructCircle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructCircle_OnLButtonDown(HOpConstructCircle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMouseMove(HOpConstructCircle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnLButtonUp(HOpConstructCircle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnLButtonDblClk(HOpConstructCircle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMButtonDown(HOpConstructCircle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMButtonUp(HOpConstructCircle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMButtonDblClk(HOpConstructCircle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnRButtonDown(HOpConstructCircle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnRButtonUp(HOpConstructCircle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnRButtonDblClk(HOpConstructCircle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMouseWheel(HOpConstructCircle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnKeyDown(HOpConstructCircle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnKeyUp(HOpConstructCircle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnTouchesDown(HOpConstructCircle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnTouchesMove(HOpConstructCircle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnTouchesUp(HOpConstructCircle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCircle_Clone(HOpConstructCircle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructCircle_OperatorStarted(HOpConstructCircle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructCircle_GetName(HOpConstructCircle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructCircle_OnLButtonDownAndMove(HOpConstructCircle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnMButtonDownAndMove(HOpConstructCircle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnRButtonDownAndMove(HOpConstructCircle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnLRButtonDownAndMove(HOpConstructCircle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnNoButtonDownAndMove(HOpConstructCircle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCircle_OnTimer(HOpConstructCircle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCone_CreateListenerManager(HOpConstructCone self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructCone_OnLButtonDown(HOpConstructCone self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMouseMove(HOpConstructCone self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnLButtonUp(HOpConstructCone self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnLButtonDblClk(HOpConstructCone self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMButtonDown(HOpConstructCone self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMButtonUp(HOpConstructCone self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMButtonDblClk(HOpConstructCone self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnRButtonDown(HOpConstructCone self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnRButtonUp(HOpConstructCone self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnRButtonDblClk(HOpConstructCone self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMouseWheel(HOpConstructCone self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnKeyDown(HOpConstructCone self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnKeyUp(HOpConstructCone self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnTouchesDown(HOpConstructCone self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnTouchesMove(HOpConstructCone self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnTouchesUp(HOpConstructCone self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCone_Clone(HOpConstructCone self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructCone_OperatorStarted(HOpConstructCone self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructCone_GetName(HOpConstructCone self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructCone_OnLButtonDownAndMove(HOpConstructCone self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnMButtonDownAndMove(HOpConstructCone self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnRButtonDownAndMove(HOpConstructCone self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnLRButtonDownAndMove(HOpConstructCone self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnNoButtonDownAndMove(HOpConstructCone self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCone_OnTimer(HOpConstructCone self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCuboid_CreateListenerManager(HOpConstructCuboid self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructCuboid_OnLButtonDown(HOpConstructCuboid self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMouseMove(HOpConstructCuboid self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnLButtonUp(HOpConstructCuboid self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnLButtonDblClk(HOpConstructCuboid self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMButtonDown(HOpConstructCuboid self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMButtonUp(HOpConstructCuboid self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMButtonDblClk(HOpConstructCuboid self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnRButtonDown(HOpConstructCuboid self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnRButtonUp(HOpConstructCuboid self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnRButtonDblClk(HOpConstructCuboid self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMouseWheel(HOpConstructCuboid self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnKeyDown(HOpConstructCuboid self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnKeyUp(HOpConstructCuboid self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnTouchesDown(HOpConstructCuboid self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnTouchesMove(HOpConstructCuboid self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnTouchesUp(HOpConstructCuboid self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCuboid_Clone(HOpConstructCuboid self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructCuboid_OperatorStarted(HOpConstructCuboid self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructCuboid_GetName(HOpConstructCuboid self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructCuboid_OnLButtonDownAndMove(HOpConstructCuboid self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnMButtonDownAndMove(HOpConstructCuboid self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnRButtonDownAndMove(HOpConstructCuboid self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnLRButtonDownAndMove(HOpConstructCuboid self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnNoButtonDownAndMove(HOpConstructCuboid self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCuboid_OnTimer(HOpConstructCuboid self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HOpConstructCuboid_CreateCuboid(HOpConstructCuboid self, long last) {
    self.CreateCuboid(new HPoint(last, false));
  }
  public static void SwigDirector_HOpConstructCuboid_CreateSquare(HOpConstructCuboid self, long first, long last) {
    self.CreateSquare(new HPoint(first, false), new HPoint(last, false));
  }
  public static long SwigDirector_HOpConstructCylinder_CreateListenerManager(HOpConstructCylinder self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructCylinder_OnLButtonDown(HOpConstructCylinder self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMouseMove(HOpConstructCylinder self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnLButtonUp(HOpConstructCylinder self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnLButtonDblClk(HOpConstructCylinder self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMButtonDown(HOpConstructCylinder self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMButtonUp(HOpConstructCylinder self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMButtonDblClk(HOpConstructCylinder self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnRButtonDown(HOpConstructCylinder self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnRButtonUp(HOpConstructCylinder self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnRButtonDblClk(HOpConstructCylinder self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMouseWheel(HOpConstructCylinder self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnKeyDown(HOpConstructCylinder self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnKeyUp(HOpConstructCylinder self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnTouchesDown(HOpConstructCylinder self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnTouchesMove(HOpConstructCylinder self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnTouchesUp(HOpConstructCylinder self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructCylinder_Clone(HOpConstructCylinder self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructCylinder_OperatorStarted(HOpConstructCylinder self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructCylinder_GetName(HOpConstructCylinder self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructCylinder_OnLButtonDownAndMove(HOpConstructCylinder self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnMButtonDownAndMove(HOpConstructCylinder self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnRButtonDownAndMove(HOpConstructCylinder self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnLRButtonDownAndMove(HOpConstructCylinder self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnNoButtonDownAndMove(HOpConstructCylinder self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructCylinder_OnTimer(HOpConstructCylinder self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructNurbsCurve_CreateListenerManager(HOpConstructNurbsCurve self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnLButtonDown(HOpConstructNurbsCurve self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMouseMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnLButtonUp(HOpConstructNurbsCurve self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnLButtonDblClk(HOpConstructNurbsCurve self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMButtonDown(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMButtonUp(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMButtonDblClk(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnRButtonDown(HOpConstructNurbsCurve self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnRButtonUp(HOpConstructNurbsCurve self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnRButtonDblClk(HOpConstructNurbsCurve self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMouseWheel(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnKeyDown(HOpConstructNurbsCurve self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnKeyUp(HOpConstructNurbsCurve self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnTouchesDown(HOpConstructNurbsCurve self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnTouchesMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnTouchesUp(HOpConstructNurbsCurve self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructNurbsCurve_Clone(HOpConstructNurbsCurve self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructNurbsCurve_OperatorStarted(HOpConstructNurbsCurve self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructNurbsCurve_GetName(HOpConstructNurbsCurve self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnLButtonDownAndMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnMButtonDownAndMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnRButtonDownAndMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnLRButtonDownAndMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnNoButtonDownAndMove(HOpConstructNurbsCurve self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructNurbsCurve_OnTimer(HOpConstructNurbsCurve self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructPolyline_CreateListenerManager(HOpConstructPolyline self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructPolyline_OnLButtonDown(HOpConstructPolyline self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMouseMove(HOpConstructPolyline self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnLButtonUp(HOpConstructPolyline self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnLButtonDblClk(HOpConstructPolyline self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMButtonDown(HOpConstructPolyline self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMButtonUp(HOpConstructPolyline self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMButtonDblClk(HOpConstructPolyline self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnRButtonDown(HOpConstructPolyline self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnRButtonUp(HOpConstructPolyline self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnRButtonDblClk(HOpConstructPolyline self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMouseWheel(HOpConstructPolyline self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnKeyDown(HOpConstructPolyline self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnKeyUp(HOpConstructPolyline self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnTouchesDown(HOpConstructPolyline self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnTouchesMove(HOpConstructPolyline self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnTouchesUp(HOpConstructPolyline self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructPolyline_Clone(HOpConstructPolyline self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructPolyline_OperatorStarted(HOpConstructPolyline self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructPolyline_GetName(HOpConstructPolyline self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructPolyline_OnLButtonDownAndMove(HOpConstructPolyline self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnMButtonDownAndMove(HOpConstructPolyline self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnRButtonDownAndMove(HOpConstructPolyline self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnLRButtonDownAndMove(HOpConstructPolyline self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnNoButtonDownAndMove(HOpConstructPolyline self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructPolyline_OnTimer(HOpConstructPolyline self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructRectangle_CreateListenerManager(HOpConstructRectangle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructRectangle_OnLButtonDown(HOpConstructRectangle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMouseMove(HOpConstructRectangle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnLButtonUp(HOpConstructRectangle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnLButtonDblClk(HOpConstructRectangle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMButtonDown(HOpConstructRectangle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMButtonUp(HOpConstructRectangle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMButtonDblClk(HOpConstructRectangle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnRButtonDown(HOpConstructRectangle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnRButtonUp(HOpConstructRectangle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnRButtonDblClk(HOpConstructRectangle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMouseWheel(HOpConstructRectangle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnKeyDown(HOpConstructRectangle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnKeyUp(HOpConstructRectangle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnTouchesDown(HOpConstructRectangle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnTouchesMove(HOpConstructRectangle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnTouchesUp(HOpConstructRectangle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructRectangle_Clone(HOpConstructRectangle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructRectangle_OperatorStarted(HOpConstructRectangle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructRectangle_GetName(HOpConstructRectangle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructRectangle_OnLButtonDownAndMove(HOpConstructRectangle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnMButtonDownAndMove(HOpConstructRectangle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnRButtonDownAndMove(HOpConstructRectangle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnLRButtonDownAndMove(HOpConstructRectangle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnNoButtonDownAndMove(HOpConstructRectangle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructRectangle_OnTimer(HOpConstructRectangle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructSphere_CreateListenerManager(HOpConstructSphere self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpConstructSphere_OnLButtonDown(HOpConstructSphere self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMouseMove(HOpConstructSphere self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnLButtonUp(HOpConstructSphere self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnLButtonDblClk(HOpConstructSphere self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMButtonDown(HOpConstructSphere self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMButtonUp(HOpConstructSphere self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMButtonDblClk(HOpConstructSphere self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnRButtonDown(HOpConstructSphere self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnRButtonUp(HOpConstructSphere self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnRButtonDblClk(HOpConstructSphere self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMouseWheel(HOpConstructSphere self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnKeyDown(HOpConstructSphere self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnKeyUp(HOpConstructSphere self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnTouchesDown(HOpConstructSphere self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnTouchesMove(HOpConstructSphere self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnTouchesUp(HOpConstructSphere self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpConstructSphere_Clone(HOpConstructSphere self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpConstructSphere_OperatorStarted(HOpConstructSphere self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpConstructSphere_GetName(HOpConstructSphere self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpConstructSphere_OnLButtonDownAndMove(HOpConstructSphere self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnMButtonDownAndMove(HOpConstructSphere self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnRButtonDownAndMove(HOpConstructSphere self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnLRButtonDownAndMove(HOpConstructSphere self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnNoButtonDownAndMove(HOpConstructSphere self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpConstructSphere_OnTimer(HOpConstructSphere self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateBoolean_CreateListenerManager(HOpCreateBoolean self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateBoolean_OnLButtonDown(HOpCreateBoolean self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMouseMove(HOpCreateBoolean self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnLButtonUp(HOpCreateBoolean self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnLButtonDblClk(HOpCreateBoolean self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMButtonDown(HOpCreateBoolean self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMButtonUp(HOpCreateBoolean self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMButtonDblClk(HOpCreateBoolean self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnRButtonDown(HOpCreateBoolean self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnRButtonUp(HOpCreateBoolean self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnRButtonDblClk(HOpCreateBoolean self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMouseWheel(HOpCreateBoolean self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnKeyDown(HOpCreateBoolean self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnKeyUp(HOpCreateBoolean self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnTouchesDown(HOpCreateBoolean self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnTouchesMove(HOpCreateBoolean self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnTouchesUp(HOpCreateBoolean self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateBoolean_Clone(HOpCreateBoolean self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateBoolean_OperatorStarted(HOpCreateBoolean self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateBoolean_GetName(HOpCreateBoolean self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateBoolean_OnLButtonDownAndMove(HOpCreateBoolean self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnMButtonDownAndMove(HOpCreateBoolean self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnRButtonDownAndMove(HOpCreateBoolean self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnLRButtonDownAndMove(HOpCreateBoolean self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnNoButtonDownAndMove(HOpCreateBoolean self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateBoolean_OnTimer(HOpCreateBoolean self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCircle_CreateListenerManager(HOpCreateCircle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateCircle_OnLButtonDown(HOpCreateCircle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMouseMove(HOpCreateCircle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnLButtonUp(HOpCreateCircle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnLButtonDblClk(HOpCreateCircle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMButtonDown(HOpCreateCircle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMButtonUp(HOpCreateCircle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMButtonDblClk(HOpCreateCircle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnRButtonDown(HOpCreateCircle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnRButtonUp(HOpCreateCircle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnRButtonDblClk(HOpCreateCircle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMouseWheel(HOpCreateCircle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnKeyDown(HOpCreateCircle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnKeyUp(HOpCreateCircle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnTouchesDown(HOpCreateCircle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnTouchesMove(HOpCreateCircle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnTouchesUp(HOpCreateCircle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCircle_Clone(HOpCreateCircle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateCircle_OperatorStarted(HOpCreateCircle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateCircle_GetName(HOpCreateCircle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateCircle_OnLButtonDownAndMove(HOpCreateCircle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnMButtonDownAndMove(HOpCreateCircle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnRButtonDownAndMove(HOpCreateCircle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnLRButtonDownAndMove(HOpCreateCircle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnNoButtonDownAndMove(HOpCreateCircle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCircle_OnTimer(HOpCreateCircle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCone_CreateListenerManager(HOpCreateCone self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateCone_OnLButtonDown(HOpCreateCone self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMouseMove(HOpCreateCone self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnLButtonUp(HOpCreateCone self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnLButtonDblClk(HOpCreateCone self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMButtonDown(HOpCreateCone self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMButtonUp(HOpCreateCone self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMButtonDblClk(HOpCreateCone self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnRButtonDown(HOpCreateCone self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnRButtonUp(HOpCreateCone self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnRButtonDblClk(HOpCreateCone self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMouseWheel(HOpCreateCone self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnKeyDown(HOpCreateCone self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnKeyUp(HOpCreateCone self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnTouchesDown(HOpCreateCone self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnTouchesMove(HOpCreateCone self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnTouchesUp(HOpCreateCone self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCone_Clone(HOpCreateCone self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateCone_OperatorStarted(HOpCreateCone self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateCone_GetName(HOpCreateCone self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateCone_OnLButtonDownAndMove(HOpCreateCone self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnMButtonDownAndMove(HOpCreateCone self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnRButtonDownAndMove(HOpCreateCone self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnLRButtonDownAndMove(HOpCreateCone self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnNoButtonDownAndMove(HOpCreateCone self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCone_OnTimer(HOpCreateCone self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCuboid_CreateListenerManager(HOpCreateCuboid self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateCuboid_OnLButtonDown(HOpCreateCuboid self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMouseMove(HOpCreateCuboid self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnLButtonUp(HOpCreateCuboid self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnLButtonDblClk(HOpCreateCuboid self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMButtonDown(HOpCreateCuboid self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMButtonUp(HOpCreateCuboid self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMButtonDblClk(HOpCreateCuboid self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnRButtonDown(HOpCreateCuboid self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnRButtonUp(HOpCreateCuboid self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnRButtonDblClk(HOpCreateCuboid self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMouseWheel(HOpCreateCuboid self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnKeyDown(HOpCreateCuboid self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnKeyUp(HOpCreateCuboid self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnTouchesDown(HOpCreateCuboid self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnTouchesMove(HOpCreateCuboid self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnTouchesUp(HOpCreateCuboid self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCuboid_Clone(HOpCreateCuboid self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateCuboid_OperatorStarted(HOpCreateCuboid self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateCuboid_GetName(HOpCreateCuboid self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateCuboid_OnLButtonDownAndMove(HOpCreateCuboid self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnMButtonDownAndMove(HOpCreateCuboid self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnRButtonDownAndMove(HOpCreateCuboid self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnLRButtonDownAndMove(HOpCreateCuboid self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnNoButtonDownAndMove(HOpCreateCuboid self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuboid_OnTimer(HOpCreateCuboid self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HOpCreateCuboid_CreateCuboid(HOpCreateCuboid self, long last) {
    self.CreateCuboid(new HPoint(last, false));
  }
  public static void SwigDirector_HOpCreateCuboid_CreateSquare(HOpCreateCuboid self, long first, long last) {
    self.CreateSquare(new HPoint(first, false), new HPoint(last, false));
  }
  public static long SwigDirector_HOpCreateCuttingPlane_CreateListenerManager(HOpCreateCuttingPlane self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnLButtonDown(HOpCreateCuttingPlane self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMouseMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnLButtonUp(HOpCreateCuttingPlane self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnLButtonDblClk(HOpCreateCuttingPlane self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMButtonDown(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMButtonUp(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMButtonDblClk(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnRButtonDown(HOpCreateCuttingPlane self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnRButtonUp(HOpCreateCuttingPlane self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnRButtonDblClk(HOpCreateCuttingPlane self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMouseWheel(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnKeyDown(HOpCreateCuttingPlane self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnKeyUp(HOpCreateCuttingPlane self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnTouchesDown(HOpCreateCuttingPlane self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnTouchesMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnTouchesUp(HOpCreateCuttingPlane self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCuttingPlane_Clone(HOpCreateCuttingPlane self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateCuttingPlane_OperatorStarted(HOpCreateCuttingPlane self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateCuttingPlane_GetName(HOpCreateCuttingPlane self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnLButtonDownAndMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnMButtonDownAndMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnRButtonDownAndMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnLRButtonDownAndMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnNoButtonDownAndMove(HOpCreateCuttingPlane self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCuttingPlane_OnTimer(HOpCreateCuttingPlane self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCylinder_CreateListenerManager(HOpCreateCylinder self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateCylinder_OnLButtonDown(HOpCreateCylinder self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMouseMove(HOpCreateCylinder self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnLButtonUp(HOpCreateCylinder self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnLButtonDblClk(HOpCreateCylinder self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMButtonDown(HOpCreateCylinder self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMButtonUp(HOpCreateCylinder self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMButtonDblClk(HOpCreateCylinder self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnRButtonDown(HOpCreateCylinder self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnRButtonUp(HOpCreateCylinder self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnRButtonDblClk(HOpCreateCylinder self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMouseWheel(HOpCreateCylinder self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnKeyDown(HOpCreateCylinder self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnKeyUp(HOpCreateCylinder self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnTouchesDown(HOpCreateCylinder self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnTouchesMove(HOpCreateCylinder self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnTouchesUp(HOpCreateCylinder self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateCylinder_Clone(HOpCreateCylinder self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateCylinder_OperatorStarted(HOpCreateCylinder self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateCylinder_GetName(HOpCreateCylinder self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateCylinder_OnLButtonDownAndMove(HOpCreateCylinder self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnMButtonDownAndMove(HOpCreateCylinder self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnRButtonDownAndMove(HOpCreateCylinder self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnLRButtonDownAndMove(HOpCreateCylinder self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnNoButtonDownAndMove(HOpCreateCylinder self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateCylinder_OnTimer(HOpCreateCylinder self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateNurbs3D_CreateListenerManager(HOpCreateNurbs3D self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnLButtonDown(HOpCreateNurbs3D self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMouseMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnLButtonUp(HOpCreateNurbs3D self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnLButtonDblClk(HOpCreateNurbs3D self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMButtonDown(HOpCreateNurbs3D self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMButtonUp(HOpCreateNurbs3D self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMButtonDblClk(HOpCreateNurbs3D self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnRButtonDown(HOpCreateNurbs3D self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnRButtonUp(HOpCreateNurbs3D self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnRButtonDblClk(HOpCreateNurbs3D self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMouseWheel(HOpCreateNurbs3D self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnKeyDown(HOpCreateNurbs3D self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnKeyUp(HOpCreateNurbs3D self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnTouchesDown(HOpCreateNurbs3D self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnTouchesMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnTouchesUp(HOpCreateNurbs3D self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateNurbs3D_Clone(HOpCreateNurbs3D self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateNurbs3D_OperatorStarted(HOpCreateNurbs3D self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateNurbs3D_GetName(HOpCreateNurbs3D self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnLButtonDownAndMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnMButtonDownAndMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnRButtonDownAndMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnLRButtonDownAndMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnNoButtonDownAndMove(HOpCreateNurbs3D self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbs3D_OnTimer(HOpCreateNurbs3D self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateNurbsCurve_CreateListenerManager(HOpCreateNurbsCurve self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnLButtonDown(HOpCreateNurbsCurve self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMouseMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnLButtonUp(HOpCreateNurbsCurve self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnLButtonDblClk(HOpCreateNurbsCurve self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMButtonDown(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMButtonUp(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMButtonDblClk(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnRButtonDown(HOpCreateNurbsCurve self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnRButtonUp(HOpCreateNurbsCurve self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnRButtonDblClk(HOpCreateNurbsCurve self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMouseWheel(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnKeyDown(HOpCreateNurbsCurve self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnKeyUp(HOpCreateNurbsCurve self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnTouchesDown(HOpCreateNurbsCurve self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnTouchesMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnTouchesUp(HOpCreateNurbsCurve self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateNurbsCurve_Clone(HOpCreateNurbsCurve self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateNurbsCurve_OperatorStarted(HOpCreateNurbsCurve self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateNurbsCurve_GetName(HOpCreateNurbsCurve self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnLButtonDownAndMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnMButtonDownAndMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnRButtonDownAndMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnLRButtonDownAndMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnNoButtonDownAndMove(HOpCreateNurbsCurve self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateNurbsCurve_OnTimer(HOpCreateNurbsCurve self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreatePolyline_CreateListenerManager(HOpCreatePolyline self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreatePolyline_OnLButtonDown(HOpCreatePolyline self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMouseMove(HOpCreatePolyline self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnLButtonUp(HOpCreatePolyline self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnLButtonDblClk(HOpCreatePolyline self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMButtonDown(HOpCreatePolyline self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMButtonUp(HOpCreatePolyline self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMButtonDblClk(HOpCreatePolyline self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnRButtonDown(HOpCreatePolyline self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnRButtonUp(HOpCreatePolyline self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnRButtonDblClk(HOpCreatePolyline self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMouseWheel(HOpCreatePolyline self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnKeyDown(HOpCreatePolyline self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnKeyUp(HOpCreatePolyline self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnTouchesDown(HOpCreatePolyline self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnTouchesMove(HOpCreatePolyline self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnTouchesUp(HOpCreatePolyline self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreatePolyline_Clone(HOpCreatePolyline self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreatePolyline_OperatorStarted(HOpCreatePolyline self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreatePolyline_GetName(HOpCreatePolyline self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreatePolyline_OnLButtonDownAndMove(HOpCreatePolyline self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnMButtonDownAndMove(HOpCreatePolyline self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnRButtonDownAndMove(HOpCreatePolyline self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnLRButtonDownAndMove(HOpCreatePolyline self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnNoButtonDownAndMove(HOpCreatePolyline self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreatePolyline_OnTimer(HOpCreatePolyline self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateRectangle_CreateListenerManager(HOpCreateRectangle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateRectangle_OnLButtonDown(HOpCreateRectangle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMouseMove(HOpCreateRectangle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnLButtonUp(HOpCreateRectangle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnLButtonDblClk(HOpCreateRectangle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMButtonDown(HOpCreateRectangle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMButtonUp(HOpCreateRectangle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMButtonDblClk(HOpCreateRectangle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnRButtonDown(HOpCreateRectangle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnRButtonUp(HOpCreateRectangle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnRButtonDblClk(HOpCreateRectangle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMouseWheel(HOpCreateRectangle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnKeyDown(HOpCreateRectangle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnKeyUp(HOpCreateRectangle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnTouchesDown(HOpCreateRectangle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnTouchesMove(HOpCreateRectangle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnTouchesUp(HOpCreateRectangle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateRectangle_Clone(HOpCreateRectangle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateRectangle_OperatorStarted(HOpCreateRectangle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateRectangle_GetName(HOpCreateRectangle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateRectangle_OnLButtonDownAndMove(HOpCreateRectangle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnMButtonDownAndMove(HOpCreateRectangle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnRButtonDownAndMove(HOpCreateRectangle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnLRButtonDownAndMove(HOpCreateRectangle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnNoButtonDownAndMove(HOpCreateRectangle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateRectangle_OnTimer(HOpCreateRectangle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateSphere_CreateListenerManager(HOpCreateSphere self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCreateSphere_OnLButtonDown(HOpCreateSphere self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMouseMove(HOpCreateSphere self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnLButtonUp(HOpCreateSphere self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnLButtonDblClk(HOpCreateSphere self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMButtonDown(HOpCreateSphere self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMButtonUp(HOpCreateSphere self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMButtonDblClk(HOpCreateSphere self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnRButtonDown(HOpCreateSphere self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnRButtonUp(HOpCreateSphere self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnRButtonDblClk(HOpCreateSphere self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMouseWheel(HOpCreateSphere self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnKeyDown(HOpCreateSphere self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnKeyUp(HOpCreateSphere self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnTouchesDown(HOpCreateSphere self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnTouchesMove(HOpCreateSphere self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnTouchesUp(HOpCreateSphere self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCreateSphere_Clone(HOpCreateSphere self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCreateSphere_OperatorStarted(HOpCreateSphere self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCreateSphere_GetName(HOpCreateSphere self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCreateSphere_OnLButtonDownAndMove(HOpCreateSphere self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnMButtonDownAndMove(HOpCreateSphere self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnRButtonDownAndMove(HOpCreateSphere self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnLRButtonDownAndMove(HOpCreateSphere self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnNoButtonDownAndMove(HOpCreateSphere self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCreateSphere_OnTimer(HOpCreateSphere self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraManipulate_CreateListenerManager(HOpCameraManipulate self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraManipulate_OnLButtonDown(HOpCameraManipulate self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMouseMove(HOpCameraManipulate self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnLButtonUp(HOpCameraManipulate self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnLButtonDblClk(HOpCameraManipulate self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMButtonDown(HOpCameraManipulate self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMButtonUp(HOpCameraManipulate self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMButtonDblClk(HOpCameraManipulate self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnRButtonDown(HOpCameraManipulate self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnRButtonUp(HOpCameraManipulate self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnRButtonDblClk(HOpCameraManipulate self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMouseWheel(HOpCameraManipulate self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnKeyDown(HOpCameraManipulate self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnKeyUp(HOpCameraManipulate self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnTouchesDown(HOpCameraManipulate self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnTouchesMove(HOpCameraManipulate self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnTouchesUp(HOpCameraManipulate self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraManipulate_Clone(HOpCameraManipulate self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraManipulate_OperatorStarted(HOpCameraManipulate self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraManipulate_GetName(HOpCameraManipulate self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraManipulate_OnLButtonDownAndMove(HOpCameraManipulate self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnMButtonDownAndMove(HOpCameraManipulate self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnRButtonDownAndMove(HOpCameraManipulate self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnLRButtonDownAndMove(HOpCameraManipulate self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnNoButtonDownAndMove(HOpCameraManipulate self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraManipulate_OnTimer(HOpCameraManipulate self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraOrbit_CreateListenerManager(HOpCameraOrbit self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraOrbit_OnLButtonDown(HOpCameraOrbit self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMouseMove(HOpCameraOrbit self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnLButtonUp(HOpCameraOrbit self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnLButtonDblClk(HOpCameraOrbit self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMButtonDown(HOpCameraOrbit self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMButtonUp(HOpCameraOrbit self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMButtonDblClk(HOpCameraOrbit self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnRButtonDown(HOpCameraOrbit self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnRButtonUp(HOpCameraOrbit self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnRButtonDblClk(HOpCameraOrbit self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMouseWheel(HOpCameraOrbit self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnKeyDown(HOpCameraOrbit self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnKeyUp(HOpCameraOrbit self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnTouchesDown(HOpCameraOrbit self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnTouchesMove(HOpCameraOrbit self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnTouchesUp(HOpCameraOrbit self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraOrbit_Clone(HOpCameraOrbit self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraOrbit_OperatorStarted(HOpCameraOrbit self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraOrbit_GetName(HOpCameraOrbit self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraOrbit_OnLButtonDownAndMove(HOpCameraOrbit self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnMButtonDownAndMove(HOpCameraOrbit self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnRButtonDownAndMove(HOpCameraOrbit self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnLRButtonDownAndMove(HOpCameraOrbit self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnNoButtonDownAndMove(HOpCameraOrbit self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbit_OnTimer(HOpCameraOrbit self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraOrbitTurntable_CreateListenerManager(HOpCameraOrbitTurntable self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnLButtonDown(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMouseMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnLButtonUp(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnLButtonDblClk(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMButtonDown(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMButtonUp(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMButtonDblClk(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnRButtonDown(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnRButtonUp(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnRButtonDblClk(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMouseWheel(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnKeyDown(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnKeyUp(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnTouchesDown(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnTouchesMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnTouchesUp(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraOrbitTurntable_Clone(HOpCameraOrbitTurntable self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraOrbitTurntable_OperatorStarted(HOpCameraOrbitTurntable self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraOrbitTurntable_GetName(HOpCameraOrbitTurntable self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnLButtonDownAndMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnMButtonDownAndMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnRButtonDownAndMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnLRButtonDownAndMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnNoButtonDownAndMove(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraOrbitTurntable_OnTimer(HOpCameraOrbitTurntable self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraPan_CreateListenerManager(HOpCameraPan self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraPan_OnLButtonDown(HOpCameraPan self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMouseMove(HOpCameraPan self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnLButtonUp(HOpCameraPan self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnLButtonDblClk(HOpCameraPan self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMButtonDown(HOpCameraPan self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMButtonUp(HOpCameraPan self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMButtonDblClk(HOpCameraPan self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnRButtonDown(HOpCameraPan self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnRButtonUp(HOpCameraPan self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnRButtonDblClk(HOpCameraPan self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMouseWheel(HOpCameraPan self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnKeyDown(HOpCameraPan self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnKeyUp(HOpCameraPan self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnTouchesDown(HOpCameraPan self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnTouchesMove(HOpCameraPan self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnTouchesUp(HOpCameraPan self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraPan_Clone(HOpCameraPan self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraPan_OperatorStarted(HOpCameraPan self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraPan_GetName(HOpCameraPan self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraPan_OnLButtonDownAndMove(HOpCameraPan self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnMButtonDownAndMove(HOpCameraPan self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnRButtonDownAndMove(HOpCameraPan self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnLRButtonDownAndMove(HOpCameraPan self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnNoButtonDownAndMove(HOpCameraPan self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraPan_OnTimer(HOpCameraPan self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraRelativeOrbit_CreateListenerManager(HOpCameraRelativeOrbit self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnLButtonDown(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMouseMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnLButtonUp(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnLButtonDblClk(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMButtonDown(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMButtonUp(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMButtonDblClk(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnRButtonDown(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnRButtonUp(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnRButtonDblClk(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMouseWheel(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnKeyDown(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnKeyUp(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnTouchesDown(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnTouchesMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnTouchesUp(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraRelativeOrbit_Clone(HOpCameraRelativeOrbit self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraRelativeOrbit_OperatorStarted(HOpCameraRelativeOrbit self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraRelativeOrbit_GetName(HOpCameraRelativeOrbit self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnLButtonDownAndMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnMButtonDownAndMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnRButtonDownAndMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnLRButtonDownAndMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnNoButtonDownAndMove(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraRelativeOrbit_OnTimer(HOpCameraRelativeOrbit self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraWalk_CreateListenerManager(HOpCameraWalk self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraWalk_OnLButtonDown(HOpCameraWalk self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMouseMove(HOpCameraWalk self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnLButtonUp(HOpCameraWalk self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnLButtonDblClk(HOpCameraWalk self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMButtonDown(HOpCameraWalk self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMButtonUp(HOpCameraWalk self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMButtonDblClk(HOpCameraWalk self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnRButtonDown(HOpCameraWalk self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnRButtonUp(HOpCameraWalk self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnRButtonDblClk(HOpCameraWalk self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMouseWheel(HOpCameraWalk self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnKeyDown(HOpCameraWalk self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnKeyUp(HOpCameraWalk self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnTouchesDown(HOpCameraWalk self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnTouchesMove(HOpCameraWalk self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnTouchesUp(HOpCameraWalk self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraWalk_Clone(HOpCameraWalk self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraWalk_OperatorStarted(HOpCameraWalk self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraWalk_GetName(HOpCameraWalk self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraWalk_OnLButtonDownAndMove(HOpCameraWalk self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnMButtonDownAndMove(HOpCameraWalk self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnRButtonDownAndMove(HOpCameraWalk self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnLRButtonDownAndMove(HOpCameraWalk self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnNoButtonDownAndMove(HOpCameraWalk self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraWalk_OnTimer(HOpCameraWalk self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraZoom_CreateListenerManager(HOpCameraZoom self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraZoom_OnLButtonDown(HOpCameraZoom self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMouseMove(HOpCameraZoom self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnLButtonUp(HOpCameraZoom self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnLButtonDblClk(HOpCameraZoom self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMButtonDown(HOpCameraZoom self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMButtonUp(HOpCameraZoom self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMButtonDblClk(HOpCameraZoom self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnRButtonDown(HOpCameraZoom self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnRButtonUp(HOpCameraZoom self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnRButtonDblClk(HOpCameraZoom self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMouseWheel(HOpCameraZoom self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnKeyDown(HOpCameraZoom self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnKeyUp(HOpCameraZoom self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnTouchesDown(HOpCameraZoom self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnTouchesMove(HOpCameraZoom self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnTouchesUp(HOpCameraZoom self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraZoom_Clone(HOpCameraZoom self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraZoom_OperatorStarted(HOpCameraZoom self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraZoom_GetName(HOpCameraZoom self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraZoom_OnLButtonDownAndMove(HOpCameraZoom self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnMButtonDownAndMove(HOpCameraZoom self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnRButtonDownAndMove(HOpCameraZoom self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnLRButtonDownAndMove(HOpCameraZoom self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnNoButtonDownAndMove(HOpCameraZoom self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoom_OnTimer(HOpCameraZoom self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraZoomBox_CreateListenerManager(HOpCameraZoomBox self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpCameraZoomBox_OnLButtonDown(HOpCameraZoomBox self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMouseMove(HOpCameraZoomBox self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnLButtonUp(HOpCameraZoomBox self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnLButtonDblClk(HOpCameraZoomBox self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMButtonDown(HOpCameraZoomBox self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMButtonUp(HOpCameraZoomBox self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMButtonDblClk(HOpCameraZoomBox self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnRButtonDown(HOpCameraZoomBox self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnRButtonUp(HOpCameraZoomBox self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnRButtonDblClk(HOpCameraZoomBox self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMouseWheel(HOpCameraZoomBox self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnKeyDown(HOpCameraZoomBox self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnKeyUp(HOpCameraZoomBox self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnTouchesDown(HOpCameraZoomBox self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnTouchesMove(HOpCameraZoomBox self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnTouchesUp(HOpCameraZoomBox self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpCameraZoomBox_Clone(HOpCameraZoomBox self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpCameraZoomBox_OperatorStarted(HOpCameraZoomBox self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpCameraZoomBox_GetName(HOpCameraZoomBox self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpCameraZoomBox_OnLButtonDownAndMove(HOpCameraZoomBox self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnMButtonDownAndMove(HOpCameraZoomBox self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnRButtonDownAndMove(HOpCameraZoomBox self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnLRButtonDownAndMove(HOpCameraZoomBox self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnNoButtonDownAndMove(HOpCameraZoomBox self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpCameraZoomBox_OnTimer(HOpCameraZoomBox self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupAnnotate_CreateListenerManager(HOpMarkupAnnotate self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnLButtonDown(HOpMarkupAnnotate self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMouseMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnLButtonUp(HOpMarkupAnnotate self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnLButtonDblClk(HOpMarkupAnnotate self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMButtonDown(HOpMarkupAnnotate self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMButtonUp(HOpMarkupAnnotate self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMButtonDblClk(HOpMarkupAnnotate self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnRButtonDown(HOpMarkupAnnotate self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnRButtonUp(HOpMarkupAnnotate self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnRButtonDblClk(HOpMarkupAnnotate self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMouseWheel(HOpMarkupAnnotate self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnKeyDown(HOpMarkupAnnotate self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnKeyUp(HOpMarkupAnnotate self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnTouchesDown(HOpMarkupAnnotate self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnTouchesMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnTouchesUp(HOpMarkupAnnotate self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupAnnotate_Clone(HOpMarkupAnnotate self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupAnnotate_OperatorStarted(HOpMarkupAnnotate self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupAnnotate_GetName(HOpMarkupAnnotate self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnLButtonDownAndMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnMButtonDownAndMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnRButtonDownAndMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnLRButtonDownAndMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnNoButtonDownAndMove(HOpMarkupAnnotate self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupAnnotate_OnTimer(HOpMarkupAnnotate self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupCircle_CreateListenerManager(HOpMarkupCircle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupCircle_OnLButtonDown(HOpMarkupCircle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMouseMove(HOpMarkupCircle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnLButtonUp(HOpMarkupCircle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnLButtonDblClk(HOpMarkupCircle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMButtonDown(HOpMarkupCircle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMButtonUp(HOpMarkupCircle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMButtonDblClk(HOpMarkupCircle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnRButtonDown(HOpMarkupCircle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnRButtonUp(HOpMarkupCircle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnRButtonDblClk(HOpMarkupCircle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMouseWheel(HOpMarkupCircle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnKeyDown(HOpMarkupCircle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnKeyUp(HOpMarkupCircle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnTouchesDown(HOpMarkupCircle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnTouchesMove(HOpMarkupCircle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnTouchesUp(HOpMarkupCircle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupCircle_Clone(HOpMarkupCircle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupCircle_OperatorStarted(HOpMarkupCircle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupCircle_GetName(HOpMarkupCircle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupCircle_OnLButtonDownAndMove(HOpMarkupCircle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnMButtonDownAndMove(HOpMarkupCircle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnRButtonDownAndMove(HOpMarkupCircle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnLRButtonDownAndMove(HOpMarkupCircle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnNoButtonDownAndMove(HOpMarkupCircle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupCircle_OnTimer(HOpMarkupCircle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupFreehand_CreateListenerManager(HOpMarkupFreehand self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupFreehand_OnLButtonDown(HOpMarkupFreehand self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMouseMove(HOpMarkupFreehand self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnLButtonUp(HOpMarkupFreehand self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnLButtonDblClk(HOpMarkupFreehand self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMButtonDown(HOpMarkupFreehand self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMButtonUp(HOpMarkupFreehand self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMButtonDblClk(HOpMarkupFreehand self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnRButtonDown(HOpMarkupFreehand self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnRButtonUp(HOpMarkupFreehand self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnRButtonDblClk(HOpMarkupFreehand self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMouseWheel(HOpMarkupFreehand self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnKeyDown(HOpMarkupFreehand self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnKeyUp(HOpMarkupFreehand self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnTouchesDown(HOpMarkupFreehand self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnTouchesMove(HOpMarkupFreehand self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnTouchesUp(HOpMarkupFreehand self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupFreehand_Clone(HOpMarkupFreehand self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupFreehand_OperatorStarted(HOpMarkupFreehand self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupFreehand_GetName(HOpMarkupFreehand self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupFreehand_OnLButtonDownAndMove(HOpMarkupFreehand self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnMButtonDownAndMove(HOpMarkupFreehand self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnRButtonDownAndMove(HOpMarkupFreehand self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnLRButtonDownAndMove(HOpMarkupFreehand self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnNoButtonDownAndMove(HOpMarkupFreehand self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupFreehand_OnTimer(HOpMarkupFreehand self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupMeasure_CreateListenerManager(HOpMarkupMeasure self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupMeasure_OnLButtonDown(HOpMarkupMeasure self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMouseMove(HOpMarkupMeasure self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnLButtonUp(HOpMarkupMeasure self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnLButtonDblClk(HOpMarkupMeasure self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMButtonDown(HOpMarkupMeasure self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMButtonUp(HOpMarkupMeasure self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMButtonDblClk(HOpMarkupMeasure self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnRButtonDown(HOpMarkupMeasure self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnRButtonUp(HOpMarkupMeasure self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnRButtonDblClk(HOpMarkupMeasure self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMouseWheel(HOpMarkupMeasure self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnKeyDown(HOpMarkupMeasure self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnKeyUp(HOpMarkupMeasure self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnTouchesDown(HOpMarkupMeasure self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnTouchesMove(HOpMarkupMeasure self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnTouchesUp(HOpMarkupMeasure self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupMeasure_Clone(HOpMarkupMeasure self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupMeasure_OperatorStarted(HOpMarkupMeasure self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupMeasure_GetName(HOpMarkupMeasure self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupMeasure_OnLButtonDownAndMove(HOpMarkupMeasure self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnMButtonDownAndMove(HOpMarkupMeasure self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnRButtonDownAndMove(HOpMarkupMeasure self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnLRButtonDownAndMove(HOpMarkupMeasure self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnNoButtonDownAndMove(HOpMarkupMeasure self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupMeasure_OnTimer(HOpMarkupMeasure self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupPostIt_CreateListenerManager(HOpMarkupPostIt self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupPostIt_OnLButtonDown(HOpMarkupPostIt self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMouseMove(HOpMarkupPostIt self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnLButtonUp(HOpMarkupPostIt self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnLButtonDblClk(HOpMarkupPostIt self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMButtonDown(HOpMarkupPostIt self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMButtonUp(HOpMarkupPostIt self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMButtonDblClk(HOpMarkupPostIt self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnRButtonDown(HOpMarkupPostIt self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnRButtonUp(HOpMarkupPostIt self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnRButtonDblClk(HOpMarkupPostIt self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMouseWheel(HOpMarkupPostIt self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnKeyDown(HOpMarkupPostIt self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnKeyUp(HOpMarkupPostIt self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnTouchesDown(HOpMarkupPostIt self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnTouchesMove(HOpMarkupPostIt self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnTouchesUp(HOpMarkupPostIt self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupPostIt_Clone(HOpMarkupPostIt self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupPostIt_OperatorStarted(HOpMarkupPostIt self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupPostIt_GetName(HOpMarkupPostIt self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupPostIt_OnLButtonDownAndMove(HOpMarkupPostIt self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnMButtonDownAndMove(HOpMarkupPostIt self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnRButtonDownAndMove(HOpMarkupPostIt self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnLRButtonDownAndMove(HOpMarkupPostIt self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnNoButtonDownAndMove(HOpMarkupPostIt self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupPostIt_OnTimer(HOpMarkupPostIt self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupRectangle_CreateListenerManager(HOpMarkupRectangle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMarkupRectangle_OnLButtonDown(HOpMarkupRectangle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMouseMove(HOpMarkupRectangle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnLButtonUp(HOpMarkupRectangle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnLButtonDblClk(HOpMarkupRectangle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMButtonDown(HOpMarkupRectangle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMButtonUp(HOpMarkupRectangle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMButtonDblClk(HOpMarkupRectangle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnRButtonDown(HOpMarkupRectangle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnRButtonUp(HOpMarkupRectangle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnRButtonDblClk(HOpMarkupRectangle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMouseWheel(HOpMarkupRectangle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnKeyDown(HOpMarkupRectangle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnKeyUp(HOpMarkupRectangle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnTouchesDown(HOpMarkupRectangle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnTouchesMove(HOpMarkupRectangle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnTouchesUp(HOpMarkupRectangle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMarkupRectangle_Clone(HOpMarkupRectangle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMarkupRectangle_OperatorStarted(HOpMarkupRectangle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMarkupRectangle_GetName(HOpMarkupRectangle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMarkupRectangle_OnLButtonDownAndMove(HOpMarkupRectangle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnMButtonDownAndMove(HOpMarkupRectangle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnRButtonDownAndMove(HOpMarkupRectangle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnLRButtonDownAndMove(HOpMarkupRectangle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnNoButtonDownAndMove(HOpMarkupRectangle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMarkupRectangle_OnTimer(HOpMarkupRectangle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMoveHandle_CreateListenerManager(HOpMoveHandle self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpMoveHandle_OnLButtonDown(HOpMoveHandle self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMouseMove(HOpMoveHandle self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnLButtonUp(HOpMoveHandle self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnLButtonDblClk(HOpMoveHandle self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMButtonDown(HOpMoveHandle self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMButtonUp(HOpMoveHandle self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMButtonDblClk(HOpMoveHandle self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnRButtonDown(HOpMoveHandle self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnRButtonUp(HOpMoveHandle self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnRButtonDblClk(HOpMoveHandle self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMouseWheel(HOpMoveHandle self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnKeyDown(HOpMoveHandle self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnKeyUp(HOpMoveHandle self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnTouchesDown(HOpMoveHandle self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnTouchesMove(HOpMoveHandle self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnTouchesUp(HOpMoveHandle self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpMoveHandle_Clone(HOpMoveHandle self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpMoveHandle_OperatorStarted(HOpMoveHandle self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpMoveHandle_GetName(HOpMoveHandle self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpMoveHandle_OnLButtonDownAndMove(HOpMoveHandle self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnMButtonDownAndMove(HOpMoveHandle self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnRButtonDownAndMove(HOpMoveHandle self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnLRButtonDownAndMove(HOpMoveHandle self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnNoButtonDownAndMove(HOpMoveHandle self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpMoveHandle_OnTimer(HOpMoveHandle self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpNavCube_CreateListenerManager(HOpNavCube self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpNavCube_OnLButtonDown(HOpNavCube self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMouseMove(HOpNavCube self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnLButtonUp(HOpNavCube self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnLButtonDblClk(HOpNavCube self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMButtonDown(HOpNavCube self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMButtonUp(HOpNavCube self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMButtonDblClk(HOpNavCube self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnRButtonDown(HOpNavCube self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnRButtonUp(HOpNavCube self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnRButtonDblClk(HOpNavCube self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMouseWheel(HOpNavCube self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnKeyDown(HOpNavCube self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnKeyUp(HOpNavCube self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnTouchesDown(HOpNavCube self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnTouchesMove(HOpNavCube self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnTouchesUp(HOpNavCube self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpNavCube_Clone(HOpNavCube self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpNavCube_OperatorStarted(HOpNavCube self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpNavCube_GetName(HOpNavCube self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpNavCube_OnLButtonDownAndMove(HOpNavCube self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnMButtonDownAndMove(HOpNavCube self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnRButtonDownAndMove(HOpNavCube self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnLRButtonDownAndMove(HOpNavCube self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnNoButtonDownAndMove(HOpNavCube self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNavCube_OnTimer(HOpNavCube self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpNetwork_CreateListenerManager(HOpNetwork self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpNetwork_OnLButtonDown(HOpNetwork self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMouseMove(HOpNetwork self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnLButtonUp(HOpNetwork self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnLButtonDblClk(HOpNetwork self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMButtonDown(HOpNetwork self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMButtonUp(HOpNetwork self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMButtonDblClk(HOpNetwork self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnRButtonDown(HOpNetwork self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnRButtonUp(HOpNetwork self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnRButtonDblClk(HOpNetwork self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMouseWheel(HOpNetwork self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnKeyDown(HOpNetwork self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnKeyUp(HOpNetwork self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnTouchesDown(HOpNetwork self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnTouchesMove(HOpNetwork self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnTouchesUp(HOpNetwork self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpNetwork_Clone(HOpNetwork self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpNetwork_OperatorStarted(HOpNetwork self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpNetwork_GetName(HOpNetwork self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpNetwork_OnLButtonDownAndMove(HOpNetwork self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnMButtonDownAndMove(HOpNetwork self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnRButtonDownAndMove(HOpNetwork self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnLRButtonDownAndMove(HOpNetwork self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnNoButtonDownAndMove(HOpNetwork self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpNetwork_OnTimer(HOpNetwork self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectAnnotate_CreateListenerManager(HOpObjectAnnotate self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpObjectAnnotate_OnLButtonDown(HOpObjectAnnotate self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMouseMove(HOpObjectAnnotate self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnLButtonUp(HOpObjectAnnotate self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnLButtonDblClk(HOpObjectAnnotate self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMButtonDown(HOpObjectAnnotate self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMButtonUp(HOpObjectAnnotate self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMButtonDblClk(HOpObjectAnnotate self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnRButtonDown(HOpObjectAnnotate self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnRButtonUp(HOpObjectAnnotate self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnRButtonDblClk(HOpObjectAnnotate self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMouseWheel(HOpObjectAnnotate self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnKeyDown(HOpObjectAnnotate self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnKeyUp(HOpObjectAnnotate self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnTouchesDown(HOpObjectAnnotate self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnTouchesMove(HOpObjectAnnotate self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnTouchesUp(HOpObjectAnnotate self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectAnnotate_Clone(HOpObjectAnnotate self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpObjectAnnotate_OperatorStarted(HOpObjectAnnotate self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpObjectAnnotate_GetName(HOpObjectAnnotate self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpObjectAnnotate_OnLButtonDownAndMove(HOpObjectAnnotate self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnMButtonDownAndMove(HOpObjectAnnotate self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnRButtonDownAndMove(HOpObjectAnnotate self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnLRButtonDownAndMove(HOpObjectAnnotate self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnNoButtonDownAndMove(HOpObjectAnnotate self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectAnnotate_OnTimer(HOpObjectAnnotate self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectClash_CreateListenerManager(HOpObjectClash self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpObjectClash_OnLButtonDown(HOpObjectClash self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMouseMove(HOpObjectClash self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnLButtonUp(HOpObjectClash self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnLButtonDblClk(HOpObjectClash self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMButtonDown(HOpObjectClash self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMButtonUp(HOpObjectClash self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMButtonDblClk(HOpObjectClash self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnRButtonDown(HOpObjectClash self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnRButtonUp(HOpObjectClash self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnRButtonDblClk(HOpObjectClash self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMouseWheel(HOpObjectClash self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnKeyDown(HOpObjectClash self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnKeyUp(HOpObjectClash self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnTouchesDown(HOpObjectClash self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnTouchesMove(HOpObjectClash self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnTouchesUp(HOpObjectClash self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectClash_Clone(HOpObjectClash self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpObjectClash_OperatorStarted(HOpObjectClash self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpObjectClash_GetName(HOpObjectClash self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpObjectClash_OnLButtonDownAndMove(HOpObjectClash self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnMButtonDownAndMove(HOpObjectClash self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnRButtonDownAndMove(HOpObjectClash self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnLRButtonDownAndMove(HOpObjectClash self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnNoButtonDownAndMove(HOpObjectClash self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_OnTimer(HOpObjectClash self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectClash_SelectByScreenVolume(HOpObjectClash self, long sel_item) {
    return self.SelectByScreenVolume((sel_item == 0) ? null : new HSmartSelItem(sel_item, false));
  }
  public static int SwigDirector_HOpObjectClash_SelectByWorldVolume(HOpObjectClash self, long sel_item) {
    return self.SelectByWorldVolume((sel_item == 0) ? null : new HSmartSelItem(sel_item, false));
  }
  public static int SwigDirector_HOpObjectClash_SelectByEnclosure(HOpObjectClash self, long sel_item) {
    return self.SelectByEnclosure((sel_item == 0) ? null : new HSmartSelItem(sel_item, false));
  }
  public static int SwigDirector_HOpObjectClash_SelectByShell(HOpObjectClash self, long sel_item) {
    return self.SelectByShell((sel_item == 0) ? null : new HSmartSelItem(sel_item, false));
  }
  public static long SwigDirector_HOpObjectRotate_CreateListenerManager(HOpObjectRotate self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpObjectRotate_OnLButtonDown(HOpObjectRotate self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMouseMove(HOpObjectRotate self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnLButtonUp(HOpObjectRotate self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnLButtonDblClk(HOpObjectRotate self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMButtonDown(HOpObjectRotate self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMButtonUp(HOpObjectRotate self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMButtonDblClk(HOpObjectRotate self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnRButtonDown(HOpObjectRotate self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnRButtonUp(HOpObjectRotate self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnRButtonDblClk(HOpObjectRotate self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMouseWheel(HOpObjectRotate self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnKeyDown(HOpObjectRotate self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnKeyUp(HOpObjectRotate self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnTouchesDown(HOpObjectRotate self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnTouchesMove(HOpObjectRotate self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnTouchesUp(HOpObjectRotate self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpObjectRotate_Clone(HOpObjectRotate self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpObjectRotate_OperatorStarted(HOpObjectRotate self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpObjectRotate_GetName(HOpObjectRotate self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpObjectRotate_OnLButtonDownAndMove(HOpObjectRotate self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnMButtonDownAndMove(HOpObjectRotate self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnRButtonDownAndMove(HOpObjectRotate self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnLRButtonDownAndMove(HOpObjectRotate self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnNoButtonDownAndMove(HOpObjectRotate self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpObjectRotate_OnTimer(HOpObjectRotate self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectArea_CreateListenerManager(HOpSelectArea self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpSelectArea_OnLButtonDown(HOpSelectArea self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMouseMove(HOpSelectArea self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnLButtonUp(HOpSelectArea self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnLButtonDblClk(HOpSelectArea self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMButtonDown(HOpSelectArea self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMButtonUp(HOpSelectArea self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMButtonDblClk(HOpSelectArea self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnRButtonDown(HOpSelectArea self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnRButtonUp(HOpSelectArea self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnRButtonDblClk(HOpSelectArea self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMouseWheel(HOpSelectArea self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnKeyDown(HOpSelectArea self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnKeyUp(HOpSelectArea self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnTouchesDown(HOpSelectArea self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnTouchesMove(HOpSelectArea self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnTouchesUp(HOpSelectArea self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectArea_Clone(HOpSelectArea self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpSelectArea_OperatorStarted(HOpSelectArea self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpSelectArea_GetName(HOpSelectArea self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpSelectArea_OnLButtonDownAndMove(HOpSelectArea self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnMButtonDownAndMove(HOpSelectArea self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnRButtonDownAndMove(HOpSelectArea self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnLRButtonDownAndMove(HOpSelectArea self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnNoButtonDownAndMove(HOpSelectArea self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectArea_OnTimer(HOpSelectArea self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectAperture_CreateListenerManager(HOpSelectAperture self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpSelectAperture_OnLButtonDown(HOpSelectAperture self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMouseMove(HOpSelectAperture self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnLButtonUp(HOpSelectAperture self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnLButtonDblClk(HOpSelectAperture self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMButtonDown(HOpSelectAperture self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMButtonUp(HOpSelectAperture self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMButtonDblClk(HOpSelectAperture self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnRButtonDown(HOpSelectAperture self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnRButtonUp(HOpSelectAperture self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnRButtonDblClk(HOpSelectAperture self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMouseWheel(HOpSelectAperture self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnKeyDown(HOpSelectAperture self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnKeyUp(HOpSelectAperture self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnTouchesDown(HOpSelectAperture self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnTouchesMove(HOpSelectAperture self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnTouchesUp(HOpSelectAperture self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectAperture_Clone(HOpSelectAperture self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpSelectAperture_OperatorStarted(HOpSelectAperture self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpSelectAperture_GetName(HOpSelectAperture self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpSelectAperture_OnLButtonDownAndMove(HOpSelectAperture self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnMButtonDownAndMove(HOpSelectAperture self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnRButtonDownAndMove(HOpSelectAperture self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnLRButtonDownAndMove(HOpSelectAperture self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnNoButtonDownAndMove(HOpSelectAperture self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectAperture_OnTimer(HOpSelectAperture self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HOpSelectAperture_HandleSelection(HOpSelectAperture self, long hevent) {
    self.HandleSelection(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectPolygon_CreateListenerManager(HOpSelectPolygon self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpSelectPolygon_OnLButtonDown(HOpSelectPolygon self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMouseMove(HOpSelectPolygon self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnLButtonUp(HOpSelectPolygon self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnLButtonDblClk(HOpSelectPolygon self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMButtonDown(HOpSelectPolygon self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMButtonUp(HOpSelectPolygon self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMButtonDblClk(HOpSelectPolygon self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnRButtonDown(HOpSelectPolygon self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnRButtonUp(HOpSelectPolygon self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnRButtonDblClk(HOpSelectPolygon self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMouseWheel(HOpSelectPolygon self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnKeyDown(HOpSelectPolygon self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnKeyUp(HOpSelectPolygon self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnTouchesDown(HOpSelectPolygon self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnTouchesMove(HOpSelectPolygon self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnTouchesUp(HOpSelectPolygon self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectPolygon_Clone(HOpSelectPolygon self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpSelectPolygon_OperatorStarted(HOpSelectPolygon self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpSelectPolygon_GetName(HOpSelectPolygon self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpSelectPolygon_OnLButtonDownAndMove(HOpSelectPolygon self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnMButtonDownAndMove(HOpSelectPolygon self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnRButtonDownAndMove(HOpSelectPolygon self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnLRButtonDownAndMove(HOpSelectPolygon self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnNoButtonDownAndMove(HOpSelectPolygon self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolygon_OnTimer(HOpSelectPolygon self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectPolyline_CreateListenerManager(HOpSelectPolyline self) {
    return HEventListener.getCPtr(self.CreateListenerManager());
  }
  public static int SwigDirector_HOpSelectPolyline_OnLButtonDown(HOpSelectPolyline self, long hevent) {
    return self.OnLButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMouseMove(HOpSelectPolyline self, long hevent) {
    return self.OnMouseMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnLButtonUp(HOpSelectPolyline self, long hevent) {
    return self.OnLButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnLButtonDblClk(HOpSelectPolyline self, long hevent) {
    return self.OnLButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMButtonDown(HOpSelectPolyline self, long hevent) {
    return self.OnMButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMButtonUp(HOpSelectPolyline self, long hevent) {
    return self.OnMButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMButtonDblClk(HOpSelectPolyline self, long hevent) {
    return self.OnMButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnRButtonDown(HOpSelectPolyline self, long hevent) {
    return self.OnRButtonDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnRButtonUp(HOpSelectPolyline self, long hevent) {
    return self.OnRButtonUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnRButtonDblClk(HOpSelectPolyline self, long hevent) {
    return self.OnRButtonDblClk(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMouseWheel(HOpSelectPolyline self, long hevent) {
    return self.OnMouseWheel(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnKeyDown(HOpSelectPolyline self, long hevent) {
    return self.OnKeyDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnKeyUp(HOpSelectPolyline self, long hevent) {
    return self.OnKeyUp(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnTouchesDown(HOpSelectPolyline self, long hevent) {
    return self.OnTouchesDown(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnTouchesMove(HOpSelectPolyline self, long hevent) {
    return self.OnTouchesMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnTouchesUp(HOpSelectPolyline self, long hevent) {
    return self.OnTouchesUp(new HEventInfo(hevent, false));
  }
  public static long SwigDirector_HOpSelectPolyline_Clone(HOpSelectPolyline self) {
    return HBaseOperator.getCPtr(self.Clone());
  }
  public static boolean SwigDirector_HOpSelectPolyline_OperatorStarted(HOpSelectPolyline self) {
    return self.OperatorStarted();
  }
  public static String SwigDirector_HOpSelectPolyline_GetName(HOpSelectPolyline self) {
    return self.GetName();
  }
  public static int SwigDirector_HOpSelectPolyline_OnLButtonDownAndMove(HOpSelectPolyline self, long hevent) {
    return self.OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnMButtonDownAndMove(HOpSelectPolyline self, long hevent) {
    return self.OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnRButtonDownAndMove(HOpSelectPolyline self, long hevent) {
    return self.OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnLRButtonDownAndMove(HOpSelectPolyline self, long hevent) {
    return self.OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnNoButtonDownAndMove(HOpSelectPolyline self, long hevent) {
    return self.OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }
  public static int SwigDirector_HOpSelectPolyline_OnTimer(HOpSelectPolyline self, long hevent) {
    return self.OnTimer(new HEventInfo(hevent, false));
  }
  public static void SwigDirector_HSelectionSet_UpdateTransparency__SWIG_0(HSelectionSet self, boolean force_flush) {
    self.UpdateTransparency(force_flush);
  }
  public static void SwigDirector_HSelectionSet_UpdateTransparency__SWIG_1(HSelectionSet self) {
    self.UpdateTransparency();
  }
  public static void SwigDirector_HSelectionSet_Init(HSelectionSet self) {
    self.Init();
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_0(HSelectionSet self, long key, int num_include_keys, long[] include_keys, boolean emit_message) {
    self.Select(key, num_include_keys, include_keys, emit_message);
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys) {
    self.Select(key, num_include_keys, include_keys);
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_2(HSelectionSet self, long new_sel, boolean emit_message) {
    self.Select((new_sel == 0) ? null : new HSelectionItem(new_sel, false), emit_message);
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_3(HSelectionSet self, long new_sel) {
    self.Select((new_sel == 0) ? null : new HSelectionItem(new_sel, false));
  }
  public static void SwigDirector_HSelectionSet_SelectRegion(HSelectionSet self, long oShell, int num_include_keys, long[] include_keys, int region, boolean emit_message) {
    self.SelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region, emit_message);
  }
  public static void SwigDirector_HSelectionSet_SelectSubentity__SWIG_0(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, boolean emit_message) {
    self.SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }
  public static void SwigDirector_HSelectionSet_SelectSubentity__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    self.SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }
  public static void SwigDirector_HSelectionSet_SelectSubentity__SWIG_2(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1) {
    self.SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1);
  }
  public static void SwigDirector_HSelectionSet_SelectSubentity__SWIG_3(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces) {
    self.SelectSubentity(key, num_include_keys, include_keys, count, faces);
  }
  public static void SwigDirector_HSelectionSet_SelectSubentity__SWIG_4(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count) {
    self.SelectSubentity(key, num_include_keys, include_keys, count);
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_4(HSelectionSet self, long key, String segpath, long include_key, long includer_key, boolean emit_message) {
    self.Select(key, segpath, include_key, includer_key, emit_message);
  }
  public static void SwigDirector_HSelectionSet_Select__SWIG_5(HSelectionSet self, long key, String segpath, long include_key, long includer_key) {
    self.Select(key, segpath, include_key, includer_key);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_0(HSelectionSet self, long key, boolean emit_message) {
    self.DeSelect(key, emit_message);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_1(HSelectionSet self, long key) {
    self.DeSelect(key);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_2(HSelectionSet self, long key, int num_include_keys, long[] include_keys, boolean emit_message) {
    self.DeSelect(key, num_include_keys, include_keys, emit_message);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_3(HSelectionSet self, long key, int num_include_keys, long[] include_keys) {
    self.DeSelect(key, num_include_keys, include_keys);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_4(HSelectionSet self, long remove_sel, boolean emit_message) {
    self.DeSelect((remove_sel == 0) ? null : new HSelectionItem(remove_sel, false), emit_message);
  }
  public static void SwigDirector_HSelectionSet_DeSelect__SWIG_5(HSelectionSet self, long remove_sel) {
    self.DeSelect((remove_sel == 0) ? null : new HSelectionItem(remove_sel, false));
  }
  public static void SwigDirector_HSelectionSet_DeSelectRegion__SWIG_0(HSelectionSet self, long oShell, int region, boolean emit_messag) {
    self.DeSelectRegion(new HShellObject(oShell, false), region, emit_messag);
  }
  public static void SwigDirector_HSelectionSet_DeSelectRegion__SWIG_1(HSelectionSet self, long oShell, int num_include_keys, long[] include_keys, int region, boolean emit_message) {
    self.DeSelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region, emit_message);
  }
  public static void SwigDirector_HSelectionSet_DeSelectRegion__SWIG_2(HSelectionSet self, long oShell, int num_include_keys, long[] include_keys, int region) {
    self.DeSelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region);
  }
  public static void SwigDirector_HSelectionSet_DeSelectSubentity__SWIG_0(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, boolean emit_message) {
    self.DeSelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }
  public static void SwigDirector_HSelectionSet_DeSelectSubentity__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    self.DeSelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }
  public static boolean SwigDirector_HSelectionSet_SelectSubentityOOC__SWIG_0(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, boolean emit_message) {
    return self.SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }
  public static boolean SwigDirector_HSelectionSet_SelectSubentityOOC__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    return self.SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }
  public static boolean SwigDirector_HSelectionSet_SelectSubentityOOC__SWIG_2(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces, int[] vertex1) {
    return self.SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1);
  }
  public static boolean SwigDirector_HSelectionSet_SelectSubentityOOC__SWIG_3(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count, int[] faces) {
    return self.SelectSubentityOOC(key, num_include_keys, include_keys, count, faces);
  }
  public static boolean SwigDirector_HSelectionSet_SelectSubentityOOC__SWIG_4(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int count) {
    return self.SelectSubentityOOC(key, num_include_keys, include_keys, count);
  }
  public static boolean SwigDirector_HSelectionSet_DeSelectOOC__SWIG_0(HSelectionSet self, long key, int num_include_keys, long[] include_keys, boolean emit_message) {
    return self.DeSelectOOC(key, num_include_keys, include_keys, emit_message);
  }
  public static boolean SwigDirector_HSelectionSet_DeSelectOOC__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys) {
    return self.DeSelectOOC(key, num_include_keys, include_keys);
  }
  public static boolean SwigDirector_HSelectionSet_HighlightRegionEdges__SWIG_0(HSelectionSet self) {
    return self.HighlightRegionEdges();
  }
  public static void SwigDirector_HSelectionSet_HighlightRegionEdges__SWIG_1(HSelectionSet self, boolean yesno) {
    self.HighlightRegionEdges(yesno);
  }
  public static boolean SwigDirector_HSelectionSet_HighlightAnnotations__SWIG_0(HSelectionSet self) {
    return self.HighlightAnnotations();
  }
  public static void SwigDirector_HSelectionSet_HighlightAnnotations__SWIG_1(HSelectionSet self, boolean yesno) {
    self.HighlightAnnotations(yesno);
  }
  public static int SwigDirector_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_0(HSelectionSet self) {
    return (self.HighlightRegionEdgesAutoVisibility()).swigValue();
  }
  public static void SwigDirector_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_1(HSelectionSet self, boolean yesno) {
    self.HighlightRegionEdgesAutoVisibility(yesno);
  }
  public static void SwigDirector_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_2(HSelectionSet self, int edge_state) {
    self.HighlightRegionEdgesAutoVisibility(HRegionEdgeHighlightMode.swigToEnum(edge_state));
  }
  public static void SwigDirector_HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_0(HSelectionSet self, int face_state) {
    self.HighlightRegionFacesAutoVisibility(HRegionFaceHighlightMode.swigToEnum(face_state));
  }
  public static int SwigDirector_HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_1(HSelectionSet self) {
    return (self.HighlightRegionFacesAutoVisibility()).swigValue();
  }
  public static void SwigDirector_HSelectionSet_DeSelectAll(HSelectionSet self) {
    self.DeSelectAll();
  }
  public static boolean SwigDirector_HSelectionSet_IsSelected__SWIG_0(HSelectionSet self, long key) {
    return self.IsSelected(key);
  }
  public static boolean SwigDirector_HSelectionSet_IsSelected__SWIG_1(HSelectionSet self, long key, int num_include_keys, long[] include_keys) {
    return self.IsSelected(key, num_include_keys, include_keys);
  }
  public static boolean SwigDirector_HSelectionSet_IsSelected__SWIG_2(HSelectionSet self, long item) {
    return self.IsSelected((item == 0) ? null : new HSelectionItem(item, false));
  }
  public static boolean SwigDirector_HSelectionSet_IsRegionSelected(HSelectionSet self, long key, int num_include_keys, long[] include_keys, int region) {
    return self.IsRegionSelected(key, num_include_keys, include_keys, region);
  }
  public static boolean SwigDirector_HSelectionSet_IsHighlightSegment(HSelectionSet self, long segment_key) {
    return self.IsHighlightSegment(segment_key);
  }
  public static void SwigDirector_HSelectionSet_SetSelectionFaceColor(HSelectionSet self, long rgba) {
    self.SetSelectionFaceColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetGrayScale(HSelectionSet self, boolean grayScale) {
    self.SetGrayScale(grayScale);
  }
  public static void SwigDirector_HSelectionSet_SetInvisible(HSelectionSet self, boolean Invisible) {
    self.SetInvisible(Invisible);
  }
  public static boolean SwigDirector_HSelectionSet_GetInvisible(HSelectionSet self) {
    return self.GetInvisible();
  }
  public static void SwigDirector_HSelectionSet_SetAllowDisplacement(HSelectionSet self, boolean allowDisplacement) {
    self.SetAllowDisplacement(allowDisplacement);
  }
  public static boolean SwigDirector_HSelectionSet_GetAllowDisplacement(HSelectionSet self) {
    return self.GetAllowDisplacement();
  }
  public static void SwigDirector_HSelectionSet_GetSelectionFaceColor(HSelectionSet self, long rgba) {
    self.GetSelectionFaceColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetSelectionEdgeColor(HSelectionSet self, long rgb) {
    self.SetSelectionEdgeColor(new HPixelRGBA(rgb, false));
  }
  public static void SwigDirector_HSelectionSet_GetSelectionEdgeColor(HSelectionSet self, long rgba) {
    self.GetSelectionEdgeColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetSelectionCutEdgeColor(HSelectionSet self, long rgb) {
    self.SetSelectionCutEdgeColor(new HPixelRGBA(rgb, false));
  }
  public static void SwigDirector_HSelectionSet_GetSelectionCutEdgeColor(HSelectionSet self, long rgba) {
    self.GetSelectionCutEdgeColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetSelectionCutFaceColor(HSelectionSet self, long rgb) {
    self.SetSelectionCutFaceColor(new HPixelRGBA(rgb, false));
  }
  public static void SwigDirector_HSelectionSet_GetSelectionCutFaceColor(HSelectionSet self, long rgba) {
    self.GetSelectionCutFaceColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetSelectionMarkerColor(HSelectionSet self, long rgb) {
    self.SetSelectionMarkerColor(new HPixelRGBA(rgb, false));
  }
  public static void SwigDirector_HSelectionSet_GetSelectionMarkerColor(HSelectionSet self, long rgba) {
    self.GetSelectionMarkerColor(new HPixelRGBA(rgba, false));
  }
  public static void SwigDirector_HSelectionSet_SetSelectionEdgeWeight(HSelectionSet self, float weight) {
    self.SetSelectionEdgeWeight(weight);
  }
  public static float SwigDirector_HSelectionSet_GetSelectionEdgeWeight(HSelectionSet self) {
    return self.GetSelectionEdgeWeight();
  }
  public static void SwigDirector_HSelectionSet_SetSelectionMarkerSize(HSelectionSet self, float size) {
    self.SetSelectionMarkerSize(size);
  }
  public static float SwigDirector_HSelectionSet_GetSelectionMarkerSize(HSelectionSet self) {
    return self.GetSelectionMarkerSize();
  }
  public static long SwigDirector_HSelectionSet_GetAt(HSelectionSet self, int index) {
    return self.GetAt(index);
  }
  public static boolean SwigDirector_HSelectionSet_GetAll(HSelectionSet self, long[] out_array) {
    return self.GetAll(out_array);
  }
  public static void SwigDirector_HSelectionSet_Reset(HSelectionSet self) {
    self.Reset();
  }
  public static boolean SwigDirector_HSelectionSet_DeleteSelection__SWIG_0(HSelectionSet self, boolean emit_message) {
    return self.DeleteSelection(emit_message);
  }
  public static boolean SwigDirector_HSelectionSet_DeleteSelection__SWIG_1(HSelectionSet self) {
    return self.DeleteSelection();
  }
  public static boolean SwigDirector_HSelectionSet_GetSubwindowPenetration(HSelectionSet self) {
    return self.GetSubwindowPenetration();
  }
  public static void SwigDirector_HSelectionSet_SetSubwindowPenetration(HSelectionSet self, boolean allow) {
    self.SetSubwindowPenetration(allow);
  }
  public static boolean SwigDirector_HSelectionSet_GetAllowSubentitySelection(HSelectionSet self) {
    return self.GetAllowSubentitySelection();
  }
  public static void SwigDirector_HSelectionSet_SetAllowSubentitySelection(HSelectionSet self, boolean allow) {
    self.SetAllowSubentitySelection(allow);
  }
  public static int SwigDirector_HSelectionSet_GetSelectionLevel(HSelectionSet self) {
    return (self.GetSelectionLevel()).swigValue();
  }
  public static void SwigDirector_HSelectionSet_SetSelectionLevel(HSelectionSet self, int level) {
    self.SetSelectionLevel(HSelectLevel.swigToEnum(level));
  }
  public static boolean SwigDirector_HSelectionSet_GetAllowEntitySelection(HSelectionSet self) {
    return self.GetAllowEntitySelection();
  }
  public static void SwigDirector_HSelectionSet_SetAllowEntitySelection(HSelectionSet self, boolean allow) {
    self.SetAllowEntitySelection(allow);
  }
  public static boolean SwigDirector_HSelectionSet_GetAllowRegionSelection(HSelectionSet self) {
    return self.GetAllowRegionSelection();
  }
  public static void SwigDirector_HSelectionSet_SetAllowRegionSelection(HSelectionSet self, boolean allow) {
    self.SetAllowRegionSelection(allow);
  }
  public static int SwigDirector_HSelectionSet_GetHighlightMode(HSelectionSet self) {
    return (self.GetHighlightMode()).swigValue();
  }
  public static void SwigDirector_HSelectionSet_SetHighlightMode(HSelectionSet self, int m) {
    self.SetHighlightMode(HSelectionHighlightMode.swigToEnum(m));
  }
  public static void SwigDirector_HSelectionSet_SetHighlightTransparency(HSelectionSet self, float trans) {
    self.SetHighlightTransparency(trans);
  }
  public static long SwigDirector_HSelectionSet_GetSelectionSegment(HSelectionSet self) {
    return self.GetSelectionSegment();
  }
  public static boolean SwigDirector_HSelectionSet_GetIsSelection(HSelectionSet self, long key) {
    return self.GetIsSelection(key);
  }
  public static boolean SwigDirector_HSelectionSet_GetReferenceSelection(HSelectionSet self) {
    return self.GetReferenceSelection();
  }
  public static void SwigDirector_HSelectionSet_SetReferenceSelection(HSelectionSet self, boolean ref_sel) {
    self.SetReferenceSelection(ref_sel);
  }
  public static void SwigDirector_HSelectionSet_SetReferenceSelectionType(HSelectionSet self, int type) {
    self.SetReferenceSelectionType(HRefSelType.swigToEnum(type));
  }
  public static int SwigDirector_HSelectionSet_GetReferenceSelectionType(HSelectionSet self) {
    return (self.GetReferenceSelectionType()).swigValue();
  }
  public static void SwigDirector_HSelectionSet_UpdateHighlightStyle(HSelectionSet self) {
    self.UpdateHighlightStyle();
  }
  public static boolean SwigDirector_HSelectionSet_GetSubentityFaceSelection(HSelectionSet self) {
    return self.GetSubentityFaceSelection();
  }
  public static void SwigDirector_HSelectionSet_SetSubentityFaceSelection(HSelectionSet self, boolean select) {
    self.SetSubentityFaceSelection(select);
  }
  public static boolean SwigDirector_HSelectionSet_GetSubentityEdgeSelection(HSelectionSet self) {
    return self.GetSubentityEdgeSelection();
  }
  public static void SwigDirector_HSelectionSet_SetSubentityEdgeSelection(HSelectionSet self, boolean select) {
    self.SetSubentityEdgeSelection(select);
  }
  public static boolean SwigDirector_HSelectionSet_GetSubentityVertexSelection(HSelectionSet self) {
    return self.GetSubentityVertexSelection();
  }
  public static void SwigDirector_HSelectionSet_SetSubentityVertexSelection(HSelectionSet self, boolean select) {
    self.SetSubentityVertexSelection(select);
  }
  public static void SwigDirector_HSelectionSet_SetAllowSubentityDeselection(HSelectionSet self, boolean allow) {
    self.SetAllowSubentityDeselection(allow);
  }
  public static boolean SwigDirector_HSelectionSet_GetAllowSubentityDeselection(HSelectionSet self) {
    return self.GetAllowSubentityDeselection();
  }
  public static void SwigDirector_HSelectionSet_SetSubentityTracking(HSelectionSet self, boolean allow) {
    self.SetSubentityTracking(allow);
  }
  public static boolean SwigDirector_HSelectionSet_GetSubentityTracking(HSelectionSet self) {
    return self.GetSubentityTracking();
  }
  public static void SwigDirector_HSelectionSet_SetSelectWillNotify(HSelectionSet self, boolean notify) {
    self.SetSelectWillNotify(notify);
  }
  public static boolean SwigDirector_HSelectionSet_GetSelectWillNotify(HSelectionSet self) {
    return self.GetSelectWillNotify();
  }
  public static String SwigDirector_HObject_GetName(HObject self) {
    return self.GetName();
  }
  public static long SwigDirector_HMarkupManager_OpenLayer__SWIG_0(HMarkupManager self, String layername, boolean setcamera, boolean emit_message) {
    return self.OpenLayer(layername, setcamera, emit_message);
  }
  public static long SwigDirector_HMarkupManager_OpenLayer__SWIG_1(HMarkupManager self, String layername, boolean setcamera) {
    return self.OpenLayer(layername, setcamera);
  }
  public static long SwigDirector_HMarkupManager_OpenLayer__SWIG_2(HMarkupManager self, String layername) {
    return self.OpenLayer(layername);
  }
  public static long SwigDirector_HMarkupManager_RenameLayer(HMarkupManager self, long laykey, String new_name) {
    return self.RenameLayer(laykey, new_name);
  }
  public static long SwigDirector_HMarkupManager_CopyLayer(HMarkupManager self, long laykey, String new_name) {
    return self.CopyLayer(laykey, new_name);
  }
  public static boolean SwigDirector_HMarkupManager_GetCamera(HMarkupManager self, long layerkey, long cam) {
    return self.GetCamera(layerkey, new HCamera(cam, false));
  }
  public static long SwigDirector_HMarkupManager_OpenLayer__SWIG_3(HMarkupManager self, long layerkey, boolean setcamera) {
    return self.OpenLayer(layerkey, setcamera);
  }
  public static long SwigDirector_HMarkupManager_OpenLayer__SWIG_4(HMarkupManager self, long layerkey) {
    return self.OpenLayer(layerkey);
  }
  public static long SwigDirector_HMarkupManager_FindLayer(HMarkupManager self, String layername) {
    return self.FindLayer(layername);
  }
  public static String SwigDirector_HMarkupManager_GetLayerNames(HMarkupManager self) {
    return self.GetLayerNames();
  }
  public static long SwigDirector_HMarkupManager_GetCurrentLayerKey(HMarkupManager self) {
    return self.GetCurrentLayerKey();
  }
  public static String SwigDirector_HMarkupManager_GetCurrentLayerName(HMarkupManager self) {
    return self.GetCurrentLayerName();
  }
  public static void SwigDirector_HMarkupManager_DisableCurrentLayer__SWIG_0(HMarkupManager self, boolean emit_message) {
    self.DisableCurrentLayer(emit_message);
  }
  public static void SwigDirector_HMarkupManager_DisableCurrentLayer__SWIG_1(HMarkupManager self) {
    self.DisableCurrentLayer();
  }
  public static void SwigDirector_HMarkupManager_DeleteLayer__SWIG_0(HMarkupManager self, String layername) {
    self.DeleteLayer(layername);
  }
  public static void SwigDirector_HMarkupManager_DeleteLayer__SWIG_1(HMarkupManager self, long layerkey) {
    self.DeleteLayer(layerkey);
  }
  public static float SwigDirector_HMarkupManager_GetMarkupWeight(HMarkupManager self) {
    return self.GetMarkupWeight();
  }
  public static void SwigDirector_HMarkupManager_SetMarkupWeight(HMarkupManager self, float weight) {
    self.SetMarkupWeight(weight);
  }
  public static void SwigDirector_HMarkupManager_GetMarkupColor(HMarkupManager self, long markup_color) {
    self.GetMarkupColor(new HPoint(markup_color, false));
  }
  public static void SwigDirector_HMarkupManager_SetMarkupColor(HMarkupManager self, long markup_color) {
    self.SetMarkupColor(new HPoint(markup_color, false));
  }
  public static void SwigDirector_HMarkupManager_EmitMarkupSegment(HMarkupManager self, long key) {
    self.EmitMarkupSegment(key);
  }
  public static void SwigDirector_HMarkupManager_InsertMarkupSegmentFromMessage(HMarkupManager self, String in_data, int data_length) {
    self.InsertMarkupSegmentFromMessage(in_data, data_length);
  }
  public static void SwigDirector_HMarkupManager_EmitDisableCurrentMarkupLayer(HMarkupManager self) {
    self.EmitDisableCurrentMarkupLayer();
  }
  public static void SwigDirector_HMarkupManager_DisableCurrentMarkupLayerFromMessage(HMarkupManager self, String data, int data_length) {
    self.DisableCurrentMarkupLayerFromMessage(data, data_length);
  }
  public static void SwigDirector_HMarkupManager_EmitSetMarkupLayer(HMarkupManager self, String layer) {
    self.EmitSetMarkupLayer(layer);
  }
  public static void SwigDirector_HMarkupManager_SetMarkupLayerFromMessage(HMarkupManager self, String data, int data_length) {
    self.SetMarkupLayerFromMessage(data, data_length);
  }
  public static void SwigDirector_HMarkupManager_UpdatePreviewImage__SWIG_0(HMarkupManager self, boolean forceUpdate) {
    self.UpdatePreviewImage(forceUpdate);
  }
  public static void SwigDirector_HMarkupManager_UpdatePreviewImage__SWIG_1(HMarkupManager self) {
    self.UpdatePreviewImage();
  }
  public static void SwigDirector_HMarkupManager_SetupNewLayer(HMarkupManager self) {
    self.SetupNewLayer();
  }
  public static void SwigDirector_HMarkupManager_OpenLayerInternal(HMarkupManager self, long layerkey, boolean setcamera) {
    self.OpenLayerInternal(layerkey, setcamera);
  }
  public static void SwigDirector_HUndoItem_Undo__SWIG_0(HUndoItem self, boolean setupOnly) {
    self.Undo(setupOnly);
  }
  public static void SwigDirector_HUndoItem_Undo__SWIG_1(HUndoItem self) {
    self.Undo();
  }
  public static void SwigDirector_HUndoItem_Redo__SWIG_0(HUndoItem self, boolean setupOnly) {
    self.Redo(setupOnly);
  }
  public static void SwigDirector_HUndoItem_Redo__SWIG_1(HUndoItem self) {
    self.Redo();
  }
  public static String SwigDirector_HUndoItem_GetName(HUndoItem self) {
    return self.GetName();
  }
  public static boolean SwigDirector_HTClient_Tick(HTClient self, float request_time, float actual_time) {
    return self.Tick(request_time, actual_time);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
