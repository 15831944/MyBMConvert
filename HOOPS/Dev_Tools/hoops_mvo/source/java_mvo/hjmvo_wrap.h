/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_HJMVO_WRAP_H_
#define SWIG_HJMVO_WRAP_H_

class SwigDirector_HEventListener : public HEventListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HEventListener(JNIEnv *jenv);
    virtual ~SwigDirector_HEventListener();
    virtual HEventListener *CreateListenerManager();
    using HEventListener::m_pEventListenerManager;
    using HEventListener::m_RequestedPriority;
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_HUpdateListener : public HUpdateListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HUpdateListener(JNIEnv *jenv);
    virtual ~SwigDirector_HUpdateListener();
    virtual HEventListener *CreateListenerManager();
    virtual int CameraChangedEvent(HBaseView *param_1);
    virtual int UpdateEvent(bool antialias, bool forceUpdate);
    virtual int ViewDestroyedEvent(HBaseView *param_1);
    virtual int SmoothTransitionFinishedEvent(HBaseView *param_1);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_HFitWorldListener : public HFitWorldListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HFitWorldListener(JNIEnv *jenv);
    virtual ~SwigDirector_HFitWorldListener();
    virtual HEventListener *CreateListenerManager();
    virtual int PreFitWorldEvent(HBaseView *param_1);
    virtual int PostFitWorldEvent(HBaseView *param_1);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_HObjectManipulationListener : public HObjectManipulationListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HObjectManipulationListener(JNIEnv *jenv);
    virtual ~SwigDirector_HObjectManipulationListener();
    virtual HEventListener *CreateListenerManager();
    virtual int SetupHandlesEvent(HBaseView *view, HC_KEY key, bool complex);
    virtual int ObjectBeforeMoveEvent(HBaseView *view, HC_KEY key, HPoint *p);
    virtual int ObjectMovedEvent(HBaseView *view, HC_KEY key, HPoint *p);
    virtual int ObjectScaledEvent(HBaseView *view, HC_KEY key, HPoint &p);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_HSensorListener : public HSensorListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HSensorListener(JNIEnv *jenv);
    virtual ~SwigDirector_HSensorListener();
    virtual HEventListener *CreateListenerManager();
    virtual int SensorActivatedEvent(HBhvSensor *param_1);
    virtual int SensorActionEvent(char const *param_1);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    bool swig_override[3];
};

class SwigDirector_HMouseListener : public HMouseListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HMouseListener(JNIEnv *jenv);
    virtual ~SwigDirector_HMouseListener();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &param_1);
    virtual int OnMouseMove(HEventInfo &param_1);
    virtual int OnLButtonUp(HEventInfo &param_1);
    virtual int OnLButtonDblClk(HEventInfo &param_1);
    virtual int OnMButtonDown(HEventInfo &param_1);
    virtual int OnMButtonUp(HEventInfo &param_1);
    virtual int OnMButtonDblClk(HEventInfo &param_1);
    virtual int OnRButtonDown(HEventInfo &param_1);
    virtual int OnRButtonUp(HEventInfo &param_1);
    virtual int OnRButtonDblClk(HEventInfo &param_1);
    virtual int OnMouseWheel(HEventInfo &param_1);
    virtual int OnKeyDown(HEventInfo &param_1);
    virtual int OnKeyUp(HEventInfo &param_1);
    virtual int OnTouchesDown(HEventInfo &param_1);
    virtual int OnTouchesMove(HEventInfo &param_1);
    virtual int OnTouchesUp(HEventInfo &param_1);
public:
    bool swig_overrides(int n) {
      return (n < 17 ? swig_override[n] : false);
    }
protected:
    bool swig_override[17];
};

class SwigDirector_HJoyStickListener : public HJoyStickListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HJoyStickListener(JNIEnv *jenv);
    virtual ~SwigDirector_HJoyStickListener();
    virtual HEventListener *CreateListenerManager();
    virtual int OnJoyStickRotation(HEventInfo &param_1);
    virtual int OnJoyStickTranslation(HEventInfo &param_1);
    virtual int OnJoyStickButton(HEventInfo &param_1);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_HBaseModel : public HBaseModel, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HBaseModel(JNIEnv *jenv, char const *model = 0);
    virtual ~SwigDirector_HBaseModel();
    virtual void Init();
    virtual void Flush();
    virtual HFileIOResult Read(wchar_t const *FileName, HBaseView *pHView = 0, bool clean_include = true, HInputHandlerOptions *options = 0);
    virtual HFileIOResult Read(char const *FileName, HBaseView *pHView = 0, bool clean_include = true, HInputHandlerOptions *options = 0);
    virtual HFileIOResult WriteWithOptions(wchar_t const *FileName, HBaseView *pHView = 0, HOutputHandlerOptions *options = 0);
    virtual HFileIOResult WriteWithOptions(char const *FileName, HBaseView *pHView = 0, HOutputHandlerOptions *options = 0);
    virtual HFileIOResult Write(wchar_t const *FileName, HBaseView *pHView = 0, float width = 0, float height = 0);
    virtual HFileIOResult Write(char const *FileName, HBaseView *pHView = 0, float width = 0, float height = 0);
    virtual HStreamFileToolkit *GetStreamFileTK() const;
    virtual HC_KEY GetModelKey() const;
    virtual HC_KEY GetModelIncludeKey() const;
    virtual HC_KEY GetBBoxKey() const;
    virtual bool IsBRepGeometry() const;
    virtual void SetBRepGeometry(bool brep);
    virtual bool IsFEAGeometry() const;
    virtual void SetFEAGeometry(bool fea);
    virtual bool IsVectorGeometry() const;
    virtual void SetVectorGeometry(bool vector);
    virtual void CleanIncludes();
    virtual void DeleteIncludedSegments();
    virtual HBhvBehaviorManager *GetBhvBehaviorManager();
    virtual HFileIOResult WriteWithAnimation(wchar_t const *FileName, HBaseView *pHView = 0, float width = 0, float height = 0);
    virtual HFileIOResult WriteWithAnimation(char const *FileName, HBaseView *pHView = 0, float width = 0, float height = 0);
    virtual void CreateIncludeSegment();
    using HBaseModel::m_ModelKey;
    using HBaseModel::m_ModelIncludeKey;
    using HBaseModel::m_BBoxKey;
    using HBaseModel::m_pHFile;
    using HBaseModel::m_pModelInfo;
    using HBaseModel::m_bBRepGeometry;
    using HBaseModel::m_bFEAGeometry;
    using HBaseModel::m_bVectorGeometry;
    using HBaseModel::m_bNeedsStencilBuffer;
    using HBaseModel::m_bFileLoadComplete;
    using HBaseModel::m_bObjectCheck;
    using HBaseModel::m_bFirstFitComplete;
    using HBaseModel::m_pBhvBehaviorManager;
    using HBaseModel::m_pEventManager;
public:
    bool swig_overrides(int n) {
      return (n < 46 ? swig_override[n] : false);
    }
protected:
    bool swig_override[46];
};

class SwigDirector_HBaseView : public HBaseView, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HBaseView(JNIEnv *jenv, HBaseModel *model, char const *alias = 0, char const *driver_type = 0, char const *instance_name = 0, void *window_handle = 0, void *colormap = 0, void *clip_override = 0, void *window_handle_2 = 0, char const *driver_path = 0);
    virtual ~SwigDirector_HBaseView();
    virtual HEventListener *CreateListenerManager();
    virtual int CameraChangedEvent(HBaseView *param_1);
    virtual int UpdateEvent(bool antialias = false, bool forceUpdate = false);
    virtual int ViewDestroyedEvent(HBaseView *param_1);
    virtual int SmoothTransitionFinishedEvent(HBaseView *param_1);
    virtual void Init();
    virtual void FitWorld(HPoint *center_out = 0);
    virtual void FitWorldExact(HPoint *center_out = 0);
    virtual void ZoomToExtents();
    virtual void ZoomToInitialCamera();
    virtual void Update();
    virtual void ForceUpdate();
    virtual HFileIOResult FileInput(wchar_t const *FileName, HInputHandler *handler, HInputHandlerOptions *options = 0);
    virtual HFileIOResult FileInput(char const *FileName, HInputHandler *handler, HInputHandlerOptions *options = 0);
    virtual HFileIOResult FileOutput(wchar_t const *FileName, HOutputHandler *handler, HOutputHandlerOptions *options = 0);
    virtual HFileIOResult FileOutput(char const *FileName, HOutputHandler *handler, HOutputHandlerOptions *options = 0);
    virtual void UpdateHighlighting();
    virtual HBaseModel *GetModel();
    virtual void SetViewMode(ViewMode mode, bool invert = false, bool fitWorld = true);
    virtual void SetHandedness(HandednessMode mode, bool emit_message = false);
    virtual void SetHandednessFromMessage(char const *in_data, unsigned int data_length);
    virtual void SetFontSize(char const *font_size, bool emit_message = false);
    virtual void SetFontSizeFromMessage(char const *in_data, unsigned int data_length);
    virtual void SetZoomLimit();
    virtual void SetAxisMode(AxisMode mode);
    virtual void OnSetAxisMode(AxisMode mode);
    virtual void AdjustAxisWindow(int axis_window_pixels_in = -1, HIntRectangle *rect_in = 0);
    virtual void SetShadowMode(HShadowMode sm, bool saveMode = true);
    virtual void SetReflectionPlane(bool state, float opacity = 0.5, bool fading = true, bool attenuate = false, float hither = 0.0, float yon = 1.0, bool blur = false, int blur_level = 1);
    virtual void DeleteSelectionList(bool emit_message = false);
    virtual void SetWindowColor(HPoint rgb, bool emit_message = false);
    virtual void SetWindowColor(HPoint rgbtop, HPoint rgbbottom, bool emit_message = false);
    virtual void SetWindowColorRange(HPoint rgbtop, HPoint rgbbottom, int percentage, bool emit_message = false);
    virtual void SetWindowMaterial(char const *name, bool emit_message = false);
    virtual void SetWindowColorFromMessage(char const *in_data, unsigned int data_length);
    virtual void CameraPositionChanged(bool emit_message = false, bool smooth_camera_transition = false);
    virtual void PrepareForCameraChange();
    virtual void SetCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, char const *proj);
    virtual void SetInitialCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, char const *proj);
    virtual void GetCamera(HPoint *pos, HPoint *tar, HPoint *up, float &fieldx, float &fieldy, char *proj);
    virtual void SetCamera(HCamera camera);
    virtual void GetCamera(HCamera *camera);
    virtual void SetCameraFromMessage(char const *data, unsigned int data_length);
    virtual void InsertHSFData(char const *segment, char const *in_data, unsigned int data_length, bool emit_message = false);
    virtual void InsertHSFDataFromMessage(char const *in_data, unsigned int data_length);
    virtual void EmitHSFData(char const *segment, char const *in_data, unsigned int data_length);
    virtual void SetRenderMode(HRenderMode NewRenderMode, bool emit_message = false);
    virtual void SetRenderModeFromMessage(char const *in_data, unsigned int data_length);
    virtual void EmitFlushMessage();
    virtual void FlushFromMessage(char const *in_data, unsigned int data_length);
    virtual void Flush(bool emit_message = false);
    virtual void EmitSelectMessage(HC_KEY key, bool isSelect);
    virtual void SelectFromMessage(char const *in_data, unsigned int data_length);
    virtual void EmitDeSelectAllMessage();
    virtual void EmitDeleteSelectionListMessage();
    virtual void DeleteSelectionListFromMessage();
    virtual void DeSelectAllFromMessage();
    virtual void EmitSetModellingMatrixMessage(HC_KEY key);
    virtual void EmitSetModellingMatrixMessage();
    virtual void EmitSegment(HC_KEY key, bool emit_contents_only = false);
    virtual void EmitDeleteByKeyMessage(HC_KEY key);
    virtual void DeleteByKeyFromMessage(char const *in_data, unsigned int data_length);
    virtual void SetModellingMatrixFromMessage(char const *in_data, unsigned int data_length);
    virtual void StartSharedKey();
    virtual void Animate(int animation_steps = 30, HBaseView::HAnimateMode animate_flags = HBaseView::HAnimateScene, int MaxRotation = 360);
    virtual void SetGeometryChanged();
    virtual void ClearGeometryChanged();
    virtual bool GeometryChanged();
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual bool ComputeReasonableTarget(HPoint &new_tar, HPoint const &mouse_win, HPoint const &tar_orig);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual void SetShadowColor(HPoint color);
    virtual void SetShadowLightDirection(bool explicit_light, HPoint const *direction = 0);
    virtual bool GetShadowLightDirection(HPoint *direction = 0);
    virtual void SetShadowIgnoresTransparency(bool ignore);
    virtual bool GetShadowIgnoresTransparency();
    virtual void DoDynamicHighlighting(HPoint mouse_pos);
    virtual void SetShadowResolution(int res);
    virtual void SetShadowBlurring(int blur);
    virtual void InternalUpdate();
    virtual void SetShadowRegenerationMode(bool onoff);
    virtual void SetShadowRegenerationToggle();
    virtual void SetCuttingPlaneRegenerationMode(bool onoff);
    virtual void SetCameraChanged(bool val = true);
    virtual bool GetCameraChanged();
    virtual void SetInvertMouseWheelZoom(bool val = true);
    virtual bool GetInvertMouseWheelZoom();
    virtual void SetAxisManipulateOperator(HOpCameraManipulate *op);
    virtual void SetVisibilitySelectionMode(bool onoff);
    virtual bool GetVisibilitySelectionMode();
    virtual void SetRelatedSelectionLimit(int limit);
    virtual int GetRelatedSelectionLimit();
    virtual void SetDetailSelection(bool onoff);
    virtual bool GetDetailSelectionMode();
    virtual void SetRespectSelectionCulling(bool onoff);
    virtual bool GetRespectSelectionCulling();
    virtual void SmartFilterCircumcuboid(char const *segment, char const *defaults, HPoint *bottomfrontleft, HPoint *topbackright);
    virtual int SetupHandlesEvent(HBaseView *view, HC_KEY key, bool complex);
    virtual bool GetHasObjects();
    virtual void SetHasObjects(bool hasobjects);
    virtual void SetHandleOperator(HBaseOperator *op);
    virtual HBaseOperator *GetHandleOperator();
    virtual float GetDefaultSelectionProximity();
    virtual void SetDefaultSelectionProximity(float selectionproximity);
    virtual int ObjectMovedEvent(HBaseView *view, HC_KEY key, HPoint *pos);
    virtual HSelectionHighlightMode const GetHighlightMode();
    virtual void SetHighlightMode(HSelectionHighlightMode m);
    virtual void SetReferenceSelection(bool use_ref);
    virtual void SetShadowParams(HShadow *shadowObj);
    virtual void SetShadowParamsSwigPublic(HShadow *shadowObj) {
      HBaseView::SetShadowParams(shadowObj);
    }
    virtual void UpdateInternal(bool antialias = false, bool force_update = false);
    virtual void UpdateInternalSwigPublic(bool antialias = false, bool force_update = false) {
      HBaseView::UpdateInternal(antialias,force_update);
    }
    virtual void SetupLights();
    virtual void SetupLightsSwigPublic() {
      HBaseView::SetupLights();
    }
    using HBaseView::m_FakeHLRStyle;
    using HBaseView::m_FakeHLRSource;
    using HBaseView::m_bCPLineVisibility;
    using HBaseView::m_bCPFaceVisibility;
    using HBaseView::m_CPMode;
    using HBaseView::m_bCuttingPlanesExist;
    using HBaseView::m_bCuttingPlanesVisibility;
    using HBaseView::m_bSpritingAllowed;
    using HBaseView::m_bAxisTriadTransparencyAllowed;
    using HBaseView::m_AxisWindowSize;
    using HBaseView::m_bForceFastHiddenLine;
    using HBaseView::m_bLineAntialiasing;
    using HBaseView::m_bTextAntialiasing;
    using HBaseView::m_bBeginShellSelection;
    using HBaseView::m_bDisplayHandlesOnDblClk;
    using HBaseView::m_has_initial_view;
    using HBaseView::m_TouchManager;
    using HBaseView::m_HardwareAntialiasing;
    using HBaseView::m_IsoDefault;
    using HBaseView::m_HighlightMode;
    using HBaseView::m_DisplayListType;
    using HBaseView::m_bGeometryChanged;
    using HBaseView::m_SceneBoundingMin;
    using HBaseView::m_SceneBoundingMax;
    using HBaseView::m_bSceneBoundingSet;
    using HBaseView::m_bFastFitWorld;
    using HBaseView::m_bDetailedFitWorld;
    using HBaseView::m_pHImCuttingGeometry;
    using HBaseView::m_pAntialiasing;
    using HBaseView::m_pMarkupManager;
    using HBaseView::m_bAxisMode;
    using HBaseView::m_bHideOverlappedText;
    using HBaseView::m_bNavCube;
    using HBaseView::m_bSmoothTransition;
    using HBaseView::m_SmoothTransitionDuration;
    using HBaseView::m_bLightFollowsCamera;
    using HBaseView::m_WindowColorPercentage;
    using HBaseView::m_FrontAxis;
    using HBaseView::m_TopAxis;
    using HBaseView::m_pModel;
    using HBaseView::m_ViewKey;
    using HBaseView::m_SceneKey;
    using HBaseView::m_OverwriteKey;
    using HBaseView::m_BBoxGeometryKey;
    using HBaseView::m_WindowspaceKey;
    using HBaseView::m_ConstructionKey;
    using HBaseView::m_CuttingPlanesKey;
    using HBaseView::m_CuttingPlaneGeomKey;
    using HBaseView::m_IntersectPolylinesKey;
    using HBaseView::m_AxisTriadKey;
    using HBaseView::m_ProgressBarKey;
    using HBaseView::m_InfoTextKey;
    using HBaseView::m_lIncludeLinkKey;
    using HBaseView::m_LightsKey;
    using HBaseView::m_RenderMode;
    using HBaseView::m_ViewMode;
    using HBaseView::m_pOperator;
    using HBaseView::m_pEvent;
    using HBaseView::m_pSelection;
    using HBaseView::m_pHighlight;
    using HBaseView::m_pConstantFrameRate;
    using HBaseView::m_ShadowMode;
    using HBaseView::m_pSharedKey;
    using HBaseView::m_UpdateInterrupted;
    using HBaseView::m_InUpdateInternal;
    using HBaseView::m_pfEventChecker;
    using HBaseView::m_pfKeyState;
    using HBaseView::m_ViewUpdateMode;
    using HBaseView::m_bUpdateRequested;
    using HBaseView::m_pEventManager;
    using HBaseView::m_pUndoManager;
    using HBaseView::m_pObjectManager;
    using HBaseView::m_pDebugZBuffer;
    using HBaseView::m_bLButtonDown;
    using HBaseView::m_bMouseMove;
    using HBaseView::m_pManipulateOperator;
    using HBaseView::m_bShadowRegeneration;
    using HBaseView::m_bShadowRegenerationToggle;
    using HBaseView::m_bCuttingPlaneRegeneration;
    using HBaseView::m_bCameraChanged;
    using HBaseView::m_IdleTime;
    using HBaseView::m_bFirstUpdate;
    using HBaseView::m_pHandleOperator;
    using HBaseView::m_bAllowInteractiveShadows;
    using HBaseView::m_bAllowInteractiveCutGeometry;
    using HBaseView::m_DefaultSelectionProximity;
    using HBaseView::m_MaximumUpdateTime;
    using HBaseView::m_InitialCamera;
    using HBaseView::m_bInitialCameraSet;
    using HBaseView::m_bRecordCamera;
    using HBaseView::m_bTransparentSelectionBox;
    using HBaseView::m_bInvertMouseWheelZoom;
    using HBaseView::m_AnnotationCookie;
    using HBaseView::m_AxisResizeCookie;
    using HBaseView::m_FramerateMode;
    using HBaseView::m_bSplatRendering;
    using HBaseView::m_SplatSize;
    using HBaseView::m_SplatSymbol;
    using HBaseView::m_FocusedOnSelection;
    using HBaseView::ComputeShadowParams;
    using HBaseView::AdjustShadowPlane;
    using HBaseView::SetShadowParams;
    using HBaseView::RefreshViewSize;
    using HBaseView::QueryDeviceCapabilities;
public:
    bool swig_overrides(int n) {
      return (n < 160 ? swig_override[n] : false);
    }
protected:
    bool swig_override[160];
};

class SwigDirector_HDB : public HDB, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HDB(JNIEnv *jenv);
    virtual ~SwigDirector_HDB();
    virtual void Init();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_HBaseOperator : public HBaseOperator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HBaseOperator(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HBaseOperator();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HBaseOperator::m_bOpStarted;
    using HBaseOperator::m_doRepeat;
    using HBaseOperator::m_doCapture;
    using HBaseOperator::m_ptFirst;
    using HBaseOperator::m_ptNew;
    using HBaseOperator::m_pView;
    using HBaseOperator::m_bMapTouchesToMouseEvents;
    using HBaseOperator::IsSpecialKey;
    using HBaseOperator::m_TempShadowMode;
    using HBaseOperator::m_TempCutGeometryVisibility;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HIONoticeCallback : public HIONoticeCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HIONoticeCallback(JNIEnv *jenv);
    virtual ~SwigDirector_HIONoticeCallback();
    virtual void Notice(char const *notice);
    virtual void Notice(wchar_t const *notice);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_HIOPercentNoticeCallback : public HIOPercentNoticeCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HIOPercentNoticeCallback(JNIEnv *jenv);
    virtual ~SwigDirector_HIOPercentNoticeCallback();
    virtual void Notice(float notice);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_HOpObjectTranslate : public HOpObjectTranslate, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpObjectTranslate(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpObjectTranslate();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void UpdateKeyList(void *data);
    using HOpObjectTranslate::Init;
    using HOpObjectTranslate::Cleanup;
    using HOpObjectTranslate::GetMatrix;
    using HOpObjectTranslate::UpdateMousePos;
    using HOpObjectTranslate::m_bTemporarySelection;
    using HOpObjectTranslate::m_bInitialMatrix;
    using HOpObjectTranslate::m_ptLast;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructCircle : public HOpConstructCircle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructCircle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1, bool UseCenterMarker = true);
    virtual ~SwigDirector_HOpConstructCircle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructCircle::m_radius;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructCone : public HOpConstructCone, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructCone(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructCone();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructCone::m_height;
    using HOpConstructCone::m_RadiusLength;
    using HOpConstructCone::m_WorldRadiusVector;
    using HOpConstructCone::ConstructWireframeCone;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructCuboid : public HOpConstructCuboid, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructCuboid(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructCuboid();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void CreateCuboid(HPoint const &last);
    virtual void CreateSquare(HPoint const &first, HPoint const &last);
    using HOpConstructCuboid::m_ptEdge;
public:
    bool swig_overrides(int n) {
      return (n < 28 ? swig_override[n] : false);
    }
protected:
    bool swig_override[28];
};

class SwigDirector_HOpConstructCylinder : public HOpConstructCylinder, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructCylinder(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructCylinder();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructCylinder::m_height;
    using HOpConstructCylinder::m_RadiusLength;
    using HOpConstructCylinder::m_WorldRadiusVector;
    using HOpConstructCylinder::ConstructWireframeCylinder;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructNurbsCurve : public HOpConstructNurbsCurve, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructNurbsCurve(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructNurbsCurve();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructNurbsCurve::m_Degree;
    using HOpConstructNurbsCurve::m_StartU;
    using HOpConstructNurbsCurve::m_EndU;
    using HOpConstructNurbsCurve::m_bFirstTimeThrough;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructPolyline : public HOpConstructPolyline, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructPolyline(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructPolyline();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructPolyline::m_ptLast;
    using HOpConstructPolyline::m_pPolyline;
    using HOpConstructPolyline::m_PolylineCount;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructRectangle : public HOpConstructRectangle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructRectangle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1, bool UseCenterMarker = true);
    virtual ~SwigDirector_HOpConstructRectangle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructRectangle::m_bRectangleExists;
    using HOpConstructRectangle::m_pSavedVisibility;
    using HOpConstructRectangle::m_pSavedColor;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpConstructSphere : public HOpConstructSphere, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpConstructSphere(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpConstructSphere();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpConstructSphere::m_radius;
    using HOpConstructSphere::ConstructWireframeSphere;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateBoolean : public HOpCreateBoolean, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateBoolean(JNIEnv *jenv, HBaseView *view, int nBooleanType, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateBoolean();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateCircle : public HOpCreateCircle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateCircle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1, bool UseCenterMarker = true);
    virtual ~SwigDirector_HOpCreateCircle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateCone : public HOpCreateCone, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateCone(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateCone();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateCuboid : public HOpCreateCuboid, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateCuboid(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateCuboid();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void CreateCuboid(HPoint const &last);
    virtual void CreateSquare(HPoint const &first, HPoint const &last);
public:
    bool swig_overrides(int n) {
      return (n < 28 ? swig_override[n] : false);
    }
protected:
    bool swig_override[28];
};

class SwigDirector_HOpCreateCuttingPlane : public HOpCreateCuttingPlane, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateCuttingPlane(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateCuttingPlane();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void UpdateKeyList(void *data);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateCylinder : public HOpCreateCylinder, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateCylinder(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateCylinder();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateNurbs3D : public HOpCreateNurbs3D, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateNurbs3D(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateNurbs3D();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateNurbsCurve : public HOpCreateNurbsCurve, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateNurbsCurve(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateNurbsCurve();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreatePolyline : public HOpCreatePolyline, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreatePolyline(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreatePolyline();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateRectangle : public HOpCreateRectangle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateRectangle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1, bool UseCenterMarker = true);
    virtual ~SwigDirector_HOpCreateRectangle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCreateSphere : public HOpCreateSphere, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCreateSphere(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCreateSphere();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraManipulate : public HOpCameraManipulate, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraManipulate(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1, HBaseOperator *orbit = 0, HBaseOperator *pan = 0, HBaseOperator *zoom = 0, HBaseOperator *relative = 0, bool AllowHandleActivation = false);
    virtual ~SwigDirector_HOpCameraManipulate();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpCameraManipulate::m_pDblClkTimer;
    using HOpCameraManipulate::m_pOrbitOperator;
    using HOpCameraManipulate::m_pRelativeOrbitOperator;
    using HOpCameraManipulate::m_pPanOperator;
    using HOpCameraManipulate::m_pZoomOperator;
    using HOpCameraManipulate::m_ptRealOld;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraOrbit : public HOpCameraOrbit, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraOrbit(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraOrbit();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpCameraOrbit::m_bLightFollowsCamera;
    using HOpCameraOrbit::m_bSceneBoundingBoxVis;
    using HOpCameraOrbit::m_bSingleClick;
    using HOpCameraOrbit::m_ptRealOld;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraOrbitTurntable : public HOpCameraOrbitTurntable, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraOrbitTurntable(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraOrbitTurntable();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpCameraOrbitTurntable::RotateAroundAxis;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraPan : public HOpCameraPan, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraPan(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraPan();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraRelativeOrbit : public HOpCameraRelativeOrbit, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraRelativeOrbit(JNIEnv *jenv, HBaseView *view, int doRepeat = 0, int doCapture = 1);
    virtual ~SwigDirector_HOpCameraRelativeOrbit();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraWalk : public HOpCameraWalk, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraWalk(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraWalk();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpCameraWalk::SnapToGround;
    using HOpCameraWalk::AdjustCameraCollision;
    using HOpCameraWalk::AdjustHeight;
    using HOpCameraWalk::signal_callback;
    using HOpCameraWalk::ReadjustPosition;
    using HOpCameraWalk::SetupControls;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraZoom : public HOpCameraZoom, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraZoom(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraZoom();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpCameraZoomBox : public HOpCameraZoomBox, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpCameraZoomBox(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpCameraZoomBox();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpCameraZoomBox::ComputeReasonableTarget;
    using HOpCameraZoomBox::ComputeNewField;
    using HOpCameraZoomBox::m_LightFollowsCamera;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupAnnotate : public HOpMarkupAnnotate, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupAnnotate(JNIEnv *jenv, HBaseView *view, bool bAddToLayer = false, int DoRepeat = 0, int DoCapture = 1, bool create_new_notes = true);
    virtual ~SwigDirector_HOpMarkupAnnotate();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpMarkupAnnotate::m_iBackgroundType;
    using HOpMarkupAnnotate::GetBackgroundType;
    using HOpMarkupAnnotate::SetBackgroundType;
    using HOpMarkupAnnotate::m_pNoteKey;
    using HOpMarkupAnnotate::GetNoteKey;
    using HOpMarkupAnnotate::SetNoteKey;
    using HOpMarkupAnnotate::m_Annotation;
    using HOpMarkupAnnotate::GetAnnotation;
    using HOpMarkupAnnotate::SetAnnotation;
    using HOpMarkupAnnotate::m_bAddToLayer;
    using HOpMarkupAnnotate::GetAddToLayer;
    using HOpMarkupAnnotate::SetAddToLayer;
    using HOpMarkupAnnotate::m_bTouchedText;
    using HOpMarkupAnnotate::GetTouchedText;
    using HOpMarkupAnnotate::SetTouchedText;
    using HOpMarkupAnnotate::m_bHideOverlappedText;
    using HOpMarkupAnnotate::GetHideOverlappedText;
    using HOpMarkupAnnotate::SetHideOverlappedText;
    using HOpMarkupAnnotate::m_bCreateNewNotes;
    using HOpMarkupAnnotate::GetCreateNewNotes;
    using HOpMarkupAnnotate::SetCreateNewNotes;
    using HOpMarkupAnnotate::StartOp;
    using HOpMarkupAnnotate::EndOp;
    using HOpMarkupAnnotate::TransmitMarkupSegment;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupCircle : public HOpMarkupCircle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupCircle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMarkupCircle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupFreehand : public HOpMarkupFreehand, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupFreehand(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMarkupFreehand();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpMarkupFreehand::m_ptLast;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupMeasure : public HOpMarkupMeasure, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupMeasure(JNIEnv *jenv, HBaseView *view, bool AddToLayer = false, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMarkupMeasure();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpMarkupMeasure::StartOp;
    using HOpMarkupMeasure::EndOp;
    using HOpMarkupMeasure::m_Annotation;
    using HOpMarkupMeasure::m_iBackgroundType;
    using HOpMarkupMeasure::m_bAddToLayer;
    using HOpMarkupMeasure::m_bNewNote;
    using HOpMarkupMeasure::m_bTouchedText;
    using HOpMarkupMeasure::m_bHideOverlappedText;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupPostIt : public HOpMarkupPostIt, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupPostIt(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMarkupPostIt();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMarkupRectangle : public HOpMarkupRectangle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMarkupRectangle(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMarkupRectangle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpMoveHandle : public HOpMoveHandle, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpMoveHandle(JNIEnv *jenv, HBaseView *view, bool allowSelect = true, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpMoveHandle();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpMoveHandle::m_pHandleKey;
    using HOpMoveHandle::m_pObjectKey;
    using HOpMoveHandle::m_bAllowSelect;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpNavCube : public HOpNavCube, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpNavCube(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpNavCube();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpNetwork : public HOpNetwork, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpNetwork(JNIEnv *jenv, HBaseView *view);
    virtual ~SwigDirector_HOpNetwork();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpNetwork::m_NetworkKey;
    using HOpNetwork::m_NodesKey;
    using HOpNetwork::m_SelectedNodeKey;
    using HOpNetwork::m_SelectedLineKey;
    using HOpNetwork::My_KInsert_Line;
    using HOpNetwork::My_Line_Common;
    using HOpNetwork::My_Edit_Line;
    using HOpNetwork::My_Delete_Line;
    using HOpNetwork::My_KInsert_Node;
    using HOpNetwork::My_Edit_Node;
    using HOpNetwork::Show_Node_Position;
    using HOpNetwork::Get_Node_Key;
    using HOpNetwork::My_Open_Node;
    using HOpNetwork::My_Close_Node;
    using HOpNetwork::My_Renumber_Key;
    using HOpNetwork::GetNextKey;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpObjectAnnotate : public HOpObjectAnnotate, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpObjectAnnotate(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpObjectAnnotate();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpObjectAnnotate::finalize_text;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpObjectClash : public HOpObjectClash, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpObjectClash(JNIEnv *jenv, HBaseView *view, int doRepeat = 0, int doCapture = 1);
    virtual ~SwigDirector_HOpObjectClash();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void UpdateKeyList(void *data);
    virtual int SelectByScreenVolume(HSmartSelItem *sel_item);
    virtual int SelectByScreenVolumeSwigPublic(HSmartSelItem *sel_item) {
      return HOpObjectClash::SelectByScreenVolume(sel_item);
    }
    virtual int SelectByWorldVolume(HSmartSelItem *sel_item);
    virtual int SelectByWorldVolumeSwigPublic(HSmartSelItem *sel_item) {
      return HOpObjectClash::SelectByWorldVolume(sel_item);
    }
    virtual int SelectByEnclosure(HSmartSelItem *sel_item);
    virtual int SelectByEnclosureSwigPublic(HSmartSelItem *sel_item) {
      return HOpObjectClash::SelectByEnclosure(sel_item);
    }
    virtual int SelectByShell(HSmartSelItem *sel_item);
    virtual int SelectByShellSwigPublic(HSmartSelItem *sel_item) {
      return HOpObjectClash::SelectByShell(sel_item);
    }
    using HOpObjectClash::IntersectPolyline;
    using HOpObjectClash::ProcessSelectionResults;
    using HOpObjectClash::TestEnclosure;
    using HOpObjectClash::GetScreenVolume;
    using HOpObjectClash::SetSelectMode;
    using HOpObjectClash::GetWorldVolume;
    using HOpObjectClash::GrabSelectionSet;
    using HOpObjectClash::RestoreSelectionSet;
    using HOpObjectClash::m_save_spriting_mode;
    using HOpObjectClash::m_pClashSelection;
    using HOpObjectClash::m_SelectMode;
    using HOpObjectClash::m_IntersectPolylinesVisible;
    using HOpObjectClash::m_TempSegKey;
    using HOpObjectClash::ClashDetect;
public:
    bool swig_overrides(int n) {
      return (n < 30 ? swig_override[n] : false);
    }
protected:
    bool swig_override[30];
};

class SwigDirector_HOpObjectRotate : public HOpObjectRotate, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpObjectRotate(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpObjectRotate();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    using HOpObjectRotate::m_ptCentroid;
    using HOpObjectRotate::m_ptCentroidWorld;
    using HOpObjectRotate::m_ptCentroidViewpoint;
    using HOpObjectRotate::m_radius;
    using HOpObjectRotate::m_bTemporarySelection;
    using HOpObjectRotate::m_bInitialMatrix;
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpSelectArea : public HOpSelectArea, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpSelectArea(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpSelectArea();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpSelectAperture : public HOpSelectAperture, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpSelectAperture(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpSelectAperture();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
    virtual void HandleSelection(HEventInfo &hevent);
    virtual void HandleSelectionSwigPublic(HEventInfo &hevent) {
      HOpSelectAperture::HandleSelection(hevent);
    }
public:
    bool swig_overrides(int n) {
      return (n < 27 ? swig_override[n] : false);
    }
protected:
    bool swig_override[27];
};

class SwigDirector_HOpSelectPolygon : public HOpSelectPolygon, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpSelectPolygon(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpSelectPolygon();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HOpSelectPolyline : public HOpSelectPolyline, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HOpSelectPolyline(JNIEnv *jenv, HBaseView *view, int DoRepeat = 0, int DoCapture = 1);
    virtual ~SwigDirector_HOpSelectPolyline();
    virtual HEventListener *CreateListenerManager();
    virtual int OnLButtonDown(HEventInfo &hevent);
    virtual int OnMouseMove(HEventInfo &hevent);
    virtual int OnLButtonUp(HEventInfo &hevent);
    virtual int OnLButtonDblClk(HEventInfo &hevent);
    virtual int OnMButtonDown(HEventInfo &hevent);
    virtual int OnMButtonUp(HEventInfo &hevent);
    virtual int OnMButtonDblClk(HEventInfo &hevent);
    virtual int OnRButtonDown(HEventInfo &hevent);
    virtual int OnRButtonUp(HEventInfo &hevent);
    virtual int OnRButtonDblClk(HEventInfo &hevent);
    virtual int OnMouseWheel(HEventInfo &hevent);
    virtual int OnKeyDown(HEventInfo &hevent);
    virtual int OnKeyUp(HEventInfo &hevent);
    virtual int OnTouchesDown(HEventInfo &hevent);
    virtual int OnTouchesMove(HEventInfo &hevent);
    virtual int OnTouchesUp(HEventInfo &hevent);
    virtual HBaseOperator *Clone();
    virtual bool OperatorStarted();
    virtual char const *GetName();
    virtual int OnLButtonDownAndMove(HEventInfo &hevent);
    virtual int OnMButtonDownAndMove(HEventInfo &hevent);
    virtual int OnRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnLRButtonDownAndMove(HEventInfo &hevent);
    virtual int OnNoButtonDownAndMove(HEventInfo &hevent);
    virtual int OnTimer(HEventInfo &hevent);
public:
    bool swig_overrides(int n) {
      return (n < 26 ? swig_override[n] : false);
    }
protected:
    bool swig_override[26];
};

class SwigDirector_HSelectionSet : public HSelectionSet, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HSelectionSet(JNIEnv *jenv, HBaseView *view, bool bReferenceSelection = false);
    virtual void UpdateTransparency(bool force_flush = false);
    virtual void UpdateTransparencySwigPublic(bool force_flush = false) {
      HSelectionSet::UpdateTransparency(force_flush);
    }
    virtual ~SwigDirector_HSelectionSet();
    virtual void Init();
    virtual void Select(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message = false);
    virtual void Select(HSelectionItem *new_sel, bool emit_message = false);
    virtual void SelectRegion(HShellObject const &oShell, int num_include_keys, HC_KEY include_keys[], int region, bool emit_message);
    virtual void SelectSubentity(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[] = 0, int const vertex1[] = 0, int const vertex2[] = 0, bool emit_message = false);
    virtual void Select(HC_KEY key, char const *segpath, HC_KEY include_key, HC_KEY includer_key, bool emit_message = false);
    virtual void DeSelect(HC_KEY key, bool emit_message = false);
    virtual void DeSelect(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message = false);
    virtual void DeSelect(HSelectionItem *remove_sel, bool emit_message = false);
    virtual void DeSelectRegion(HShellObject const &oShell, int region, bool emit_messag);
    virtual void DeSelectRegion(HShellObject const &oShell, int num_include_keys, HC_KEY include_keys[], int region, bool emit_message = false);
    virtual void DeSelectSubentity(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[], int const vertex1[], int const vertex2[], bool emit_message = false);
    virtual bool SelectSubentityOOC(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[] = 0, int const vertex1[] = 0, int const vertex2[] = 0, bool emit_message = false);
    virtual bool DeSelectOOC(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message = false);
    virtual bool HighlightRegionEdges();
    virtual void HighlightRegionEdges(bool yesno);
    virtual bool HighlightAnnotations();
    virtual void HighlightAnnotations(bool yesno);
    virtual HRegionEdgeHighlightMode HighlightRegionEdgesAutoVisibility();
    virtual void HighlightRegionEdgesAutoVisibility(bool yesno);
    virtual void HighlightRegionEdgesAutoVisibility(HRegionEdgeHighlightMode edge_state);
    virtual void HighlightRegionFacesAutoVisibility(HRegionFaceHighlightMode face_state);
    virtual HRegionFaceHighlightMode HighlightRegionFacesAutoVisibility();
    virtual void DeSelectAll();
    virtual bool IsSelected(HC_KEY key) const;
    virtual bool IsSelected(HC_KEY key, int num_include_keys, HC_KEY const include_keys[]) const;
    virtual bool IsSelected(HSelectionItem const *item) const;
    virtual bool IsRegionSelected(HC_KEY key, int num_include_keys, HC_KEY const include_keys[], int region) const;
    virtual bool IsHighlightSegment(HC_KEY segment_key) const;
    virtual void SetSelectionFaceColor(HPixelRGBA &rgba);
    virtual void SetGrayScale(bool grayScale);
    virtual void SetInvisible(bool Invisible);
    virtual bool GetInvisible();
    virtual void SetAllowDisplacement(bool allowDisplacement);
    virtual bool GetAllowDisplacement();
    virtual HSelList *GetSelectionList();
    virtual void GetSelectionFaceColor(HPixelRGBA &rgba);
    virtual void SetSelectionEdgeColor(HPixelRGBA &rgb);
    virtual void GetSelectionEdgeColor(HPixelRGBA &rgba);
    virtual void SetSelectionCutEdgeColor(HPixelRGBA &rgb);
    virtual void GetSelectionCutEdgeColor(HPixelRGBA &rgba);
    virtual void SetSelectionCutFaceColor(HPixelRGBA &rgb);
    virtual void GetSelectionCutFaceColor(HPixelRGBA &rgba);
    virtual void SetSelectionMarkerColor(HPixelRGBA &rgb);
    virtual void GetSelectionMarkerColor(HPixelRGBA &rgba);
    virtual void SetSelectionEdgeWeight(float weight);
    virtual float GetSelectionEdgeWeight();
    virtual void SetSelectionMarkerSize(float size);
    virtual float GetSelectionMarkerSize();
    virtual HC_KEY GetAt(unsigned int index);
    virtual bool GetAll(HC_KEY out_array[]);
    virtual void Reset();
    virtual bool DeleteSelection(bool emit_message = false);
    virtual bool GetSubwindowPenetration();
    virtual void SetSubwindowPenetration(bool allow);
    virtual bool GetAllowSubentitySelection();
    virtual void SetAllowSubentitySelection(bool allow);
    virtual HSelectLevel GetSelectionLevel() const;
    virtual void SetSelectionLevel(HSelectLevel level);
    virtual bool GetAllowEntitySelection();
    virtual void SetAllowEntitySelection(bool allow);
    virtual bool GetAllowRegionSelection() const;
    virtual void SetAllowRegionSelection(bool allow);
    virtual HSelectionHighlightMode const GetHighlightMode();
    virtual void SetHighlightMode(HSelectionHighlightMode m);
    virtual void SetHighlightTransparency(float trans);
    virtual HC_KEY GetSelectionSegment();
    virtual bool GetIsSelection(HC_KEY key);
    virtual bool GetReferenceSelection() const;
    virtual void SetReferenceSelection(bool ref_sel);
    virtual void SetReferenceSelectionType(HRefSelType type);
    virtual HRefSelType GetReferenceSelectionType();
    virtual void UpdateHighlightStyle();
    virtual bool GetSubentityFaceSelection();
    virtual void SetSubentityFaceSelection(bool select);
    virtual bool GetSubentityEdgeSelection();
    virtual void SetSubentityEdgeSelection(bool select);
    virtual bool GetSubentityVertexSelection();
    virtual void SetSubentityVertexSelection(bool select);
    virtual void SetAllowSubentityDeselection(bool allow);
    virtual bool GetAllowSubentityDeselection();
    virtual void SetSubentityTracking(bool allow);
    virtual bool GetSubentityTracking();
    virtual void SetSelectWillNotify(bool notify);
    virtual bool GetSelectWillNotify() const;
    using HSelectionSet::m_pView;
    using HSelectionSet::m_pSelItemsList;
    using HSelectionSet::m_pHighlightSegsHash;
    using HSelectionSet::m_SelectionSegment;
    using HSelectionSet::m_TransparencyStyle;
    using HSelectionSet::m_selectedFaceColor;
    using HSelectionSet::m_selectedEdgeColor;
    using HSelectionSet::m_selectedCutEdgeColor;
    using HSelectionSet::m_selectedCutFaceColor;
    using HSelectionSet::m_selectedMarkerColor;
    using HSelectionSet::m_fselectedEdgeWeight;
    using HSelectionSet::m_fselectedMarkerSize;
    using HSelectionSet::m_bForceGrayScale;
    using HSelectionSet::m_bForceInvisible;
    using HSelectionSet::m_bAllowDisplacement;
    using HSelectionSet::m_bHighlightRegionEdges;
    using HSelectionSet::m_bHighlightAnnotations;
    using HSelectionSet::m_bHighlightRegionEdgesAutoVisibility;
    using HSelectionSet::m_bHighlightRegionFacesAutoVisibility;
    using HSelectionSet::m_HighlightMode;
    using HSelectionSet::m_fTransmission;
    using HSelectionSet::m_bSortSelectionList;
    using HSelectionSet::m_bNotify;
    using HSelectionSet::m_bUseDefinedHighlight;
public:
    bool swig_overrides(int n) {
      return (n < 104 ? swig_override[n] : false);
    }
protected:
    bool swig_override[104];
};

class SwigDirector_HObject : public HObject, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HObject(JNIEnv *jenv);
    virtual ~SwigDirector_HObject();
    virtual char const *GetName();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_HMarkupManager : public HMarkupManager, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HMarkupManager(JNIEnv *jenv, HBaseView *view);
    virtual ~SwigDirector_HMarkupManager();
    virtual HC_KEY OpenLayer(char const *layername, bool setcamera = true, bool emit_message = true);
    virtual HC_KEY RenameLayer(HC_KEY laykey, char const *new_name);
    virtual HC_KEY CopyLayer(HC_KEY laykey, char const *new_name);
    virtual bool GetCamera(HC_KEY layerkey, HCamera &cam) const;
    virtual HC_KEY OpenLayer(HC_KEY layerkey, bool setcamera = true);
    virtual HC_KEY FindLayer(char const *layername) const;
    virtual char const *GetLayerNames() const;
    virtual HC_KEY GetCurrentLayerKey() const;
    virtual char const *GetCurrentLayerName() const;
    virtual void DisableCurrentLayer(bool emit_message = true);
    virtual void DeleteLayer(char const *layername);
    virtual void DeleteLayer(HC_KEY layerkey);
    virtual float GetMarkupWeight();
    virtual void SetMarkupWeight(float weight);
    virtual void GetMarkupColor(HPoint &markup_color);
    virtual void SetMarkupColor(HPoint markup_color);
    virtual void EmitMarkupSegment(HC_KEY key);
    virtual void InsertMarkupSegmentFromMessage(char const *in_data, unsigned int data_length);
    virtual void EmitDisableCurrentMarkupLayer();
    virtual void DisableCurrentMarkupLayerFromMessage(char const *data, unsigned int data_length);
    virtual void EmitSetMarkupLayer(char const *layer);
    virtual void SetMarkupLayerFromMessage(char const *data, unsigned int data_length);
    virtual void UpdatePreviewImage(bool forceUpdate = false);
    virtual void SetupNewLayer();
    virtual void SetupNewLayerSwigPublic() {
      HMarkupManager::SetupNewLayer();
    }
    virtual void OpenLayerInternal(HC_KEY layerkey, bool setcamera);
    virtual void OpenLayerInternalSwigPublic(HC_KEY layerkey, bool setcamera) {
      HMarkupManager::OpenLayerInternal(layerkey,setcamera);
    }
    using HMarkupManager::m_pHView;
    using HMarkupManager::m_ActiveLayerKey;
    using HMarkupManager::m_ActiveLayerName;
    using HMarkupManager::m_DefaultLayerKey;
    using HMarkupManager::m_MarkupKey;
    using HMarkupManager::m_MarkupLayerKey;
    using HMarkupManager::m_MarkupColor;
    using HMarkupManager::m_fMarkupWeight;
    using HMarkupManager::m_allNames;
    using HMarkupManager::m_bGeneratePreviewImage;
public:
    bool swig_overrides(int n) {
      return (n < 30 ? swig_override[n] : false);
    }
protected:
    bool swig_override[30];
};

class SwigDirector_HUndoItem : public HUndoItem, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HUndoItem(JNIEnv *jenv);
    virtual ~SwigDirector_HUndoItem();
    virtual void Undo(bool setupOnly = false);
    virtual void Redo(bool setupOnly = false);
    virtual char const *GetName();
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_HTClient : public HTClient, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HTClient(JNIEnv *jenv, float interval = 0.1, HTCStyle style = HTCS_Invalid, HTClientTickFunction tick_function = 0, void *user_data = 0);
    virtual ~SwigDirector_HTClient();
    virtual bool Tick(float request_time, float actual_time);
    using HTClient::mt_style;
    using HTClient::mt_interval;
    using HTClient::mt_next_request;
    using HTClient::mt_priority;
    using HTClient::mt_user_data;
    using HTClient::mt_tick_function;
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
