// Copyright (c) Tech Soft 3D
//
// The information contained herein is confidential and proprietary to Tech Soft 3D, Inc.,
// and considered a trade secret as defined under civil and criminal statutes.
// Tech Soft 3D, Inc. shall pursue its civil and criminal remedies in the event of
// unauthorized use or misappropriation of its trade secrets.  Use of this information
// by anyone other than authorized employees of Tech Soft 3D, Inc. is granted only under
// a written non-disclosure agreement, expressly prescribing the scope and manner of such use.

// HOpConstructCuboid.h : interface of the HOpCreateCuboid class
// Creates a cuboid using left mouse down and drag

#ifndef _HOPCONSTRUCTCUBOID_H
#define _HOPCONSTRUCTCUBOID_H

#ifdef H_PACK_8
#pragma pack(push)
#pragma pack(8)
#endif

#include "HTools.h"
#include "HBaseOperator.h"

//! The HOpConstructCuboid class creates a rectangular cube.
/*! 
  HOpConstructCuboid implements four of the mouse event handlers defined on the base class and uses the event information to 
  create a cuboid. This provides the basic functionality for creating a temporary three-dimensional, six-sided 
  cuboid or rectangular box.  The cuboid that is generated includes two square faces with the same length and width while the depth is variable. The 
  operation consists of the following steps:
  <ol>
  <li>Left Button Down:				The first point of square base.
  <li>Left Button Down and Drag:	Rubberband the base to the desired dimensions.
  <li>Left Button Up:				The base of the cuboid dimension is finalized.
  <li>No Button Down and Drag:		Rubberband the cuboid to the desired height.
  <li>Left Button Down:				The height of the cuboid finalized and the operation ends.
  </ol>
  More Detailed Description: see event methods. 
*/
class MVO_API  HOpConstructCuboid : public HBaseOperator
{
protected:
	HPoint  m_ptEdge;			/*!< The edge of the cube.  */	
	HPoint	m_ptPointList[8];	/*!< The array of points for cuboid shell. */
	int		m_FaceList[30];		/*!< The facelist for the shell. */

public:
	/*!
	  Constructs an HOpConstructCuboid object.
	  \param view A pointer to an HBaseView object.
	  \param DoRepeat An integer denoting whether this is a repeatable operator.  This parameter has been deprecated.
	  \param DoCapture An integer denoting whether the mouse state should be captured, which means that all mouse events 
	  should be received after a mousedown, even if it leaves the window.  This parameter has been deprecated.
	*/  	
    HOpConstructCuboid (HBaseView* view, int DoRepeat=0, int DoCapture=1);
	virtual ~HOpConstructCuboid();

	/*!
		\return A pointer to a character string denoting the name of the operator, which is 'HOpConstructCuboid'.
	*/
	virtual const char * GetName();  

	/*!
		OnLButtonDown records the first mouse position and initiates the cuboid-drawing mechanism.  It tests
		for the case that the mechanism has already been started such as OnLButtonDown has been called once already.  
		In this case, OnLButtonDown finalizes the cuboid's depth, removes the geometry from the scene, updates the 
		display and ends the operation.
		\param hevent An HEventInfo object containing information about the current event.
		\return An #HOperatorReturn indicating the status of the event.
	*/
    virtual int	OnLButtonDown(HEventInfo &hevent);

	/*!
		OnNoButtonDownAndMove uses a rubberband to set the desired depth of the 
		cuboid.
		\param hevent An HEventInfo object containing information about the current event.
		\return An #HOperatorReturn indicating the status of the event.
	*/
	virtual int OnNoButtonDownAndMove(HEventInfo &hevent);

	/*!
		OnLButtonDownAndMove accepts the initiating point from OnLButtonDown and rubberbands a square for the desired 
		size of the cuboid's base.
		\param hevent An HEventInfo object containing information about the current event.
		\return An #HOperatorReturn indicating the status of the event.
	*/
	virtual int OnLButtonDownAndMove(HEventInfo &hevent);

	/*!
		OnLButtonUp finalizes the size of the cuboid's square base.
		\param hevent An HEventInfo object containing information about the current event.
		\return An #HOperatorReturn indicating the status of the event.
	*/
	virtual int	OnLButtonUp(HEventInfo &hevent);

	/*!
		CreateCuboid constructs the point list from the first, edge and last point and then maps these screen 
		coordinates generated by the event handlers into world coordinates, so that 
		the points can be directed into a call to HC_Insert_Shell.  This function is called internally by 
		OnLButtonDown and OnNoButtonDownAndMove.
		\param &last A pointer to an HPoint object.
	*/
	virtual void CreateCuboid(HPoint const & last);

	/*!
		CreateSquare creates a square that is orthogonal to camera target plane.  This function is called internally by
		OnLButtonDownAndMove and OnLButtonUp.
		\param &first An HPoint object.
		\param &last An HPoint object.
	*/
	virtual void CreateSquare(HPoint const & first, HPoint const & last);

	/*! 
	  Creates a new operator which is a copy of the current operator.  The user is 
	  responsible for deleting the newly created operator.
	  \return A pointer to the newly created HOpConstructCuboid object.
	*/
	HBaseOperator * Clone();  
};

#ifdef H_PACK_8
#pragma pack(pop)
#endif

#endif



