/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HEventInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HEventInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HEventInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HEventInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HEventInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HEventInfo(HBaseView view) : this(HCSMVOPINVOKE.new_HEventInfo(HBaseView.getCPtr(view)), true) {
  }

  public bool Control() {
    bool ret = HCSMVOPINVOKE.HEventInfo_Control(swigCPtr);
    return ret;
  }

  public bool Shift() {
    bool ret = HCSMVOPINVOKE.HEventInfo_Shift(swigCPtr);
    return ret;
  }

  public bool Alt() {
    bool ret = HCSMVOPINVOKE.HEventInfo_Alt(swigCPtr);
    return ret;
  }

  public bool LeftAlt() {
    bool ret = HCSMVOPINVOKE.HEventInfo_LeftAlt(swigCPtr);
    return ret;
  }

  public bool LeftControl() {
    bool ret = HCSMVOPINVOKE.HEventInfo_LeftControl(swigCPtr);
    return ret;
  }

  public bool LeftShift() {
    bool ret = HCSMVOPINVOKE.HEventInfo_LeftShift(swigCPtr);
    return ret;
  }

  public bool RightAlt() {
    bool ret = HCSMVOPINVOKE.HEventInfo_RightAlt(swigCPtr);
    return ret;
  }

  public bool RightControl() {
    bool ret = HCSMVOPINVOKE.HEventInfo_RightControl(swigCPtr);
    return ret;
  }

  public bool RightShift() {
    bool ret = HCSMVOPINVOKE.HEventInfo_RightShift(swigCPtr);
    return ret;
  }

  public bool LButton() {
    bool ret = HCSMVOPINVOKE.HEventInfo_LButton(swigCPtr);
    return ret;
  }

  public bool MButton() {
    bool ret = HCSMVOPINVOKE.HEventInfo_MButton(swigCPtr);
    return ret;
  }

  public bool RButton() {
    bool ret = HCSMVOPINVOKE.HEventInfo_RButton(swigCPtr);
    return ret;
  }

  public bool LeftArrow() {
    bool ret = HCSMVOPINVOKE.HEventInfo_LeftArrow(swigCPtr);
    return ret;
  }

  public bool UpArrow() {
    bool ret = HCSMVOPINVOKE.HEventInfo_UpArrow(swigCPtr);
    return ret;
  }

  public bool RightArrow() {
    bool ret = HCSMVOPINVOKE.HEventInfo_RightArrow(swigCPtr);
    return ret;
  }

  public bool DownArrow() {
    bool ret = HCSMVOPINVOKE.HEventInfo_DownArrow(swigCPtr);
    return ret;
  }

  public HBaseView GetView() {
    IntPtr cPtr = HCSMVOPINVOKE.HEventInfo_GetView(swigCPtr);
    HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
    return ret;
  }

  public HPoint GetMousePixelPos() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetMousePixelPos(swigCPtr), false);
    return ret;
  }

  public HPoint GetMouseWindowPos() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetMouseWindowPos(swigCPtr), false);
    return ret;
  }

  public HPoint GetMouseWorldPos() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetMouseWorldPos(swigCPtr), false);
    return ret;
  }

  public HPoint GetMouseViewpointPos() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetMouseViewpointPos(swigCPtr), false);
    return ret;
  }

  public HPoint GetJoystickRotation() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetJoystickRotation(swigCPtr), false);
    return ret;
  }

  public HPoint GetJoystickTranslation() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HEventInfo_GetJoystickTranslation(swigCPtr), false);
    return ret;
  }

  public uint GetChar() {
    uint ret = HCSMVOPINVOKE.HEventInfo_GetChar(swigCPtr);
    return ret;
  }

  public uint GetCharRepCount() {
    uint ret = HCSMVOPINVOKE.HEventInfo_GetCharRepCount(swigCPtr);
    return ret;
  }

  public uint GetTimerId() {
    uint ret = HCSMVOPINVOKE.HEventInfo_GetTimerId(swigCPtr);
    return ret;
  }

  public uint GetFlags() {
    uint ret = HCSMVOPINVOKE.HEventInfo_GetFlags(swigCPtr);
    return ret;
  }

  public void SetType(HEventType NewType) {
    HCSMVOPINVOKE.HEventInfo_SetType(swigCPtr, (int)NewType);
  }

  public HEventType GetEventType() {
    HEventType ret = (HEventType)HCSMVOPINVOKE.HEventInfo_GetEventType(swigCPtr);
    return ret;
  }

  public void SetPoint(HEventType NewType, int x, int y, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetPoint(swigCPtr, (int)NewType, x, y, NewFlags);
  }

  public void SetPixelPos(HEventType NewType, HPoint NewPoint, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetPixelPos(swigCPtr, (int)NewType, HPoint.getCPtr(NewPoint), NewFlags);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWindowPos(HEventType NewType, HPoint NewPoint, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetWindowPos(swigCPtr, (int)NewType, HPoint.getCPtr(NewPoint), NewFlags);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWorldPos(HEventType NewType, HPoint NewPoint, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetWorldPos(swigCPtr, (int)NewType, HPoint.getCPtr(NewPoint), NewFlags);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetViewpointPos(HEventType NewType, HPoint NewPoint, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetViewpointPos(swigCPtr, (int)NewType, HPoint.getCPtr(NewPoint), NewFlags);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKey(HEventType NewType, uint nChar, uint nRepCnt, uint NewFlags) {
    HCSMVOPINVOKE.HEventInfo_SetKey(swigCPtr, (int)NewType, nChar, nRepCnt, NewFlags);
  }

  public void SetTimer(HEventType NewType, uint nIDEvent) {
    HCSMVOPINVOKE.HEventInfo_SetTimer(swigCPtr, (int)NewType, nIDEvent);
  }

  public void SetMouseWheelDelta(int NewWheelDelta) {
    HCSMVOPINVOKE.HEventInfo_SetMouseWheelDelta(swigCPtr, NewWheelDelta);
  }

  public void SetFlags(int flags) {
    HCSMVOPINVOKE.HEventInfo_SetFlags(swigCPtr, flags);
  }

  public int GetMouseWheelDelta() {
    int ret = HCSMVOPINVOKE.HEventInfo_GetMouseWheelDelta(swigCPtr);
    return ret;
  }

  public static readonly int MAX_TOUCHES = HCSMVOPINVOKE.HEventInfo_MAX_TOUCHES_get();
}
