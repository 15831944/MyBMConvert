/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HBaseOperator : HMouseListener {
  private HandleRef swigCPtr;

  public HBaseOperator(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HBaseOperatorUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HBaseOperator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HBaseOperator() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HBaseOperator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  protected bool m_bOpStarted {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_bOpStarted_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseOperator_m_bOpStarted_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_doRepeat {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_doRepeat_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseOperator_m_doRepeat_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_doCapture {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_doCapture_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseOperator_m_doCapture_get(swigCPtr);
      return ret;
    } 
  }

  protected HPoint m_ptFirst {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_ptFirst_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseOperator_m_ptFirst_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected HPoint m_ptNew {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_ptNew_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseOperator_m_ptNew_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected HBaseView m_pView {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_pView_set(swigCPtr, HBaseView.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseOperator_m_pView_get(swigCPtr);
      HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bMapTouchesToMouseEvents {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_bMapTouchesToMouseEvents_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseOperator_m_bMapTouchesToMouseEvents_get(swigCPtr);
      return ret;
    } 
  }

  protected bool IsSpecialKey(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HBaseOperator_IsSpecialKey(swigCPtr, key);
    return ret;
  }

  protected HShadowMode m_TempShadowMode {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_TempShadowMode_set(swigCPtr, (int)value);
    } 
    get {
      HShadowMode ret = (HShadowMode)HCSMVOPINVOKE.HBaseOperator_m_TempShadowMode_get(swigCPtr);
      return ret;
    } 
  }

  protected HCutGeometryVisibility m_TempCutGeometryVisibility {
    set {
      HCSMVOPINVOKE.HBaseOperator_m_TempCutGeometryVisibility_set(swigCPtr, (int)value);
    } 
    get {
      HCutGeometryVisibility ret = (HCutGeometryVisibility)HCSMVOPINVOKE.HBaseOperator_m_TempCutGeometryVisibility_get(swigCPtr);
      return ret;
    } 
  }

  public int Repeat() {
    int ret = HCSMVOPINVOKE.HBaseOperator_Repeat(swigCPtr);
    return ret;
  }

  public int Capture() {
    int ret = HCSMVOPINVOKE.HBaseOperator_Capture(swigCPtr);
    return ret;
  }

  public virtual HBaseOperator Clone() {
    IntPtr cPtr = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_Clone(swigCPtr) : HCSMVOPINVOKE.HBaseOperator_CloneSwigExplicitHBaseOperator(swigCPtr));
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public void SetFirstPoint(HPoint new_point) {
    HCSMVOPINVOKE.HBaseOperator_SetFirstPoint(swigCPtr, HPoint.getCPtr(new_point));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetFirstPoint() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseOperator_GetFirstPoint(swigCPtr), true);
    return ret;
  }

  public void SetNewPoint(HPoint new_point) {
    HCSMVOPINVOKE.HBaseOperator_SetNewPoint(swigCPtr, HPoint.getCPtr(new_point));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetNewPoint() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseOperator_GetNewPoint(swigCPtr), true);
    return ret;
  }

  public HBaseView GetView() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseOperator_GetView(swigCPtr);
    HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
    return ret;
  }

  public void SetView(HBaseView new_view) {
    HCSMVOPINVOKE.HBaseOperator_SetView(swigCPtr, HBaseView.getCPtr(new_view));
  }

  public virtual bool OperatorStarted() {
    bool ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OperatorStarted(swigCPtr) : HCSMVOPINVOKE.HBaseOperator_OperatorStartedSwigExplicitHBaseOperator(swigCPtr));
    return ret;
  }

  public void SetOperatorStarted(bool val) {
    HCSMVOPINVOKE.HBaseOperator_SetOperatorStarted(swigCPtr, val);
  }

  public void SetMapTouchesToMouseEvents(bool val) {
    HCSMVOPINVOKE.HBaseOperator_SetMapTouchesToMouseEvents(swigCPtr, val);
  }

  public HBaseOperator(HBaseView view, int DoRepeat, int DoCapture) : this(HCSMVOPINVOKE.new_HBaseOperator__SWIG_0(HBaseView.getCPtr(view), DoRepeat, DoCapture), true) {
    SwigDirectorConnect();
  }

  public HBaseOperator(HBaseView view, int DoRepeat) : this(HCSMVOPINVOKE.new_HBaseOperator__SWIG_1(HBaseView.getCPtr(view), DoRepeat), true) {
    SwigDirectorConnect();
  }

  public HBaseOperator(HBaseView view) : this(HCSMVOPINVOKE.new_HBaseOperator__SWIG_2(HBaseView.getCPtr(view)), true) {
    SwigDirectorConnect();
  }

  public override int OnMouseMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMouseMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMouseMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string GetName() {
    string ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_GetName(swigCPtr) : HCSMVOPINVOKE.HBaseOperator_GetNameSwigExplicitHBaseOperator(swigCPtr));
    return ret;
  }

  public override int OnLButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnLButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnLButtonDownSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnLButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnLButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnLButtonUpSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnLButtonDblClk(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnLButtonDblClk(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnLButtonDblClkSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnLButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnLButtonDownAndMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMButtonDownSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMButtonUpSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonDblClk(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMButtonDblClk(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMButtonDblClkSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnMButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMButtonDownAndMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnRButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnRButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnRButtonDownSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnRButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnRButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnRButtonUpSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnRButtonDblClk(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnRButtonDblClk(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnRButtonDblClkSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnRButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnRButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnRButtonDownAndMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLRButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnLRButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnLRButtonDownAndMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnNoButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnNoButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnNoButtonDownAndMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnTimer(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnTimer(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnTimerSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnKeyDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnKeyDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnKeyDownSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnKeyUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnKeyUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnKeyUpSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMouseWheel(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnMouseWheel(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnMouseWheelSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnTouchesDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnTouchesDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnTouchesDownSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnTouchesMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnTouchesMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnTouchesMoveSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnTouchesUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseOperator)) ? HCSMVOPINVOKE.HBaseOperator_OnTouchesUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseOperator_OnTouchesUpSwigExplicitHBaseOperator(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHBaseOperator_0(SwigDirectorCreateListenerManager);
    if (SwigDerivedClassHasMethod("OnLButtonDown", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHBaseOperator_1(SwigDirectorOnLButtonDown);
    if (SwigDerivedClassHasMethod("OnMouseMove", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHBaseOperator_2(SwigDirectorOnMouseMove);
    if (SwigDerivedClassHasMethod("OnLButtonUp", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHBaseOperator_3(SwigDirectorOnLButtonUp);
    if (SwigDerivedClassHasMethod("OnLButtonDblClk", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHBaseOperator_4(SwigDirectorOnLButtonDblClk);
    if (SwigDerivedClassHasMethod("OnMButtonDown", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHBaseOperator_5(SwigDirectorOnMButtonDown);
    if (SwigDerivedClassHasMethod("OnMButtonUp", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateHBaseOperator_6(SwigDirectorOnMButtonUp);
    if (SwigDerivedClassHasMethod("OnMButtonDblClk", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateHBaseOperator_7(SwigDirectorOnMButtonDblClk);
    if (SwigDerivedClassHasMethod("OnRButtonDown", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateHBaseOperator_8(SwigDirectorOnRButtonDown);
    if (SwigDerivedClassHasMethod("OnRButtonUp", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateHBaseOperator_9(SwigDirectorOnRButtonUp);
    if (SwigDerivedClassHasMethod("OnRButtonDblClk", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateHBaseOperator_10(SwigDirectorOnRButtonDblClk);
    if (SwigDerivedClassHasMethod("OnMouseWheel", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateHBaseOperator_11(SwigDirectorOnMouseWheel);
    if (SwigDerivedClassHasMethod("OnKeyDown", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateHBaseOperator_12(SwigDirectorOnKeyDown);
    if (SwigDerivedClassHasMethod("OnKeyUp", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateHBaseOperator_13(SwigDirectorOnKeyUp);
    if (SwigDerivedClassHasMethod("OnTouchesDown", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateHBaseOperator_14(SwigDirectorOnTouchesDown);
    if (SwigDerivedClassHasMethod("OnTouchesMove", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateHBaseOperator_15(SwigDirectorOnTouchesMove);
    if (SwigDerivedClassHasMethod("OnTouchesUp", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateHBaseOperator_16(SwigDirectorOnTouchesUp);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateHBaseOperator_17(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("OperatorStarted", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateHBaseOperator_18(SwigDirectorOperatorStarted);
    if (SwigDerivedClassHasMethod("GetName", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateHBaseOperator_19(SwigDirectorGetName);
    if (SwigDerivedClassHasMethod("OnLButtonDownAndMove", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateHBaseOperator_20(SwigDirectorOnLButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnMButtonDownAndMove", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateHBaseOperator_21(SwigDirectorOnMButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnRButtonDownAndMove", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateHBaseOperator_22(SwigDirectorOnRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLRButtonDownAndMove", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateHBaseOperator_23(SwigDirectorOnLRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnNoButtonDownAndMove", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateHBaseOperator_24(SwigDirectorOnNoButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnTimer", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateHBaseOperator_25(SwigDirectorOnTimer);
    HCSMVOPINVOKE.HBaseOperator_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HBaseOperator));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  private int SwigDirectorOnLButtonDown(IntPtr hevent) {
    return OnLButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseMove(IntPtr hevent) {
    return OnMouseMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonUp(IntPtr hevent) {
    return OnLButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonDblClk(IntPtr hevent) {
    return OnLButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDown(IntPtr hevent) {
    return OnMButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonUp(IntPtr hevent) {
    return OnMButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDblClk(IntPtr hevent) {
    return OnMButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDown(IntPtr hevent) {
    return OnRButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonUp(IntPtr hevent) {
    return OnRButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDblClk(IntPtr hevent) {
    return OnRButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseWheel(IntPtr hevent) {
    return OnMouseWheel(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnKeyDown(IntPtr hevent) {
    return OnKeyDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnKeyUp(IntPtr hevent) {
    return OnKeyUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesDown(IntPtr hevent) {
    return OnTouchesDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesMove(IntPtr hevent) {
    return OnTouchesMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesUp(IntPtr hevent) {
    return OnTouchesUp(new HEventInfo(hevent, false));
  }

  private IntPtr SwigDirectorClone() {
    return HBaseOperator.getCPtr(Clone()).Handle;
  }

  private bool SwigDirectorOperatorStarted() {
    return OperatorStarted();
  }

  private string SwigDirectorGetName() {
    return GetName();
  }

  private int SwigDirectorOnLButtonDownAndMove(IntPtr hevent) {
    return OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDownAndMove(IntPtr hevent) {
    return OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDownAndMove(IntPtr hevent) {
    return OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLRButtonDownAndMove(IntPtr hevent) {
    return OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnNoButtonDownAndMove(IntPtr hevent) {
    return OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTimer(IntPtr hevent) {
    return OnTimer(new HEventInfo(hevent, false));
  }

  public delegate IntPtr SwigDelegateHBaseOperator_0();
  public delegate int SwigDelegateHBaseOperator_1(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_2(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_3(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_4(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_5(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_6(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_7(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_8(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_9(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_10(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_11(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_12(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_13(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_14(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_15(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_16(IntPtr hevent);
  public delegate IntPtr SwigDelegateHBaseOperator_17();
  public delegate bool SwigDelegateHBaseOperator_18();
  public delegate string SwigDelegateHBaseOperator_19();
  public delegate int SwigDelegateHBaseOperator_20(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_21(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_22(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_23(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_24(IntPtr hevent);
  public delegate int SwigDelegateHBaseOperator_25(IntPtr hevent);

  private SwigDelegateHBaseOperator_0 swigDelegate0;
  private SwigDelegateHBaseOperator_1 swigDelegate1;
  private SwigDelegateHBaseOperator_2 swigDelegate2;
  private SwigDelegateHBaseOperator_3 swigDelegate3;
  private SwigDelegateHBaseOperator_4 swigDelegate4;
  private SwigDelegateHBaseOperator_5 swigDelegate5;
  private SwigDelegateHBaseOperator_6 swigDelegate6;
  private SwigDelegateHBaseOperator_7 swigDelegate7;
  private SwigDelegateHBaseOperator_8 swigDelegate8;
  private SwigDelegateHBaseOperator_9 swigDelegate9;
  private SwigDelegateHBaseOperator_10 swigDelegate10;
  private SwigDelegateHBaseOperator_11 swigDelegate11;
  private SwigDelegateHBaseOperator_12 swigDelegate12;
  private SwigDelegateHBaseOperator_13 swigDelegate13;
  private SwigDelegateHBaseOperator_14 swigDelegate14;
  private SwigDelegateHBaseOperator_15 swigDelegate15;
  private SwigDelegateHBaseOperator_16 swigDelegate16;
  private SwigDelegateHBaseOperator_17 swigDelegate17;
  private SwigDelegateHBaseOperator_18 swigDelegate18;
  private SwigDelegateHBaseOperator_19 swigDelegate19;
  private SwigDelegateHBaseOperator_20 swigDelegate20;
  private SwigDelegateHBaseOperator_21 swigDelegate21;
  private SwigDelegateHBaseOperator_22 swigDelegate22;
  private SwigDelegateHBaseOperator_23 swigDelegate23;
  private SwigDelegateHBaseOperator_24 swigDelegate24;
  private SwigDelegateHBaseOperator_25 swigDelegate25;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes17 = new Type[] {  };
  private static Type[] swigMethodTypes18 = new Type[] {  };
  private static Type[] swigMethodTypes19 = new Type[] {  };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes22 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes23 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(HEventInfo) };
}
