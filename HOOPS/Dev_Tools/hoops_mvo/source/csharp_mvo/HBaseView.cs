/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HBaseView : HUpdateListener {
  private HandleRef swigCPtr;

  public HBaseView(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HBaseViewUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HBaseView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HBaseView() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HBaseView(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override, IntPtr window_handle_2, string driver_path) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_0(HBaseModel.getCPtr(model), alias, driver_type, instance_name, window_handle, colormap, clip_override, window_handle_2, driver_path), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override, IntPtr window_handle_2) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_1(HBaseModel.getCPtr(model), alias, driver_type, instance_name, window_handle, colormap, clip_override, window_handle_2), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_2(HBaseModel.getCPtr(model), alias, driver_type, instance_name, window_handle, colormap, clip_override), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_3(HBaseModel.getCPtr(model), alias, driver_type, instance_name, window_handle, colormap), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name, IntPtr window_handle) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_4(HBaseModel.getCPtr(model), alias, driver_type, instance_name, window_handle), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type, string instance_name) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_5(HBaseModel.getCPtr(model), alias, driver_type, instance_name), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias, string driver_type) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_6(HBaseModel.getCPtr(model), alias, driver_type), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model, string alias) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_7(HBaseModel.getCPtr(model), alias), true) {
    SwigDirectorConnect();
  }

  public HBaseView(HBaseModel model) : this(HCSMVOPINVOKE.new_HBaseView__SWIG_8(HBaseModel.getCPtr(model)), true) {
    SwigDirectorConnect();
  }

  public void RebindView(string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override, IntPtr window_handle_2, int debug_flags) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_0(swigCPtr, alias, driver_type, instance_name, window_handle, colormap, clip_override, window_handle_2, debug_flags);
  }

  public void RebindView(string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override, IntPtr window_handle_2) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_1(swigCPtr, alias, driver_type, instance_name, window_handle, colormap, clip_override, window_handle_2);
  }

  public void RebindView(string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap, IntPtr clip_override) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_2(swigCPtr, alias, driver_type, instance_name, window_handle, colormap, clip_override);
  }

  public void RebindView(string alias, string driver_type, string instance_name, IntPtr window_handle, IntPtr colormap) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_3(swigCPtr, alias, driver_type, instance_name, window_handle, colormap);
  }

  public void RebindView(string alias, string driver_type, string instance_name, IntPtr window_handle) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_4(swigCPtr, alias, driver_type, instance_name, window_handle);
  }

  public void RebindView(string alias, string driver_type, string instance_name) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_5(swigCPtr, alias, driver_type, instance_name);
  }

  public void RebindView(string alias, string driver_type) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_6(swigCPtr, alias, driver_type);
  }

  public void RebindView(string alias) {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_7(swigCPtr, alias);
  }

  public void RebindView() {
    HCSMVOPINVOKE.HBaseView_RebindView__SWIG_8(swigCPtr);
  }

  public virtual void Init() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Init(swigCPtr); else HCSMVOPINVOKE.HBaseView_InitSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void FitWorld(HPoint center_out) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_FitWorld__SWIG_0(swigCPtr, HPoint.getCPtr(center_out)); else HCSMVOPINVOKE.HBaseView_FitWorldSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(center_out));
  }

  public virtual void FitWorld() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_FitWorld__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_FitWorldSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public virtual void FitWorldExact(HPoint center_out) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_FitWorldExact__SWIG_0(swigCPtr, HPoint.getCPtr(center_out)); else HCSMVOPINVOKE.HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(center_out));
  }

  public virtual void FitWorldExact() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_FitWorldExact__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public virtual void ZoomToExtents() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_ZoomToExtents(swigCPtr); else HCSMVOPINVOKE.HBaseView_ZoomToExtentsSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void ZoomToInitialCamera() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_ZoomToInitialCamera(swigCPtr); else HCSMVOPINVOKE.HBaseView_ZoomToInitialCameraSwigExplicitHBaseView(swigCPtr);
  }

  public void FitSegment(MVO_POINTER_SIZED_INT seg_key) {
    HCSMVOPINVOKE.HBaseView_FitSegment(swigCPtr, seg_key);
  }

  public void FitSelection(MVO_POINTER_SIZED_INT key, bool adjustToShellNormal) {
    HCSMVOPINVOKE.HBaseView_FitSelection__SWIG_0(swigCPtr, key, adjustToShellNormal);
  }

  public void FitSelection(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HBaseView_FitSelection__SWIG_1(swigCPtr, key);
  }

  public void FitSelection() {
    HCSMVOPINVOKE.HBaseView_FitSelection__SWIG_2(swigCPtr);
  }

  public void FitItemByPath(MVO_POINTER_SIZED_INT key, int incl_count, MVO_POINTER_SIZED_INT[] incl_path) {
    HCSMVOPINVOKE.HBaseView_FitItemByPath(swigCPtr, key, incl_count, incl_path);
  }

  public void RenderAntialiasing() {
    HCSMVOPINVOKE.HBaseView_RenderAntialiasing(swigCPtr);
  }

  public void InitAntialiasing() {
    HCSMVOPINVOKE.HBaseView_InitAntialiasing(swigCPtr);
  }

  public SWIGTYPE_p_HUtilityAntialiasing GetAntialiasing() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetAntialiasing(swigCPtr);
    SWIGTYPE_p_HUtilityAntialiasing ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HUtilityAntialiasing(cPtr, false);
    return ret;
  }

  public HMarkupManager GetMarkupManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetMarkupManager(swigCPtr);
    HMarkupManager ret = (cPtr == IntPtr.Zero) ? null : new HMarkupManager(cPtr, false);
    return ret;
  }

  public bool HaveMarkupManager() {
    bool ret = HCSMVOPINVOKE.HBaseView_HaveMarkupManager(swigCPtr);
    return ret;
  }

  public void SetMarkupManager(HMarkupManager markup) {
    HCSMVOPINVOKE.HBaseView_SetMarkupManager(swigCPtr, HMarkupManager.getCPtr(markup));
  }

  public void RenderWireframe() {
    HCSMVOPINVOKE.HBaseView_RenderWireframe(swigCPtr);
  }

  public void RenderSilhouette() {
    HCSMVOPINVOKE.HBaseView_RenderSilhouette(swigCPtr);
  }

  public void RenderHiddenLine() {
    HCSMVOPINVOKE.HBaseView_RenderHiddenLine(swigCPtr);
  }

  public void RenderHiddenLineFast() {
    HCSMVOPINVOKE.HBaseView_RenderHiddenLineFast(swigCPtr);
  }

  public void RenderFlat() {
    HCSMVOPINVOKE.HBaseView_RenderFlat(swigCPtr);
  }

  public void RenderGooch() {
    HCSMVOPINVOKE.HBaseView_RenderGooch(swigCPtr);
  }

  public void RenderGouraud() {
    HCSMVOPINVOKE.HBaseView_RenderGouraud(swigCPtr);
  }

  public void RenderPhong() {
    HCSMVOPINVOKE.HBaseView_RenderPhong(swigCPtr);
  }

  public void RenderWireframeWithSilhouette() {
    HCSMVOPINVOKE.HBaseView_RenderWireframeWithSilhouette(swigCPtr);
  }

  public void RenderShadedWireframe() {
    HCSMVOPINVOKE.HBaseView_RenderShadedWireframe(swigCPtr);
  }

  public void RenderVertices() {
    HCSMVOPINVOKE.HBaseView_RenderVertices(swigCPtr);
  }

  public void RenderShadedVertices() {
    HCSMVOPINVOKE.HBaseView_RenderShadedVertices(swigCPtr);
  }

  public void RenderFakeHiddenLine() {
    HCSMVOPINVOKE.HBaseView_RenderFakeHiddenLine(swigCPtr);
  }

  public void RenderBRepHiddenLine() {
    HCSMVOPINVOKE.HBaseView_RenderBRepHiddenLine(swigCPtr);
  }

  public void RenderBRepHiddenLineFast() {
    HCSMVOPINVOKE.HBaseView_RenderBRepHiddenLineFast(swigCPtr);
  }

  public void RenderBRepWireframe() {
    HCSMVOPINVOKE.HBaseView_RenderBRepWireframe(swigCPtr);
  }

  public void RenderShaded() {
    HCSMVOPINVOKE.HBaseView_RenderShaded(swigCPtr);
  }

  public void RenderShadedWithLines() {
    HCSMVOPINVOKE.HBaseView_RenderShadedWithLines(swigCPtr);
  }

  public void RenderGouraudWithLines() {
    HCSMVOPINVOKE.HBaseView_RenderGouraudWithLines(swigCPtr);
  }

  public void RenderLOD1() {
    HCSMVOPINVOKE.HBaseView_RenderLOD1(swigCPtr);
  }

  public void RenderLOD2() {
    HCSMVOPINVOKE.HBaseView_RenderLOD2(swigCPtr);
  }

  public void RemoveTransforms() {
    HCSMVOPINVOKE.HBaseView_RemoveTransforms(swigCPtr);
  }

  public virtual void Update() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Update(swigCPtr); else HCSMVOPINVOKE.HBaseView_UpdateSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void ForceUpdate() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_ForceUpdate(swigCPtr); else HCSMVOPINVOKE.HBaseView_ForceUpdateSwigExplicitHBaseView(swigCPtr);
  }

  public virtual HFileIOResult FileInput(string FileName, HInputHandler handler, HInputHandlerOptions options) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_FileInput__SWIG_0(swigCPtr, FileName, HInputHandler.getCPtr(handler), HInputHandlerOptions.getCPtr(options)) : HCSMVOPINVOKE.HBaseView_FileInputSwigExplicitHBaseView__SWIG_0(swigCPtr, FileName, HInputHandler.getCPtr(handler), HInputHandlerOptions.getCPtr(options)));
    return ret;
  }

  public virtual HFileIOResult FileInput(string FileName, HInputHandler handler) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_FileInput__SWIG_1(swigCPtr, FileName, HInputHandler.getCPtr(handler)) : HCSMVOPINVOKE.HBaseView_FileInputSwigExplicitHBaseView__SWIG_1(swigCPtr, FileName, HInputHandler.getCPtr(handler)));
    return ret;
  }

  public virtual HFileIOResult FileOutput(string FileName, HOutputHandler handler, HOutputHandlerOptions options) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_FileOutput__SWIG_0(swigCPtr, FileName, HOutputHandler.getCPtr(handler), HOutputHandlerOptions.getCPtr(options)) : HCSMVOPINVOKE.HBaseView_FileOutputSwigExplicitHBaseView__SWIG_0(swigCPtr, FileName, HOutputHandler.getCPtr(handler), HOutputHandlerOptions.getCPtr(options)));
    return ret;
  }

  public virtual HFileIOResult FileOutput(string FileName, HOutputHandler handler) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_FileOutput__SWIG_1(swigCPtr, FileName, HOutputHandler.getCPtr(handler)) : HCSMVOPINVOKE.HBaseView_FileOutputSwigExplicitHBaseView__SWIG_1(swigCPtr, FileName, HOutputHandler.getCPtr(handler)));
    return ret;
  }

  public string GetDriverPath() {
    string ret = HCSMVOPINVOKE.HBaseView_GetDriverPath(swigCPtr);
    return ret;
  }

  public string GetDriverType() {
    string ret = HCSMVOPINVOKE.HBaseView_GetDriverType(swigCPtr);
    return ret;
  }

  public virtual void UpdateHighlighting() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_UpdateHighlighting(swigCPtr); else HCSMVOPINVOKE.HBaseView_UpdateHighlightingSwigExplicitHBaseView(swigCPtr);
  }

  public HSelectionSet GetSelection() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetSelection(swigCPtr);
    HSelectionSet ret = (cPtr == IntPtr.Zero) ? null : new HSelectionSet(cPtr, false);
    return ret;
  }

  public void SetSelection(HSelectionSet selection) {
    HCSMVOPINVOKE.HBaseView_SetSelection(swigCPtr, HSelectionSet.getCPtr(selection));
  }

  public virtual HBaseModel GetModel() {
    IntPtr cPtr = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetModel(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetModelSwigExplicitHBaseView(swigCPtr));
    HBaseModel ret = (cPtr == IntPtr.Zero) ? null : new HBaseModel(cPtr, false);
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetModelKey() {return HCSMVOPINVOKE.HBaseView_GetModelKey(swigCPtr);}

  public HRenderMode GetRenderMode() {
    HRenderMode ret = (HRenderMode)HCSMVOPINVOKE.HBaseView_GetRenderMode(swigCPtr);
    return ret;
  }

  public ViewMode GetViewMode() {
    ViewMode ret = (ViewMode)HCSMVOPINVOKE.HBaseView_GetViewMode(swigCPtr);
    return ret;
  }

  public virtual void SetViewMode(ViewMode mode, bool invert, bool fitWorld) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetViewMode__SWIG_0(swigCPtr, (int)mode, invert, fitWorld); else HCSMVOPINVOKE.HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_0(swigCPtr, (int)mode, invert, fitWorld);
  }

  public virtual void SetViewMode(ViewMode mode, bool invert) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetViewMode__SWIG_1(swigCPtr, (int)mode, invert); else HCSMVOPINVOKE.HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_1(swigCPtr, (int)mode, invert);
  }

  public virtual void SetViewMode(ViewMode mode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetViewMode__SWIG_2(swigCPtr, (int)mode); else HCSMVOPINVOKE.HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_2(swigCPtr, (int)mode);
  }

  public bool GetCPLineVisibility() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCPLineVisibility(swigCPtr);
    return ret;
  }

  public bool GetCPFaceVisibility() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCPFaceVisibility(swigCPtr);
    return ret;
  }

  public void SetCPGeomVisibility(bool lines, bool faces) {
    HCSMVOPINVOKE.HBaseView_SetCPGeomVisibility__SWIG_0(swigCPtr, lines, faces);
  }

  public void SetCPGeomVisibility(bool lines) {
    HCSMVOPINVOKE.HBaseView_SetCPGeomVisibility__SWIG_1(swigCPtr, lines);
  }

  public bool GetCuttingPlanesExist(string plane) {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCuttingPlanesExist__SWIG_0(swigCPtr, plane);
    return ret;
  }

  public bool GetCuttingPlanesExist() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCuttingPlanesExist__SWIG_1(swigCPtr);
    return ret;
  }

  public void SetCuttingPlanesExist(bool state) {
    HCSMVOPINVOKE.HBaseView_SetCuttingPlanesExist(swigCPtr, state);
  }

  public bool GetCuttingPlanesVisibility() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCuttingPlanesVisibility(swigCPtr);
    return ret;
  }

  public void SetCuttingPlanesVisibility(bool visible) {
    HCSMVOPINVOKE.HBaseView_SetCuttingPlanesVisibility(swigCPtr, visible);
  }

  public HConstantFrameRate GetConstantFrameRateObject() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetConstantFrameRateObject(swigCPtr);
    HConstantFrameRate ret = (cPtr == IntPtr.Zero) ? null : new HConstantFrameRate(cPtr, false);
    return ret;
  }

  public void SetConstantFrameRateObject(HConstantFrameRate cf) {
    HCSMVOPINVOKE.HBaseView_SetConstantFrameRateObject(swigCPtr, HConstantFrameRate.getCPtr(cf));
  }

  public void SetEventCheckerCallback(SWIGTYPE_p_f_p_q_const__HIC_Rendition__void EventChecker) {
    HCSMVOPINVOKE.HBaseView_SetEventCheckerCallback(swigCPtr, SWIGTYPE_p_f_p_q_const__HIC_Rendition__void.getCPtr(EventChecker));
  }

  public void SetKeyStateCallback(SWIGTYPE_p_f_unsigned_int_r_int__bool KeyState) {
    HCSMVOPINVOKE.HBaseView_SetKeyStateCallback(swigCPtr, SWIGTYPE_p_f_unsigned_int_r_int__bool.getCPtr(KeyState));
  }

  public SWIGTYPE_p_f_unsigned_int_r_int__bool GetKeyStateCallback() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetKeyStateCallback(swigCPtr);
    SWIGTYPE_p_f_unsigned_int_r_int__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_unsigned_int_r_int__bool(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_f_p_q_const__HIC_Rendition__void GetEventCheckerCallback() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetEventCheckerCallback(swigCPtr);
    SWIGTYPE_p_f_p_q_const__HIC_Rendition__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_q_const__HIC_Rendition__void(cPtr, false);
    return ret;
  }

  public void SetOcclusionCullingMode(bool mode, bool UseOctree, int threshold) {
    HCSMVOPINVOKE.HBaseView_SetOcclusionCullingMode__SWIG_0(swigCPtr, mode, UseOctree, threshold);
  }

  public void SetOcclusionCullingMode(bool mode, bool UseOctree) {
    HCSMVOPINVOKE.HBaseView_SetOcclusionCullingMode__SWIG_1(swigCPtr, mode, UseOctree);
  }

  public void SetOcclusionCullingMode(bool mode) {
    HCSMVOPINVOKE.HBaseView_SetOcclusionCullingMode__SWIG_2(swigCPtr, mode);
  }

  public HandednessMode GetHandedness() {
    HandednessMode ret = (HandednessMode)HCSMVOPINVOKE.HBaseView_GetHandedness(swigCPtr);
    return ret;
  }

  public virtual void SetHandedness(HandednessMode mode, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHandedness__SWIG_0(swigCPtr, (int)mode, emit_message); else HCSMVOPINVOKE.HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_0(swigCPtr, (int)mode, emit_message);
  }

  public virtual void SetHandedness(HandednessMode mode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHandedness__SWIG_1(swigCPtr, (int)mode); else HCSMVOPINVOKE.HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_1(swigCPtr, (int)mode);
  }

  public virtual void SetHandednessFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHandednessFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SetHandednessFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void SetFontSize(string font_size, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetFontSize__SWIG_0(swigCPtr, font_size, emit_message); else HCSMVOPINVOKE.HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_0(swigCPtr, font_size, emit_message);
  }

  public virtual void SetFontSize(string font_size) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetFontSize__SWIG_1(swigCPtr, font_size); else HCSMVOPINVOKE.HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_1(swigCPtr, font_size);
  }

  public virtual void SetFontSizeFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetFontSizeFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SetFontSizeFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public bool GetBackplaneCulling() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetBackplaneCulling(swigCPtr);
    return ret;
  }

  public void SetBackplaneCulling(bool cull) {
    HCSMVOPINVOKE.HBaseView_SetBackplaneCulling(swigCPtr, cull);
  }

  public ProjMode GetProjMode() {
    ProjMode ret = (ProjMode)HCSMVOPINVOKE.HBaseView_GetProjMode(swigCPtr);
    return ret;
  }

  public void SetProjMode(ProjMode mode) {
    HCSMVOPINVOKE.HBaseView_SetProjMode(swigCPtr, (int)mode);
  }

  public DisplayListType GetDisplayListType() {
    DisplayListType ret = (DisplayListType)HCSMVOPINVOKE.HBaseView_GetDisplayListType(swigCPtr);
    return ret;
  }

  public void SetDisplayListType(DisplayListType type) {
    HCSMVOPINVOKE.HBaseView_SetDisplayListType(swigCPtr, (int)type);
  }

  public bool GetDisplayListMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetDisplayListMode(swigCPtr);
    return ret;
  }

  public void SetDisplayListMode(bool mode) {
    HCSMVOPINVOKE.HBaseView_SetDisplayListMode(swigCPtr, mode);
  }

  public HandednessMode GetPolygonHandednessMode() {
    HandednessMode ret = (HandednessMode)HCSMVOPINVOKE.HBaseView_GetPolygonHandednessMode(swigCPtr);
    return ret;
  }

  public void SetPolygonHandednessMode(HandednessMode arg0) {
    HCSMVOPINVOKE.HBaseView_SetPolygonHandednessMode(swigCPtr, (int)arg0);
  }

  public bool GetLodMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetLodMode(swigCPtr);
    return ret;
  }

  public void SetLodMode(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetLodMode(swigCPtr, onoff);
  }

  public bool GetSpritingMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSpritingMode(swigCPtr);
    return ret;
  }

  public void SetSpritingMode(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetSpritingMode(swigCPtr, onoff);
  }

  public int GetLodThreshold() {
    int ret = HCSMVOPINVOKE.HBaseView_GetLodThreshold(swigCPtr);
    return ret;
  }

  public void SetLodThreshold(int val) {
    HCSMVOPINVOKE.HBaseView_SetLodThreshold(swigCPtr, val);
  }

  public MVO_POINTER_SIZED_INT GetViewKey() {return HCSMVOPINVOKE.HBaseView_GetViewKey(swigCPtr);}

  public void SetViewKey(MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HBaseView_SetViewKey(swigCPtr, view_key);
  }

  public MVO_POINTER_SIZED_INT GetIncludeLinkKey() {return HCSMVOPINVOKE.HBaseView_GetIncludeLinkKey(swigCPtr);}

  public void SetIncludeLinkKey(MVO_POINTER_SIZED_INT link) {
    HCSMVOPINVOKE.HBaseView_SetIncludeLinkKey(swigCPtr, link);
  }

  public MVO_POINTER_SIZED_INT GetSceneKey() {return HCSMVOPINVOKE.HBaseView_GetSceneKey(swigCPtr);}

  public void SetSceneKey(MVO_POINTER_SIZED_INT scene_key) {
    HCSMVOPINVOKE.HBaseView_SetSceneKey(swigCPtr, scene_key);
  }

  public MVO_POINTER_SIZED_INT GetOverwriteKey() {return HCSMVOPINVOKE.HBaseView_GetOverwriteKey(swigCPtr);}

  public MVO_POINTER_SIZED_INT GetShadowMapSegmentKey() {return HCSMVOPINVOKE.HBaseView_GetShadowMapSegmentKey(swigCPtr);}

  public MVO_POINTER_SIZED_INT GetLightsKey() {return HCSMVOPINVOKE.HBaseView_GetLightsKey(swigCPtr);}

  public void SetLightsKey(MVO_POINTER_SIZED_INT lights_key) {
    HCSMVOPINVOKE.HBaseView_SetLightsKey(swigCPtr, lights_key);
  }

  public float GetZoomLimit() {
    float ret = HCSMVOPINVOKE.HBaseView_GetZoomLimit(swigCPtr);
    return ret;
  }

  public void SetZoomLimit(float zoomLimit) {
    HCSMVOPINVOKE.HBaseView_SetZoomLimit__SWIG_0(swigCPtr, zoomLimit);
  }

  public virtual void SetZoomLimit() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetZoomLimit__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetZoomLimitSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public MVO_POINTER_SIZED_INT GetWindowspaceKey() {return HCSMVOPINVOKE.HBaseView_GetWindowspaceKey(swigCPtr);}

  public void SetWindowspaceKey(MVO_POINTER_SIZED_INT winspace_key) {
    HCSMVOPINVOKE.HBaseView_SetWindowspaceKey(swigCPtr, winspace_key);
  }

  public MVO_POINTER_SIZED_INT GetConstructionKey() {return HCSMVOPINVOKE.HBaseView_GetConstructionKey(swigCPtr);}

  public void SetConstructionKey(MVO_POINTER_SIZED_INT construct_key) {
    HCSMVOPINVOKE.HBaseView_SetConstructionKey(swigCPtr, construct_key);
  }

  public MVO_POINTER_SIZED_INT GetBBoxGeometryKey() {return HCSMVOPINVOKE.HBaseView_GetBBoxGeometryKey(swigCPtr);}

  public void SetBBoxGeometryKey(MVO_POINTER_SIZED_INT bbox_key) {
    HCSMVOPINVOKE.HBaseView_SetBBoxGeometryKey(swigCPtr, bbox_key);
  }

  public MVO_POINTER_SIZED_INT GetCuttingPlanesKey() {return HCSMVOPINVOKE.HBaseView_GetCuttingPlanesKey(swigCPtr);}

  public void SetCuttingPlanesKey(MVO_POINTER_SIZED_INT cuttingplanes_key) {
    HCSMVOPINVOKE.HBaseView_SetCuttingPlanesKey(swigCPtr, cuttingplanes_key);
  }

  public MVO_POINTER_SIZED_INT GetCuttingPlaneGeomKey() {return HCSMVOPINVOKE.HBaseView_GetCuttingPlaneGeomKey(swigCPtr);}

  public void SetCuttingPlaneGeomKey(MVO_POINTER_SIZED_INT cuttingplanegeom_key) {
    HCSMVOPINVOKE.HBaseView_SetCuttingPlaneGeomKey(swigCPtr, cuttingplanegeom_key);
  }

  public MVO_POINTER_SIZED_INT GetIntersectPolylinesKey() {return HCSMVOPINVOKE.HBaseView_GetIntersectPolylinesKey(swigCPtr);}

  public void SetIntersectPolylinesKey(MVO_POINTER_SIZED_INT intersectpolylines_key) {
    HCSMVOPINVOKE.HBaseView_SetIntersectPolylinesKey(swigCPtr, intersectpolylines_key);
  }

  public MVO_POINTER_SIZED_INT GetProgressBarKey() {return HCSMVOPINVOKE.HBaseView_GetProgressBarKey(swigCPtr);}

  public void SetProgressBarKey(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HBaseView_SetProgressBarKey(swigCPtr, key);
  }

  public int GetUpdateInterrupted() {
    int ret = HCSMVOPINVOKE.HBaseView_GetUpdateInterrupted(swigCPtr);
    return ret;
  }

  public void SetUpdateInterrupted(int val) {
    HCSMVOPINVOKE.HBaseView_SetUpdateInterrupted(swigCPtr, val);
  }

  public float GetIdleTime() {
    float ret = HCSMVOPINVOKE.HBaseView_GetIdleTime(swigCPtr);
    return ret;
  }

  public void ResetIdleTime() {
    HCSMVOPINVOKE.HBaseView_ResetIdleTime(swigCPtr);
  }

  public HQuickMovesMethod GetQuickMovesMethod() {
    HQuickMovesMethod ret = (HQuickMovesMethod)HCSMVOPINVOKE.HBaseView_GetQuickMovesMethod(swigCPtr);
    return ret;
  }

  public HDebugZBuffer GetDebugZBuffer() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetDebugZBuffer(swigCPtr);
    HDebugZBuffer ret = (cPtr == IntPtr.Zero) ? null : new HDebugZBuffer(cPtr, false);
    return ret;
  }

  public void SetDebugZBuffer(HDebugZBuffer dzb) {
    HCSMVOPINVOKE.HBaseView_SetDebugZBuffer(swigCPtr, HDebugZBuffer.getCPtr(dzb));
  }

  public AxisMode GetAxisMode() {
    AxisMode ret = (AxisMode)HCSMVOPINVOKE.HBaseView_GetAxisMode(swigCPtr);
    return ret;
  }

  public virtual void SetAxisMode(AxisMode mode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetAxisMode(swigCPtr, (int)mode); else HCSMVOPINVOKE.HBaseView_SetAxisModeSwigExplicitHBaseView(swigCPtr, (int)mode);
  }

  public virtual void OnSetAxisMode(AxisMode mode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_OnSetAxisMode(swigCPtr, (int)mode); else HCSMVOPINVOKE.HBaseView_OnSetAxisModeSwigExplicitHBaseView(swigCPtr, (int)mode);
  }

  public void UpdateAxisTriad() {
    HCSMVOPINVOKE.HBaseView_UpdateAxisTriad(swigCPtr);
  }

  public virtual void AdjustAxisWindow(int axis_window_pixels_in, HIntRectangle rect_in) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_AdjustAxisWindow__SWIG_0(swigCPtr, axis_window_pixels_in, HIntRectangle.getCPtr(rect_in)); else HCSMVOPINVOKE.HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_0(swigCPtr, axis_window_pixels_in, HIntRectangle.getCPtr(rect_in));
  }

  public virtual void AdjustAxisWindow(int axis_window_pixels_in) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_AdjustAxisWindow__SWIG_1(swigCPtr, axis_window_pixels_in); else HCSMVOPINVOKE.HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_1(swigCPtr, axis_window_pixels_in);
  }

  public virtual void AdjustAxisWindow() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_AdjustAxisWindow__SWIG_2(swigCPtr); else HCSMVOPINVOKE.HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_2(swigCPtr);
  }

  public static void AdjustAxisWindowCallback(int signal, IntPtr signal_data, IntPtr user_data) {
    HCSMVOPINVOKE.HBaseView_AdjustAxisWindowCallback(signal, signal_data, user_data);
  }

  public static void AdjustWindowCallback(int signal, IntPtr signal_data, IntPtr user_data) {
    HCSMVOPINVOKE.HBaseView_AdjustWindowCallback(signal, signal_data, user_data);
  }

  public HShadowMode GetShadowMode() {
    HShadowMode ret = (HShadowMode)HCSMVOPINVOKE.HBaseView_GetShadowMode(swigCPtr);
    return ret;
  }

  public virtual void SetShadowMode(HShadowMode sm, bool saveMode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowMode__SWIG_0(swigCPtr, (int)sm, saveMode); else HCSMVOPINVOKE.HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_0(swigCPtr, (int)sm, saveMode);
  }

  public virtual void SetShadowMode(HShadowMode sm) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowMode__SWIG_1(swigCPtr, (int)sm); else HCSMVOPINVOKE.HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_1(swigCPtr, (int)sm);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur, int blur_level) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_0(swigCPtr, state, opacity, fading, attenuate, hither, yon, blur, blur_level); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_0(swigCPtr, state, opacity, fading, attenuate, hither, yon, blur, blur_level);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_1(swigCPtr, state, opacity, fading, attenuate, hither, yon, blur); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_1(swigCPtr, state, opacity, fading, attenuate, hither, yon, blur);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate, float hither, float yon) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_2(swigCPtr, state, opacity, fading, attenuate, hither, yon); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_2(swigCPtr, state, opacity, fading, attenuate, hither, yon);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate, float hither) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_3(swigCPtr, state, opacity, fading, attenuate, hither); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_3(swigCPtr, state, opacity, fading, attenuate, hither);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_4(swigCPtr, state, opacity, fading, attenuate); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_4(swigCPtr, state, opacity, fading, attenuate);
  }

  public virtual void SetReflectionPlane(bool state, float opacity, bool fading) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_5(swigCPtr, state, opacity, fading); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_5(swigCPtr, state, opacity, fading);
  }

  public virtual void SetReflectionPlane(bool state, float opacity) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_6(swigCPtr, state, opacity); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_6(swigCPtr, state, opacity);
  }

  public virtual void SetReflectionPlane(bool state) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReflectionPlane__SWIG_7(swigCPtr, state); else HCSMVOPINVOKE.HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_7(swigCPtr, state);
  }

  public MVO_POINTER_SIZED_INT GetDefaultLightKey(int which) {return HCSMVOPINVOKE.HBaseView_GetDefaultLightKey__SWIG_0(swigCPtr, which);}

  public MVO_POINTER_SIZED_INT GetDefaultLightKey() {return HCSMVOPINVOKE.HBaseView_GetDefaultLightKey__SWIG_1(swigCPtr);}

  public bool GetTransparentSelectionBoxMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetTransparentSelectionBoxMode(swigCPtr);
    return ret;
  }

  public void SetTransparentSelectionBoxMode(bool mode) {
    HCSMVOPINVOKE.HBaseView_SetTransparentSelectionBoxMode(swigCPtr, mode);
  }

  public virtual void DeleteSelectionList(bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DeleteSelectionList__SWIG_0(swigCPtr, emit_message); else HCSMVOPINVOKE.HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_0(swigCPtr, emit_message);
  }

  public virtual void DeleteSelectionList() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DeleteSelectionList__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public void RotateOnUpdate(string sname) {
    HCSMVOPINVOKE.HBaseView_RotateOnUpdate(swigCPtr, sname);
  }

  public virtual void SetWindowColor(HPoint rgb, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColor__SWIG_0(swigCPtr, HPoint.getCPtr(rgb), emit_message); else HCSMVOPINVOKE.HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(rgb), emit_message);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowColor(HPoint rgb) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColor__SWIG_1(swigCPtr, HPoint.getCPtr(rgb)); else HCSMVOPINVOKE.HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_1(swigCPtr, HPoint.getCPtr(rgb));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowColor(HPoint rgbtop, HPoint rgbbottom, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColor__SWIG_2(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), emit_message); else HCSMVOPINVOKE.HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_2(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), emit_message);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowColor(HPoint rgbtop, HPoint rgbbottom) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColor__SWIG_3(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom)); else HCSMVOPINVOKE.HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_3(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowColorRange(HPoint rgbtop, HPoint rgbbottom, int percentage, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColorRange__SWIG_0(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), percentage, emit_message); else HCSMVOPINVOKE.HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), percentage, emit_message);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowColorRange(HPoint rgbtop, HPoint rgbbottom, int percentage) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColorRange__SWIG_1(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), percentage); else HCSMVOPINVOKE.HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_1(swigCPtr, HPoint.getCPtr(rgbtop), HPoint.getCPtr(rgbbottom), percentage);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetWindowMaterial(string name, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowMaterial__SWIG_0(swigCPtr, name, emit_message); else HCSMVOPINVOKE.HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_0(swigCPtr, name, emit_message);
  }

  public virtual void SetWindowMaterial(string name) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowMaterial__SWIG_1(swigCPtr, name); else HCSMVOPINVOKE.HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_1(swigCPtr, name);
  }

  public virtual void SetWindowColorFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetWindowColorFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SetWindowColorFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public void GetWindowColor(HPoint color_out) {
    HCSMVOPINVOKE.HBaseView_GetWindowColor__SWIG_0(swigCPtr, HPoint.getCPtr(color_out));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetWindowColor(HPoint color_top, HPoint color_bottom) {
    HCSMVOPINVOKE.HBaseView_GetWindowColor__SWIG_1(swigCPtr, HPoint.getCPtr(color_top), HPoint.getCPtr(color_bottom));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetWindowColor(HPoint color_top, HPoint color_bottom, int[] percentage) {
    HCSMVOPINVOKE.HBaseView_GetWindowColor__SWIG_2(swigCPtr, HPoint.getCPtr(color_top), HPoint.getCPtr(color_bottom), percentage);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetWindowMaterial(System.Text.StringBuilder out_material, System.Text.StringBuilder out_pattern) {
    HCSMVOPINVOKE.HBaseView_GetWindowMaterial(swigCPtr, out_material, out_pattern);
  }

  public void SetOperator(HBaseOperator NewOperator) {
    HCSMVOPINVOKE.HBaseView_SetOperator(swigCPtr, HBaseOperator.getCPtr(NewOperator));
  }

  public void SetCurrentOperator(HBaseOperator NewOperator) {
    HCSMVOPINVOKE.HBaseView_SetCurrentOperator(swigCPtr, HBaseOperator.getCPtr(NewOperator));
  }

  public HBaseOperator GetOperator() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetOperator(swigCPtr);
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public HBaseOperator GetCurrentOperator() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetCurrentOperator(swigCPtr);
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetAxisTriadKey() {return HCSMVOPINVOKE.HBaseView_GetAxisTriadKey(swigCPtr);}

  public bool GetHideOverlappedText() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetHideOverlappedText(swigCPtr);
    return ret;
  }

  public void SetHideOverlappedText(bool hide) {
    HCSMVOPINVOKE.HBaseView_SetHideOverlappedText(swigCPtr, hide);
  }

  public void SetNavCube(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetNavCube(swigCPtr, onoff);
  }

  public bool GetSmoothTransition() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSmoothTransition(swigCPtr);
    return ret;
  }

  public void SetSmoothTransition(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetSmoothTransition(swigCPtr, onoff);
  }

  public void SetSmoothTransitionDuration(float duration) {
    HCSMVOPINVOKE.HBaseView_SetSmoothTransitionDuration(swigCPtr, duration);
  }

  public float GetSmoothTransitionDuration() {
    float ret = HCSMVOPINVOKE.HBaseView_GetSmoothTransitionDuration(swigCPtr);
    return ret;
  }

  public bool IsLightFollowCamera() {
    bool ret = HCSMVOPINVOKE.HBaseView_IsLightFollowCamera(swigCPtr);
    return ret;
  }

  public void SetLightFollowsCamera(bool onoroff) {
    HCSMVOPINVOKE.HBaseView_SetLightFollowsCamera(swigCPtr, onoroff);
  }

  public void SetLightCount(int count) {
    HCSMVOPINVOKE.HBaseView_SetLightCount(swigCPtr, count);
  }

  public int GetLightCount() {
    int ret = HCSMVOPINVOKE.HBaseView_GetLightCount(swigCPtr);
    return ret;
  }

  public virtual void CameraPositionChanged(bool emit_message, bool smooth_camera_transition) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_CameraPositionChanged__SWIG_0(swigCPtr, emit_message, smooth_camera_transition); else HCSMVOPINVOKE.HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_0(swigCPtr, emit_message, smooth_camera_transition);
  }

  public virtual void CameraPositionChanged(bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_CameraPositionChanged__SWIG_1(swigCPtr, emit_message); else HCSMVOPINVOKE.HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_1(swigCPtr, emit_message);
  }

  public virtual void CameraPositionChanged() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_CameraPositionChanged__SWIG_2(swigCPtr); else HCSMVOPINVOKE.HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_2(swigCPtr);
  }

  public virtual void PrepareForCameraChange() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_PrepareForCameraChange(swigCPtr); else HCSMVOPINVOKE.HBaseView_PrepareForCameraChangeSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void SetCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, string proj) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCamera__SWIG_0(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj); else HCSMVOPINVOKE.HBaseView_SetCameraSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetInitialCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, string proj) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetInitialCamera(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj); else HCSMVOPINVOKE.HBaseView_SetInitialCameraSwigExplicitHBaseView(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetCamera(HPoint pos, HPoint tar, HPoint up, float[] fieldx, float[] fieldy, System.Text.StringBuilder proj) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_GetCamera__SWIG_0(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj); else HCSMVOPINVOKE.HBaseView_GetCameraSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(pos), HPoint.getCPtr(tar), HPoint.getCPtr(up), fieldx, fieldy, proj);
  }

  public virtual void SetCamera(HCamera camera) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCamera__SWIG_1(swigCPtr, HCamera.getCPtr(camera)); else HCSMVOPINVOKE.HBaseView_SetCameraSwigExplicitHBaseView__SWIG_1(swigCPtr, HCamera.getCPtr(camera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetCamera(HCamera camera) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_GetCamera__SWIG_1(swigCPtr, HCamera.getCPtr(camera)); else HCSMVOPINVOKE.HBaseView_GetCameraSwigExplicitHBaseView__SWIG_1(swigCPtr, HCamera.getCPtr(camera));
  }

  public virtual void SetCameraFromMessage(string data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCameraFromMessage(swigCPtr, data, data_length); else HCSMVOPINVOKE.HBaseView_SetCameraFromMessageSwigExplicitHBaseView(swigCPtr, data, data_length);
  }

  public virtual void InsertHSFData(string segment, string in_data, uint data_length, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_InsertHSFData__SWIG_0(swigCPtr, segment, in_data, data_length, emit_message); else HCSMVOPINVOKE.HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_0(swigCPtr, segment, in_data, data_length, emit_message);
  }

  public virtual void InsertHSFData(string segment, string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_InsertHSFData__SWIG_1(swigCPtr, segment, in_data, data_length); else HCSMVOPINVOKE.HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_1(swigCPtr, segment, in_data, data_length);
  }

  public virtual void InsertHSFDataFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_InsertHSFDataFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_InsertHSFDataFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void EmitHSFData(string segment, string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitHSFData(swigCPtr, segment, in_data, data_length); else HCSMVOPINVOKE.HBaseView_EmitHSFDataSwigExplicitHBaseView(swigCPtr, segment, in_data, data_length);
  }

  public virtual void SetRenderMode(HRenderMode NewRenderMode, bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetRenderMode__SWIG_0(swigCPtr, (int)NewRenderMode, emit_message); else HCSMVOPINVOKE.HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_0(swigCPtr, (int)NewRenderMode, emit_message);
  }

  public virtual void SetRenderMode(HRenderMode NewRenderMode) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetRenderMode__SWIG_1(swigCPtr, (int)NewRenderMode); else HCSMVOPINVOKE.HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_1(swigCPtr, (int)NewRenderMode);
  }

  public virtual void SetRenderModeFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetRenderModeFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SetRenderModeFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void EmitFlushMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitFlushMessage(swigCPtr); else HCSMVOPINVOKE.HBaseView_EmitFlushMessageSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void FlushFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_FlushFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_FlushFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void Flush(bool emit_message) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Flush__SWIG_0(swigCPtr, emit_message); else HCSMVOPINVOKE.HBaseView_FlushSwigExplicitHBaseView__SWIG_0(swigCPtr, emit_message);
  }

  public virtual void Flush() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Flush__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_FlushSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public void SetEmitMessageFunction(SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void new_emit_message_function, IntPtr user_data) {
    HCSMVOPINVOKE.HBaseView_SetEmitMessageFunction__SWIG_0(swigCPtr, SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void.getCPtr(new_emit_message_function), user_data);
  }

  public void SetEmitMessageFunction(SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void new_emit_message_function) {
    HCSMVOPINVOKE.HBaseView_SetEmitMessageFunction__SWIG_1(swigCPtr, SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void.getCPtr(new_emit_message_function));
  }

  public bool EmittingMessages() {
    bool ret = HCSMVOPINVOKE.HBaseView_EmittingMessages(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void GetEmitMessageFunction() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetEmitMessageFunction(swigCPtr);
    SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_q_const__char_unsigned_int_p_void__void(cPtr, false);
    return ret;
  }

  public IntPtr GetEmitMessageFunctionUserData() {return new IntPtr((int)HCSMVOPINVOKE.HBaseView_GetEmitMessageFunctionUserData(swigCPtr));}

  public virtual void EmitSelectMessage(MVO_POINTER_SIZED_INT key, bool isSelect) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitSelectMessage(swigCPtr, key, isSelect); else HCSMVOPINVOKE.HBaseView_EmitSelectMessageSwigExplicitHBaseView(swigCPtr, key, isSelect);
  }

  public virtual void SelectFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SelectFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SelectFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void EmitDeSelectAllMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitDeSelectAllMessage(swigCPtr); else HCSMVOPINVOKE.HBaseView_EmitDeSelectAllMessageSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void EmitDeleteSelectionListMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitDeleteSelectionListMessage(swigCPtr); else HCSMVOPINVOKE.HBaseView_EmitDeleteSelectionListMessageSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void DeleteSelectionListFromMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DeleteSelectionListFromMessage(swigCPtr); else HCSMVOPINVOKE.HBaseView_DeleteSelectionListFromMessageSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void DeSelectAllFromMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DeSelectAllFromMessage(swigCPtr); else HCSMVOPINVOKE.HBaseView_DeSelectAllFromMessageSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void EmitSetModellingMatrixMessage(MVO_POINTER_SIZED_INT key) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitSetModellingMatrixMessage__SWIG_0(swigCPtr, key); else HCSMVOPINVOKE.HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_0(swigCPtr, key);
  }

  public virtual void EmitSetModellingMatrixMessage() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitSetModellingMatrixMessage__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public virtual void EmitSegment(MVO_POINTER_SIZED_INT key, bool emit_contents_only) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitSegment__SWIG_0(swigCPtr, key, emit_contents_only); else HCSMVOPINVOKE.HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_0(swigCPtr, key, emit_contents_only);
  }

  public virtual void EmitSegment(MVO_POINTER_SIZED_INT key) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitSegment__SWIG_1(swigCPtr, key); else HCSMVOPINVOKE.HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_1(swigCPtr, key);
  }

  public virtual void EmitDeleteByKeyMessage(MVO_POINTER_SIZED_INT key) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_EmitDeleteByKeyMessage(swigCPtr, key); else HCSMVOPINVOKE.HBaseView_EmitDeleteByKeyMessageSwigExplicitHBaseView(swigCPtr, key);
  }

  public virtual void DeleteByKeyFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DeleteByKeyFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_DeleteByKeyFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public virtual void SetModellingMatrixFromMessage(string in_data, uint data_length) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetModellingMatrixFromMessage(swigCPtr, in_data, data_length); else HCSMVOPINVOKE.HBaseView_SetModellingMatrixFromMessageSwigExplicitHBaseView(swigCPtr, in_data, data_length);
  }

  public SWIGTYPE_p_HSharedKey GetSharedKey() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetSharedKey(swigCPtr);
    SWIGTYPE_p_HSharedKey ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HSharedKey(cPtr, false);
    return ret;
  }

  public virtual void StartSharedKey() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_StartSharedKey(swigCPtr); else HCSMVOPINVOKE.HBaseView_StartSharedKeySwigExplicitHBaseView(swigCPtr);
  }

  public virtual void Animate(int animation_steps, HBaseView.HAnimateMode animate_flags, int MaxRotation) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Animate__SWIG_0(swigCPtr, animation_steps, (int)animate_flags, MaxRotation); else HCSMVOPINVOKE.HBaseView_AnimateSwigExplicitHBaseView__SWIG_0(swigCPtr, animation_steps, (int)animate_flags, MaxRotation);
  }

  public virtual void Animate(int animation_steps, HBaseView.HAnimateMode animate_flags) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Animate__SWIG_1(swigCPtr, animation_steps, (int)animate_flags); else HCSMVOPINVOKE.HBaseView_AnimateSwigExplicitHBaseView__SWIG_1(swigCPtr, animation_steps, (int)animate_flags);
  }

  public virtual void Animate(int animation_steps) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Animate__SWIG_2(swigCPtr, animation_steps); else HCSMVOPINVOKE.HBaseView_AnimateSwigExplicitHBaseView__SWIG_2(swigCPtr, animation_steps);
  }

  public virtual void Animate() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_Animate__SWIG_3(swigCPtr); else HCSMVOPINVOKE.HBaseView_AnimateSwigExplicitHBaseView__SWIG_3(swigCPtr);
  }

  public virtual void SetGeometryChanged() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetGeometryChanged(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetGeometryChangedSwigExplicitHBaseView(swigCPtr);
  }

  public bool GetSceneBoundingSet() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSceneBoundingSet(swigCPtr);
    return ret;
  }

  public void SetSceneBounding(HPoint min, HPoint max) {
    HCSMVOPINVOKE.HBaseView_SetSceneBounding(swigCPtr, HPoint.getCPtr(min), HPoint.getCPtr(max));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InvalidateSceneBounding() {
    HCSMVOPINVOKE.HBaseView_InvalidateSceneBounding(swigCPtr);
  }

  public void SetFastMarkerDrawing(bool b_fast) {
    HCSMVOPINVOKE.HBaseView_SetFastMarkerDrawing(swigCPtr, b_fast);
  }

  public bool GetFastMarkerDrawing() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFastMarkerDrawing(swigCPtr);
    return ret;
  }

  public void SetDoubleBuffering(bool double_buffer) {
    HCSMVOPINVOKE.HBaseView_SetDoubleBuffering(swigCPtr, double_buffer);
  }

  public virtual void ClearGeometryChanged() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_ClearGeometryChanged(swigCPtr); else HCSMVOPINVOKE.HBaseView_ClearGeometryChangedSwigExplicitHBaseView(swigCPtr);
  }

  public virtual bool GeometryChanged() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GeometryChanged(swigCPtr) : HCSMVOPINVOKE.HBaseView_GeometryChangedSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public uint SetSignalNotify(int signal, HCSMVO.HSignalNotifyFunction callback, IntPtr user_data) {
    uint ret = HCSMVOPINVOKE.HBaseView_SetSignalNotify(swigCPtr, signal, callback, user_data);
    return ret;
  }

  public void UnSetSignalNotify(uint cookie) {
    HCSMVOPINVOKE.HBaseView_UnSetSignalNotify(swigCPtr, cookie);
  }

  public void SetColorInterpolation(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetColorInterpolation(swigCPtr, onoff);
  }

  public void SetColorIndexInterpolation(bool onoff, bool isolines) {
    HCSMVOPINVOKE.HBaseView_SetColorIndexInterpolation__SWIG_0(swigCPtr, onoff, isolines);
  }

  public void SetColorIndexInterpolation(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetColorIndexInterpolation__SWIG_1(swigCPtr, onoff);
  }

  public bool GetColorIndexInterpolation(System.Text.StringBuilder option) {
    bool ret = HCSMVOPINVOKE.HBaseView_GetColorIndexInterpolation__SWIG_0(swigCPtr, option);
    return ret;
  }

  public bool GetColorIndexInterpolation() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetColorIndexInterpolation__SWIG_1(swigCPtr);
    return ret;
  }

  public bool GetFrameBufferEffectsOptions(System.Text.StringBuilder options, int[] border) {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFrameBufferEffectsOptions__SWIG_0(swigCPtr, options, border);
    return ret;
  }

  public bool GetFrameBufferEffectsOptions(System.Text.StringBuilder options) {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFrameBufferEffectsOptions__SWIG_1(swigCPtr, options);
    return ret;
  }

  public bool GetFrameBufferEffectsOptions() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFrameBufferEffectsOptions__SWIG_2(swigCPtr);
    return ret;
  }

  public void Notify(int signal, IntPtr signal_data) {
    HCSMVOPINVOKE.HBaseView_Notify__SWIG_0(swigCPtr, signal, signal_data);
  }

  public void Notify(int signal) {
    HCSMVOPINVOKE.HBaseView_Notify__SWIG_1(swigCPtr, signal);
  }

  public override int UpdateEvent(bool antialias, bool forceUpdate) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_UpdateEvent__SWIG_0(swigCPtr, antialias, forceUpdate) : HCSMVOPINVOKE.HBaseView_UpdateEventSwigExplicitHBaseView__SWIG_0(swigCPtr, antialias, forceUpdate));
    return ret;
  }

  public int UpdateEvent(bool antialias) {
    int ret = HCSMVOPINVOKE.HBaseView_UpdateEvent__SWIG_1(swigCPtr, antialias);
    return ret;
  }

  public int UpdateEvent() {
    int ret = HCSMVOPINVOKE.HBaseView_UpdateEvent__SWIG_2(swigCPtr);
    return ret;
  }

  public bool GetUpdateRequested() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetUpdateRequested(swigCPtr);
    return ret;
  }

  public void RequestUpdate() {
    HCSMVOPINVOKE.HBaseView_RequestUpdate(swigCPtr);
  }

  public void ClearUpdateRequest() {
    HCSMVOPINVOKE.HBaseView_ClearUpdateRequest(swigCPtr);
  }

  public void SetSuppressUpdate(bool suppress) {
    HCSMVOPINVOKE.HBaseView_SetSuppressUpdate(swigCPtr, suppress);
  }

  public bool GetSuppressUpdate() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSuppressUpdate(swigCPtr);
    return ret;
  }

  public void SetSuppressUpdateTick(bool suppress) {
    HCSMVOPINVOKE.HBaseView_SetSuppressUpdateTick(swigCPtr, suppress);
  }

  public bool GetSuppressUpdateTick() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSuppressUpdateTick(swigCPtr);
    return ret;
  }

  public void SetViewUpdateMode(ViewUpdateMode mode, float rate) {
    HCSMVOPINVOKE.HBaseView_SetViewUpdateMode__SWIG_0(swigCPtr, (int)mode, rate);
  }

  public void SetViewUpdateMode(ViewUpdateMode mode) {
    HCSMVOPINVOKE.HBaseView_SetViewUpdateMode__SWIG_1(swigCPtr, (int)mode);
  }

  public ViewUpdateMode GetViewUpdateMode() {
    ViewUpdateMode ret = (ViewUpdateMode)HCSMVOPINVOKE.HBaseView_GetViewUpdateMode(swigCPtr);
    return ret;
  }

  public static bool UpdateTick(float request_time, float actual_time, IntPtr user_data) {
    bool ret = HCSMVOPINVOKE.HBaseView_UpdateTick(request_time, actual_time, user_data);
    return ret;
  }

  public static bool StreamProgressCallback(uint so_far, uint expected, IntPtr user_data) {
    bool ret = HCSMVOPINVOKE.HBaseView_StreamProgressCallback(so_far, expected, user_data);
    return ret;
  }

  public void FlushProgressBar() {
    HCSMVOPINVOKE.HBaseView_FlushProgressBar(swigCPtr);
  }

  public HUndoManager GetUndoManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetUndoManager(swigCPtr);
    HUndoManager ret = (cPtr == IntPtr.Zero) ? null : new HUndoManager(cPtr, false);
    return ret;
  }

  public HEventManager GetEventManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetEventManager(swigCPtr);
    HEventManager ret = (cPtr == IntPtr.Zero) ? null : new HEventManager(cPtr, false);
    return ret;
  }

  public HObjectManager GetHObjectManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetHObjectManager(swigCPtr);
    HObjectManager ret = (cPtr == IntPtr.Zero) ? null : new HObjectManager(cPtr, false);
    return ret;
  }

  public bool GetDynamicHighlighting() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetDynamicHighlighting(swigCPtr);
    return ret;
  }

  public void SetDynamicHighlighting(bool state) {
    HCSMVOPINVOKE.HBaseView_SetDynamicHighlighting(swigCPtr, state);
  }

  public virtual int OnNoButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnNoButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnNoButtonDownAndMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnLButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnLButtonDownAndMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLButtonDblClk(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnLButtonDblClk(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnLButtonDblClkSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnRButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnRButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnRButtonDownAndMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnMButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnMButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnMButtonDownAndMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLRButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnLRButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnLRButtonDownAndMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnLButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnLButtonDownSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnMouseMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnMouseMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnMouseMoveSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnLButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnLButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnLButtonUpSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnMouseWheel(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnMouseWheel(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnMouseWheelSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool ComputeReasonableTarget(HPoint new_tar, HPoint mouse_win, HPoint tar_orig) {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_ComputeReasonableTarget(swigCPtr, HPoint.getCPtr(new_tar), HPoint.getCPtr(mouse_win), HPoint.getCPtr(tar_orig)) : HCSMVOPINVOKE.HBaseView_ComputeReasonableTargetSwigExplicitHBaseView(swigCPtr, HPoint.getCPtr(new_tar), HPoint.getCPtr(mouse_win), HPoint.getCPtr(tar_orig)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ComputeNewField(float[] width, float[] height, HPoint new_tar, HCamera old_camera) {
    HCSMVOPINVOKE.HBaseView_ComputeNewField(swigCPtr, width, height, HPoint.getCPtr(new_tar), HCamera.getCPtr(old_camera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int OnKeyDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnKeyDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnKeyDownSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int OnKeyUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_OnKeyUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HBaseView_OnKeyUpSwigExplicitHBaseView(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetShadowColor(HPoint color) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowColor(swigCPtr, HPoint.getCPtr(color)); else HCSMVOPINVOKE.HBaseView_SetShadowColorSwigExplicitHBaseView(swigCPtr, HPoint.getCPtr(color));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetShadowLightDirection(bool explicit_light, HPoint direction) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowLightDirection__SWIG_0(swigCPtr, explicit_light, HPoint.getCPtr(direction)); else HCSMVOPINVOKE.HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(swigCPtr, explicit_light, HPoint.getCPtr(direction));
  }

  public virtual void SetShadowLightDirection(bool explicit_light) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowLightDirection__SWIG_1(swigCPtr, explicit_light); else HCSMVOPINVOKE.HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(swigCPtr, explicit_light);
  }

  public virtual bool GetShadowLightDirection(HPoint direction) {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetShadowLightDirection__SWIG_0(swigCPtr, HPoint.getCPtr(direction)) : HCSMVOPINVOKE.HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(swigCPtr, HPoint.getCPtr(direction)));
    return ret;
  }

  public virtual bool GetShadowLightDirection() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetShadowLightDirection__SWIG_1(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(swigCPtr));
    return ret;
  }

  public virtual void SetShadowIgnoresTransparency(bool ignore) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowIgnoresTransparency(swigCPtr, ignore); else HCSMVOPINVOKE.HBaseView_SetShadowIgnoresTransparencySwigExplicitHBaseView(swigCPtr, ignore);
  }

  public virtual bool GetShadowIgnoresTransparency() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetShadowIgnoresTransparency(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetShadowIgnoresTransparencySwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void DoDynamicHighlighting(HPoint mouse_pos) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_DoDynamicHighlighting(swigCPtr, HPoint.getCPtr(mouse_pos)); else HCSMVOPINVOKE.HBaseView_DoDynamicHighlightingSwigExplicitHBaseView(swigCPtr, HPoint.getCPtr(mouse_pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetShadowResolution(int res) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowResolution(swigCPtr, res); else HCSMVOPINVOKE.HBaseView_SetShadowResolutionSwigExplicitHBaseView(swigCPtr, res);
  }

  public virtual void SetShadowBlurring(int blur) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowBlurring(swigCPtr, blur); else HCSMVOPINVOKE.HBaseView_SetShadowBlurringSwigExplicitHBaseView(swigCPtr, blur);
  }

  public virtual void InternalUpdate() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_InternalUpdate(swigCPtr); else HCSMVOPINVOKE.HBaseView_InternalUpdateSwigExplicitHBaseView(swigCPtr);
  }

  public virtual void SetShadowRegenerationMode(bool onoff) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowRegenerationMode(swigCPtr, onoff); else HCSMVOPINVOKE.HBaseView_SetShadowRegenerationModeSwigExplicitHBaseView(swigCPtr, onoff);
  }

  public virtual void SetShadowRegenerationToggle() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetShadowRegenerationToggle(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetShadowRegenerationToggleSwigExplicitHBaseView(swigCPtr);
  }

  public bool GetCuttingPlaneRegenerationMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetCuttingPlaneRegenerationMode(swigCPtr);
    return ret;
  }

  public virtual void SetCuttingPlaneRegenerationMode(bool onoff) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCuttingPlaneRegenerationMode(swigCPtr, onoff); else HCSMVOPINVOKE.HBaseView_SetCuttingPlaneRegenerationModeSwigExplicitHBaseView(swigCPtr, onoff);
  }

  public bool GetShadowRegenerationMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetShadowRegenerationMode(swigCPtr);
    return ret;
  }

  public virtual void SetCameraChanged(bool val) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCameraChanged__SWIG_0(swigCPtr, val); else HCSMVOPINVOKE.HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_0(swigCPtr, val);
  }

  public virtual void SetCameraChanged() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetCameraChanged__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public virtual bool GetCameraChanged() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetCameraChanged(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetCameraChangedSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetInvertMouseWheelZoom(bool val) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetInvertMouseWheelZoom__SWIG_0(swigCPtr, val); else HCSMVOPINVOKE.HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_0(swigCPtr, val);
  }

  public virtual void SetInvertMouseWheelZoom() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetInvertMouseWheelZoom__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_1(swigCPtr);
  }

  public virtual bool GetInvertMouseWheelZoom() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetInvertMouseWheelZoom(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetInvertMouseWheelZoomSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetAxisManipulateOperator(HOpCameraManipulate op) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetAxisManipulateOperator(swigCPtr, HOpCameraManipulate.getCPtr(op)); else HCSMVOPINVOKE.HBaseView_SetAxisManipulateOperatorSwigExplicitHBaseView(swigCPtr, HOpCameraManipulate.getCPtr(op));
  }

  public virtual void SetVisibilitySelectionMode(bool onoff) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetVisibilitySelectionMode(swigCPtr, onoff); else HCSMVOPINVOKE.HBaseView_SetVisibilitySelectionModeSwigExplicitHBaseView(swigCPtr, onoff);
  }

  public virtual bool GetVisibilitySelectionMode() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetVisibilitySelectionMode(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetVisibilitySelectionModeSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetRelatedSelectionLimit(int limit) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetRelatedSelectionLimit(swigCPtr, limit); else HCSMVOPINVOKE.HBaseView_SetRelatedSelectionLimitSwigExplicitHBaseView(swigCPtr, limit);
  }

  public virtual int GetRelatedSelectionLimit() {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetRelatedSelectionLimit(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetRelatedSelectionLimitSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetDetailSelection(bool onoff) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetDetailSelection(swigCPtr, onoff); else HCSMVOPINVOKE.HBaseView_SetDetailSelectionSwigExplicitHBaseView(swigCPtr, onoff);
  }

  public virtual bool GetDetailSelectionMode() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetDetailSelectionMode(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetDetailSelectionModeSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetRespectSelectionCulling(bool onoff) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetRespectSelectionCulling(swigCPtr, onoff); else HCSMVOPINVOKE.HBaseView_SetRespectSelectionCullingSwigExplicitHBaseView(swigCPtr, onoff);
  }

  public virtual bool GetRespectSelectionCulling() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetRespectSelectionCulling(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetRespectSelectionCullingSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SmartFilterCircumcuboid(string segment, string defaults, HPoint bottomfrontleft, HPoint topbackright) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SmartFilterCircumcuboid(swigCPtr, segment, defaults, HPoint.getCPtr(bottomfrontleft), HPoint.getCPtr(topbackright)); else HCSMVOPINVOKE.HBaseView_SmartFilterCircumcuboidSwigExplicitHBaseView(swigCPtr, segment, defaults, HPoint.getCPtr(bottomfrontleft), HPoint.getCPtr(topbackright));
  }

  public virtual int SetupHandlesEvent(HBaseView view, MVO_POINTER_SIZED_INT key, bool complex) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_SetupHandlesEvent(swigCPtr, HBaseView.getCPtr(view), key, complex) : HCSMVOPINVOKE.HBaseView_SetupHandlesEventSwigExplicitHBaseView(swigCPtr, HBaseView.getCPtr(view), key, complex));
    return ret;
  }

  public virtual bool GetHasObjects() {
    bool ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetHasObjects(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetHasObjectsSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetHasObjects(bool hasobjects) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHasObjects(swigCPtr, hasobjects); else HCSMVOPINVOKE.HBaseView_SetHasObjectsSwigExplicitHBaseView(swigCPtr, hasobjects);
  }

  public virtual void SetHandleOperator(HBaseOperator op) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHandleOperator(swigCPtr, HBaseOperator.getCPtr(op)); else HCSMVOPINVOKE.HBaseView_SetHandleOperatorSwigExplicitHBaseView(swigCPtr, HBaseOperator.getCPtr(op));
  }

  public virtual HBaseOperator GetHandleOperator() {
    IntPtr cPtr = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetHandleOperator(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetHandleOperatorSwigExplicitHBaseView(swigCPtr));
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public virtual float GetDefaultSelectionProximity() {
    float ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetDefaultSelectionProximity(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetDefaultSelectionProximitySwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetDefaultSelectionProximity(float selectionproximity) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetDefaultSelectionProximity(swigCPtr, selectionproximity); else HCSMVOPINVOKE.HBaseView_SetDefaultSelectionProximitySwigExplicitHBaseView(swigCPtr, selectionproximity);
  }

  public bool GetAllowInteractiveShadows() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetAllowInteractiveShadows(swigCPtr);
    return ret;
  }

  public void SetAllowInteractiveShadows(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetAllowInteractiveShadows(swigCPtr, onoff);
  }

  public HShadowRenderingMode GetShadowRenderingMode() {
    HShadowRenderingMode ret = (HShadowRenderingMode)HCSMVOPINVOKE.HBaseView_GetShadowRenderingMode(swigCPtr);
    return ret;
  }

  public void SetShadowRenderingMode(HShadowRenderingMode mode) {
    HCSMVOPINVOKE.HBaseView_SetShadowRenderingMode(swigCPtr, (int)mode);
  }

  public bool GetAllowInteractiveCutGeometry() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetAllowInteractiveCutGeometry(swigCPtr);
    return ret;
  }

  public void SetAllowInteractiveCutGeometry(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetAllowInteractiveCutGeometry(swigCPtr, onoff);
  }

  public HCutGeometryVisibility GetCutGeometryVisibility() {
    HCutGeometryVisibility ret = (HCutGeometryVisibility)HCSMVOPINVOKE.HBaseView_GetCutGeometryVisibility(swigCPtr);
    return ret;
  }

  public void SetCutGeometryVisibility(HCutGeometryVisibility visibility) {
    HCSMVOPINVOKE.HBaseView_SetCutGeometryVisibility(swigCPtr, (int)visibility);
  }

  public IntPtr GetWindowHandle() {return new IntPtr((int)HCSMVOPINVOKE.HBaseView_GetWindowHandle(swigCPtr));}

  public bool GetInitialCameraSet() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetInitialCameraSet(swigCPtr);
    return ret;
  }

  public virtual int ObjectMovedEvent(HBaseView view, MVO_POINTER_SIZED_INT key, HPoint pos) {
    int ret = ((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_ObjectMovedEvent(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(pos)) : HCSMVOPINVOKE.HBaseView_ObjectMovedEventSwigExplicitHBaseView(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(pos)));
    return ret;
  }

  public void SetRecordCamera(bool rc) {
    HCSMVOPINVOKE.HBaseView_SetRecordCamera(swigCPtr, rc);
  }

  public bool GetRecordMode() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetRecordMode(swigCPtr);
    return ret;
  }

  public void InjectEvent(HEventInfo hevent) {
    HCSMVOPINVOKE.HBaseView_InjectEvent(swigCPtr, HEventInfo.getCPtr(hevent));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetForceFastHiddenLine(bool force) {
    HCSMVOPINVOKE.HBaseView_SetForceFastHiddenLine(swigCPtr, force);
  }

  public bool GetForceFastHiddenLine() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetForceFastHiddenLine(swigCPtr);
    return ret;
  }

  public void SetTransparency(string text, bool fast_z_sort) {
    HCSMVOPINVOKE.HBaseView_SetTransparency__SWIG_0(swigCPtr, text, fast_z_sort);
  }

  public void SetTransparency(string text) {
    HCSMVOPINVOKE.HBaseView_SetTransparency__SWIG_1(swigCPtr, text);
  }

  public void SetLineAntialiasing(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetLineAntialiasing(swigCPtr, onoff);
  }

  public bool GetLineAntialiasing() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetLineAntialiasing(swigCPtr);
    return ret;
  }

  public void SetTextAntialiasing(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetTextAntialiasing(swigCPtr, onoff);
  }

  public void SetDepthOfField(bool onoff, float strength) {
    HCSMVOPINVOKE.HBaseView_SetDepthOfField__SWIG_0(swigCPtr, onoff, strength);
  }

  public void SetDepthOfField(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetDepthOfField__SWIG_1(swigCPtr, onoff);
  }

  public void SetDepthOfFieldRange(float near, float far) {
    HCSMVOPINVOKE.HBaseView_SetDepthOfFieldRange__SWIG_0(swigCPtr, near, far);
  }

  public void SetDepthOfFieldRange(float near) {
    HCSMVOPINVOKE.HBaseView_SetDepthOfFieldRange__SWIG_1(swigCPtr, near);
  }

  public void SetDepthOfFieldRange() {
    HCSMVOPINVOKE.HBaseView_SetDepthOfFieldRange__SWIG_2(swigCPtr);
  }

  public bool GetTextAntialiasing() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetTextAntialiasing(swigCPtr);
    return ret;
  }

  public void SetIsoDefault(ViewMode vm) {
    HCSMVOPINVOKE.HBaseView_SetIsoDefault(swigCPtr, (int)vm);
  }

  public ViewMode GetIsoDefault() {
    ViewMode ret = (ViewMode)HCSMVOPINVOKE.HBaseView_GetIsoDefault(swigCPtr);
    return ret;
  }

  public void SetCullingThreshold(int cullingthreshold) {
    HCSMVOPINVOKE.HBaseView_SetCullingThreshold(swigCPtr, cullingthreshold);
  }

  public int GetCullingThreshold() {
    int ret = HCSMVOPINVOKE.HBaseView_GetCullingThreshold(swigCPtr);
    return ret;
  }

  public void SetHardExtent(int cutoff) {
    HCSMVOPINVOKE.HBaseView_SetHardExtent(swigCPtr, cutoff);
  }

  public int GetHardExtent() {
    int ret = HCSMVOPINVOKE.HBaseView_GetHardExtent(swigCPtr);
    return ret;
  }

  public void BeginShellSelection() {
    HCSMVOPINVOKE.HBaseView_BeginShellSelection(swigCPtr);
  }

  public void EndShellSelection() {
    HCSMVOPINVOKE.HBaseView_EndShellSelection(swigCPtr);
  }

  public HSelectionSet GetHighlightSelection() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetHighlightSelection(swigCPtr);
    HSelectionSet ret = (cPtr == IntPtr.Zero) ? null : new HSelectionSet(cPtr, false);
    return ret;
  }

  public void SetViewAxis(HPoint front_axis, HPoint top_axis) {
    HCSMVOPINVOKE.HBaseView_SetViewAxis(swigCPtr, HPoint.getCPtr(front_axis), HPoint.getCPtr(top_axis));
  }

  public void GetViewAxis(HPoint front_axis, HPoint top_axis) {
    HCSMVOPINVOKE.HBaseView_GetViewAxis(swigCPtr, HPoint.getCPtr(front_axis), HPoint.getCPtr(top_axis));
  }

  public void SetDefaultHSRA() {
    HCSMVOPINVOKE.HBaseView_SetDefaultHSRA(swigCPtr);
  }

  public void SetMaximumUpdateTime(float mut) {
    HCSMVOPINVOKE.HBaseView_SetMaximumUpdateTime(swigCPtr, mut);
  }

  public float GetMaximumUpdateTime() {
    float ret = HCSMVOPINVOKE.HBaseView_GetMaximumUpdateTime(swigCPtr);
    return ret;
  }

  public virtual HSelectionHighlightMode GetHighlightMode() {
    HSelectionHighlightMode ret = (HSelectionHighlightMode)((this.GetType() == typeof(HBaseView)) ? HCSMVOPINVOKE.HBaseView_GetHighlightMode(swigCPtr) : HCSMVOPINVOKE.HBaseView_GetHighlightModeSwigExplicitHBaseView(swigCPtr));
    return ret;
  }

  public virtual void SetHighlightMode(HSelectionHighlightMode m) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetHighlightMode(swigCPtr, (int)m); else HCSMVOPINVOKE.HBaseView_SetHighlightModeSwigExplicitHBaseView(swigCPtr, (int)m);
  }

  public virtual void SetReferenceSelection(bool use_ref) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetReferenceSelection(swigCPtr, use_ref); else HCSMVOPINVOKE.HBaseView_SetReferenceSelectionSwigExplicitHBaseView(swigCPtr, use_ref);
  }

  public bool GetKeyState(uint key, int[] flags) {
    bool ret = HCSMVOPINVOKE.HBaseView_GetKeyState(swigCPtr, key, flags);
    return ret;
  }

  public void ResetKeyState() {
    HCSMVOPINVOKE.HBaseView_ResetKeyState(swigCPtr);
  }

  public void SetFastFitWorld(bool fw) {
    HCSMVOPINVOKE.HBaseView_SetFastFitWorld(swigCPtr, fw);
  }

  public void SetDetailedFitWorld(bool fw) {
    HCSMVOPINVOKE.HBaseView_SetDetailedFitWorld(swigCPtr, fw);
  }

  public bool GetFastFitWorld() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFastFitWorld(swigCPtr);
    return ret;
  }

  public bool GetDetailedFitWorld() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetDetailedFitWorld(swigCPtr);
    return ret;
  }

  public void GetSceneExtents(HPoint min, HPoint max) {
    HCSMVOPINVOKE.HBaseView_GetSceneExtents(swigCPtr, HPoint.getCPtr(min), HPoint.getCPtr(max));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLightScaling(float sv) {
    HCSMVOPINVOKE.HBaseView_SetLightScaling(swigCPtr, sv);
  }

  public void SetXYSizeOverride(int x, int y) {
    HCSMVOPINVOKE.HBaseView_SetXYSizeOverride(swigCPtr, x, y);
  }

  public int GetXSize() {
    int ret = HCSMVOPINVOKE.HBaseView_GetXSize(swigCPtr);
    return ret;
  }

  public int GetYSize() {
    int ret = HCSMVOPINVOKE.HBaseView_GetYSize(swigCPtr);
    return ret;
  }

  public HViewSelectionLevel GetViewSelectionLevel() {
    HViewSelectionLevel ret = (HViewSelectionLevel)HCSMVOPINVOKE.HBaseView_GetViewSelectionLevel(swigCPtr);
    return ret;
  }

  public void SetViewSelectionLevel(HViewSelectionLevel level) {
    HCSMVOPINVOKE.HBaseView_SetViewSelectionLevel(swigCPtr, (int)level);
  }

  public void EnableTargetFrameRate(bool enable, int target, int threshold, int steps) {
    HCSMVOPINVOKE.HBaseView_EnableTargetFrameRate__SWIG_0(swigCPtr, enable, target, threshold, steps);
  }

  public void EnableTargetFrameRate(bool enable, int target, int threshold) {
    HCSMVOPINVOKE.HBaseView_EnableTargetFrameRate__SWIG_1(swigCPtr, enable, target, threshold);
  }

  public void EnableTargetFrameRate(bool enable, int target) {
    HCSMVOPINVOKE.HBaseView_EnableTargetFrameRate__SWIG_2(swigCPtr, enable, target);
  }

  public void EnableTargetFrameRate(bool enable) {
    HCSMVOPINVOKE.HBaseView_EnableTargetFrameRate__SWIG_3(swigCPtr, enable);
  }

  public void EnableTargetFrameRate() {
    HCSMVOPINVOKE.HBaseView_EnableTargetFrameRate__SWIG_4(swigCPtr);
  }

  public float GetFramerate() {
    float ret = HCSMVOPINVOKE.HBaseView_GetFramerate(swigCPtr);
    return ret;
  }

  public FramerateMode GetFramerateMode() {
    FramerateMode ret = (FramerateMode)HCSMVOPINVOKE.HBaseView_GetFramerateMode(swigCPtr);
    return ret;
  }

  public int GetFramerateCullingThreshold() {
    int ret = HCSMVOPINVOKE.HBaseView_GetFramerateCullingThreshold(swigCPtr);
    return ret;
  }

  public int GetFramerateSteps() {
    int ret = HCSMVOPINVOKE.HBaseView_GetFramerateSteps(swigCPtr);
    return ret;
  }

  public bool IsFramerateLodEnabled() {
    bool ret = HCSMVOPINVOKE.HBaseView_IsFramerateLodEnabled(swigCPtr);
    return ret;
  }

  public void SetFramerateMode(FramerateMode mode, float framerate, int cullingthreshold, bool enableLods, int steps, int cutoff) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_0(swigCPtr, (int)mode, framerate, cullingthreshold, enableLods, steps, cutoff);
  }

  public void SetFramerateMode(FramerateMode mode, float framerate, int cullingthreshold, bool enableLods, int steps) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_1(swigCPtr, (int)mode, framerate, cullingthreshold, enableLods, steps);
  }

  public void SetFramerateMode(FramerateMode mode, float framerate, int cullingthreshold, bool enableLods) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_2(swigCPtr, (int)mode, framerate, cullingthreshold, enableLods);
  }

  public void SetFramerateMode(FramerateMode mode, float framerate, int cullingthreshold) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_3(swigCPtr, (int)mode, framerate, cullingthreshold);
  }

  public void SetFramerateMode(FramerateMode mode, float framerate) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_4(swigCPtr, (int)mode, framerate);
  }

  public void SetFramerateMode(FramerateMode mode) {
    HCSMVOPINVOKE.HBaseView_SetFramerateMode__SWIG_5(swigCPtr, (int)mode);
  }

  public bool IsFrameRateEnabled() {
    bool ret = HCSMVOPINVOKE.HBaseView_IsFrameRateEnabled(swigCPtr);
    return ret;
  }

  public bool GetViewActive() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetViewActive(swigCPtr);
    return ret;
  }

  public void cleanupSimpList() {
    HCSMVOPINVOKE.HBaseView_cleanupSimpList(swigCPtr);
  }

  public void SetAnnotationResize(bool value) {
    HCSMVOPINVOKE.HBaseView_SetAnnotationResize(swigCPtr, value);
  }

  public bool GetAnnotationResize() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetAnnotationResize(swigCPtr);
    return ret;
  }

  public bool GetFirstUpdate() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFirstUpdate(swigCPtr);
    return ret;
  }

  public void SetDisplayHandlesOnDblClk(bool dh) {
    HCSMVOPINVOKE.HBaseView_SetDisplayHandlesOnDblClk(swigCPtr, dh);
  }

  public bool HasInitialView() {
    bool ret = HCSMVOPINVOKE.HBaseView_HasInitialView__SWIG_0(swigCPtr);
    return ret;
  }

  public void HasInitialView(bool does_it) {
    HCSMVOPINVOKE.HBaseView_HasInitialView__SWIG_1(swigCPtr, does_it);
  }

  public void ExhaustiveUpdate() {
    HCSMVOPINVOKE.HBaseView_ExhaustiveUpdate(swigCPtr);
  }

  public bool GetUpdateNotFinished() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetUpdateNotFinished(swigCPtr);
    return ret;
  }

  public void SetUpdateNotFinished(bool NotFinished) {
    HCSMVOPINVOKE.HBaseView_SetUpdateNotFinished(swigCPtr, NotFinished);
  }

  public void SetMouseWheelSensitivity(float sensitivity) {
    HCSMVOPINVOKE.HBaseView_SetMouseWheelSensitivity(swigCPtr, sensitivity);
  }

  public float GetMouseWheelSensitivity() {
    float ret = HCSMVOPINVOKE.HBaseView_GetMouseWheelSensitivity(swigCPtr);
    return ret;
  }

  public void SetSplatRendering(bool onoff) {
    HCSMVOPINVOKE.HBaseView_SetSplatRendering(swigCPtr, onoff);
  }

  public bool GetSplatRendering() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetSplatRendering(swigCPtr);
    return ret;
  }

  public void SetSplatSize(int splat_size) {
    HCSMVOPINVOKE.HBaseView_SetSplatSize(swigCPtr, splat_size);
  }

  public int GetSplatSize() {
    int ret = HCSMVOPINVOKE.HBaseView_GetSplatSize(swigCPtr);
    return ret;
  }

  public void SetSplatSymbol(SplatSymbol symbol) {
    HCSMVOPINVOKE.HBaseView_SetSplatSymbol(swigCPtr, (int)symbol);
  }

  public SplatSymbol GetSplatSymbol() {
    SplatSymbol ret = (SplatSymbol)HCSMVOPINVOKE.HBaseView_GetSplatSymbol(swigCPtr);
    return ret;
  }

  public void UpdateFakeHLRColor(HPoint paper_color) {
    HCSMVOPINVOKE.HBaseView_UpdateFakeHLRColor(swigCPtr, HPoint.getCPtr(paper_color));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetHardwareAntialiasing(int antialiasinglevel) {
    HCSMVOPINVOKE.HBaseView_SetHardwareAntialiasing(swigCPtr, antialiasinglevel);
  }

  public int GetHardwareAntialiasing() {
    int ret = HCSMVOPINVOKE.HBaseView_GetHardwareAntialiasing(swigCPtr);
    return ret;
  }

  public static void StaticForceUpdateRequest(IntPtr view_pointer) {
    HCSMVOPINVOKE.HBaseView_StaticForceUpdateRequest(view_pointer);
  }

  public void VisualizeBounding(bool draw_something, MVO_POINTER_SIZED_INT key, int incl_count, MVO_POINTER_SIZED_INT[] incl_path) {
    HCSMVOPINVOKE.HBaseView_VisualizeBounding__SWIG_0(swigCPtr, draw_something, key, incl_count, incl_path);
  }

  public void VisualizeBounding(bool draw_something, MVO_POINTER_SIZED_INT key, int incl_count) {
    HCSMVOPINVOKE.HBaseView_VisualizeBounding__SWIG_1(swigCPtr, draw_something, key, incl_count);
  }

  public void VisualizeBounding(bool draw_something, MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HBaseView_VisualizeBounding__SWIG_2(swigCPtr, draw_something, key);
  }

  public void VisualizeBounding(bool draw_something) {
    HCSMVOPINVOKE.HBaseView_VisualizeBounding__SWIG_3(swigCPtr, draw_something);
  }

  public HPoint GetFakeHLRColor() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseView_GetFakeHLRColor(swigCPtr), true);
    return ret;
  }

  public void SetFakeHLRColor(HPoint color) {
    HCSMVOPINVOKE.HBaseView_SetFakeHLRColor(swigCPtr, HPoint.getCPtr(color));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FocusOnSelection(bool onoff) {
    HCSMVOPINVOKE.HBaseView_FocusOnSelection__SWIG_0(swigCPtr, onoff);
  }

  public void FocusOnSelection() {
    HCSMVOPINVOKE.HBaseView_FocusOnSelection__SWIG_1(swigCPtr);
  }

  public bool GetFocusOnSelection() {
    bool ret = HCSMVOPINVOKE.HBaseView_GetFocusOnSelection(swigCPtr);
    return ret;
  }

  public HTouchManager GetTouchManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HBaseView_GetTouchManager(swigCPtr);
    HTouchManager ret = (cPtr == IntPtr.Zero) ? null : new HTouchManager(cPtr, false);
    return ret;
  }

  protected MVO_POINTER_SIZED_INT m_FakeHLRStyle {
	set { HCSMVOPINVOKE.HBaseView_m_FakeHLRStyle_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_FakeHLRStyle_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_FakeHLRSource {
	set { HCSMVOPINVOKE.HBaseView_m_FakeHLRSource_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_FakeHLRSource_get(swigCPtr); } 
  }

  protected bool m_bCPLineVisibility {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCPLineVisibility_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCPLineVisibility_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bCPFaceVisibility {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCPFaceVisibility_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCPFaceVisibility_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_CPMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_CPMode_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_CPMode_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bCuttingPlanesExist {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCuttingPlanesExist_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCuttingPlanesExist_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bCuttingPlanesVisibility {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCuttingPlanesVisibility_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCuttingPlanesVisibility_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bSpritingAllowed {
    set {
      HCSMVOPINVOKE.HBaseView_m_bSpritingAllowed_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bSpritingAllowed_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bAxisTriadTransparencyAllowed {
    set {
      HCSMVOPINVOKE.HBaseView_m_bAxisTriadTransparencyAllowed_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bAxisTriadTransparencyAllowed_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_AxisWindowSize {
    set {
      HCSMVOPINVOKE.HBaseView_m_AxisWindowSize_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_AxisWindowSize_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bForceFastHiddenLine {
    set {
      HCSMVOPINVOKE.HBaseView_m_bForceFastHiddenLine_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bForceFastHiddenLine_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bLineAntialiasing {
    set {
      HCSMVOPINVOKE.HBaseView_m_bLineAntialiasing_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bLineAntialiasing_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bTextAntialiasing {
    set {
      HCSMVOPINVOKE.HBaseView_m_bTextAntialiasing_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bTextAntialiasing_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bBeginShellSelection {
    set {
      HCSMVOPINVOKE.HBaseView_m_bBeginShellSelection_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bBeginShellSelection_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bDisplayHandlesOnDblClk {
    set {
      HCSMVOPINVOKE.HBaseView_m_bDisplayHandlesOnDblClk_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bDisplayHandlesOnDblClk_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_has_initial_view {
    set {
      HCSMVOPINVOKE.HBaseView_m_has_initial_view_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_has_initial_view_get(swigCPtr);
      return ret;
    } 
  }

  protected HTouchManager m_TouchManager {
    set {
      HCSMVOPINVOKE.HBaseView_m_TouchManager_set(swigCPtr, HTouchManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_TouchManager_get(swigCPtr);
      HTouchManager ret = (cPtr == IntPtr.Zero) ? null : new HTouchManager(cPtr, false);
      return ret;
    } 
  }

  protected int m_HardwareAntialiasing {
    set {
      HCSMVOPINVOKE.HBaseView_m_HardwareAntialiasing_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_HardwareAntialiasing_get(swigCPtr);
      return ret;
    } 
  }

  protected ViewMode m_IsoDefault {
    set {
      HCSMVOPINVOKE.HBaseView_m_IsoDefault_set(swigCPtr, (int)value);
    } 
    get {
      ViewMode ret = (ViewMode)HCSMVOPINVOKE.HBaseView_m_IsoDefault_get(swigCPtr);
      return ret;
    } 
  }

  protected HSelectionHighlightMode m_HighlightMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_HighlightMode_set(swigCPtr, (int)value);
    } 
    get {
      HSelectionHighlightMode ret = (HSelectionHighlightMode)HCSMVOPINVOKE.HBaseView_m_HighlightMode_get(swigCPtr);
      return ret;
    } 
  }

  protected DisplayListType m_DisplayListType {
    set {
      HCSMVOPINVOKE.HBaseView_m_DisplayListType_set(swigCPtr, (int)value);
    } 
    get {
      DisplayListType ret = (DisplayListType)HCSMVOPINVOKE.HBaseView_m_DisplayListType_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bGeometryChanged {
    set {
      HCSMVOPINVOKE.HBaseView_m_bGeometryChanged_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bGeometryChanged_get(swigCPtr);
      return ret;
    } 
  }

  protected HPoint m_SceneBoundingMin {
    set {
      HCSMVOPINVOKE.HBaseView_m_SceneBoundingMin_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_SceneBoundingMin_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected HPoint m_SceneBoundingMax {
    set {
      HCSMVOPINVOKE.HBaseView_m_SceneBoundingMax_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_SceneBoundingMax_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bSceneBoundingSet {
    set {
      HCSMVOPINVOKE.HBaseView_m_bSceneBoundingSet_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bSceneBoundingSet_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bFastFitWorld {
    set {
      HCSMVOPINVOKE.HBaseView_m_bFastFitWorld_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bFastFitWorld_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bDetailedFitWorld {
    set {
      HCSMVOPINVOKE.HBaseView_m_bDetailedFitWorld_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bDetailedFitWorld_get(swigCPtr);
      return ret;
    } 
  }

  protected HImCuttingGeometry m_pHImCuttingGeometry {
    set {
      HCSMVOPINVOKE.HBaseView_m_pHImCuttingGeometry_set(swigCPtr, HImCuttingGeometry.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pHImCuttingGeometry_get(swigCPtr);
      HImCuttingGeometry ret = (cPtr == IntPtr.Zero) ? null : new HImCuttingGeometry(cPtr, false);
      return ret;
    } 
  }

  protected SWIGTYPE_p_HUtilityAntialiasing m_pAntialiasing {
    set {
      HCSMVOPINVOKE.HBaseView_m_pAntialiasing_set(swigCPtr, SWIGTYPE_p_HUtilityAntialiasing.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pAntialiasing_get(swigCPtr);
      SWIGTYPE_p_HUtilityAntialiasing ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HUtilityAntialiasing(cPtr, false);
      return ret;
    } 
  }

  protected HMarkupManager m_pMarkupManager {
    set {
      HCSMVOPINVOKE.HBaseView_m_pMarkupManager_set(swigCPtr, HMarkupManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pMarkupManager_get(swigCPtr);
      HMarkupManager ret = (cPtr == IntPtr.Zero) ? null : new HMarkupManager(cPtr, false);
      return ret;
    } 
  }

  protected AxisMode m_bAxisMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_bAxisMode_set(swigCPtr, (int)value);
    } 
    get {
      AxisMode ret = (AxisMode)HCSMVOPINVOKE.HBaseView_m_bAxisMode_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bHideOverlappedText {
    set {
      HCSMVOPINVOKE.HBaseView_m_bHideOverlappedText_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bHideOverlappedText_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bNavCube {
    set {
      HCSMVOPINVOKE.HBaseView_m_bNavCube_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bNavCube_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bSmoothTransition {
    set {
      HCSMVOPINVOKE.HBaseView_m_bSmoothTransition_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bSmoothTransition_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_SmoothTransitionDuration {
    set {
      HCSMVOPINVOKE.HBaseView_m_SmoothTransitionDuration_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HBaseView_m_SmoothTransitionDuration_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bLightFollowsCamera {
    set {
      HCSMVOPINVOKE.HBaseView_m_bLightFollowsCamera_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bLightFollowsCamera_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_WindowColorPercentage {
    set {
      HCSMVOPINVOKE.HBaseView_m_WindowColorPercentage_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_WindowColorPercentage_get(swigCPtr);
      return ret;
    } 
  }

  protected HPoint m_FrontAxis {
    set {
      HCSMVOPINVOKE.HBaseView_m_FrontAxis_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_FrontAxis_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected HPoint m_TopAxis {
    set {
      HCSMVOPINVOKE.HBaseView_m_TopAxis_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_TopAxis_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  protected HBaseModel m_pModel {
    set {
      HCSMVOPINVOKE.HBaseView_m_pModel_set(swigCPtr, HBaseModel.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pModel_get(swigCPtr);
      HBaseModel ret = (cPtr == IntPtr.Zero) ? null : new HBaseModel(cPtr, false);
      return ret;
    } 
  }

  protected MVO_POINTER_SIZED_INT m_ViewKey {
	set { HCSMVOPINVOKE.HBaseView_m_ViewKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_ViewKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_SceneKey {
	set { HCSMVOPINVOKE.HBaseView_m_SceneKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_SceneKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_OverwriteKey {
	set { HCSMVOPINVOKE.HBaseView_m_OverwriteKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_OverwriteKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_BBoxGeometryKey {
	set { HCSMVOPINVOKE.HBaseView_m_BBoxGeometryKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_BBoxGeometryKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_WindowspaceKey {
	set { HCSMVOPINVOKE.HBaseView_m_WindowspaceKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_WindowspaceKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_ConstructionKey {
	set { HCSMVOPINVOKE.HBaseView_m_ConstructionKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_ConstructionKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_CuttingPlanesKey {
	set { HCSMVOPINVOKE.HBaseView_m_CuttingPlanesKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_CuttingPlanesKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_CuttingPlaneGeomKey {
	set { HCSMVOPINVOKE.HBaseView_m_CuttingPlaneGeomKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_CuttingPlaneGeomKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_IntersectPolylinesKey {
	set { HCSMVOPINVOKE.HBaseView_m_IntersectPolylinesKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_IntersectPolylinesKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_AxisTriadKey {
	set { HCSMVOPINVOKE.HBaseView_m_AxisTriadKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_AxisTriadKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_ProgressBarKey {
	set { HCSMVOPINVOKE.HBaseView_m_ProgressBarKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_ProgressBarKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_InfoTextKey {
	set { HCSMVOPINVOKE.HBaseView_m_InfoTextKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_InfoTextKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_lIncludeLinkKey {
	set { HCSMVOPINVOKE.HBaseView_m_lIncludeLinkKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_lIncludeLinkKey_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_LightsKey {
	set { HCSMVOPINVOKE.HBaseView_m_LightsKey_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HBaseView_m_LightsKey_get(swigCPtr); } 
  }

  protected SWIGTYPE_p_HC_KEY m_SceneLight {
    set {
      HCSMVOPINVOKE.HBaseView_m_SceneLight_set(swigCPtr, SWIGTYPE_p_HC_KEY.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_SceneLight_get(swigCPtr);
      SWIGTYPE_p_HC_KEY ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HC_KEY(cPtr, false);
      return ret;
    } 
  }

  protected HRenderMode m_RenderMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_RenderMode_set(swigCPtr, (int)value);
    } 
    get {
      HRenderMode ret = (HRenderMode)HCSMVOPINVOKE.HBaseView_m_RenderMode_get(swigCPtr);
      return ret;
    } 
  }

  protected ViewMode m_ViewMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_ViewMode_set(swigCPtr, (int)value);
    } 
    get {
      ViewMode ret = (ViewMode)HCSMVOPINVOKE.HBaseView_m_ViewMode_get(swigCPtr);
      return ret;
    } 
  }

  protected HBaseOperator m_pOperator {
    set {
      HCSMVOPINVOKE.HBaseView_m_pOperator_set(swigCPtr, HBaseOperator.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pOperator_get(swigCPtr);
      HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
      return ret;
    } 
  }

  protected HEventInfo m_pEvent {
    set {
      HCSMVOPINVOKE.HBaseView_m_pEvent_set(swigCPtr, HEventInfo.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pEvent_get(swigCPtr);
      HEventInfo ret = (cPtr == IntPtr.Zero) ? null : new HEventInfo(cPtr, false);
      return ret;
    } 
  }

  protected HSelectionSet m_pSelection {
    set {
      HCSMVOPINVOKE.HBaseView_m_pSelection_set(swigCPtr, HSelectionSet.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pSelection_get(swigCPtr);
      HSelectionSet ret = (cPtr == IntPtr.Zero) ? null : new HSelectionSet(cPtr, false);
      return ret;
    } 
  }

  protected HSelectionSet m_pHighlight {
    set {
      HCSMVOPINVOKE.HBaseView_m_pHighlight_set(swigCPtr, HSelectionSet.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pHighlight_get(swigCPtr);
      HSelectionSet ret = (cPtr == IntPtr.Zero) ? null : new HSelectionSet(cPtr, false);
      return ret;
    } 
  }

  protected HConstantFrameRate m_pConstantFrameRate {
    set {
      HCSMVOPINVOKE.HBaseView_m_pConstantFrameRate_set(swigCPtr, HConstantFrameRate.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pConstantFrameRate_get(swigCPtr);
      HConstantFrameRate ret = (cPtr == IntPtr.Zero) ? null : new HConstantFrameRate(cPtr, false);
      return ret;
    } 
  }

  protected HShadowMode m_ShadowMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_ShadowMode_set(swigCPtr, (int)value);
    } 
    get {
      HShadowMode ret = (HShadowMode)HCSMVOPINVOKE.HBaseView_m_ShadowMode_get(swigCPtr);
      return ret;
    } 
  }

  protected SWIGTYPE_p_HSharedKey m_pSharedKey {
    set {
      HCSMVOPINVOKE.HBaseView_m_pSharedKey_set(swigCPtr, SWIGTYPE_p_HSharedKey.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pSharedKey_get(swigCPtr);
      SWIGTYPE_p_HSharedKey ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HSharedKey(cPtr, false);
      return ret;
    } 
  }

  protected int m_UpdateInterrupted {
    set {
      HCSMVOPINVOKE.HBaseView_m_UpdateInterrupted_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_UpdateInterrupted_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_InUpdateInternal {
    set {
      HCSMVOPINVOKE.HBaseView_m_InUpdateInternal_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_InUpdateInternal_get(swigCPtr);
      return ret;
    } 
  }

  protected SWIGTYPE_p_f_p_q_const__HIC_Rendition__void m_pfEventChecker {
    set {
      HCSMVOPINVOKE.HBaseView_m_pfEventChecker_set(swigCPtr, SWIGTYPE_p_f_p_q_const__HIC_Rendition__void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pfEventChecker_get(swigCPtr);
      SWIGTYPE_p_f_p_q_const__HIC_Rendition__void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_p_q_const__HIC_Rendition__void(cPtr, false);
      return ret;
    } 
  }

  protected SWIGTYPE_p_f_unsigned_int_r_int__bool m_pfKeyState {
    set {
      HCSMVOPINVOKE.HBaseView_m_pfKeyState_set(swigCPtr, SWIGTYPE_p_f_unsigned_int_r_int__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pfKeyState_get(swigCPtr);
      SWIGTYPE_p_f_unsigned_int_r_int__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_f_unsigned_int_r_int__bool(cPtr, false);
      return ret;
    } 
  }

  protected ViewUpdateMode m_ViewUpdateMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_ViewUpdateMode_set(swigCPtr, (int)value);
    } 
    get {
      ViewUpdateMode ret = (ViewUpdateMode)HCSMVOPINVOKE.HBaseView_m_ViewUpdateMode_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bUpdateRequested {
    set {
      HCSMVOPINVOKE.HBaseView_m_bUpdateRequested_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bUpdateRequested_get(swigCPtr);
      return ret;
    } 
  }

  protected HEventManager m_pEventManager {
    set {
      HCSMVOPINVOKE.HBaseView_m_pEventManager_set(swigCPtr, HEventManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pEventManager_get(swigCPtr);
      HEventManager ret = (cPtr == IntPtr.Zero) ? null : new HEventManager(cPtr, false);
      return ret;
    } 
  }

  protected HUndoManager m_pUndoManager {
    set {
      HCSMVOPINVOKE.HBaseView_m_pUndoManager_set(swigCPtr, HUndoManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pUndoManager_get(swigCPtr);
      HUndoManager ret = (cPtr == IntPtr.Zero) ? null : new HUndoManager(cPtr, false);
      return ret;
    } 
  }

  protected HObjectManager m_pObjectManager {
    set {
      HCSMVOPINVOKE.HBaseView_m_pObjectManager_set(swigCPtr, HObjectManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pObjectManager_get(swigCPtr);
      HObjectManager ret = (cPtr == IntPtr.Zero) ? null : new HObjectManager(cPtr, false);
      return ret;
    } 
  }

  protected HDebugZBuffer m_pDebugZBuffer {
    set {
      HCSMVOPINVOKE.HBaseView_m_pDebugZBuffer_set(swigCPtr, HDebugZBuffer.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pDebugZBuffer_get(swigCPtr);
      HDebugZBuffer ret = (cPtr == IntPtr.Zero) ? null : new HDebugZBuffer(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bLButtonDown {
    set {
      HCSMVOPINVOKE.HBaseView_m_bLButtonDown_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bLButtonDown_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bMouseMove {
    set {
      HCSMVOPINVOKE.HBaseView_m_bMouseMove_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bMouseMove_get(swigCPtr);
      return ret;
    } 
  }

  protected HOpCameraManipulate m_pManipulateOperator {
    set {
      HCSMVOPINVOKE.HBaseView_m_pManipulateOperator_set(swigCPtr, HOpCameraManipulate.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pManipulateOperator_get(swigCPtr);
      HOpCameraManipulate ret = (cPtr == IntPtr.Zero) ? null : new HOpCameraManipulate(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bShadowRegeneration {
    set {
      HCSMVOPINVOKE.HBaseView_m_bShadowRegeneration_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bShadowRegeneration_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bShadowRegenerationToggle {
    set {
      HCSMVOPINVOKE.HBaseView_m_bShadowRegenerationToggle_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bShadowRegenerationToggle_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bCuttingPlaneRegeneration {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCuttingPlaneRegeneration_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCuttingPlaneRegeneration_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bCameraChanged {
    set {
      HCSMVOPINVOKE.HBaseView_m_bCameraChanged_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bCameraChanged_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_IdleTime {
    set {
      HCSMVOPINVOKE.HBaseView_m_IdleTime_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HBaseView_m_IdleTime_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bFirstUpdate {
    set {
      HCSMVOPINVOKE.HBaseView_m_bFirstUpdate_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bFirstUpdate_get(swigCPtr);
      return ret;
    } 
  }

  protected HBaseOperator m_pHandleOperator {
    set {
      HCSMVOPINVOKE.HBaseView_m_pHandleOperator_set(swigCPtr, HBaseOperator.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_pHandleOperator_get(swigCPtr);
      HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bAllowInteractiveShadows {
    set {
      HCSMVOPINVOKE.HBaseView_m_bAllowInteractiveShadows_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bAllowInteractiveShadows_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bAllowInteractiveCutGeometry {
    set {
      HCSMVOPINVOKE.HBaseView_m_bAllowInteractiveCutGeometry_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bAllowInteractiveCutGeometry_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_DefaultSelectionProximity {
    set {
      HCSMVOPINVOKE.HBaseView_m_DefaultSelectionProximity_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HBaseView_m_DefaultSelectionProximity_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_MaximumUpdateTime {
    set {
      HCSMVOPINVOKE.HBaseView_m_MaximumUpdateTime_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HBaseView_m_MaximumUpdateTime_get(swigCPtr);
      return ret;
    } 
  }

  protected HCamera m_InitialCamera {
    set {
      HCSMVOPINVOKE.HBaseView_m_InitialCamera_set(swigCPtr, HCamera.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HBaseView_m_InitialCamera_get(swigCPtr);
      HCamera ret = (cPtr == IntPtr.Zero) ? null : new HCamera(cPtr, false);
      return ret;
    } 
  }

  protected bool m_bInitialCameraSet {
    set {
      HCSMVOPINVOKE.HBaseView_m_bInitialCameraSet_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bInitialCameraSet_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bRecordCamera {
    set {
      HCSMVOPINVOKE.HBaseView_m_bRecordCamera_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bRecordCamera_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bTransparentSelectionBox {
    set {
      HCSMVOPINVOKE.HBaseView_m_bTransparentSelectionBox_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bTransparentSelectionBox_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bInvertMouseWheelZoom {
    set {
      HCSMVOPINVOKE.HBaseView_m_bInvertMouseWheelZoom_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bInvertMouseWheelZoom_get(swigCPtr);
      return ret;
    } 
  }

  protected uint m_AnnotationCookie {
    set {
      HCSMVOPINVOKE.HBaseView_m_AnnotationCookie_set(swigCPtr, value);
    } 
    get {
      uint ret = HCSMVOPINVOKE.HBaseView_m_AnnotationCookie_get(swigCPtr);
      return ret;
    } 
  }

  protected uint m_AxisResizeCookie {
    set {
      HCSMVOPINVOKE.HBaseView_m_AxisResizeCookie_set(swigCPtr, value);
    } 
    get {
      uint ret = HCSMVOPINVOKE.HBaseView_m_AxisResizeCookie_get(swigCPtr);
      return ret;
    } 
  }

  protected FramerateMode m_FramerateMode {
    set {
      HCSMVOPINVOKE.HBaseView_m_FramerateMode_set(swigCPtr, (int)value);
    } 
    get {
      FramerateMode ret = (FramerateMode)HCSMVOPINVOKE.HBaseView_m_FramerateMode_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bSplatRendering {
    set {
      HCSMVOPINVOKE.HBaseView_m_bSplatRendering_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_bSplatRendering_get(swigCPtr);
      return ret;
    } 
  }

  protected int m_SplatSize {
    set {
      HCSMVOPINVOKE.HBaseView_m_SplatSize_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HBaseView_m_SplatSize_get(swigCPtr);
      return ret;
    } 
  }

  protected SplatSymbol m_SplatSymbol {
    set {
      HCSMVOPINVOKE.HBaseView_m_SplatSymbol_set(swigCPtr, (int)value);
    } 
    get {
      SplatSymbol ret = (SplatSymbol)HCSMVOPINVOKE.HBaseView_m_SplatSymbol_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_FocusedOnSelection {
    set {
      HCSMVOPINVOKE.HBaseView_m_FocusedOnSelection_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HBaseView_m_FocusedOnSelection_get(swigCPtr);
      return ret;
    } 
  }

  protected void ComputeShadowParams(HPlane shadow_plane, HPoint light_pos) {
    HCSMVOPINVOKE.HBaseView_ComputeShadowParams(swigCPtr, HPlane.getCPtr(shadow_plane), HPoint.getCPtr(light_pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void AdjustShadowPlane(HPlane shadow_plane, HPoint light_pos) {
    HCSMVOPINVOKE.HBaseView_AdjustShadowPlane(swigCPtr, HPlane.getCPtr(shadow_plane), HPoint.getCPtr(light_pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void SetShadowParams(HPlane shadow_plane, HPoint light_pos, HPoint color, string filter) {
    HCSMVOPINVOKE.HBaseView_SetShadowParams__SWIG_0(swigCPtr, HPlane.getCPtr(shadow_plane), HPoint.getCPtr(light_pos), HPoint.getCPtr(color), filter);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void SetShadowParams(HPlane shadow_plane, HPoint light_pos, HPoint color) {
    HCSMVOPINVOKE.HBaseView_SetShadowParams__SWIG_1(swigCPtr, HPlane.getCPtr(shadow_plane), HPoint.getCPtr(light_pos), HPoint.getCPtr(color));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void SetShadowParams(HPlane shadow_plane, HPoint light_pos) {
    HCSMVOPINVOKE.HBaseView_SetShadowParams__SWIG_2(swigCPtr, HPlane.getCPtr(shadow_plane), HPoint.getCPtr(light_pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void RefreshViewSize() {
    HCSMVOPINVOKE.HBaseView_RefreshViewSize(swigCPtr);
  }

  protected void QueryDeviceCapabilities() {
    HCSMVOPINVOKE.HBaseView_QueryDeviceCapabilities(swigCPtr);
  }

  protected virtual void UpdateInternal(bool antialias, bool force_update) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_UpdateInternal__SWIG_0(swigCPtr, antialias, force_update); else HCSMVOPINVOKE.HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_0(swigCPtr, antialias, force_update);
  }

  protected virtual void UpdateInternal(bool antialias) {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_UpdateInternal__SWIG_1(swigCPtr, antialias); else HCSMVOPINVOKE.HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_1(swigCPtr, antialias);
  }

  protected virtual void UpdateInternal() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_UpdateInternal__SWIG_2(swigCPtr); else HCSMVOPINVOKE.HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_2(swigCPtr);
  }

  protected virtual void SetupLights() {
    if (this.GetType() == typeof(HBaseView)) HCSMVOPINVOKE.HBaseView_SetupLights(swigCPtr); else HCSMVOPINVOKE.HBaseView_SetupLightsSwigExplicitHBaseView(swigCPtr);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHBaseView_0(SwigDirectorCreateListenerManager);
    if (SwigDerivedClassHasMethod("CameraChangedEvent", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHBaseView_1(SwigDirectorCameraChangedEvent);
    if (SwigDerivedClassHasMethod("UpdateEvent", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHBaseView_2(SwigDirectorUpdateEvent__SWIG_0);
    if (SwigDerivedClassHasMethod("ViewDestroyedEvent", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHBaseView_3(SwigDirectorViewDestroyedEvent);
    if (SwigDerivedClassHasMethod("SmoothTransitionFinishedEvent", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHBaseView_4(SwigDirectorSmoothTransitionFinishedEvent);
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHBaseView_5(SwigDirectorInit);
    if (SwigDerivedClassHasMethod("FitWorld", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateHBaseView_6(SwigDirectorFitWorld__SWIG_0);
    if (SwigDerivedClassHasMethod("FitWorld", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateHBaseView_7(SwigDirectorFitWorld__SWIG_1);
    if (SwigDerivedClassHasMethod("FitWorldExact", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateHBaseView_8(SwigDirectorFitWorldExact__SWIG_0);
    if (SwigDerivedClassHasMethod("FitWorldExact", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateHBaseView_9(SwigDirectorFitWorldExact__SWIG_1);
    if (SwigDerivedClassHasMethod("ZoomToExtents", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateHBaseView_10(SwigDirectorZoomToExtents);
    if (SwigDerivedClassHasMethod("ZoomToInitialCamera", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateHBaseView_11(SwigDirectorZoomToInitialCamera);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateHBaseView_12(SwigDirectorUpdate);
    if (SwigDerivedClassHasMethod("ForceUpdate", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateHBaseView_13(SwigDirectorForceUpdate);
    if (SwigDerivedClassHasMethod("FileInput", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateHBaseView_14(SwigDirectorFileInput__SWIG_0);
    if (SwigDerivedClassHasMethod("FileInput", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateHBaseView_15(SwigDirectorFileInput__SWIG_1);
    if (SwigDerivedClassHasMethod("FileInput", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateHBaseView_16(SwigDirectorFileInput__SWIG_2);
    if (SwigDerivedClassHasMethod("FileInput", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateHBaseView_17(SwigDirectorFileInput__SWIG_3);
    if (SwigDerivedClassHasMethod("FileOutput", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateHBaseView_18(SwigDirectorFileOutput__SWIG_0);
    if (SwigDerivedClassHasMethod("FileOutput", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateHBaseView_19(SwigDirectorFileOutput__SWIG_1);
    if (SwigDerivedClassHasMethod("FileOutput", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateHBaseView_20(SwigDirectorFileOutput__SWIG_2);
    if (SwigDerivedClassHasMethod("FileOutput", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateHBaseView_21(SwigDirectorFileOutput__SWIG_3);
    if (SwigDerivedClassHasMethod("UpdateHighlighting", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateHBaseView_22(SwigDirectorUpdateHighlighting);
    if (SwigDerivedClassHasMethod("GetModel", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateHBaseView_23(SwigDirectorGetModel);
    if (SwigDerivedClassHasMethod("SetViewMode", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateHBaseView_24(SwigDirectorSetViewMode__SWIG_0);
    if (SwigDerivedClassHasMethod("SetViewMode", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateHBaseView_25(SwigDirectorSetViewMode__SWIG_1);
    if (SwigDerivedClassHasMethod("SetViewMode", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateHBaseView_26(SwigDirectorSetViewMode__SWIG_2);
    if (SwigDerivedClassHasMethod("SetHandedness", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateHBaseView_27(SwigDirectorSetHandedness__SWIG_0);
    if (SwigDerivedClassHasMethod("SetHandedness", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateHBaseView_28(SwigDirectorSetHandedness__SWIG_1);
    if (SwigDerivedClassHasMethod("SetHandednessFromMessage", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateHBaseView_29(SwigDirectorSetHandednessFromMessage);
    if (SwigDerivedClassHasMethod("SetFontSize", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateHBaseView_30(SwigDirectorSetFontSize__SWIG_0);
    if (SwigDerivedClassHasMethod("SetFontSize", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateHBaseView_31(SwigDirectorSetFontSize__SWIG_1);
    if (SwigDerivedClassHasMethod("SetFontSizeFromMessage", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateHBaseView_32(SwigDirectorSetFontSizeFromMessage);
    if (SwigDerivedClassHasMethod("SetZoomLimit", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateHBaseView_33(SwigDirectorSetZoomLimit__SWIG_1);
    if (SwigDerivedClassHasMethod("SetAxisMode", swigMethodTypes34))
      swigDelegate34 = new SwigDelegateHBaseView_34(SwigDirectorSetAxisMode);
    if (SwigDerivedClassHasMethod("OnSetAxisMode", swigMethodTypes35))
      swigDelegate35 = new SwigDelegateHBaseView_35(SwigDirectorOnSetAxisMode);
    if (SwigDerivedClassHasMethod("AdjustAxisWindow", swigMethodTypes36))
      swigDelegate36 = new SwigDelegateHBaseView_36(SwigDirectorAdjustAxisWindow__SWIG_0);
    if (SwigDerivedClassHasMethod("AdjustAxisWindow", swigMethodTypes37))
      swigDelegate37 = new SwigDelegateHBaseView_37(SwigDirectorAdjustAxisWindow__SWIG_1);
    if (SwigDerivedClassHasMethod("AdjustAxisWindow", swigMethodTypes38))
      swigDelegate38 = new SwigDelegateHBaseView_38(SwigDirectorAdjustAxisWindow__SWIG_2);
    if (SwigDerivedClassHasMethod("SetShadowMode", swigMethodTypes39))
      swigDelegate39 = new SwigDelegateHBaseView_39(SwigDirectorSetShadowMode__SWIG_0);
    if (SwigDerivedClassHasMethod("SetShadowMode", swigMethodTypes40))
      swigDelegate40 = new SwigDelegateHBaseView_40(SwigDirectorSetShadowMode__SWIG_1);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes41))
      swigDelegate41 = new SwigDelegateHBaseView_41(SwigDirectorSetReflectionPlane__SWIG_0);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes42))
      swigDelegate42 = new SwigDelegateHBaseView_42(SwigDirectorSetReflectionPlane__SWIG_1);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes43))
      swigDelegate43 = new SwigDelegateHBaseView_43(SwigDirectorSetReflectionPlane__SWIG_2);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes44))
      swigDelegate44 = new SwigDelegateHBaseView_44(SwigDirectorSetReflectionPlane__SWIG_3);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes45))
      swigDelegate45 = new SwigDelegateHBaseView_45(SwigDirectorSetReflectionPlane__SWIG_4);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes46))
      swigDelegate46 = new SwigDelegateHBaseView_46(SwigDirectorSetReflectionPlane__SWIG_5);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes47))
      swigDelegate47 = new SwigDelegateHBaseView_47(SwigDirectorSetReflectionPlane__SWIG_6);
    if (SwigDerivedClassHasMethod("SetReflectionPlane", swigMethodTypes48))
      swigDelegate48 = new SwigDelegateHBaseView_48(SwigDirectorSetReflectionPlane__SWIG_7);
    if (SwigDerivedClassHasMethod("DeleteSelectionList", swigMethodTypes49))
      swigDelegate49 = new SwigDelegateHBaseView_49(SwigDirectorDeleteSelectionList__SWIG_0);
    if (SwigDerivedClassHasMethod("DeleteSelectionList", swigMethodTypes50))
      swigDelegate50 = new SwigDelegateHBaseView_50(SwigDirectorDeleteSelectionList__SWIG_1);
    if (SwigDerivedClassHasMethod("SetWindowColor", swigMethodTypes51))
      swigDelegate51 = new SwigDelegateHBaseView_51(SwigDirectorSetWindowColor__SWIG_0);
    if (SwigDerivedClassHasMethod("SetWindowColor", swigMethodTypes52))
      swigDelegate52 = new SwigDelegateHBaseView_52(SwigDirectorSetWindowColor__SWIG_1);
    if (SwigDerivedClassHasMethod("SetWindowColor", swigMethodTypes53))
      swigDelegate53 = new SwigDelegateHBaseView_53(SwigDirectorSetWindowColor__SWIG_2);
    if (SwigDerivedClassHasMethod("SetWindowColor", swigMethodTypes54))
      swigDelegate54 = new SwigDelegateHBaseView_54(SwigDirectorSetWindowColor__SWIG_3);
    if (SwigDerivedClassHasMethod("SetWindowColorRange", swigMethodTypes55))
      swigDelegate55 = new SwigDelegateHBaseView_55(SwigDirectorSetWindowColorRange__SWIG_0);
    if (SwigDerivedClassHasMethod("SetWindowColorRange", swigMethodTypes56))
      swigDelegate56 = new SwigDelegateHBaseView_56(SwigDirectorSetWindowColorRange__SWIG_1);
    if (SwigDerivedClassHasMethod("SetWindowMaterial", swigMethodTypes57))
      swigDelegate57 = new SwigDelegateHBaseView_57(SwigDirectorSetWindowMaterial__SWIG_0);
    if (SwigDerivedClassHasMethod("SetWindowMaterial", swigMethodTypes58))
      swigDelegate58 = new SwigDelegateHBaseView_58(SwigDirectorSetWindowMaterial__SWIG_1);
    if (SwigDerivedClassHasMethod("SetWindowColorFromMessage", swigMethodTypes59))
      swigDelegate59 = new SwigDelegateHBaseView_59(SwigDirectorSetWindowColorFromMessage);
    if (SwigDerivedClassHasMethod("CameraPositionChanged", swigMethodTypes60))
      swigDelegate60 = new SwigDelegateHBaseView_60(SwigDirectorCameraPositionChanged__SWIG_0);
    if (SwigDerivedClassHasMethod("CameraPositionChanged", swigMethodTypes61))
      swigDelegate61 = new SwigDelegateHBaseView_61(SwigDirectorCameraPositionChanged__SWIG_1);
    if (SwigDerivedClassHasMethod("CameraPositionChanged", swigMethodTypes62))
      swigDelegate62 = new SwigDelegateHBaseView_62(SwigDirectorCameraPositionChanged__SWIG_2);
    if (SwigDerivedClassHasMethod("PrepareForCameraChange", swigMethodTypes63))
      swigDelegate63 = new SwigDelegateHBaseView_63(SwigDirectorPrepareForCameraChange);
    if (SwigDerivedClassHasMethod("SetCamera", swigMethodTypes64))
      swigDelegate64 = new SwigDelegateHBaseView_64(SwigDirectorSetCamera__SWIG_0);
    if (SwigDerivedClassHasMethod("SetInitialCamera", swigMethodTypes65))
      swigDelegate65 = new SwigDelegateHBaseView_65(SwigDirectorSetInitialCamera);
    if (SwigDerivedClassHasMethod("GetCamera", swigMethodTypes66))
      swigDelegate66 = new SwigDelegateHBaseView_66(SwigDirectorGetCamera__SWIG_0);
    if (SwigDerivedClassHasMethod("SetCamera", swigMethodTypes67))
      swigDelegate67 = new SwigDelegateHBaseView_67(SwigDirectorSetCamera__SWIG_1);
    if (SwigDerivedClassHasMethod("GetCamera", swigMethodTypes68))
      swigDelegate68 = new SwigDelegateHBaseView_68(SwigDirectorGetCamera__SWIG_1);
    if (SwigDerivedClassHasMethod("SetCameraFromMessage", swigMethodTypes69))
      swigDelegate69 = new SwigDelegateHBaseView_69(SwigDirectorSetCameraFromMessage);
    if (SwigDerivedClassHasMethod("InsertHSFData", swigMethodTypes70))
      swigDelegate70 = new SwigDelegateHBaseView_70(SwigDirectorInsertHSFData__SWIG_0);
    if (SwigDerivedClassHasMethod("InsertHSFData", swigMethodTypes71))
      swigDelegate71 = new SwigDelegateHBaseView_71(SwigDirectorInsertHSFData__SWIG_1);
    if (SwigDerivedClassHasMethod("InsertHSFDataFromMessage", swigMethodTypes72))
      swigDelegate72 = new SwigDelegateHBaseView_72(SwigDirectorInsertHSFDataFromMessage);
    if (SwigDerivedClassHasMethod("EmitHSFData", swigMethodTypes73))
      swigDelegate73 = new SwigDelegateHBaseView_73(SwigDirectorEmitHSFData);
    if (SwigDerivedClassHasMethod("SetRenderMode", swigMethodTypes74))
      swigDelegate74 = new SwigDelegateHBaseView_74(SwigDirectorSetRenderMode__SWIG_0);
    if (SwigDerivedClassHasMethod("SetRenderMode", swigMethodTypes75))
      swigDelegate75 = new SwigDelegateHBaseView_75(SwigDirectorSetRenderMode__SWIG_1);
    if (SwigDerivedClassHasMethod("SetRenderModeFromMessage", swigMethodTypes76))
      swigDelegate76 = new SwigDelegateHBaseView_76(SwigDirectorSetRenderModeFromMessage);
    if (SwigDerivedClassHasMethod("EmitFlushMessage", swigMethodTypes77))
      swigDelegate77 = new SwigDelegateHBaseView_77(SwigDirectorEmitFlushMessage);
    if (SwigDerivedClassHasMethod("FlushFromMessage", swigMethodTypes78))
      swigDelegate78 = new SwigDelegateHBaseView_78(SwigDirectorFlushFromMessage);
    if (SwigDerivedClassHasMethod("Flush", swigMethodTypes79))
      swigDelegate79 = new SwigDelegateHBaseView_79(SwigDirectorFlush__SWIG_0);
    if (SwigDerivedClassHasMethod("Flush", swigMethodTypes80))
      swigDelegate80 = new SwigDelegateHBaseView_80(SwigDirectorFlush__SWIG_1);
    if (SwigDerivedClassHasMethod("EmitSelectMessage", swigMethodTypes81))
      swigDelegate81 = new SwigDelegateHBaseView_81(SwigDirectorEmitSelectMessage);
    if (SwigDerivedClassHasMethod("SelectFromMessage", swigMethodTypes82))
      swigDelegate82 = new SwigDelegateHBaseView_82(SwigDirectorSelectFromMessage);
    if (SwigDerivedClassHasMethod("EmitDeSelectAllMessage", swigMethodTypes83))
      swigDelegate83 = new SwigDelegateHBaseView_83(SwigDirectorEmitDeSelectAllMessage);
    if (SwigDerivedClassHasMethod("EmitDeleteSelectionListMessage", swigMethodTypes84))
      swigDelegate84 = new SwigDelegateHBaseView_84(SwigDirectorEmitDeleteSelectionListMessage);
    if (SwigDerivedClassHasMethod("DeleteSelectionListFromMessage", swigMethodTypes85))
      swigDelegate85 = new SwigDelegateHBaseView_85(SwigDirectorDeleteSelectionListFromMessage);
    if (SwigDerivedClassHasMethod("DeSelectAllFromMessage", swigMethodTypes86))
      swigDelegate86 = new SwigDelegateHBaseView_86(SwigDirectorDeSelectAllFromMessage);
    if (SwigDerivedClassHasMethod("EmitSetModellingMatrixMessage", swigMethodTypes87))
      swigDelegate87 = new SwigDelegateHBaseView_87(SwigDirectorEmitSetModellingMatrixMessage__SWIG_0);
    if (SwigDerivedClassHasMethod("EmitSetModellingMatrixMessage", swigMethodTypes88))
      swigDelegate88 = new SwigDelegateHBaseView_88(SwigDirectorEmitSetModellingMatrixMessage__SWIG_1);
    if (SwigDerivedClassHasMethod("EmitSegment", swigMethodTypes89))
      swigDelegate89 = new SwigDelegateHBaseView_89(SwigDirectorEmitSegment__SWIG_0);
    if (SwigDerivedClassHasMethod("EmitSegment", swigMethodTypes90))
      swigDelegate90 = new SwigDelegateHBaseView_90(SwigDirectorEmitSegment__SWIG_1);
    if (SwigDerivedClassHasMethod("EmitDeleteByKeyMessage", swigMethodTypes91))
      swigDelegate91 = new SwigDelegateHBaseView_91(SwigDirectorEmitDeleteByKeyMessage);
    if (SwigDerivedClassHasMethod("DeleteByKeyFromMessage", swigMethodTypes92))
      swigDelegate92 = new SwigDelegateHBaseView_92(SwigDirectorDeleteByKeyFromMessage);
    if (SwigDerivedClassHasMethod("SetModellingMatrixFromMessage", swigMethodTypes93))
      swigDelegate93 = new SwigDelegateHBaseView_93(SwigDirectorSetModellingMatrixFromMessage);
    if (SwigDerivedClassHasMethod("StartSharedKey", swigMethodTypes94))
      swigDelegate94 = new SwigDelegateHBaseView_94(SwigDirectorStartSharedKey);
    if (SwigDerivedClassHasMethod("Animate", swigMethodTypes95))
      swigDelegate95 = new SwigDelegateHBaseView_95(SwigDirectorAnimate__SWIG_0);
    if (SwigDerivedClassHasMethod("Animate", swigMethodTypes96))
      swigDelegate96 = new SwigDelegateHBaseView_96(SwigDirectorAnimate__SWIG_1);
    if (SwigDerivedClassHasMethod("Animate", swigMethodTypes97))
      swigDelegate97 = new SwigDelegateHBaseView_97(SwigDirectorAnimate__SWIG_2);
    if (SwigDerivedClassHasMethod("Animate", swigMethodTypes98))
      swigDelegate98 = new SwigDelegateHBaseView_98(SwigDirectorAnimate__SWIG_3);
    if (SwigDerivedClassHasMethod("SetGeometryChanged", swigMethodTypes99))
      swigDelegate99 = new SwigDelegateHBaseView_99(SwigDirectorSetGeometryChanged);
    if (SwigDerivedClassHasMethod("ClearGeometryChanged", swigMethodTypes100))
      swigDelegate100 = new SwigDelegateHBaseView_100(SwigDirectorClearGeometryChanged);
    if (SwigDerivedClassHasMethod("GeometryChanged", swigMethodTypes101))
      swigDelegate101 = new SwigDelegateHBaseView_101(SwigDirectorGeometryChanged);
    if (SwigDerivedClassHasMethod("OnNoButtonDownAndMove", swigMethodTypes102))
      swigDelegate102 = new SwigDelegateHBaseView_102(SwigDirectorOnNoButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLButtonDownAndMove", swigMethodTypes103))
      swigDelegate103 = new SwigDelegateHBaseView_103(SwigDirectorOnLButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLButtonDblClk", swigMethodTypes104))
      swigDelegate104 = new SwigDelegateHBaseView_104(SwigDirectorOnLButtonDblClk);
    if (SwigDerivedClassHasMethod("OnRButtonDownAndMove", swigMethodTypes105))
      swigDelegate105 = new SwigDelegateHBaseView_105(SwigDirectorOnRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnMButtonDownAndMove", swigMethodTypes106))
      swigDelegate106 = new SwigDelegateHBaseView_106(SwigDirectorOnMButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLRButtonDownAndMove", swigMethodTypes107))
      swigDelegate107 = new SwigDelegateHBaseView_107(SwigDirectorOnLRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLButtonDown", swigMethodTypes108))
      swigDelegate108 = new SwigDelegateHBaseView_108(SwigDirectorOnLButtonDown);
    if (SwigDerivedClassHasMethod("OnMouseMove", swigMethodTypes109))
      swigDelegate109 = new SwigDelegateHBaseView_109(SwigDirectorOnMouseMove);
    if (SwigDerivedClassHasMethod("OnLButtonUp", swigMethodTypes110))
      swigDelegate110 = new SwigDelegateHBaseView_110(SwigDirectorOnLButtonUp);
    if (SwigDerivedClassHasMethod("OnMouseWheel", swigMethodTypes111))
      swigDelegate111 = new SwigDelegateHBaseView_111(SwigDirectorOnMouseWheel);
    if (SwigDerivedClassHasMethod("ComputeReasonableTarget", swigMethodTypes112))
      swigDelegate112 = new SwigDelegateHBaseView_112(SwigDirectorComputeReasonableTarget);
    if (SwigDerivedClassHasMethod("OnKeyDown", swigMethodTypes113))
      swigDelegate113 = new SwigDelegateHBaseView_113(SwigDirectorOnKeyDown);
    if (SwigDerivedClassHasMethod("OnKeyUp", swigMethodTypes114))
      swigDelegate114 = new SwigDelegateHBaseView_114(SwigDirectorOnKeyUp);
    if (SwigDerivedClassHasMethod("SetShadowColor", swigMethodTypes115))
      swigDelegate115 = new SwigDelegateHBaseView_115(SwigDirectorSetShadowColor);
    if (SwigDerivedClassHasMethod("SetShadowLightDirection", swigMethodTypes116))
      swigDelegate116 = new SwigDelegateHBaseView_116(SwigDirectorSetShadowLightDirection__SWIG_0);
    if (SwigDerivedClassHasMethod("SetShadowLightDirection", swigMethodTypes117))
      swigDelegate117 = new SwigDelegateHBaseView_117(SwigDirectorSetShadowLightDirection__SWIG_1);
    if (SwigDerivedClassHasMethod("GetShadowLightDirection", swigMethodTypes118))
      swigDelegate118 = new SwigDelegateHBaseView_118(SwigDirectorGetShadowLightDirection__SWIG_0);
    if (SwigDerivedClassHasMethod("GetShadowLightDirection", swigMethodTypes119))
      swigDelegate119 = new SwigDelegateHBaseView_119(SwigDirectorGetShadowLightDirection__SWIG_1);
    if (SwigDerivedClassHasMethod("SetShadowIgnoresTransparency", swigMethodTypes120))
      swigDelegate120 = new SwigDelegateHBaseView_120(SwigDirectorSetShadowIgnoresTransparency);
    if (SwigDerivedClassHasMethod("GetShadowIgnoresTransparency", swigMethodTypes121))
      swigDelegate121 = new SwigDelegateHBaseView_121(SwigDirectorGetShadowIgnoresTransparency);
    if (SwigDerivedClassHasMethod("DoDynamicHighlighting", swigMethodTypes122))
      swigDelegate122 = new SwigDelegateHBaseView_122(SwigDirectorDoDynamicHighlighting);
    if (SwigDerivedClassHasMethod("SetShadowResolution", swigMethodTypes123))
      swigDelegate123 = new SwigDelegateHBaseView_123(SwigDirectorSetShadowResolution);
    if (SwigDerivedClassHasMethod("SetShadowBlurring", swigMethodTypes124))
      swigDelegate124 = new SwigDelegateHBaseView_124(SwigDirectorSetShadowBlurring);
    if (SwigDerivedClassHasMethod("InternalUpdate", swigMethodTypes125))
      swigDelegate125 = new SwigDelegateHBaseView_125(SwigDirectorInternalUpdate);
    if (SwigDerivedClassHasMethod("SetShadowRegenerationMode", swigMethodTypes126))
      swigDelegate126 = new SwigDelegateHBaseView_126(SwigDirectorSetShadowRegenerationMode);
    if (SwigDerivedClassHasMethod("SetShadowRegenerationToggle", swigMethodTypes127))
      swigDelegate127 = new SwigDelegateHBaseView_127(SwigDirectorSetShadowRegenerationToggle);
    if (SwigDerivedClassHasMethod("SetCuttingPlaneRegenerationMode", swigMethodTypes128))
      swigDelegate128 = new SwigDelegateHBaseView_128(SwigDirectorSetCuttingPlaneRegenerationMode);
    if (SwigDerivedClassHasMethod("SetCameraChanged", swigMethodTypes129))
      swigDelegate129 = new SwigDelegateHBaseView_129(SwigDirectorSetCameraChanged__SWIG_0);
    if (SwigDerivedClassHasMethod("SetCameraChanged", swigMethodTypes130))
      swigDelegate130 = new SwigDelegateHBaseView_130(SwigDirectorSetCameraChanged__SWIG_1);
    if (SwigDerivedClassHasMethod("GetCameraChanged", swigMethodTypes131))
      swigDelegate131 = new SwigDelegateHBaseView_131(SwigDirectorGetCameraChanged);
    if (SwigDerivedClassHasMethod("SetInvertMouseWheelZoom", swigMethodTypes132))
      swigDelegate132 = new SwigDelegateHBaseView_132(SwigDirectorSetInvertMouseWheelZoom__SWIG_0);
    if (SwigDerivedClassHasMethod("SetInvertMouseWheelZoom", swigMethodTypes133))
      swigDelegate133 = new SwigDelegateHBaseView_133(SwigDirectorSetInvertMouseWheelZoom__SWIG_1);
    if (SwigDerivedClassHasMethod("GetInvertMouseWheelZoom", swigMethodTypes134))
      swigDelegate134 = new SwigDelegateHBaseView_134(SwigDirectorGetInvertMouseWheelZoom);
    if (SwigDerivedClassHasMethod("SetAxisManipulateOperator", swigMethodTypes135))
      swigDelegate135 = new SwigDelegateHBaseView_135(SwigDirectorSetAxisManipulateOperator);
    if (SwigDerivedClassHasMethod("SetVisibilitySelectionMode", swigMethodTypes136))
      swigDelegate136 = new SwigDelegateHBaseView_136(SwigDirectorSetVisibilitySelectionMode);
    if (SwigDerivedClassHasMethod("GetVisibilitySelectionMode", swigMethodTypes137))
      swigDelegate137 = new SwigDelegateHBaseView_137(SwigDirectorGetVisibilitySelectionMode);
    if (SwigDerivedClassHasMethod("SetRelatedSelectionLimit", swigMethodTypes138))
      swigDelegate138 = new SwigDelegateHBaseView_138(SwigDirectorSetRelatedSelectionLimit);
    if (SwigDerivedClassHasMethod("GetRelatedSelectionLimit", swigMethodTypes139))
      swigDelegate139 = new SwigDelegateHBaseView_139(SwigDirectorGetRelatedSelectionLimit);
    if (SwigDerivedClassHasMethod("SetDetailSelection", swigMethodTypes140))
      swigDelegate140 = new SwigDelegateHBaseView_140(SwigDirectorSetDetailSelection);
    if (SwigDerivedClassHasMethod("GetDetailSelectionMode", swigMethodTypes141))
      swigDelegate141 = new SwigDelegateHBaseView_141(SwigDirectorGetDetailSelectionMode);
    if (SwigDerivedClassHasMethod("SetRespectSelectionCulling", swigMethodTypes142))
      swigDelegate142 = new SwigDelegateHBaseView_142(SwigDirectorSetRespectSelectionCulling);
    if (SwigDerivedClassHasMethod("GetRespectSelectionCulling", swigMethodTypes143))
      swigDelegate143 = new SwigDelegateHBaseView_143(SwigDirectorGetRespectSelectionCulling);
    if (SwigDerivedClassHasMethod("SmartFilterCircumcuboid", swigMethodTypes144))
      swigDelegate144 = new SwigDelegateHBaseView_144(SwigDirectorSmartFilterCircumcuboid);
    if (SwigDerivedClassHasMethod("SetupHandlesEvent", swigMethodTypes145))
      swigDelegate145 = new SwigDelegateHBaseView_145(SwigDirectorSetupHandlesEvent);
    if (SwigDerivedClassHasMethod("GetHasObjects", swigMethodTypes146))
      swigDelegate146 = new SwigDelegateHBaseView_146(SwigDirectorGetHasObjects);
    if (SwigDerivedClassHasMethod("SetHasObjects", swigMethodTypes147))
      swigDelegate147 = new SwigDelegateHBaseView_147(SwigDirectorSetHasObjects);
    if (SwigDerivedClassHasMethod("SetHandleOperator", swigMethodTypes148))
      swigDelegate148 = new SwigDelegateHBaseView_148(SwigDirectorSetHandleOperator);
    if (SwigDerivedClassHasMethod("GetHandleOperator", swigMethodTypes149))
      swigDelegate149 = new SwigDelegateHBaseView_149(SwigDirectorGetHandleOperator);
    if (SwigDerivedClassHasMethod("GetDefaultSelectionProximity", swigMethodTypes150))
      swigDelegate150 = new SwigDelegateHBaseView_150(SwigDirectorGetDefaultSelectionProximity);
    if (SwigDerivedClassHasMethod("SetDefaultSelectionProximity", swigMethodTypes151))
      swigDelegate151 = new SwigDelegateHBaseView_151(SwigDirectorSetDefaultSelectionProximity);
    if (SwigDerivedClassHasMethod("ObjectMovedEvent", swigMethodTypes152))
      swigDelegate152 = new SwigDelegateHBaseView_152(SwigDirectorObjectMovedEvent);
    if (SwigDerivedClassHasMethod("GetHighlightMode", swigMethodTypes153))
      swigDelegate153 = new SwigDelegateHBaseView_153(SwigDirectorGetHighlightMode);
    if (SwigDerivedClassHasMethod("SetHighlightMode", swigMethodTypes154))
      swigDelegate154 = new SwigDelegateHBaseView_154(SwigDirectorSetHighlightMode);
    if (SwigDerivedClassHasMethod("SetReferenceSelection", swigMethodTypes155))
      swigDelegate155 = new SwigDelegateHBaseView_155(SwigDirectorSetReferenceSelection);
    if (SwigDerivedClassHasMethod("UpdateInternal", swigMethodTypes156))
      swigDelegate156 = new SwigDelegateHBaseView_156(SwigDirectorUpdateInternal__SWIG_0);
    if (SwigDerivedClassHasMethod("UpdateInternal", swigMethodTypes157))
      swigDelegate157 = new SwigDelegateHBaseView_157(SwigDirectorUpdateInternal__SWIG_1);
    if (SwigDerivedClassHasMethod("UpdateInternal", swigMethodTypes158))
      swigDelegate158 = new SwigDelegateHBaseView_158(SwigDirectorUpdateInternal__SWIG_2);
    if (SwigDerivedClassHasMethod("SetupLights", swigMethodTypes159))
      swigDelegate159 = new SwigDelegateHBaseView_159(SwigDirectorSetupLights);
    HCSMVOPINVOKE.HBaseView_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33, swigDelegate34, swigDelegate35, swigDelegate36, swigDelegate37, swigDelegate38, swigDelegate39, swigDelegate40, swigDelegate41, swigDelegate42, swigDelegate43, swigDelegate44, swigDelegate45, swigDelegate46, swigDelegate47, swigDelegate48, swigDelegate49, swigDelegate50, swigDelegate51, swigDelegate52, swigDelegate53, swigDelegate54, swigDelegate55, swigDelegate56, swigDelegate57, swigDelegate58, swigDelegate59, swigDelegate60, swigDelegate61, swigDelegate62, swigDelegate63, swigDelegate64, swigDelegate65, swigDelegate66, swigDelegate67, swigDelegate68, swigDelegate69, swigDelegate70, swigDelegate71, swigDelegate72, swigDelegate73, swigDelegate74, swigDelegate75, swigDelegate76, swigDelegate77, swigDelegate78, swigDelegate79, swigDelegate80, swigDelegate81, swigDelegate82, swigDelegate83, swigDelegate84, swigDelegate85, swigDelegate86, swigDelegate87, swigDelegate88, swigDelegate89, swigDelegate90, swigDelegate91, swigDelegate92, swigDelegate93, swigDelegate94, swigDelegate95, swigDelegate96, swigDelegate97, swigDelegate98, swigDelegate99, swigDelegate100, swigDelegate101, swigDelegate102, swigDelegate103, swigDelegate104, swigDelegate105, swigDelegate106, swigDelegate107, swigDelegate108, swigDelegate109, swigDelegate110, swigDelegate111, swigDelegate112, swigDelegate113, swigDelegate114, swigDelegate115, swigDelegate116, swigDelegate117, swigDelegate118, swigDelegate119, swigDelegate120, swigDelegate121, swigDelegate122, swigDelegate123, swigDelegate124, swigDelegate125, swigDelegate126, swigDelegate127, swigDelegate128, swigDelegate129, swigDelegate130, swigDelegate131, swigDelegate132, swigDelegate133, swigDelegate134, swigDelegate135, swigDelegate136, swigDelegate137, swigDelegate138, swigDelegate139, swigDelegate140, swigDelegate141, swigDelegate142, swigDelegate143, swigDelegate144, swigDelegate145, swigDelegate146, swigDelegate147, swigDelegate148, swigDelegate149, swigDelegate150, swigDelegate151, swigDelegate152, swigDelegate153, swigDelegate154, swigDelegate155, swigDelegate156, swigDelegate157, swigDelegate158, swigDelegate159);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HBaseView));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  private int SwigDirectorCameraChangedEvent(IntPtr param_1) {
    return CameraChangedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  private int SwigDirectorUpdateEvent__SWIG_0(bool antialias, bool forceUpdate) {
    return UpdateEvent(antialias, forceUpdate);
  }

  private int SwigDirectorViewDestroyedEvent(IntPtr param_1) {
    return ViewDestroyedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  private int SwigDirectorSmoothTransitionFinishedEvent(IntPtr param_1) {
    return SmoothTransitionFinishedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  private void SwigDirectorInit() {
    Init();
  }

  private void SwigDirectorFitWorld__SWIG_0(IntPtr center_out) {
    FitWorld((center_out == IntPtr.Zero) ? null : new HPoint(center_out, false));
  }

  private void SwigDirectorFitWorld__SWIG_1() {
    FitWorld();
  }

  private void SwigDirectorFitWorldExact__SWIG_0(IntPtr center_out) {
    FitWorldExact((center_out == IntPtr.Zero) ? null : new HPoint(center_out, false));
  }

  private void SwigDirectorFitWorldExact__SWIG_1() {
    FitWorldExact();
  }

  private void SwigDirectorZoomToExtents() {
    ZoomToExtents();
  }

  private void SwigDirectorZoomToInitialCamera() {
    ZoomToInitialCamera();
  }

  private void SwigDirectorUpdate() {
    Update();
  }

  private void SwigDirectorForceUpdate() {
    ForceUpdate();
  }

  private int SwigDirectorFileInput__SWIG_0(IntPtr FileName, IntPtr handler, IntPtr options) {
    return (int)FileInput(System.Runtime.InteropServices.Marshal.PtrToStringUni(FileName), (handler == IntPtr.Zero) ? null : new HInputHandler(handler, false), (options == IntPtr.Zero) ? null : new HInputHandlerOptions(options, false));
  }

  private int SwigDirectorFileInput__SWIG_1(IntPtr FileName, IntPtr handler) {
    return (int)FileInput(System.Runtime.InteropServices.Marshal.PtrToStringUni(FileName), (handler == IntPtr.Zero) ? null : new HInputHandler(handler, false));
  }

  private int SwigDirectorFileInput__SWIG_2(string FileName, IntPtr handler, IntPtr options) {
    return (int)FileInput(FileName, (handler == IntPtr.Zero) ? null : new HInputHandler(handler, false), (options == IntPtr.Zero) ? null : new HInputHandlerOptions(options, false));
  }

  private int SwigDirectorFileInput__SWIG_3(string FileName, IntPtr handler) {
    return (int)FileInput(FileName, (handler == IntPtr.Zero) ? null : new HInputHandler(handler, false));
  }

  private int SwigDirectorFileOutput__SWIG_0(IntPtr FileName, IntPtr handler, IntPtr options) {
    return (int)FileOutput(System.Runtime.InteropServices.Marshal.PtrToStringUni(FileName), (handler == IntPtr.Zero) ? null : new HOutputHandler(handler, false), (options == IntPtr.Zero) ? null : new HOutputHandlerOptions(options, false));
  }

  private int SwigDirectorFileOutput__SWIG_1(IntPtr FileName, IntPtr handler) {
    return (int)FileOutput(System.Runtime.InteropServices.Marshal.PtrToStringUni(FileName), (handler == IntPtr.Zero) ? null : new HOutputHandler(handler, false));
  }

  private int SwigDirectorFileOutput__SWIG_2(string FileName, IntPtr handler, IntPtr options) {
    return (int)FileOutput(FileName, (handler == IntPtr.Zero) ? null : new HOutputHandler(handler, false), (options == IntPtr.Zero) ? null : new HOutputHandlerOptions(options, false));
  }

  private int SwigDirectorFileOutput__SWIG_3(string FileName, IntPtr handler) {
    return (int)FileOutput(FileName, (handler == IntPtr.Zero) ? null : new HOutputHandler(handler, false));
  }

  private void SwigDirectorUpdateHighlighting() {
    UpdateHighlighting();
  }

  private IntPtr SwigDirectorGetModel() {
    return HBaseModel.getCPtr(GetModel()).Handle;
  }

  private void SwigDirectorSetViewMode__SWIG_0(int mode, bool invert, bool fitWorld) {
    SetViewMode((ViewMode)mode, invert, fitWorld);
  }

  private void SwigDirectorSetViewMode__SWIG_1(int mode, bool invert) {
    SetViewMode((ViewMode)mode, invert);
  }

  private void SwigDirectorSetViewMode__SWIG_2(int mode) {
    SetViewMode((ViewMode)mode);
  }

  private void SwigDirectorSetHandedness__SWIG_0(int mode, bool emit_message) {
    SetHandedness((HandednessMode)mode, emit_message);
  }

  private void SwigDirectorSetHandedness__SWIG_1(int mode) {
    SetHandedness((HandednessMode)mode);
  }

  private void SwigDirectorSetHandednessFromMessage(string in_data, uint data_length) {
    SetHandednessFromMessage(in_data, data_length);
  }

  private void SwigDirectorSetFontSize__SWIG_0(string font_size, bool emit_message) {
    SetFontSize(font_size, emit_message);
  }

  private void SwigDirectorSetFontSize__SWIG_1(string font_size) {
    SetFontSize(font_size);
  }

  private void SwigDirectorSetFontSizeFromMessage(string in_data, uint data_length) {
    SetFontSizeFromMessage(in_data, data_length);
  }

  private void SwigDirectorSetZoomLimit__SWIG_1() {
    SetZoomLimit();
  }

  private void SwigDirectorSetAxisMode(int mode) {
    SetAxisMode((AxisMode)mode);
  }

  private void SwigDirectorOnSetAxisMode(int mode) {
    OnSetAxisMode((AxisMode)mode);
  }

  private void SwigDirectorAdjustAxisWindow__SWIG_0(int axis_window_pixels_in, IntPtr rect_in) {
    AdjustAxisWindow(axis_window_pixels_in, (rect_in == IntPtr.Zero) ? null : new HIntRectangle(rect_in, false));
  }

  private void SwigDirectorAdjustAxisWindow__SWIG_1(int axis_window_pixels_in) {
    AdjustAxisWindow(axis_window_pixels_in);
  }

  private void SwigDirectorAdjustAxisWindow__SWIG_2() {
    AdjustAxisWindow();
  }

  private void SwigDirectorSetShadowMode__SWIG_0(int sm, bool saveMode) {
    SetShadowMode((HShadowMode)sm, saveMode);
  }

  private void SwigDirectorSetShadowMode__SWIG_1(int sm) {
    SetShadowMode((HShadowMode)sm);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_0(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur, int blur_level) {
    SetReflectionPlane(state, opacity, fading, attenuate, hither, yon, blur, blur_level);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_1(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur) {
    SetReflectionPlane(state, opacity, fading, attenuate, hither, yon, blur);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_2(bool state, float opacity, bool fading, bool attenuate, float hither, float yon) {
    SetReflectionPlane(state, opacity, fading, attenuate, hither, yon);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_3(bool state, float opacity, bool fading, bool attenuate, float hither) {
    SetReflectionPlane(state, opacity, fading, attenuate, hither);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_4(bool state, float opacity, bool fading, bool attenuate) {
    SetReflectionPlane(state, opacity, fading, attenuate);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_5(bool state, float opacity, bool fading) {
    SetReflectionPlane(state, opacity, fading);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_6(bool state, float opacity) {
    SetReflectionPlane(state, opacity);
  }

  private void SwigDirectorSetReflectionPlane__SWIG_7(bool state) {
    SetReflectionPlane(state);
  }

  private void SwigDirectorDeleteSelectionList__SWIG_0(bool emit_message) {
    DeleteSelectionList(emit_message);
  }

  private void SwigDirectorDeleteSelectionList__SWIG_1() {
    DeleteSelectionList();
  }

  private void SwigDirectorSetWindowColor__SWIG_0(IntPtr rgb, bool emit_message) {
    SetWindowColor(new HPoint(rgb, false), emit_message);
  }

  private void SwigDirectorSetWindowColor__SWIG_1(IntPtr rgb) {
    SetWindowColor(new HPoint(rgb, false));
  }

  private void SwigDirectorSetWindowColor__SWIG_2(IntPtr rgbtop, IntPtr rgbbottom, bool emit_message) {
    SetWindowColor(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), emit_message);
  }

  private void SwigDirectorSetWindowColor__SWIG_3(IntPtr rgbtop, IntPtr rgbbottom) {
    SetWindowColor(new HPoint(rgbtop, false), new HPoint(rgbbottom, false));
  }

  private void SwigDirectorSetWindowColorRange__SWIG_0(IntPtr rgbtop, IntPtr rgbbottom, int percentage, bool emit_message) {
    SetWindowColorRange(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), percentage, emit_message);
  }

  private void SwigDirectorSetWindowColorRange__SWIG_1(IntPtr rgbtop, IntPtr rgbbottom, int percentage) {
    SetWindowColorRange(new HPoint(rgbtop, false), new HPoint(rgbbottom, false), percentage);
  }

  private void SwigDirectorSetWindowMaterial__SWIG_0(string name, bool emit_message) {
    SetWindowMaterial(name, emit_message);
  }

  private void SwigDirectorSetWindowMaterial__SWIG_1(string name) {
    SetWindowMaterial(name);
  }

  private void SwigDirectorSetWindowColorFromMessage(string in_data, uint data_length) {
    SetWindowColorFromMessage(in_data, data_length);
  }

  private void SwigDirectorCameraPositionChanged__SWIG_0(bool emit_message, bool smooth_camera_transition) {
    CameraPositionChanged(emit_message, smooth_camera_transition);
  }

  private void SwigDirectorCameraPositionChanged__SWIG_1(bool emit_message) {
    CameraPositionChanged(emit_message);
  }

  private void SwigDirectorCameraPositionChanged__SWIG_2() {
    CameraPositionChanged();
  }

  private void SwigDirectorPrepareForCameraChange() {
    PrepareForCameraChange();
  }

  private void SwigDirectorSetCamera__SWIG_0(IntPtr pos, IntPtr tar, IntPtr up, float fieldx, float fieldy, string proj) {
    SetCamera(new HPoint(pos, false), new HPoint(tar, false), new HPoint(up, false), fieldx, fieldy, proj);
  }

  private void SwigDirectorSetInitialCamera(IntPtr pos, IntPtr tar, IntPtr up, float fieldx, float fieldy, string proj) {
    SetInitialCamera(new HPoint(pos, false), new HPoint(tar, false), new HPoint(up, false), fieldx, fieldy, proj);
  }

  private void SwigDirectorGetCamera__SWIG_0(IntPtr pos, IntPtr tar, IntPtr up, float[] fieldx, float[] fieldy, System.Text.StringBuilder proj) {
    GetCamera((pos == IntPtr.Zero) ? null : new HPoint(pos, false), (tar == IntPtr.Zero) ? null : new HPoint(tar, false), (up == IntPtr.Zero) ? null : new HPoint(up, false), fieldx, fieldy, proj);
  }

  private void SwigDirectorSetCamera__SWIG_1(IntPtr camera) {
    SetCamera(new HCamera(camera, false));
  }

  private void SwigDirectorGetCamera__SWIG_1(IntPtr camera) {
    GetCamera((camera == IntPtr.Zero) ? null : new HCamera(camera, false));
  }

  private void SwigDirectorSetCameraFromMessage(string data, uint data_length) {
    SetCameraFromMessage(data, data_length);
  }

  private void SwigDirectorInsertHSFData__SWIG_0(string segment, string in_data, uint data_length, bool emit_message) {
    InsertHSFData(segment, in_data, data_length, emit_message);
  }

  private void SwigDirectorInsertHSFData__SWIG_1(string segment, string in_data, uint data_length) {
    InsertHSFData(segment, in_data, data_length);
  }

  private void SwigDirectorInsertHSFDataFromMessage(string in_data, uint data_length) {
    InsertHSFDataFromMessage(in_data, data_length);
  }

  private void SwigDirectorEmitHSFData(string segment, string in_data, uint data_length) {
    EmitHSFData(segment, in_data, data_length);
  }

  private void SwigDirectorSetRenderMode__SWIG_0(int NewRenderMode, bool emit_message) {
    SetRenderMode((HRenderMode)NewRenderMode, emit_message);
  }

  private void SwigDirectorSetRenderMode__SWIG_1(int NewRenderMode) {
    SetRenderMode((HRenderMode)NewRenderMode);
  }

  private void SwigDirectorSetRenderModeFromMessage(string in_data, uint data_length) {
    SetRenderModeFromMessage(in_data, data_length);
  }

  private void SwigDirectorEmitFlushMessage() {
    EmitFlushMessage();
  }

  private void SwigDirectorFlushFromMessage(string in_data, uint data_length) {
    FlushFromMessage(in_data, data_length);
  }

  private void SwigDirectorFlush__SWIG_0(bool emit_message) {
    Flush(emit_message);
  }

  private void SwigDirectorFlush__SWIG_1() {
    Flush();
  }

  private void SwigDirectorEmitSelectMessage(MVO_POINTER_SIZED_INT key, bool isSelect) {
    EmitSelectMessage(key, isSelect);
  }

  private void SwigDirectorSelectFromMessage(string in_data, uint data_length) {
    SelectFromMessage(in_data, data_length);
  }

  private void SwigDirectorEmitDeSelectAllMessage() {
    EmitDeSelectAllMessage();
  }

  private void SwigDirectorEmitDeleteSelectionListMessage() {
    EmitDeleteSelectionListMessage();
  }

  private void SwigDirectorDeleteSelectionListFromMessage() {
    DeleteSelectionListFromMessage();
  }

  private void SwigDirectorDeSelectAllFromMessage() {
    DeSelectAllFromMessage();
  }

  private void SwigDirectorEmitSetModellingMatrixMessage__SWIG_0(MVO_POINTER_SIZED_INT key) {
    EmitSetModellingMatrixMessage(key);
  }

  private void SwigDirectorEmitSetModellingMatrixMessage__SWIG_1() {
    EmitSetModellingMatrixMessage();
  }

  private void SwigDirectorEmitSegment__SWIG_0(MVO_POINTER_SIZED_INT key, bool emit_contents_only) {
    EmitSegment(key, emit_contents_only);
  }

  private void SwigDirectorEmitSegment__SWIG_1(MVO_POINTER_SIZED_INT key) {
    EmitSegment(key);
  }

  private void SwigDirectorEmitDeleteByKeyMessage(MVO_POINTER_SIZED_INT key) {
    EmitDeleteByKeyMessage(key);
  }

  private void SwigDirectorDeleteByKeyFromMessage(string in_data, uint data_length) {
    DeleteByKeyFromMessage(in_data, data_length);
  }

  private void SwigDirectorSetModellingMatrixFromMessage(string in_data, uint data_length) {
    SetModellingMatrixFromMessage(in_data, data_length);
  }

  private void SwigDirectorStartSharedKey() {
    StartSharedKey();
  }

  private void SwigDirectorAnimate__SWIG_0(int animation_steps, int animate_flags, int MaxRotation) {
    Animate(animation_steps, (HBaseView.HAnimateMode)animate_flags, MaxRotation);
  }

  private void SwigDirectorAnimate__SWIG_1(int animation_steps, int animate_flags) {
    Animate(animation_steps, (HBaseView.HAnimateMode)animate_flags);
  }

  private void SwigDirectorAnimate__SWIG_2(int animation_steps) {
    Animate(animation_steps);
  }

  private void SwigDirectorAnimate__SWIG_3() {
    Animate();
  }

  private void SwigDirectorSetGeometryChanged() {
    SetGeometryChanged();
  }

  private void SwigDirectorClearGeometryChanged() {
    ClearGeometryChanged();
  }

  private bool SwigDirectorGeometryChanged() {
    return GeometryChanged();
  }

  private int SwigDirectorOnNoButtonDownAndMove(IntPtr hevent) {
    return OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonDownAndMove(IntPtr hevent) {
    return OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonDblClk(IntPtr hevent) {
    return OnLButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDownAndMove(IntPtr hevent) {
    return OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDownAndMove(IntPtr hevent) {
    return OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLRButtonDownAndMove(IntPtr hevent) {
    return OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonDown(IntPtr hevent) {
    return OnLButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseMove(IntPtr hevent) {
    return OnMouseMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonUp(IntPtr hevent) {
    return OnLButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseWheel(IntPtr hevent) {
    return OnMouseWheel(new HEventInfo(hevent, false));
  }

  private bool SwigDirectorComputeReasonableTarget(IntPtr new_tar, IntPtr mouse_win, IntPtr tar_orig) {
    return ComputeReasonableTarget(new HPoint(new_tar, false), new HPoint(mouse_win, false), new HPoint(tar_orig, false));
  }

  private int SwigDirectorOnKeyDown(IntPtr hevent) {
    return OnKeyDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnKeyUp(IntPtr hevent) {
    return OnKeyUp(new HEventInfo(hevent, false));
  }

  private void SwigDirectorSetShadowColor(IntPtr color) {
    SetShadowColor(new HPoint(color, false));
  }

  private void SwigDirectorSetShadowLightDirection__SWIG_0(bool explicit_light, IntPtr direction) {
    SetShadowLightDirection(explicit_light, (direction == IntPtr.Zero) ? null : new HPoint(direction, false));
  }

  private void SwigDirectorSetShadowLightDirection__SWIG_1(bool explicit_light) {
    SetShadowLightDirection(explicit_light);
  }

  private bool SwigDirectorGetShadowLightDirection__SWIG_0(IntPtr direction) {
    return GetShadowLightDirection((direction == IntPtr.Zero) ? null : new HPoint(direction, false));
  }

  private bool SwigDirectorGetShadowLightDirection__SWIG_1() {
    return GetShadowLightDirection();
  }

  private void SwigDirectorSetShadowIgnoresTransparency(bool ignore) {
    SetShadowIgnoresTransparency(ignore);
  }

  private bool SwigDirectorGetShadowIgnoresTransparency() {
    return GetShadowIgnoresTransparency();
  }

  private void SwigDirectorDoDynamicHighlighting(IntPtr mouse_pos) {
    DoDynamicHighlighting(new HPoint(mouse_pos, false));
  }

  private void SwigDirectorSetShadowResolution(int res) {
    SetShadowResolution(res);
  }

  private void SwigDirectorSetShadowBlurring(int blur) {
    SetShadowBlurring(blur);
  }

  private void SwigDirectorInternalUpdate() {
    InternalUpdate();
  }

  private void SwigDirectorSetShadowRegenerationMode(bool onoff) {
    SetShadowRegenerationMode(onoff);
  }

  private void SwigDirectorSetShadowRegenerationToggle() {
    SetShadowRegenerationToggle();
  }

  private void SwigDirectorSetCuttingPlaneRegenerationMode(bool onoff) {
    SetCuttingPlaneRegenerationMode(onoff);
  }

  private void SwigDirectorSetCameraChanged__SWIG_0(bool val) {
    SetCameraChanged(val);
  }

  private void SwigDirectorSetCameraChanged__SWIG_1() {
    SetCameraChanged();
  }

  private bool SwigDirectorGetCameraChanged() {
    return GetCameraChanged();
  }

  private void SwigDirectorSetInvertMouseWheelZoom__SWIG_0(bool val) {
    SetInvertMouseWheelZoom(val);
  }

  private void SwigDirectorSetInvertMouseWheelZoom__SWIG_1() {
    SetInvertMouseWheelZoom();
  }

  private bool SwigDirectorGetInvertMouseWheelZoom() {
    return GetInvertMouseWheelZoom();
  }

  private void SwigDirectorSetAxisManipulateOperator(IntPtr op) {
    SetAxisManipulateOperator((op == IntPtr.Zero) ? null : new HOpCameraManipulate(op, false));
  }

  private void SwigDirectorSetVisibilitySelectionMode(bool onoff) {
    SetVisibilitySelectionMode(onoff);
  }

  private bool SwigDirectorGetVisibilitySelectionMode() {
    return GetVisibilitySelectionMode();
  }

  private void SwigDirectorSetRelatedSelectionLimit(int limit) {
    SetRelatedSelectionLimit(limit);
  }

  private int SwigDirectorGetRelatedSelectionLimit() {
    return GetRelatedSelectionLimit();
  }

  private void SwigDirectorSetDetailSelection(bool onoff) {
    SetDetailSelection(onoff);
  }

  private bool SwigDirectorGetDetailSelectionMode() {
    return GetDetailSelectionMode();
  }

  private void SwigDirectorSetRespectSelectionCulling(bool onoff) {
    SetRespectSelectionCulling(onoff);
  }

  private bool SwigDirectorGetRespectSelectionCulling() {
    return GetRespectSelectionCulling();
  }

  private void SwigDirectorSmartFilterCircumcuboid(string segment, string defaults, IntPtr bottomfrontleft, IntPtr topbackright) {
    SmartFilterCircumcuboid(segment, defaults, (bottomfrontleft == IntPtr.Zero) ? null : new HPoint(bottomfrontleft, false), (topbackright == IntPtr.Zero) ? null : new HPoint(topbackright, false));
  }

  private int SwigDirectorSetupHandlesEvent(IntPtr view, MVO_POINTER_SIZED_INT key, bool complex) {
    return SetupHandlesEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, complex);
  }

  private bool SwigDirectorGetHasObjects() {
    return GetHasObjects();
  }

  private void SwigDirectorSetHasObjects(bool hasobjects) {
    SetHasObjects(hasobjects);
  }

  private void SwigDirectorSetHandleOperator(IntPtr op) {
    SetHandleOperator((op == IntPtr.Zero) ? null : new HBaseOperator(op, false));
  }

  private IntPtr SwigDirectorGetHandleOperator() {
    return HBaseOperator.getCPtr(GetHandleOperator()).Handle;
  }

  private float SwigDirectorGetDefaultSelectionProximity() {
    return GetDefaultSelectionProximity();
  }

  private void SwigDirectorSetDefaultSelectionProximity(float selectionproximity) {
    SetDefaultSelectionProximity(selectionproximity);
  }

  private int SwigDirectorObjectMovedEvent(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr pos) {
    return ObjectMovedEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, (pos == IntPtr.Zero) ? null : new HPoint(pos, false));
  }

  private int SwigDirectorGetHighlightMode() {
    return (int)GetHighlightMode();
  }

  private void SwigDirectorSetHighlightMode(int m) {
    SetHighlightMode((HSelectionHighlightMode)m);
  }

  private void SwigDirectorSetReferenceSelection(bool use_ref) {
    SetReferenceSelection(use_ref);
  }

  private void SwigDirectorUpdateInternal__SWIG_0(bool antialias, bool force_update) {
    UpdateInternal(antialias, force_update);
  }

  private void SwigDirectorUpdateInternal__SWIG_1(bool antialias) {
    UpdateInternal(antialias);
  }

  private void SwigDirectorUpdateInternal__SWIG_2() {
    UpdateInternal();
  }

  private void SwigDirectorSetupLights() {
    SetupLights();
  }

  public delegate IntPtr SwigDelegateHBaseView_0();
  public delegate int SwigDelegateHBaseView_1(IntPtr param_1);
  public delegate int SwigDelegateHBaseView_2(bool antialias, bool forceUpdate);
  public delegate int SwigDelegateHBaseView_3(IntPtr param_1);
  public delegate int SwigDelegateHBaseView_4(IntPtr param_1);
  public delegate void SwigDelegateHBaseView_5();
  public delegate void SwigDelegateHBaseView_6(IntPtr center_out);
  public delegate void SwigDelegateHBaseView_7();
  public delegate void SwigDelegateHBaseView_8(IntPtr center_out);
  public delegate void SwigDelegateHBaseView_9();
  public delegate void SwigDelegateHBaseView_10();
  public delegate void SwigDelegateHBaseView_11();
  public delegate void SwigDelegateHBaseView_12();
  public delegate void SwigDelegateHBaseView_13();
  public delegate int SwigDelegateHBaseView_14(IntPtr FileName, IntPtr handler, IntPtr options);
  public delegate int SwigDelegateHBaseView_15(IntPtr FileName, IntPtr handler);
  public delegate int SwigDelegateHBaseView_16(string FileName, IntPtr handler, IntPtr options);
  public delegate int SwigDelegateHBaseView_17(string FileName, IntPtr handler);
  public delegate int SwigDelegateHBaseView_18(IntPtr FileName, IntPtr handler, IntPtr options);
  public delegate int SwigDelegateHBaseView_19(IntPtr FileName, IntPtr handler);
  public delegate int SwigDelegateHBaseView_20(string FileName, IntPtr handler, IntPtr options);
  public delegate int SwigDelegateHBaseView_21(string FileName, IntPtr handler);
  public delegate void SwigDelegateHBaseView_22();
  public delegate IntPtr SwigDelegateHBaseView_23();
  public delegate void SwigDelegateHBaseView_24(int mode, bool invert, bool fitWorld);
  public delegate void SwigDelegateHBaseView_25(int mode, bool invert);
  public delegate void SwigDelegateHBaseView_26(int mode);
  public delegate void SwigDelegateHBaseView_27(int mode, bool emit_message);
  public delegate void SwigDelegateHBaseView_28(int mode);
  public delegate void SwigDelegateHBaseView_29(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_30(string font_size, bool emit_message);
  public delegate void SwigDelegateHBaseView_31(string font_size);
  public delegate void SwigDelegateHBaseView_32(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_33();
  public delegate void SwigDelegateHBaseView_34(int mode);
  public delegate void SwigDelegateHBaseView_35(int mode);
  public delegate void SwigDelegateHBaseView_36(int axis_window_pixels_in, IntPtr rect_in);
  public delegate void SwigDelegateHBaseView_37(int axis_window_pixels_in);
  public delegate void SwigDelegateHBaseView_38();
  public delegate void SwigDelegateHBaseView_39(int sm, bool saveMode);
  public delegate void SwigDelegateHBaseView_40(int sm);
  public delegate void SwigDelegateHBaseView_41(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur, int blur_level);
  public delegate void SwigDelegateHBaseView_42(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur);
  public delegate void SwigDelegateHBaseView_43(bool state, float opacity, bool fading, bool attenuate, float hither, float yon);
  public delegate void SwigDelegateHBaseView_44(bool state, float opacity, bool fading, bool attenuate, float hither);
  public delegate void SwigDelegateHBaseView_45(bool state, float opacity, bool fading, bool attenuate);
  public delegate void SwigDelegateHBaseView_46(bool state, float opacity, bool fading);
  public delegate void SwigDelegateHBaseView_47(bool state, float opacity);
  public delegate void SwigDelegateHBaseView_48(bool state);
  public delegate void SwigDelegateHBaseView_49(bool emit_message);
  public delegate void SwigDelegateHBaseView_50();
  public delegate void SwigDelegateHBaseView_51(IntPtr rgb, bool emit_message);
  public delegate void SwigDelegateHBaseView_52(IntPtr rgb);
  public delegate void SwigDelegateHBaseView_53(IntPtr rgbtop, IntPtr rgbbottom, bool emit_message);
  public delegate void SwigDelegateHBaseView_54(IntPtr rgbtop, IntPtr rgbbottom);
  public delegate void SwigDelegateHBaseView_55(IntPtr rgbtop, IntPtr rgbbottom, int percentage, bool emit_message);
  public delegate void SwigDelegateHBaseView_56(IntPtr rgbtop, IntPtr rgbbottom, int percentage);
  public delegate void SwigDelegateHBaseView_57(string name, bool emit_message);
  public delegate void SwigDelegateHBaseView_58(string name);
  public delegate void SwigDelegateHBaseView_59(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_60(bool emit_message, bool smooth_camera_transition);
  public delegate void SwigDelegateHBaseView_61(bool emit_message);
  public delegate void SwigDelegateHBaseView_62();
  public delegate void SwigDelegateHBaseView_63();
  public delegate void SwigDelegateHBaseView_64(IntPtr pos, IntPtr tar, IntPtr up, float fieldx, float fieldy, string proj);
  public delegate void SwigDelegateHBaseView_65(IntPtr pos, IntPtr tar, IntPtr up, float fieldx, float fieldy, string proj);
  public delegate void SwigDelegateHBaseView_66(IntPtr pos, IntPtr tar, IntPtr up, float[] fieldx, float[] fieldy, System.Text.StringBuilder proj);
  public delegate void SwigDelegateHBaseView_67(IntPtr camera);
  public delegate void SwigDelegateHBaseView_68(IntPtr camera);
  public delegate void SwigDelegateHBaseView_69(string data, uint data_length);
  public delegate void SwigDelegateHBaseView_70(string segment, string in_data, uint data_length, bool emit_message);
  public delegate void SwigDelegateHBaseView_71(string segment, string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_72(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_73(string segment, string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_74(int NewRenderMode, bool emit_message);
  public delegate void SwigDelegateHBaseView_75(int NewRenderMode);
  public delegate void SwigDelegateHBaseView_76(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_77();
  public delegate void SwigDelegateHBaseView_78(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_79(bool emit_message);
  public delegate void SwigDelegateHBaseView_80();
  public delegate void SwigDelegateHBaseView_81(MVO_POINTER_SIZED_INT key, bool isSelect);
  public delegate void SwigDelegateHBaseView_82(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_83();
  public delegate void SwigDelegateHBaseView_84();
  public delegate void SwigDelegateHBaseView_85();
  public delegate void SwigDelegateHBaseView_86();
  public delegate void SwigDelegateHBaseView_87(MVO_POINTER_SIZED_INT key);
  public delegate void SwigDelegateHBaseView_88();
  public delegate void SwigDelegateHBaseView_89(MVO_POINTER_SIZED_INT key, bool emit_contents_only);
  public delegate void SwigDelegateHBaseView_90(MVO_POINTER_SIZED_INT key);
  public delegate void SwigDelegateHBaseView_91(MVO_POINTER_SIZED_INT key);
  public delegate void SwigDelegateHBaseView_92(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_93(string in_data, uint data_length);
  public delegate void SwigDelegateHBaseView_94();
  public delegate void SwigDelegateHBaseView_95(int animation_steps, int animate_flags, int MaxRotation);
  public delegate void SwigDelegateHBaseView_96(int animation_steps, int animate_flags);
  public delegate void SwigDelegateHBaseView_97(int animation_steps);
  public delegate void SwigDelegateHBaseView_98();
  public delegate void SwigDelegateHBaseView_99();
  public delegate void SwigDelegateHBaseView_100();
  public delegate bool SwigDelegateHBaseView_101();
  public delegate int SwigDelegateHBaseView_102(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_103(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_104(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_105(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_106(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_107(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_108(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_109(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_110(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_111(IntPtr hevent);
  public delegate bool SwigDelegateHBaseView_112(IntPtr new_tar, IntPtr mouse_win, IntPtr tar_orig);
  public delegate int SwigDelegateHBaseView_113(IntPtr hevent);
  public delegate int SwigDelegateHBaseView_114(IntPtr hevent);
  public delegate void SwigDelegateHBaseView_115(IntPtr color);
  public delegate void SwigDelegateHBaseView_116(bool explicit_light, IntPtr direction);
  public delegate void SwigDelegateHBaseView_117(bool explicit_light);
  public delegate bool SwigDelegateHBaseView_118(IntPtr direction);
  public delegate bool SwigDelegateHBaseView_119();
  public delegate void SwigDelegateHBaseView_120(bool ignore);
  public delegate bool SwigDelegateHBaseView_121();
  public delegate void SwigDelegateHBaseView_122(IntPtr mouse_pos);
  public delegate void SwigDelegateHBaseView_123(int res);
  public delegate void SwigDelegateHBaseView_124(int blur);
  public delegate void SwigDelegateHBaseView_125();
  public delegate void SwigDelegateHBaseView_126(bool onoff);
  public delegate void SwigDelegateHBaseView_127();
  public delegate void SwigDelegateHBaseView_128(bool onoff);
  public delegate void SwigDelegateHBaseView_129(bool val);
  public delegate void SwigDelegateHBaseView_130();
  public delegate bool SwigDelegateHBaseView_131();
  public delegate void SwigDelegateHBaseView_132(bool val);
  public delegate void SwigDelegateHBaseView_133();
  public delegate bool SwigDelegateHBaseView_134();
  public delegate void SwigDelegateHBaseView_135(IntPtr op);
  public delegate void SwigDelegateHBaseView_136(bool onoff);
  public delegate bool SwigDelegateHBaseView_137();
  public delegate void SwigDelegateHBaseView_138(int limit);
  public delegate int SwigDelegateHBaseView_139();
  public delegate void SwigDelegateHBaseView_140(bool onoff);
  public delegate bool SwigDelegateHBaseView_141();
  public delegate void SwigDelegateHBaseView_142(bool onoff);
  public delegate bool SwigDelegateHBaseView_143();
  public delegate void SwigDelegateHBaseView_144(string segment, string defaults, IntPtr bottomfrontleft, IntPtr topbackright);
  public delegate int SwigDelegateHBaseView_145(IntPtr view, MVO_POINTER_SIZED_INT key, bool complex);
  public delegate bool SwigDelegateHBaseView_146();
  public delegate void SwigDelegateHBaseView_147(bool hasobjects);
  public delegate void SwigDelegateHBaseView_148(IntPtr op);
  public delegate IntPtr SwigDelegateHBaseView_149();
  public delegate float SwigDelegateHBaseView_150();
  public delegate void SwigDelegateHBaseView_151(float selectionproximity);
  public delegate int SwigDelegateHBaseView_152(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr pos);
  public delegate int SwigDelegateHBaseView_153();
  public delegate void SwigDelegateHBaseView_154(int m);
  public delegate void SwigDelegateHBaseView_155(bool use_ref);
  public delegate void SwigDelegateHBaseView_156(bool antialias, bool force_update);
  public delegate void SwigDelegateHBaseView_157(bool antialias);
  public delegate void SwigDelegateHBaseView_158();
  public delegate void SwigDelegateHBaseView_159();

  private SwigDelegateHBaseView_0 swigDelegate0;
  private SwigDelegateHBaseView_1 swigDelegate1;
  private SwigDelegateHBaseView_2 swigDelegate2;
  private SwigDelegateHBaseView_3 swigDelegate3;
  private SwigDelegateHBaseView_4 swigDelegate4;
  private SwigDelegateHBaseView_5 swigDelegate5;
  private SwigDelegateHBaseView_6 swigDelegate6;
  private SwigDelegateHBaseView_7 swigDelegate7;
  private SwigDelegateHBaseView_8 swigDelegate8;
  private SwigDelegateHBaseView_9 swigDelegate9;
  private SwigDelegateHBaseView_10 swigDelegate10;
  private SwigDelegateHBaseView_11 swigDelegate11;
  private SwigDelegateHBaseView_12 swigDelegate12;
  private SwigDelegateHBaseView_13 swigDelegate13;
  private SwigDelegateHBaseView_14 swigDelegate14;
  private SwigDelegateHBaseView_15 swigDelegate15;
  private SwigDelegateHBaseView_16 swigDelegate16;
  private SwigDelegateHBaseView_17 swigDelegate17;
  private SwigDelegateHBaseView_18 swigDelegate18;
  private SwigDelegateHBaseView_19 swigDelegate19;
  private SwigDelegateHBaseView_20 swigDelegate20;
  private SwigDelegateHBaseView_21 swigDelegate21;
  private SwigDelegateHBaseView_22 swigDelegate22;
  private SwigDelegateHBaseView_23 swigDelegate23;
  private SwigDelegateHBaseView_24 swigDelegate24;
  private SwigDelegateHBaseView_25 swigDelegate25;
  private SwigDelegateHBaseView_26 swigDelegate26;
  private SwigDelegateHBaseView_27 swigDelegate27;
  private SwigDelegateHBaseView_28 swigDelegate28;
  private SwigDelegateHBaseView_29 swigDelegate29;
  private SwigDelegateHBaseView_30 swigDelegate30;
  private SwigDelegateHBaseView_31 swigDelegate31;
  private SwigDelegateHBaseView_32 swigDelegate32;
  private SwigDelegateHBaseView_33 swigDelegate33;
  private SwigDelegateHBaseView_34 swigDelegate34;
  private SwigDelegateHBaseView_35 swigDelegate35;
  private SwigDelegateHBaseView_36 swigDelegate36;
  private SwigDelegateHBaseView_37 swigDelegate37;
  private SwigDelegateHBaseView_38 swigDelegate38;
  private SwigDelegateHBaseView_39 swigDelegate39;
  private SwigDelegateHBaseView_40 swigDelegate40;
  private SwigDelegateHBaseView_41 swigDelegate41;
  private SwigDelegateHBaseView_42 swigDelegate42;
  private SwigDelegateHBaseView_43 swigDelegate43;
  private SwigDelegateHBaseView_44 swigDelegate44;
  private SwigDelegateHBaseView_45 swigDelegate45;
  private SwigDelegateHBaseView_46 swigDelegate46;
  private SwigDelegateHBaseView_47 swigDelegate47;
  private SwigDelegateHBaseView_48 swigDelegate48;
  private SwigDelegateHBaseView_49 swigDelegate49;
  private SwigDelegateHBaseView_50 swigDelegate50;
  private SwigDelegateHBaseView_51 swigDelegate51;
  private SwigDelegateHBaseView_52 swigDelegate52;
  private SwigDelegateHBaseView_53 swigDelegate53;
  private SwigDelegateHBaseView_54 swigDelegate54;
  private SwigDelegateHBaseView_55 swigDelegate55;
  private SwigDelegateHBaseView_56 swigDelegate56;
  private SwigDelegateHBaseView_57 swigDelegate57;
  private SwigDelegateHBaseView_58 swigDelegate58;
  private SwigDelegateHBaseView_59 swigDelegate59;
  private SwigDelegateHBaseView_60 swigDelegate60;
  private SwigDelegateHBaseView_61 swigDelegate61;
  private SwigDelegateHBaseView_62 swigDelegate62;
  private SwigDelegateHBaseView_63 swigDelegate63;
  private SwigDelegateHBaseView_64 swigDelegate64;
  private SwigDelegateHBaseView_65 swigDelegate65;
  private SwigDelegateHBaseView_66 swigDelegate66;
  private SwigDelegateHBaseView_67 swigDelegate67;
  private SwigDelegateHBaseView_68 swigDelegate68;
  private SwigDelegateHBaseView_69 swigDelegate69;
  private SwigDelegateHBaseView_70 swigDelegate70;
  private SwigDelegateHBaseView_71 swigDelegate71;
  private SwigDelegateHBaseView_72 swigDelegate72;
  private SwigDelegateHBaseView_73 swigDelegate73;
  private SwigDelegateHBaseView_74 swigDelegate74;
  private SwigDelegateHBaseView_75 swigDelegate75;
  private SwigDelegateHBaseView_76 swigDelegate76;
  private SwigDelegateHBaseView_77 swigDelegate77;
  private SwigDelegateHBaseView_78 swigDelegate78;
  private SwigDelegateHBaseView_79 swigDelegate79;
  private SwigDelegateHBaseView_80 swigDelegate80;
  private SwigDelegateHBaseView_81 swigDelegate81;
  private SwigDelegateHBaseView_82 swigDelegate82;
  private SwigDelegateHBaseView_83 swigDelegate83;
  private SwigDelegateHBaseView_84 swigDelegate84;
  private SwigDelegateHBaseView_85 swigDelegate85;
  private SwigDelegateHBaseView_86 swigDelegate86;
  private SwigDelegateHBaseView_87 swigDelegate87;
  private SwigDelegateHBaseView_88 swigDelegate88;
  private SwigDelegateHBaseView_89 swigDelegate89;
  private SwigDelegateHBaseView_90 swigDelegate90;
  private SwigDelegateHBaseView_91 swigDelegate91;
  private SwigDelegateHBaseView_92 swigDelegate92;
  private SwigDelegateHBaseView_93 swigDelegate93;
  private SwigDelegateHBaseView_94 swigDelegate94;
  private SwigDelegateHBaseView_95 swigDelegate95;
  private SwigDelegateHBaseView_96 swigDelegate96;
  private SwigDelegateHBaseView_97 swigDelegate97;
  private SwigDelegateHBaseView_98 swigDelegate98;
  private SwigDelegateHBaseView_99 swigDelegate99;
  private SwigDelegateHBaseView_100 swigDelegate100;
  private SwigDelegateHBaseView_101 swigDelegate101;
  private SwigDelegateHBaseView_102 swigDelegate102;
  private SwigDelegateHBaseView_103 swigDelegate103;
  private SwigDelegateHBaseView_104 swigDelegate104;
  private SwigDelegateHBaseView_105 swigDelegate105;
  private SwigDelegateHBaseView_106 swigDelegate106;
  private SwigDelegateHBaseView_107 swigDelegate107;
  private SwigDelegateHBaseView_108 swigDelegate108;
  private SwigDelegateHBaseView_109 swigDelegate109;
  private SwigDelegateHBaseView_110 swigDelegate110;
  private SwigDelegateHBaseView_111 swigDelegate111;
  private SwigDelegateHBaseView_112 swigDelegate112;
  private SwigDelegateHBaseView_113 swigDelegate113;
  private SwigDelegateHBaseView_114 swigDelegate114;
  private SwigDelegateHBaseView_115 swigDelegate115;
  private SwigDelegateHBaseView_116 swigDelegate116;
  private SwigDelegateHBaseView_117 swigDelegate117;
  private SwigDelegateHBaseView_118 swigDelegate118;
  private SwigDelegateHBaseView_119 swigDelegate119;
  private SwigDelegateHBaseView_120 swigDelegate120;
  private SwigDelegateHBaseView_121 swigDelegate121;
  private SwigDelegateHBaseView_122 swigDelegate122;
  private SwigDelegateHBaseView_123 swigDelegate123;
  private SwigDelegateHBaseView_124 swigDelegate124;
  private SwigDelegateHBaseView_125 swigDelegate125;
  private SwigDelegateHBaseView_126 swigDelegate126;
  private SwigDelegateHBaseView_127 swigDelegate127;
  private SwigDelegateHBaseView_128 swigDelegate128;
  private SwigDelegateHBaseView_129 swigDelegate129;
  private SwigDelegateHBaseView_130 swigDelegate130;
  private SwigDelegateHBaseView_131 swigDelegate131;
  private SwigDelegateHBaseView_132 swigDelegate132;
  private SwigDelegateHBaseView_133 swigDelegate133;
  private SwigDelegateHBaseView_134 swigDelegate134;
  private SwigDelegateHBaseView_135 swigDelegate135;
  private SwigDelegateHBaseView_136 swigDelegate136;
  private SwigDelegateHBaseView_137 swigDelegate137;
  private SwigDelegateHBaseView_138 swigDelegate138;
  private SwigDelegateHBaseView_139 swigDelegate139;
  private SwigDelegateHBaseView_140 swigDelegate140;
  private SwigDelegateHBaseView_141 swigDelegate141;
  private SwigDelegateHBaseView_142 swigDelegate142;
  private SwigDelegateHBaseView_143 swigDelegate143;
  private SwigDelegateHBaseView_144 swigDelegate144;
  private SwigDelegateHBaseView_145 swigDelegate145;
  private SwigDelegateHBaseView_146 swigDelegate146;
  private SwigDelegateHBaseView_147 swigDelegate147;
  private SwigDelegateHBaseView_148 swigDelegate148;
  private SwigDelegateHBaseView_149 swigDelegate149;
  private SwigDelegateHBaseView_150 swigDelegate150;
  private SwigDelegateHBaseView_151 swigDelegate151;
  private SwigDelegateHBaseView_152 swigDelegate152;
  private SwigDelegateHBaseView_153 swigDelegate153;
  private SwigDelegateHBaseView_154 swigDelegate154;
  private SwigDelegateHBaseView_155 swigDelegate155;
  private SwigDelegateHBaseView_156 swigDelegate156;
  private SwigDelegateHBaseView_157 swigDelegate157;
  private SwigDelegateHBaseView_158 swigDelegate158;
  private SwigDelegateHBaseView_159 swigDelegate159;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(HBaseView) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(HBaseView) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(HBaseView) };
  private static Type[] swigMethodTypes5 = new Type[] {  };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes7 = new Type[] {  };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes9 = new Type[] {  };
  private static Type[] swigMethodTypes10 = new Type[] {  };
  private static Type[] swigMethodTypes11 = new Type[] {  };
  private static Type[] swigMethodTypes12 = new Type[] {  };
  private static Type[] swigMethodTypes13 = new Type[] {  };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(string), typeof(HInputHandler), typeof(HInputHandlerOptions) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(string), typeof(HInputHandler) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(string), typeof(HInputHandler), typeof(HInputHandlerOptions) };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(string), typeof(HInputHandler) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(string), typeof(HOutputHandler), typeof(HOutputHandlerOptions) };
  private static Type[] swigMethodTypes19 = new Type[] { typeof(string), typeof(HOutputHandler) };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(string), typeof(HOutputHandler), typeof(HOutputHandlerOptions) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(string), typeof(HOutputHandler) };
  private static Type[] swigMethodTypes22 = new Type[] {  };
  private static Type[] swigMethodTypes23 = new Type[] {  };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(ViewMode), typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(ViewMode), typeof(bool) };
  private static Type[] swigMethodTypes26 = new Type[] { typeof(ViewMode) };
  private static Type[] swigMethodTypes27 = new Type[] { typeof(HandednessMode), typeof(bool) };
  private static Type[] swigMethodTypes28 = new Type[] { typeof(HandednessMode) };
  private static Type[] swigMethodTypes29 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes30 = new Type[] { typeof(string), typeof(bool) };
  private static Type[] swigMethodTypes31 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes32 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes33 = new Type[] {  };
  private static Type[] swigMethodTypes34 = new Type[] { typeof(AxisMode) };
  private static Type[] swigMethodTypes35 = new Type[] { typeof(AxisMode) };
  private static Type[] swigMethodTypes36 = new Type[] { typeof(int), typeof(HIntRectangle) };
  private static Type[] swigMethodTypes37 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes38 = new Type[] {  };
  private static Type[] swigMethodTypes39 = new Type[] { typeof(HShadowMode), typeof(bool) };
  private static Type[] swigMethodTypes40 = new Type[] { typeof(HShadowMode) };
  private static Type[] swigMethodTypes41 = new Type[] { typeof(bool), typeof(float), typeof(bool), typeof(bool), typeof(float), typeof(float), typeof(bool), typeof(int) };
  private static Type[] swigMethodTypes42 = new Type[] { typeof(bool), typeof(float), typeof(bool), typeof(bool), typeof(float), typeof(float), typeof(bool) };
  private static Type[] swigMethodTypes43 = new Type[] { typeof(bool), typeof(float), typeof(bool), typeof(bool), typeof(float), typeof(float) };
  private static Type[] swigMethodTypes44 = new Type[] { typeof(bool), typeof(float), typeof(bool), typeof(bool), typeof(float) };
  private static Type[] swigMethodTypes45 = new Type[] { typeof(bool), typeof(float), typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes46 = new Type[] { typeof(bool), typeof(float), typeof(bool) };
  private static Type[] swigMethodTypes47 = new Type[] { typeof(bool), typeof(float) };
  private static Type[] swigMethodTypes48 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes49 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes50 = new Type[] {  };
  private static Type[] swigMethodTypes51 = new Type[] { typeof(HPoint), typeof(bool) };
  private static Type[] swigMethodTypes52 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes53 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(bool) };
  private static Type[] swigMethodTypes54 = new Type[] { typeof(HPoint), typeof(HPoint) };
  private static Type[] swigMethodTypes55 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes56 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(int) };
  private static Type[] swigMethodTypes57 = new Type[] { typeof(string), typeof(bool) };
  private static Type[] swigMethodTypes58 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes59 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes60 = new Type[] { typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes61 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes62 = new Type[] {  };
  private static Type[] swigMethodTypes63 = new Type[] {  };
  private static Type[] swigMethodTypes64 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(HPoint), typeof(float), typeof(float), typeof(string) };
  private static Type[] swigMethodTypes65 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(HPoint), typeof(float), typeof(float), typeof(string) };
  private static Type[] swigMethodTypes66 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(HPoint), typeof(float[]), typeof(float[]), typeof(System.Text.StringBuilder) };
  private static Type[] swigMethodTypes67 = new Type[] { typeof(HCamera) };
  private static Type[] swigMethodTypes68 = new Type[] { typeof(HCamera) };
  private static Type[] swigMethodTypes69 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes70 = new Type[] { typeof(string), typeof(string), typeof(uint), typeof(bool) };
  private static Type[] swigMethodTypes71 = new Type[] { typeof(string), typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes72 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes73 = new Type[] { typeof(string), typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes74 = new Type[] { typeof(HRenderMode), typeof(bool) };
  private static Type[] swigMethodTypes75 = new Type[] { typeof(HRenderMode) };
  private static Type[] swigMethodTypes76 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes77 = new Type[] {  };
  private static Type[] swigMethodTypes78 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes79 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes80 = new Type[] {  };
  private static Type[] swigMethodTypes81 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes82 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes83 = new Type[] {  };
  private static Type[] swigMethodTypes84 = new Type[] {  };
  private static Type[] swigMethodTypes85 = new Type[] {  };
  private static Type[] swigMethodTypes86 = new Type[] {  };
  private static Type[] swigMethodTypes87 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes88 = new Type[] {  };
  private static Type[] swigMethodTypes89 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes90 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes91 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes92 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes93 = new Type[] { typeof(string), typeof(uint) };
  private static Type[] swigMethodTypes94 = new Type[] {  };
  private static Type[] swigMethodTypes95 = new Type[] { typeof(int), typeof(HBaseView.HAnimateMode), typeof(int) };
  private static Type[] swigMethodTypes96 = new Type[] { typeof(int), typeof(HBaseView.HAnimateMode) };
  private static Type[] swigMethodTypes97 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes98 = new Type[] {  };
  private static Type[] swigMethodTypes99 = new Type[] {  };
  private static Type[] swigMethodTypes100 = new Type[] {  };
  private static Type[] swigMethodTypes101 = new Type[] {  };
  private static Type[] swigMethodTypes102 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes103 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes104 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes105 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes106 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes107 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes108 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes109 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes110 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes111 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes112 = new Type[] { typeof(HPoint), typeof(HPoint), typeof(HPoint) };
  private static Type[] swigMethodTypes113 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes114 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes115 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes116 = new Type[] { typeof(bool), typeof(HPoint) };
  private static Type[] swigMethodTypes117 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes118 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes119 = new Type[] {  };
  private static Type[] swigMethodTypes120 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes121 = new Type[] {  };
  private static Type[] swigMethodTypes122 = new Type[] { typeof(HPoint) };
  private static Type[] swigMethodTypes123 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes124 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes125 = new Type[] {  };
  private static Type[] swigMethodTypes126 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes127 = new Type[] {  };
  private static Type[] swigMethodTypes128 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes129 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes130 = new Type[] {  };
  private static Type[] swigMethodTypes131 = new Type[] {  };
  private static Type[] swigMethodTypes132 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes133 = new Type[] {  };
  private static Type[] swigMethodTypes134 = new Type[] {  };
  private static Type[] swigMethodTypes135 = new Type[] { typeof(HOpCameraManipulate) };
  private static Type[] swigMethodTypes136 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes137 = new Type[] {  };
  private static Type[] swigMethodTypes138 = new Type[] { typeof(int) };
  private static Type[] swigMethodTypes139 = new Type[] {  };
  private static Type[] swigMethodTypes140 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes141 = new Type[] {  };
  private static Type[] swigMethodTypes142 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes143 = new Type[] {  };
  private static Type[] swigMethodTypes144 = new Type[] { typeof(string), typeof(string), typeof(HPoint), typeof(HPoint) };
  private static Type[] swigMethodTypes145 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes146 = new Type[] {  };
  private static Type[] swigMethodTypes147 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes148 = new Type[] { typeof(HBaseOperator) };
  private static Type[] swigMethodTypes149 = new Type[] {  };
  private static Type[] swigMethodTypes150 = new Type[] {  };
  private static Type[] swigMethodTypes151 = new Type[] { typeof(float) };
  private static Type[] swigMethodTypes152 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(HPoint) };
  private static Type[] swigMethodTypes153 = new Type[] {  };
  private static Type[] swigMethodTypes154 = new Type[] { typeof(HSelectionHighlightMode) };
  private static Type[] swigMethodTypes155 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes156 = new Type[] { typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes157 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes158 = new Type[] {  };
  private static Type[] swigMethodTypes159 = new Type[] {  };
  public static readonly int MaxLights = HCSMVOPINVOKE.HBaseView_MaxLights_get();
  public enum HAnimateMode {
    HAnimateScene = 0x00000001
  }

}
