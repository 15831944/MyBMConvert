/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HBhvBehaviorManager : HTClient {
  private HandleRef swigCPtr;

  public HBhvBehaviorManager(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HBhvBehaviorManagerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HBhvBehaviorManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HBhvBehaviorManager() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HBhvBehaviorManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HBhvBehaviorManager(HBaseModel model, int tps, int delay, string name, string version, string vendor) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_0(HBaseModel.getCPtr(model), tps, delay, name, version, vendor), true) {
  }

  public HBhvBehaviorManager(HBaseModel model, int tps, int delay, string name, string version) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_1(HBaseModel.getCPtr(model), tps, delay, name, version), true) {
  }

  public HBhvBehaviorManager(HBaseModel model, int tps, int delay, string name) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_2(HBaseModel.getCPtr(model), tps, delay, name), true) {
  }

  public HBhvBehaviorManager(HBaseModel model, int tps, int delay) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_3(HBaseModel.getCPtr(model), tps, delay), true) {
  }

  public HBhvBehaviorManager(HBaseModel model, int tps) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_4(HBaseModel.getCPtr(model), tps), true) {
  }

  public HBhvBehaviorManager(HBaseModel model) : this(HCSMVOPINVOKE.new_HBhvBehaviorManager__SWIG_5(HBaseModel.getCPtr(model)), true) {
  }

  public void SetTicksPerSecond(int tps) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetTicksPerSecond(swigCPtr, tps);
  }

  public int GetTicksPerSecond() {
    int ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetTicksPerSecond(swigCPtr);
    return ret;
  }

  public void Serialize(SWIGTYPE_p_HUtilityXMLGenerator xmlgen) {
    HCSMVOPINVOKE.HBhvBehaviorManager_Serialize(swigCPtr, SWIGTYPE_p_HUtilityXMLGenerator.getCPtr(xmlgen));
  }

  public void ScheduleAnimation(HBhvAnimation animation, float currenttime) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ScheduleAnimation(swigCPtr, HBhvAnimation.getCPtr(animation), currenttime);
  }

  public HBhvAnimation AddAnimation(string name, string target, SWIGTYPE_p_HBhvTimeline timeline, SWIGTYPE_p_HBhvInterpolator interpolator) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_AddAnimation__SWIG_0(swigCPtr, name, target, SWIGTYPE_p_HBhvTimeline.getCPtr(timeline), SWIGTYPE_p_HBhvInterpolator.getCPtr(interpolator));
    HBhvAnimation ret = (cPtr == IntPtr.Zero) ? null : new HBhvAnimation(cPtr, false);
    return ret;
  }

  public void AddAnimation(HBhvAnimation animation) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddAnimation__SWIG_1(swigCPtr, HBhvAnimation.getCPtr(animation));
  }

  public override bool Tick(float request_time, float actual_time) {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_Tick(swigCPtr, request_time, actual_time);
    return ret;
  }

  public SWIGTYPE_p_vlist_s GetAnimationList() {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_GetAnimationList(swigCPtr);
    SWIGTYPE_p_vlist_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vlist_s(cPtr, false);
    return ret;
  }

  public int GetFreeName() {
    int ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetFreeName(swigCPtr);
    return ret;
  }

  public void DeleteAllAnimations() {
    HCSMVOPINVOKE.HBhvBehaviorManager_DeleteAllAnimations(swigCPtr);
  }

  public HBhvAnimation FindAnimation(string target, string interpolatortype) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_FindAnimation(swigCPtr, target, interpolatortype);
    HBhvAnimation ret = (cPtr == IntPtr.Zero) ? null : new HBhvAnimation(cPtr, false);
    return ret;
  }

  public HBhvAnimation FindAnimationByName(string name) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_FindAnimationByName(swigCPtr, name);
    HBhvAnimation ret = (cPtr == IntPtr.Zero) ? null : new HBhvAnimation(cPtr, false);
    return ret;
  }

  public void ScheduleAllAnimations(bool reset) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ScheduleAllAnimations__SWIG_0(swigCPtr, reset);
  }

  public void ScheduleAllAnimations() {
    HCSMVOPINVOKE.HBhvBehaviorManager_ScheduleAllAnimations__SWIG_1(swigCPtr);
  }

  public void DeleteAnimation(HBhvAnimation animation) {
    HCSMVOPINVOKE.HBhvBehaviorManager_DeleteAnimation(swigCPtr, HBhvAnimation.getCPtr(animation));
  }

  public HBhvTargetObject CreateTargetObjectByPath(string name, string path) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_CreateTargetObjectByPath(swigCPtr, name, path);
    HBhvTargetObject ret = (cPtr == IntPtr.Zero) ? null : new HBhvTargetObject(cPtr, false);
    return ret;
  }

  public void AddTargetObject(HBhvTargetObject targetobject) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTargetObject(swigCPtr, HBhvTargetObject.getCPtr(targetobject));
  }

  public HBhvTargetObject FindTargetObjectByName(string name) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_FindTargetObjectByName(swigCPtr, name);
    HBhvTargetObject ret = (cPtr == IntPtr.Zero) ? null : new HBhvTargetObject(cPtr, false);
    return ret;
  }

  public HBhvTargetObject FindTargetObjectByPath(string path) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_FindTargetObjectByPath(swigCPtr, path);
    HBhvTargetObject ret = (cPtr == IntPtr.Zero) ? null : new HBhvTargetObject(cPtr, false);
    return ret;
  }

  public void WriteToFile(string filename) {
    HCSMVOPINVOKE.HBhvBehaviorManager_WriteToFile__SWIG_0(swigCPtr, filename);
  }

  public static void ReadFromFile(HBaseModel model, string filename) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ReadFromFile__SWIG_0(HBaseModel.getCPtr(model), filename);
  }

  public static void ProcessXMLData(HBaseModel model, string buffer) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ProcessXMLData(HBaseModel.getCPtr(model), buffer);
  }

  public static IntPtr XMLCallback(SWIGTYPE_p_HUtilityXMLTag xt, bool open, IntPtr m_pExtraData) {return new IntPtr((int)HCSMVOPINVOKE.HBhvBehaviorManager_XMLCallback(SWIGTYPE_p_HUtilityXMLTag.getCPtr(xt), open, m_pExtraData));}

  public HBaseModel GetModel() {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_GetModel(swigCPtr);
    HBaseModel ret = (cPtr == IntPtr.Zero) ? null : new HBaseModel(cPtr, false);
    return ret;
  }

  public void SetCurrentTickByTime(float t) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetCurrentTickByTime(swigCPtr, t);
  }

  public void SetCurrentTick(float tick) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetCurrentTick__SWIG_0(swigCPtr, tick);
  }

  public void SetCurrentTick() {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetCurrentTick__SWIG_1(swigCPtr);
  }

  public float GetCurrentTick() {
    float ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetCurrentTick(swigCPtr);
    return ret;
  }

  public void SetCurrentTickByPercentage(float percentage) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetCurrentTickByPercentage(swigCPtr, percentage);
  }

  public float GetCurrentTickByPercentage() {
    float ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetCurrentTickByPercentage(swigCPtr);
    return ret;
  }

  public void Rewind() {
    HCSMVOPINVOKE.HBhvBehaviorManager_Rewind(swigCPtr);
  }

  public bool IsPlaying() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_IsPlaying(swigCPtr);
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetActiveSceneKey() {return HCSMVOPINVOKE.HBhvBehaviorManager_GetActiveSceneKey(swigCPtr);}

  public void SetActiveView(HBaseView view) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetActiveView(swigCPtr, HBaseView.getCPtr(view));
  }

  public HBaseView GetActiveView() {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_GetActiveView(swigCPtr);
    HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
    return ret;
  }

  public bool GetRenderEveryTick() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetRenderEveryTick(swigCPtr);
    return ret;
  }

  public void SetRenderEveryTick(bool everytick) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetRenderEveryTick(swigCPtr, everytick);
  }

  public bool GetUpdateCamera() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetUpdateCamera(swigCPtr);
    return ret;
  }

  public bool IsAtFinalTick() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_IsAtFinalTick(swigCPtr);
    return ret;
  }

  public void SetUpdateCamera(bool updatecamera) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetUpdateCamera(swigCPtr, updatecamera);
  }

  public int GetNextKeyframe(int ticknum, bool forward) {
    int ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetNextKeyframe(swigCPtr, ticknum, forward);
    return ret;
  }

  public void AddSensor(SWIGTYPE_p_HBhvSensor sensor) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddSensor(swigCPtr, SWIGTYPE_p_HBhvSensor.getCPtr(sensor));
  }

  public void RemoveScheduledAnimation(HBhvAnimation animation) {
    HCSMVOPINVOKE.HBhvBehaviorManager_RemoveScheduledAnimation(swigCPtr, HBhvAnimation.getCPtr(animation));
  }

  public bool HasAnimations() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_HasAnimations(swigCPtr);
    return ret;
  }

  public int GetLastTick() {
    int ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetLastTick(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_HBhvSensor FindSensorByName(string name) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_FindSensorByName(swigCPtr, name);
    SWIGTYPE_p_HBhvSensor ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HBhvSensor(cPtr, false);
    return ret;
  }

  public void ExecuteAnimations(float currenttick, float starttick) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ExecuteAnimations(swigCPtr, currenttick, starttick);
  }

  public void SetContinuousPlay(bool cont) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetContinuousPlay(swigCPtr, cont);
  }

  public void SetInfinitePlay(bool inf) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetInfinitePlay(swigCPtr, inf);
  }

  public bool GetContinuousPlay() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetContinuousPlay(swigCPtr);
    return ret;
  }

  public void CameraUpdated() {
    HCSMVOPINVOKE.HBhvBehaviorManager_CameraUpdated(swigCPtr);
  }

  public bool GetCameraUpdated() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetCameraUpdated(swigCPtr);
    return ret;
  }

  public void Play() {
    HCSMVOPINVOKE.HBhvBehaviorManager_Play(swigCPtr);
  }

  public void Stop() {
    HCSMVOPINVOKE.HBhvBehaviorManager_Stop(swigCPtr);
  }

  public void Continue() {
    HCSMVOPINVOKE.HBhvBehaviorManager_Continue(swigCPtr);
  }

  public void SetPositionMatrix(float[] mat) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetPositionMatrix(swigCPtr, mat);
  }

  public void GetPositionMatrix(float[] mat) {
    HCSMVOPINVOKE.HBhvBehaviorManager_GetPositionMatrix(swigCPtr, mat);
  }

  public void SetTargetMatrix(float[] mat) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetTargetMatrix(swigCPtr, mat);
  }

  public void GetTargetMatrix(float[] mat) {
    HCSMVOPINVOKE.HBhvBehaviorManager_GetTargetMatrix(swigCPtr, mat);
  }

  public void SetFov(float fov) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetFov(swigCPtr, fov);
  }

  public void GetFov(float fov) {
    HCSMVOPINVOKE.HBhvBehaviorManager_GetFov(swigCPtr, fov);
  }

  public void Reset() {
    HCSMVOPINVOKE.HBhvBehaviorManager_Reset(swigCPtr);
  }

  public void DeactivateAllAnimations() {
    HCSMVOPINVOKE.HBhvBehaviorManager_DeactivateAllAnimations(swigCPtr);
  }

  public void ActivateAllAnimations() {
    HCSMVOPINVOKE.HBhvBehaviorManager_ActivateAllAnimations(swigCPtr);
  }

  public void ActivateAnimationByName(string name, bool AllowPartial) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ActivateAnimationByName__SWIG_0(swigCPtr, name, AllowPartial);
  }

  public void ActivateAnimationByName(string name) {
    HCSMVOPINVOKE.HBhvBehaviorManager_ActivateAnimationByName__SWIG_1(swigCPtr, name);
  }

  public void DeactivateAnimationByName(string name, bool AllowPartial) {
    HCSMVOPINVOKE.HBhvBehaviorManager_DeactivateAnimationByName__SWIG_0(swigCPtr, name, AllowPartial);
  }

  public void DeactivateAnimationByName(string name) {
    HCSMVOPINVOKE.HBhvBehaviorManager_DeactivateAnimationByName__SWIG_1(swigCPtr, name);
  }

  public void SetStartTime(float time) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetStartTime(swigCPtr, time);
  }

  public void SetMerge(bool merge) {
    HCSMVOPINVOKE.HBhvBehaviorManager_SetMerge(swigCPtr, merge);
  }

  public bool GetMerge() {
    bool ret = HCSMVOPINVOKE.HBhvBehaviorManager_GetMerge(swigCPtr);
    return ret;
  }

  public HBhvAnimation AddAnimation(string name, string targetpath, HPoint pivot) {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvBehaviorManager_AddAnimation__SWIG_2(swigCPtr, name, targetpath, HPoint.getCPtr(pivot));
    HBhvAnimation ret = (cPtr == IntPtr.Zero) ? null : new HBhvAnimation(cPtr, false);
    return ret;
  }

  public void AddPositionKeyframe(string animname, int tick, HPoint pos, bool linear) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddPositionKeyframe(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddQuatSquadKeyframe(string animname, int tick, HQuat rot, bool linear) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddQuatSquadKeyframe(swigCPtr, animname, tick, HQuat.getCPtr(rot), linear);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMatrixKeyframe(string animname, int tick, float[] matrix) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddMatrixKeyframe(swigCPtr, animname, tick, matrix);
  }

  public void AddSegmentMoveKeyframe(string animname, int tick, System.Text.StringBuilder path) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddSegmentMoveKeyframe(swigCPtr, animname, tick, path);
  }

  public void AddTrailKeyframe(string animname, int tick, HPoint pos, bool linear, SWIGTYPE_p_TrailInterpolatorType trailtype, int[] weight, string style, string color) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTrailKeyframe__SWIG_0(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear, SWIGTYPE_p_TrailInterpolatorType.getCPtr(trailtype), weight, style, color);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTrailKeyframe(string animname, int tick, HPoint pos, bool linear, SWIGTYPE_p_TrailInterpolatorType trailtype, int[] weight, string style) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTrailKeyframe__SWIG_1(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear, SWIGTYPE_p_TrailInterpolatorType.getCPtr(trailtype), weight, style);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTrailKeyframe(string animname, int tick, HPoint pos, bool linear, SWIGTYPE_p_TrailInterpolatorType trailtype, int[] weight) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTrailKeyframe__SWIG_2(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear, SWIGTYPE_p_TrailInterpolatorType.getCPtr(trailtype), weight);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTrailKeyframe(string animname, int tick, HPoint pos, bool linear, SWIGTYPE_p_TrailInterpolatorType trailtype) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTrailKeyframe__SWIG_3(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear, SWIGTYPE_p_TrailInterpolatorType.getCPtr(trailtype));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTrailKeyframe(string animname, int tick, HPoint pos, bool linear) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddTrailKeyframe__SWIG_4(swigCPtr, animname, tick, HPoint.getCPtr(pos), linear);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddAxisRotateKeyframe(string animname, int tick, float rot, HPoint axis) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_0(swigCPtr, animname, tick, rot, HPoint.getCPtr(axis));
  }

  public void AddAxisRotateKeyframe(string animname, int tick, float rot) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_1(swigCPtr, animname, tick, rot);
  }

  public void AddColorKeyframe(string animname, int tick, HPoint color, string colorcomponent, string geomtype) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorKeyframe__SWIG_0(swigCPtr, animname, tick, HPoint.getCPtr(color), colorcomponent, geomtype);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddColorKeyframe(string animname, int tick, HPoint color, string colorcomponent) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorKeyframe__SWIG_1(swigCPtr, animname, tick, HPoint.getCPtr(color), colorcomponent);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddColorKeyframe(string animname, int tick, HPoint color) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorKeyframe__SWIG_2(swigCPtr, animname, tick, HPoint.getCPtr(color));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddScaleKeyframe(string animname, int tick, HPoint scale) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddScaleKeyframe(swigCPtr, animname, tick, HPoint.getCPtr(scale));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddAttributeSwitchKeyframe(string animname, int tick, string att) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddAttributeSwitchKeyframe(swigCPtr, animname, tick, att);
  }

  public void AddVertexMorphInterpolator(string animname, int tick, string mident, bool discrete) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddVertexMorphInterpolator(swigCPtr, animname, tick, mident, discrete);
  }

  public void AddColorMorphInterpolator(string animname, int tick, string mident, bool discrete) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorMorphInterpolator(swigCPtr, animname, tick, mident, discrete);
  }

  public void AddSegmentSwitchKeyframe(string animname, int tick, string ss) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddSegmentSwitchKeyframe(swigCPtr, animname, tick, ss);
  }

  public void AddInstanceCreateKeyframe(string animname, int tick, string instance) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddInstanceCreateKeyframe(swigCPtr, animname, tick, instance);
  }

  public void AddVertexMorphDataToAnimation(string animname, HPoint md, int pnum, HBaseModel model, int pos) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_0(swigCPtr, animname, HPoint.getCPtr(md), pnum, HBaseModel.getCPtr(model), pos);
  }

  public void AddVertexMorphDataToAnimation(string animname, HPoint md, int pnum, HBaseModel model) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_1(swigCPtr, animname, HPoint.getCPtr(md), pnum, HBaseModel.getCPtr(model));
  }

  public void AddColorMorphDataToAnimation(string animname, HPoint md, int pnum, HBaseModel model, int pos) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_0(swigCPtr, animname, HPoint.getCPtr(md), pnum, HBaseModel.getCPtr(model), pos);
  }

  public void AddColorMorphDataToAnimation(string animname, HPoint md, int pnum, HBaseModel model) {
    HCSMVOPINVOKE.HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_1(swigCPtr, animname, HPoint.getCPtr(md), pnum, HBaseModel.getCPtr(model));
  }

}
