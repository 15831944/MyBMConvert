/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUpdateListener : HEventListener {
  private HandleRef swigCPtr;

  public HUpdateListener(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HUpdateListenerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUpdateListener obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HUpdateListener() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUpdateListener(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static HEventListenerType GetEventType() {
    HEventListenerType ret = (HEventListenerType)HCSMVOPINVOKE.HUpdateListener_GetEventType();
    return ret;
  }

  public override HEventListener CreateListenerManager() {
    IntPtr cPtr = ((this.GetType() == typeof(HUpdateListener)) ? HCSMVOPINVOKE.HUpdateListener_CreateListenerManager(swigCPtr) : HCSMVOPINVOKE.HUpdateListener_CreateListenerManagerSwigExplicitHUpdateListener(swigCPtr));
    HEventListener ret = (cPtr == IntPtr.Zero) ? null : new HEventListener(cPtr, false);
    return ret;
  }

  public virtual int CameraChangedEvent(HBaseView param_1) {
    int ret = ((this.GetType() == typeof(HUpdateListener)) ? HCSMVOPINVOKE.HUpdateListener_CameraChangedEvent(swigCPtr, HBaseView.getCPtr(param_1)) : HCSMVOPINVOKE.HUpdateListener_CameraChangedEventSwigExplicitHUpdateListener(swigCPtr, HBaseView.getCPtr(param_1)));
    return ret;
  }

  public virtual int UpdateEvent(bool antialias, bool forceUpdate) {
    int ret = ((this.GetType() == typeof(HUpdateListener)) ? HCSMVOPINVOKE.HUpdateListener_UpdateEvent(swigCPtr, antialias, forceUpdate) : HCSMVOPINVOKE.HUpdateListener_UpdateEventSwigExplicitHUpdateListener(swigCPtr, antialias, forceUpdate));
    return ret;
  }

  public virtual int ViewDestroyedEvent(HBaseView param_1) {
    int ret = ((this.GetType() == typeof(HUpdateListener)) ? HCSMVOPINVOKE.HUpdateListener_ViewDestroyedEvent(swigCPtr, HBaseView.getCPtr(param_1)) : HCSMVOPINVOKE.HUpdateListener_ViewDestroyedEventSwigExplicitHUpdateListener(swigCPtr, HBaseView.getCPtr(param_1)));
    return ret;
  }

  public virtual int SmoothTransitionFinishedEvent(HBaseView param_1) {
    int ret = ((this.GetType() == typeof(HUpdateListener)) ? HCSMVOPINVOKE.HUpdateListener_SmoothTransitionFinishedEvent(swigCPtr, HBaseView.getCPtr(param_1)) : HCSMVOPINVOKE.HUpdateListener_SmoothTransitionFinishedEventSwigExplicitHUpdateListener(swigCPtr, HBaseView.getCPtr(param_1)));
    return ret;
  }

  public HUpdateListener() : this(HCSMVOPINVOKE.new_HUpdateListener(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHUpdateListener_0(SwigDirectorCreateListenerManager);
    if (SwigDerivedClassHasMethod("CameraChangedEvent", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHUpdateListener_1(SwigDirectorCameraChangedEvent);
    if (SwigDerivedClassHasMethod("UpdateEvent", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHUpdateListener_2(SwigDirectorUpdateEvent);
    if (SwigDerivedClassHasMethod("ViewDestroyedEvent", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHUpdateListener_3(SwigDirectorViewDestroyedEvent);
    if (SwigDerivedClassHasMethod("SmoothTransitionFinishedEvent", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHUpdateListener_4(SwigDirectorSmoothTransitionFinishedEvent);
    HCSMVOPINVOKE.HUpdateListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HUpdateListener));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  private int SwigDirectorCameraChangedEvent(IntPtr param_1) {
    return CameraChangedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  private int SwigDirectorUpdateEvent(bool antialias, bool forceUpdate) {
    return UpdateEvent(antialias, forceUpdate);
  }

  private int SwigDirectorViewDestroyedEvent(IntPtr param_1) {
    return ViewDestroyedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  private int SwigDirectorSmoothTransitionFinishedEvent(IntPtr param_1) {
    return SmoothTransitionFinishedEvent((param_1 == IntPtr.Zero) ? null : new HBaseView(param_1, false));
  }

  public delegate IntPtr SwigDelegateHUpdateListener_0();
  public delegate int SwigDelegateHUpdateListener_1(IntPtr param_1);
  public delegate int SwigDelegateHUpdateListener_2(bool antialias, bool forceUpdate);
  public delegate int SwigDelegateHUpdateListener_3(IntPtr param_1);
  public delegate int SwigDelegateHUpdateListener_4(IntPtr param_1);

  private SwigDelegateHUpdateListener_0 swigDelegate0;
  private SwigDelegateHUpdateListener_1 swigDelegate1;
  private SwigDelegateHUpdateListener_2 swigDelegate2;
  private SwigDelegateHUpdateListener_3 swigDelegate3;
  private SwigDelegateHUpdateListener_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(HBaseView) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(bool), typeof(bool) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(HBaseView) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(HBaseView) };
}
