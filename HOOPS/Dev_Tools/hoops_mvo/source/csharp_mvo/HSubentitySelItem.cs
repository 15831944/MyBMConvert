/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HSubentitySelItem : HSmartSelItem {
  private HandleRef swigCPtr;

  public HSubentitySelItem(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HSubentitySelItemUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HSubentitySelItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HSubentitySelItem() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HSubentitySelItem(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HSubentitySelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int face_count, int[] faces, int vertex_count, int[] vertex1, int[] vertex2, bool highlight_faces, bool highlight_vertices, bool highlight_edges, bool maintain_maps) : this(HCSMVOPINVOKE.new_HSubentitySelItem__SWIG_0(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, face_count, faces, vertex_count, vertex1, vertex2, highlight_faces, highlight_vertices, highlight_edges, maintain_maps), true) {
  }

  public HSubentitySelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int face_count, int[] faces, int vertex_count, int[] vertex1, int[] vertex2, bool highlight_faces, bool highlight_vertices, bool highlight_edges) : this(HCSMVOPINVOKE.new_HSubentitySelItem__SWIG_1(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, face_count, faces, vertex_count, vertex1, vertex2, highlight_faces, highlight_vertices, highlight_edges), true) {
  }

  public HSubentitySelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int face_count, int[] faces, int vertex_count, int[] vertex1, int[] vertex2, bool highlight_faces, bool highlight_vertices) : this(HCSMVOPINVOKE.new_HSubentitySelItem__SWIG_2(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, face_count, faces, vertex_count, vertex1, vertex2, highlight_faces, highlight_vertices), true) {
  }

  public HSubentitySelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int face_count, int[] faces, int vertex_count, int[] vertex1, int[] vertex2, bool highlight_faces) : this(HCSMVOPINVOKE.new_HSubentitySelItem__SWIG_3(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, face_count, faces, vertex_count, vertex1, vertex2, highlight_faces), true) {
  }

  public HSubentitySelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int face_count, int[] faces, int vertex_count, int[] vertex1, int[] vertex2) : this(HCSMVOPINVOKE.new_HSubentitySelItem__SWIG_4(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, face_count, faces, vertex_count, vertex1, vertex2), true) {
  }

  public override string GetName() {
    string ret = HCSMVOPINVOKE.HSubentitySelItem_GetName(swigCPtr);
    return ret;
  }

  public override bool Equals(HSelectionItem i2) {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_Equals(swigCPtr, HSelectionItem.getCPtr(i2));
    return ret;
  }

  public virtual bool Similar(HSelectionItem i2) {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_Similar(swigCPtr, HSelectionItem.getCPtr(i2));
    return ret;
  }

  public override bool Highlight() {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_Highlight(swigCPtr);
    return ret;
  }

  public override bool UnHighlight() {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_UnHighlight__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual bool UnHighlight(HSubentitySelItem remove_sel) {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_UnHighlight__SWIG_1(swigCPtr, HSubentitySelItem.getCPtr(remove_sel));
    return ret;
  }

  public bool IsEmpty() {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_IsEmpty(swigCPtr);
    return ret;
  }

  public override bool Delete() {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_Delete(swigCPtr);
    return ret;
  }

  public int GetFaceCount() {
    int ret = HCSMVOPINVOKE.HSubentitySelItem_GetFaceCount(swigCPtr);
    return ret;
  }

  public void GetFaces(int[] faces) {
    HCSMVOPINVOKE.HSubentitySelItem_GetFaces(swigCPtr, faces);
  }

  public int GetVertexCount() {
    int ret = HCSMVOPINVOKE.HSubentitySelItem_GetVertexCount(swigCPtr);
    return ret;
  }

  public void GetVertices(int[] vertex1, int[] vertex2) {
    HCSMVOPINVOKE.HSubentitySelItem_GetVertices(swigCPtr, vertex1, vertex2);
  }

  public bool MaintainMaps() {
    bool ret = HCSMVOPINVOKE.HSubentitySelItem_MaintainMaps__SWIG_0(swigCPtr);
    return ret;
  }

  public void MaintainMaps(bool maintain_maps) {
    HCSMVOPINVOKE.HSubentitySelItem_MaintainMaps__SWIG_1(swigCPtr, maintain_maps);
  }

  public void GetMapCounts(int[] face_map_count, int[] vertex_map_count) {
    HCSMVOPINVOKE.HSubentitySelItem_GetMapCounts(swigCPtr, face_map_count, vertex_map_count);
  }

  public void GetMaps(int[] face_map, int[] vertex_map) {
    HCSMVOPINVOKE.HSubentitySelItem_GetMaps(swigCPtr, face_map, vertex_map);
  }

  public void MergeMaps(HSubentitySelItem that) {
    HCSMVOPINVOKE.HSubentitySelItem_MergeMaps(swigCPtr, HSubentitySelItem.getCPtr(that));
  }

}
