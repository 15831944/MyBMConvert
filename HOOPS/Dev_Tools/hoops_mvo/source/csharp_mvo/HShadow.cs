/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HShadow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HShadow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HShadow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HShadow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HShadow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HShadow(MVO_POINTER_SIZED_INT ModelSegmentKey, MVO_POINTER_SIZED_INT ShadowBaseSegmentKey, float[] ObjectModellingMatrix) : this(HCSMVOPINVOKE.new_HShadow__SWIG_0(ModelSegmentKey, ShadowBaseSegmentKey, ObjectModellingMatrix), true) {
  }

  public HShadow(MVO_POINTER_SIZED_INT ModelSegmentKey, MVO_POINTER_SIZED_INT ShadowBaseSegmentKey) : this(HCSMVOPINVOKE.new_HShadow__SWIG_1(ModelSegmentKey, ShadowBaseSegmentKey), true) {
  }

  public void CalculateTotalModelExtents() {
    HCSMVOPINVOKE.HShadow_CalculateTotalModelExtents(swigCPtr);
  }

  public void GetModelExtents(HPoint ObjectBoundingMin, HPoint ObjectBoundingMax) {
    HCSMVOPINVOKE.HShadow_GetModelExtents(swigCPtr, HPoint.getCPtr(ObjectBoundingMin), HPoint.getCPtr(ObjectBoundingMax));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetShadowLightPos(HPoint lightpos) {
    HCSMVOPINVOKE.HShadow_GetShadowLightPos(swigCPtr, HPoint.getCPtr(lightpos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetShadowGroundPlane(HPlane plane) {
    HCSMVOPINVOKE.HShadow_GetShadowGroundPlane(swigCPtr, HPlane.getCPtr(plane));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public MVO_POINTER_SIZED_INT GetShadowKey() {return HCSMVOPINVOKE.HShadow_GetShadowKey(swigCPtr);}

  public void SetShadowLightPos(HPoint lightpos) {
    HCSMVOPINVOKE.HShadow_SetShadowLightPos(swigCPtr, HPoint.getCPtr(lightpos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetShadowGroundPlane(HPlane plane) {
    HCSMVOPINVOKE.HShadow_SetShadowGroundPlane(swigCPtr, HPlane.getCPtr(plane));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetShadowBrightness(int ShadowBrightness) {
    HCSMVOPINVOKE.HShadow_SetShadowBrightness(swigCPtr, ShadowBrightness);
  }

  public int GetShadowBrightness() {
    int ret = HCSMVOPINVOKE.HShadow_GetShadowBrightness(swigCPtr);
    return ret;
  }

}
