/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUtilityAnnotation : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUtilityAnnotation(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUtilityAnnotation obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUtilityAnnotation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUtilityAnnotation(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HUtilityAnnotation() : this(HCSMVOPINVOKE.new_HUtilityAnnotation(), true) {
  }

  public virtual void AddChar(char the_char) {
    HCSMVOPINVOKE.HUtilityAnnotation_AddChar__SWIG_0(swigCPtr, the_char);
  }

  public virtual void AddChar(ushort the_char) {
    HCSMVOPINVOKE.HUtilityAnnotation_AddChar__SWIG_1(swigCPtr, the_char);
  }

  public virtual MVO_POINTER_SIZED_INT GetBackgroundSegmentKey() {return HCSMVOPINVOKE.HUtilityAnnotation_GetBackgroundSegmentKey(swigCPtr);}

  public virtual MVO_POINTER_SIZED_INT GetKey() {return HCSMVOPINVOKE.HUtilityAnnotation_GetKey__SWIG_0(swigCPtr);}

  public static MVO_POINTER_SIZED_INT GetKey(MVO_POINTER_SIZED_INT arg0) {return HCSMVOPINVOKE.HUtilityAnnotation_GetKey__SWIG_1(arg0);}

  public virtual void GetText(System.Text.StringBuilder text, int[] length) {
    HCSMVOPINVOKE.HUtilityAnnotation_GetText(swigCPtr, text, length);
  }

  public virtual int GetTextLength() {
    int ret = HCSMVOPINVOKE.HUtilityAnnotation_GetTextLength(swigCPtr);
    return ret;
  }

  public virtual void GetTextWithEncoding(ushort[] text, int[] length) {
    HCSMVOPINVOKE.HUtilityAnnotation_GetTextWithEncoding(swigCPtr, text, length);
  }

  public virtual string GetHType() {
    string ret = HCSMVOPINVOKE.HUtilityAnnotation_GetHType(swigCPtr);
    return ret;
  }

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_0(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_1(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_2(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_3(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_4(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_5(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_6(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_7(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_8(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_9(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_10(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public virtual MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotation_Insert__SWIG_11(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_0(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_1(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_2(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_3(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_4(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public virtual MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotation_InsertWithEncoding__SWIG_5(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  public static bool IsAnnotation(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HUtilityAnnotation_IsAnnotation(key);
    return ret;
  }

  public static bool IsNote(MVO_POINTER_SIZED_INT noteskey) {
    bool ret = HCSMVOPINVOKE.HUtilityAnnotation_IsNote(noteskey);
    return ret;
  }

  public static void ChangeAllFonts(HBaseView view, string font, MVO_POINTER_SIZED_INT seg_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_ChangeAllFonts__SWIG_0(HBaseView.getCPtr(view), font, seg_key);
  }

  public static void ChangeAllFonts(HBaseView view, string font) {
    HCSMVOPINVOKE.HUtilityAnnotation_ChangeAllFonts__SWIG_1(HBaseView.getCPtr(view), font);
  }

  public virtual void MoveText(HPoint pos, HCamera camera) {
    HCSMVOPINVOKE.HUtilityAnnotation_MoveText__SWIG_0(swigCPtr, HPoint.getCPtr(pos), HCamera.getCPtr(camera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MoveText(HPoint pos) {
    HCSMVOPINVOKE.HUtilityAnnotation_MoveText__SWIG_1(swigCPtr, HPoint.getCPtr(pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MoveText(HPoint tar, HPoint pos, HCamera camera) {
    HCSMVOPINVOKE.HUtilityAnnotation_MoveText__SWIG_2(swigCPtr, HPoint.getCPtr(tar), HPoint.getCPtr(pos), HCamera.getCPtr(camera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void MoveText(HPoint tar, HPoint pos) {
    HCSMVOPINVOKE.HUtilityAnnotation_MoveText__SWIG_3(swigCPtr, HPoint.getCPtr(tar), HPoint.getCPtr(pos));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetBackgroundType(int type) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetBackgroundType(swigCPtr, type);
  }

  public virtual void SetColor(string color) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetColor(swigCPtr, color);
  }

  public virtual void SetEdgeWeight(float weight) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetEdgeWeight(swigCPtr, weight);
  }

  public virtual void SetExtents(int xpixels, int ypixels, MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetExtents(swigCPtr, xpixels, ypixels, view_key);
  }

  public virtual void SetFacePattern(string pattern) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetFacePattern(swigCPtr, pattern);
  }

  public virtual void SetLinePattern(string pattern) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetLinePattern(swigCPtr, pattern);
  }

  public virtual void SetLineWeight(float weight) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetLineWeight(swigCPtr, weight);
  }

  public virtual void SetNote(MVO_POINTER_SIZED_INT noteskey, MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetNote__SWIG_0(swigCPtr, noteskey, view_key);
  }

  public virtual void SetNote(MVO_POINTER_SIZED_INT noteskey, HBaseView pView) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetNote__SWIG_1(swigCPtr, noteskey, HBaseView.getCPtr(pView));
  }

  public virtual void SetOnTop(bool t) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetOnTop(swigCPtr, t);
  }

  public virtual bool GetOnTop() {
    bool ret = HCSMVOPINVOKE.HUtilityAnnotation_GetOnTop(swigCPtr);
    return ret;
  }

  public virtual void SetText(string text) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetText(swigCPtr, text);
  }

  public virtual void SetTextFont(string font) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetTextFont(swigCPtr, font);
  }

  public virtual void SetTextWithEncoding(ushort[] text) {
    HCSMVOPINVOKE.HUtilityAnnotation_SetTextWithEncoding(swigCPtr, text);
  }

  public virtual void ShowPosition(HPoint p) {
    HCSMVOPINVOKE.HUtilityAnnotation_ShowPosition__SWIG_0(swigCPtr, HPoint.getCPtr(p));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ShowPosition(float[] x, float[] y, float[] z) {
    HCSMVOPINVOKE.HUtilityAnnotation_ShowPosition__SWIG_1(swigCPtr, x, y, z);
  }

  public virtual void ShowTarget(HPoint p) {
    HCSMVOPINVOKE.HUtilityAnnotation_ShowTarget__SWIG_0(swigCPtr, HPoint.getCPtr(p));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ShowTarget(float[] x, float[] y, float[] z) {
    HCSMVOPINVOKE.HUtilityAnnotation_ShowTarget__SWIG_1(swigCPtr, x, y, z);
  }

  public virtual void UnSetExtents() {
    HCSMVOPINVOKE.HUtilityAnnotation_UnSetExtents(swigCPtr);
  }

  public virtual void Resize(int include_count, MVO_POINTER_SIZED_INT[] include_keys, MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_Resize__SWIG_0(swigCPtr, include_count, include_keys, view_key);
  }

  public virtual void Resize(MVO_POINTER_SIZED_INT include_keys, MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_Resize__SWIG_1(swigCPtr, include_keys, view_key);
  }

  public virtual HPoint GetFacing() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HUtilityAnnotation_GetFacing(swigCPtr), true);
    return ret;
  }

  public virtual HPoint GetUp() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HUtilityAnnotation_GetUp(swigCPtr), true);
    return ret;
  }

  public static void WindowResizeCallback(int signal, IntPtr signal_data, IntPtr user_data) {
    HCSMVOPINVOKE.HUtilityAnnotation_WindowResizeCallback(signal, signal_data, user_data);
  }

  public static void recursive_resize(MVO_POINTER_SIZED_INT seg_key, int include_count, MVO_POINTER_SIZED_INT[] include_keys, MVO_POINTER_SIZED_INT view_key) {
    HCSMVOPINVOKE.HUtilityAnnotation_recursive_resize(seg_key, include_count, include_keys, view_key);
  }

  public static void drawLineCallback(SWIGTYPE_p_HIC_Rendition rendition, int count, SWIGTYPE_p_HIC_DC_Point p) {
    HCSMVOPINVOKE.HUtilityAnnotation_drawLineCallback(SWIGTYPE_p_HIC_Rendition.getCPtr(rendition), count, SWIGTYPE_p_HIC_DC_Point.getCPtr(p));
  }

  public static void drawLineCallbackClip(SWIGTYPE_p_HIC_Rendition rendition, int count, SWIGTYPE_p_HIC_DC_Point p) {
    HCSMVOPINVOKE.HUtilityAnnotation_drawLineCallbackClip(SWIGTYPE_p_HIC_Rendition.getCPtr(rendition), count, SWIGTYPE_p_HIC_DC_Point.getCPtr(p));
  }

  public static void drawMarkerCallback(SWIGTYPE_p_HIC_Rendition rendition, SWIGTYPE_p_HIC_DC_Point p) {
    HCSMVOPINVOKE.HUtilityAnnotation_drawMarkerCallback(SWIGTYPE_p_HIC_Rendition.getCPtr(rendition), SWIGTYPE_p_HIC_DC_Point.getCPtr(p));
  }

}
