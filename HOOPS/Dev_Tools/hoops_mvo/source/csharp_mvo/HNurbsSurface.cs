/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HNurbsSurface : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HNurbsSurface(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HNurbsSurface obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HNurbsSurface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HNurbsSurface(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HNurbsSurface() : this(HCSMVOPINVOKE.new_HNurbsSurface(), true) {
  }

  public void Init(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HNurbsSurface_Init__SWIG_0(swigCPtr, key);
  }

  public MVO_POINTER_SIZED_INT Init(HPoint center, HPoint axis, int num_u_vertices, int num_v_vertices, int degree, int tesselation_level, float distance, HSurfaceType stype) {return HCSMVOPINVOKE.HNurbsSurface_Init__SWIG_1(swigCPtr, HPoint.getCPtr(center), HPoint.getCPtr(axis), num_u_vertices, num_v_vertices, degree, tesselation_level, distance, (int)stype);}

  public void Recalculate() {
    HCSMVOPINVOKE.HNurbsSurface_Recalculate(swigCPtr);
  }

  public MVO_POINTER_SIZED_INT GetKey() {return HCSMVOPINVOKE.HNurbsSurface_GetKey(swigCPtr);}

  public void DisplayVertices() {
    HCSMVOPINVOKE.HNurbsSurface_DisplayVertices(swigCPtr);
  }

  public void HideVertices() {
    HCSMVOPINVOKE.HNurbsSurface_HideVertices(swigCPtr);
  }

  public void EnableSelectability() {
    HCSMVOPINVOKE.HNurbsSurface_EnableSelectability(swigCPtr);
  }

  public void DisableSelectability() {
    HCSMVOPINVOKE.HNurbsSurface_DisableSelectability(swigCPtr);
  }

  public void UpdateVertex(int vertexnum, float x, float y, float z) {
    HCSMVOPINVOKE.HNurbsSurface_UpdateVertex(swigCPtr, vertexnum, x, y, z);
  }

  public void ShowVertex(int vertexnum, HPoint v) {
    HCSMVOPINVOKE.HNurbsSurface_ShowVertex(swigCPtr, vertexnum, HPoint.getCPtr(v));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateDefaultVertices(HPoint center, HPoint axis) {
    HCSMVOPINVOKE.HNurbsSurface_CreateDefaultVertices(swigCPtr, HPoint.getCPtr(center), HPoint.getCPtr(axis));
  }

  public MVO_POINTER_SIZED_INT GetSurfaceMeshKey() {return HCSMVOPINVOKE.HNurbsSurface_GetSurfaceMeshKey(swigCPtr);}

}
