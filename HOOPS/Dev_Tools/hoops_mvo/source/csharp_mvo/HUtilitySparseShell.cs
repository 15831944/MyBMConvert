/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUtilitySparseShell : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUtilitySparseShell(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUtilitySparseShell obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUtilitySparseShell() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUtilitySparseShell(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HUtilitySparseShell(bool needPairToIndex, bool needIndexToPair) : this(HCSMVOPINVOKE.new_HUtilitySparseShell(needPairToIndex, needIndexToPair), true) {
  }

  public MVO_POINTER_SIZED_INT KInsertShell(int point_count, float[] points, int face_list_length, int[] face_list) {return HCSMVOPINVOKE.HUtilitySparseShell_KInsertShell(swigCPtr, point_count, points, face_list_length, face_list);}

  public void DeleteByKey(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HUtilitySparseShell_DeleteByKey(swigCPtr, key);
  }

  public void EditShellPoints(MVO_POINTER_SIZED_INT key, int littleIndexOffset, int ndelete, int insert, float[] points) {
    HCSMVOPINVOKE.HUtilitySparseShell_EditShellPoints(swigCPtr, key, littleIndexOffset, ndelete, insert, points);
  }

  public void EditShellFaces(MVO_POINTER_SIZED_INT key, int ioffset, int ndelete, int insert_list_length, int[] insert_list) {
    HCSMVOPINVOKE.HUtilitySparseShell_EditShellFaces(swigCPtr, key, ioffset, ndelete, insert_list_length, insert_list);
  }

  public int GetPairCount(int bigIndex) {
    int ret = HCSMVOPINVOKE.HUtilitySparseShell_GetPairCount(swigCPtr, bigIndex);
    return ret;
  }

  public bool GetPair(int bigIndex, int n, MVO_POINTER_SIZED_INT[] key, int[] littleIndex) {
    bool ret = HCSMVOPINVOKE.HUtilitySparseShell_GetPair(swigCPtr, bigIndex, n, key, littleIndex);
    return ret;
  }

  public bool GetPairs(int bigIndex, MVO_POINTER_SIZED_INT[] keys, int[] littleIndices) {
    bool ret = HCSMVOPINVOKE.HUtilitySparseShell_GetPairs(swigCPtr, bigIndex, keys, littleIndices);
    return ret;
  }

  public bool GetIndex(MVO_POINTER_SIZED_INT key, int littleIndex, int[] bigIndex) {
    bool ret = HCSMVOPINVOKE.HUtilitySparseShell_GetIndex(swigCPtr, key, littleIndex, bigIndex);
    return ret;
  }

}
