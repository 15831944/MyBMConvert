/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HBaseGraph : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HBaseGraph(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HBaseGraph obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HBaseGraph() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HBaseGraph(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void GetPlotTitle(System.Text.StringBuilder title) {
    HCSMVOPINVOKE.HBaseGraph_GetPlotTitle(swigCPtr, title);
  }

  public void GetPlotUnicodeTitle(ushort[] title) {
    HCSMVOPINVOKE.HBaseGraph_GetPlotUnicodeTitle(swigCPtr, title);
  }

  public virtual void SetPlotTitle(string title) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotTitle(swigCPtr, title);
  }

  public virtual void SetPlotUnicodeTitle(ushort[] title) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotUnicodeTitle(swigCPtr, title);
  }

  public virtual void GetPlotTitleColor(System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HBaseGraph_GetPlotTitleColor(swigCPtr, color);
  }

  public virtual void SetPlotTitleColor(string color) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotTitleColor(swigCPtr, color);
  }

  public void GetPlotTitleTextFont(System.Text.StringBuilder font) {
    HCSMVOPINVOKE.HBaseGraph_GetPlotTitleTextFont(swigCPtr, font);
  }

  public void SetPlotTitleTextFont(string font) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotTitleTextFont(swigCPtr, font);
  }

  public HPoint GetPlotTitleLocation() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseGraph_GetPlotTitleLocation(swigCPtr), true);
    return ret;
  }

  public void SetPlotTitleLocation(HPoint loc) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotTitleLocation(swigCPtr, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetPlotOrigin() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseGraph_GetPlotOrigin(swigCPtr), true);
    return ret;
  }

  public void SetPlotOrigin(HPoint origin) {
    HCSMVOPINVOKE.HBaseGraph_SetPlotOrigin(swigCPtr, HPoint.getCPtr(origin));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetFrameVisibility() {
    bool ret = HCSMVOPINVOKE.HBaseGraph_GetFrameVisibility(swigCPtr);
    return ret;
  }

  public void SetFrameVisibility(bool visible) {
    HCSMVOPINVOKE.HBaseGraph_SetFrameVisibility(swigCPtr, visible);
  }

  public void GetFramePattern(System.Text.StringBuilder pattern) {
    HCSMVOPINVOKE.HBaseGraph_GetFramePattern(swigCPtr, pattern);
  }

  public void SetFramePattern(string pattern) {
    HCSMVOPINVOKE.HBaseGraph_SetFramePattern(swigCPtr, pattern);
  }

  public void GetFrameColor(System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HBaseGraph_GetFrameColor(swigCPtr, color);
  }

  public void SetFrameColor(string color) {
    HCSMVOPINVOKE.HBaseGraph_SetFrameColor(swigCPtr, color);
  }

  public float GetFrameWeight() {
    float ret = HCSMVOPINVOKE.HBaseGraph_GetFrameWeight(swigCPtr);
    return ret;
  }

  public void SetFrameWeight(float weight) {
    HCSMVOPINVOKE.HBaseGraph_SetFrameWeight(swigCPtr, weight);
  }

  public int AddLabel(string str, HPoint loc, HGraphPointFormat format, float xvector, float yvector, float zvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLabel__SWIG_0(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector, yvector, zvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddLabel(string str, HPoint loc, HGraphPointFormat format, float xvector, float yvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLabel__SWIG_1(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector, yvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddLabel(string str, HPoint loc, HGraphPointFormat format, float xvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLabel__SWIG_2(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddLabel(string str, HPoint loc, HGraphPointFormat format) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLabel__SWIG_3(swigCPtr, str, HPoint.getCPtr(loc), (int)format);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddLabel(string str, HPoint loc) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLabel__SWIG_4(swigCPtr, str, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddUnicodeLabel(ushort[] str, HPoint loc, HGraphPointFormat format, float xvector, float yvector, float zvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddUnicodeLabel__SWIG_0(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector, yvector, zvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddUnicodeLabel(ushort[] str, HPoint loc, HGraphPointFormat format, float xvector, float yvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddUnicodeLabel__SWIG_1(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector, yvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddUnicodeLabel(ushort[] str, HPoint loc, HGraphPointFormat format, float xvector) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddUnicodeLabel__SWIG_2(swigCPtr, str, HPoint.getCPtr(loc), (int)format, xvector);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddUnicodeLabel(ushort[] str, HPoint loc, HGraphPointFormat format) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddUnicodeLabel__SWIG_3(swigCPtr, str, HPoint.getCPtr(loc), (int)format);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AddUnicodeLabel(ushort[] str, HPoint loc) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddUnicodeLabel__SWIG_4(swigCPtr, str, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveLabel(int label_id) {
    HCSMVOPINVOKE.HBaseGraph_RemoveLabel(swigCPtr, label_id);
  }

  public void GetLabelContents(int label_id, System.Text.StringBuilder str) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelContents(swigCPtr, label_id, str);
  }

  public void GetLabelUnicodeContents(int label_id, ushort[] str) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelUnicodeContents(swigCPtr, label_id, str);
  }

  public void SetLabelContents(int label_id, string str) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelContents(swigCPtr, label_id, str);
  }

  public void SetLabelUnicodeContents(int label_id, ushort[] str) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelUnicodeContents(swigCPtr, label_id, str);
  }

  public void SetLabelTextFont(int label_id, string font) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelTextFont(swigCPtr, label_id, font);
  }

  public void GetLabelTextFont(int label_id, System.Text.StringBuilder font) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelTextFont(swigCPtr, label_id, font);
  }

  public void SetLabelTextColor(int label_id, string color) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelTextColor(swigCPtr, label_id, color);
  }

  public void GetLabelTextColor(int label_id, System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelTextColor(swigCPtr, label_id, color);
  }

  public void SetLabelTextAlignment(int label_id, string alignment) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelTextAlignment(swigCPtr, label_id, alignment);
  }

  public void GetLabelTextAlignment(int label_id, System.Text.StringBuilder alignment) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelTextAlignment(swigCPtr, label_id, alignment);
  }

  public void SetLabelLocation(int label_id, HPoint loc, HGraphPointFormat format) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelLocation__SWIG_0(swigCPtr, label_id, HPoint.getCPtr(loc), (int)format);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLabelLocation(int label_id, HPoint loc) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelLocation__SWIG_1(swigCPtr, label_id, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetLabelLocation(int label_id) {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseGraph_GetLabelLocation(swigCPtr, label_id), true);
    return ret;
  }

  public void SetLabelTextPath(int label_id, float xvector, float yvector, float zvector) {
    HCSMVOPINVOKE.HBaseGraph_SetLabelTextPath(swigCPtr, label_id, xvector, yvector, zvector);
  }

  public void GetLabelTextPath(int label_id, float[] xvector, float[] yvector, float[] zvector) {
    HCSMVOPINVOKE.HBaseGraph_GetLabelTextPath(swigCPtr, label_id, xvector, yvector, zvector);
  }

  public void AddLegend(HPoint loc, HGraphPointFormat format) {
    HCSMVOPINVOKE.HBaseGraph_AddLegend__SWIG_0(swigCPtr, HPoint.getCPtr(loc), (int)format);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLegend(HPoint loc) {
    HCSMVOPINVOKE.HBaseGraph_AddLegend__SWIG_1(swigCPtr, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLegend() {
    HCSMVOPINVOKE.HBaseGraph_RemoveLegend(swigCPtr);
  }

  public void SetLegendTitle(string title) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendTitle(swigCPtr, title);
  }

  public void GetLegendTitle(System.Text.StringBuilder title) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendTitle(swigCPtr, title);
  }

  public void RemoveLegendTitle() {
    HCSMVOPINVOKE.HBaseGraph_RemoveLegendTitle(swigCPtr);
  }

  public void SetLegendUnicodeTitle(ushort[] title) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendUnicodeTitle(swigCPtr, title);
  }

  public void GetLegendUnicodeTitle(ushort[] title) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendUnicodeTitle(swigCPtr, title);
  }

  public void SetLegendTitleTextFont(string font) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendTitleTextFont(swigCPtr, font);
  }

  public void GetLegendTitleTextFont(System.Text.StringBuilder font) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendTitleTextFont(swigCPtr, font);
  }

  public void SetLegendTextFont(string font) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendTextFont(swigCPtr, font);
  }

  public void GetLegendTextFont(System.Text.StringBuilder font) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendTextFont(swigCPtr, font);
  }

  public int AddLegendEntry(string str, string color, HGraphLegendEntryType ltype) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLegendEntry__SWIG_0(swigCPtr, str, color, (int)ltype);
    return ret;
  }

  public int AddLegendEntry(string str, string color) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLegendEntry__SWIG_1(swigCPtr, str, color);
    return ret;
  }

  public int AddLegendUnicodeEntry(ushort[] str, string color, HGraphLegendEntryType ltype) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLegendUnicodeEntry__SWIG_0(swigCPtr, str, color, (int)ltype);
    return ret;
  }

  public int AddLegendUnicodeEntry(ushort[] str, string color) {
    int ret = HCSMVOPINVOKE.HBaseGraph_AddLegendUnicodeEntry__SWIG_1(swigCPtr, str, color);
    return ret;
  }

  public void RemoveLegendEntry(int entry_id) {
    HCSMVOPINVOKE.HBaseGraph_RemoveLegendEntry(swigCPtr, entry_id);
  }

  public void GetLegendEntry(int entry_id, System.Text.StringBuilder str, System.Text.StringBuilder color, SWIGTYPE_p_HGraphLegendEntryType entry_type) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendEntry__SWIG_0(swigCPtr, entry_id, str, color, SWIGTYPE_p_HGraphLegendEntryType.getCPtr(entry_type));
  }

  public void GetLegendEntry(int entry_id, System.Text.StringBuilder str, System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendEntry__SWIG_1(swigCPtr, entry_id, str, color);
  }

  public void GetLegendUnicodeEntry(int entry_id, ushort[] str, System.Text.StringBuilder color, SWIGTYPE_p_HGraphLegendEntryType entry_type) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendUnicodeEntry__SWIG_0(swigCPtr, entry_id, str, color, SWIGTYPE_p_HGraphLegendEntryType.getCPtr(entry_type));
  }

  public void GetLegendUnicodeEntry(int entry_id, ushort[] str, System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HBaseGraph_GetLegendUnicodeEntry__SWIG_1(swigCPtr, entry_id, str, color);
  }

  public void SetLegendLocation(HPoint loc, HGraphPointFormat format) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendLocation__SWIG_0(swigCPtr, HPoint.getCPtr(loc), (int)format);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLegendLocation(HPoint loc) {
    HCSMVOPINVOKE.HBaseGraph_SetLegendLocation__SWIG_1(swigCPtr, HPoint.getCPtr(loc));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetLegendLocation() {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HBaseGraph_GetLegendLocation(swigCPtr), true);
    return ret;
  }

  public void ConvertPoints(uint in_count, float[] in_points, HGraphPointFormat in_system, float[] out_points, HGraphPointFormat out_system) {
    HCSMVOPINVOKE.HBaseGraph_ConvertPoints(swigCPtr, in_count, in_points, (int)in_system, out_points, (int)out_system);
  }

  public void PreserveData(bool preserve) {
    HCSMVOPINVOKE.HBaseGraph_PreserveData__SWIG_0(swigCPtr, preserve);
  }

  public void PreserveData() {
    HCSMVOPINVOKE.HBaseGraph_PreserveData__SWIG_1(swigCPtr);
  }

  public void SetAutomaticUpdates(bool automatic) {
    HCSMVOPINVOKE.HBaseGraph_SetAutomaticUpdates__SWIG_0(swigCPtr, automatic);
  }

  public void SetAutomaticUpdates() {
    HCSMVOPINVOKE.HBaseGraph_SetAutomaticUpdates__SWIG_1(swigCPtr);
  }

  public bool GetAutomaticUpdates() {
    bool ret = HCSMVOPINVOKE.HBaseGraph_GetAutomaticUpdates(swigCPtr);
    return ret;
  }

  public virtual void Update() {
    HCSMVOPINVOKE.HBaseGraph_Update(swigCPtr);
  }

}
