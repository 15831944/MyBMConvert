/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HOpCameraManipulateTouch : HBaseOperator {
  private HandleRef swigCPtr;

  public HOpCameraManipulateTouch(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HOpCameraManipulateTouchUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HOpCameraManipulateTouch obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HOpCameraManipulateTouch() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HOpCameraManipulateTouch(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat, int DoCapture, HBaseOperator orbit, HBaseOperator pan, HBaseOperator zoom, HBaseOperator roll) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_0(HBaseView.getCPtr(view), DoRepeat, DoCapture, HBaseOperator.getCPtr(orbit), HBaseOperator.getCPtr(pan), HBaseOperator.getCPtr(zoom), HBaseOperator.getCPtr(roll)), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat, int DoCapture, HBaseOperator orbit, HBaseOperator pan, HBaseOperator zoom) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_1(HBaseView.getCPtr(view), DoRepeat, DoCapture, HBaseOperator.getCPtr(orbit), HBaseOperator.getCPtr(pan), HBaseOperator.getCPtr(zoom)), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat, int DoCapture, HBaseOperator orbit, HBaseOperator pan) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_2(HBaseView.getCPtr(view), DoRepeat, DoCapture, HBaseOperator.getCPtr(orbit), HBaseOperator.getCPtr(pan)), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat, int DoCapture, HBaseOperator orbit) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_3(HBaseView.getCPtr(view), DoRepeat, DoCapture, HBaseOperator.getCPtr(orbit)), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat, int DoCapture) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_4(HBaseView.getCPtr(view), DoRepeat, DoCapture), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view, int DoRepeat) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_5(HBaseView.getCPtr(view), DoRepeat), true) {
  }

  public HOpCameraManipulateTouch(HBaseView view) : this(HCSMVOPINVOKE.new_HOpCameraManipulateTouch__SWIG_6(HBaseView.getCPtr(view)), true) {
  }

  public override string GetName() {
    string ret = HCSMVOPINVOKE.HOpCameraManipulateTouch_GetName(swigCPtr);
    return ret;
  }

  public override int OnTouchesDown(HEventInfo hevent) {
    int ret = HCSMVOPINVOKE.HOpCameraManipulateTouch_OnTouchesDown(swigCPtr, HEventInfo.getCPtr(hevent));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnTouchesMove(HEventInfo hevent) {
    int ret = HCSMVOPINVOKE.HOpCameraManipulateTouch_OnTouchesMove(swigCPtr, HEventInfo.getCPtr(hevent));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnTouchesUp(HEventInfo hevent) {
    int ret = HCSMVOPINVOKE.HOpCameraManipulateTouch_OnTouchesUp(swigCPtr, HEventInfo.getCPtr(hevent));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override HBaseOperator Clone() {
    IntPtr cPtr = HCSMVOPINVOKE.HOpCameraManipulateTouch_Clone(swigCPtr);
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public override bool OperatorStarted() {
    bool ret = HCSMVOPINVOKE.HOpCameraManipulateTouch_OperatorStarted(swigCPtr);
    return ret;
  }

}
