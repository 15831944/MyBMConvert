/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HSelectionItem : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HSelectionItem(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HSelectionItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HSelectionItem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HSelectionItem(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual string GetName() {
    string ret = HCSMVOPINVOKE.HSelectionItem_GetName(swigCPtr);
    return ret;
  }

  public virtual MVO_POINTER_SIZED_INT GetKey() {return HCSMVOPINVOKE.HSelectionItem_GetKey(swigCPtr);}

  public virtual MVO_POINTER_SIZED_INT GetSegmentKey() {return HCSMVOPINVOKE.HSelectionItem_GetSegmentKey(swigCPtr);}

  public virtual bool Equals(HSelectionItem i2) {
    bool ret = HCSMVOPINVOKE.HSelectionItem_Equals(swigCPtr, HSelectionItem.getCPtr(i2));
    return ret;
  }

  public virtual bool Highlight() {
    bool ret = HCSMVOPINVOKE.HSelectionItem_Highlight(swigCPtr);
    return ret;
  }

  public virtual bool UnHighlight() {
    bool ret = HCSMVOPINVOKE.HSelectionItem_UnHighlight(swigCPtr);
    return ret;
  }

  public virtual bool IsHighlighted() {
    bool ret = HCSMVOPINVOKE.HSelectionItem_IsHighlighted(swigCPtr);
    return ret;
  }

  public virtual bool Delete() {
    bool ret = HCSMVOPINVOKE.HSelectionItem_Delete(swigCPtr);
    return ret;
  }

  public virtual bool IsInstanced() {
    bool ret = HCSMVOPINVOKE.HSelectionItem_IsInstanced(swigCPtr);
    return ret;
  }

  public virtual int GetIncludeCount() {
    int ret = HCSMVOPINVOKE.HSelectionItem_GetIncludeCount(swigCPtr);
    return ret;
  }

  public virtual IntPtr GetIncludeKeys() {return HCSMVOPINVOKE.HSelectionItem_GetIncludeKeys__SWIG_0(swigCPtr);}

  public virtual void GetIncludeKeys(MVO_POINTER_SIZED_INT[] includes) {
    HCSMVOPINVOKE.HSelectionItem_GetIncludeKeys__SWIG_1(swigCPtr, includes);
  }

  public virtual bool QueryIncludeDependency(MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT[] ret_dependent_key) {
    bool ret = HCSMVOPINVOKE.HSelectionItem_QueryIncludeDependency(swigCPtr, include_key, ret_dependent_key);
    return ret;
  }

  public virtual bool UpdateIncludeDependency(MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT dependent_key, MVO_POINTER_SIZED_INT replacement_key) {
    bool ret = HCSMVOPINVOKE.HSelectionItem_UpdateIncludeDependency(swigCPtr, include_key, dependent_key, replacement_key);
    return ret;
  }

  public virtual int GetFullPathCount(HBaseView view) {
    int ret = HCSMVOPINVOKE.HSelectionItem_GetFullPathCount(swigCPtr, HBaseView.getCPtr(view));
    return ret;
  }

  public virtual IntPtr GetFullPathKeys(HBaseView view) {return HCSMVOPINVOKE.HSelectionItem_GetFullPathKeys__SWIG_0(swigCPtr, HBaseView.getCPtr(view));}

  public virtual void GetFullPathKeys(HBaseView view, MVO_POINTER_SIZED_INT[] path) {
    HCSMVOPINVOKE.HSelectionItem_GetFullPathKeys__SWIG_1(swigCPtr, HBaseView.getCPtr(view), path);
  }

  public void SetTimeStamp(float now) {
    HCSMVOPINVOKE.HSelectionItem_SetTimeStamp(swigCPtr, now);
  }

  public float GetTimeStamp() {
    float ret = HCSMVOPINVOKE.HSelectionItem_GetTimeStamp(swigCPtr);
    return ret;
  }

}
