/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HInputHandler : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HInputHandler(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HInputHandler obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HInputHandler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HInputHandler(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HInputHandler() : this(HCSMVOPINVOKE.new_HInputHandler(), true) {
    SwigDirectorConnect();
  }

  public uint GetInputOps() {
    uint ret = HCSMVOPINVOKE.HInputHandler_GetInputOps(swigCPtr);
    return ret;
  }

  public virtual string GetInputName() {
    string ret = HCSMVOPINVOKE.HInputHandler_GetInputName(swigCPtr);
    return ret;
  }

  public virtual void RegisterInputHandlerTypes() {
    HCSMVOPINVOKE.HInputHandler_RegisterInputHandlerTypes(swigCPtr);
  }

  public virtual HInputHandlerStyle GetInputStyle() {
    HInputHandlerStyle ret = (HInputHandlerStyle)HCSMVOPINVOKE.HInputHandler_GetInputStyle(swigCPtr);
    return ret;
  }

  public virtual HFileIOResult FileInputByKey(string filename, MVO_POINTER_SIZED_INT key, HInputHandlerOptions options) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HInputHandler)) ? HCSMVOPINVOKE.HInputHandler_FileInputByKey(swigCPtr, filename, key, HInputHandlerOptions.getCPtr(options)) : HCSMVOPINVOKE.HInputHandler_FileInputByKeySwigExplicitHInputHandler(swigCPtr, filename, key, HInputHandlerOptions.getCPtr(options)));
    return ret;
  }

  public virtual HFileIOResult FileInputToImageKey(string filename, MVO_POINTER_SIZED_INT[] image_key, MVO_POINTER_SIZED_INT segment_key, HInputHandlerOptions options) {
    HFileIOResult ret = (HFileIOResult)((this.GetType() == typeof(HInputHandler)) ? HCSMVOPINVOKE.HInputHandler_FileInputToImageKey(swigCPtr, filename, image_key, segment_key, HInputHandlerOptions.getCPtr(options)) : HCSMVOPINVOKE.HInputHandler_FileInputToImageKeySwigExplicitHInputHandler(swigCPtr, filename, image_key, segment_key, HInputHandlerOptions.getCPtr(options)));
    return ret;
  }

  public virtual string GetInputTypesString() {
    string ret = HCSMVOPINVOKE.HInputHandler_GetInputTypesString(swigCPtr);
    return ret;
  }

  public string GetInputProgress() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(HCSMVOPINVOKE.HInputHandler_GetInputProgress(swigCPtr));
    return ret;
  }

  public float GetInputPercentProgress() {
    float ret = HCSMVOPINVOKE.HInputHandler_GetInputPercentProgress(swigCPtr);
    return ret;
  }

  public string GetInputInformation() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(HCSMVOPINVOKE.HInputHandler_GetInputInformation(swigCPtr));
    return ret;
  }

  public HIONoticeCallback SetInputProgressNoticeCallback(HIONoticeCallback notice_callback) {
    IntPtr cPtr = HCSMVOPINVOKE.HInputHandler_SetInputProgressNoticeCallback(swigCPtr, HIONoticeCallback.getCPtr(notice_callback));
    HIONoticeCallback ret = (cPtr == IntPtr.Zero) ? null : new HIONoticeCallback(cPtr, false);
    return ret;
  }

  public HIOPercentNoticeCallback SetInputPercentProgressNoticeCallback(HIOPercentNoticeCallback percent_notice_callback) {
    IntPtr cPtr = HCSMVOPINVOKE.HInputHandler_SetInputPercentProgressNoticeCallback(swigCPtr, HIOPercentNoticeCallback.getCPtr(percent_notice_callback));
    HIOPercentNoticeCallback ret = (cPtr == IntPtr.Zero) ? null : new HIOPercentNoticeCallback(cPtr, false);
    return ret;
  }

  public HIONoticeCallback SetInputInformationNoticeCallback(HIONoticeCallback notice_callback) {
    IntPtr cPtr = HCSMVOPINVOKE.HInputHandler_SetInputInformationNoticeCallback(swigCPtr, HIONoticeCallback.getCPtr(notice_callback));
    HIONoticeCallback ret = (cPtr == IntPtr.Zero) ? null : new HIONoticeCallback(cPtr, false);
    return ret;
  }

  public void ReportInputProgress(string progress) {
    HCSMVOPINVOKE.HInputHandler_ReportInputProgress__SWIG_0(swigCPtr, progress);
  }

  public void ReportInputPercentProgress(float percent_progress) {
    HCSMVOPINVOKE.HInputHandler_ReportInputPercentProgress(swigCPtr, percent_progress);
  }

  public void ReportInputInformation(string information) {
    HCSMVOPINVOKE.HInputHandler_ReportInputInformation__SWIG_0(swigCPtr, information);
  }

  public void SetModuleDirectory(string module_directory) {
    HCSMVOPINVOKE.HInputHandler_SetModuleDirectory__SWIG_0(swigCPtr, module_directory);
  }

  protected void SetStartingInput(string filename) {
    HCSMVOPINVOKE.HInputHandler_SetStartingInput__SWIG_0(swigCPtr, filename);
  }

  protected void SetStartingInput() {
    HCSMVOPINVOKE.HInputHandler_SetStartingInput__SWIG_2(swigCPtr);
  }

  protected void SetFinishedInput() {
    HCSMVOPINVOKE.HInputHandler_SetFinishedInput(swigCPtr);
  }

  protected void SetInputOps(uint ops) {
    HCSMVOPINVOKE.HInputHandler_SetInputOps(swigCPtr, ops);
  }

  protected uint m_InputOps {
    set {
      HCSMVOPINVOKE.HInputHandler_m_InputOps_set(swigCPtr, value);
    } 
    get {
      uint ret = HCSMVOPINVOKE.HInputHandler_m_InputOps_get(swigCPtr);
      return ret;
    } 
  }

  protected string m_module_directory {
    set {
      HCSMVOPINVOKE.HInputHandler_m_module_directory_set(swigCPtr, value);
    } 
    get {
      string ret = System.Runtime.InteropServices.Marshal.PtrToStringUni(HCSMVOPINVOKE.HInputHandler_m_module_directory_get(swigCPtr));
      return ret;
    } 
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetInputName", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHInputHandler_0(SwigDirectorGetInputName);
    if (SwigDerivedClassHasMethod("RegisterInputHandlerTypes", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHInputHandler_1(SwigDirectorRegisterInputHandlerTypes);
    if (SwigDerivedClassHasMethod("GetInputStyle", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHInputHandler_2(SwigDirectorGetInputStyle);
    if (SwigDerivedClassHasMethod("FileInputByKey", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHInputHandler_3(SwigDirectorFileInputByKey);
    if (SwigDerivedClassHasMethod("FileInputToImageKey", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHInputHandler_4(SwigDirectorFileInputToImageKey);
    if (SwigDerivedClassHasMethod("GetInputTypesString", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHInputHandler_5(SwigDirectorGetInputTypesString);
    HCSMVOPINVOKE.HInputHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HInputHandler));
    return hasDerivedMethod;
  }

  private string SwigDirectorGetInputName() {
    return GetInputName();
  }

  private void SwigDirectorRegisterInputHandlerTypes() {
    RegisterInputHandlerTypes();
  }

  private int SwigDirectorGetInputStyle() {
    return (int)GetInputStyle();
  }

  private int SwigDirectorFileInputByKey(IntPtr filename, MVO_POINTER_SIZED_INT key, IntPtr options) {
    return (int)FileInputByKey(System.Runtime.InteropServices.Marshal.PtrToStringUni(filename), key, (options == IntPtr.Zero) ? null : new HInputHandlerOptions(options, false));
  }

  private int SwigDirectorFileInputToImageKey(IntPtr filename, MVO_POINTER_SIZED_INT[] image_key, MVO_POINTER_SIZED_INT segment_key, IntPtr options) {
    return (int)FileInputToImageKey(System.Runtime.InteropServices.Marshal.PtrToStringUni(filename), image_key, segment_key, (options == IntPtr.Zero) ? null : new HInputHandlerOptions(options, false));
  }

  private string SwigDirectorGetInputTypesString() {
    return GetInputTypesString();
  }

  public delegate string SwigDelegateHInputHandler_0();
  public delegate void SwigDelegateHInputHandler_1();
  public delegate int SwigDelegateHInputHandler_2();
  public delegate int SwigDelegateHInputHandler_3(IntPtr filename, MVO_POINTER_SIZED_INT key, IntPtr options);
  public delegate int SwigDelegateHInputHandler_4(IntPtr filename, MVO_POINTER_SIZED_INT[] image_key, MVO_POINTER_SIZED_INT segment_key, IntPtr options);
  public delegate string SwigDelegateHInputHandler_5();

  private SwigDelegateHInputHandler_0 swigDelegate0;
  private SwigDelegateHInputHandler_1 swigDelegate1;
  private SwigDelegateHInputHandler_2 swigDelegate2;
  private SwigDelegateHInputHandler_3 swigDelegate3;
  private SwigDelegateHInputHandler_4 swigDelegate4;
  private SwigDelegateHInputHandler_5 swigDelegate5;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(string), typeof(MVO_POINTER_SIZED_INT), typeof(HInputHandlerOptions) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(string), typeof(MVO_POINTER_SIZED_INT[]), typeof(MVO_POINTER_SIZED_INT), typeof(HInputHandlerOptions) };
  private static Type[] swigMethodTypes5 = new Type[] {  };
}
