/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_HCSMVO(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_HCSMVO(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_HCSMVO(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_HCSMVO(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#ifdef WIN64
#	define MVO_POINTER_SIZED_INT __int64
#	define MVO_POINTER_SIZED_UINT unsigned __int64
#else
#	define MVO_POINTER_SIZED_INT long
#	define MVO_POINTER_SIZED_UINT unsigned long
#endif

#include <assert.h>
#include <ctype.h>
#include <locale.h>
#include <tchar.h>

/* 3dgs includes */
#include "hc.h"
#include "hic.h"

/* utility includes */
#include "varray.h"
#include "vhash.h"

#include "HStream.h"
#include "HStreamFileToolkit.h"

/* MVO Includes */
#include "HTools.h"
#include "HGlobals.h"
#include "HEventListener.h"
#include "HBaseModel.h"
#include "HBaseView.h"
#include "HDB.h"
#include "HEventInfo.h"
#include "HBaseOperator.h"
#include "HUtility.h"
#include "HIOManager.h"
#include "HImManager.h"
#include "HMaterialLibrary.h"
#include "HImUtility.h"
#include "HConstantFrameRate.h"
#include "HDebugZBuffer.h"
#include "HGraph.h"
#include "HOpObjectTranslate.h"
#include "HOpConstructCircle.h"
#include "HOpConstructCone.h"
#include "HOpConstructCuboid.h"
#include "HOpConstructCylinder.h"
#include "HOpConstructNurbsCurve.h"
#include "HOpConstructPolyline.h"
#include "HOpConstructRectangle.h"
#include "HOpConstructSphere.h"
#include "HOpCreateBoolean.h"
#include "HOpCreateCircle.h"
#include "HOpCreateCone.h"
#include "HOpCreateCuboid.h"
#include "HOpCreateCuttingPlane.h"
#include "HOpCreateCylinder.h"
#include "HOpCreateNurbs3D.h"
#include "HOpCreateNurbsCurve.h"
#include "HOpCreateSphere.h"
#include "HOpCameraManipulate.h"
#include "HOpCameraOrbit.h"
#include "HOpCameraPan.h"
#include "HOpCreatePolyline.h"
#include "HOpCreateRectangle.h"
#include "HOpCameraRelativeOrbit.h"
#include "HOpCameraWalk.h"
#include "HOpCameraZoom.h"
#include "HOpCameraZoomBox.h"
#include "HOpMarkupAnnotate.h"
#include "HOpMarkupCircle.h"
#include "HOpMarkupFreehand.h"
#include "HOpMarkupMeasure.h"
#include "HOpMarkupPostIt.h"
#include "HOpMarkupRectangle.h"
#include "HOpMoveHandle.h"
#include "HOpNavCube.h"
#include "HOpNetwork.h"
#include "HOpObjectAnnotate.h"
#include "HOpObjectClash.h"
#include "HOpObjectRotate.h"
#include "HOpObjectTranslate.h"
#include "HOpSelectArea.h"
#include "HOpSelectAperture.h"
#include "HOpSelectPolygon.h"
#include "HOpSelectPolyline.h"
#include "HSelectionItem.h"
#include "HSelectionSet.h"
#include "HUtilityAnnotation.h"
#include "HEventManager.h"
#include "HUtilityAnnotationMeasure.h"
#include "HUtilityGeometryCreation.h"
#include "HUtilityGeomHandle.h"
#include "HUtilityQuadTree.h"
#include "HUtilityShadow.h"
#include "HUtilityTextParser.h"
#include "HMarkupManager.h"
#include "HModelInfo.h"
#include "HOpSelectPolyline.h"
#include "HSnapGrid.h"
#include "HTManager.h"
#include "HUndoManager.h"
#include "HImCuttingGeometry.h"
#include "HImErrorHandler.h"
#include "HImUtility.h"
#include "HUtilitySparseShell.h"
#include "HIOUtilityPDF.h"      
#include "HOpCameraOrbitTurntable.h"

#include "HBhvBehaviorManager.h"
#include "HBhvAnimation.h"

#include "HDispatchXML.h"

#include "HOpCameraManipulateTouch.h"
#include "HOpCameraPanTouch.h"
#include "HOpCameraRollTouch.h"
#include "HOpCameraZoomTouch.h"




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "hcsmvo_wrap.h"

SwigDirector_HEventListener::SwigDirector_HEventListener() : HEventListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HEventListener::~SwigDirector_HEventListener() {
  
}


HEventListener *SwigDirector_HEventListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HEventListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

void SwigDirector_HEventListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
}

void SwigDirector_HEventListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
}

SwigDirector_HUpdateListener::SwigDirector_HUpdateListener() : HUpdateListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HUpdateListener::~SwigDirector_HUpdateListener() {
  
}


HEventListener *SwigDirector_HUpdateListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HUpdateListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HUpdateListener::CameraChangedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackCameraChangedEvent) {
    return HUpdateListener::CameraChangedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackCameraChangedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HUpdateListener::UpdateEvent(bool antialias, bool forceUpdate) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  bool jantialias  ;
  bool jforceUpdate  ;
  
  if (!swig_callbackUpdateEvent) {
    return HUpdateListener::UpdateEvent(antialias,forceUpdate);
  } else {
    jantialias = antialias;
    jforceUpdate = forceUpdate;
    jresult = (int) swig_callbackUpdateEvent(jantialias, jforceUpdate);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HUpdateListener::ViewDestroyedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackViewDestroyedEvent) {
    return HUpdateListener::ViewDestroyedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackViewDestroyedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HUpdateListener::SmoothTransitionFinishedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackSmoothTransitionFinishedEvent) {
    return HUpdateListener::SmoothTransitionFinishedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackSmoothTransitionFinishedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HUpdateListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackCameraChangedEvent, SWIG_Callback2_t callbackUpdateEvent, SWIG_Callback3_t callbackViewDestroyedEvent, SWIG_Callback4_t callbackSmoothTransitionFinishedEvent) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackCameraChangedEvent = callbackCameraChangedEvent;
  swig_callbackUpdateEvent = callbackUpdateEvent;
  swig_callbackViewDestroyedEvent = callbackViewDestroyedEvent;
  swig_callbackSmoothTransitionFinishedEvent = callbackSmoothTransitionFinishedEvent;
}

void SwigDirector_HUpdateListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackCameraChangedEvent = 0;
  swig_callbackUpdateEvent = 0;
  swig_callbackViewDestroyedEvent = 0;
  swig_callbackSmoothTransitionFinishedEvent = 0;
}

SwigDirector_HFitWorldListener::SwigDirector_HFitWorldListener() : HFitWorldListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HFitWorldListener::~SwigDirector_HFitWorldListener() {
  
}


HEventListener *SwigDirector_HFitWorldListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HFitWorldListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HFitWorldListener::PreFitWorldEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackPreFitWorldEvent) {
    return HFitWorldListener::PreFitWorldEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackPreFitWorldEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HFitWorldListener::PostFitWorldEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackPostFitWorldEvent) {
    return HFitWorldListener::PostFitWorldEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackPostFitWorldEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HFitWorldListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackPreFitWorldEvent, SWIG_Callback2_t callbackPostFitWorldEvent) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackPreFitWorldEvent = callbackPreFitWorldEvent;
  swig_callbackPostFitWorldEvent = callbackPostFitWorldEvent;
}

void SwigDirector_HFitWorldListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackPreFitWorldEvent = 0;
  swig_callbackPostFitWorldEvent = 0;
}

SwigDirector_HObjectManipulationListener::SwigDirector_HObjectManipulationListener() : HObjectManipulationListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HObjectManipulationListener::~SwigDirector_HObjectManipulationListener() {
  
}


HEventListener *SwigDirector_HObjectManipulationListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HObjectManipulationListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HObjectManipulationListener::SetupHandlesEvent(HBaseView *view, HC_KEY key, bool complex) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  bool jcomplex  ;
  
  if (!swig_callbackSetupHandlesEvent) {
    return HObjectManipulationListener::SetupHandlesEvent(view,key,complex);
  } else {
    jview = (void *) view; 
    jkey = key;
    jcomplex = complex;
    jresult = (int) swig_callbackSetupHandlesEvent(jview, jkey, jcomplex);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HObjectManipulationListener::ObjectBeforeMoveEvent(HBaseView *view, HC_KEY key, HPoint *p) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * jp = 0 ;
  
  if (!swig_callbackObjectBeforeMoveEvent) {
    return HObjectManipulationListener::ObjectBeforeMoveEvent(view,key,p);
  } else {
    jview = (void *) view; 
    jkey = key;
    jp = (void *) p; 
    jresult = (int) swig_callbackObjectBeforeMoveEvent(jview, jkey, jp);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HObjectManipulationListener::ObjectMovedEvent(HBaseView *view, HC_KEY key, HPoint *p) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * jp = 0 ;
  
  if (!swig_callbackObjectMovedEvent) {
    return HObjectManipulationListener::ObjectMovedEvent(view,key,p);
  } else {
    jview = (void *) view; 
    jkey = key;
    jp = (void *) p; 
    jresult = (int) swig_callbackObjectMovedEvent(jview, jkey, jp);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HObjectManipulationListener::ObjectScaledEvent(HBaseView *view, HC_KEY key, HPoint &p) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * jp = 0 ;
  
  if (!swig_callbackObjectScaledEvent) {
    return HObjectManipulationListener::ObjectScaledEvent(view,key,p);
  } else {
    jview = (void *) view; 
    jkey = key;
    jp = (HPoint *) &p; 
    jresult = (int) swig_callbackObjectScaledEvent(jview, jkey, jp);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HObjectManipulationListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackSetupHandlesEvent, SWIG_Callback2_t callbackObjectBeforeMoveEvent, SWIG_Callback3_t callbackObjectMovedEvent, SWIG_Callback4_t callbackObjectScaledEvent) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackSetupHandlesEvent = callbackSetupHandlesEvent;
  swig_callbackObjectBeforeMoveEvent = callbackObjectBeforeMoveEvent;
  swig_callbackObjectMovedEvent = callbackObjectMovedEvent;
  swig_callbackObjectScaledEvent = callbackObjectScaledEvent;
}

void SwigDirector_HObjectManipulationListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackSetupHandlesEvent = 0;
  swig_callbackObjectBeforeMoveEvent = 0;
  swig_callbackObjectMovedEvent = 0;
  swig_callbackObjectScaledEvent = 0;
}

SwigDirector_HAnimationListener::SwigDirector_HAnimationListener() : HAnimationListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HAnimationListener::~SwigDirector_HAnimationListener() {
  
}


HEventListener *SwigDirector_HAnimationListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HAnimationListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HAnimationListener::AnimationFinishedEvent(HBhvAnimation *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackAnimationFinishedEvent) {
    return HAnimationListener::AnimationFinishedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackAnimationFinishedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HAnimationListener::KeyframeEditorExistsQuery(bool &param_1) {
  return HAnimationListener::KeyframeEditorExistsQuery(param_1);
}

int SwigDirector_HAnimationListener::KeyframeAddedEvent() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackKeyframeAddedEvent) {
    return HAnimationListener::KeyframeAddedEvent();
  } else {
    jresult = (int) swig_callbackKeyframeAddedEvent();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HAnimationListener::ObjectCollisionEvent(HBhvTargetObject *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackObjectCollisionEvent) {
    return HAnimationListener::ObjectCollisionEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackObjectCollisionEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HAnimationListener::ObjectNoCollisionEvent(HBhvTargetObject *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackObjectNoCollisionEvent) {
    return HAnimationListener::ObjectNoCollisionEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackObjectNoCollisionEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HAnimationListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackAnimationFinishedEvent, SWIG_Callback2_t callbackKeyframeAddedEvent, SWIG_Callback3_t callbackObjectCollisionEvent, SWIG_Callback4_t callbackObjectNoCollisionEvent) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackAnimationFinishedEvent = callbackAnimationFinishedEvent;
  swig_callbackKeyframeAddedEvent = callbackKeyframeAddedEvent;
  swig_callbackObjectCollisionEvent = callbackObjectCollisionEvent;
  swig_callbackObjectNoCollisionEvent = callbackObjectNoCollisionEvent;
}

void SwigDirector_HAnimationListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackAnimationFinishedEvent = 0;
  swig_callbackKeyframeAddedEvent = 0;
  swig_callbackObjectCollisionEvent = 0;
  swig_callbackObjectNoCollisionEvent = 0;
}

SwigDirector_HSensorListener::SwigDirector_HSensorListener() : HSensorListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HSensorListener::~SwigDirector_HSensorListener() {
  
}


HEventListener *SwigDirector_HSensorListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HSensorListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HSensorListener::SensorActivatedEvent(HBhvSensor *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackSensorActivatedEvent) {
    return HSensorListener::SensorActivatedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackSensorActivatedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HSensorListener::SensorActionEvent(char const *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  char * jparam_1 = 0 ;
  
  if (!swig_callbackSensorActionEvent) {
    return HSensorListener::SensorActionEvent(param_1);
  } else {
    jparam_1 = SWIG_csharp_string_callback((const char *)param_1); 
    jresult = (int) swig_callbackSensorActionEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HSensorListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackSensorActivatedEvent, SWIG_Callback2_t callbackSensorActionEvent) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackSensorActivatedEvent = callbackSensorActivatedEvent;
  swig_callbackSensorActionEvent = callbackSensorActionEvent;
}

void SwigDirector_HSensorListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackSensorActivatedEvent = 0;
  swig_callbackSensorActionEvent = 0;
}

SwigDirector_HMouseListener::SwigDirector_HMouseListener() : HMouseListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HMouseListener::~SwigDirector_HMouseListener() {
  
}


HEventListener *SwigDirector_HMouseListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnLButtonDown(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HMouseListener::OnLButtonDown(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnLButtonDown(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnMouseMove(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HMouseListener::OnMouseMove(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnMouseMove(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnLButtonUp(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HMouseListener::OnLButtonUp(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnLButtonUp(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnLButtonDblClk(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HMouseListener::OnLButtonDblClk(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnLButtonDblClk(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnMButtonDown(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HMouseListener::OnMButtonDown(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnMButtonDown(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnMButtonUp(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HMouseListener::OnMButtonUp(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnMButtonUp(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnMButtonDblClk(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HMouseListener::OnMButtonDblClk(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnMButtonDblClk(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnRButtonDown(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HMouseListener::OnRButtonDown(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnRButtonDown(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnRButtonUp(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HMouseListener::OnRButtonUp(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnRButtonUp(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnRButtonDblClk(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HMouseListener::OnRButtonDblClk(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnRButtonDblClk(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnMouseWheel(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HMouseListener::OnMouseWheel(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnMouseWheel(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnKeyDown(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HMouseListener::OnKeyDown(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnKeyDown(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnKeyUp(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HMouseListener::OnKeyUp(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnKeyUp(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnTouchesDown(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HMouseListener::OnTouchesDown(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnTouchesDown(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnTouchesMove(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HMouseListener::OnTouchesMove(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnTouchesMove(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HMouseListener::OnTouchesUp(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HMouseListener::OnTouchesUp(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnTouchesUp(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HMouseListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
}

void SwigDirector_HMouseListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
}

SwigDirector_HJoyStickListener::SwigDirector_HJoyStickListener() : HJoyStickListener(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HJoyStickListener::~SwigDirector_HJoyStickListener() {
  
}


HEventListener *SwigDirector_HJoyStickListener::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HJoyStickListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HJoyStickListener::OnJoyStickRotation(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnJoyStickRotation) {
    return HJoyStickListener::OnJoyStickRotation(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnJoyStickRotation(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HJoyStickListener::OnJoyStickTranslation(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnJoyStickTranslation) {
    return HJoyStickListener::OnJoyStickTranslation(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnJoyStickTranslation(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HJoyStickListener::OnJoyStickButton(HEventInfo &param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackOnJoyStickButton) {
    return HJoyStickListener::OnJoyStickButton(param_1);
  } else {
    jparam_1 = (HEventInfo *) &param_1; 
    jresult = (int) swig_callbackOnJoyStickButton(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HJoyStickListener::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnJoyStickRotation, SWIG_Callback2_t callbackOnJoyStickTranslation, SWIG_Callback3_t callbackOnJoyStickButton) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnJoyStickRotation = callbackOnJoyStickRotation;
  swig_callbackOnJoyStickTranslation = callbackOnJoyStickTranslation;
  swig_callbackOnJoyStickButton = callbackOnJoyStickButton;
}

void SwigDirector_HJoyStickListener::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnJoyStickRotation = 0;
  swig_callbackOnJoyStickTranslation = 0;
  swig_callbackOnJoyStickButton = 0;
}

SwigDirector_HBaseModel::SwigDirector_HBaseModel(char const *model) : HBaseModel(model), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HBaseModel::~SwigDirector_HBaseModel() {
  
}


void SwigDirector_HBaseModel::Init() {
  if (!swig_callbackInit) {
    HBaseModel::Init();
    return;
  } else {
    swig_callbackInit();
  }
}

void SwigDirector_HBaseModel::Flush() {
  if (!swig_callbackFlush) {
    HBaseModel::Flush();
    return;
  } else {
    swig_callbackFlush();
  }
}

HFileIOResult SwigDirector_HBaseModel::Read(wchar_t const *FileName, HBaseView *pHView, bool clean_include, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jpHView = 0 ;
  bool jclean_include  ;
  void * joptions = 0 ;
  
  if (!swig_callbackRead__SWIG_0) {
    return HBaseModel::Read(FileName,pHView,clean_include,options);
  } else {
    jFileName = (wchar_t *)FileName;
    jpHView = (void *) pHView; 
    jclean_include = clean_include;
    joptions = (void *) options; 
    jresult = (int) swig_callbackRead__SWIG_0(jFileName, jpHView, jclean_include, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::Read(char const *FileName, HBaseView *pHView, bool clean_include, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jpHView = 0 ;
  bool jclean_include  ;
  void * joptions = 0 ;
  
  if (!swig_callbackRead__SWIG_4) {
    return HBaseModel::Read(FileName,pHView,clean_include,options);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jpHView = (void *) pHView; 
    jclean_include = clean_include;
    joptions = (void *) options; 
    jresult = (int) swig_callbackRead__SWIG_4(jFileName, jpHView, jclean_include, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::WriteWithOptions(wchar_t const *FileName, HBaseView *pHView, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jpHView = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackWriteWithOptions__SWIG_0) {
    return HBaseModel::WriteWithOptions(FileName,pHView,options);
  } else {
    jFileName = (wchar_t *)FileName;
    jpHView = (void *) pHView; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackWriteWithOptions__SWIG_0(jFileName, jpHView, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::WriteWithOptions(char const *FileName, HBaseView *pHView, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jpHView = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackWriteWithOptions__SWIG_3) {
    return HBaseModel::WriteWithOptions(FileName,pHView,options);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jpHView = (void *) pHView; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackWriteWithOptions__SWIG_3(jFileName, jpHView, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::Write(wchar_t const *FileName, HBaseView *pHView, float width, float height) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jpHView = 0 ;
  float jwidth  ;
  float jheight  ;
  
  if (!swig_callbackWrite__SWIG_0) {
    return HBaseModel::Write(FileName,pHView,width,height);
  } else {
    jFileName = (wchar_t *)FileName;
    jpHView = (void *) pHView; 
    jwidth = width;
    jheight = height;
    jresult = (int) swig_callbackWrite__SWIG_0(jFileName, jpHView, jwidth, jheight);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::Write(char const *FileName, HBaseView *pHView, float width, float height) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jpHView = 0 ;
  float jwidth  ;
  float jheight  ;
  
  if (!swig_callbackWrite__SWIG_4) {
    return HBaseModel::Write(FileName,pHView,width,height);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jpHView = (void *) pHView; 
    jwidth = width;
    jheight = height;
    jresult = (int) swig_callbackWrite__SWIG_4(jFileName, jpHView, jwidth, jheight);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HStreamFileToolkit *SwigDirector_HBaseModel::GetStreamFileTK() const {
  HStreamFileToolkit *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetStreamFileTK) {
    return HBaseModel::GetStreamFileTK();
  } else {
    jresult = (void *) swig_callbackGetStreamFileTK();
    c_result = (HStreamFileToolkit *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HBaseModel::GetModelKey() const {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  
  if (!swig_callbackGetModelKey) {
    return HBaseModel::GetModelKey();
  } else {
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetModelKey();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HBaseModel::GetModelIncludeKey() const {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  
  if (!swig_callbackGetModelIncludeKey) {
    return HBaseModel::GetModelIncludeKey();
  } else {
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetModelIncludeKey();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HBaseModel::GetBBoxKey() const {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  
  if (!swig_callbackGetBBoxKey) {
    return HBaseModel::GetBBoxKey();
  } else {
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetBBoxKey();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HBaseModel::IsBRepGeometry() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackIsBRepGeometry) {
    return HBaseModel::IsBRepGeometry();
  } else {
    jresult = (bool) swig_callbackIsBRepGeometry();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseModel::SetBRepGeometry(bool brep) {
  bool jbrep  ;
  
  if (!swig_callbackSetBRepGeometry) {
    HBaseModel::SetBRepGeometry(brep);
    return;
  } else {
    jbrep = brep;
    swig_callbackSetBRepGeometry(jbrep);
  }
}

bool SwigDirector_HBaseModel::IsFEAGeometry() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackIsFEAGeometry) {
    return HBaseModel::IsFEAGeometry();
  } else {
    jresult = (bool) swig_callbackIsFEAGeometry();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseModel::SetFEAGeometry(bool fea) {
  bool jfea  ;
  
  if (!swig_callbackSetFEAGeometry) {
    HBaseModel::SetFEAGeometry(fea);
    return;
  } else {
    jfea = fea;
    swig_callbackSetFEAGeometry(jfea);
  }
}

bool SwigDirector_HBaseModel::IsVectorGeometry() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackIsVectorGeometry) {
    return HBaseModel::IsVectorGeometry();
  } else {
    jresult = (bool) swig_callbackIsVectorGeometry();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseModel::SetVectorGeometry(bool vector) {
  bool jvector  ;
  
  if (!swig_callbackSetVectorGeometry) {
    HBaseModel::SetVectorGeometry(vector);
    return;
  } else {
    jvector = vector;
    swig_callbackSetVectorGeometry(jvector);
  }
}

void SwigDirector_HBaseModel::CleanIncludes() {
  if (!swig_callbackCleanIncludes) {
    HBaseModel::CleanIncludes();
    return;
  } else {
    swig_callbackCleanIncludes();
  }
}

void SwigDirector_HBaseModel::DeleteIncludedSegments() {
  if (!swig_callbackDeleteIncludedSegments) {
    HBaseModel::DeleteIncludedSegments();
    return;
  } else {
    swig_callbackDeleteIncludedSegments();
  }
}

HBhvBehaviorManager *SwigDirector_HBaseModel::GetBhvBehaviorManager() {
  HBhvBehaviorManager *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetBhvBehaviorManager) {
    return HBaseModel::GetBhvBehaviorManager();
  } else {
    jresult = (void *) swig_callbackGetBhvBehaviorManager();
    c_result = (HBhvBehaviorManager *)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::WriteWithAnimation(wchar_t const *FileName, HBaseView *pHView, float width, float height) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jpHView = 0 ;
  float jwidth  ;
  float jheight  ;
  
  if (!swig_callbackWriteWithAnimation__SWIG_0) {
    return HBaseModel::WriteWithAnimation(FileName,pHView,width,height);
  } else {
    jFileName = (wchar_t *)FileName;
    jpHView = (void *) pHView; 
    jwidth = width;
    jheight = height;
    jresult = (int) swig_callbackWriteWithAnimation__SWIG_0(jFileName, jpHView, jwidth, jheight);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseModel::WriteWithAnimation(char const *FileName, HBaseView *pHView, float width, float height) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jpHView = 0 ;
  float jwidth  ;
  float jheight  ;
  
  if (!swig_callbackWriteWithAnimation__SWIG_4) {
    return HBaseModel::WriteWithAnimation(FileName,pHView,width,height);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jpHView = (void *) pHView; 
    jwidth = width;
    jheight = height;
    jresult = (int) swig_callbackWriteWithAnimation__SWIG_4(jFileName, jpHView, jwidth, jheight);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseModel::CreateIncludeSegment() {
  if (!swig_callbackCreateIncludeSegment) {
    HBaseModel::CreateIncludeSegment();
    return;
  } else {
    swig_callbackCreateIncludeSegment();
  }
}

void SwigDirector_HBaseModel::swig_connect_director(SWIG_Callback0_t callbackInit, SWIG_Callback1_t callbackFlush, SWIG_Callback2_t callbackRead__SWIG_0, SWIG_Callback3_t callbackRead__SWIG_1, SWIG_Callback4_t callbackRead__SWIG_2, SWIG_Callback5_t callbackRead__SWIG_3, SWIG_Callback6_t callbackRead__SWIG_4, SWIG_Callback7_t callbackRead__SWIG_5, SWIG_Callback8_t callbackRead__SWIG_6, SWIG_Callback9_t callbackRead__SWIG_7, SWIG_Callback10_t callbackWriteWithOptions__SWIG_0, SWIG_Callback11_t callbackWriteWithOptions__SWIG_1, SWIG_Callback12_t callbackWriteWithOptions__SWIG_2, SWIG_Callback13_t callbackWriteWithOptions__SWIG_3, SWIG_Callback14_t callbackWriteWithOptions__SWIG_4, SWIG_Callback15_t callbackWriteWithOptions__SWIG_5, SWIG_Callback16_t callbackWrite__SWIG_0, SWIG_Callback17_t callbackWrite__SWIG_1, SWIG_Callback18_t callbackWrite__SWIG_2, SWIG_Callback19_t callbackWrite__SWIG_3, SWIG_Callback20_t callbackWrite__SWIG_4, SWIG_Callback21_t callbackWrite__SWIG_5, SWIG_Callback22_t callbackWrite__SWIG_6, SWIG_Callback23_t callbackWrite__SWIG_7, SWIG_Callback24_t callbackGetStreamFileTK, SWIG_Callback25_t callbackGetModelKey, SWIG_Callback26_t callbackGetModelIncludeKey, SWIG_Callback27_t callbackGetBBoxKey, SWIG_Callback28_t callbackIsBRepGeometry, SWIG_Callback29_t callbackSetBRepGeometry, SWIG_Callback30_t callbackIsFEAGeometry, SWIG_Callback31_t callbackSetFEAGeometry, SWIG_Callback32_t callbackIsVectorGeometry, SWIG_Callback33_t callbackSetVectorGeometry, SWIG_Callback34_t callbackCleanIncludes, SWIG_Callback35_t callbackDeleteIncludedSegments, SWIG_Callback36_t callbackGetBhvBehaviorManager, SWIG_Callback37_t callbackWriteWithAnimation__SWIG_0, SWIG_Callback38_t callbackWriteWithAnimation__SWIG_1, SWIG_Callback39_t callbackWriteWithAnimation__SWIG_2, SWIG_Callback40_t callbackWriteWithAnimation__SWIG_3, SWIG_Callback41_t callbackWriteWithAnimation__SWIG_4, SWIG_Callback42_t callbackWriteWithAnimation__SWIG_5, SWIG_Callback43_t callbackWriteWithAnimation__SWIG_6, SWIG_Callback44_t callbackWriteWithAnimation__SWIG_7, SWIG_Callback45_t callbackCreateIncludeSegment) {
  swig_callbackInit = callbackInit;
  swig_callbackFlush = callbackFlush;
  swig_callbackRead__SWIG_0 = callbackRead__SWIG_0;
  swig_callbackRead__SWIG_1 = callbackRead__SWIG_1;
  swig_callbackRead__SWIG_2 = callbackRead__SWIG_2;
  swig_callbackRead__SWIG_3 = callbackRead__SWIG_3;
  swig_callbackRead__SWIG_4 = callbackRead__SWIG_4;
  swig_callbackRead__SWIG_5 = callbackRead__SWIG_5;
  swig_callbackRead__SWIG_6 = callbackRead__SWIG_6;
  swig_callbackRead__SWIG_7 = callbackRead__SWIG_7;
  swig_callbackWriteWithOptions__SWIG_0 = callbackWriteWithOptions__SWIG_0;
  swig_callbackWriteWithOptions__SWIG_1 = callbackWriteWithOptions__SWIG_1;
  swig_callbackWriteWithOptions__SWIG_2 = callbackWriteWithOptions__SWIG_2;
  swig_callbackWriteWithOptions__SWIG_3 = callbackWriteWithOptions__SWIG_3;
  swig_callbackWriteWithOptions__SWIG_4 = callbackWriteWithOptions__SWIG_4;
  swig_callbackWriteWithOptions__SWIG_5 = callbackWriteWithOptions__SWIG_5;
  swig_callbackWrite__SWIG_0 = callbackWrite__SWIG_0;
  swig_callbackWrite__SWIG_1 = callbackWrite__SWIG_1;
  swig_callbackWrite__SWIG_2 = callbackWrite__SWIG_2;
  swig_callbackWrite__SWIG_3 = callbackWrite__SWIG_3;
  swig_callbackWrite__SWIG_4 = callbackWrite__SWIG_4;
  swig_callbackWrite__SWIG_5 = callbackWrite__SWIG_5;
  swig_callbackWrite__SWIG_6 = callbackWrite__SWIG_6;
  swig_callbackWrite__SWIG_7 = callbackWrite__SWIG_7;
  swig_callbackGetStreamFileTK = callbackGetStreamFileTK;
  swig_callbackGetModelKey = callbackGetModelKey;
  swig_callbackGetModelIncludeKey = callbackGetModelIncludeKey;
  swig_callbackGetBBoxKey = callbackGetBBoxKey;
  swig_callbackIsBRepGeometry = callbackIsBRepGeometry;
  swig_callbackSetBRepGeometry = callbackSetBRepGeometry;
  swig_callbackIsFEAGeometry = callbackIsFEAGeometry;
  swig_callbackSetFEAGeometry = callbackSetFEAGeometry;
  swig_callbackIsVectorGeometry = callbackIsVectorGeometry;
  swig_callbackSetVectorGeometry = callbackSetVectorGeometry;
  swig_callbackCleanIncludes = callbackCleanIncludes;
  swig_callbackDeleteIncludedSegments = callbackDeleteIncludedSegments;
  swig_callbackGetBhvBehaviorManager = callbackGetBhvBehaviorManager;
  swig_callbackWriteWithAnimation__SWIG_0 = callbackWriteWithAnimation__SWIG_0;
  swig_callbackWriteWithAnimation__SWIG_1 = callbackWriteWithAnimation__SWIG_1;
  swig_callbackWriteWithAnimation__SWIG_2 = callbackWriteWithAnimation__SWIG_2;
  swig_callbackWriteWithAnimation__SWIG_3 = callbackWriteWithAnimation__SWIG_3;
  swig_callbackWriteWithAnimation__SWIG_4 = callbackWriteWithAnimation__SWIG_4;
  swig_callbackWriteWithAnimation__SWIG_5 = callbackWriteWithAnimation__SWIG_5;
  swig_callbackWriteWithAnimation__SWIG_6 = callbackWriteWithAnimation__SWIG_6;
  swig_callbackWriteWithAnimation__SWIG_7 = callbackWriteWithAnimation__SWIG_7;
  swig_callbackCreateIncludeSegment = callbackCreateIncludeSegment;
}

void SwigDirector_HBaseModel::swig_init_callbacks() {
  swig_callbackInit = 0;
  swig_callbackFlush = 0;
  swig_callbackRead__SWIG_0 = 0;
  swig_callbackRead__SWIG_1 = 0;
  swig_callbackRead__SWIG_2 = 0;
  swig_callbackRead__SWIG_3 = 0;
  swig_callbackRead__SWIG_4 = 0;
  swig_callbackRead__SWIG_5 = 0;
  swig_callbackRead__SWIG_6 = 0;
  swig_callbackRead__SWIG_7 = 0;
  swig_callbackWriteWithOptions__SWIG_0 = 0;
  swig_callbackWriteWithOptions__SWIG_1 = 0;
  swig_callbackWriteWithOptions__SWIG_2 = 0;
  swig_callbackWriteWithOptions__SWIG_3 = 0;
  swig_callbackWriteWithOptions__SWIG_4 = 0;
  swig_callbackWriteWithOptions__SWIG_5 = 0;
  swig_callbackWrite__SWIG_0 = 0;
  swig_callbackWrite__SWIG_1 = 0;
  swig_callbackWrite__SWIG_2 = 0;
  swig_callbackWrite__SWIG_3 = 0;
  swig_callbackWrite__SWIG_4 = 0;
  swig_callbackWrite__SWIG_5 = 0;
  swig_callbackWrite__SWIG_6 = 0;
  swig_callbackWrite__SWIG_7 = 0;
  swig_callbackGetStreamFileTK = 0;
  swig_callbackGetModelKey = 0;
  swig_callbackGetModelIncludeKey = 0;
  swig_callbackGetBBoxKey = 0;
  swig_callbackIsBRepGeometry = 0;
  swig_callbackSetBRepGeometry = 0;
  swig_callbackIsFEAGeometry = 0;
  swig_callbackSetFEAGeometry = 0;
  swig_callbackIsVectorGeometry = 0;
  swig_callbackSetVectorGeometry = 0;
  swig_callbackCleanIncludes = 0;
  swig_callbackDeleteIncludedSegments = 0;
  swig_callbackGetBhvBehaviorManager = 0;
  swig_callbackWriteWithAnimation__SWIG_0 = 0;
  swig_callbackWriteWithAnimation__SWIG_1 = 0;
  swig_callbackWriteWithAnimation__SWIG_2 = 0;
  swig_callbackWriteWithAnimation__SWIG_3 = 0;
  swig_callbackWriteWithAnimation__SWIG_4 = 0;
  swig_callbackWriteWithAnimation__SWIG_5 = 0;
  swig_callbackWriteWithAnimation__SWIG_6 = 0;
  swig_callbackWriteWithAnimation__SWIG_7 = 0;
  swig_callbackCreateIncludeSegment = 0;
}

SwigDirector_HBaseView::SwigDirector_HBaseView(HBaseModel *model, char const *alias, char const *driver_type, char const *instance_name, void *window_handle, void *colormap, void *clip_override, void *window_handle_2, char const *driver_path) : HBaseView(model, alias, driver_type, instance_name, window_handle, colormap, clip_override, window_handle_2, driver_path), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HBaseView::~SwigDirector_HBaseView() {
  
}


HEventListener *SwigDirector_HBaseView::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HUpdateListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::CameraChangedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackCameraChangedEvent) {
    return HUpdateListener::CameraChangedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackCameraChangedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::UpdateEvent(bool antialias, bool forceUpdate) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  bool jantialias  ;
  bool jforceUpdate  ;
  
  if (!swig_callbackUpdateEvent__SWIG_0) {
    return HBaseView::UpdateEvent(antialias,forceUpdate);
  } else {
    jantialias = antialias;
    jforceUpdate = forceUpdate;
    jresult = (int) swig_callbackUpdateEvent__SWIG_0(jantialias, jforceUpdate);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::ViewDestroyedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackViewDestroyedEvent) {
    return HUpdateListener::ViewDestroyedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackViewDestroyedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::SmoothTransitionFinishedEvent(HBaseView *param_1) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jparam_1 = 0 ;
  
  if (!swig_callbackSmoothTransitionFinishedEvent) {
    return HUpdateListener::SmoothTransitionFinishedEvent(param_1);
  } else {
    jparam_1 = (void *) param_1; 
    jresult = (int) swig_callbackSmoothTransitionFinishedEvent(jparam_1);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::Init() {
  if (!swig_callbackInit) {
    HBaseView::Init();
    return;
  } else {
    swig_callbackInit();
  }
}

void SwigDirector_HBaseView::FitWorld(HPoint *center_out) {
  void * jcenter_out = 0 ;
  
  if (!swig_callbackFitWorld__SWIG_0) {
    HBaseView::FitWorld(center_out);
    return;
  } else {
    jcenter_out = (void *) center_out; 
    swig_callbackFitWorld__SWIG_0(jcenter_out);
  }
}

void SwigDirector_HBaseView::FitWorldExact(HPoint *center_out) {
  void * jcenter_out = 0 ;
  
  if (!swig_callbackFitWorldExact__SWIG_0) {
    HBaseView::FitWorldExact(center_out);
    return;
  } else {
    jcenter_out = (void *) center_out; 
    swig_callbackFitWorldExact__SWIG_0(jcenter_out);
  }
}

void SwigDirector_HBaseView::ZoomToExtents() {
  if (!swig_callbackZoomToExtents) {
    HBaseView::ZoomToExtents();
    return;
  } else {
    swig_callbackZoomToExtents();
  }
}

void SwigDirector_HBaseView::ZoomToInitialCamera() {
  if (!swig_callbackZoomToInitialCamera) {
    HBaseView::ZoomToInitialCamera();
    return;
  } else {
    swig_callbackZoomToInitialCamera();
  }
}

void SwigDirector_HBaseView::Update() {
  if (!swig_callbackUpdate) {
    HBaseView::Update();
    return;
  } else {
    swig_callbackUpdate();
  }
}

void SwigDirector_HBaseView::ForceUpdate() {
  if (!swig_callbackForceUpdate) {
    HBaseView::ForceUpdate();
    return;
  } else {
    swig_callbackForceUpdate();
  }
}

HFileIOResult SwigDirector_HBaseView::FileInput(wchar_t const *FileName, HInputHandler *handler, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jhandler = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileInput__SWIG_0) {
    return HBaseView::FileInput(FileName,handler,options);
  } else {
    jFileName = (wchar_t *)FileName;
    jhandler = (void *) handler; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileInput__SWIG_0(jFileName, jhandler, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseView::FileInput(char const *FileName, HInputHandler *handler, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jhandler = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileInput__SWIG_2) {
    return HBaseView::FileInput(FileName,handler,options);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jhandler = (void *) handler; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileInput__SWIG_2(jFileName, jhandler, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseView::FileOutput(wchar_t const *FileName, HOutputHandler *handler, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jFileName = 0 ;
  void * jhandler = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileOutput__SWIG_0) {
    return HBaseView::FileOutput(FileName,handler,options);
  } else {
    jFileName = (wchar_t *)FileName;
    jhandler = (void *) handler; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileOutput__SWIG_0(jFileName, jhandler, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HBaseView::FileOutput(char const *FileName, HOutputHandler *handler, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  char * jFileName = 0 ;
  void * jhandler = 0 ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileOutput__SWIG_2) {
    return HBaseView::FileOutput(FileName,handler,options);
  } else {
    jFileName = SWIG_csharp_string_callback((const char *)FileName); 
    jhandler = (void *) handler; 
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileOutput__SWIG_2(jFileName, jhandler, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::UpdateHighlighting() {
  if (!swig_callbackUpdateHighlighting) {
    HBaseView::UpdateHighlighting();
    return;
  } else {
    swig_callbackUpdateHighlighting();
  }
}

HBaseModel *SwigDirector_HBaseView::GetModel() {
  HBaseModel *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetModel) {
    return HBaseView::GetModel();
  } else {
    jresult = (void *) swig_callbackGetModel();
    c_result = (HBaseModel *)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetViewMode(ViewMode mode, bool invert, bool fitWorld) {
  int jmode  ;
  bool jinvert  ;
  bool jfitWorld  ;
  
  if (!swig_callbackSetViewMode__SWIG_0) {
    HBaseView::SetViewMode(mode,invert,fitWorld);
    return;
  } else {
    jmode = mode;
    jinvert = invert;
    jfitWorld = fitWorld;
    swig_callbackSetViewMode__SWIG_0(jmode, jinvert, jfitWorld);
  }
}

void SwigDirector_HBaseView::SetHandedness(HandednessMode mode, bool emit_message) {
  int jmode  ;
  bool jemit_message  ;
  
  if (!swig_callbackSetHandedness__SWIG_0) {
    HBaseView::SetHandedness(mode,emit_message);
    return;
  } else {
    jmode = mode;
    jemit_message = emit_message;
    swig_callbackSetHandedness__SWIG_0(jmode, jemit_message);
  }
}

void SwigDirector_HBaseView::SetHandednessFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetHandednessFromMessage) {
    HBaseView::SetHandednessFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSetHandednessFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::SetFontSize(char const *font_size, bool emit_message) {
  char * jfont_size = 0 ;
  bool jemit_message  ;
  
  if (!swig_callbackSetFontSize__SWIG_0) {
    HBaseView::SetFontSize(font_size,emit_message);
    return;
  } else {
    jfont_size = SWIG_csharp_string_callback((const char *)font_size); 
    jemit_message = emit_message;
    swig_callbackSetFontSize__SWIG_0(jfont_size, jemit_message);
  }
}

void SwigDirector_HBaseView::SetFontSizeFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetFontSizeFromMessage) {
    HBaseView::SetFontSizeFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSetFontSizeFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::SetZoomLimit() {
  if (!swig_callbackSetZoomLimit__SWIG_1) {
    HBaseView::SetZoomLimit();
    return;
  } else {
    swig_callbackSetZoomLimit__SWIG_1();
  }
}

void SwigDirector_HBaseView::SetAxisMode(AxisMode mode) {
  int jmode  ;
  
  if (!swig_callbackSetAxisMode) {
    HBaseView::SetAxisMode(mode);
    return;
  } else {
    jmode = mode;
    swig_callbackSetAxisMode(jmode);
  }
}

void SwigDirector_HBaseView::OnSetAxisMode(AxisMode mode) {
  int jmode  ;
  
  if (!swig_callbackOnSetAxisMode) {
    HBaseView::OnSetAxisMode(mode);
    return;
  } else {
    jmode = mode;
    swig_callbackOnSetAxisMode(jmode);
  }
}

void SwigDirector_HBaseView::AdjustAxisWindow(int axis_window_pixels_in, HIntRectangle *rect_in) {
  int jaxis_window_pixels_in  ;
  void * jrect_in = 0 ;
  
  if (!swig_callbackAdjustAxisWindow__SWIG_0) {
    HBaseView::AdjustAxisWindow(axis_window_pixels_in,rect_in);
    return;
  } else {
    jaxis_window_pixels_in = axis_window_pixels_in;
    jrect_in = (void *) rect_in; 
    swig_callbackAdjustAxisWindow__SWIG_0(jaxis_window_pixels_in, jrect_in);
  }
}

void SwigDirector_HBaseView::SetShadowMode(HShadowMode sm, bool saveMode) {
  int jsm  ;
  bool jsaveMode  ;
  
  if (!swig_callbackSetShadowMode__SWIG_0) {
    HBaseView::SetShadowMode(sm,saveMode);
    return;
  } else {
    jsm = sm;
    jsaveMode = saveMode;
    swig_callbackSetShadowMode__SWIG_0(jsm, jsaveMode);
  }
}

void SwigDirector_HBaseView::SetReflectionPlane(bool state, float opacity, bool fading, bool attenuate, float hither, float yon, bool blur, int blur_level) {
  bool jstate  ;
  float jopacity  ;
  bool jfading  ;
  bool jattenuate  ;
  float jhither  ;
  float jyon  ;
  bool jblur  ;
  int jblur_level  ;
  
  if (!swig_callbackSetReflectionPlane__SWIG_0) {
    HBaseView::SetReflectionPlane(state,opacity,fading,attenuate,hither,yon,blur,blur_level);
    return;
  } else {
    jstate = state;
    jopacity = opacity;
    jfading = fading;
    jattenuate = attenuate;
    jhither = hither;
    jyon = yon;
    jblur = blur;
    jblur_level = blur_level;
    swig_callbackSetReflectionPlane__SWIG_0(jstate, jopacity, jfading, jattenuate, jhither, jyon, jblur, jblur_level);
  }
}

void SwigDirector_HBaseView::DeleteSelectionList(bool emit_message) {
  bool jemit_message  ;
  
  if (!swig_callbackDeleteSelectionList__SWIG_0) {
    HBaseView::DeleteSelectionList(emit_message);
    return;
  } else {
    jemit_message = emit_message;
    swig_callbackDeleteSelectionList__SWIG_0(jemit_message);
  }
}

void SwigDirector_HBaseView::SetWindowColor(HPoint rgb, bool emit_message) {
  void * jrgb  ;
  bool jemit_message  ;
  
  if (!swig_callbackSetWindowColor__SWIG_0) {
    HBaseView::SetWindowColor(rgb,emit_message);
    return;
  } else {
    jrgb = (void *)&rgb; 
    jemit_message = emit_message;
    swig_callbackSetWindowColor__SWIG_0(jrgb, jemit_message);
  }
}

void SwigDirector_HBaseView::SetWindowColor(HPoint rgbtop, HPoint rgbbottom, bool emit_message) {
  void * jrgbtop  ;
  void * jrgbbottom  ;
  bool jemit_message  ;
  
  if (!swig_callbackSetWindowColor__SWIG_2) {
    HBaseView::SetWindowColor(rgbtop,rgbbottom,emit_message);
    return;
  } else {
    jrgbtop = (void *)&rgbtop; 
    jrgbbottom = (void *)&rgbbottom; 
    jemit_message = emit_message;
    swig_callbackSetWindowColor__SWIG_2(jrgbtop, jrgbbottom, jemit_message);
  }
}

void SwigDirector_HBaseView::SetWindowColorRange(HPoint rgbtop, HPoint rgbbottom, int percentage, bool emit_message) {
  void * jrgbtop  ;
  void * jrgbbottom  ;
  int jpercentage  ;
  bool jemit_message  ;
  
  if (!swig_callbackSetWindowColorRange__SWIG_0) {
    HBaseView::SetWindowColorRange(rgbtop,rgbbottom,percentage,emit_message);
    return;
  } else {
    jrgbtop = (void *)&rgbtop; 
    jrgbbottom = (void *)&rgbbottom; 
    jpercentage = percentage;
    jemit_message = emit_message;
    swig_callbackSetWindowColorRange__SWIG_0(jrgbtop, jrgbbottom, jpercentage, jemit_message);
  }
}

void SwigDirector_HBaseView::SetWindowMaterial(char const *name, bool emit_message) {
  char * jname = 0 ;
  bool jemit_message  ;
  
  if (!swig_callbackSetWindowMaterial__SWIG_0) {
    HBaseView::SetWindowMaterial(name,emit_message);
    return;
  } else {
    jname = SWIG_csharp_string_callback((const char *)name); 
    jemit_message = emit_message;
    swig_callbackSetWindowMaterial__SWIG_0(jname, jemit_message);
  }
}

void SwigDirector_HBaseView::SetWindowColorFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetWindowColorFromMessage) {
    HBaseView::SetWindowColorFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSetWindowColorFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::CameraPositionChanged(bool emit_message, bool smooth_camera_transition) {
  bool jemit_message  ;
  bool jsmooth_camera_transition  ;
  
  if (!swig_callbackCameraPositionChanged__SWIG_0) {
    HBaseView::CameraPositionChanged(emit_message,smooth_camera_transition);
    return;
  } else {
    jemit_message = emit_message;
    jsmooth_camera_transition = smooth_camera_transition;
    swig_callbackCameraPositionChanged__SWIG_0(jemit_message, jsmooth_camera_transition);
  }
}

void SwigDirector_HBaseView::PrepareForCameraChange() {
  if (!swig_callbackPrepareForCameraChange) {
    HBaseView::PrepareForCameraChange();
    return;
  } else {
    swig_callbackPrepareForCameraChange();
  }
}

void SwigDirector_HBaseView::SetCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, char const *proj) {
  void * jpos  ;
  void * jtar  ;
  void * jup  ;
  float jfieldx  ;
  float jfieldy  ;
  char * jproj = 0 ;
  
  if (!swig_callbackSetCamera__SWIG_0) {
    HBaseView::SetCamera(pos,tar,up,fieldx,fieldy,proj);
    return;
  } else {
    jpos = (void *)&pos; 
    jtar = (void *)&tar; 
    jup = (void *)&up; 
    jfieldx = fieldx;
    jfieldy = fieldy;
    jproj = SWIG_csharp_string_callback((const char *)proj); 
    swig_callbackSetCamera__SWIG_0(jpos, jtar, jup, jfieldx, jfieldy, jproj);
  }
}

void SwigDirector_HBaseView::SetInitialCamera(HPoint pos, HPoint tar, HPoint up, float fieldx, float fieldy, char const *proj) {
  void * jpos  ;
  void * jtar  ;
  void * jup  ;
  float jfieldx  ;
  float jfieldy  ;
  char * jproj = 0 ;
  
  if (!swig_callbackSetInitialCamera) {
    HBaseView::SetInitialCamera(pos,tar,up,fieldx,fieldy,proj);
    return;
  } else {
    jpos = (void *)&pos; 
    jtar = (void *)&tar; 
    jup = (void *)&up; 
    jfieldx = fieldx;
    jfieldy = fieldy;
    jproj = SWIG_csharp_string_callback((const char *)proj); 
    swig_callbackSetInitialCamera(jpos, jtar, jup, jfieldx, jfieldy, jproj);
  }
}

void SwigDirector_HBaseView::GetCamera(HPoint *pos, HPoint *tar, HPoint *up, float &fieldx, float &fieldy, char *proj) {
  void * jpos = 0 ;
  void * jtar = 0 ;
  void * jup = 0 ;
  float * jfieldx = 0 ;
  float * jfieldy = 0 ;
  char * jproj = 0 ;
  
  if (!swig_callbackGetCamera__SWIG_0) {
    HBaseView::GetCamera(pos,tar,up,fieldx,fieldy,proj);
    return;
  } else {
    jpos = (void *) pos; 
    jtar = (void *) tar; 
    jup = (void *) up; 
    jfieldx = &fieldx;
    jfieldy = &fieldy;
    jproj = SWIG_csharp_string_callback((const char *)proj); 
    swig_callbackGetCamera__SWIG_0(jpos, jtar, jup, jfieldx, jfieldy, jproj);
  }
}

void SwigDirector_HBaseView::SetCamera(HCamera camera) {
  void * jcamera  ;
  
  if (!swig_callbackSetCamera__SWIG_1) {
    HBaseView::SetCamera(camera);
    return;
  } else {
    jcamera = (void *)&camera; 
    swig_callbackSetCamera__SWIG_1(jcamera);
  }
}

void SwigDirector_HBaseView::GetCamera(HCamera *camera) {
  void * jcamera = 0 ;
  
  if (!swig_callbackGetCamera__SWIG_1) {
    HBaseView::GetCamera(camera);
    return;
  } else {
    jcamera = (void *) camera; 
    swig_callbackGetCamera__SWIG_1(jcamera);
  }
}

void SwigDirector_HBaseView::SetCameraFromMessage(char const *data, unsigned int data_length) {
  char * jdata = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetCameraFromMessage) {
    HBaseView::SetCameraFromMessage(data,data_length);
    return;
  } else {
    jdata = SWIG_csharp_string_callback((const char *)data); 
    jdata_length = data_length;
    swig_callbackSetCameraFromMessage(jdata, jdata_length);
  }
}

void SwigDirector_HBaseView::InsertHSFData(char const *segment, char const *in_data, unsigned int data_length, bool emit_message) {
  char * jsegment = 0 ;
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  bool jemit_message  ;
  
  if (!swig_callbackInsertHSFData__SWIG_0) {
    HBaseView::InsertHSFData(segment,in_data,data_length,emit_message);
    return;
  } else {
    jsegment = SWIG_csharp_string_callback((const char *)segment); 
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    jemit_message = emit_message;
    swig_callbackInsertHSFData__SWIG_0(jsegment, jin_data, jdata_length, jemit_message);
  }
}

void SwigDirector_HBaseView::InsertHSFDataFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackInsertHSFDataFromMessage) {
    HBaseView::InsertHSFDataFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackInsertHSFDataFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::EmitHSFData(char const *segment, char const *in_data, unsigned int data_length) {
  char * jsegment = 0 ;
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackEmitHSFData) {
    HBaseView::EmitHSFData(segment,in_data,data_length);
    return;
  } else {
    jsegment = SWIG_csharp_string_callback((const char *)segment); 
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackEmitHSFData(jsegment, jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::SetRenderMode(HRenderMode NewRenderMode, bool emit_message) {
  int jNewRenderMode  ;
  bool jemit_message  ;
  
  if (!swig_callbackSetRenderMode__SWIG_0) {
    HBaseView::SetRenderMode(NewRenderMode,emit_message);
    return;
  } else {
    jNewRenderMode = NewRenderMode;
    jemit_message = emit_message;
    swig_callbackSetRenderMode__SWIG_0(jNewRenderMode, jemit_message);
  }
}

void SwigDirector_HBaseView::SetRenderModeFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetRenderModeFromMessage) {
    HBaseView::SetRenderModeFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSetRenderModeFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::EmitFlushMessage() {
  if (!swig_callbackEmitFlushMessage) {
    HBaseView::EmitFlushMessage();
    return;
  } else {
    swig_callbackEmitFlushMessage();
  }
}

void SwigDirector_HBaseView::FlushFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackFlushFromMessage) {
    HBaseView::FlushFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackFlushFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::Flush(bool emit_message) {
  bool jemit_message  ;
  
  if (!swig_callbackFlush__SWIG_0) {
    HBaseView::Flush(emit_message);
    return;
  } else {
    jemit_message = emit_message;
    swig_callbackFlush__SWIG_0(jemit_message);
  }
}

void SwigDirector_HBaseView::EmitSelectMessage(HC_KEY key, bool isSelect) {
  MVO_POINTER_SIZED_INT jkey  ;
  bool jisSelect  ;
  
  if (!swig_callbackEmitSelectMessage) {
    HBaseView::EmitSelectMessage(key,isSelect);
    return;
  } else {
    jkey = key;
    jisSelect = isSelect;
    swig_callbackEmitSelectMessage(jkey, jisSelect);
  }
}

void SwigDirector_HBaseView::SelectFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSelectFromMessage) {
    HBaseView::SelectFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSelectFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::EmitDeSelectAllMessage() {
  if (!swig_callbackEmitDeSelectAllMessage) {
    HBaseView::EmitDeSelectAllMessage();
    return;
  } else {
    swig_callbackEmitDeSelectAllMessage();
  }
}

void SwigDirector_HBaseView::EmitDeleteSelectionListMessage() {
  if (!swig_callbackEmitDeleteSelectionListMessage) {
    HBaseView::EmitDeleteSelectionListMessage();
    return;
  } else {
    swig_callbackEmitDeleteSelectionListMessage();
  }
}

void SwigDirector_HBaseView::DeleteSelectionListFromMessage() {
  if (!swig_callbackDeleteSelectionListFromMessage) {
    HBaseView::DeleteSelectionListFromMessage();
    return;
  } else {
    swig_callbackDeleteSelectionListFromMessage();
  }
}

void SwigDirector_HBaseView::DeSelectAllFromMessage() {
  if (!swig_callbackDeSelectAllFromMessage) {
    HBaseView::DeSelectAllFromMessage();
    return;
  } else {
    swig_callbackDeSelectAllFromMessage();
  }
}

void SwigDirector_HBaseView::EmitSetModellingMatrixMessage(HC_KEY key) {
  MVO_POINTER_SIZED_INT jkey  ;
  
  if (!swig_callbackEmitSetModellingMatrixMessage__SWIG_0) {
    HBaseView::EmitSetModellingMatrixMessage(key);
    return;
  } else {
    jkey = key;
    swig_callbackEmitSetModellingMatrixMessage__SWIG_0(jkey);
  }
}

void SwigDirector_HBaseView::EmitSetModellingMatrixMessage() {
  if (!swig_callbackEmitSetModellingMatrixMessage__SWIG_1) {
    HBaseView::EmitSetModellingMatrixMessage();
    return;
  } else {
    swig_callbackEmitSetModellingMatrixMessage__SWIG_1();
  }
}

void SwigDirector_HBaseView::EmitSegment(HC_KEY key, bool emit_contents_only) {
  MVO_POINTER_SIZED_INT jkey  ;
  bool jemit_contents_only  ;
  
  if (!swig_callbackEmitSegment__SWIG_0) {
    HBaseView::EmitSegment(key,emit_contents_only);
    return;
  } else {
    jkey = key;
    jemit_contents_only = emit_contents_only;
    swig_callbackEmitSegment__SWIG_0(jkey, jemit_contents_only);
  }
}

void SwigDirector_HBaseView::EmitDeleteByKeyMessage(HC_KEY key) {
  MVO_POINTER_SIZED_INT jkey  ;
  
  if (!swig_callbackEmitDeleteByKeyMessage) {
    HBaseView::EmitDeleteByKeyMessage(key);
    return;
  } else {
    jkey = key;
    swig_callbackEmitDeleteByKeyMessage(jkey);
  }
}

void SwigDirector_HBaseView::DeleteByKeyFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackDeleteByKeyFromMessage) {
    HBaseView::DeleteByKeyFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackDeleteByKeyFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::SetModellingMatrixFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetModellingMatrixFromMessage) {
    HBaseView::SetModellingMatrixFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackSetModellingMatrixFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HBaseView::StartSharedKey() {
  if (!swig_callbackStartSharedKey) {
    HBaseView::StartSharedKey();
    return;
  } else {
    swig_callbackStartSharedKey();
  }
}

void SwigDirector_HBaseView::Animate(int animation_steps, HBaseView::HAnimateMode animate_flags, int MaxRotation) {
  int janimation_steps  ;
  int janimate_flags  ;
  int jMaxRotation  ;
  
  if (!swig_callbackAnimate__SWIG_0) {
    HBaseView::Animate(animation_steps,animate_flags,MaxRotation);
    return;
  } else {
    janimation_steps = animation_steps;
    janimate_flags = animate_flags;
    jMaxRotation = MaxRotation;
    swig_callbackAnimate__SWIG_0(janimation_steps, janimate_flags, jMaxRotation);
  }
}

void SwigDirector_HBaseView::SetGeometryChanged() {
  if (!swig_callbackSetGeometryChanged) {
    HBaseView::SetGeometryChanged();
    return;
  } else {
    swig_callbackSetGeometryChanged();
  }
}

void SwigDirector_HBaseView::ClearGeometryChanged() {
  if (!swig_callbackClearGeometryChanged) {
    HBaseView::ClearGeometryChanged();
    return;
  } else {
    swig_callbackClearGeometryChanged();
  }
}

bool SwigDirector_HBaseView::GeometryChanged() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGeometryChanged) {
    return HBaseView::GeometryChanged();
  } else {
    jresult = (bool) swig_callbackGeometryChanged();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseView::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseView::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseView::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseView::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseView::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseView::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HBaseView::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseView::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseView::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseView::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_HBaseView::ComputeReasonableTarget(HPoint &new_tar, HPoint const &mouse_win, HPoint const &tar_orig) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  void * jnew_tar = 0 ;
  void * jmouse_win = 0 ;
  void * jtar_orig = 0 ;
  
  if (!swig_callbackComputeReasonableTarget) {
    return HBaseView::ComputeReasonableTarget(new_tar,mouse_win,tar_orig);
  } else {
    jnew_tar = (HPoint *) &new_tar; 
    jmouse_win = (HPoint *) &mouse_win; 
    jtar_orig = (HPoint *) &tar_orig; 
    jresult = (bool) swig_callbackComputeReasonableTarget(jnew_tar, jmouse_win, jtar_orig);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseView::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseView::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseView::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetShadowColor(HPoint color) {
  void * jcolor  ;
  
  if (!swig_callbackSetShadowColor) {
    HBaseView::SetShadowColor(color);
    return;
  } else {
    jcolor = (void *)&color; 
    swig_callbackSetShadowColor(jcolor);
  }
}

void SwigDirector_HBaseView::SetShadowLightDirection(bool explicit_light, HPoint const *direction) {
  bool jexplicit_light  ;
  void * jdirection = 0 ;
  
  if (!swig_callbackSetShadowLightDirection__SWIG_0) {
    HBaseView::SetShadowLightDirection(explicit_light,direction);
    return;
  } else {
    jexplicit_light = explicit_light;
    jdirection = (void *) direction; 
    swig_callbackSetShadowLightDirection__SWIG_0(jexplicit_light, jdirection);
  }
}

bool SwigDirector_HBaseView::GetShadowLightDirection(HPoint *direction) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  void * jdirection = 0 ;
  
  if (!swig_callbackGetShadowLightDirection__SWIG_0) {
    return HBaseView::GetShadowLightDirection(direction);
  } else {
    jdirection = (void *) direction; 
    jresult = (bool) swig_callbackGetShadowLightDirection__SWIG_0(jdirection);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetShadowIgnoresTransparency(bool ignore) {
  bool jignore  ;
  
  if (!swig_callbackSetShadowIgnoresTransparency) {
    HBaseView::SetShadowIgnoresTransparency(ignore);
    return;
  } else {
    jignore = ignore;
    swig_callbackSetShadowIgnoresTransparency(jignore);
  }
}

bool SwigDirector_HBaseView::GetShadowIgnoresTransparency() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetShadowIgnoresTransparency) {
    return HBaseView::GetShadowIgnoresTransparency();
  } else {
    jresult = (bool) swig_callbackGetShadowIgnoresTransparency();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::DoDynamicHighlighting(HPoint mouse_pos) {
  void * jmouse_pos  ;
  
  if (!swig_callbackDoDynamicHighlighting) {
    HBaseView::DoDynamicHighlighting(mouse_pos);
    return;
  } else {
    jmouse_pos = (void *)&mouse_pos; 
    swig_callbackDoDynamicHighlighting(jmouse_pos);
  }
}

void SwigDirector_HBaseView::SetShadowResolution(int res) {
  int jres  ;
  
  if (!swig_callbackSetShadowResolution) {
    HBaseView::SetShadowResolution(res);
    return;
  } else {
    jres = res;
    swig_callbackSetShadowResolution(jres);
  }
}

void SwigDirector_HBaseView::SetShadowBlurring(int blur) {
  int jblur  ;
  
  if (!swig_callbackSetShadowBlurring) {
    HBaseView::SetShadowBlurring(blur);
    return;
  } else {
    jblur = blur;
    swig_callbackSetShadowBlurring(jblur);
  }
}

void SwigDirector_HBaseView::InternalUpdate() {
  if (!swig_callbackInternalUpdate) {
    HBaseView::InternalUpdate();
    return;
  } else {
    swig_callbackInternalUpdate();
  }
}

void SwigDirector_HBaseView::SetShadowRegenerationMode(bool onoff) {
  bool jonoff  ;
  
  if (!swig_callbackSetShadowRegenerationMode) {
    HBaseView::SetShadowRegenerationMode(onoff);
    return;
  } else {
    jonoff = onoff;
    swig_callbackSetShadowRegenerationMode(jonoff);
  }
}

void SwigDirector_HBaseView::SetShadowRegenerationToggle() {
  if (!swig_callbackSetShadowRegenerationToggle) {
    HBaseView::SetShadowRegenerationToggle();
    return;
  } else {
    swig_callbackSetShadowRegenerationToggle();
  }
}

void SwigDirector_HBaseView::SetCuttingPlaneRegenerationMode(bool onoff) {
  bool jonoff  ;
  
  if (!swig_callbackSetCuttingPlaneRegenerationMode) {
    HBaseView::SetCuttingPlaneRegenerationMode(onoff);
    return;
  } else {
    jonoff = onoff;
    swig_callbackSetCuttingPlaneRegenerationMode(jonoff);
  }
}

void SwigDirector_HBaseView::SetCameraChanged(bool val) {
  bool jval  ;
  
  if (!swig_callbackSetCameraChanged__SWIG_0) {
    HBaseView::SetCameraChanged(val);
    return;
  } else {
    jval = val;
    swig_callbackSetCameraChanged__SWIG_0(jval);
  }
}

bool SwigDirector_HBaseView::GetCameraChanged() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetCameraChanged) {
    return HBaseView::GetCameraChanged();
  } else {
    jresult = (bool) swig_callbackGetCameraChanged();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetInvertMouseWheelZoom(bool val) {
  bool jval  ;
  
  if (!swig_callbackSetInvertMouseWheelZoom__SWIG_0) {
    HBaseView::SetInvertMouseWheelZoom(val);
    return;
  } else {
    jval = val;
    swig_callbackSetInvertMouseWheelZoom__SWIG_0(jval);
  }
}

bool SwigDirector_HBaseView::GetInvertMouseWheelZoom() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetInvertMouseWheelZoom) {
    return HBaseView::GetInvertMouseWheelZoom();
  } else {
    jresult = (bool) swig_callbackGetInvertMouseWheelZoom();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetAxisManipulateOperator(HOpCameraManipulate *op) {
  void * jop = 0 ;
  
  if (!swig_callbackSetAxisManipulateOperator) {
    HBaseView::SetAxisManipulateOperator(op);
    return;
  } else {
    jop = (void *) op; 
    swig_callbackSetAxisManipulateOperator(jop);
  }
}

void SwigDirector_HBaseView::SetVisibilitySelectionMode(bool onoff) {
  bool jonoff  ;
  
  if (!swig_callbackSetVisibilitySelectionMode) {
    HBaseView::SetVisibilitySelectionMode(onoff);
    return;
  } else {
    jonoff = onoff;
    swig_callbackSetVisibilitySelectionMode(jonoff);
  }
}

bool SwigDirector_HBaseView::GetVisibilitySelectionMode() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetVisibilitySelectionMode) {
    return HBaseView::GetVisibilitySelectionMode();
  } else {
    jresult = (bool) swig_callbackGetVisibilitySelectionMode();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetRelatedSelectionLimit(int limit) {
  int jlimit  ;
  
  if (!swig_callbackSetRelatedSelectionLimit) {
    HBaseView::SetRelatedSelectionLimit(limit);
    return;
  } else {
    jlimit = limit;
    swig_callbackSetRelatedSelectionLimit(jlimit);
  }
}

int SwigDirector_HBaseView::GetRelatedSelectionLimit() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetRelatedSelectionLimit) {
    return HBaseView::GetRelatedSelectionLimit();
  } else {
    jresult = (int) swig_callbackGetRelatedSelectionLimit();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetDetailSelection(bool onoff) {
  bool jonoff  ;
  
  if (!swig_callbackSetDetailSelection) {
    HBaseView::SetDetailSelection(onoff);
    return;
  } else {
    jonoff = onoff;
    swig_callbackSetDetailSelection(jonoff);
  }
}

bool SwigDirector_HBaseView::GetDetailSelectionMode() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetDetailSelectionMode) {
    return HBaseView::GetDetailSelectionMode();
  } else {
    jresult = (bool) swig_callbackGetDetailSelectionMode();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetRespectSelectionCulling(bool onoff) {
  bool jonoff  ;
  
  if (!swig_callbackSetRespectSelectionCulling) {
    HBaseView::SetRespectSelectionCulling(onoff);
    return;
  } else {
    jonoff = onoff;
    swig_callbackSetRespectSelectionCulling(jonoff);
  }
}

bool SwigDirector_HBaseView::GetRespectSelectionCulling() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetRespectSelectionCulling) {
    return HBaseView::GetRespectSelectionCulling();
  } else {
    jresult = (bool) swig_callbackGetRespectSelectionCulling();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SmartFilterCircumcuboid(char const *segment, char const *defaults, HPoint *bottomfrontleft, HPoint *topbackright) {
  char * jsegment = 0 ;
  char * jdefaults = 0 ;
  void * jbottomfrontleft = 0 ;
  void * jtopbackright = 0 ;
  
  if (!swig_callbackSmartFilterCircumcuboid) {
    HBaseView::SmartFilterCircumcuboid(segment,defaults,bottomfrontleft,topbackright);
    return;
  } else {
    jsegment = SWIG_csharp_string_callback((const char *)segment); 
    jdefaults = SWIG_csharp_string_callback((const char *)defaults); 
    jbottomfrontleft = (void *) bottomfrontleft; 
    jtopbackright = (void *) topbackright; 
    swig_callbackSmartFilterCircumcuboid(jsegment, jdefaults, jbottomfrontleft, jtopbackright);
  }
}

int SwigDirector_HBaseView::SetupHandlesEvent(HBaseView *view, HC_KEY key, bool complex) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  bool jcomplex  ;
  
  if (!swig_callbackSetupHandlesEvent) {
    return HBaseView::SetupHandlesEvent(view,key,complex);
  } else {
    jview = (void *) view; 
    jkey = key;
    jcomplex = complex;
    jresult = (int) swig_callbackSetupHandlesEvent(jview, jkey, jcomplex);
    c_result = (int)jresult; 
  }
  return c_result;
}

bool SwigDirector_HBaseView::GetHasObjects() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetHasObjects) {
    return HBaseView::GetHasObjects();
  } else {
    jresult = (bool) swig_callbackGetHasObjects();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetHasObjects(bool hasobjects) {
  bool jhasobjects  ;
  
  if (!swig_callbackSetHasObjects) {
    HBaseView::SetHasObjects(hasobjects);
    return;
  } else {
    jhasobjects = hasobjects;
    swig_callbackSetHasObjects(jhasobjects);
  }
}

void SwigDirector_HBaseView::SetHandleOperator(HBaseOperator *op) {
  void * jop = 0 ;
  
  if (!swig_callbackSetHandleOperator) {
    HBaseView::SetHandleOperator(op);
    return;
  } else {
    jop = (void *) op; 
    swig_callbackSetHandleOperator(jop);
  }
}

HBaseOperator *SwigDirector_HBaseView::GetHandleOperator() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackGetHandleOperator) {
    return HBaseView::GetHandleOperator();
  } else {
    jresult = (void *) swig_callbackGetHandleOperator();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

float SwigDirector_HBaseView::GetDefaultSelectionProximity() {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  
  if (!swig_callbackGetDefaultSelectionProximity) {
    return HBaseView::GetDefaultSelectionProximity();
  } else {
    jresult = (float) swig_callbackGetDefaultSelectionProximity();
    c_result = (float)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetDefaultSelectionProximity(float selectionproximity) {
  float jselectionproximity  ;
  
  if (!swig_callbackSetDefaultSelectionProximity) {
    HBaseView::SetDefaultSelectionProximity(selectionproximity);
    return;
  } else {
    jselectionproximity = selectionproximity;
    swig_callbackSetDefaultSelectionProximity(jselectionproximity);
  }
}

int SwigDirector_HBaseView::ObjectMovedEvent(HBaseView *view, HC_KEY key, HPoint *pos) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jview = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * jpos = 0 ;
  
  if (!swig_callbackObjectMovedEvent) {
    return HBaseView::ObjectMovedEvent(view,key,pos);
  } else {
    jview = (void *) view; 
    jkey = key;
    jpos = (void *) pos; 
    jresult = (int) swig_callbackObjectMovedEvent(jview, jkey, jpos);
    c_result = (int)jresult; 
  }
  return c_result;
}

HSelectionHighlightMode const SwigDirector_HBaseView::GetHighlightMode() {
  HSelectionHighlightMode c_result = SwigValueInit< HSelectionHighlightMode >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetHighlightMode) {
    return HBaseView::GetHighlightMode();
  } else {
    jresult = (int) swig_callbackGetHighlightMode();
    c_result = (HSelectionHighlightMode)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseView::SetHighlightMode(HSelectionHighlightMode m) {
  int jm  ;
  
  if (!swig_callbackSetHighlightMode) {
    HBaseView::SetHighlightMode(m);
    return;
  } else {
    jm = m;
    swig_callbackSetHighlightMode(jm);
  }
}

void SwigDirector_HBaseView::SetReferenceSelection(bool use_ref) {
  bool juse_ref  ;
  
  if (!swig_callbackSetReferenceSelection) {
    HBaseView::SetReferenceSelection(use_ref);
    return;
  } else {
    juse_ref = use_ref;
    swig_callbackSetReferenceSelection(juse_ref);
  }
}

void SwigDirector_HBaseView::SetShadowParams(HShadow *shadowObj) {
  HBaseView::SetShadowParams(shadowObj);
}

void SwigDirector_HBaseView::UpdateInternal(bool antialias, bool force_update) {
  bool jantialias  ;
  bool jforce_update  ;
  
  if (!swig_callbackUpdateInternal__SWIG_0) {
    HBaseView::UpdateInternal(antialias,force_update);
    return;
  } else {
    jantialias = antialias;
    jforce_update = force_update;
    swig_callbackUpdateInternal__SWIG_0(jantialias, jforce_update);
  }
}

void SwigDirector_HBaseView::SetupLights() {
  if (!swig_callbackSetupLights) {
    HBaseView::SetupLights();
    return;
  } else {
    swig_callbackSetupLights();
  }
}

void SwigDirector_HBaseView::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackCameraChangedEvent, SWIG_Callback2_t callbackUpdateEvent__SWIG_0, SWIG_Callback3_t callbackViewDestroyedEvent, SWIG_Callback4_t callbackSmoothTransitionFinishedEvent, SWIG_Callback5_t callbackInit, SWIG_Callback6_t callbackFitWorld__SWIG_0, SWIG_Callback7_t callbackFitWorld__SWIG_1, SWIG_Callback8_t callbackFitWorldExact__SWIG_0, SWIG_Callback9_t callbackFitWorldExact__SWIG_1, SWIG_Callback10_t callbackZoomToExtents, SWIG_Callback11_t callbackZoomToInitialCamera, SWIG_Callback12_t callbackUpdate, SWIG_Callback13_t callbackForceUpdate, SWIG_Callback14_t callbackFileInput__SWIG_0, SWIG_Callback15_t callbackFileInput__SWIG_1, SWIG_Callback16_t callbackFileInput__SWIG_2, SWIG_Callback17_t callbackFileInput__SWIG_3, SWIG_Callback18_t callbackFileOutput__SWIG_0, SWIG_Callback19_t callbackFileOutput__SWIG_1, SWIG_Callback20_t callbackFileOutput__SWIG_2, SWIG_Callback21_t callbackFileOutput__SWIG_3, SWIG_Callback22_t callbackUpdateHighlighting, SWIG_Callback23_t callbackGetModel, SWIG_Callback24_t callbackSetViewMode__SWIG_0, SWIG_Callback25_t callbackSetViewMode__SWIG_1, SWIG_Callback26_t callbackSetViewMode__SWIG_2, SWIG_Callback27_t callbackSetHandedness__SWIG_0, SWIG_Callback28_t callbackSetHandedness__SWIG_1, SWIG_Callback29_t callbackSetHandednessFromMessage, SWIG_Callback30_t callbackSetFontSize__SWIG_0, SWIG_Callback31_t callbackSetFontSize__SWIG_1, SWIG_Callback32_t callbackSetFontSizeFromMessage, SWIG_Callback33_t callbackSetZoomLimit__SWIG_1, SWIG_Callback34_t callbackSetAxisMode, SWIG_Callback35_t callbackOnSetAxisMode, SWIG_Callback36_t callbackAdjustAxisWindow__SWIG_0, SWIG_Callback37_t callbackAdjustAxisWindow__SWIG_1, SWIG_Callback38_t callbackAdjustAxisWindow__SWIG_2, SWIG_Callback39_t callbackSetShadowMode__SWIG_0, SWIG_Callback40_t callbackSetShadowMode__SWIG_1, SWIG_Callback41_t callbackSetReflectionPlane__SWIG_0, SWIG_Callback42_t callbackSetReflectionPlane__SWIG_1, SWIG_Callback43_t callbackSetReflectionPlane__SWIG_2, SWIG_Callback44_t callbackSetReflectionPlane__SWIG_3, SWIG_Callback45_t callbackSetReflectionPlane__SWIG_4, SWIG_Callback46_t callbackSetReflectionPlane__SWIG_5, SWIG_Callback47_t callbackSetReflectionPlane__SWIG_6, SWIG_Callback48_t callbackSetReflectionPlane__SWIG_7, SWIG_Callback49_t callbackDeleteSelectionList__SWIG_0, SWIG_Callback50_t callbackDeleteSelectionList__SWIG_1, SWIG_Callback51_t callbackSetWindowColor__SWIG_0, SWIG_Callback52_t callbackSetWindowColor__SWIG_1, SWIG_Callback53_t callbackSetWindowColor__SWIG_2, SWIG_Callback54_t callbackSetWindowColor__SWIG_3, SWIG_Callback55_t callbackSetWindowColorRange__SWIG_0, SWIG_Callback56_t callbackSetWindowColorRange__SWIG_1, SWIG_Callback57_t callbackSetWindowMaterial__SWIG_0, SWIG_Callback58_t callbackSetWindowMaterial__SWIG_1, SWIG_Callback59_t callbackSetWindowColorFromMessage, SWIG_Callback60_t callbackCameraPositionChanged__SWIG_0, SWIG_Callback61_t callbackCameraPositionChanged__SWIG_1, SWIG_Callback62_t callbackCameraPositionChanged__SWIG_2, SWIG_Callback63_t callbackPrepareForCameraChange, SWIG_Callback64_t callbackSetCamera__SWIG_0, SWIG_Callback65_t callbackSetInitialCamera, SWIG_Callback66_t callbackGetCamera__SWIG_0, SWIG_Callback67_t callbackSetCamera__SWIG_1, SWIG_Callback68_t callbackGetCamera__SWIG_1, SWIG_Callback69_t callbackSetCameraFromMessage, SWIG_Callback70_t callbackInsertHSFData__SWIG_0, SWIG_Callback71_t callbackInsertHSFData__SWIG_1, SWIG_Callback72_t callbackInsertHSFDataFromMessage, SWIG_Callback73_t callbackEmitHSFData, SWIG_Callback74_t callbackSetRenderMode__SWIG_0, SWIG_Callback75_t callbackSetRenderMode__SWIG_1, SWIG_Callback76_t callbackSetRenderModeFromMessage, SWIG_Callback77_t callbackEmitFlushMessage, SWIG_Callback78_t callbackFlushFromMessage, SWIG_Callback79_t callbackFlush__SWIG_0, SWIG_Callback80_t callbackFlush__SWIG_1, SWIG_Callback81_t callbackEmitSelectMessage, SWIG_Callback82_t callbackSelectFromMessage, SWIG_Callback83_t callbackEmitDeSelectAllMessage, SWIG_Callback84_t callbackEmitDeleteSelectionListMessage, SWIG_Callback85_t callbackDeleteSelectionListFromMessage, SWIG_Callback86_t callbackDeSelectAllFromMessage, SWIG_Callback87_t callbackEmitSetModellingMatrixMessage__SWIG_0, SWIG_Callback88_t callbackEmitSetModellingMatrixMessage__SWIG_1, SWIG_Callback89_t callbackEmitSegment__SWIG_0, SWIG_Callback90_t callbackEmitSegment__SWIG_1, SWIG_Callback91_t callbackEmitDeleteByKeyMessage, SWIG_Callback92_t callbackDeleteByKeyFromMessage, SWIG_Callback93_t callbackSetModellingMatrixFromMessage, SWIG_Callback94_t callbackStartSharedKey, SWIG_Callback95_t callbackAnimate__SWIG_0, SWIG_Callback96_t callbackAnimate__SWIG_1, SWIG_Callback97_t callbackAnimate__SWIG_2, SWIG_Callback98_t callbackAnimate__SWIG_3, SWIG_Callback99_t callbackSetGeometryChanged, SWIG_Callback100_t callbackClearGeometryChanged, SWIG_Callback101_t callbackGeometryChanged, SWIG_Callback102_t callbackOnNoButtonDownAndMove, SWIG_Callback103_t callbackOnLButtonDownAndMove, SWIG_Callback104_t callbackOnLButtonDblClk, SWIG_Callback105_t callbackOnRButtonDownAndMove, SWIG_Callback106_t callbackOnMButtonDownAndMove, SWIG_Callback107_t callbackOnLRButtonDownAndMove, SWIG_Callback108_t callbackOnLButtonDown, SWIG_Callback109_t callbackOnMouseMove, SWIG_Callback110_t callbackOnLButtonUp, SWIG_Callback111_t callbackOnMouseWheel, SWIG_Callback112_t callbackComputeReasonableTarget, SWIG_Callback113_t callbackOnKeyDown, SWIG_Callback114_t callbackOnKeyUp, SWIG_Callback115_t callbackSetShadowColor, SWIG_Callback116_t callbackSetShadowLightDirection__SWIG_0, SWIG_Callback117_t callbackSetShadowLightDirection__SWIG_1, SWIG_Callback118_t callbackGetShadowLightDirection__SWIG_0, SWIG_Callback119_t callbackGetShadowLightDirection__SWIG_1, SWIG_Callback120_t callbackSetShadowIgnoresTransparency, SWIG_Callback121_t callbackGetShadowIgnoresTransparency, SWIG_Callback122_t callbackDoDynamicHighlighting, SWIG_Callback123_t callbackSetShadowResolution, SWIG_Callback124_t callbackSetShadowBlurring, SWIG_Callback125_t callbackInternalUpdate, SWIG_Callback126_t callbackSetShadowRegenerationMode, SWIG_Callback127_t callbackSetShadowRegenerationToggle, SWIG_Callback128_t callbackSetCuttingPlaneRegenerationMode, SWIG_Callback129_t callbackSetCameraChanged__SWIG_0, SWIG_Callback130_t callbackSetCameraChanged__SWIG_1, SWIG_Callback131_t callbackGetCameraChanged, SWIG_Callback132_t callbackSetInvertMouseWheelZoom__SWIG_0, SWIG_Callback133_t callbackSetInvertMouseWheelZoom__SWIG_1, SWIG_Callback134_t callbackGetInvertMouseWheelZoom, SWIG_Callback135_t callbackSetAxisManipulateOperator, SWIG_Callback136_t callbackSetVisibilitySelectionMode, SWIG_Callback137_t callbackGetVisibilitySelectionMode, SWIG_Callback138_t callbackSetRelatedSelectionLimit, SWIG_Callback139_t callbackGetRelatedSelectionLimit, SWIG_Callback140_t callbackSetDetailSelection, SWIG_Callback141_t callbackGetDetailSelectionMode, SWIG_Callback142_t callbackSetRespectSelectionCulling, SWIG_Callback143_t callbackGetRespectSelectionCulling, SWIG_Callback144_t callbackSmartFilterCircumcuboid, SWIG_Callback145_t callbackSetupHandlesEvent, SWIG_Callback146_t callbackGetHasObjects, SWIG_Callback147_t callbackSetHasObjects, SWIG_Callback148_t callbackSetHandleOperator, SWIG_Callback149_t callbackGetHandleOperator, SWIG_Callback150_t callbackGetDefaultSelectionProximity, SWIG_Callback151_t callbackSetDefaultSelectionProximity, SWIG_Callback152_t callbackObjectMovedEvent, SWIG_Callback153_t callbackGetHighlightMode, SWIG_Callback154_t callbackSetHighlightMode, SWIG_Callback155_t callbackSetReferenceSelection, SWIG_Callback156_t callbackUpdateInternal__SWIG_0, SWIG_Callback157_t callbackUpdateInternal__SWIG_1, SWIG_Callback158_t callbackUpdateInternal__SWIG_2, SWIG_Callback159_t callbackSetupLights) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackCameraChangedEvent = callbackCameraChangedEvent;
  swig_callbackUpdateEvent__SWIG_0 = callbackUpdateEvent__SWIG_0;
  swig_callbackViewDestroyedEvent = callbackViewDestroyedEvent;
  swig_callbackSmoothTransitionFinishedEvent = callbackSmoothTransitionFinishedEvent;
  swig_callbackInit = callbackInit;
  swig_callbackFitWorld__SWIG_0 = callbackFitWorld__SWIG_0;
  swig_callbackFitWorld__SWIG_1 = callbackFitWorld__SWIG_1;
  swig_callbackFitWorldExact__SWIG_0 = callbackFitWorldExact__SWIG_0;
  swig_callbackFitWorldExact__SWIG_1 = callbackFitWorldExact__SWIG_1;
  swig_callbackZoomToExtents = callbackZoomToExtents;
  swig_callbackZoomToInitialCamera = callbackZoomToInitialCamera;
  swig_callbackUpdate = callbackUpdate;
  swig_callbackForceUpdate = callbackForceUpdate;
  swig_callbackFileInput__SWIG_0 = callbackFileInput__SWIG_0;
  swig_callbackFileInput__SWIG_1 = callbackFileInput__SWIG_1;
  swig_callbackFileInput__SWIG_2 = callbackFileInput__SWIG_2;
  swig_callbackFileInput__SWIG_3 = callbackFileInput__SWIG_3;
  swig_callbackFileOutput__SWIG_0 = callbackFileOutput__SWIG_0;
  swig_callbackFileOutput__SWIG_1 = callbackFileOutput__SWIG_1;
  swig_callbackFileOutput__SWIG_2 = callbackFileOutput__SWIG_2;
  swig_callbackFileOutput__SWIG_3 = callbackFileOutput__SWIG_3;
  swig_callbackUpdateHighlighting = callbackUpdateHighlighting;
  swig_callbackGetModel = callbackGetModel;
  swig_callbackSetViewMode__SWIG_0 = callbackSetViewMode__SWIG_0;
  swig_callbackSetViewMode__SWIG_1 = callbackSetViewMode__SWIG_1;
  swig_callbackSetViewMode__SWIG_2 = callbackSetViewMode__SWIG_2;
  swig_callbackSetHandedness__SWIG_0 = callbackSetHandedness__SWIG_0;
  swig_callbackSetHandedness__SWIG_1 = callbackSetHandedness__SWIG_1;
  swig_callbackSetHandednessFromMessage = callbackSetHandednessFromMessage;
  swig_callbackSetFontSize__SWIG_0 = callbackSetFontSize__SWIG_0;
  swig_callbackSetFontSize__SWIG_1 = callbackSetFontSize__SWIG_1;
  swig_callbackSetFontSizeFromMessage = callbackSetFontSizeFromMessage;
  swig_callbackSetZoomLimit__SWIG_1 = callbackSetZoomLimit__SWIG_1;
  swig_callbackSetAxisMode = callbackSetAxisMode;
  swig_callbackOnSetAxisMode = callbackOnSetAxisMode;
  swig_callbackAdjustAxisWindow__SWIG_0 = callbackAdjustAxisWindow__SWIG_0;
  swig_callbackAdjustAxisWindow__SWIG_1 = callbackAdjustAxisWindow__SWIG_1;
  swig_callbackAdjustAxisWindow__SWIG_2 = callbackAdjustAxisWindow__SWIG_2;
  swig_callbackSetShadowMode__SWIG_0 = callbackSetShadowMode__SWIG_0;
  swig_callbackSetShadowMode__SWIG_1 = callbackSetShadowMode__SWIG_1;
  swig_callbackSetReflectionPlane__SWIG_0 = callbackSetReflectionPlane__SWIG_0;
  swig_callbackSetReflectionPlane__SWIG_1 = callbackSetReflectionPlane__SWIG_1;
  swig_callbackSetReflectionPlane__SWIG_2 = callbackSetReflectionPlane__SWIG_2;
  swig_callbackSetReflectionPlane__SWIG_3 = callbackSetReflectionPlane__SWIG_3;
  swig_callbackSetReflectionPlane__SWIG_4 = callbackSetReflectionPlane__SWIG_4;
  swig_callbackSetReflectionPlane__SWIG_5 = callbackSetReflectionPlane__SWIG_5;
  swig_callbackSetReflectionPlane__SWIG_6 = callbackSetReflectionPlane__SWIG_6;
  swig_callbackSetReflectionPlane__SWIG_7 = callbackSetReflectionPlane__SWIG_7;
  swig_callbackDeleteSelectionList__SWIG_0 = callbackDeleteSelectionList__SWIG_0;
  swig_callbackDeleteSelectionList__SWIG_1 = callbackDeleteSelectionList__SWIG_1;
  swig_callbackSetWindowColor__SWIG_0 = callbackSetWindowColor__SWIG_0;
  swig_callbackSetWindowColor__SWIG_1 = callbackSetWindowColor__SWIG_1;
  swig_callbackSetWindowColor__SWIG_2 = callbackSetWindowColor__SWIG_2;
  swig_callbackSetWindowColor__SWIG_3 = callbackSetWindowColor__SWIG_3;
  swig_callbackSetWindowColorRange__SWIG_0 = callbackSetWindowColorRange__SWIG_0;
  swig_callbackSetWindowColorRange__SWIG_1 = callbackSetWindowColorRange__SWIG_1;
  swig_callbackSetWindowMaterial__SWIG_0 = callbackSetWindowMaterial__SWIG_0;
  swig_callbackSetWindowMaterial__SWIG_1 = callbackSetWindowMaterial__SWIG_1;
  swig_callbackSetWindowColorFromMessage = callbackSetWindowColorFromMessage;
  swig_callbackCameraPositionChanged__SWIG_0 = callbackCameraPositionChanged__SWIG_0;
  swig_callbackCameraPositionChanged__SWIG_1 = callbackCameraPositionChanged__SWIG_1;
  swig_callbackCameraPositionChanged__SWIG_2 = callbackCameraPositionChanged__SWIG_2;
  swig_callbackPrepareForCameraChange = callbackPrepareForCameraChange;
  swig_callbackSetCamera__SWIG_0 = callbackSetCamera__SWIG_0;
  swig_callbackSetInitialCamera = callbackSetInitialCamera;
  swig_callbackGetCamera__SWIG_0 = callbackGetCamera__SWIG_0;
  swig_callbackSetCamera__SWIG_1 = callbackSetCamera__SWIG_1;
  swig_callbackGetCamera__SWIG_1 = callbackGetCamera__SWIG_1;
  swig_callbackSetCameraFromMessage = callbackSetCameraFromMessage;
  swig_callbackInsertHSFData__SWIG_0 = callbackInsertHSFData__SWIG_0;
  swig_callbackInsertHSFData__SWIG_1 = callbackInsertHSFData__SWIG_1;
  swig_callbackInsertHSFDataFromMessage = callbackInsertHSFDataFromMessage;
  swig_callbackEmitHSFData = callbackEmitHSFData;
  swig_callbackSetRenderMode__SWIG_0 = callbackSetRenderMode__SWIG_0;
  swig_callbackSetRenderMode__SWIG_1 = callbackSetRenderMode__SWIG_1;
  swig_callbackSetRenderModeFromMessage = callbackSetRenderModeFromMessage;
  swig_callbackEmitFlushMessage = callbackEmitFlushMessage;
  swig_callbackFlushFromMessage = callbackFlushFromMessage;
  swig_callbackFlush__SWIG_0 = callbackFlush__SWIG_0;
  swig_callbackFlush__SWIG_1 = callbackFlush__SWIG_1;
  swig_callbackEmitSelectMessage = callbackEmitSelectMessage;
  swig_callbackSelectFromMessage = callbackSelectFromMessage;
  swig_callbackEmitDeSelectAllMessage = callbackEmitDeSelectAllMessage;
  swig_callbackEmitDeleteSelectionListMessage = callbackEmitDeleteSelectionListMessage;
  swig_callbackDeleteSelectionListFromMessage = callbackDeleteSelectionListFromMessage;
  swig_callbackDeSelectAllFromMessage = callbackDeSelectAllFromMessage;
  swig_callbackEmitSetModellingMatrixMessage__SWIG_0 = callbackEmitSetModellingMatrixMessage__SWIG_0;
  swig_callbackEmitSetModellingMatrixMessage__SWIG_1 = callbackEmitSetModellingMatrixMessage__SWIG_1;
  swig_callbackEmitSegment__SWIG_0 = callbackEmitSegment__SWIG_0;
  swig_callbackEmitSegment__SWIG_1 = callbackEmitSegment__SWIG_1;
  swig_callbackEmitDeleteByKeyMessage = callbackEmitDeleteByKeyMessage;
  swig_callbackDeleteByKeyFromMessage = callbackDeleteByKeyFromMessage;
  swig_callbackSetModellingMatrixFromMessage = callbackSetModellingMatrixFromMessage;
  swig_callbackStartSharedKey = callbackStartSharedKey;
  swig_callbackAnimate__SWIG_0 = callbackAnimate__SWIG_0;
  swig_callbackAnimate__SWIG_1 = callbackAnimate__SWIG_1;
  swig_callbackAnimate__SWIG_2 = callbackAnimate__SWIG_2;
  swig_callbackAnimate__SWIG_3 = callbackAnimate__SWIG_3;
  swig_callbackSetGeometryChanged = callbackSetGeometryChanged;
  swig_callbackClearGeometryChanged = callbackClearGeometryChanged;
  swig_callbackGeometryChanged = callbackGeometryChanged;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackComputeReasonableTarget = callbackComputeReasonableTarget;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackSetShadowColor = callbackSetShadowColor;
  swig_callbackSetShadowLightDirection__SWIG_0 = callbackSetShadowLightDirection__SWIG_0;
  swig_callbackSetShadowLightDirection__SWIG_1 = callbackSetShadowLightDirection__SWIG_1;
  swig_callbackGetShadowLightDirection__SWIG_0 = callbackGetShadowLightDirection__SWIG_0;
  swig_callbackGetShadowLightDirection__SWIG_1 = callbackGetShadowLightDirection__SWIG_1;
  swig_callbackSetShadowIgnoresTransparency = callbackSetShadowIgnoresTransparency;
  swig_callbackGetShadowIgnoresTransparency = callbackGetShadowIgnoresTransparency;
  swig_callbackDoDynamicHighlighting = callbackDoDynamicHighlighting;
  swig_callbackSetShadowResolution = callbackSetShadowResolution;
  swig_callbackSetShadowBlurring = callbackSetShadowBlurring;
  swig_callbackInternalUpdate = callbackInternalUpdate;
  swig_callbackSetShadowRegenerationMode = callbackSetShadowRegenerationMode;
  swig_callbackSetShadowRegenerationToggle = callbackSetShadowRegenerationToggle;
  swig_callbackSetCuttingPlaneRegenerationMode = callbackSetCuttingPlaneRegenerationMode;
  swig_callbackSetCameraChanged__SWIG_0 = callbackSetCameraChanged__SWIG_0;
  swig_callbackSetCameraChanged__SWIG_1 = callbackSetCameraChanged__SWIG_1;
  swig_callbackGetCameraChanged = callbackGetCameraChanged;
  swig_callbackSetInvertMouseWheelZoom__SWIG_0 = callbackSetInvertMouseWheelZoom__SWIG_0;
  swig_callbackSetInvertMouseWheelZoom__SWIG_1 = callbackSetInvertMouseWheelZoom__SWIG_1;
  swig_callbackGetInvertMouseWheelZoom = callbackGetInvertMouseWheelZoom;
  swig_callbackSetAxisManipulateOperator = callbackSetAxisManipulateOperator;
  swig_callbackSetVisibilitySelectionMode = callbackSetVisibilitySelectionMode;
  swig_callbackGetVisibilitySelectionMode = callbackGetVisibilitySelectionMode;
  swig_callbackSetRelatedSelectionLimit = callbackSetRelatedSelectionLimit;
  swig_callbackGetRelatedSelectionLimit = callbackGetRelatedSelectionLimit;
  swig_callbackSetDetailSelection = callbackSetDetailSelection;
  swig_callbackGetDetailSelectionMode = callbackGetDetailSelectionMode;
  swig_callbackSetRespectSelectionCulling = callbackSetRespectSelectionCulling;
  swig_callbackGetRespectSelectionCulling = callbackGetRespectSelectionCulling;
  swig_callbackSmartFilterCircumcuboid = callbackSmartFilterCircumcuboid;
  swig_callbackSetupHandlesEvent = callbackSetupHandlesEvent;
  swig_callbackGetHasObjects = callbackGetHasObjects;
  swig_callbackSetHasObjects = callbackSetHasObjects;
  swig_callbackSetHandleOperator = callbackSetHandleOperator;
  swig_callbackGetHandleOperator = callbackGetHandleOperator;
  swig_callbackGetDefaultSelectionProximity = callbackGetDefaultSelectionProximity;
  swig_callbackSetDefaultSelectionProximity = callbackSetDefaultSelectionProximity;
  swig_callbackObjectMovedEvent = callbackObjectMovedEvent;
  swig_callbackGetHighlightMode = callbackGetHighlightMode;
  swig_callbackSetHighlightMode = callbackSetHighlightMode;
  swig_callbackSetReferenceSelection = callbackSetReferenceSelection;
  swig_callbackUpdateInternal__SWIG_0 = callbackUpdateInternal__SWIG_0;
  swig_callbackUpdateInternal__SWIG_1 = callbackUpdateInternal__SWIG_1;
  swig_callbackUpdateInternal__SWIG_2 = callbackUpdateInternal__SWIG_2;
  swig_callbackSetupLights = callbackSetupLights;
}

void SwigDirector_HBaseView::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackCameraChangedEvent = 0;
  swig_callbackUpdateEvent__SWIG_0 = 0;
  swig_callbackViewDestroyedEvent = 0;
  swig_callbackSmoothTransitionFinishedEvent = 0;
  swig_callbackInit = 0;
  swig_callbackFitWorld__SWIG_0 = 0;
  swig_callbackFitWorld__SWIG_1 = 0;
  swig_callbackFitWorldExact__SWIG_0 = 0;
  swig_callbackFitWorldExact__SWIG_1 = 0;
  swig_callbackZoomToExtents = 0;
  swig_callbackZoomToInitialCamera = 0;
  swig_callbackUpdate = 0;
  swig_callbackForceUpdate = 0;
  swig_callbackFileInput__SWIG_0 = 0;
  swig_callbackFileInput__SWIG_1 = 0;
  swig_callbackFileInput__SWIG_2 = 0;
  swig_callbackFileInput__SWIG_3 = 0;
  swig_callbackFileOutput__SWIG_0 = 0;
  swig_callbackFileOutput__SWIG_1 = 0;
  swig_callbackFileOutput__SWIG_2 = 0;
  swig_callbackFileOutput__SWIG_3 = 0;
  swig_callbackUpdateHighlighting = 0;
  swig_callbackGetModel = 0;
  swig_callbackSetViewMode__SWIG_0 = 0;
  swig_callbackSetViewMode__SWIG_1 = 0;
  swig_callbackSetViewMode__SWIG_2 = 0;
  swig_callbackSetHandedness__SWIG_0 = 0;
  swig_callbackSetHandedness__SWIG_1 = 0;
  swig_callbackSetHandednessFromMessage = 0;
  swig_callbackSetFontSize__SWIG_0 = 0;
  swig_callbackSetFontSize__SWIG_1 = 0;
  swig_callbackSetFontSizeFromMessage = 0;
  swig_callbackSetZoomLimit__SWIG_1 = 0;
  swig_callbackSetAxisMode = 0;
  swig_callbackOnSetAxisMode = 0;
  swig_callbackAdjustAxisWindow__SWIG_0 = 0;
  swig_callbackAdjustAxisWindow__SWIG_1 = 0;
  swig_callbackAdjustAxisWindow__SWIG_2 = 0;
  swig_callbackSetShadowMode__SWIG_0 = 0;
  swig_callbackSetShadowMode__SWIG_1 = 0;
  swig_callbackSetReflectionPlane__SWIG_0 = 0;
  swig_callbackSetReflectionPlane__SWIG_1 = 0;
  swig_callbackSetReflectionPlane__SWIG_2 = 0;
  swig_callbackSetReflectionPlane__SWIG_3 = 0;
  swig_callbackSetReflectionPlane__SWIG_4 = 0;
  swig_callbackSetReflectionPlane__SWIG_5 = 0;
  swig_callbackSetReflectionPlane__SWIG_6 = 0;
  swig_callbackSetReflectionPlane__SWIG_7 = 0;
  swig_callbackDeleteSelectionList__SWIG_0 = 0;
  swig_callbackDeleteSelectionList__SWIG_1 = 0;
  swig_callbackSetWindowColor__SWIG_0 = 0;
  swig_callbackSetWindowColor__SWIG_1 = 0;
  swig_callbackSetWindowColor__SWIG_2 = 0;
  swig_callbackSetWindowColor__SWIG_3 = 0;
  swig_callbackSetWindowColorRange__SWIG_0 = 0;
  swig_callbackSetWindowColorRange__SWIG_1 = 0;
  swig_callbackSetWindowMaterial__SWIG_0 = 0;
  swig_callbackSetWindowMaterial__SWIG_1 = 0;
  swig_callbackSetWindowColorFromMessage = 0;
  swig_callbackCameraPositionChanged__SWIG_0 = 0;
  swig_callbackCameraPositionChanged__SWIG_1 = 0;
  swig_callbackCameraPositionChanged__SWIG_2 = 0;
  swig_callbackPrepareForCameraChange = 0;
  swig_callbackSetCamera__SWIG_0 = 0;
  swig_callbackSetInitialCamera = 0;
  swig_callbackGetCamera__SWIG_0 = 0;
  swig_callbackSetCamera__SWIG_1 = 0;
  swig_callbackGetCamera__SWIG_1 = 0;
  swig_callbackSetCameraFromMessage = 0;
  swig_callbackInsertHSFData__SWIG_0 = 0;
  swig_callbackInsertHSFData__SWIG_1 = 0;
  swig_callbackInsertHSFDataFromMessage = 0;
  swig_callbackEmitHSFData = 0;
  swig_callbackSetRenderMode__SWIG_0 = 0;
  swig_callbackSetRenderMode__SWIG_1 = 0;
  swig_callbackSetRenderModeFromMessage = 0;
  swig_callbackEmitFlushMessage = 0;
  swig_callbackFlushFromMessage = 0;
  swig_callbackFlush__SWIG_0 = 0;
  swig_callbackFlush__SWIG_1 = 0;
  swig_callbackEmitSelectMessage = 0;
  swig_callbackSelectFromMessage = 0;
  swig_callbackEmitDeSelectAllMessage = 0;
  swig_callbackEmitDeleteSelectionListMessage = 0;
  swig_callbackDeleteSelectionListFromMessage = 0;
  swig_callbackDeSelectAllFromMessage = 0;
  swig_callbackEmitSetModellingMatrixMessage__SWIG_0 = 0;
  swig_callbackEmitSetModellingMatrixMessage__SWIG_1 = 0;
  swig_callbackEmitSegment__SWIG_0 = 0;
  swig_callbackEmitSegment__SWIG_1 = 0;
  swig_callbackEmitDeleteByKeyMessage = 0;
  swig_callbackDeleteByKeyFromMessage = 0;
  swig_callbackSetModellingMatrixFromMessage = 0;
  swig_callbackStartSharedKey = 0;
  swig_callbackAnimate__SWIG_0 = 0;
  swig_callbackAnimate__SWIG_1 = 0;
  swig_callbackAnimate__SWIG_2 = 0;
  swig_callbackAnimate__SWIG_3 = 0;
  swig_callbackSetGeometryChanged = 0;
  swig_callbackClearGeometryChanged = 0;
  swig_callbackGeometryChanged = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackComputeReasonableTarget = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackSetShadowColor = 0;
  swig_callbackSetShadowLightDirection__SWIG_0 = 0;
  swig_callbackSetShadowLightDirection__SWIG_1 = 0;
  swig_callbackGetShadowLightDirection__SWIG_0 = 0;
  swig_callbackGetShadowLightDirection__SWIG_1 = 0;
  swig_callbackSetShadowIgnoresTransparency = 0;
  swig_callbackGetShadowIgnoresTransparency = 0;
  swig_callbackDoDynamicHighlighting = 0;
  swig_callbackSetShadowResolution = 0;
  swig_callbackSetShadowBlurring = 0;
  swig_callbackInternalUpdate = 0;
  swig_callbackSetShadowRegenerationMode = 0;
  swig_callbackSetShadowRegenerationToggle = 0;
  swig_callbackSetCuttingPlaneRegenerationMode = 0;
  swig_callbackSetCameraChanged__SWIG_0 = 0;
  swig_callbackSetCameraChanged__SWIG_1 = 0;
  swig_callbackGetCameraChanged = 0;
  swig_callbackSetInvertMouseWheelZoom__SWIG_0 = 0;
  swig_callbackSetInvertMouseWheelZoom__SWIG_1 = 0;
  swig_callbackGetInvertMouseWheelZoom = 0;
  swig_callbackSetAxisManipulateOperator = 0;
  swig_callbackSetVisibilitySelectionMode = 0;
  swig_callbackGetVisibilitySelectionMode = 0;
  swig_callbackSetRelatedSelectionLimit = 0;
  swig_callbackGetRelatedSelectionLimit = 0;
  swig_callbackSetDetailSelection = 0;
  swig_callbackGetDetailSelectionMode = 0;
  swig_callbackSetRespectSelectionCulling = 0;
  swig_callbackGetRespectSelectionCulling = 0;
  swig_callbackSmartFilterCircumcuboid = 0;
  swig_callbackSetupHandlesEvent = 0;
  swig_callbackGetHasObjects = 0;
  swig_callbackSetHasObjects = 0;
  swig_callbackSetHandleOperator = 0;
  swig_callbackGetHandleOperator = 0;
  swig_callbackGetDefaultSelectionProximity = 0;
  swig_callbackSetDefaultSelectionProximity = 0;
  swig_callbackObjectMovedEvent = 0;
  swig_callbackGetHighlightMode = 0;
  swig_callbackSetHighlightMode = 0;
  swig_callbackSetReferenceSelection = 0;
  swig_callbackUpdateInternal__SWIG_0 = 0;
  swig_callbackUpdateInternal__SWIG_1 = 0;
  swig_callbackUpdateInternal__SWIG_2 = 0;
  swig_callbackSetupLights = 0;
}

SwigDirector_HDB::SwigDirector_HDB() : HDB(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HDB::~SwigDirector_HDB() {
  
}


void SwigDirector_HDB::Init() {
  if (!swig_callbackInit) {
    HDB::Init();
    return;
  } else {
    swig_callbackInit();
  }
}

void SwigDirector_HDB::swig_connect_director(SWIG_Callback0_t callbackInit) {
  swig_callbackInit = callbackInit;
}

void SwigDirector_HDB::swig_init_callbacks() {
  swig_callbackInit = 0;
}

SwigDirector_HBaseOperator::SwigDirector_HBaseOperator(HBaseView *view, int DoRepeat, int DoCapture) : HBaseOperator(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HBaseOperator::~SwigDirector_HBaseOperator() {
  
}


HEventListener *SwigDirector_HBaseOperator::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HBaseOperator::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HBaseOperator::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HBaseOperator::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HBaseOperator::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HBaseOperator::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HBaseOperator::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HBaseOperator::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HBaseOperator::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HBaseOperator::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HBaseOperator::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HIONoticeCallback::SwigDirector_HIONoticeCallback() : HIONoticeCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HIONoticeCallback::~SwigDirector_HIONoticeCallback() {
  
}


void SwigDirector_HIONoticeCallback::Notice(char const *notice) {
  char * jnotice = 0 ;
  
  if (!swig_callbackNotice__SWIG_0) {
    throw Swig::DirectorPureVirtualException("HIONoticeCallback::Notice");
  } else {
    jnotice = SWIG_csharp_string_callback((const char *)notice); 
    swig_callbackNotice__SWIG_0(jnotice);
  }
}

void SwigDirector_HIONoticeCallback::Notice(wchar_t const *notice) {
  wchar_t * jnotice = 0 ;
  
  if (!swig_callbackNotice__SWIG_1) {
    HIONoticeCallback::Notice(notice);
    return;
  } else {
    jnotice = (wchar_t *)notice;
    swig_callbackNotice__SWIG_1(jnotice);
  }
}

void SwigDirector_HIONoticeCallback::swig_connect_director(SWIG_Callback0_t callbackNotice__SWIG_0, SWIG_Callback1_t callbackNotice__SWIG_1) {
  swig_callbackNotice__SWIG_0 = callbackNotice__SWIG_0;
  swig_callbackNotice__SWIG_1 = callbackNotice__SWIG_1;
}

void SwigDirector_HIONoticeCallback::swig_init_callbacks() {
  swig_callbackNotice__SWIG_0 = 0;
  swig_callbackNotice__SWIG_1 = 0;
}

SwigDirector_HIOPercentNoticeCallback::SwigDirector_HIOPercentNoticeCallback() : HIOPercentNoticeCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HIOPercentNoticeCallback::~SwigDirector_HIOPercentNoticeCallback() {
  
}


void SwigDirector_HIOPercentNoticeCallback::Notice(float notice) {
  float jnotice  ;
  
  if (!swig_callbackNotice) {
    throw Swig::DirectorPureVirtualException("HIOPercentNoticeCallback::Notice");
  } else {
    jnotice = notice;
    swig_callbackNotice(jnotice);
  }
}

void SwigDirector_HIOPercentNoticeCallback::swig_connect_director(SWIG_Callback0_t callbackNotice) {
  swig_callbackNotice = callbackNotice;
}

void SwigDirector_HIOPercentNoticeCallback::swig_init_callbacks() {
  swig_callbackNotice = 0;
}

SwigDirector_HInputHandler::SwigDirector_HInputHandler() : HInputHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HInputHandler::~SwigDirector_HInputHandler() {
  
}


char const *SwigDirector_HInputHandler::GetInputName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetInputName) {
    throw Swig::DirectorPureVirtualException("HInputHandler::GetInputName");
  } else {
    jresult = (char *) swig_callbackGetInputName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HInputHandler::RegisterInputHandlerTypes() {
  if (!swig_callbackRegisterInputHandlerTypes) {
    throw Swig::DirectorPureVirtualException("HInputHandler::RegisterInputHandlerTypes");
  } else {
    swig_callbackRegisterInputHandlerTypes();
  }
}

HInputHandlerStyle SwigDirector_HInputHandler::GetInputStyle() {
  HInputHandlerStyle c_result = SwigValueInit< HInputHandlerStyle >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetInputStyle) {
    throw Swig::DirectorPureVirtualException("HInputHandler::GetInputStyle");
  } else {
    jresult = (int) swig_callbackGetInputStyle();
    c_result = (HInputHandlerStyle)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HInputHandler::FileInputByKey(char const *filename, HC_KEY key, HInputHandlerOptions *options) {
  return HInputHandler::FileInputByKey(filename,key,options);
}

HFileIOResult SwigDirector_HInputHandler::FileInputByKey(wchar_t const *filename, HC_KEY key, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jfilename = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileInputByKey) {
    return HInputHandler::FileInputByKey(filename,key,options);
  } else {
    jfilename = (wchar_t *)filename;
    jkey = key;
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileInputByKey(jfilename, jkey, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HInputHandler::FileInputByKey(unsigned short const *filename, HC_KEY key, HInputHandlerOptions *options) {
  return HInputHandler::FileInputByKey(filename,key,options);
}

HFileIOResult SwigDirector_HInputHandler::FileInputToImageKey(char const *filename, HC_KEY *image_key, HC_KEY segment_key, HInputHandlerOptions *options) {
  return HInputHandler::FileInputToImageKey(filename,image_key,segment_key,options);
}

HFileIOResult SwigDirector_HInputHandler::FileInputToImageKey(wchar_t const *filename, HC_KEY *image_key, HC_KEY segment_key, HInputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jfilename = 0 ;
  MVO_POINTER_SIZED_INT * jimage_key = 0 ;
  MVO_POINTER_SIZED_INT jsegment_key  ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileInputToImageKey) {
    return HInputHandler::FileInputToImageKey(filename,image_key,segment_key,options);
  } else {
    jfilename = (wchar_t *)filename;
    jimage_key = (HC_KEY*)image_key;
    jsegment_key = segment_key;
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileInputToImageKey(jfilename, jimage_key, jsegment_key, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HInputHandler::FileInputToImageKey(unsigned short const *filename, HC_KEY *image_key, HC_KEY segment_key, HInputHandlerOptions *options) {
  return HInputHandler::FileInputToImageKey(filename,image_key,segment_key,options);
}

char const *SwigDirector_HInputHandler::GetInputTypesString() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetInputTypesString) {
    throw Swig::DirectorPureVirtualException("HInputHandler::GetInputTypesString");
  } else {
    jresult = (char *) swig_callbackGetInputTypesString();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HInputHandler::swig_connect_director(SWIG_Callback0_t callbackGetInputName, SWIG_Callback1_t callbackRegisterInputHandlerTypes, SWIG_Callback2_t callbackGetInputStyle, SWIG_Callback3_t callbackFileInputByKey, SWIG_Callback4_t callbackFileInputToImageKey, SWIG_Callback5_t callbackGetInputTypesString) {
  swig_callbackGetInputName = callbackGetInputName;
  swig_callbackRegisterInputHandlerTypes = callbackRegisterInputHandlerTypes;
  swig_callbackGetInputStyle = callbackGetInputStyle;
  swig_callbackFileInputByKey = callbackFileInputByKey;
  swig_callbackFileInputToImageKey = callbackFileInputToImageKey;
  swig_callbackGetInputTypesString = callbackGetInputTypesString;
}

void SwigDirector_HInputHandler::swig_init_callbacks() {
  swig_callbackGetInputName = 0;
  swig_callbackRegisterInputHandlerTypes = 0;
  swig_callbackGetInputStyle = 0;
  swig_callbackFileInputByKey = 0;
  swig_callbackFileInputToImageKey = 0;
  swig_callbackGetInputTypesString = 0;
}

SwigDirector_HOutputHandler::SwigDirector_HOutputHandler() : HOutputHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOutputHandler::~SwigDirector_HOutputHandler() {
  
}


char const *SwigDirector_HOutputHandler::GetOutputName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetOutputName) {
    throw Swig::DirectorPureVirtualException("HOutputHandler::GetOutputName");
  } else {
    jresult = (char *) swig_callbackGetOutputName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HOutputHandler::RegisterOutputHandlerTypes() {
  if (!swig_callbackRegisterOutputHandlerTypes) {
    throw Swig::DirectorPureVirtualException("HOutputHandler::RegisterOutputHandlerTypes");
  } else {
    swig_callbackRegisterOutputHandlerTypes();
  }
}

HFileIOResult SwigDirector_HOutputHandler::FileOutputByKey(char const *filename, HC_KEY key, HOutputHandlerOptions *options) {
  return HOutputHandler::FileOutputByKey(filename,key,options);
}

HFileIOResult SwigDirector_HOutputHandler::FileOutputByKey(wchar_t const *filename, HC_KEY key, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jfilename = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileOutputByKey) {
    return HOutputHandler::FileOutputByKey(filename,key,options);
  } else {
    jfilename = (wchar_t *)filename;
    jkey = key;
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileOutputByKey(jfilename, jkey, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

HFileIOResult SwigDirector_HOutputHandler::FileOutputByKey(unsigned short const *filename, HC_KEY key, HOutputHandlerOptions *options) {
  return HOutputHandler::FileOutputByKey(filename,key,options);
}

HFileIOResult SwigDirector_HOutputHandler::FileOutputFromImageKey(char const *filename, HC_KEY image_key, HOutputHandlerOptions *options) {
  return HOutputHandler::FileOutputFromImageKey(filename,image_key,options);
}

HFileIOResult SwigDirector_HOutputHandler::FileOutputFromImageKey(wchar_t const *filename, HC_KEY image_key, HOutputHandlerOptions *options) {
  HFileIOResult c_result = SwigValueInit< HFileIOResult >() ;
  int jresult = 0 ;
  wchar_t * jfilename = 0 ;
  MVO_POINTER_SIZED_INT jimage_key  ;
  void * joptions = 0 ;
  
  if (!swig_callbackFileOutputFromImageKey) {
    return HOutputHandler::FileOutputFromImageKey(filename,image_key,options);
  } else {
    jfilename = (wchar_t *)filename;
    jimage_key = image_key;
    joptions = (void *) options; 
    jresult = (int) swig_callbackFileOutputFromImageKey(jfilename, jimage_key, joptions);
    c_result = (HFileIOResult)jresult; 
  }
  return c_result;
}

char const *SwigDirector_HOutputHandler::GetOutputTypesString() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetOutputTypesString) {
    throw Swig::DirectorPureVirtualException("HOutputHandler::GetOutputTypesString");
  } else {
    jresult = (char *) swig_callbackGetOutputTypesString();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

HOutputHandlerStyle SwigDirector_HOutputHandler::GetOutputStyle() {
  HOutputHandlerStyle c_result = SwigValueInit< HOutputHandlerStyle >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetOutputStyle) {
    throw Swig::DirectorPureVirtualException("HOutputHandler::GetOutputStyle");
  } else {
    jresult = (int) swig_callbackGetOutputStyle();
    c_result = (HOutputHandlerStyle)jresult; 
  }
  return c_result;
}

char const *SwigDirector_HOutputHandler::GetOutputDefaultHSRA() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetOutputDefaultHSRA) {
    return HOutputHandler::GetOutputDefaultHSRA();
  } else {
    jresult = (char *) swig_callbackGetOutputDefaultHSRA();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HOutputHandler::swig_connect_director(SWIG_Callback0_t callbackGetOutputName, SWIG_Callback1_t callbackRegisterOutputHandlerTypes, SWIG_Callback2_t callbackFileOutputByKey, SWIG_Callback3_t callbackFileOutputFromImageKey, SWIG_Callback4_t callbackGetOutputTypesString, SWIG_Callback5_t callbackGetOutputStyle, SWIG_Callback6_t callbackGetOutputDefaultHSRA) {
  swig_callbackGetOutputName = callbackGetOutputName;
  swig_callbackRegisterOutputHandlerTypes = callbackRegisterOutputHandlerTypes;
  swig_callbackFileOutputByKey = callbackFileOutputByKey;
  swig_callbackFileOutputFromImageKey = callbackFileOutputFromImageKey;
  swig_callbackGetOutputTypesString = callbackGetOutputTypesString;
  swig_callbackGetOutputStyle = callbackGetOutputStyle;
  swig_callbackGetOutputDefaultHSRA = callbackGetOutputDefaultHSRA;
}

void SwigDirector_HOutputHandler::swig_init_callbacks() {
  swig_callbackGetOutputName = 0;
  swig_callbackRegisterOutputHandlerTypes = 0;
  swig_callbackFileOutputByKey = 0;
  swig_callbackFileOutputFromImageKey = 0;
  swig_callbackGetOutputTypesString = 0;
  swig_callbackGetOutputStyle = 0;
  swig_callbackGetOutputDefaultHSRA = 0;
}

SwigDirector_HOpObjectTranslate::SwigDirector_HOpObjectTranslate(HBaseView *view, int DoRepeat, int DoCapture) : HOpObjectTranslate(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpObjectTranslate::~SwigDirector_HOpObjectTranslate() {
  
}


HEventListener *SwigDirector_HOpObjectTranslate::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpObjectTranslate::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpObjectTranslate::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpObjectTranslate::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpObjectTranslate::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpObjectTranslate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpObjectTranslate::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpObjectTranslate::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpObjectTranslate::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpObjectTranslate::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpObjectTranslate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectTranslate::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpObjectTranslate::UpdateKeyList(void *data) {
  HOpObjectTranslate::UpdateKeyList(data);
}

void SwigDirector_HOpObjectTranslate::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpObjectTranslate::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructCircle::SwigDirector_HOpConstructCircle(HBaseView *view, int DoRepeat, int DoCapture, bool UseCenterMarker) : HOpConstructCircle(view, DoRepeat, DoCapture, UseCenterMarker), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructCircle::~SwigDirector_HOpConstructCircle() {
  
}


HEventListener *SwigDirector_HOpConstructCircle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCircle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCircle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructCircle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructCircle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructCircle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructCircle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructCircle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructCircle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCircle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCircle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructCircle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructCircle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructCone::SwigDirector_HOpConstructCone(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructCone(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructCone::~SwigDirector_HOpConstructCone() {
  
}


HEventListener *SwigDirector_HOpConstructCone::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCone::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCone::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructCone::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructCone::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructCone::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructCone::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructCone::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructCone::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCone::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCone::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCone::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructCone::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructCone::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructCuboid::SwigDirector_HOpConstructCuboid(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructCuboid(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructCuboid::~SwigDirector_HOpConstructCuboid() {
  
}


HEventListener *SwigDirector_HOpConstructCuboid::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCuboid::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCuboid::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructCuboid::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructCuboid::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructCuboid::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructCuboid::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructCuboid::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructCuboid::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCuboid::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCuboid::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCuboid::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructCuboid::CreateCuboid(HPoint const &last) {
  void * jlast = 0 ;
  
  if (!swig_callbackCreateCuboid) {
    HOpConstructCuboid::CreateCuboid(last);
    return;
  } else {
    jlast = (HPoint *) &last; 
    swig_callbackCreateCuboid(jlast);
  }
}

void SwigDirector_HOpConstructCuboid::CreateSquare(HPoint const &first, HPoint const &last) {
  void * jfirst = 0 ;
  void * jlast = 0 ;
  
  if (!swig_callbackCreateSquare) {
    HOpConstructCuboid::CreateSquare(first,last);
    return;
  } else {
    jfirst = (HPoint *) &first; 
    jlast = (HPoint *) &last; 
    swig_callbackCreateSquare(jfirst, jlast);
  }
}

void SwigDirector_HOpConstructCuboid::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer, SWIG_Callback26_t callbackCreateCuboid, SWIG_Callback27_t callbackCreateSquare) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
  swig_callbackCreateCuboid = callbackCreateCuboid;
  swig_callbackCreateSquare = callbackCreateSquare;
}

void SwigDirector_HOpConstructCuboid::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
  swig_callbackCreateCuboid = 0;
  swig_callbackCreateSquare = 0;
}

SwigDirector_HOpConstructCylinder::SwigDirector_HOpConstructCylinder(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructCylinder(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructCylinder::~SwigDirector_HOpConstructCylinder() {
  
}


HEventListener *SwigDirector_HOpConstructCylinder::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCylinder::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCylinder::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructCylinder::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructCylinder::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructCylinder::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructCylinder::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructCylinder::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructCylinder::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCylinder::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCylinder::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructCylinder::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructCylinder::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructCylinder::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructPolyline::SwigDirector_HOpConstructPolyline(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructPolyline(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructPolyline::~SwigDirector_HOpConstructPolyline() {
  
}


HEventListener *SwigDirector_HOpConstructPolyline::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructPolyline::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpConstructPolyline::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructPolyline::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructPolyline::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructPolyline::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructPolyline::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructPolyline::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructPolyline::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructPolyline::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructPolyline::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructPolyline::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructPolyline::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructNurbsCurve::SwigDirector_HOpConstructNurbsCurve(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructNurbsCurve(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructNurbsCurve::~SwigDirector_HOpConstructNurbsCurve() {
  
}


HEventListener *SwigDirector_HOpConstructNurbsCurve::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructNurbsCurve::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpConstructNurbsCurve::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HOpConstructNurbsCurve::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructNurbsCurve::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructNurbsCurve::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructNurbsCurve::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructNurbsCurve::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructNurbsCurve::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructNurbsCurve::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructNurbsCurve::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructNurbsCurve::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructNurbsCurve::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructRectangle::SwigDirector_HOpConstructRectangle(HBaseView *view, int DoRepeat, int DoCapture, bool UseCenterMarker) : HOpConstructRectangle(view, DoRepeat, DoCapture, UseCenterMarker), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructRectangle::~SwigDirector_HOpConstructRectangle() {
  
}


HEventListener *SwigDirector_HOpConstructRectangle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructRectangle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructRectangle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpConstructRectangle::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructRectangle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructRectangle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructRectangle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructRectangle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructRectangle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructRectangle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructRectangle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructRectangle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructRectangle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructRectangle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpConstructSphere::SwigDirector_HOpConstructSphere(HBaseView *view, int DoRepeat, int DoCapture) : HOpConstructSphere(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpConstructSphere::~SwigDirector_HOpConstructSphere() {
  
}


HEventListener *SwigDirector_HOpConstructSphere::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructSphere::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructSphere::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpConstructSphere::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpConstructSphere::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpConstructSphere::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpConstructSphere::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpConstructSphere::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpConstructSphere::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructSphere::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpConstructSphere::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpConstructSphere::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpConstructSphere::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateBoolean::SwigDirector_HOpCreateBoolean(HBaseView *view, int nBooleanType, int DoRepeat, int DoCapture) : HOpCreateBoolean(view, nBooleanType, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateBoolean::~SwigDirector_HOpCreateBoolean() {
  
}


HEventListener *SwigDirector_HOpCreateBoolean::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateBoolean::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateBoolean::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateBoolean::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateBoolean::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateBoolean::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateBoolean::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateBoolean::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateBoolean::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateBoolean::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateBoolean::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateCircle::SwigDirector_HOpCreateCircle(HBaseView *view, int DoRepeat, int DoCapture, bool UseCenterMarker) : HOpCreateCircle(view, DoRepeat, DoCapture, UseCenterMarker), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateCircle::~SwigDirector_HOpCreateCircle() {
  
}


HEventListener *SwigDirector_HOpCreateCircle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCircle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCreateCircle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateCircle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateCircle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateCircle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateCircle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateCircle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateCircle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCircle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCircle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateCircle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateCircle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateCone::SwigDirector_HOpCreateCone(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateCone(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateCone::~SwigDirector_HOpCreateCone() {
  
}


HEventListener *SwigDirector_HOpCreateCone::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateCone::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCone::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateCone::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateCone::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateCone::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateCone::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateCone::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateCone::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCone::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCone::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCone::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateCone::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateCone::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateCuboid::SwigDirector_HOpCreateCuboid(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateCuboid(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateCuboid::~SwigDirector_HOpCreateCuboid() {
  
}


HEventListener *SwigDirector_HOpCreateCuboid::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateCuboid::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCuboid::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateCuboid::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateCuboid::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateCuboid::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateCuboid::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateCuboid::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateCuboid::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCuboid::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCuboid::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuboid::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateCuboid::CreateCuboid(HPoint const &last) {
  void * jlast = 0 ;
  
  if (!swig_callbackCreateCuboid) {
    HOpConstructCuboid::CreateCuboid(last);
    return;
  } else {
    jlast = (HPoint *) &last; 
    swig_callbackCreateCuboid(jlast);
  }
}

void SwigDirector_HOpCreateCuboid::CreateSquare(HPoint const &first, HPoint const &last) {
  void * jfirst = 0 ;
  void * jlast = 0 ;
  
  if (!swig_callbackCreateSquare) {
    HOpConstructCuboid::CreateSquare(first,last);
    return;
  } else {
    jfirst = (HPoint *) &first; 
    jlast = (HPoint *) &last; 
    swig_callbackCreateSquare(jfirst, jlast);
  }
}

void SwigDirector_HOpCreateCuboid::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer, SWIG_Callback26_t callbackCreateCuboid, SWIG_Callback27_t callbackCreateSquare) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
  swig_callbackCreateCuboid = callbackCreateCuboid;
  swig_callbackCreateSquare = callbackCreateSquare;
}

void SwigDirector_HOpCreateCuboid::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
  swig_callbackCreateCuboid = 0;
  swig_callbackCreateSquare = 0;
}

SwigDirector_HOpCreateCuttingPlane::SwigDirector_HOpCreateCuttingPlane(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateCuttingPlane(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateCuttingPlane::~SwigDirector_HOpCreateCuttingPlane() {
  
}


HEventListener *SwigDirector_HOpCreateCuttingPlane::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateCuttingPlane::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCreateCuttingPlane::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpObjectTranslate::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateCuttingPlane::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateCuttingPlane::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateCuttingPlane::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateCuttingPlane::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateCuttingPlane::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpObjectTranslate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCuttingPlane::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateCuttingPlane::UpdateKeyList(void *data) {
  HOpObjectTranslate::UpdateKeyList(data);
}

void SwigDirector_HOpCreateCuttingPlane::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateCuttingPlane::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateCylinder::SwigDirector_HOpCreateCylinder(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateCylinder(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateCylinder::~SwigDirector_HOpCreateCylinder() {
  
}


HEventListener *SwigDirector_HOpCreateCylinder::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateCylinder::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpConstructCylinder::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateCylinder::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateCylinder::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateCylinder::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateCylinder::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateCylinder::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateCylinder::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCylinder::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructCylinder::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateCylinder::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateCylinder::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateCylinder::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateNurbs3D::SwigDirector_HOpCreateNurbs3D(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateNurbs3D(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateNurbs3D::~SwigDirector_HOpCreateNurbs3D() {
  
}


HEventListener *SwigDirector_HOpCreateNurbs3D::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCreateNurbs3D::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCreateNurbs3D::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateNurbs3D::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateNurbs3D::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateNurbs3D::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateNurbs3D::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateNurbs3D::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCreateNurbs3D::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbs3D::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateNurbs3D::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateNurbs3D::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateNurbsCurve::SwigDirector_HOpCreateNurbsCurve(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateNurbsCurve(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateNurbsCurve::~SwigDirector_HOpCreateNurbsCurve() {
  
}


HEventListener *SwigDirector_HOpCreateNurbsCurve::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructNurbsCurve::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpCreateNurbsCurve::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HOpConstructNurbsCurve::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateNurbsCurve::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateNurbsCurve::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateNurbsCurve::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateNurbsCurve::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateNurbsCurve::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructNurbsCurve::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateNurbsCurve::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateNurbsCurve::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateNurbsCurve::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateSphere::SwigDirector_HOpCreateSphere(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreateSphere(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateSphere::~SwigDirector_HOpCreateSphere() {
  
}


HEventListener *SwigDirector_HOpCreateSphere::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructSphere::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCreateSphere::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateSphere::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateSphere::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateSphere::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateSphere::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateSphere::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateSphere::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructSphere::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateSphere::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateSphere::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateSphere::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraManipulate::SwigDirector_HOpCameraManipulate(HBaseView *view, int DoRepeat, int DoCapture, HBaseOperator *orbit, HBaseOperator *pan, HBaseOperator *zoom, HBaseOperator *relative, bool AllowHandleActivation) : HOpCameraManipulate(view, DoRepeat, DoCapture, orbit, pan, zoom, relative, AllowHandleActivation), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraManipulate::~SwigDirector_HOpCameraManipulate() {
  
}


HEventListener *SwigDirector_HOpCameraManipulate::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraManipulate::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraManipulate::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HOpCameraManipulate::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HOpCameraManipulate::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HOpCameraManipulate::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpCameraManipulate::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraManipulate::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraManipulate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraManipulate::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HOpCameraManipulate::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraManipulate::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraManipulate::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraManipulate::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraManipulate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HOpCameraManipulate::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HOpCameraManipulate::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraManipulate::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraManipulate::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraManipulate::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraOrbit::SwigDirector_HOpCameraOrbit(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraOrbit(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraOrbit::~SwigDirector_HOpCameraOrbit() {
  
}


HEventListener *SwigDirector_HOpCameraOrbit::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraOrbit::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraOrbit::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraOrbit::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraOrbit::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraOrbit::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraOrbit::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraOrbit::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraOrbit::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraOrbit::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbit::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraOrbit::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraOrbit::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraPan::SwigDirector_HOpCameraPan(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraPan(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraPan::~SwigDirector_HOpCameraPan() {
  
}


HEventListener *SwigDirector_HOpCameraPan::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraPan::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraPan::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraPan::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraPan::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraPan::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraPan::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraPan::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraPan::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraPan::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraPan::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraPan::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraPan::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreatePolyline::SwigDirector_HOpCreatePolyline(HBaseView *view, int DoRepeat, int DoCapture) : HOpCreatePolyline(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreatePolyline::~SwigDirector_HOpCreatePolyline() {
  
}


HEventListener *SwigDirector_HOpCreatePolyline::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructPolyline::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpCreatePolyline::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreatePolyline::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreatePolyline::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreatePolyline::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreatePolyline::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreatePolyline::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreatePolyline::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructPolyline::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreatePolyline::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreatePolyline::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreatePolyline::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCreateRectangle::SwigDirector_HOpCreateRectangle(HBaseView *view, int DoRepeat, int DoCapture, bool UseCenterMarker) : HOpCreateRectangle(view, DoRepeat, DoCapture, UseCenterMarker), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCreateRectangle::~SwigDirector_HOpCreateRectangle() {
  
}


HEventListener *SwigDirector_HOpCreateRectangle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructRectangle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCreateRectangle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpConstructRectangle::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCreateRectangle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCreateRectangle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCreateRectangle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCreateRectangle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCreateRectangle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCreateRectangle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructRectangle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCreateRectangle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCreateRectangle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCreateRectangle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraRelativeOrbit::SwigDirector_HOpCameraRelativeOrbit(HBaseView *view, int doRepeat, int doCapture) : HOpCameraRelativeOrbit(view, doRepeat, doCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraRelativeOrbit::~SwigDirector_HOpCameraRelativeOrbit() {
  
}


HEventListener *SwigDirector_HOpCameraRelativeOrbit::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraRelativeOrbit::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraOrbit::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraRelativeOrbit::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraRelativeOrbit::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraRelativeOrbit::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraRelativeOrbit::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraRelativeOrbit::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraRelativeOrbit::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraRelativeOrbit::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraRelativeOrbit::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraRelativeOrbit::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraWalk::SwigDirector_HOpCameraWalk(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraWalk(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraWalk::~SwigDirector_HOpCameraWalk() {
  
}


HEventListener *SwigDirector_HOpCameraWalk::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraWalk::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraWalk::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HOpCameraWalk::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HOpCameraWalk::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HOpCameraWalk::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpCameraWalk::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraWalk::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraWalk::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraWalk::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraWalk::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraWalk::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraWalk::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraWalk::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HOpCameraWalk::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraWalk::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraWalk::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraWalk::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraZoom::SwigDirector_HOpCameraZoom(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraZoom(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraZoom::~SwigDirector_HOpCameraZoom() {
  
}


HEventListener *SwigDirector_HOpCameraZoom::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraZoom::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraZoom::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraZoom::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraZoom::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraZoom::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraZoom::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraZoom::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraZoom::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraZoom::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoom::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraZoom::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraZoom::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpCameraZoomBox::SwigDirector_HOpCameraZoomBox(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraZoomBox(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraZoomBox::~SwigDirector_HOpCameraZoomBox() {
  
}


HEventListener *SwigDirector_HOpCameraZoomBox::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructRectangle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraZoomBox::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpCameraZoomBox::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpConstructRectangle::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraZoomBox::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraZoomBox::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraZoomBox::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraZoomBox::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraZoomBox::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraZoomBox::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructRectangle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraZoomBox::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraZoomBox::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraZoomBox::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupAnnotate::SwigDirector_HOpMarkupAnnotate(HBaseView *view, bool bAddToLayer, int DoRepeat, int DoCapture, bool create_new_notes) : HOpMarkupAnnotate(view, bAddToLayer, DoRepeat, DoCapture, create_new_notes), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupAnnotate::~SwigDirector_HOpMarkupAnnotate() {
  
}


HEventListener *SwigDirector_HOpMarkupAnnotate::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpMarkupAnnotate::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupAnnotate::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HOpMarkupAnnotate::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpMarkupAnnotate::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupAnnotate::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupAnnotate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupAnnotate::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupAnnotate::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupAnnotate::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpMarkupAnnotate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupAnnotate::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupAnnotate::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupAnnotate::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupCircle::SwigDirector_HOpMarkupCircle(HBaseView *view, int DoRepeat, int DoCapture) : HOpMarkupCircle(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupCircle::~SwigDirector_HOpMarkupCircle() {
  
}


HEventListener *SwigDirector_HOpMarkupCircle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructCircle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupCircle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupCircle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupCircle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupCircle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupCircle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupCircle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupCircle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructCircle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupCircle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupCircle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupCircle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupFreehand::SwigDirector_HOpMarkupFreehand(HBaseView *view, int DoRepeat, int DoCapture) : HOpMarkupFreehand(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupFreehand::~SwigDirector_HOpMarkupFreehand() {
  
}


HEventListener *SwigDirector_HOpMarkupFreehand::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpMarkupFreehand::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupFreehand::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupFreehand::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupFreehand::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupFreehand::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupFreehand::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupFreehand::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupFreehand::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpMarkupFreehand::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupFreehand::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupFreehand::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupFreehand::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupMeasure::SwigDirector_HOpMarkupMeasure(HBaseView *view, bool AddToLayer, int DoRepeat, int DoCapture) : HOpMarkupMeasure(view, AddToLayer, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupMeasure::~SwigDirector_HOpMarkupMeasure() {
  
}


HEventListener *SwigDirector_HOpMarkupMeasure::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpMarkupMeasure::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupMeasure::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HOpMarkupMeasure::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpMarkupMeasure::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupMeasure::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupMeasure::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupMeasure::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupMeasure::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupMeasure::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupMeasure::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpMarkupMeasure::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupMeasure::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupMeasure::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupMeasure::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupPostIt::SwigDirector_HOpMarkupPostIt(HBaseView *view, int DoRepeat, int DoCapture) : HOpMarkupPostIt(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupPostIt::~SwigDirector_HOpMarkupPostIt() {
  
}


HEventListener *SwigDirector_HOpMarkupPostIt::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpMarkupPostIt::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupAnnotate::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HOpMarkupAnnotate::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpMarkupAnnotate::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupPostIt::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupAnnotate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupPostIt::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupPostIt::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupPostIt::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupPostIt::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpMarkupAnnotate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupPostIt::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupPostIt::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupPostIt::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMarkupRectangle::SwigDirector_HOpMarkupRectangle(HBaseView *view, int DoRepeat, int DoCapture) : HOpMarkupRectangle(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMarkupRectangle::~SwigDirector_HOpMarkupRectangle() {
  
}


HEventListener *SwigDirector_HOpMarkupRectangle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructRectangle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMarkupRectangle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpConstructRectangle::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMarkupRectangle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMarkupRectangle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMarkupRectangle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMarkupRectangle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMarkupRectangle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMarkupRectangle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructRectangle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMarkupRectangle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMarkupRectangle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMarkupRectangle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpMoveHandle::SwigDirector_HOpMoveHandle(HBaseView *view, bool allowSelect, int DoRepeat, int DoCapture) : HOpMoveHandle(view, allowSelect, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpMoveHandle::~SwigDirector_HOpMoveHandle() {
  
}


HEventListener *SwigDirector_HOpMoveHandle::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpMoveHandle::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpMoveHandle::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpMoveHandle::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpMoveHandle::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpMoveHandle::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpMoveHandle::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpMoveHandle::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpMoveHandle::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpMoveHandle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpMoveHandle::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpMoveHandle::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpMoveHandle::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpMoveHandle::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpNavCube::SwigDirector_HOpNavCube(HBaseView *view, int DoRepeat, int DoCapture) : HOpNavCube(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpNavCube::~SwigDirector_HOpNavCube() {
  
}


HEventListener *SwigDirector_HOpNavCube::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpNavCube::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpNavCube::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpNavCube::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpNavCube::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpNavCube::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpNavCube::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpNavCube::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNavCube::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpNavCube::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpNavCube::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpNetwork::SwigDirector_HOpNetwork(HBaseView *view) : HOpNetwork(view), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpNetwork::~SwigDirector_HOpNetwork() {
  
}


HEventListener *SwigDirector_HOpNetwork::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpNetwork::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpNetwork::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HOpNetwork::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpNetwork::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpNetwork::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HBaseOperator::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpNetwork::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpNetwork::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HBaseOperator::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpNetwork::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpNetwork::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HOpNetwork::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpNetwork::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpNetwork::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpNetwork::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpObjectAnnotate::SwigDirector_HOpObjectAnnotate(HBaseView *view, int DoRepeat, int DoCapture) : HOpObjectAnnotate(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpObjectAnnotate::~SwigDirector_HOpObjectAnnotate() {
  
}


HEventListener *SwigDirector_HOpObjectAnnotate::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpObjectAnnotate::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpObjectAnnotate::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpObjectAnnotate::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpObjectAnnotate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpObjectAnnotate::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpObjectAnnotate::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpObjectAnnotate::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpObjectAnnotate::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpObjectAnnotate::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectAnnotate::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpObjectAnnotate::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpObjectAnnotate::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpObjectClash::SwigDirector_HOpObjectClash(HBaseView *view, int doRepeat, int doCapture) : HOpObjectClash(view, doRepeat, doCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpObjectClash::~SwigDirector_HOpObjectClash() {
  
}


HEventListener *SwigDirector_HOpObjectClash::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpObjectClash::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpObjectClash::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpObjectTranslate::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HOpObjectClash::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpObjectClash::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpObjectClash::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpObjectClash::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpObjectClash::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpObjectClash::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpObjectClash::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpObjectClash::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpObjectClash::UpdateKeyList(void *data) {
  HOpObjectClash::UpdateKeyList(data);
}

int SwigDirector_HOpObjectClash::SelectByScreenVolume(HSmartSelItem *sel_item) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsel_item = 0 ;
  
  if (!swig_callbackSelectByScreenVolume) {
    return HOpObjectClash::SelectByScreenVolume(sel_item);
  } else {
    jsel_item = (void *) sel_item; 
    jresult = (int) swig_callbackSelectByScreenVolume(jsel_item);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::SelectByWorldVolume(HSmartSelItem *sel_item) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsel_item = 0 ;
  
  if (!swig_callbackSelectByWorldVolume) {
    return HOpObjectClash::SelectByWorldVolume(sel_item);
  } else {
    jsel_item = (void *) sel_item; 
    jresult = (int) swig_callbackSelectByWorldVolume(jsel_item);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::SelectByEnclosure(HSmartSelItem *sel_item) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsel_item = 0 ;
  
  if (!swig_callbackSelectByEnclosure) {
    return HOpObjectClash::SelectByEnclosure(sel_item);
  } else {
    jsel_item = (void *) sel_item; 
    jresult = (int) swig_callbackSelectByEnclosure(jsel_item);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectClash::SelectByShell(HSmartSelItem *sel_item) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jsel_item = 0 ;
  
  if (!swig_callbackSelectByShell) {
    return HOpObjectClash::SelectByShell(sel_item);
  } else {
    jsel_item = (void *) sel_item; 
    jresult = (int) swig_callbackSelectByShell(jsel_item);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpObjectClash::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer, SWIG_Callback26_t callbackSelectByScreenVolume, SWIG_Callback27_t callbackSelectByWorldVolume, SWIG_Callback28_t callbackSelectByEnclosure, SWIG_Callback29_t callbackSelectByShell) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
  swig_callbackSelectByScreenVolume = callbackSelectByScreenVolume;
  swig_callbackSelectByWorldVolume = callbackSelectByWorldVolume;
  swig_callbackSelectByEnclosure = callbackSelectByEnclosure;
  swig_callbackSelectByShell = callbackSelectByShell;
}

void SwigDirector_HOpObjectClash::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
  swig_callbackSelectByScreenVolume = 0;
  swig_callbackSelectByWorldVolume = 0;
  swig_callbackSelectByEnclosure = 0;
  swig_callbackSelectByShell = 0;
}

SwigDirector_HOpObjectRotate::SwigDirector_HOpObjectRotate(HBaseView *view, int DoRepeat, int DoCapture) : HOpObjectRotate(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpObjectRotate::~SwigDirector_HOpObjectRotate() {
  
}


HEventListener *SwigDirector_HOpObjectRotate::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpObjectRotate::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpObjectRotate::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpObjectRotate::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpObjectRotate::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpObjectRotate::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpObjectRotate::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpObjectRotate::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpObjectRotate::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpObjectRotate::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpObjectRotate::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpObjectRotate::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpObjectRotate::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpObjectRotate::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpSelectArea::SwigDirector_HOpSelectArea(HBaseView *view, int DoRepeat, int DoCapture) : HOpSelectArea(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpSelectArea::~SwigDirector_HOpSelectArea() {
  
}


HEventListener *SwigDirector_HOpSelectArea::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpSelectArea::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpSelectArea::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HOpConstructRectangle::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpSelectArea::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpSelectArea::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpSelectArea::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpSelectArea::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpSelectArea::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpSelectArea::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpConstructRectangle::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectArea::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpSelectArea::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpSelectArea::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpSelectAperture::SwigDirector_HOpSelectAperture(HBaseView *view, int DoRepeat, int DoCapture) : HOpSelectAperture(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpSelectAperture::~SwigDirector_HOpSelectAperture() {
  
}


HEventListener *SwigDirector_HOpSelectAperture::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpSelectAperture::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpSelectAperture::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpSelectAperture::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpSelectAperture::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpSelectAperture::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpSelectAperture::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpSelectAperture::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectAperture::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpSelectAperture::HandleSelection(HEventInfo &hevent) {
  void * jhevent = 0 ;
  
  if (!swig_callbackHandleSelection) {
    HOpSelectAperture::HandleSelection(hevent);
    return;
  } else {
    jhevent = (HEventInfo *) &hevent; 
    swig_callbackHandleSelection(jhevent);
  }
}

void SwigDirector_HOpSelectAperture::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer, SWIG_Callback26_t callbackHandleSelection) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
  swig_callbackHandleSelection = callbackHandleSelection;
}

void SwigDirector_HOpSelectAperture::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
  swig_callbackHandleSelection = 0;
}

SwigDirector_HOpSelectPolygon::SwigDirector_HOpSelectPolygon(HBaseView *view, int DoRepeat, int DoCapture) : HOpSelectPolygon(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpSelectPolygon::~SwigDirector_HOpSelectPolygon() {
  
}


HEventListener *SwigDirector_HOpSelectPolygon::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpSelectPolygon::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpSelectPolygon::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpSelectPolygon::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpSelectPolygon::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpSelectPolygon::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpSelectPolygon::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpSelectPolygon::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpSelectPolygon::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructPolyline::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolygon::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpSelectPolygon::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpSelectPolygon::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HOpSelectPolyline::SwigDirector_HOpSelectPolyline(HBaseView *view, int DoRepeat, int DoCapture) : HOpSelectPolyline(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpSelectPolyline::~SwigDirector_HOpSelectPolyline() {
  
}


HEventListener *SwigDirector_HOpSelectPolyline::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpConstructPolyline::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HBaseOperator::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HOpSelectPolyline::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HBaseOperator::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpSelectPolyline::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpSelectPolyline::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpSelectPolyline::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpSelectPolyline::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpSelectPolyline::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpSelectPolyline::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HBaseOperator::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HOpConstructPolyline::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpSelectPolyline::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpSelectPolyline::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpSelectPolyline::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}

SwigDirector_HSelectionSet::SwigDirector_HSelectionSet(HBaseView *view, bool bReferenceSelection) : HSelectionSet(view, bReferenceSelection), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_HSelectionSet::UpdateTransparency(bool force_flush) {
  bool jforce_flush  ;
  
  if (!swig_callbackUpdateTransparency__SWIG_0) {
    HSelectionSet::UpdateTransparency(force_flush);
    return;
  } else {
    jforce_flush = force_flush;
    swig_callbackUpdateTransparency__SWIG_0(jforce_flush);
  }
}

SwigDirector_HSelectionSet::~SwigDirector_HSelectionSet() {
  
}


void SwigDirector_HSelectionSet::Init() {
  if (!swig_callbackInit) {
    HSelectionSet::Init();
    return;
  } else {
    swig_callbackInit();
  }
}

void SwigDirector_HSelectionSet::Select(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  bool jemit_message  ;
  
  if (!swig_callbackSelect__SWIG_0) {
    HSelectionSet::Select(key,num_include_keys,include_keys,emit_message);
    return;
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jemit_message = emit_message;
    swig_callbackSelect__SWIG_0(jkey, jnum_include_keys, jinclude_keys, jemit_message);
  }
}

void SwigDirector_HSelectionSet::Select(HSelectionItem *new_sel, bool emit_message) {
  void * jnew_sel = 0 ;
  bool jemit_message  ;
  
  if (!swig_callbackSelect__SWIG_2) {
    HSelectionSet::Select(new_sel,emit_message);
    return;
  } else {
    jnew_sel = (void *) new_sel; 
    jemit_message = emit_message;
    swig_callbackSelect__SWIG_2(jnew_sel, jemit_message);
  }
}

void SwigDirector_HSelectionSet::SelectRegion(HShellObject const &oShell, int num_include_keys, HC_KEY include_keys[], int region, bool emit_message) {
  void * joShell = 0 ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jregion  ;
  bool jemit_message  ;
  
  if (!swig_callbackSelectRegion) {
    HSelectionSet::SelectRegion(oShell,num_include_keys,include_keys,region,emit_message);
    return;
  } else {
    joShell = (HShellObject *) &oShell; 
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jregion = region;
    jemit_message = emit_message;
    swig_callbackSelectRegion(joShell, jnum_include_keys, jinclude_keys, jregion, jemit_message);
  }
}

void SwigDirector_HSelectionSet::SelectSubentity(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[], int const vertex1[], int const vertex2[], bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jcount  ;
  int * jfaces  ;
  int * jvertex1  ;
  int * jvertex2  ;
  bool jemit_message  ;
  
  if (!swig_callbackSelectSubentity__SWIG_0) {
    HSelectionSet::SelectSubentity(key,num_include_keys,include_keys,count,faces,vertex1,vertex2,emit_message);
    return;
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jcount = count;
    jfaces = (int*)faces;
    jvertex1 = (int*)vertex1;
    jvertex2 = (int*)vertex2;
    jemit_message = emit_message;
    swig_callbackSelectSubentity__SWIG_0(jkey, jnum_include_keys, jinclude_keys, jcount, jfaces, jvertex1, jvertex2, jemit_message);
  }
}

void SwigDirector_HSelectionSet::Select(HC_KEY key, char const *segpath, HC_KEY include_key, HC_KEY includer_key, bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  char * jsegpath = 0 ;
  MVO_POINTER_SIZED_INT jinclude_key  ;
  MVO_POINTER_SIZED_INT jincluder_key  ;
  bool jemit_message  ;
  
  if (!swig_callbackSelect__SWIG_4) {
    HSelectionSet::Select(key,segpath,include_key,includer_key,emit_message);
    return;
  } else {
    jkey = key;
    jsegpath = SWIG_csharp_string_callback((const char *)segpath); 
    jinclude_key = include_key;
    jincluder_key = includer_key;
    jemit_message = emit_message;
    swig_callbackSelect__SWIG_4(jkey, jsegpath, jinclude_key, jincluder_key, jemit_message);
  }
}

void SwigDirector_HSelectionSet::DeSelect(HC_KEY key, bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelect__SWIG_0) {
    HSelectionSet::DeSelect(key,emit_message);
    return;
  } else {
    jkey = key;
    jemit_message = emit_message;
    swig_callbackDeSelect__SWIG_0(jkey, jemit_message);
  }
}

void SwigDirector_HSelectionSet::DeSelect(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelect__SWIG_2) {
    HSelectionSet::DeSelect(key,num_include_keys,include_keys,emit_message);
    return;
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jemit_message = emit_message;
    swig_callbackDeSelect__SWIG_2(jkey, jnum_include_keys, jinclude_keys, jemit_message);
  }
}

void SwigDirector_HSelectionSet::DeSelect(HSelectionItem *remove_sel, bool emit_message) {
  void * jremove_sel = 0 ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelect__SWIG_4) {
    HSelectionSet::DeSelect(remove_sel,emit_message);
    return;
  } else {
    jremove_sel = (void *) remove_sel; 
    jemit_message = emit_message;
    swig_callbackDeSelect__SWIG_4(jremove_sel, jemit_message);
  }
}

void SwigDirector_HSelectionSet::DeSelectRegion(HShellObject const &oShell, int region, bool emit_messag) {
  void * joShell = 0 ;
  int jregion  ;
  bool jemit_messag  ;
  
  if (!swig_callbackDeSelectRegion__SWIG_0) {
    HSelectionSet::DeSelectRegion(oShell,region,emit_messag);
    return;
  } else {
    joShell = (HShellObject *) &oShell; 
    jregion = region;
    jemit_messag = emit_messag;
    swig_callbackDeSelectRegion__SWIG_0(joShell, jregion, jemit_messag);
  }
}

void SwigDirector_HSelectionSet::DeSelectRegion(HShellObject const &oShell, int num_include_keys, HC_KEY include_keys[], int region, bool emit_message) {
  void * joShell = 0 ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jregion  ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelectRegion__SWIG_1) {
    HSelectionSet::DeSelectRegion(oShell,num_include_keys,include_keys,region,emit_message);
    return;
  } else {
    joShell = (HShellObject *) &oShell; 
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jregion = region;
    jemit_message = emit_message;
    swig_callbackDeSelectRegion__SWIG_1(joShell, jnum_include_keys, jinclude_keys, jregion, jemit_message);
  }
}

void SwigDirector_HSelectionSet::DeSelectSubentity(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[], int const vertex1[], int const vertex2[], bool emit_message) {
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jcount  ;
  int * jfaces  ;
  int * jvertex1  ;
  int * jvertex2  ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelectSubentity__SWIG_0) {
    HSelectionSet::DeSelectSubentity(key,num_include_keys,include_keys,count,faces,vertex1,vertex2,emit_message);
    return;
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jcount = count;
    jfaces = (int*)faces;
    jvertex1 = (int*)vertex1;
    jvertex2 = (int*)vertex2;
    jemit_message = emit_message;
    swig_callbackDeSelectSubentity__SWIG_0(jkey, jnum_include_keys, jinclude_keys, jcount, jfaces, jvertex1, jvertex2, jemit_message);
  }
}

bool SwigDirector_HSelectionSet::SelectSubentityOOC(HC_KEY key, int num_include_keys, HC_KEY include_keys[], int count, int const faces[], int const vertex1[], int const vertex2[], bool emit_message) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jcount  ;
  int * jfaces  ;
  int * jvertex1  ;
  int * jvertex2  ;
  bool jemit_message  ;
  
  if (!swig_callbackSelectSubentityOOC__SWIG_0) {
    return HSelectionSet::SelectSubentityOOC(key,num_include_keys,include_keys,count,faces,vertex1,vertex2,emit_message);
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jcount = count;
    jfaces = (int*)faces;
    jvertex1 = (int*)vertex1;
    jvertex2 = (int*)vertex2;
    jemit_message = emit_message;
    jresult = (bool) swig_callbackSelectSubentityOOC__SWIG_0(jkey, jnum_include_keys, jinclude_keys, jcount, jfaces, jvertex1, jvertex2, jemit_message);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::DeSelectOOC(HC_KEY key, int num_include_keys, HC_KEY include_keys[], bool emit_message) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  bool jemit_message  ;
  
  if (!swig_callbackDeSelectOOC__SWIG_0) {
    return HSelectionSet::DeSelectOOC(key,num_include_keys,include_keys,emit_message);
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jemit_message = emit_message;
    jresult = (bool) swig_callbackDeSelectOOC__SWIG_0(jkey, jnum_include_keys, jinclude_keys, jemit_message);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::HighlightRegionEdges() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackHighlightRegionEdges__SWIG_0) {
    return HSelectionSet::HighlightRegionEdges();
  } else {
    jresult = (bool) swig_callbackHighlightRegionEdges__SWIG_0();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::HighlightRegionEdges(bool yesno) {
  bool jyesno  ;
  
  if (!swig_callbackHighlightRegionEdges__SWIG_1) {
    HSelectionSet::HighlightRegionEdges(yesno);
    return;
  } else {
    jyesno = yesno;
    swig_callbackHighlightRegionEdges__SWIG_1(jyesno);
  }
}

bool SwigDirector_HSelectionSet::HighlightAnnotations() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackHighlightAnnotations__SWIG_0) {
    return HSelectionSet::HighlightAnnotations();
  } else {
    jresult = (bool) swig_callbackHighlightAnnotations__SWIG_0();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::HighlightAnnotations(bool yesno) {
  bool jyesno  ;
  
  if (!swig_callbackHighlightAnnotations__SWIG_1) {
    HSelectionSet::HighlightAnnotations(yesno);
    return;
  } else {
    jyesno = yesno;
    swig_callbackHighlightAnnotations__SWIG_1(jyesno);
  }
}

HRegionEdgeHighlightMode SwigDirector_HSelectionSet::HighlightRegionEdgesAutoVisibility() {
  HRegionEdgeHighlightMode c_result = SwigValueInit< HRegionEdgeHighlightMode >() ;
  int jresult = 0 ;
  
  if (!swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_0) {
    return HSelectionSet::HighlightRegionEdgesAutoVisibility();
  } else {
    jresult = (int) swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_0();
    c_result = (HRegionEdgeHighlightMode)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::HighlightRegionEdgesAutoVisibility(bool yesno) {
  bool jyesno  ;
  
  if (!swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_1) {
    HSelectionSet::HighlightRegionEdgesAutoVisibility(yesno);
    return;
  } else {
    jyesno = yesno;
    swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_1(jyesno);
  }
}

void SwigDirector_HSelectionSet::HighlightRegionEdgesAutoVisibility(HRegionEdgeHighlightMode edge_state) {
  int jedge_state  ;
  
  if (!swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_2) {
    HSelectionSet::HighlightRegionEdgesAutoVisibility(edge_state);
    return;
  } else {
    jedge_state = edge_state;
    swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_2(jedge_state);
  }
}

void SwigDirector_HSelectionSet::HighlightRegionFacesAutoVisibility(HRegionFaceHighlightMode face_state) {
  int jface_state  ;
  
  if (!swig_callbackHighlightRegionFacesAutoVisibility__SWIG_0) {
    HSelectionSet::HighlightRegionFacesAutoVisibility(face_state);
    return;
  } else {
    jface_state = face_state;
    swig_callbackHighlightRegionFacesAutoVisibility__SWIG_0(jface_state);
  }
}

HRegionFaceHighlightMode SwigDirector_HSelectionSet::HighlightRegionFacesAutoVisibility() {
  HRegionFaceHighlightMode c_result = SwigValueInit< HRegionFaceHighlightMode >() ;
  int jresult = 0 ;
  
  if (!swig_callbackHighlightRegionFacesAutoVisibility__SWIG_1) {
    return HSelectionSet::HighlightRegionFacesAutoVisibility();
  } else {
    jresult = (int) swig_callbackHighlightRegionFacesAutoVisibility__SWIG_1();
    c_result = (HRegionFaceHighlightMode)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::DeSelectAll() {
  if (!swig_callbackDeSelectAll) {
    HSelectionSet::DeSelectAll();
    return;
  } else {
    swig_callbackDeSelectAll();
  }
}

bool SwigDirector_HSelectionSet::IsSelected(HC_KEY key) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  
  if (!swig_callbackIsSelected__SWIG_0) {
    return HSelectionSet::IsSelected(key);
  } else {
    jkey = key;
    jresult = (bool) swig_callbackIsSelected__SWIG_0(jkey);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::IsSelected(HC_KEY key, int num_include_keys, HC_KEY const include_keys[]) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  
  if (!swig_callbackIsSelected__SWIG_1) {
    return HSelectionSet::IsSelected(key,num_include_keys,include_keys);
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jresult = (bool) swig_callbackIsSelected__SWIG_1(jkey, jnum_include_keys, jinclude_keys);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::IsSelected(HSelectionItem const *item) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  void * jitem = 0 ;
  
  if (!swig_callbackIsSelected__SWIG_2) {
    return HSelectionSet::IsSelected(item);
  } else {
    jitem = (void *) item; 
    jresult = (bool) swig_callbackIsSelected__SWIG_2(jitem);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::IsRegionSelected(HC_KEY key, int num_include_keys, HC_KEY const include_keys[], int region) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  int jnum_include_keys  ;
  MVO_POINTER_SIZED_INT * jinclude_keys  ;
  int jregion  ;
  
  if (!swig_callbackIsRegionSelected) {
    return HSelectionSet::IsRegionSelected(key,num_include_keys,include_keys,region);
  } else {
    jkey = key;
    jnum_include_keys = num_include_keys;
    jinclude_keys = (HC_KEY*)include_keys;
    jregion = region;
    jresult = (bool) swig_callbackIsRegionSelected(jkey, jnum_include_keys, jinclude_keys, jregion);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::IsHighlightSegment(HC_KEY segment_key) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jsegment_key  ;
  
  if (!swig_callbackIsHighlightSegment) {
    return HSelectionSet::IsHighlightSegment(segment_key);
  } else {
    jsegment_key = segment_key;
    jresult = (bool) swig_callbackIsHighlightSegment(jsegment_key);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSelectionFaceColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackSetSelectionFaceColor) {
    HSelectionSet::SetSelectionFaceColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackSetSelectionFaceColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetGrayScale(bool grayScale) {
  bool jgrayScale  ;
  
  if (!swig_callbackSetGrayScale) {
    HSelectionSet::SetGrayScale(grayScale);
    return;
  } else {
    jgrayScale = grayScale;
    swig_callbackSetGrayScale(jgrayScale);
  }
}

void SwigDirector_HSelectionSet::SetInvisible(bool Invisible) {
  bool jInvisible  ;
  
  if (!swig_callbackSetInvisible) {
    HSelectionSet::SetInvisible(Invisible);
    return;
  } else {
    jInvisible = Invisible;
    swig_callbackSetInvisible(jInvisible);
  }
}

bool SwigDirector_HSelectionSet::GetInvisible() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetInvisible) {
    return HSelectionSet::GetInvisible();
  } else {
    jresult = (bool) swig_callbackGetInvisible();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetAllowDisplacement(bool allowDisplacement) {
  bool jallowDisplacement  ;
  
  if (!swig_callbackSetAllowDisplacement) {
    HSelectionSet::SetAllowDisplacement(allowDisplacement);
    return;
  } else {
    jallowDisplacement = allowDisplacement;
    swig_callbackSetAllowDisplacement(jallowDisplacement);
  }
}

bool SwigDirector_HSelectionSet::GetAllowDisplacement() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetAllowDisplacement) {
    return HSelectionSet::GetAllowDisplacement();
  } else {
    jresult = (bool) swig_callbackGetAllowDisplacement();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

HSelList *SwigDirector_HSelectionSet::GetSelectionList() {
  return HSelectionSet::GetSelectionList();
}

void SwigDirector_HSelectionSet::GetSelectionFaceColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackGetSelectionFaceColor) {
    HSelectionSet::GetSelectionFaceColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackGetSelectionFaceColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetSelectionEdgeColor(HPixelRGBA &rgb) {
  void * jrgb = 0 ;
  
  if (!swig_callbackSetSelectionEdgeColor) {
    HSelectionSet::SetSelectionEdgeColor(rgb);
    return;
  } else {
    jrgb = (HPixelRGBA *) &rgb; 
    swig_callbackSetSelectionEdgeColor(jrgb);
  }
}

void SwigDirector_HSelectionSet::GetSelectionEdgeColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackGetSelectionEdgeColor) {
    HSelectionSet::GetSelectionEdgeColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackGetSelectionEdgeColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetSelectionCutEdgeColor(HPixelRGBA &rgb) {
  void * jrgb = 0 ;
  
  if (!swig_callbackSetSelectionCutEdgeColor) {
    HSelectionSet::SetSelectionCutEdgeColor(rgb);
    return;
  } else {
    jrgb = (HPixelRGBA *) &rgb; 
    swig_callbackSetSelectionCutEdgeColor(jrgb);
  }
}

void SwigDirector_HSelectionSet::GetSelectionCutEdgeColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackGetSelectionCutEdgeColor) {
    HSelectionSet::GetSelectionCutEdgeColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackGetSelectionCutEdgeColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetSelectionCutFaceColor(HPixelRGBA &rgb) {
  void * jrgb = 0 ;
  
  if (!swig_callbackSetSelectionCutFaceColor) {
    HSelectionSet::SetSelectionCutFaceColor(rgb);
    return;
  } else {
    jrgb = (HPixelRGBA *) &rgb; 
    swig_callbackSetSelectionCutFaceColor(jrgb);
  }
}

void SwigDirector_HSelectionSet::GetSelectionCutFaceColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackGetSelectionCutFaceColor) {
    HSelectionSet::GetSelectionCutFaceColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackGetSelectionCutFaceColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetSelectionMarkerColor(HPixelRGBA &rgb) {
  void * jrgb = 0 ;
  
  if (!swig_callbackSetSelectionMarkerColor) {
    HSelectionSet::SetSelectionMarkerColor(rgb);
    return;
  } else {
    jrgb = (HPixelRGBA *) &rgb; 
    swig_callbackSetSelectionMarkerColor(jrgb);
  }
}

void SwigDirector_HSelectionSet::GetSelectionMarkerColor(HPixelRGBA &rgba) {
  void * jrgba = 0 ;
  
  if (!swig_callbackGetSelectionMarkerColor) {
    HSelectionSet::GetSelectionMarkerColor(rgba);
    return;
  } else {
    jrgba = (HPixelRGBA *) &rgba; 
    swig_callbackGetSelectionMarkerColor(jrgba);
  }
}

void SwigDirector_HSelectionSet::SetSelectionEdgeWeight(float weight) {
  float jweight  ;
  
  if (!swig_callbackSetSelectionEdgeWeight) {
    HSelectionSet::SetSelectionEdgeWeight(weight);
    return;
  } else {
    jweight = weight;
    swig_callbackSetSelectionEdgeWeight(jweight);
  }
}

float SwigDirector_HSelectionSet::GetSelectionEdgeWeight() {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  
  if (!swig_callbackGetSelectionEdgeWeight) {
    return HSelectionSet::GetSelectionEdgeWeight();
  } else {
    jresult = (float) swig_callbackGetSelectionEdgeWeight();
    c_result = (float)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSelectionMarkerSize(float size) {
  float jsize  ;
  
  if (!swig_callbackSetSelectionMarkerSize) {
    HSelectionSet::SetSelectionMarkerSize(size);
    return;
  } else {
    jsize = size;
    swig_callbackSetSelectionMarkerSize(jsize);
  }
}

float SwigDirector_HSelectionSet::GetSelectionMarkerSize() {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  
  if (!swig_callbackGetSelectionMarkerSize) {
    return HSelectionSet::GetSelectionMarkerSize();
  } else {
    jresult = (float) swig_callbackGetSelectionMarkerSize();
    c_result = (float)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HSelectionSet::GetAt(unsigned int index) {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  unsigned int jindex  ;
  
  if (!swig_callbackGetAt) {
    return HSelectionSet::GetAt(index);
  } else {
    jindex = index;
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetAt(jindex);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::GetAll(HC_KEY out_array[]) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT * jout_array  ;
  
  if (!swig_callbackGetAll) {
    return HSelectionSet::GetAll(out_array);
  } else {
    jout_array = (HC_KEY*)out_array;
    jresult = (bool) swig_callbackGetAll(jout_array);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::Reset() {
  if (!swig_callbackReset) {
    HSelectionSet::Reset();
    return;
  } else {
    swig_callbackReset();
  }
}

bool SwigDirector_HSelectionSet::DeleteSelection(bool emit_message) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  bool jemit_message  ;
  
  if (!swig_callbackDeleteSelection__SWIG_0) {
    return HSelectionSet::DeleteSelection(emit_message);
  } else {
    jemit_message = emit_message;
    jresult = (bool) swig_callbackDeleteSelection__SWIG_0(jemit_message);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::GetSubwindowPenetration() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSubwindowPenetration) {
    return HSelectionSet::GetSubwindowPenetration();
  } else {
    jresult = (bool) swig_callbackGetSubwindowPenetration();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSubwindowPenetration(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetSubwindowPenetration) {
    HSelectionSet::SetSubwindowPenetration(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetSubwindowPenetration(jallow);
  }
}

bool SwigDirector_HSelectionSet::GetAllowSubentitySelection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetAllowSubentitySelection) {
    return HSelectionSet::GetAllowSubentitySelection();
  } else {
    jresult = (bool) swig_callbackGetAllowSubentitySelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetAllowSubentitySelection(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetAllowSubentitySelection) {
    HSelectionSet::SetAllowSubentitySelection(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetAllowSubentitySelection(jallow);
  }
}

HSelectLevel SwigDirector_HSelectionSet::GetSelectionLevel() const {
  HSelectLevel c_result = SwigValueInit< HSelectLevel >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetSelectionLevel) {
    return HSelectionSet::GetSelectionLevel();
  } else {
    jresult = (int) swig_callbackGetSelectionLevel();
    c_result = (HSelectLevel)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSelectionLevel(HSelectLevel level) {
  int jlevel  ;
  
  if (!swig_callbackSetSelectionLevel) {
    HSelectionSet::SetSelectionLevel(level);
    return;
  } else {
    jlevel = level;
    swig_callbackSetSelectionLevel(jlevel);
  }
}

bool SwigDirector_HSelectionSet::GetAllowEntitySelection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetAllowEntitySelection) {
    return HSelectionSet::GetAllowEntitySelection();
  } else {
    jresult = (bool) swig_callbackGetAllowEntitySelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetAllowEntitySelection(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetAllowEntitySelection) {
    HSelectionSet::SetAllowEntitySelection(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetAllowEntitySelection(jallow);
  }
}

bool SwigDirector_HSelectionSet::GetAllowRegionSelection() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetAllowRegionSelection) {
    return HSelectionSet::GetAllowRegionSelection();
  } else {
    jresult = (bool) swig_callbackGetAllowRegionSelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetAllowRegionSelection(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetAllowRegionSelection) {
    HSelectionSet::SetAllowRegionSelection(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetAllowRegionSelection(jallow);
  }
}

HSelectionHighlightMode const SwigDirector_HSelectionSet::GetHighlightMode() {
  HSelectionHighlightMode c_result = SwigValueInit< HSelectionHighlightMode >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetHighlightMode) {
    return HSelectionSet::GetHighlightMode();
  } else {
    jresult = (int) swig_callbackGetHighlightMode();
    c_result = (HSelectionHighlightMode)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetHighlightMode(HSelectionHighlightMode m) {
  int jm  ;
  
  if (!swig_callbackSetHighlightMode) {
    HSelectionSet::SetHighlightMode(m);
    return;
  } else {
    jm = m;
    swig_callbackSetHighlightMode(jm);
  }
}

void SwigDirector_HSelectionSet::SetHighlightTransparency(float trans) {
  float jtrans  ;
  
  if (!swig_callbackSetHighlightTransparency) {
    HSelectionSet::SetHighlightTransparency(trans);
    return;
  } else {
    jtrans = trans;
    swig_callbackSetHighlightTransparency(jtrans);
  }
}

HC_KEY SwigDirector_HSelectionSet::GetSelectionSegment() {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  
  if (!swig_callbackGetSelectionSegment) {
    return HSelectionSet::GetSelectionSegment();
  } else {
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetSelectionSegment();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::GetIsSelection(HC_KEY key) {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jkey  ;
  
  if (!swig_callbackGetIsSelection) {
    return HSelectionSet::GetIsSelection(key);
  } else {
    jkey = key;
    jresult = (bool) swig_callbackGetIsSelection(jkey);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_HSelectionSet::GetReferenceSelection() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetReferenceSelection) {
    return HSelectionSet::GetReferenceSelection();
  } else {
    jresult = (bool) swig_callbackGetReferenceSelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetReferenceSelection(bool ref_sel) {
  bool jref_sel  ;
  
  if (!swig_callbackSetReferenceSelection) {
    HSelectionSet::SetReferenceSelection(ref_sel);
    return;
  } else {
    jref_sel = ref_sel;
    swig_callbackSetReferenceSelection(jref_sel);
  }
}

void SwigDirector_HSelectionSet::SetReferenceSelectionType(HRefSelType type) {
  int jtype  ;
  
  if (!swig_callbackSetReferenceSelectionType) {
    HSelectionSet::SetReferenceSelectionType(type);
    return;
  } else {
    jtype = type;
    swig_callbackSetReferenceSelectionType(jtype);
  }
}

HRefSelType SwigDirector_HSelectionSet::GetReferenceSelectionType() {
  HRefSelType c_result = SwigValueInit< HRefSelType >() ;
  int jresult = 0 ;
  
  if (!swig_callbackGetReferenceSelectionType) {
    return HSelectionSet::GetReferenceSelectionType();
  } else {
    jresult = (int) swig_callbackGetReferenceSelectionType();
    c_result = (HRefSelType)jresult; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::UpdateHighlightStyle() {
  if (!swig_callbackUpdateHighlightStyle) {
    HSelectionSet::UpdateHighlightStyle();
    return;
  } else {
    swig_callbackUpdateHighlightStyle();
  }
}

bool SwigDirector_HSelectionSet::GetSubentityFaceSelection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSubentityFaceSelection) {
    return HSelectionSet::GetSubentityFaceSelection();
  } else {
    jresult = (bool) swig_callbackGetSubentityFaceSelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSubentityFaceSelection(bool select) {
  bool jselect  ;
  
  if (!swig_callbackSetSubentityFaceSelection) {
    HSelectionSet::SetSubentityFaceSelection(select);
    return;
  } else {
    jselect = select;
    swig_callbackSetSubentityFaceSelection(jselect);
  }
}

bool SwigDirector_HSelectionSet::GetSubentityEdgeSelection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSubentityEdgeSelection) {
    return HSelectionSet::GetSubentityEdgeSelection();
  } else {
    jresult = (bool) swig_callbackGetSubentityEdgeSelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSubentityEdgeSelection(bool select) {
  bool jselect  ;
  
  if (!swig_callbackSetSubentityEdgeSelection) {
    HSelectionSet::SetSubentityEdgeSelection(select);
    return;
  } else {
    jselect = select;
    swig_callbackSetSubentityEdgeSelection(jselect);
  }
}

bool SwigDirector_HSelectionSet::GetSubentityVertexSelection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSubentityVertexSelection) {
    return HSelectionSet::GetSubentityVertexSelection();
  } else {
    jresult = (bool) swig_callbackGetSubentityVertexSelection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSubentityVertexSelection(bool select) {
  bool jselect  ;
  
  if (!swig_callbackSetSubentityVertexSelection) {
    HSelectionSet::SetSubentityVertexSelection(select);
    return;
  } else {
    jselect = select;
    swig_callbackSetSubentityVertexSelection(jselect);
  }
}

void SwigDirector_HSelectionSet::SetAllowSubentityDeselection(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetAllowSubentityDeselection) {
    HSelectionSet::SetAllowSubentityDeselection(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetAllowSubentityDeselection(jallow);
  }
}

bool SwigDirector_HSelectionSet::GetAllowSubentityDeselection() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetAllowSubentityDeselection) {
    return HSelectionSet::GetAllowSubentityDeselection();
  } else {
    jresult = (bool) swig_callbackGetAllowSubentityDeselection();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSubentityTracking(bool allow) {
  bool jallow  ;
  
  if (!swig_callbackSetSubentityTracking) {
    HSelectionSet::SetSubentityTracking(allow);
    return;
  } else {
    jallow = allow;
    swig_callbackSetSubentityTracking(jallow);
  }
}

bool SwigDirector_HSelectionSet::GetSubentityTracking() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSubentityTracking) {
    return HSelectionSet::GetSubentityTracking();
  } else {
    jresult = (bool) swig_callbackGetSubentityTracking();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::SetSelectWillNotify(bool notify) {
  bool jnotify  ;
  
  if (!swig_callbackSetSelectWillNotify) {
    HSelectionSet::SetSelectWillNotify(notify);
    return;
  } else {
    jnotify = notify;
    swig_callbackSetSelectWillNotify(jnotify);
  }
}

bool SwigDirector_HSelectionSet::GetSelectWillNotify() const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackGetSelectWillNotify) {
    return HSelectionSet::GetSelectWillNotify();
  } else {
    jresult = (bool) swig_callbackGetSelectWillNotify();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_HSelectionSet::swig_connect_director(SWIG_Callback0_t callbackUpdateTransparency__SWIG_0, SWIG_Callback1_t callbackUpdateTransparency__SWIG_1, SWIG_Callback2_t callbackInit, SWIG_Callback3_t callbackSelect__SWIG_0, SWIG_Callback4_t callbackSelect__SWIG_1, SWIG_Callback5_t callbackSelect__SWIG_2, SWIG_Callback6_t callbackSelect__SWIG_3, SWIG_Callback7_t callbackSelectRegion, SWIG_Callback8_t callbackSelectSubentity__SWIG_0, SWIG_Callback9_t callbackSelectSubentity__SWIG_1, SWIG_Callback10_t callbackSelectSubentity__SWIG_2, SWIG_Callback11_t callbackSelectSubentity__SWIG_3, SWIG_Callback12_t callbackSelectSubentity__SWIG_4, SWIG_Callback13_t callbackSelect__SWIG_4, SWIG_Callback14_t callbackSelect__SWIG_5, SWIG_Callback15_t callbackDeSelect__SWIG_0, SWIG_Callback16_t callbackDeSelect__SWIG_1, SWIG_Callback17_t callbackDeSelect__SWIG_2, SWIG_Callback18_t callbackDeSelect__SWIG_3, SWIG_Callback19_t callbackDeSelect__SWIG_4, SWIG_Callback20_t callbackDeSelect__SWIG_5, SWIG_Callback21_t callbackDeSelectRegion__SWIG_0, SWIG_Callback22_t callbackDeSelectRegion__SWIG_1, SWIG_Callback23_t callbackDeSelectRegion__SWIG_2, SWIG_Callback24_t callbackDeSelectSubentity__SWIG_0, SWIG_Callback25_t callbackDeSelectSubentity__SWIG_1, SWIG_Callback26_t callbackSelectSubentityOOC__SWIG_0, SWIG_Callback27_t callbackSelectSubentityOOC__SWIG_1, SWIG_Callback28_t callbackSelectSubentityOOC__SWIG_2, SWIG_Callback29_t callbackSelectSubentityOOC__SWIG_3, SWIG_Callback30_t callbackSelectSubentityOOC__SWIG_4, SWIG_Callback31_t callbackDeSelectOOC__SWIG_0, SWIG_Callback32_t callbackDeSelectOOC__SWIG_1, SWIG_Callback33_t callbackHighlightRegionEdges__SWIG_0, SWIG_Callback34_t callbackHighlightRegionEdges__SWIG_1, SWIG_Callback35_t callbackHighlightAnnotations__SWIG_0, SWIG_Callback36_t callbackHighlightAnnotations__SWIG_1, SWIG_Callback37_t callbackHighlightRegionEdgesAutoVisibility__SWIG_0, SWIG_Callback38_t callbackHighlightRegionEdgesAutoVisibility__SWIG_1, SWIG_Callback39_t callbackHighlightRegionEdgesAutoVisibility__SWIG_2, SWIG_Callback40_t callbackHighlightRegionFacesAutoVisibility__SWIG_0, SWIG_Callback41_t callbackHighlightRegionFacesAutoVisibility__SWIG_1, SWIG_Callback42_t callbackDeSelectAll, SWIG_Callback43_t callbackIsSelected__SWIG_0, SWIG_Callback44_t callbackIsSelected__SWIG_1, SWIG_Callback45_t callbackIsSelected__SWIG_2, SWIG_Callback46_t callbackIsRegionSelected, SWIG_Callback47_t callbackIsHighlightSegment, SWIG_Callback48_t callbackSetSelectionFaceColor, SWIG_Callback49_t callbackSetGrayScale, SWIG_Callback50_t callbackSetInvisible, SWIG_Callback51_t callbackGetInvisible, SWIG_Callback52_t callbackSetAllowDisplacement, SWIG_Callback53_t callbackGetAllowDisplacement, SWIG_Callback54_t callbackGetSelectionFaceColor, SWIG_Callback55_t callbackSetSelectionEdgeColor, SWIG_Callback56_t callbackGetSelectionEdgeColor, SWIG_Callback57_t callbackSetSelectionCutEdgeColor, SWIG_Callback58_t callbackGetSelectionCutEdgeColor, SWIG_Callback59_t callbackSetSelectionCutFaceColor, SWIG_Callback60_t callbackGetSelectionCutFaceColor, SWIG_Callback61_t callbackSetSelectionMarkerColor, SWIG_Callback62_t callbackGetSelectionMarkerColor, SWIG_Callback63_t callbackSetSelectionEdgeWeight, SWIG_Callback64_t callbackGetSelectionEdgeWeight, SWIG_Callback65_t callbackSetSelectionMarkerSize, SWIG_Callback66_t callbackGetSelectionMarkerSize, SWIG_Callback67_t callbackGetAt, SWIG_Callback68_t callbackGetAll, SWIG_Callback69_t callbackReset, SWIG_Callback70_t callbackDeleteSelection__SWIG_0, SWIG_Callback71_t callbackDeleteSelection__SWIG_1, SWIG_Callback72_t callbackGetSubwindowPenetration, SWIG_Callback73_t callbackSetSubwindowPenetration, SWIG_Callback74_t callbackGetAllowSubentitySelection, SWIG_Callback75_t callbackSetAllowSubentitySelection, SWIG_Callback76_t callbackGetSelectionLevel, SWIG_Callback77_t callbackSetSelectionLevel, SWIG_Callback78_t callbackGetAllowEntitySelection, SWIG_Callback79_t callbackSetAllowEntitySelection, SWIG_Callback80_t callbackGetAllowRegionSelection, SWIG_Callback81_t callbackSetAllowRegionSelection, SWIG_Callback82_t callbackGetHighlightMode, SWIG_Callback83_t callbackSetHighlightMode, SWIG_Callback84_t callbackSetHighlightTransparency, SWIG_Callback85_t callbackGetSelectionSegment, SWIG_Callback86_t callbackGetIsSelection, SWIG_Callback87_t callbackGetReferenceSelection, SWIG_Callback88_t callbackSetReferenceSelection, SWIG_Callback89_t callbackSetReferenceSelectionType, SWIG_Callback90_t callbackGetReferenceSelectionType, SWIG_Callback91_t callbackUpdateHighlightStyle, SWIG_Callback92_t callbackGetSubentityFaceSelection, SWIG_Callback93_t callbackSetSubentityFaceSelection, SWIG_Callback94_t callbackGetSubentityEdgeSelection, SWIG_Callback95_t callbackSetSubentityEdgeSelection, SWIG_Callback96_t callbackGetSubentityVertexSelection, SWIG_Callback97_t callbackSetSubentityVertexSelection, SWIG_Callback98_t callbackSetAllowSubentityDeselection, SWIG_Callback99_t callbackGetAllowSubentityDeselection, SWIG_Callback100_t callbackSetSubentityTracking, SWIG_Callback101_t callbackGetSubentityTracking, SWIG_Callback102_t callbackSetSelectWillNotify, SWIG_Callback103_t callbackGetSelectWillNotify) {
  swig_callbackUpdateTransparency__SWIG_0 = callbackUpdateTransparency__SWIG_0;
  swig_callbackUpdateTransparency__SWIG_1 = callbackUpdateTransparency__SWIG_1;
  swig_callbackInit = callbackInit;
  swig_callbackSelect__SWIG_0 = callbackSelect__SWIG_0;
  swig_callbackSelect__SWIG_1 = callbackSelect__SWIG_1;
  swig_callbackSelect__SWIG_2 = callbackSelect__SWIG_2;
  swig_callbackSelect__SWIG_3 = callbackSelect__SWIG_3;
  swig_callbackSelectRegion = callbackSelectRegion;
  swig_callbackSelectSubentity__SWIG_0 = callbackSelectSubentity__SWIG_0;
  swig_callbackSelectSubentity__SWIG_1 = callbackSelectSubentity__SWIG_1;
  swig_callbackSelectSubentity__SWIG_2 = callbackSelectSubentity__SWIG_2;
  swig_callbackSelectSubentity__SWIG_3 = callbackSelectSubentity__SWIG_3;
  swig_callbackSelectSubentity__SWIG_4 = callbackSelectSubentity__SWIG_4;
  swig_callbackSelect__SWIG_4 = callbackSelect__SWIG_4;
  swig_callbackSelect__SWIG_5 = callbackSelect__SWIG_5;
  swig_callbackDeSelect__SWIG_0 = callbackDeSelect__SWIG_0;
  swig_callbackDeSelect__SWIG_1 = callbackDeSelect__SWIG_1;
  swig_callbackDeSelect__SWIG_2 = callbackDeSelect__SWIG_2;
  swig_callbackDeSelect__SWIG_3 = callbackDeSelect__SWIG_3;
  swig_callbackDeSelect__SWIG_4 = callbackDeSelect__SWIG_4;
  swig_callbackDeSelect__SWIG_5 = callbackDeSelect__SWIG_5;
  swig_callbackDeSelectRegion__SWIG_0 = callbackDeSelectRegion__SWIG_0;
  swig_callbackDeSelectRegion__SWIG_1 = callbackDeSelectRegion__SWIG_1;
  swig_callbackDeSelectRegion__SWIG_2 = callbackDeSelectRegion__SWIG_2;
  swig_callbackDeSelectSubentity__SWIG_0 = callbackDeSelectSubentity__SWIG_0;
  swig_callbackDeSelectSubentity__SWIG_1 = callbackDeSelectSubentity__SWIG_1;
  swig_callbackSelectSubentityOOC__SWIG_0 = callbackSelectSubentityOOC__SWIG_0;
  swig_callbackSelectSubentityOOC__SWIG_1 = callbackSelectSubentityOOC__SWIG_1;
  swig_callbackSelectSubentityOOC__SWIG_2 = callbackSelectSubentityOOC__SWIG_2;
  swig_callbackSelectSubentityOOC__SWIG_3 = callbackSelectSubentityOOC__SWIG_3;
  swig_callbackSelectSubentityOOC__SWIG_4 = callbackSelectSubentityOOC__SWIG_4;
  swig_callbackDeSelectOOC__SWIG_0 = callbackDeSelectOOC__SWIG_0;
  swig_callbackDeSelectOOC__SWIG_1 = callbackDeSelectOOC__SWIG_1;
  swig_callbackHighlightRegionEdges__SWIG_0 = callbackHighlightRegionEdges__SWIG_0;
  swig_callbackHighlightRegionEdges__SWIG_1 = callbackHighlightRegionEdges__SWIG_1;
  swig_callbackHighlightAnnotations__SWIG_0 = callbackHighlightAnnotations__SWIG_0;
  swig_callbackHighlightAnnotations__SWIG_1 = callbackHighlightAnnotations__SWIG_1;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_0 = callbackHighlightRegionEdgesAutoVisibility__SWIG_0;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_1 = callbackHighlightRegionEdgesAutoVisibility__SWIG_1;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_2 = callbackHighlightRegionEdgesAutoVisibility__SWIG_2;
  swig_callbackHighlightRegionFacesAutoVisibility__SWIG_0 = callbackHighlightRegionFacesAutoVisibility__SWIG_0;
  swig_callbackHighlightRegionFacesAutoVisibility__SWIG_1 = callbackHighlightRegionFacesAutoVisibility__SWIG_1;
  swig_callbackDeSelectAll = callbackDeSelectAll;
  swig_callbackIsSelected__SWIG_0 = callbackIsSelected__SWIG_0;
  swig_callbackIsSelected__SWIG_1 = callbackIsSelected__SWIG_1;
  swig_callbackIsSelected__SWIG_2 = callbackIsSelected__SWIG_2;
  swig_callbackIsRegionSelected = callbackIsRegionSelected;
  swig_callbackIsHighlightSegment = callbackIsHighlightSegment;
  swig_callbackSetSelectionFaceColor = callbackSetSelectionFaceColor;
  swig_callbackSetGrayScale = callbackSetGrayScale;
  swig_callbackSetInvisible = callbackSetInvisible;
  swig_callbackGetInvisible = callbackGetInvisible;
  swig_callbackSetAllowDisplacement = callbackSetAllowDisplacement;
  swig_callbackGetAllowDisplacement = callbackGetAllowDisplacement;
  swig_callbackGetSelectionFaceColor = callbackGetSelectionFaceColor;
  swig_callbackSetSelectionEdgeColor = callbackSetSelectionEdgeColor;
  swig_callbackGetSelectionEdgeColor = callbackGetSelectionEdgeColor;
  swig_callbackSetSelectionCutEdgeColor = callbackSetSelectionCutEdgeColor;
  swig_callbackGetSelectionCutEdgeColor = callbackGetSelectionCutEdgeColor;
  swig_callbackSetSelectionCutFaceColor = callbackSetSelectionCutFaceColor;
  swig_callbackGetSelectionCutFaceColor = callbackGetSelectionCutFaceColor;
  swig_callbackSetSelectionMarkerColor = callbackSetSelectionMarkerColor;
  swig_callbackGetSelectionMarkerColor = callbackGetSelectionMarkerColor;
  swig_callbackSetSelectionEdgeWeight = callbackSetSelectionEdgeWeight;
  swig_callbackGetSelectionEdgeWeight = callbackGetSelectionEdgeWeight;
  swig_callbackSetSelectionMarkerSize = callbackSetSelectionMarkerSize;
  swig_callbackGetSelectionMarkerSize = callbackGetSelectionMarkerSize;
  swig_callbackGetAt = callbackGetAt;
  swig_callbackGetAll = callbackGetAll;
  swig_callbackReset = callbackReset;
  swig_callbackDeleteSelection__SWIG_0 = callbackDeleteSelection__SWIG_0;
  swig_callbackDeleteSelection__SWIG_1 = callbackDeleteSelection__SWIG_1;
  swig_callbackGetSubwindowPenetration = callbackGetSubwindowPenetration;
  swig_callbackSetSubwindowPenetration = callbackSetSubwindowPenetration;
  swig_callbackGetAllowSubentitySelection = callbackGetAllowSubentitySelection;
  swig_callbackSetAllowSubentitySelection = callbackSetAllowSubentitySelection;
  swig_callbackGetSelectionLevel = callbackGetSelectionLevel;
  swig_callbackSetSelectionLevel = callbackSetSelectionLevel;
  swig_callbackGetAllowEntitySelection = callbackGetAllowEntitySelection;
  swig_callbackSetAllowEntitySelection = callbackSetAllowEntitySelection;
  swig_callbackGetAllowRegionSelection = callbackGetAllowRegionSelection;
  swig_callbackSetAllowRegionSelection = callbackSetAllowRegionSelection;
  swig_callbackGetHighlightMode = callbackGetHighlightMode;
  swig_callbackSetHighlightMode = callbackSetHighlightMode;
  swig_callbackSetHighlightTransparency = callbackSetHighlightTransparency;
  swig_callbackGetSelectionSegment = callbackGetSelectionSegment;
  swig_callbackGetIsSelection = callbackGetIsSelection;
  swig_callbackGetReferenceSelection = callbackGetReferenceSelection;
  swig_callbackSetReferenceSelection = callbackSetReferenceSelection;
  swig_callbackSetReferenceSelectionType = callbackSetReferenceSelectionType;
  swig_callbackGetReferenceSelectionType = callbackGetReferenceSelectionType;
  swig_callbackUpdateHighlightStyle = callbackUpdateHighlightStyle;
  swig_callbackGetSubentityFaceSelection = callbackGetSubentityFaceSelection;
  swig_callbackSetSubentityFaceSelection = callbackSetSubentityFaceSelection;
  swig_callbackGetSubentityEdgeSelection = callbackGetSubentityEdgeSelection;
  swig_callbackSetSubentityEdgeSelection = callbackSetSubentityEdgeSelection;
  swig_callbackGetSubentityVertexSelection = callbackGetSubentityVertexSelection;
  swig_callbackSetSubentityVertexSelection = callbackSetSubentityVertexSelection;
  swig_callbackSetAllowSubentityDeselection = callbackSetAllowSubentityDeselection;
  swig_callbackGetAllowSubentityDeselection = callbackGetAllowSubentityDeselection;
  swig_callbackSetSubentityTracking = callbackSetSubentityTracking;
  swig_callbackGetSubentityTracking = callbackGetSubentityTracking;
  swig_callbackSetSelectWillNotify = callbackSetSelectWillNotify;
  swig_callbackGetSelectWillNotify = callbackGetSelectWillNotify;
}

void SwigDirector_HSelectionSet::swig_init_callbacks() {
  swig_callbackUpdateTransparency__SWIG_0 = 0;
  swig_callbackUpdateTransparency__SWIG_1 = 0;
  swig_callbackInit = 0;
  swig_callbackSelect__SWIG_0 = 0;
  swig_callbackSelect__SWIG_1 = 0;
  swig_callbackSelect__SWIG_2 = 0;
  swig_callbackSelect__SWIG_3 = 0;
  swig_callbackSelectRegion = 0;
  swig_callbackSelectSubentity__SWIG_0 = 0;
  swig_callbackSelectSubentity__SWIG_1 = 0;
  swig_callbackSelectSubentity__SWIG_2 = 0;
  swig_callbackSelectSubentity__SWIG_3 = 0;
  swig_callbackSelectSubentity__SWIG_4 = 0;
  swig_callbackSelect__SWIG_4 = 0;
  swig_callbackSelect__SWIG_5 = 0;
  swig_callbackDeSelect__SWIG_0 = 0;
  swig_callbackDeSelect__SWIG_1 = 0;
  swig_callbackDeSelect__SWIG_2 = 0;
  swig_callbackDeSelect__SWIG_3 = 0;
  swig_callbackDeSelect__SWIG_4 = 0;
  swig_callbackDeSelect__SWIG_5 = 0;
  swig_callbackDeSelectRegion__SWIG_0 = 0;
  swig_callbackDeSelectRegion__SWIG_1 = 0;
  swig_callbackDeSelectRegion__SWIG_2 = 0;
  swig_callbackDeSelectSubentity__SWIG_0 = 0;
  swig_callbackDeSelectSubentity__SWIG_1 = 0;
  swig_callbackSelectSubentityOOC__SWIG_0 = 0;
  swig_callbackSelectSubentityOOC__SWIG_1 = 0;
  swig_callbackSelectSubentityOOC__SWIG_2 = 0;
  swig_callbackSelectSubentityOOC__SWIG_3 = 0;
  swig_callbackSelectSubentityOOC__SWIG_4 = 0;
  swig_callbackDeSelectOOC__SWIG_0 = 0;
  swig_callbackDeSelectOOC__SWIG_1 = 0;
  swig_callbackHighlightRegionEdges__SWIG_0 = 0;
  swig_callbackHighlightRegionEdges__SWIG_1 = 0;
  swig_callbackHighlightAnnotations__SWIG_0 = 0;
  swig_callbackHighlightAnnotations__SWIG_1 = 0;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_0 = 0;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_1 = 0;
  swig_callbackHighlightRegionEdgesAutoVisibility__SWIG_2 = 0;
  swig_callbackHighlightRegionFacesAutoVisibility__SWIG_0 = 0;
  swig_callbackHighlightRegionFacesAutoVisibility__SWIG_1 = 0;
  swig_callbackDeSelectAll = 0;
  swig_callbackIsSelected__SWIG_0 = 0;
  swig_callbackIsSelected__SWIG_1 = 0;
  swig_callbackIsSelected__SWIG_2 = 0;
  swig_callbackIsRegionSelected = 0;
  swig_callbackIsHighlightSegment = 0;
  swig_callbackSetSelectionFaceColor = 0;
  swig_callbackSetGrayScale = 0;
  swig_callbackSetInvisible = 0;
  swig_callbackGetInvisible = 0;
  swig_callbackSetAllowDisplacement = 0;
  swig_callbackGetAllowDisplacement = 0;
  swig_callbackGetSelectionFaceColor = 0;
  swig_callbackSetSelectionEdgeColor = 0;
  swig_callbackGetSelectionEdgeColor = 0;
  swig_callbackSetSelectionCutEdgeColor = 0;
  swig_callbackGetSelectionCutEdgeColor = 0;
  swig_callbackSetSelectionCutFaceColor = 0;
  swig_callbackGetSelectionCutFaceColor = 0;
  swig_callbackSetSelectionMarkerColor = 0;
  swig_callbackGetSelectionMarkerColor = 0;
  swig_callbackSetSelectionEdgeWeight = 0;
  swig_callbackGetSelectionEdgeWeight = 0;
  swig_callbackSetSelectionMarkerSize = 0;
  swig_callbackGetSelectionMarkerSize = 0;
  swig_callbackGetAt = 0;
  swig_callbackGetAll = 0;
  swig_callbackReset = 0;
  swig_callbackDeleteSelection__SWIG_0 = 0;
  swig_callbackDeleteSelection__SWIG_1 = 0;
  swig_callbackGetSubwindowPenetration = 0;
  swig_callbackSetSubwindowPenetration = 0;
  swig_callbackGetAllowSubentitySelection = 0;
  swig_callbackSetAllowSubentitySelection = 0;
  swig_callbackGetSelectionLevel = 0;
  swig_callbackSetSelectionLevel = 0;
  swig_callbackGetAllowEntitySelection = 0;
  swig_callbackSetAllowEntitySelection = 0;
  swig_callbackGetAllowRegionSelection = 0;
  swig_callbackSetAllowRegionSelection = 0;
  swig_callbackGetHighlightMode = 0;
  swig_callbackSetHighlightMode = 0;
  swig_callbackSetHighlightTransparency = 0;
  swig_callbackGetSelectionSegment = 0;
  swig_callbackGetIsSelection = 0;
  swig_callbackGetReferenceSelection = 0;
  swig_callbackSetReferenceSelection = 0;
  swig_callbackSetReferenceSelectionType = 0;
  swig_callbackGetReferenceSelectionType = 0;
  swig_callbackUpdateHighlightStyle = 0;
  swig_callbackGetSubentityFaceSelection = 0;
  swig_callbackSetSubentityFaceSelection = 0;
  swig_callbackGetSubentityEdgeSelection = 0;
  swig_callbackSetSubentityEdgeSelection = 0;
  swig_callbackGetSubentityVertexSelection = 0;
  swig_callbackSetSubentityVertexSelection = 0;
  swig_callbackSetAllowSubentityDeselection = 0;
  swig_callbackGetAllowSubentityDeselection = 0;
  swig_callbackSetSubentityTracking = 0;
  swig_callbackGetSubentityTracking = 0;
  swig_callbackSetSelectWillNotify = 0;
  swig_callbackGetSelectWillNotify = 0;
}

SwigDirector_HObject::SwigDirector_HObject() : HObject(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HObject::~SwigDirector_HObject() {
  
}


char const *SwigDirector_HObject::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    throw Swig::DirectorPureVirtualException("HObject::GetName");
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HObject::swig_connect_director(SWIG_Callback0_t callbackGetName) {
  swig_callbackGetName = callbackGetName;
}

void SwigDirector_HObject::swig_init_callbacks() {
  swig_callbackGetName = 0;
}

SwigDirector_HMarkupManager::SwigDirector_HMarkupManager(HBaseView *view) : HMarkupManager(view), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HMarkupManager::~SwigDirector_HMarkupManager() {
  
}


HC_KEY SwigDirector_HMarkupManager::OpenLayer(char const *layername, bool setcamera, bool emit_message) {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  char * jlayername = 0 ;
  bool jsetcamera  ;
  bool jemit_message  ;
  
  if (!swig_callbackOpenLayer__SWIG_0) {
    return HMarkupManager::OpenLayer(layername,setcamera,emit_message);
  } else {
    jlayername = SWIG_csharp_string_callback((const char *)layername); 
    jsetcamera = setcamera;
    jemit_message = emit_message;
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackOpenLayer__SWIG_0(jlayername, jsetcamera, jemit_message);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HMarkupManager::RenameLayer(HC_KEY laykey, char const *new_name) {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  MVO_POINTER_SIZED_INT jlaykey  ;
  char * jnew_name = 0 ;
  
  if (!swig_callbackRenameLayer) {
    return HMarkupManager::RenameLayer(laykey,new_name);
  } else {
    jlaykey = laykey;
    jnew_name = SWIG_csharp_string_callback((const char *)new_name); 
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackRenameLayer(jlaykey, jnew_name);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HMarkupManager::CopyLayer(HC_KEY laykey, char const *new_name) {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  MVO_POINTER_SIZED_INT jlaykey  ;
  char * jnew_name = 0 ;
  
  if (!swig_callbackCopyLayer) {
    return HMarkupManager::CopyLayer(laykey,new_name);
  } else {
    jlaykey = laykey;
    jnew_name = SWIG_csharp_string_callback((const char *)new_name); 
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackCopyLayer(jlaykey, jnew_name);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HMarkupManager::GetCamera(HC_KEY layerkey, HCamera &cam) const {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  MVO_POINTER_SIZED_INT jlayerkey  ;
  void * jcam = 0 ;
  
  if (!swig_callbackGetCamera) {
    return HMarkupManager::GetCamera(layerkey,cam);
  } else {
    jlayerkey = layerkey;
    jcam = (HCamera *) &cam; 
    jresult = (bool) swig_callbackGetCamera(jlayerkey, jcam);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

HC_KEY SwigDirector_HMarkupManager::OpenLayer(HC_KEY layerkey, bool setcamera) {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  MVO_POINTER_SIZED_INT jlayerkey  ;
  bool jsetcamera  ;
  
  if (!swig_callbackOpenLayer__SWIG_3) {
    return HMarkupManager::OpenLayer(layerkey,setcamera);
  } else {
    jlayerkey = layerkey;
    jsetcamera = setcamera;
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackOpenLayer__SWIG_3(jlayerkey, jsetcamera);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

HC_KEY SwigDirector_HMarkupManager::FindLayer(char const *layername) const {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  char * jlayername = 0 ;
  
  if (!swig_callbackFindLayer) {
    return HMarkupManager::FindLayer(layername);
  } else {
    jlayername = SWIG_csharp_string_callback((const char *)layername); 
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackFindLayer(jlayername);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

char const *SwigDirector_HMarkupManager::GetLayerNames() const {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetLayerNames) {
    return HMarkupManager::GetLayerNames();
  } else {
    jresult = (char *) swig_callbackGetLayerNames();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

HC_KEY SwigDirector_HMarkupManager::GetCurrentLayerKey() const {
  HC_KEY c_result = SwigValueInit< HC_KEY >() ;
  MVO_POINTER_SIZED_INT jresult = 0 ;
  
  if (!swig_callbackGetCurrentLayerKey) {
    return HMarkupManager::GetCurrentLayerKey();
  } else {
    jresult = (MVO_POINTER_SIZED_INT) swig_callbackGetCurrentLayerKey();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type HC_KEY", 0);
      return c_result;
    }
    c_result = *(HC_KEY *)jresult; 
  }
  return c_result;
}

char const *SwigDirector_HMarkupManager::GetCurrentLayerName() const {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetCurrentLayerName) {
    return HMarkupManager::GetCurrentLayerName();
  } else {
    jresult = (char *) swig_callbackGetCurrentLayerName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HMarkupManager::DisableCurrentLayer(bool emit_message) {
  bool jemit_message  ;
  
  if (!swig_callbackDisableCurrentLayer__SWIG_0) {
    HMarkupManager::DisableCurrentLayer(emit_message);
    return;
  } else {
    jemit_message = emit_message;
    swig_callbackDisableCurrentLayer__SWIG_0(jemit_message);
  }
}

void SwigDirector_HMarkupManager::DeleteLayer(char const *layername) {
  char * jlayername = 0 ;
  
  if (!swig_callbackDeleteLayer__SWIG_0) {
    HMarkupManager::DeleteLayer(layername);
    return;
  } else {
    jlayername = SWIG_csharp_string_callback((const char *)layername); 
    swig_callbackDeleteLayer__SWIG_0(jlayername);
  }
}

void SwigDirector_HMarkupManager::DeleteLayer(HC_KEY layerkey) {
  MVO_POINTER_SIZED_INT jlayerkey  ;
  
  if (!swig_callbackDeleteLayer__SWIG_1) {
    HMarkupManager::DeleteLayer(layerkey);
    return;
  } else {
    jlayerkey = layerkey;
    swig_callbackDeleteLayer__SWIG_1(jlayerkey);
  }
}

float SwigDirector_HMarkupManager::GetMarkupWeight() {
  float c_result = SwigValueInit< float >() ;
  float jresult = 0 ;
  
  if (!swig_callbackGetMarkupWeight) {
    return HMarkupManager::GetMarkupWeight();
  } else {
    jresult = (float) swig_callbackGetMarkupWeight();
    c_result = (float)jresult; 
  }
  return c_result;
}

void SwigDirector_HMarkupManager::SetMarkupWeight(float weight) {
  float jweight  ;
  
  if (!swig_callbackSetMarkupWeight) {
    HMarkupManager::SetMarkupWeight(weight);
    return;
  } else {
    jweight = weight;
    swig_callbackSetMarkupWeight(jweight);
  }
}

void SwigDirector_HMarkupManager::GetMarkupColor(HPoint &markup_color) {
  void * jmarkup_color = 0 ;
  
  if (!swig_callbackGetMarkupColor) {
    HMarkupManager::GetMarkupColor(markup_color);
    return;
  } else {
    jmarkup_color = (HPoint *) &markup_color; 
    swig_callbackGetMarkupColor(jmarkup_color);
  }
}

void SwigDirector_HMarkupManager::SetMarkupColor(HPoint markup_color) {
  void * jmarkup_color  ;
  
  if (!swig_callbackSetMarkupColor) {
    HMarkupManager::SetMarkupColor(markup_color);
    return;
  } else {
    jmarkup_color = (void *)&markup_color; 
    swig_callbackSetMarkupColor(jmarkup_color);
  }
}

void SwigDirector_HMarkupManager::EmitMarkupSegment(HC_KEY key) {
  MVO_POINTER_SIZED_INT jkey  ;
  
  if (!swig_callbackEmitMarkupSegment) {
    HMarkupManager::EmitMarkupSegment(key);
    return;
  } else {
    jkey = key;
    swig_callbackEmitMarkupSegment(jkey);
  }
}

void SwigDirector_HMarkupManager::InsertMarkupSegmentFromMessage(char const *in_data, unsigned int data_length) {
  char * jin_data = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackInsertMarkupSegmentFromMessage) {
    HMarkupManager::InsertMarkupSegmentFromMessage(in_data,data_length);
    return;
  } else {
    jin_data = SWIG_csharp_string_callback((const char *)in_data); 
    jdata_length = data_length;
    swig_callbackInsertMarkupSegmentFromMessage(jin_data, jdata_length);
  }
}

void SwigDirector_HMarkupManager::EmitDisableCurrentMarkupLayer() {
  if (!swig_callbackEmitDisableCurrentMarkupLayer) {
    HMarkupManager::EmitDisableCurrentMarkupLayer();
    return;
  } else {
    swig_callbackEmitDisableCurrentMarkupLayer();
  }
}

void SwigDirector_HMarkupManager::DisableCurrentMarkupLayerFromMessage(char const *data, unsigned int data_length) {
  char * jdata = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackDisableCurrentMarkupLayerFromMessage) {
    HMarkupManager::DisableCurrentMarkupLayerFromMessage(data,data_length);
    return;
  } else {
    jdata = SWIG_csharp_string_callback((const char *)data); 
    jdata_length = data_length;
    swig_callbackDisableCurrentMarkupLayerFromMessage(jdata, jdata_length);
  }
}

void SwigDirector_HMarkupManager::EmitSetMarkupLayer(char const *layer) {
  char * jlayer = 0 ;
  
  if (!swig_callbackEmitSetMarkupLayer) {
    HMarkupManager::EmitSetMarkupLayer(layer);
    return;
  } else {
    jlayer = SWIG_csharp_string_callback((const char *)layer); 
    swig_callbackEmitSetMarkupLayer(jlayer);
  }
}

void SwigDirector_HMarkupManager::SetMarkupLayerFromMessage(char const *data, unsigned int data_length) {
  char * jdata = 0 ;
  unsigned int jdata_length  ;
  
  if (!swig_callbackSetMarkupLayerFromMessage) {
    HMarkupManager::SetMarkupLayerFromMessage(data,data_length);
    return;
  } else {
    jdata = SWIG_csharp_string_callback((const char *)data); 
    jdata_length = data_length;
    swig_callbackSetMarkupLayerFromMessage(jdata, jdata_length);
  }
}

void SwigDirector_HMarkupManager::UpdatePreviewImage(bool forceUpdate) {
  bool jforceUpdate  ;
  
  if (!swig_callbackUpdatePreviewImage__SWIG_0) {
    HMarkupManager::UpdatePreviewImage(forceUpdate);
    return;
  } else {
    jforceUpdate = forceUpdate;
    swig_callbackUpdatePreviewImage__SWIG_0(jforceUpdate);
  }
}

void SwigDirector_HMarkupManager::SetupNewLayer() {
  if (!swig_callbackSetupNewLayer) {
    HMarkupManager::SetupNewLayer();
    return;
  } else {
    swig_callbackSetupNewLayer();
  }
}

void SwigDirector_HMarkupManager::OpenLayerInternal(HC_KEY layerkey, bool setcamera) {
  MVO_POINTER_SIZED_INT jlayerkey  ;
  bool jsetcamera  ;
  
  if (!swig_callbackOpenLayerInternal) {
    HMarkupManager::OpenLayerInternal(layerkey,setcamera);
    return;
  } else {
    jlayerkey = layerkey;
    jsetcamera = setcamera;
    swig_callbackOpenLayerInternal(jlayerkey, jsetcamera);
  }
}

void SwigDirector_HMarkupManager::swig_connect_director(SWIG_Callback0_t callbackOpenLayer__SWIG_0, SWIG_Callback1_t callbackOpenLayer__SWIG_1, SWIG_Callback2_t callbackOpenLayer__SWIG_2, SWIG_Callback3_t callbackRenameLayer, SWIG_Callback4_t callbackCopyLayer, SWIG_Callback5_t callbackGetCamera, SWIG_Callback6_t callbackOpenLayer__SWIG_3, SWIG_Callback7_t callbackOpenLayer__SWIG_4, SWIG_Callback8_t callbackFindLayer, SWIG_Callback9_t callbackGetLayerNames, SWIG_Callback10_t callbackGetCurrentLayerKey, SWIG_Callback11_t callbackGetCurrentLayerName, SWIG_Callback12_t callbackDisableCurrentLayer__SWIG_0, SWIG_Callback13_t callbackDisableCurrentLayer__SWIG_1, SWIG_Callback14_t callbackDeleteLayer__SWIG_0, SWIG_Callback15_t callbackDeleteLayer__SWIG_1, SWIG_Callback16_t callbackGetMarkupWeight, SWIG_Callback17_t callbackSetMarkupWeight, SWIG_Callback18_t callbackGetMarkupColor, SWIG_Callback19_t callbackSetMarkupColor, SWIG_Callback20_t callbackEmitMarkupSegment, SWIG_Callback21_t callbackInsertMarkupSegmentFromMessage, SWIG_Callback22_t callbackEmitDisableCurrentMarkupLayer, SWIG_Callback23_t callbackDisableCurrentMarkupLayerFromMessage, SWIG_Callback24_t callbackEmitSetMarkupLayer, SWIG_Callback25_t callbackSetMarkupLayerFromMessage, SWIG_Callback26_t callbackUpdatePreviewImage__SWIG_0, SWIG_Callback27_t callbackUpdatePreviewImage__SWIG_1, SWIG_Callback28_t callbackSetupNewLayer, SWIG_Callback29_t callbackOpenLayerInternal) {
  swig_callbackOpenLayer__SWIG_0 = callbackOpenLayer__SWIG_0;
  swig_callbackOpenLayer__SWIG_1 = callbackOpenLayer__SWIG_1;
  swig_callbackOpenLayer__SWIG_2 = callbackOpenLayer__SWIG_2;
  swig_callbackRenameLayer = callbackRenameLayer;
  swig_callbackCopyLayer = callbackCopyLayer;
  swig_callbackGetCamera = callbackGetCamera;
  swig_callbackOpenLayer__SWIG_3 = callbackOpenLayer__SWIG_3;
  swig_callbackOpenLayer__SWIG_4 = callbackOpenLayer__SWIG_4;
  swig_callbackFindLayer = callbackFindLayer;
  swig_callbackGetLayerNames = callbackGetLayerNames;
  swig_callbackGetCurrentLayerKey = callbackGetCurrentLayerKey;
  swig_callbackGetCurrentLayerName = callbackGetCurrentLayerName;
  swig_callbackDisableCurrentLayer__SWIG_0 = callbackDisableCurrentLayer__SWIG_0;
  swig_callbackDisableCurrentLayer__SWIG_1 = callbackDisableCurrentLayer__SWIG_1;
  swig_callbackDeleteLayer__SWIG_0 = callbackDeleteLayer__SWIG_0;
  swig_callbackDeleteLayer__SWIG_1 = callbackDeleteLayer__SWIG_1;
  swig_callbackGetMarkupWeight = callbackGetMarkupWeight;
  swig_callbackSetMarkupWeight = callbackSetMarkupWeight;
  swig_callbackGetMarkupColor = callbackGetMarkupColor;
  swig_callbackSetMarkupColor = callbackSetMarkupColor;
  swig_callbackEmitMarkupSegment = callbackEmitMarkupSegment;
  swig_callbackInsertMarkupSegmentFromMessage = callbackInsertMarkupSegmentFromMessage;
  swig_callbackEmitDisableCurrentMarkupLayer = callbackEmitDisableCurrentMarkupLayer;
  swig_callbackDisableCurrentMarkupLayerFromMessage = callbackDisableCurrentMarkupLayerFromMessage;
  swig_callbackEmitSetMarkupLayer = callbackEmitSetMarkupLayer;
  swig_callbackSetMarkupLayerFromMessage = callbackSetMarkupLayerFromMessage;
  swig_callbackUpdatePreviewImage__SWIG_0 = callbackUpdatePreviewImage__SWIG_0;
  swig_callbackUpdatePreviewImage__SWIG_1 = callbackUpdatePreviewImage__SWIG_1;
  swig_callbackSetupNewLayer = callbackSetupNewLayer;
  swig_callbackOpenLayerInternal = callbackOpenLayerInternal;
}

void SwigDirector_HMarkupManager::swig_init_callbacks() {
  swig_callbackOpenLayer__SWIG_0 = 0;
  swig_callbackOpenLayer__SWIG_1 = 0;
  swig_callbackOpenLayer__SWIG_2 = 0;
  swig_callbackRenameLayer = 0;
  swig_callbackCopyLayer = 0;
  swig_callbackGetCamera = 0;
  swig_callbackOpenLayer__SWIG_3 = 0;
  swig_callbackOpenLayer__SWIG_4 = 0;
  swig_callbackFindLayer = 0;
  swig_callbackGetLayerNames = 0;
  swig_callbackGetCurrentLayerKey = 0;
  swig_callbackGetCurrentLayerName = 0;
  swig_callbackDisableCurrentLayer__SWIG_0 = 0;
  swig_callbackDisableCurrentLayer__SWIG_1 = 0;
  swig_callbackDeleteLayer__SWIG_0 = 0;
  swig_callbackDeleteLayer__SWIG_1 = 0;
  swig_callbackGetMarkupWeight = 0;
  swig_callbackSetMarkupWeight = 0;
  swig_callbackGetMarkupColor = 0;
  swig_callbackSetMarkupColor = 0;
  swig_callbackEmitMarkupSegment = 0;
  swig_callbackInsertMarkupSegmentFromMessage = 0;
  swig_callbackEmitDisableCurrentMarkupLayer = 0;
  swig_callbackDisableCurrentMarkupLayerFromMessage = 0;
  swig_callbackEmitSetMarkupLayer = 0;
  swig_callbackSetMarkupLayerFromMessage = 0;
  swig_callbackUpdatePreviewImage__SWIG_0 = 0;
  swig_callbackUpdatePreviewImage__SWIG_1 = 0;
  swig_callbackSetupNewLayer = 0;
  swig_callbackOpenLayerInternal = 0;
}

SwigDirector_HUndoItem::SwigDirector_HUndoItem() : HUndoItem(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HUndoItem::~SwigDirector_HUndoItem() {
  
}


void SwigDirector_HUndoItem::Undo(bool setupOnly) {
  bool jsetupOnly  ;
  
  if (!swig_callbackUndo__SWIG_0) {
    HUndoItem::Undo(setupOnly);
    return;
  } else {
    jsetupOnly = setupOnly;
    swig_callbackUndo__SWIG_0(jsetupOnly);
  }
}

void SwigDirector_HUndoItem::Redo(bool setupOnly) {
  bool jsetupOnly  ;
  
  if (!swig_callbackRedo__SWIG_0) {
    HUndoItem::Redo(setupOnly);
    return;
  } else {
    jsetupOnly = setupOnly;
    swig_callbackRedo__SWIG_0(jsetupOnly);
  }
}

char const *SwigDirector_HUndoItem::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HUndoItem::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_HUndoItem::swig_connect_director(SWIG_Callback0_t callbackUndo__SWIG_0, SWIG_Callback1_t callbackUndo__SWIG_1, SWIG_Callback2_t callbackRedo__SWIG_0, SWIG_Callback3_t callbackRedo__SWIG_1, SWIG_Callback4_t callbackGetName) {
  swig_callbackUndo__SWIG_0 = callbackUndo__SWIG_0;
  swig_callbackUndo__SWIG_1 = callbackUndo__SWIG_1;
  swig_callbackRedo__SWIG_0 = callbackRedo__SWIG_0;
  swig_callbackRedo__SWIG_1 = callbackRedo__SWIG_1;
  swig_callbackGetName = callbackGetName;
}

void SwigDirector_HUndoItem::swig_init_callbacks() {
  swig_callbackUndo__SWIG_0 = 0;
  swig_callbackUndo__SWIG_1 = 0;
  swig_callbackRedo__SWIG_0 = 0;
  swig_callbackRedo__SWIG_1 = 0;
  swig_callbackGetName = 0;
}

SwigDirector_HOpCameraOrbitTurntable::SwigDirector_HOpCameraOrbitTurntable(HBaseView *view, int DoRepeat, int DoCapture) : HOpCameraOrbitTurntable(view, DoRepeat, DoCapture), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_HOpCameraOrbitTurntable::~SwigDirector_HOpCameraOrbitTurntable() {
  
}


HEventListener *SwigDirector_HOpCameraOrbitTurntable::CreateListenerManager() {
  HEventListener *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackCreateListenerManager) {
    return HMouseListener::CreateListenerManager();
  } else {
    jresult = (void *) swig_callbackCreateListenerManager();
    c_result = (HEventListener *)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnLButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDown) {
    return HOpCameraOrbitTurntable::OnLButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMouseMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseMove) {
    return HBaseOperator::OnMouseMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnLButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonUp) {
    return HOpCameraOrbitTurntable::OnLButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnLButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDblClk) {
    return HBaseOperator::OnLButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDown) {
    return HBaseOperator::OnMButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonUp) {
    return HBaseOperator::OnMButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDblClk) {
    return HBaseOperator::OnMButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnRButtonDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDown) {
    return HBaseOperator::OnRButtonDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnRButtonUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonUp) {
    return HBaseOperator::OnRButtonUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnRButtonDblClk(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDblClk) {
    return HBaseOperator::OnRButtonDblClk(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDblClk(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMouseWheel(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMouseWheel) {
    return HOpCameraOrbitTurntable::OnMouseWheel(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMouseWheel(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnKeyDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyDown) {
    return HBaseOperator::OnKeyDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnKeyUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnKeyUp) {
    return HBaseOperator::OnKeyUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnKeyUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnTouchesDown(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesDown) {
    return HBaseOperator::OnTouchesDown(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesDown(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnTouchesMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesMove) {
    return HBaseOperator::OnTouchesMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnTouchesUp(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTouchesUp) {
    return HBaseOperator::OnTouchesUp(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTouchesUp(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

HBaseOperator *SwigDirector_HOpCameraOrbitTurntable::Clone() {
  HBaseOperator *c_result = 0 ;
  void * jresult = 0 ;
  
  if (!swig_callbackClone) {
    return HOpCameraOrbitTurntable::Clone();
  } else {
    jresult = (void *) swig_callbackClone();
    c_result = (HBaseOperator *)jresult; 
  }
  return c_result;
}

bool SwigDirector_HOpCameraOrbitTurntable::OperatorStarted() {
  bool c_result = SwigValueInit< bool >() ;
  bool jresult = 0 ;
  
  if (!swig_callbackOperatorStarted) {
    return HBaseOperator::OperatorStarted();
  } else {
    jresult = (bool) swig_callbackOperatorStarted();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

char const *SwigDirector_HOpCameraOrbitTurntable::GetName() {
  char *c_result = 0 ;
  char * jresult = 0 ;
  
  if (!swig_callbackGetName) {
    return HOpCameraOrbitTurntable::GetName();
  } else {
    jresult = (char *) swig_callbackGetName();
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnLButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLButtonDownAndMove) {
    return HOpCameraOrbitTurntable::OnLButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnMButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnMButtonDownAndMove) {
    return HBaseOperator::OnMButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnMButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnRButtonDownAndMove) {
    return HBaseOperator::OnRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnLRButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnLRButtonDownAndMove) {
    return HBaseOperator::OnLRButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnLRButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnNoButtonDownAndMove(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnNoButtonDownAndMove) {
    return HBaseOperator::OnNoButtonDownAndMove(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnNoButtonDownAndMove(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_HOpCameraOrbitTurntable::OnTimer(HEventInfo &hevent) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jhevent = 0 ;
  
  if (!swig_callbackOnTimer) {
    return HBaseOperator::OnTimer(hevent);
  } else {
    jhevent = (HEventInfo *) &hevent; 
    jresult = (int) swig_callbackOnTimer(jhevent);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_HOpCameraOrbitTurntable::swig_connect_director(SWIG_Callback0_t callbackCreateListenerManager, SWIG_Callback1_t callbackOnLButtonDown, SWIG_Callback2_t callbackOnMouseMove, SWIG_Callback3_t callbackOnLButtonUp, SWIG_Callback4_t callbackOnLButtonDblClk, SWIG_Callback5_t callbackOnMButtonDown, SWIG_Callback6_t callbackOnMButtonUp, SWIG_Callback7_t callbackOnMButtonDblClk, SWIG_Callback8_t callbackOnRButtonDown, SWIG_Callback9_t callbackOnRButtonUp, SWIG_Callback10_t callbackOnRButtonDblClk, SWIG_Callback11_t callbackOnMouseWheel, SWIG_Callback12_t callbackOnKeyDown, SWIG_Callback13_t callbackOnKeyUp, SWIG_Callback14_t callbackOnTouchesDown, SWIG_Callback15_t callbackOnTouchesMove, SWIG_Callback16_t callbackOnTouchesUp, SWIG_Callback17_t callbackClone, SWIG_Callback18_t callbackOperatorStarted, SWIG_Callback19_t callbackGetName, SWIG_Callback20_t callbackOnLButtonDownAndMove, SWIG_Callback21_t callbackOnMButtonDownAndMove, SWIG_Callback22_t callbackOnRButtonDownAndMove, SWIG_Callback23_t callbackOnLRButtonDownAndMove, SWIG_Callback24_t callbackOnNoButtonDownAndMove, SWIG_Callback25_t callbackOnTimer) {
  swig_callbackCreateListenerManager = callbackCreateListenerManager;
  swig_callbackOnLButtonDown = callbackOnLButtonDown;
  swig_callbackOnMouseMove = callbackOnMouseMove;
  swig_callbackOnLButtonUp = callbackOnLButtonUp;
  swig_callbackOnLButtonDblClk = callbackOnLButtonDblClk;
  swig_callbackOnMButtonDown = callbackOnMButtonDown;
  swig_callbackOnMButtonUp = callbackOnMButtonUp;
  swig_callbackOnMButtonDblClk = callbackOnMButtonDblClk;
  swig_callbackOnRButtonDown = callbackOnRButtonDown;
  swig_callbackOnRButtonUp = callbackOnRButtonUp;
  swig_callbackOnRButtonDblClk = callbackOnRButtonDblClk;
  swig_callbackOnMouseWheel = callbackOnMouseWheel;
  swig_callbackOnKeyDown = callbackOnKeyDown;
  swig_callbackOnKeyUp = callbackOnKeyUp;
  swig_callbackOnTouchesDown = callbackOnTouchesDown;
  swig_callbackOnTouchesMove = callbackOnTouchesMove;
  swig_callbackOnTouchesUp = callbackOnTouchesUp;
  swig_callbackClone = callbackClone;
  swig_callbackOperatorStarted = callbackOperatorStarted;
  swig_callbackGetName = callbackGetName;
  swig_callbackOnLButtonDownAndMove = callbackOnLButtonDownAndMove;
  swig_callbackOnMButtonDownAndMove = callbackOnMButtonDownAndMove;
  swig_callbackOnRButtonDownAndMove = callbackOnRButtonDownAndMove;
  swig_callbackOnLRButtonDownAndMove = callbackOnLRButtonDownAndMove;
  swig_callbackOnNoButtonDownAndMove = callbackOnNoButtonDownAndMove;
  swig_callbackOnTimer = callbackOnTimer;
}

void SwigDirector_HOpCameraOrbitTurntable::swig_init_callbacks() {
  swig_callbackCreateListenerManager = 0;
  swig_callbackOnLButtonDown = 0;
  swig_callbackOnMouseMove = 0;
  swig_callbackOnLButtonUp = 0;
  swig_callbackOnLButtonDblClk = 0;
  swig_callbackOnMButtonDown = 0;
  swig_callbackOnMButtonUp = 0;
  swig_callbackOnMButtonDblClk = 0;
  swig_callbackOnRButtonDown = 0;
  swig_callbackOnRButtonUp = 0;
  swig_callbackOnRButtonDblClk = 0;
  swig_callbackOnMouseWheel = 0;
  swig_callbackOnKeyDown = 0;
  swig_callbackOnKeyUp = 0;
  swig_callbackOnTouchesDown = 0;
  swig_callbackOnTouchesMove = 0;
  swig_callbackOnTouchesUp = 0;
  swig_callbackClone = 0;
  swig_callbackOperatorStarted = 0;
  swig_callbackGetName = 0;
  swig_callbackOnLButtonDownAndMove = 0;
  swig_callbackOnMButtonDownAndMove = 0;
  swig_callbackOnRButtonDownAndMove = 0;
  swig_callbackOnLRButtonDownAndMove = 0;
  swig_callbackOnNoButtonDownAndMove = 0;
  swig_callbackOnTimer = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_MVO_BIGENDIAN_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_H_M_PI_get() {
  double jresult ;
  double result;
  
  result = (double) (3.14159265358979323846264338327950288);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_INVALID_KEY_get() {
  long jresult ;
  long result;
  
  result = (long) (-1L);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NO_RELATED_SELECTION_LIMIT_get() {
  int jresult ;
  int result;
  
  result = (int) (-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MVO_SQRT_MAX_FLOAT_get() {
  double jresult ;
  double result;
  
  result = (double) 1e15;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_MESSAGE_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 8192;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_SEGMENT_PATHNAME_BUFFER_get() {
  int jresult ;
  int result;
  
  result = (int) 4096;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 4096;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_SMALL_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 256;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_BIG_BUFFER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 32768;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_x_set(void * jarg1, float jarg2) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPoint_x_get(void * jarg1) {
  float jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  float result;
  
  arg1 = (HPoint *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_y_set(void * jarg1, float jarg2) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPoint_y_get(void * jarg1) {
  float jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  float result;
  
  arg1 = (HPoint *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_z_set(void * jarg1, float jarg2) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPoint_z_get(void * jarg1) {
  float jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  float result;
  
  arg1 = (HPoint *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPoint__SWIG_0() {
  void * jresult ;
  HPoint *result = 0 ;
  
  result = (HPoint *)new HPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPoint__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HPoint *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HPoint *)new HPoint(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPoint__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HPoint *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HPoint *)new HPoint(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPoint__SWIG_3(void * jarg1) {
  void * jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HPoint *)jarg1; 
  result = (HPoint *)new HPoint((HPoint const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_Set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_Set__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_Set__SWIG_2(void * jarg1, void * jarg2) {
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_Add__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Add(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPoint_Add__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  HPoint *arg1 = (HPoint *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Add(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPOINT_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double) (1e-5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPoint_Equal__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((HPoint const *)arg1)->Equal((HPoint const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPoint_Equal__SWIG_1(void * jarg1, void * jarg2) {
  bool jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = (bool)((HPoint const *)arg1)->Equal((HPoint const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPoint(void * jarg1) {
  HPoint *arg1 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPointKey__SWIG_0() {
  void * jresult ;
  HPointKey *result = 0 ;
  
  result = (HPointKey *)new HPointKey();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPointKey__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HPointKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HPointKey *)new HPointKey(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPointKey__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HPointKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HPointKey *)new HPointKey(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPointKey__SWIG_3(void * jarg1) {
  void * jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPointKey *result = 0 ;
  
  arg1 = (HPoint *)jarg1; 
  result = (HPointKey *)new HPointKey((HPoint const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPointKey(void * jarg1) {
  HPointKey *arg1 = (HPointKey *) 0 ;
  
  arg1 = (HPointKey *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIntRectangle_left_set(void * jarg1, int jarg2) {
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int arg2 ;
  
  arg1 = (HIntRectangle *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIntRectangle_left_get(void * jarg1) {
  int jresult ;
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int result;
  
  arg1 = (HIntRectangle *)jarg1; 
  result = (int) ((arg1)->left);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIntRectangle_right_set(void * jarg1, int jarg2) {
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int arg2 ;
  
  arg1 = (HIntRectangle *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIntRectangle_right_get(void * jarg1) {
  int jresult ;
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int result;
  
  arg1 = (HIntRectangle *)jarg1; 
  result = (int) ((arg1)->right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIntRectangle_bottom_set(void * jarg1, int jarg2) {
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int arg2 ;
  
  arg1 = (HIntRectangle *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIntRectangle_bottom_get(void * jarg1) {
  int jresult ;
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int result;
  
  arg1 = (HIntRectangle *)jarg1; 
  result = (int) ((arg1)->bottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIntRectangle_top_set(void * jarg1, int jarg2) {
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int arg2 ;
  
  arg1 = (HIntRectangle *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIntRectangle_top_get(void * jarg1) {
  int jresult ;
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  int result;
  
  arg1 = (HIntRectangle *)jarg1; 
  result = (int) ((arg1)->top);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIntRectangle() {
  void * jresult ;
  HIntRectangle *result = 0 ;
  
  result = (HIntRectangle *)new HIntRectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIntRectangle(void * jarg1) {
  HIntRectangle *arg1 = (HIntRectangle *) 0 ;
  
  arg1 = (HIntRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HPlane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HPlane *)new HPlane(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HPlane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HPlane *)new HPlane(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HPlane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HPlane *)new HPlane(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  HPlane *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HPlane *)new HPlane(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_4() {
  void * jresult ;
  HPlane *result = 0 ;
  
  result = (HPlane *)new HPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_5(void * jarg1, float jarg2) {
  void * jresult ;
  HVector *arg1 = 0 ;
  float arg2 ;
  HPlane *result = 0 ;
  
  arg1 = (HVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HVector const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (HPlane *)new HPlane((HVector const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlane__SWIG_6(void * jarg1) {
  void * jresult ;
  HPlane *arg1 = 0 ;
  HPlane *result = 0 ;
  
  arg1 = (HPlane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane const & type is null", 0);
    return 0;
  } 
  result = (HPlane *)new HPlane((HPlane const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  HPlane *arg1 = (HPlane *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlane_ClassifyPoint(void * jarg1, void * jarg2) {
  double jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  HPoint *arg2 = 0 ;
  double result;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  result = (double)((HPlane const *)arg1)->ClassifyPoint((HPoint const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_CalculateNormal(void * jarg1, void * jarg2) {
  HPlane *arg1 = (HPlane *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  ((HPlane const *)arg1)->CalculateNormal(*arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlane_Equal__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  bool jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  HPlane *arg2 = (HPlane *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (HPlane *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)((HPlane const *)arg1)->Equal((HPlane const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlane_Equal__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  HPlane *arg2 = (HPlane *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (HPlane *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((HPlane const *)arg1)->Equal((HPlane const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlane_Equal__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  HPlane *arg2 = (HPlane *) 0 ;
  bool result;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (HPlane *)jarg2; 
  result = (bool)((HPlane const *)arg1)->Equal((HPlane const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlane_a__SWIG_0(void * jarg1) {
  float jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  float result;
  
  arg1 = (HPlane *)jarg1; 
  result = (float)((HPlane const *)arg1)->a();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlane_b__SWIG_0(void * jarg1) {
  float jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  float result;
  
  arg1 = (HPlane *)jarg1; 
  result = (float)((HPlane const *)arg1)->b();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlane_c__SWIG_0(void * jarg1) {
  float jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  float result;
  
  arg1 = (HPlane *)jarg1; 
  result = (float)((HPlane const *)arg1)->c();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlane_d__SWIG_0(void * jarg1) {
  float jresult ;
  HPlane *arg1 = (HPlane *) 0 ;
  float result;
  
  arg1 = (HPlane *)jarg1; 
  result = (float)((HPlane const *)arg1)->d();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_a__SWIG_1(void * jarg1, float jarg2) {
  HPlane *arg1 = (HPlane *) 0 ;
  float arg2 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->a(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_b__SWIG_1(void * jarg1, float jarg2) {
  HPlane *arg1 = (HPlane *) 0 ;
  float arg2 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->b(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_c__SWIG_1(void * jarg1, float jarg2) {
  HPlane *arg1 = (HPlane *) 0 ;
  float arg2 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->c(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlane_d__SWIG_1(void * jarg1, float jarg2) {
  HPlane *arg1 = (HPlane *) 0 ;
  float arg2 ;
  
  arg1 = (HPlane *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->d(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPlane(void * jarg1) {
  HPlane *arg1 = (HPlane *) 0 ;
  
  arg1 = (HPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HPlaneKey *)new HPlaneKey(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HPlaneKey *)new HPlaneKey(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HPlaneKey *)new HPlaneKey(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HPlaneKey *)new HPlaneKey(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_4() {
  void * jresult ;
  HPlaneKey *result = 0 ;
  
  result = (HPlaneKey *)new HPlaneKey();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_5(void * jarg1, float jarg2) {
  void * jresult ;
  HVector *arg1 = 0 ;
  float arg2 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (HVector *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HVector const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (HPlaneKey *)new HPlaneKey((HVector const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlaneKey__SWIG_6(void * jarg1) {
  void * jresult ;
  HPlane *arg1 = 0 ;
  HPlaneKey *result = 0 ;
  
  arg1 = (HPlane *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane const & type is null", 0);
    return 0;
  } 
  result = (HPlaneKey *)new HPlaneKey((HPlane const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPlaneKey(void * jarg1) {
  HPlaneKey *arg1 = (HPlaneKey *) 0 ;
  
  arg1 = (HPlaneKey *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGB__SWIG_0(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  HPixelRGB *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (HPixelRGB *)new HPixelRGB(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGB__SWIG_1(unsigned char jarg1, unsigned char jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  HPixelRGB *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (HPixelRGB *)new HPixelRGB(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGB__SWIG_2(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HPixelRGB *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HPixelRGB *)new HPixelRGB(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGB__SWIG_3() {
  void * jresult ;
  HPixelRGB *result = 0 ;
  
  result = (HPixelRGB *)new HPixelRGB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGB__SWIG_4(void * jarg1) {
  void * jresult ;
  HPixelRGB *arg1 = 0 ;
  HPixelRGB *result = 0 ;
  
  arg1 = (HPixelRGB *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGB const & type is null", 0);
    return 0;
  } 
  result = (HPixelRGB *)new HPixelRGB((HPixelRGB const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_HPixelRGB_r__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char result;
  
  arg1 = (HPixelRGB *)jarg1; 
  result = (unsigned char)((HPixelRGB const *)arg1)->r();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_HPixelRGB_g__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char result;
  
  arg1 = (HPixelRGB *)jarg1; 
  result = (unsigned char)((HPixelRGB const *)arg1)->g();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_HPixelRGB_b__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char result;
  
  arg1 = (HPixelRGB *)jarg1; 
  result = (unsigned char)((HPixelRGB const *)arg1)->b();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGB_r__SWIG_1(void * jarg1, unsigned char jarg2) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->r(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGB_g__SWIG_1(void * jarg1, unsigned char jarg2) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->g(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGB_b__SWIG_1(void * jarg1, unsigned char jarg2) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->b(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGB_Set(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGB_Setf(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Setf(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPixelRGB(void * jarg1) {
  HPixelRGB *arg1 = (HPixelRGB *) 0 ;
  
  arg1 = (HPixelRGB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_0(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  HPixelRGBA *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (HPixelRGBA *)new HPixelRGBA(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  HPixelRGBA *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (HPixelRGBA *)new HPixelRGBA(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_2(unsigned char jarg1, unsigned char jarg2) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  HPixelRGBA *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  result = (HPixelRGBA *)new HPixelRGBA(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_3(unsigned char jarg1) {
  void * jresult ;
  unsigned char arg1 ;
  HPixelRGBA *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  result = (HPixelRGBA *)new HPixelRGBA(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_4() {
  void * jresult ;
  HPixelRGBA *result = 0 ;
  
  result = (HPixelRGBA *)new HPixelRGBA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPixelRGBA__SWIG_5(void * jarg1) {
  void * jresult ;
  HPixelRGBA *arg1 = 0 ;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HPixelRGBA *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA const & type is null", 0);
    return 0;
  } 
  result = (HPixelRGBA *)new HPixelRGBA((HPixelRGBA const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGBA_Set__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGBA_Set__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGBA_Setf__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Setf(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGBA_Setf__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Setf(arg2,arg3,arg4);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_HPixelRGBA_a__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  unsigned char result;
  
  arg1 = (HPixelRGBA *)jarg1; 
  result = (unsigned char)((HPixelRGBA const *)arg1)->a();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPixelRGBA_a__SWIG_1(void * jarg1, unsigned char jarg2) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (arg1)->a(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPixelRGBA(void * jarg1) {
  HPixelRGBA *arg1 = (HPixelRGBA *) 0 ;
  
  arg1 = (HPixelRGBA *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HLISTENER_PASS_EVENT_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HLISTENER_CONSUME_EVENT_get() {
  int jresult ;
  int result;
  
  result = (int) 999;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HLISTENER_PRIORITY_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int) 5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HLISTENER_PRIORITY_HIGH_get() {
  int jresult ;
  int result;
  
  result = (int) 10;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HLISTENER_PRIORITY_LOW_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEventListenerManager() {
  void * jresult ;
  HEventListenerManager *result = 0 ;
  
  result = (HEventListenerManager *)new HEventListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEventListenerManager(void * jarg1) {
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  
  arg1 = (HEventListenerManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListenerManager_AddEventListener(void * jarg1, void * jarg2, int jarg3) {
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  int arg3 ;
  
  arg1 = (HEventListenerManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AddEventListener(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListenerManager_Reset(void * jarg1) {
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  
  arg1 = (HEventListenerManager *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListenerManager_StartQuery(void * jarg1) {
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  
  arg1 = (HEventListenerManager *)jarg1; 
  (arg1)->StartQuery();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListenerManager_GetEventListener(void * jarg1) {
  void * jresult ;
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventListenerManager *)jarg1; 
  result = (HEventListener *)(arg1)->GetEventListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventListenerManager_RemoveEventListener(void * jarg1, void * jarg2) {
  bool jresult ;
  HEventListenerManager *arg1 = (HEventListenerManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  bool result;
  
  arg1 = (HEventListenerManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  result = (bool)(arg1)->RemoveEventListener(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEventListener() {
  void * jresult ;
  HEventListener *result = 0 ;
  
  result = (HEventListener *)new SwigDirector_HEventListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEventListener(void * jarg1) {
  HEventListener *arg1 = (HEventListener *) 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListener_ConvertToManager(void * jarg1) {
  HEventListener *arg1 = (HEventListener *) 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  (arg1)->ConvertToManager();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListener_CreateListenerManagerSwigExplicitHEventListener(void * jarg1) {
  void * jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  result = (HEventListener *)(arg1)->HEventListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListener_GetEventListenerManager(void * jarg1) {
  void * jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  HEventListenerManager *result = 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  result = (HEventListenerManager *)(arg1)->GetEventListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListener_SetRequestedPriority(void * jarg1, int jarg2) {
  HEventListener *arg1 = (HEventListener *) 0 ;
  int arg2 ;
  
  arg1 = (HEventListener *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRequestedPriority(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventListener_GetRequestedPriority(void * jarg1) {
  int jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  int result;
  
  arg1 = (HEventListener *)jarg1; 
  result = (int)(arg1)->GetRequestedPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListener_m_pEventListenerManager_set(void * jarg1, void * jarg2) {
  HEventListener *arg1 = (HEventListener *) 0 ;
  HEventListenerManager *arg2 = (HEventListenerManager *) 0 ;
  SwigDirector_HEventListener *darg = 0;
  
  arg1 = (HEventListener *)jarg1; 
  arg2 = (HEventListenerManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HEventListener *>(arg1);
  if (arg1) darg->m_pEventListenerManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListener_m_pEventListenerManager_get(void * jarg1) {
  void * jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  SwigDirector_HEventListener *darg = 0;
  HEventListenerManager *result = 0 ;
  
  arg1 = (HEventListener *)jarg1; 
  darg = dynamic_cast<SwigDirector_HEventListener *>(arg1);
  result = (HEventListenerManager *) (darg->m_pEventListenerManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListener_m_RequestedPriority_set(void * jarg1, int jarg2) {
  HEventListener *arg1 = (HEventListener *) 0 ;
  int arg2 ;
  SwigDirector_HEventListener *darg = 0;
  
  arg1 = (HEventListener *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HEventListener *>(arg1);
  if (arg1) darg->m_RequestedPriority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventListener_m_RequestedPriority_get(void * jarg1) {
  int jresult ;
  HEventListener *arg1 = (HEventListener *) 0 ;
  SwigDirector_HEventListener *darg = 0;
  int result;
  
  arg1 = (HEventListener *)jarg1; 
  darg = dynamic_cast<SwigDirector_HEventListener *>(arg1);
  result = (int) (darg->m_RequestedPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListener_director_connect(void *objarg, SwigDirector_HEventListener::SWIG_Callback0_t callback0) {
  HEventListener *obj = (HEventListener *)objarg;
  SwigDirector_HEventListener *director = dynamic_cast<SwigDirector_HEventListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HUpdateListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUpdateListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HUpdateListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUpdateListener_CreateListenerManagerSwigExplicitHUpdateListener(void * jarg1) {
  void * jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HUpdateListener *)jarg1; 
  result = (HEventListener *)(arg1)->HUpdateListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_CameraChangedEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->CameraChangedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_CameraChangedEventSwigExplicitHUpdateListener(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->HUpdateListener::CameraChangedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_UpdateEvent(void * jarg1, bool jarg2, bool jarg3) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->UpdateEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_UpdateEventSwigExplicitHUpdateListener(void * jarg1, bool jarg2, bool jarg3) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->HUpdateListener::UpdateEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_ViewDestroyedEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->ViewDestroyedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_ViewDestroyedEventSwigExplicitHUpdateListener(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->HUpdateListener::ViewDestroyedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_SmoothTransitionFinishedEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->SmoothTransitionFinishedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUpdateListener_SmoothTransitionFinishedEventSwigExplicitHUpdateListener(void * jarg1, void * jarg2) {
  int jresult ;
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HUpdateListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->HUpdateListener::SmoothTransitionFinishedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUpdateListener() {
  void * jresult ;
  HUpdateListener *result = 0 ;
  
  result = (HUpdateListener *)new SwigDirector_HUpdateListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUpdateListener(void * jarg1) {
  HUpdateListener *arg1 = (HUpdateListener *) 0 ;
  
  arg1 = (HUpdateListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUpdateListener_director_connect(void *objarg, SwigDirector_HUpdateListener::SWIG_Callback0_t callback0, SwigDirector_HUpdateListener::SWIG_Callback1_t callback1, SwigDirector_HUpdateListener::SWIG_Callback2_t callback2, SwigDirector_HUpdateListener::SWIG_Callback3_t callback3, SwigDirector_HUpdateListener::SWIG_Callback4_t callback4) {
  HUpdateListener *obj = (HUpdateListener *)objarg;
  SwigDirector_HUpdateListener *director = dynamic_cast<SwigDirector_HUpdateListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFitWorldListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HFitWorldListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFitWorldListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HFitWorldListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFitWorldListener_CreateListenerManagerSwigExplicitHFitWorldListener(void * jarg1) {
  void * jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HFitWorldListener *)jarg1; 
  result = (HEventListener *)(arg1)->HFitWorldListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFitWorldListener_PreFitWorldEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HFitWorldListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->PreFitWorldEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFitWorldListener_PreFitWorldEventSwigExplicitHFitWorldListener(void * jarg1, void * jarg2) {
  int jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HFitWorldListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->HFitWorldListener::PreFitWorldEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFitWorldListener_PostFitWorldEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HFitWorldListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->PostFitWorldEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFitWorldListener_PostFitWorldEventSwigExplicitHFitWorldListener(void * jarg1, void * jarg2) {
  int jresult ;
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HFitWorldListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->HFitWorldListener::PostFitWorldEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFitWorldListener() {
  void * jresult ;
  HFitWorldListener *result = 0 ;
  
  result = (HFitWorldListener *)new SwigDirector_HFitWorldListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFitWorldListener(void * jarg1) {
  HFitWorldListener *arg1 = (HFitWorldListener *) 0 ;
  
  arg1 = (HFitWorldListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFitWorldListener_director_connect(void *objarg, SwigDirector_HFitWorldListener::SWIG_Callback0_t callback0, SwigDirector_HFitWorldListener::SWIG_Callback1_t callback1, SwigDirector_HFitWorldListener::SWIG_Callback2_t callback2) {
  HFitWorldListener *obj = (HFitWorldListener *)objarg;
  SwigDirector_HFitWorldListener *director = dynamic_cast<SwigDirector_HFitWorldListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HObjectManipulationListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HObjectManipulationListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HObjectManipulationListener_CreateListenerManagerSwigExplicitHObjectManipulationListener(void * jarg1) {
  void * jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  result = (HEventListener *)(arg1)->HObjectManipulationListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_SetupHandlesEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->SetupHandlesEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_SetupHandlesEventSwigExplicitHObjectManipulationListener(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->HObjectManipulationListener::SetupHandlesEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectBeforeMoveEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->ObjectBeforeMoveEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectBeforeMoveEventSwigExplicitHObjectManipulationListener(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->HObjectManipulationListener::ObjectBeforeMoveEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectMovedEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->ObjectMovedEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectMovedEventSwigExplicitHObjectManipulationListener(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->HObjectManipulationListener::ObjectMovedEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectScaledEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->ObjectScaledEvent(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HObjectManipulationListener_ObjectScaledEventSwigExplicitHObjectManipulationListener(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = 0 ;
  int result;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HObjectManipulationListener::ObjectScaledEvent(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HObjectManipulationListener() {
  void * jresult ;
  HObjectManipulationListener *result = 0 ;
  
  result = (HObjectManipulationListener *)new SwigDirector_HObjectManipulationListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HObjectManipulationListener(void * jarg1) {
  HObjectManipulationListener *arg1 = (HObjectManipulationListener *) 0 ;
  
  arg1 = (HObjectManipulationListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HObjectManipulationListener_director_connect(void *objarg, SwigDirector_HObjectManipulationListener::SWIG_Callback0_t callback0, SwigDirector_HObjectManipulationListener::SWIG_Callback1_t callback1, SwigDirector_HObjectManipulationListener::SWIG_Callback2_t callback2, SwigDirector_HObjectManipulationListener::SWIG_Callback3_t callback3, SwigDirector_HObjectManipulationListener::SWIG_Callback4_t callback4) {
  HObjectManipulationListener *obj = (HObjectManipulationListener *)objarg;
  SwigDirector_HObjectManipulationListener *director = dynamic_cast<SwigDirector_HObjectManipulationListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HAnimationListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HAnimationListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HAnimationListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HAnimationListener_CreateListenerManagerSwigExplicitHAnimationListener(void * jarg1) {
  void * jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HAnimationListener *)jarg1; 
  result = (HEventListener *)(arg1)->HAnimationListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_AnimationFinishedEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  result = (int)(arg1)->AnimationFinishedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_AnimationFinishedEventSwigExplicitHAnimationListener(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  result = (int)(arg1)->HAnimationListener::AnimationFinishedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_KeyframeAddedEvent(void * jarg1) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  result = (int)(arg1)->KeyframeAddedEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_KeyframeAddedEventSwigExplicitHAnimationListener(void * jarg1) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  result = (int)(arg1)->HAnimationListener::KeyframeAddedEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_ObjectCollisionEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  result = (int)(arg1)->ObjectCollisionEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_ObjectCollisionEventSwigExplicitHAnimationListener(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  result = (int)(arg1)->HAnimationListener::ObjectCollisionEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_ObjectNoCollisionEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  result = (int)(arg1)->ObjectNoCollisionEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAnimationListener_ObjectNoCollisionEventSwigExplicitHAnimationListener(void * jarg1, void * jarg2) {
  int jresult ;
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  int result;
  
  arg1 = (HAnimationListener *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  result = (int)(arg1)->HAnimationListener::ObjectNoCollisionEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAnimationListener() {
  void * jresult ;
  HAnimationListener *result = 0 ;
  
  result = (HAnimationListener *)new SwigDirector_HAnimationListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HAnimationListener(void * jarg1) {
  HAnimationListener *arg1 = (HAnimationListener *) 0 ;
  
  arg1 = (HAnimationListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAnimationListener_director_connect(void *objarg, SwigDirector_HAnimationListener::SWIG_Callback0_t callback0, SwigDirector_HAnimationListener::SWIG_Callback1_t callback1, SwigDirector_HAnimationListener::SWIG_Callback2_t callback2, SwigDirector_HAnimationListener::SWIG_Callback3_t callback3, SwigDirector_HAnimationListener::SWIG_Callback4_t callback4) {
  HAnimationListener *obj = (HAnimationListener *)objarg;
  SwigDirector_HAnimationListener *director = dynamic_cast<SwigDirector_HAnimationListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSensorListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HSensorListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSensorListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HSensorListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSensorListener_CreateListenerManagerSwigExplicitHSensorListener(void * jarg1) {
  void * jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HSensorListener *)jarg1; 
  result = (HEventListener *)(arg1)->HSensorListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSensorListener_SensorActivatedEvent(void * jarg1, void * jarg2) {
  int jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  HBhvSensor *arg2 = (HBhvSensor *) 0 ;
  int result;
  
  arg1 = (HSensorListener *)jarg1; 
  arg2 = (HBhvSensor *)jarg2; 
  result = (int)(arg1)->SensorActivatedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSensorListener_SensorActivatedEventSwigExplicitHSensorListener(void * jarg1, void * jarg2) {
  int jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  HBhvSensor *arg2 = (HBhvSensor *) 0 ;
  int result;
  
  arg1 = (HSensorListener *)jarg1; 
  arg2 = (HBhvSensor *)jarg2; 
  result = (int)(arg1)->HSensorListener::SensorActivatedEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSensorListener_SensorActionEvent(void * jarg1, char * jarg2) {
  int jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (HSensorListener *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->SensorActionEvent((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSensorListener_SensorActionEventSwigExplicitHSensorListener(void * jarg1, char * jarg2) {
  int jresult ;
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (HSensorListener *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->HSensorListener::SensorActionEvent((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSensorListener() {
  void * jresult ;
  HSensorListener *result = 0 ;
  
  result = (HSensorListener *)new SwigDirector_HSensorListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSensorListener(void * jarg1) {
  HSensorListener *arg1 = (HSensorListener *) 0 ;
  
  arg1 = (HSensorListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSensorListener_director_connect(void *objarg, SwigDirector_HSensorListener::SWIG_Callback0_t callback0, SwigDirector_HSensorListener::SWIG_Callback1_t callback1, SwigDirector_HSensorListener::SWIG_Callback2_t callback2) {
  HSensorListener *obj = (HSensorListener *)objarg;
  SwigDirector_HSensorListener *director = dynamic_cast<SwigDirector_HSensorListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HMouseListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMouseListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HMouseListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMouseListener_CreateListenerManagerSwigExplicitHMouseListener(void * jarg1) {
  void * jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HMouseListener *)jarg1; 
  result = (HEventListener *)(arg1)->HMouseListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonDownSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMouseMove(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMouseMoveSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonUpSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnLButtonDblClkSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonDownSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonUpSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMButtonDblClkSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnMButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonDownSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonUpSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnRButtonDblClkSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnRButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMouseWheel(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnMouseWheelSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnKeyDownSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnKeyUp(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnKeyUpSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesDownSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesMoveSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMouseListener_OnTouchesUpSwigExplicitHMouseListener(void * jarg1, void * jarg2) {
  int jresult ;
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HMouseListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HMouseListener::OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMouseListener() {
  void * jresult ;
  HMouseListener *result = 0 ;
  
  result = (HMouseListener *)new SwigDirector_HMouseListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMouseListener(void * jarg1) {
  HMouseListener *arg1 = (HMouseListener *) 0 ;
  
  arg1 = (HMouseListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMouseListener_director_connect(void *objarg, SwigDirector_HMouseListener::SWIG_Callback0_t callback0, SwigDirector_HMouseListener::SWIG_Callback1_t callback1, SwigDirector_HMouseListener::SWIG_Callback2_t callback2, SwigDirector_HMouseListener::SWIG_Callback3_t callback3, SwigDirector_HMouseListener::SWIG_Callback4_t callback4, SwigDirector_HMouseListener::SWIG_Callback5_t callback5, SwigDirector_HMouseListener::SWIG_Callback6_t callback6, SwigDirector_HMouseListener::SWIG_Callback7_t callback7, SwigDirector_HMouseListener::SWIG_Callback8_t callback8, SwigDirector_HMouseListener::SWIG_Callback9_t callback9, SwigDirector_HMouseListener::SWIG_Callback10_t callback10, SwigDirector_HMouseListener::SWIG_Callback11_t callback11, SwigDirector_HMouseListener::SWIG_Callback12_t callback12, SwigDirector_HMouseListener::SWIG_Callback13_t callback13, SwigDirector_HMouseListener::SWIG_Callback14_t callback14, SwigDirector_HMouseListener::SWIG_Callback15_t callback15, SwigDirector_HMouseListener::SWIG_Callback16_t callback16) {
  HMouseListener *obj = (HMouseListener *)objarg;
  SwigDirector_HMouseListener *director = dynamic_cast<SwigDirector_HMouseListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_GetEventType() {
  int jresult ;
  HEventListenerType result;
  
  result = (HEventListenerType)HJoyStickListener::GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HJoyStickListener_CreateListenerManager(void * jarg1) {
  void * jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HJoyStickListener *)jarg1; 
  result = (HEventListener *)(arg1)->CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HJoyStickListener_CreateListenerManagerSwigExplicitHJoyStickListener(void * jarg1) {
  void * jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HJoyStickListener *)jarg1; 
  result = (HEventListener *)(arg1)->HJoyStickListener::CreateListenerManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickRotation(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnJoyStickRotation(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickRotationSwigExplicitHJoyStickListener(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HJoyStickListener::OnJoyStickRotation(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickTranslation(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnJoyStickTranslation(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickTranslationSwigExplicitHJoyStickListener(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HJoyStickListener::OnJoyStickTranslation(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickButton(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnJoyStickButton(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HJoyStickListener_OnJoyStickButtonSwigExplicitHJoyStickListener(void * jarg1, void * jarg2) {
  int jresult ;
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HJoyStickListener *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HJoyStickListener::OnJoyStickButton(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HJoyStickListener() {
  void * jresult ;
  HJoyStickListener *result = 0 ;
  
  result = (HJoyStickListener *)new SwigDirector_HJoyStickListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HJoyStickListener(void * jarg1) {
  HJoyStickListener *arg1 = (HJoyStickListener *) 0 ;
  
  arg1 = (HJoyStickListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HJoyStickListener_director_connect(void *objarg, SwigDirector_HJoyStickListener::SWIG_Callback0_t callback0, SwigDirector_HJoyStickListener::SWIG_Callback1_t callback1, SwigDirector_HJoyStickListener::SWIG_Callback2_t callback2, SwigDirector_HJoyStickListener::SWIG_Callback3_t callback3) {
  HJoyStickListener *obj = (HJoyStickListener *)objarg;
  SwigDirector_HJoyStickListener *director = dynamic_cast<SwigDirector_HJoyStickListener *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseModel__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (HBaseModel *)new SwigDirector_HBaseModel((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseModel__SWIG_1() {
  void * jresult ;
  HBaseModel *result = 0 ;
  
  result = (HBaseModel *)new SwigDirector_HBaseModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_Init(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_InitSwigExplicitHBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->HBaseModel::Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_Flush(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_FlushSwigExplicitHBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->HBaseModel::Flush();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetFileLoadComplete(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetFileLoadComplete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetFileLoadComplete__SWIG_0(void * jarg1, bool jarg2, void * jarg3) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (HBaseView *)jarg3; 
  (arg1)->SetFileLoadComplete(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetFileLoadComplete__SWIG_1(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFileLoadComplete(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetObjectCheck(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetObjectCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetObjectCheck(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetObjectCheck(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetStaticModel(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetStaticModel(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetStaticModel(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetStaticModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetStaticModelOn(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetStaticModelOn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetLMVModel(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLMVModel(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetLMVModel(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetLMVModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_GetFirstFitComplete(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->GetFirstFitComplete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetFirstFitComplete(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFirstFitComplete(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Read__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, bool jarg4, void * jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HInputHandlerOptions *arg5 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (HInputHandlerOptions *)jarg5; 
  result = (HFileIOResult)(arg1)->Read((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, bool jarg4, void * jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HInputHandlerOptions *arg5 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (HInputHandlerOptions *)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Read__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, bool jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HFileIOResult)(arg1)->Read((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, bool jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Read__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->Read((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Read__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->Read((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_4(void * jarg1, char * jarg2, void * jarg3, bool jarg4, void * jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HInputHandlerOptions *arg5 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (HInputHandlerOptions *)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_5(void * jarg1, char * jarg2, void * jarg3, bool jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  bool arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_ReadSwigExplicitHBaseModel__SWIG_7(void * jarg1, char * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::Read((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptions__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->WriteWithOptions((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptions__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->WriteWithOptions((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptions__SWIG_2(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->WriteWithOptions((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_2(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_3(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithOptionsSwigExplicitHBaseModel__SWIG_5(void * jarg1, char * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithOptions((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Write__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->Write((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Write__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->Write((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Write__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->Write((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_Write__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->Write((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_4(void * jarg1, char * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_5(void * jarg1, char * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteSwigExplicitHBaseModel__SWIG_7(void * jarg1, char * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::Write((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetHModelInfo(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HModelInfo *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HModelInfo *)((HBaseModel const *)arg1)->GetHModelInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetStreamFileTK(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HStreamFileToolkit *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HStreamFileToolkit *)((HBaseModel const *)arg1)->GetStreamFileTK();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetStreamFileTKSwigExplicitHBaseModel(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HStreamFileToolkit *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HStreamFileToolkit *)((HBaseModel const *)arg1)->HBaseModel::GetStreamFileTK();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetModelKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->GetModelKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetModelKeySwigExplicitHBaseModel(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->HBaseModel::GetModelKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetModelIncludeKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->GetModelIncludeKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetModelIncludeKeySwigExplicitHBaseModel(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->HBaseModel::GetModelIncludeKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetBBoxKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->GetBBoxKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_GetBBoxKeySwigExplicitHBaseModel(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = ((HBaseModel const *)arg1)->HBaseModel::GetBBoxKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsBRepGeometry(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->IsBRepGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsBRepGeometrySwigExplicitHBaseModel(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->HBaseModel::IsBRepGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetBRepGeometry(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBRepGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetBRepGeometrySwigExplicitHBaseModel(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseModel::SetBRepGeometry(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsFEAGeometry(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->IsFEAGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsFEAGeometrySwigExplicitHBaseModel(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->HBaseModel::IsFEAGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetFEAGeometry(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFEAGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetFEAGeometrySwigExplicitHBaseModel(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseModel::SetFEAGeometry(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsVectorGeometry(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->IsVectorGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_IsVectorGeometrySwigExplicitHBaseModel(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (bool)((HBaseModel const *)arg1)->HBaseModel::IsVectorGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetVectorGeometry(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVectorGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetVectorGeometrySwigExplicitHBaseModel(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseModel::SetVectorGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_CleanIncludes(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->CleanIncludes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_CleanIncludesSwigExplicitHBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->HBaseModel::CleanIncludes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_DeleteIncludedSegments(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->DeleteIncludedSegments();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_DeleteIncludedSegmentsSwigExplicitHBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->HBaseModel::DeleteIncludedSegments();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetBhvBehaviorManager(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBhvBehaviorManager *)(arg1)->GetBhvBehaviorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetBhvBehaviorManagerSwigExplicitHBaseModel(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBhvBehaviorManager *)(arg1)->HBaseModel::GetBhvBehaviorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_SetBhvBehaviorManager(void * jarg1, void * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  (arg1)->SetBhvBehaviorManager(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetEventManager(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HEventManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HEventManager *)(arg1)->GetEventManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_Update__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_Update__SWIG_1(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_Update__SWIG_2(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_MakeAnimationSnapshot(void * jarg1, int jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->MakeAnimationSnapshot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimation__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->WriteWithAnimation((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimation__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->WriteWithAnimation((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimation__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->WriteWithAnimation((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimation__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->WriteWithAnimation((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_3(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((wchar_t const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_4(void * jarg1, char * jarg2, void * jarg3, float jarg4, float jarg5) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  float arg5 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_5(void * jarg1, char * jarg2, void * jarg3, float jarg4) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  float arg4 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  arg4 = (float)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseModel_WriteWithAnimationSwigExplicitHBaseModel__SWIG_7(void * jarg1, char * jarg2) {
  int jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HFileIOResult)(arg1)->HBaseModel::WriteWithAnimation((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_CreateIncludeSegment(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->CreateIncludeSegment();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_CreateIncludeSegmentSwigExplicitHBaseModel(void * jarg1) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  (arg1)->HBaseModel::CreateIncludeSegment();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_GetDispatchXML(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  TK_Dispatch_XML *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (TK_Dispatch_XML *)(arg1)->GetDispatchXML();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_ModelKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_ModelKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_m_ModelKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result =  (darg->m_ModelKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_ModelIncludeKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_ModelIncludeKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_m_ModelIncludeKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result =  (darg->m_ModelIncludeKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_BBoxKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_BBoxKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseModel_m_BBoxKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result =  (darg->m_BBoxKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_pHFile_set(void * jarg1, void * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HStreamFileToolkit *arg2 = (HStreamFileToolkit *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HStreamFileToolkit *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_pHFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_m_pHFile_get(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HStreamFileToolkit *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (HStreamFileToolkit *) (darg->m_pHFile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_pModelInfo_set(void * jarg1, void * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HModelInfo *arg2 = (HModelInfo *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HModelInfo *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_pModelInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_m_pModelInfo_get(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HModelInfo *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (HModelInfo *) (darg->m_pModelInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bBRepGeometry_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bBRepGeometry = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bBRepGeometry_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bBRepGeometry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bFEAGeometry_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bFEAGeometry = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bFEAGeometry_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bFEAGeometry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bVectorGeometry_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bVectorGeometry = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bVectorGeometry_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bVectorGeometry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bNeedsStencilBuffer_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bNeedsStencilBuffer = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bNeedsStencilBuffer_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bNeedsStencilBuffer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bFileLoadComplete_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bFileLoadComplete = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bFileLoadComplete_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bFileLoadComplete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bObjectCheck_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bObjectCheck = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bObjectCheck_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bObjectCheck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_bFirstFitComplete_set(void * jarg1, bool jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_bFirstFitComplete = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseModel_m_bFirstFitComplete_get(void * jarg1) {
  bool jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  bool result;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (bool) (darg->m_bFirstFitComplete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_pBhvBehaviorManager_set(void * jarg1, void * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_pBhvBehaviorManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_m_pBhvBehaviorManager_get(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (HBhvBehaviorManager *) (darg->m_pBhvBehaviorManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_m_pEventManager_set(void * jarg1, void * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HEventManager *arg2 = (HEventManager *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HEventManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  if (arg1) darg->m_pEventManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseModel_m_pEventManager_get(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  SwigDirector_HBaseModel *darg = 0;
  HEventManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseModel *>(arg1);
  result = (HEventManager *) (darg->m_pEventManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseModel_director_connect(void *objarg, SwigDirector_HBaseModel::SWIG_Callback0_t callback0, SwigDirector_HBaseModel::SWIG_Callback1_t callback1, SwigDirector_HBaseModel::SWIG_Callback2_t callback2, SwigDirector_HBaseModel::SWIG_Callback3_t callback3, SwigDirector_HBaseModel::SWIG_Callback4_t callback4, SwigDirector_HBaseModel::SWIG_Callback5_t callback5, SwigDirector_HBaseModel::SWIG_Callback6_t callback6, SwigDirector_HBaseModel::SWIG_Callback7_t callback7, SwigDirector_HBaseModel::SWIG_Callback8_t callback8, SwigDirector_HBaseModel::SWIG_Callback9_t callback9, SwigDirector_HBaseModel::SWIG_Callback10_t callback10, SwigDirector_HBaseModel::SWIG_Callback11_t callback11, SwigDirector_HBaseModel::SWIG_Callback12_t callback12, SwigDirector_HBaseModel::SWIG_Callback13_t callback13, SwigDirector_HBaseModel::SWIG_Callback14_t callback14, SwigDirector_HBaseModel::SWIG_Callback15_t callback15, SwigDirector_HBaseModel::SWIG_Callback16_t callback16, SwigDirector_HBaseModel::SWIG_Callback17_t callback17, SwigDirector_HBaseModel::SWIG_Callback18_t callback18, SwigDirector_HBaseModel::SWIG_Callback19_t callback19, SwigDirector_HBaseModel::SWIG_Callback20_t callback20, SwigDirector_HBaseModel::SWIG_Callback21_t callback21, SwigDirector_HBaseModel::SWIG_Callback22_t callback22, SwigDirector_HBaseModel::SWIG_Callback23_t callback23, SwigDirector_HBaseModel::SWIG_Callback24_t callback24, SwigDirector_HBaseModel::SWIG_Callback25_t callback25, SwigDirector_HBaseModel::SWIG_Callback26_t callback26, SwigDirector_HBaseModel::SWIG_Callback27_t callback27, SwigDirector_HBaseModel::SWIG_Callback28_t callback28, SwigDirector_HBaseModel::SWIG_Callback29_t callback29, SwigDirector_HBaseModel::SWIG_Callback30_t callback30, SwigDirector_HBaseModel::SWIG_Callback31_t callback31, SwigDirector_HBaseModel::SWIG_Callback32_t callback32, SwigDirector_HBaseModel::SWIG_Callback33_t callback33, SwigDirector_HBaseModel::SWIG_Callback34_t callback34, SwigDirector_HBaseModel::SWIG_Callback35_t callback35, SwigDirector_HBaseModel::SWIG_Callback36_t callback36, SwigDirector_HBaseModel::SWIG_Callback37_t callback37, SwigDirector_HBaseModel::SWIG_Callback38_t callback38, SwigDirector_HBaseModel::SWIG_Callback39_t callback39, SwigDirector_HBaseModel::SWIG_Callback40_t callback40, SwigDirector_HBaseModel::SWIG_Callback41_t callback41, SwigDirector_HBaseModel::SWIG_Callback42_t callback42, SwigDirector_HBaseModel::SWIG_Callback43_t callback43, SwigDirector_HBaseModel::SWIG_Callback44_t callback44, SwigDirector_HBaseModel::SWIG_Callback45_t callback45) {
  HBaseModel *obj = (HBaseModel *)objarg;
  SwigDirector_HBaseModel *director = dynamic_cast<SwigDirector_HBaseModel *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40, callback41, callback42, callback43, callback44, callback45);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, char * jarg9) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  char *arg9 = (char *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  arg9 = (char *)jarg9; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_3(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_4(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_5(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_6(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_7(void * jarg1, char * jarg2) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseView__SWIG_8(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBaseView *)new SwigDirector_HBaseView(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, int jarg9) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  int arg9 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  void *arg8 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_3(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, void * jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_4(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_5(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_6(void * jarg1, char * jarg2, char * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->RebindView((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_7(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RebindView((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RebindView__SWIG_8(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RebindView();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Init(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InitSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorld__SWIG_0(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->FitWorld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->HBaseView::FitWorld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorld__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->FitWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::FitWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldExact__SWIG_0(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->FitWorldExact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->HBaseView::FitWorldExact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldExact__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->FitWorldExact();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitWorldExactSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::FitWorldExact();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ZoomToExtents(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ZoomToExtents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ZoomToExtentsSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::ZoomToExtents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ZoomToInitialCamera(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ZoomToInitialCamera();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ZoomToInitialCameraSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::ZoomToInitialCamera();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitSegment(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->FitSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitSelection__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->FitSelection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitSelection__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->FitSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitSelection__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->FitSelection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FitItemByPath(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 = (HC_KEY *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  (arg1)->FitItemByPath(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderAntialiasing(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderAntialiasing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InitAntialiasing(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->InitAntialiasing();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetAntialiasing(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HUtilityAntialiasing *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HUtilityAntialiasing *)(arg1)->GetAntialiasing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetMarkupManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HMarkupManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HMarkupManager *)(arg1)->GetMarkupManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_HaveMarkupManager(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HaveMarkupManager();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetMarkupManager(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HMarkupManager *arg2 = (HMarkupManager *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HMarkupManager *)jarg2; 
  (arg1)->SetMarkupManager(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderWireframe(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderWireframe();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderSilhouette(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderSilhouette();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderHiddenLine(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderHiddenLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderHiddenLineFast(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderHiddenLineFast();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderFlat(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderFlat();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderGooch(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderGooch();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderGouraud(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderGouraud();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderPhong(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderPhong();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderWireframeWithSilhouette(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderWireframeWithSilhouette();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderShadedWireframe(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderShadedWireframe();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderVertices(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderShadedVertices(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderShadedVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderFakeHiddenLine(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderFakeHiddenLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderBRepHiddenLine(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderBRepHiddenLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderBRepHiddenLineFast(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderBRepHiddenLineFast();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderBRepWireframe(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderBRepWireframe();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderShaded(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderShaded();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderShadedWithLines(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderShadedWithLines();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderGouraudWithLines(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderGouraudWithLines();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderLOD1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderLOD1();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RenderLOD2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RenderLOD2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RemoveTransforms(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RemoveTransforms();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Update(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ForceUpdate(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ForceUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ForceUpdateSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::ForceUpdate();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInput__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HInputHandlerOptions *arg4 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  arg4 = (HInputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileInput((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInputSwigExplicitHBaseView__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HInputHandlerOptions *arg4 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  arg4 = (HInputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseView::FileInput((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInput__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->FileInput((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInputSwigExplicitHBaseView__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseView::FileInput((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInputSwigExplicitHBaseView__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HInputHandlerOptions *arg4 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  arg4 = (HInputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseView::FileInput((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileInputSwigExplicitHBaseView__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseView::FileInput((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutput__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileOutput((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutputSwigExplicitHBaseView__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseView::FileOutput((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutput__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->FileOutput((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutputSwigExplicitHBaseView__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseView::FileOutput((wchar_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutputSwigExplicitHBaseView__SWIG_2(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HBaseView::FileOutput((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_FileOutputSwigExplicitHBaseView__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HFileIOResult result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  result = (HFileIOResult)(arg1)->HBaseView::FileOutput((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBaseView_GetDriverPath(void * jarg1) {
  char * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (char *)(arg1)->GetDriverPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBaseView_GetDriverType(void * jarg1) {
  char * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (char *)(arg1)->GetDriverType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateHighlighting(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->UpdateHighlighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateHighlightingSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::UpdateHighlighting();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetSelection(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSelectionSet *)(arg1)->GetSelection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSelection(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  (arg1)->SetSelection(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetModel(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseModel *)(arg1)->GetModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetModelSwigExplicitHBaseView(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseModel *)(arg1)->HBaseView::GetModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetModelKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetModelKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetRenderMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HRenderMode)(arg1)->GetRenderMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetViewMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (ViewMode)(arg1)->GetViewMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewMode__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetViewMode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->HBaseView::SetViewMode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewMode__SWIG_1(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetViewMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetViewMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewMode__SWIG_2(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  (arg1)->SetViewMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewModeSwigExplicitHBaseView__SWIG_2(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  (arg1)->HBaseView::SetViewMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCPLineVisibility(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCPLineVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCPFaceVisibility(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCPFaceVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCPGeomVisibility__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetCPGeomVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCPGeomVisibility__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCPGeomVisibility(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCuttingPlanesExist__SWIG_0(void * jarg1, char * jarg2) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetCuttingPlanesExist((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCuttingPlanesExist__SWIG_1(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCuttingPlanesExist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlanesExist(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCuttingPlanesExist(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCuttingPlanesVisibility(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCuttingPlanesVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlanesVisibility(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCuttingPlanesVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetConstantFrameRateObject(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HConstantFrameRate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HConstantFrameRate *)(arg1)->GetConstantFrameRateObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetConstantFrameRateObject(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  (arg1)->SetConstantFrameRateObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetEventCheckerCallback(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  void (*arg2)(HIC_Rendition const *) = (void (*)(HIC_Rendition const *)) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (void (*)(HIC_Rendition const *))jarg2; 
  (arg1)->SetEventCheckerCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetKeyStateCallback(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool (*arg2)(unsigned int,int &) = (bool (*)(unsigned int,int &)) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (bool (*)(unsigned int,int &))jarg2; 
  (arg1)->SetKeyStateCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetKeyStateCallback(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool (*result)(unsigned int,int &) = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool (*)(unsigned int,int &))(arg1)->GetKeyStateCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetEventCheckerCallback(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  void (*result)(HIC_Rendition const *) = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (void (*)(HIC_Rendition const *))(arg1)->GetEventCheckerCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetOcclusionCullingMode__SWIG_0(void * jarg1, bool jarg2, bool jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  (arg1)->SetOcclusionCullingMode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetOcclusionCullingMode__SWIG_1(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetOcclusionCullingMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetOcclusionCullingMode__SWIG_2(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOcclusionCullingMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetHandedness(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HandednessMode)(arg1)->GetHandedness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandedness__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HandednessMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetHandedness(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HandednessMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetHandedness(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandedness__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HandednessMode)jarg2; 
  (arg1)->SetHandedness(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandednessSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HandednessMode)jarg2; 
  (arg1)->HBaseView::SetHandedness(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandednessFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetHandednessFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandednessFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetHandednessFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSize__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetFontSize((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetFontSize((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSize__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFontSize((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSizeSwigExplicitHBaseView__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HBaseView::SetFontSize((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSizeFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetFontSizeFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFontSizeFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetFontSizeFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetBackplaneCulling(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetBackplaneCulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetBackplaneCulling(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBackplaneCulling(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetProjMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  ProjMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (ProjMode)(arg1)->GetProjMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetProjMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ProjMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ProjMode)jarg2; 
  (arg1)->SetProjMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetDisplayListType(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  DisplayListType result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (DisplayListType)(arg1)->GetDisplayListType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDisplayListType(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  DisplayListType arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (DisplayListType)jarg2; 
  (arg1)->SetDisplayListType(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetDisplayListMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetDisplayListMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDisplayListMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisplayListMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetPolygonHandednessMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HandednessMode)(arg1)->GetPolygonHandednessMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetPolygonHandednessMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HandednessMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HandednessMode)jarg2; 
  (arg1)->SetPolygonHandednessMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetLodMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetLodMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLodMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLodMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSpritingMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSpritingMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSpritingMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSpritingMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetLodThreshold(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetLodThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLodThreshold(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLodThreshold(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetViewKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetViewKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetViewKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetIncludeLinkKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetIncludeLinkKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetIncludeLinkKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetIncludeLinkKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetSceneKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetSceneKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSceneKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetSceneKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetOverwriteKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetOverwriteKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetShadowMapSegmentKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetShadowMapSegmentKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetLightsKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetLightsKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLightsKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetLightsKey(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetZoomLimit(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetZoomLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetZoomLimit__SWIG_0(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZoomLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetZoomLimit__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetZoomLimit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetZoomLimitSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::SetZoomLimit();
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetWindowspaceKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetWindowspaceKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowspaceKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetWindowspaceKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetConstructionKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetConstructionKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetConstructionKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetConstructionKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetBBoxGeometryKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetBBoxGeometryKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetBBoxGeometryKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetBBoxGeometryKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetCuttingPlanesKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetCuttingPlanesKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlanesKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetCuttingPlanesKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetCuttingPlaneGeomKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetCuttingPlaneGeomKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlaneGeomKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetCuttingPlaneGeomKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetIntersectPolylinesKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetIntersectPolylinesKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetIntersectPolylinesKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetIntersectPolylinesKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetProgressBarKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetProgressBarKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetProgressBarKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetProgressBarKey(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetUpdateInterrupted(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetUpdateInterrupted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetUpdateInterrupted(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetUpdateInterrupted(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetIdleTime(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetIdleTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ResetIdleTime(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ResetIdleTime();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetQuickMovesMethod(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HQuickMovesMethod result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HQuickMovesMethod)((HBaseView const *)arg1)->GetQuickMovesMethod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetDebugZBuffer(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HDebugZBuffer *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HDebugZBuffer *)(arg1)->GetDebugZBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDebugZBuffer(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HDebugZBuffer *arg2 = (HDebugZBuffer *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HDebugZBuffer *)jarg2; 
  (arg1)->SetDebugZBuffer(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetAxisMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (AxisMode)(arg1)->GetAxisMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAxisMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (AxisMode)jarg2; 
  (arg1)->SetAxisMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAxisModeSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (AxisMode)jarg2; 
  (arg1)->HBaseView::SetAxisMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_OnSetAxisMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (AxisMode)jarg2; 
  (arg1)->OnSetAxisMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_OnSetAxisModeSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (AxisMode)jarg2; 
  (arg1)->HBaseView::OnSetAxisMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateAxisTriad(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->UpdateAxisTriad();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindow__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HIntRectangle *arg3 = (HIntRectangle *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HIntRectangle *)jarg3; 
  (arg1)->AdjustAxisWindow(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HIntRectangle *arg3 = (HIntRectangle *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HIntRectangle *)jarg3; 
  (arg1)->HBaseView::AdjustAxisWindow(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindow__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AdjustAxisWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->HBaseView::AdjustAxisWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindow__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->AdjustAxisWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindowSwigExplicitHBaseView__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::AdjustAxisWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustAxisWindowCallback(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  HBaseView::AdjustAxisWindowCallback(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustWindowCallback(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  HBaseView::AdjustWindowCallback(arg1,arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetShadowMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HShadowMode)(arg1)->GetShadowMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowMode__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetShadowMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetShadowMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowMode__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  (arg1)->SetShadowMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowModeSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  (arg1)->HBaseView::SetShadowMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_0(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7, bool jarg8, int jarg9) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  int arg9 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7, bool jarg8, int jarg9) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  int arg9 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_1(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7, bool jarg8) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_1(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7, bool jarg8) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_2(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_2(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6, float jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_3(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_3(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5, float jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_4(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_4(void * jarg1, bool jarg2, float jarg3, bool jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_5(void * jarg1, bool jarg2, float jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetReflectionPlane(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_5(void * jarg1, bool jarg2, float jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  bool arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_6(void * jarg1, bool jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->SetReflectionPlane(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_6(void * jarg1, bool jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->HBaseView::SetReflectionPlane(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlane__SWIG_7(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetReflectionPlane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReflectionPlaneSwigExplicitHBaseView__SWIG_7(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetReflectionPlane(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetDefaultLightKey__SWIG_0(void * jarg1, int jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetDefaultLightKey(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetDefaultLightKey__SWIG_1(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetDefaultLightKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetTransparentSelectionBoxMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetTransparentSelectionBoxMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetTransparentSelectionBoxMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTransparentSelectionBoxMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionList__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DeleteSelectionList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::DeleteSelectionList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionList__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->DeleteSelectionList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionListSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::DeleteSelectionList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RotateOnUpdate(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RotateOnUpdate((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColor__SWIG_0(void * jarg1, void * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  bool arg3 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetWindowColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  bool arg3 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetWindowColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColor__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetWindowColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HBaseView::SetWindowColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColor__SWIG_2(void * jarg1, void * jarg2, void * jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  bool arg4 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetWindowColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_2(void * jarg1, void * jarg2, void * jarg3, bool jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  bool arg4 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->HBaseView::SetWindowColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColor__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetWindowColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorSwigExplicitHBaseView__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->HBaseView::SetWindowColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorRange__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  int arg4 ;
  bool arg5 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetWindowColorRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  int arg4 ;
  bool arg5 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->HBaseView::SetWindowColorRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorRange__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  int arg4 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  (arg1)->SetWindowColorRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorRangeSwigExplicitHBaseView__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  int arg4 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  (arg1)->HBaseView::SetWindowColorRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowMaterial__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetWindowMaterial((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetWindowMaterial((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowMaterial__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetWindowMaterial((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowMaterialSwigExplicitHBaseView__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HBaseView::SetWindowMaterial((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetWindowColorFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetWindowColorFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetWindowColorFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetWindowColor__SWIG_0(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetWindowColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetWindowColor__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetWindowColor(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetWindowColor__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  int *arg4 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4; 
  (arg1)->GetWindowColor(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetWindowMaterial(void * jarg1, char * jarg2, char * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetWindowMaterial(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetOperator(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  (arg1)->SetOperator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCurrentOperator(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  (arg1)->SetCurrentOperator(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetOperator(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseOperator *)(arg1)->GetOperator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetCurrentOperator(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseOperator *)(arg1)->GetCurrentOperator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_GetAxisTriadKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetAxisTriadKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetHideOverlappedText(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetHideOverlappedText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHideOverlappedText(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHideOverlappedText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetNavCube(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNavCube(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSmoothTransition(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSmoothTransition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSmoothTransition(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSmoothTransition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSmoothTransitionDuration(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSmoothTransitionDuration(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetSmoothTransitionDuration(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetSmoothTransitionDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_IsLightFollowCamera(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->IsLightFollowCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_MaxLights_get() {
  int jresult ;
  int result;
  
  result = (int)HBaseView::MaxLights;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLightCount(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLightCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetLightCount(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetLightCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChanged__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CameraPositionChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::CameraPositionChanged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChanged__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->CameraPositionChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::CameraPositionChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChanged__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->CameraPositionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_CameraPositionChangedSwigExplicitHBaseView__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::CameraPositionChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_PrepareForCameraChange(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->PrepareForCameraChange();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_PrepareForCameraChangeSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::PrepareForCameraChange();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCamera__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SetCamera(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->HBaseView::SetCamera(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInitialCamera(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SetInitialCamera(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInitialCameraSwigExplicitHBaseView(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->HBaseView::SetInitialCamera(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetCamera__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float * jarg5, float * jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->GetCamera(arg2,arg3,arg4,*arg5,*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetCameraSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float * jarg5, float * jarg6, char * jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->HBaseView::GetCamera(arg2,arg3,arg4,*arg5,*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCamera__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCamera arg2 ;
  HCamera *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HCamera *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HCamera", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraSwigExplicitHBaseView__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCamera arg2 ;
  HCamera *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HCamera *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HCamera", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HBaseView::SetCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetCamera__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCamera *arg2 = (HCamera *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HCamera *)jarg2; 
  (arg1)->GetCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetCameraSwigExplicitHBaseView__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCamera *arg2 = (HCamera *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HCamera *)jarg2; 
  (arg1)->HBaseView::GetCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetCameraFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetCameraFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFData__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->InsertHSFData((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->HBaseView::InsertHSFData((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFData__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->InsertHSFData((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFDataSwigExplicitHBaseView__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->HBaseView::InsertHSFData((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFDataFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->InsertHSFDataFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InsertHSFDataFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::InsertHSFDataFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitHSFData(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->EmitHSFData((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitHSFDataSwigExplicitHBaseView(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->HBaseView::EmitHSFData((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderMode__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HRenderMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetRenderMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HRenderMode)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::SetRenderMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderMode__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HRenderMode)jarg2; 
  (arg1)->SetRenderMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderModeSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HRenderMode)jarg2; 
  (arg1)->HBaseView::SetRenderMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderModeFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetRenderModeFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRenderModeFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetRenderModeFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitFlushMessage(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EmitFlushMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitFlushMessageSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::EmitFlushMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FlushFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->FlushFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FlushFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::FlushFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Flush__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Flush(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FlushSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::Flush(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Flush__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FlushSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::Flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetEmitMessageFunction__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseViewEmitMessageFunction arg2 = (HBaseViewEmitMessageFunction) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseViewEmitMessageFunction)jarg2; 
  arg3 = jarg3; 
  (arg1)->SetEmitMessageFunction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetEmitMessageFunction__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseViewEmitMessageFunction arg2 = (HBaseViewEmitMessageFunction) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseViewEmitMessageFunction)jarg2; 
  (arg1)->SetEmitMessageFunction(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_EmittingMessages(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->EmittingMessages();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetEmitMessageFunction(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseViewEmitMessageFunction result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseViewEmitMessageFunction)(arg1)->GetEmitMessageFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetEmitMessageFunctionUserData(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  void *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (void *)(arg1)->GetEmitMessageFunctionUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSelectMessage(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EmitSelectMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSelectMessageSwigExplicitHBaseView(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::EmitSelectMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SelectFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SelectFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SelectFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SelectFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeSelectAllMessage(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EmitDeSelectAllMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeSelectAllMessageSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::EmitDeSelectAllMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeleteSelectionListMessage(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EmitDeleteSelectionListMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeleteSelectionListMessageSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::EmitDeleteSelectionListMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionListFromMessage(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->DeleteSelectionListFromMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteSelectionListFromMessageSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::DeleteSelectionListFromMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeSelectAllFromMessage(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->DeSelectAllFromMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeSelectAllFromMessageSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::DeSelectAllFromMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSetModellingMatrixMessage__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->EmitSetModellingMatrixMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HBaseView::EmitSetModellingMatrixMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSetModellingMatrixMessage__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EmitSetModellingMatrixMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSetModellingMatrixMessageSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::EmitSetModellingMatrixMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSegment__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EmitSegment(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HBaseView::EmitSegment(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSegment__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->EmitSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitSegmentSwigExplicitHBaseView__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HBaseView::EmitSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeleteByKeyMessage(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->EmitDeleteByKeyMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EmitDeleteByKeyMessageSwigExplicitHBaseView(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HBaseView::EmitDeleteByKeyMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteByKeyFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->DeleteByKeyFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DeleteByKeyFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::DeleteByKeyFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetModellingMatrixFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetModellingMatrixFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetModellingMatrixFromMessageSwigExplicitHBaseView(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HBaseView::SetModellingMatrixFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetSharedKey(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSharedKey *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSharedKey *)(arg1)->GetSharedKey();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_StartSharedKey(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->StartSharedKey();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_StartSharedKeySwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::StartSharedKey();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Animate__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HBaseView::HAnimateMode arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HBaseView::HAnimateMode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Animate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AnimateSwigExplicitHBaseView__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HBaseView::HAnimateMode arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HBaseView::HAnimateMode)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->HBaseView::Animate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Animate__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HBaseView::HAnimateMode arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HBaseView::HAnimateMode)jarg3; 
  (arg1)->Animate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AnimateSwigExplicitHBaseView__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HBaseView::HAnimateMode arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HBaseView::HAnimateMode)jarg3; 
  (arg1)->HBaseView::Animate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Animate__SWIG_2(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Animate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AnimateSwigExplicitHBaseView__SWIG_2(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->HBaseView::Animate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Animate__SWIG_3(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->Animate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AnimateSwigExplicitHBaseView__SWIG_3(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::Animate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetGeometryChanged(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetGeometryChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetGeometryChangedSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::SetGeometryChanged();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSceneBoundingSet(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSceneBoundingSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSceneBounding(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->SetSceneBounding(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InvalidateSceneBounding(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->InvalidateSceneBounding();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFastMarkerDrawing(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFastMarkerDrawing(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFastMarkerDrawing(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetFastMarkerDrawing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDoubleBuffering(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDoubleBuffering(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ClearGeometryChanged(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ClearGeometryChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ClearGeometryChangedSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::ClearGeometryChanged();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GeometryChanged(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GeometryChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GeometryChangedSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GeometryChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HBaseView_SetSignalNotify(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned long jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HSignalNotifyFunction arg3 = (HSignalNotifyFunction) 0 ;
  void *arg4 = (void *) 0 ;
  unsigned long result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HSignalNotifyFunction)jarg3; 
  arg4 = jarg4; 
  result = (unsigned long)(arg1)->SetSignalNotify(arg2,arg3,arg4);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UnSetSignalNotify(void * jarg1, unsigned long jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->UnSetSignalNotify(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetColorInterpolation(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetColorInterpolation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetColorIndexInterpolation__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetColorIndexInterpolation(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetColorIndexInterpolation__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetColorIndexInterpolation(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetColorIndexInterpolation__SWIG_0(void * jarg1, char * jarg2) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetColorIndexInterpolation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetColorIndexInterpolation__SWIG_1(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetColorIndexInterpolation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFrameBufferEffectsOptions__SWIG_0(void * jarg1, char * jarg2, int * jarg3) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->GetFrameBufferEffectsOptions(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFrameBufferEffectsOptions__SWIG_1(void * jarg1, char * jarg2) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetFrameBufferEffectsOptions(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFrameBufferEffectsOptions__SWIG_2(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetFrameBufferEffectsOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Notify__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  (arg1)->Notify(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_Notify__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Notify(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_UpdateEvent__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->UpdateEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_UpdateEventSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->HBaseView::UpdateEvent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_UpdateEvent__SWIG_1(void * jarg1, bool jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->UpdateEvent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_UpdateEvent__SWIG_2(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->UpdateEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetUpdateRequested(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetUpdateRequested();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RequestUpdate(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->RequestUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ClearUpdateRequest(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ClearUpdateRequest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSuppressUpdate(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSuppressUpdate(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSuppressUpdate(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSuppressUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSuppressUpdateTick(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSuppressUpdateTick(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSuppressUpdateTick(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSuppressUpdateTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewUpdateMode__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewUpdateMode arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewUpdateMode)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetViewUpdateMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewUpdateMode__SWIG_1(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewUpdateMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewUpdateMode)jarg2; 
  (arg1)->SetViewUpdateMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetViewUpdateMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewUpdateMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (ViewUpdateMode)(arg1)->GetViewUpdateMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_UpdateTick(float jarg1, float jarg2, void * jarg3) {
  bool jresult ;
  float arg1 ;
  float arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3; 
  result = (bool)HBaseView::UpdateTick(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_StreamProgressCallback(unsigned long jarg1, unsigned long jarg2, void * jarg3) {
  bool jresult ;
  unsigned long arg1 ;
  unsigned long arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (unsigned long)jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = jarg3; 
  result = (bool)HBaseView::StreamProgressCallback(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FlushProgressBar(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->FlushProgressBar();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetUndoManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HUndoManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HUndoManager *)(arg1)->GetUndoManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetEventManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HEventManager *)(arg1)->GetEventManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetHObjectManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HObjectManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HObjectManager *)(arg1)->GetHObjectManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetDynamicHighlighting(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetDynamicHighlighting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDynamicHighlighting(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDynamicHighlighting(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnNoButtonDownAndMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDownAndMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDblClkSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnRButtonDownAndMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMButtonDownAndMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLRButtonDownAndMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnLRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonDownSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMouseMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMouseMoveSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnLButtonUpSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMouseWheel(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnMouseWheelSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_ComputeReasonableTarget(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->ComputeReasonableTarget(*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_ComputeReasonableTargetSwigExplicitHBaseView(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->HBaseView::ComputeReasonableTarget(*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ComputeNewField(void * jarg1, float * jarg2, float * jarg3, void * jarg4, void * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  HCamera *arg5 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg5 = (HCamera *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera const & type is null", 0);
    return ;
  } 
  (arg1)->ComputeNewField(*arg2,*arg3,(HPoint const &)*arg4,(HCamera const &)*arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnKeyDownSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnKeyUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_OnKeyUpSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseView::OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowColor(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetShadowColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowColorSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HBaseView::SetShadowColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowLightDirection__SWIG_0(void * jarg1, bool jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->SetShadowLightDirection(arg2,(HPoint const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->HBaseView::SetShadowLightDirection(arg2,(HPoint const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowLightDirection__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShadowLightDirection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetShadowLightDirection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowLightDirection__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = (bool)(arg1)->GetShadowLightDirection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = (bool)(arg1)->HBaseView::GetShadowLightDirection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowLightDirection__SWIG_1(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetShadowLightDirection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowLightDirectionSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetShadowLightDirection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowIgnoresTransparency(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShadowIgnoresTransparency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowIgnoresTransparencySwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetShadowIgnoresTransparency(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowIgnoresTransparency(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetShadowIgnoresTransparency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowIgnoresTransparencySwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetShadowIgnoresTransparency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DoDynamicHighlighting(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->DoDynamicHighlighting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_DoDynamicHighlightingSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HBaseView::DoDynamicHighlighting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowResolution(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowResolution(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowResolutionSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->HBaseView::SetShadowResolution(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowBlurring(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowBlurring(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowBlurringSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->HBaseView::SetShadowBlurring(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InternalUpdate(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->InternalUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InternalUpdateSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::InternalUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowRegenerationMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShadowRegenerationMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowRegenerationModeSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetShadowRegenerationMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowRegenerationToggle(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetShadowRegenerationToggle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowRegenerationToggleSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::SetShadowRegenerationToggle();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCuttingPlaneRegenerationMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCuttingPlaneRegenerationMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlaneRegenerationMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCuttingPlaneRegenerationMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCuttingPlaneRegenerationModeSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetCuttingPlaneRegenerationMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetShadowRegenerationMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetShadowRegenerationMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraChanged__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCameraChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetCameraChanged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraChanged__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetCameraChanged();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCameraChangedSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::SetCameraChanged();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCameraChanged(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetCameraChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetCameraChangedSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetCameraChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInvertMouseWheelZoom__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvertMouseWheelZoom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetInvertMouseWheelZoom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInvertMouseWheelZoom__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetInvertMouseWheelZoom();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetInvertMouseWheelZoomSwigExplicitHBaseView__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->HBaseView::SetInvertMouseWheelZoom();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetInvertMouseWheelZoom(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetInvertMouseWheelZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetInvertMouseWheelZoomSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetInvertMouseWheelZoom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAxisManipulateOperator(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraManipulate *arg2 = (HOpCameraManipulate *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HOpCameraManipulate *)jarg2; 
  (arg1)->SetAxisManipulateOperator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAxisManipulateOperatorSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraManipulate *arg2 = (HOpCameraManipulate *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HOpCameraManipulate *)jarg2; 
  (arg1)->HBaseView::SetAxisManipulateOperator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetVisibilitySelectionMode(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetVisibilitySelectionMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetVisibilitySelectionModeSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetVisibilitySelectionMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetVisibilitySelectionMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetVisibilitySelectionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetVisibilitySelectionModeSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetVisibilitySelectionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRelatedSelectionLimit(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetRelatedSelectionLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRelatedSelectionLimitSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->HBaseView::SetRelatedSelectionLimit(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetRelatedSelectionLimit(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetRelatedSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetRelatedSelectionLimitSwigExplicitHBaseView(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->HBaseView::GetRelatedSelectionLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDetailSelection(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDetailSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDetailSelectionSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetDetailSelection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetDetailSelectionMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetDetailSelectionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetDetailSelectionModeSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetDetailSelectionMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRespectSelectionCulling(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRespectSelectionCulling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRespectSelectionCullingSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetRespectSelectionCulling(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetRespectSelectionCulling(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetRespectSelectionCulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetRespectSelectionCullingSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetRespectSelectionCulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SmartFilterCircumcuboid(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5; 
  (arg1)->SmartFilterCircumcuboid((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SmartFilterCircumcuboidSwigExplicitHBaseView(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5; 
  (arg1)->HBaseView::SmartFilterCircumcuboid((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_SetupHandlesEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->SetupHandlesEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_SetupHandlesEventSwigExplicitHBaseView(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->HBaseView::SetupHandlesEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetHasObjects(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetHasObjects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetHasObjectsSwigExplicitHBaseView(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HBaseView::GetHasObjects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHasObjects(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHasObjects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHasObjectsSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetHasObjects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandleOperator(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  (arg1)->SetHandleOperator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHandleOperatorSwigExplicitHBaseView(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  (arg1)->HBaseView::SetHandleOperator(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetHandleOperator(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseOperator *)(arg1)->GetHandleOperator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetHandleOperatorSwigExplicitHBaseView(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseOperator *)(arg1)->HBaseView::GetHandleOperator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetDefaultSelectionProximity(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetDefaultSelectionProximity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetDefaultSelectionProximitySwigExplicitHBaseView(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->HBaseView::GetDefaultSelectionProximity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDefaultSelectionProximity(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetDefaultSelectionProximity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDefaultSelectionProximitySwigExplicitHBaseView(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->HBaseView::SetDefaultSelectionProximity(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetAllowInteractiveShadows(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetAllowInteractiveShadows();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAllowInteractiveShadows(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowInteractiveShadows(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetShadowRenderingMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowRenderingMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HShadowRenderingMode)(arg1)->GetShadowRenderingMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowRenderingMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowRenderingMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowRenderingMode)jarg2; 
  (arg1)->SetShadowRenderingMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetAllowInteractiveCutGeometry(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetAllowInteractiveCutGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAllowInteractiveCutGeometry(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowInteractiveCutGeometry(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetCutGeometryVisibility(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCutGeometryVisibility result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HCutGeometryVisibility)(arg1)->GetCutGeometryVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCutGeometryVisibility(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCutGeometryVisibility arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HCutGeometryVisibility)jarg2; 
  (arg1)->SetCutGeometryVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetWindowHandle(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  void *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (void *)(arg1)->GetWindowHandle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetInitialCameraSet(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetInitialCameraSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_ObjectMovedEvent(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->ObjectMovedEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_ObjectMovedEventSwigExplicitHBaseView(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (int)(arg1)->HBaseView::ObjectMovedEvent(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetRecordCamera(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRecordCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetRecordMode(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetRecordMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_InjectEvent(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo const & type is null", 0);
    return ;
  } 
  (arg1)->InjectEvent((HEventInfo const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetForceFastHiddenLine(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetForceFastHiddenLine(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetForceFastHiddenLine(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetForceFastHiddenLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetTransparency__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetTransparency((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetTransparency__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTransparency((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLineAntialiasing(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLineAntialiasing(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetLineAntialiasing(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetLineAntialiasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetTextAntialiasing(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTextAntialiasing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDepthOfField__SWIG_0(void * jarg1, bool jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  (arg1)->SetDepthOfField(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDepthOfField__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDepthOfField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDepthOfFieldRange__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetDepthOfFieldRange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDepthOfFieldRange__SWIG_1(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetDepthOfFieldRange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDepthOfFieldRange__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetDepthOfFieldRange();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetTextAntialiasing(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetTextAntialiasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetIsoDefault(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  (arg1)->SetIsoDefault(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetIsoDefault(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (ViewMode)(arg1)->GetIsoDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetCullingThreshold(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCullingThreshold(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetCullingThreshold(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetCullingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHardExtent(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHardExtent(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetHardExtent(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetHardExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_BeginShellSelection(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->BeginShellSelection();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EndShellSelection(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EndShellSelection();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetHighlightSelection(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSelectionSet *)(arg1)->GetHighlightSelection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewAxis(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  HVector *arg3 = (HVector *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HVector *)jarg2; 
  arg3 = (HVector *)jarg3; 
  (arg1)->SetViewAxis(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetViewAxis(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  HVector *arg3 = (HVector *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HVector *)jarg2; 
  arg3 = (HVector *)jarg3; 
  (arg1)->GetViewAxis(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDefaultHSRA(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->SetDefaultHSRA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetMaximumUpdateTime(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMaximumUpdateTime(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetMaximumUpdateTime(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetMaximumUpdateTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetHighlightMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionHighlightMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSelectionHighlightMode)(arg1)->GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetHighlightModeSwigExplicitHBaseView(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionHighlightMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSelectionHighlightMode)(arg1)->HBaseView::GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHighlightMode(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionHighlightMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  (arg1)->SetHighlightMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHighlightModeSwigExplicitHBaseView(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionHighlightMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  (arg1)->HBaseView::SetHighlightMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReferenceSelection(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetReferenceSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetReferenceSelectionSwigExplicitHBaseView(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HBaseView::SetReferenceSelection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetKeyState(void * jarg1, unsigned int jarg2, int * jarg3) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  unsigned int arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->GetKeyState(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ResetKeyState(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ResetKeyState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFastFitWorld(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFastFitWorld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDetailedFitWorld(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDetailedFitWorld(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFastFitWorld(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetFastFitWorld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetDetailedFitWorld(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetDetailedFitWorld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_GetSceneExtents(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetSceneExtents(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetLightScaling(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLightScaling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetXYSizeOverride(void * jarg1, int jarg2, int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetXYSizeOverride(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetXSize(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetXSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetYSize(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetYSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetViewSelectionLevel(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HViewSelectionLevel result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HViewSelectionLevel)(arg1)->GetViewSelectionLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetViewSelectionLevel(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HViewSelectionLevel arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HViewSelectionLevel)jarg2; 
  (arg1)->SetViewSelectionLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EnableTargetFrameRate__SWIG_0(void * jarg1, bool jarg2, int jarg3, int jarg4, int jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->EnableTargetFrameRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EnableTargetFrameRate__SWIG_1(void * jarg1, bool jarg2, int jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->EnableTargetFrameRate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EnableTargetFrameRate__SWIG_2(void * jarg1, bool jarg2, int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->EnableTargetFrameRate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EnableTargetFrameRate__SWIG_3(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableTargetFrameRate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_EnableTargetFrameRate__SWIG_4(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->EnableTargetFrameRate();
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetFramerate(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetFramerate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetFramerateMode(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (FramerateMode)(arg1)->GetFramerateMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetFramerateCullingThreshold(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetFramerateCullingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetFramerateSteps(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetFramerateSteps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_IsFramerateLodEnabled(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->IsFramerateLodEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4, bool jarg5, int jarg6, int jarg7) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  float arg3 ;
  int arg4 ;
  bool arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->SetFramerateMode(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_1(void * jarg1, int jarg2, float jarg3, int jarg4, bool jarg5, int jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  float arg3 ;
  int arg4 ;
  bool arg5 ;
  int arg6 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  (arg1)->SetFramerateMode(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_2(void * jarg1, int jarg2, float jarg3, int jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  float arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SetFramerateMode(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_3(void * jarg1, int jarg2, float jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetFramerateMode(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_4(void * jarg1, int jarg2, float jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  float arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFramerateMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFramerateMode__SWIG_5(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  (arg1)->SetFramerateMode(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_IsFrameRateEnabled(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->IsFrameRateEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetViewActive(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetViewActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_cleanupSimpList(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->cleanupSimpList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetAnnotationResize(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAnnotationResize(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetAnnotationResize(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetAnnotationResize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFirstUpdate(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetFirstUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetDisplayHandlesOnDblClk(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisplayHandlesOnDblClk(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_HasInitialView__SWIG_0(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->HasInitialView();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_HasInitialView__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HasInitialView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ExhaustiveUpdate(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->ExhaustiveUpdate();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetUpdateNotFinished(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetUpdateNotFinished();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetUpdateNotFinished(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUpdateNotFinished(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetMouseWheelSensitivity(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMouseWheelSensitivity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_GetMouseWheelSensitivity(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)(arg1)->GetMouseWheelSensitivity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSplatRendering(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSplatRendering(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetSplatRendering(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetSplatRendering();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSplatSize(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSplatSize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetSplatSize(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetSplatSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetSplatSymbol(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SplatSymbol arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (SplatSymbol)jarg2; 
  (arg1)->SetSplatSymbol(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetSplatSymbol(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SplatSymbol result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (SplatSymbol)(arg1)->GetSplatSymbol();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateFakeHLRColor(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->UpdateFakeHLRColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetHardwareAntialiasing(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHardwareAntialiasing(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_GetHardwareAntialiasing(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)(arg1)->GetHardwareAntialiasing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_StaticForceUpdateRequest(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  HBaseView::StaticForceUpdateRequest(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_VisualizeBounding__SWIG_0(void * jarg1, bool jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, MVO_POINTER_SIZED_INT * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  HC_KEY *arg5 = (HC_KEY *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HC_KEY *)jarg5; 
  (arg1)->VisualizeBounding(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_VisualizeBounding__SWIG_1(void * jarg1, bool jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->VisualizeBounding(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_VisualizeBounding__SWIG_2(void * jarg1, bool jarg2, MVO_POINTER_SIZED_INT jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  (arg1)->VisualizeBounding(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_VisualizeBounding__SWIG_3(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->VisualizeBounding(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetFakeHLRColor(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (arg1)->GetFakeHLRColor();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetFakeHLRColor(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetFakeHLRColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FocusOnSelection__SWIG_0(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->FocusOnSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_FocusOnSelection__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  (arg1)->FocusOnSelection();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_GetFocusOnSelection(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (bool)(arg1)->GetFocusOnSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_GetTouchManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HTouchManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HTouchManager *)(arg1)->GetTouchManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_FakeHLRStyle_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_FakeHLRStyle = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_FakeHLRStyle_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_FakeHLRStyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_FakeHLRSource_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_FakeHLRSource = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_FakeHLRSource_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_FakeHLRSource);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCPLineVisibility_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCPLineVisibility = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCPLineVisibility_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCPLineVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCPFaceVisibility_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCPFaceVisibility = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCPFaceVisibility_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCPFaceVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_CPMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_CPMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_CPMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_CPMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlanesExist_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCuttingPlanesExist = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlanesExist_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCuttingPlanesExist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlanesVisibility_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCuttingPlanesVisibility = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlanesVisibility_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCuttingPlanesVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bSpritingAllowed_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bSpritingAllowed = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bSpritingAllowed_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bSpritingAllowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bAxisTriadTransparencyAllowed_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bAxisTriadTransparencyAllowed = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bAxisTriadTransparencyAllowed_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bAxisTriadTransparencyAllowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_AxisWindowSize_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_AxisWindowSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_AxisWindowSize_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_AxisWindowSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bForceFastHiddenLine_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bForceFastHiddenLine = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bForceFastHiddenLine_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bForceFastHiddenLine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bLineAntialiasing_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bLineAntialiasing = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bLineAntialiasing_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bLineAntialiasing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bTextAntialiasing_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bTextAntialiasing = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bTextAntialiasing_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bTextAntialiasing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bBeginShellSelection_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bBeginShellSelection = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bBeginShellSelection_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bBeginShellSelection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bDisplayHandlesOnDblClk_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bDisplayHandlesOnDblClk = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bDisplayHandlesOnDblClk_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bDisplayHandlesOnDblClk);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_has_initial_view_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_has_initial_view = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_has_initial_view_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_has_initial_view);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_TouchManager_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HTouchManager *arg2 = (HTouchManager *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HTouchManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_TouchManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_TouchManager_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HTouchManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HTouchManager *) (darg->m_TouchManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_HardwareAntialiasing_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_HardwareAntialiasing = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_HardwareAntialiasing_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_HardwareAntialiasing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_IsoDefault_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_IsoDefault = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_IsoDefault_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  ViewMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (ViewMode) (darg->m_IsoDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_HighlightMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionHighlightMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_HighlightMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_HighlightMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HSelectionHighlightMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HSelectionHighlightMode) (darg->m_HighlightMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_DisplayListType_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  DisplayListType arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (DisplayListType)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_DisplayListType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_DisplayListType_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  DisplayListType result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (DisplayListType) (darg->m_DisplayListType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bGeometryChanged_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bGeometryChanged = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bGeometryChanged_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bGeometryChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SceneBoundingMin_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SceneBoundingMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_SceneBoundingMin_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HPoint *)& (darg->m_SceneBoundingMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SceneBoundingMax_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SceneBoundingMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_SceneBoundingMax_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HPoint *)& (darg->m_SceneBoundingMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bSceneBoundingSet_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bSceneBoundingSet = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bSceneBoundingSet_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bSceneBoundingSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bFastFitWorld_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bFastFitWorld = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bFastFitWorld_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bFastFitWorld);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bDetailedFitWorld_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bDetailedFitWorld = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bDetailedFitWorld_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bDetailedFitWorld);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pHImCuttingGeometry_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HImCuttingGeometry *arg2 = (HImCuttingGeometry *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HImCuttingGeometry *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pHImCuttingGeometry = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pHImCuttingGeometry_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HImCuttingGeometry *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HImCuttingGeometry *) (darg->m_pHImCuttingGeometry);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pAntialiasing_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HUtilityAntialiasing *arg2 = (HUtilityAntialiasing *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HUtilityAntialiasing *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pAntialiasing = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pAntialiasing_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HUtilityAntialiasing *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HUtilityAntialiasing *) (darg->m_pAntialiasing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pMarkupManager_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HMarkupManager *arg2 = (HMarkupManager *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HMarkupManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pMarkupManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pMarkupManager_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HMarkupManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HMarkupManager *) (darg->m_pMarkupManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bAxisMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  AxisMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (AxisMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bAxisMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_bAxisMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  AxisMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (AxisMode) (darg->m_bAxisMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bHideOverlappedText_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bHideOverlappedText = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bHideOverlappedText_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bHideOverlappedText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bNavCube_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bNavCube = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bNavCube_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bNavCube);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bSmoothTransition_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bSmoothTransition = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bSmoothTransition_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bSmoothTransition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SmoothTransitionDuration_set(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SmoothTransitionDuration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_m_SmoothTransitionDuration_get(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (float) (darg->m_SmoothTransitionDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bLightFollowsCamera_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bLightFollowsCamera = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bLightFollowsCamera_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bLightFollowsCamera);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_WindowColorPercentage_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_WindowColorPercentage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_WindowColorPercentage_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_WindowColorPercentage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_FrontAxis_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HVector *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_FrontAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_FrontAxis_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HVector *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HVector *)& (darg->m_FrontAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_TopAxis_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HVector *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_TopAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_TopAxis_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HVector *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HVector *)& (darg->m_TopAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pModel_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pModel = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pModel_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HBaseModel *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HBaseModel *) (darg->m_pModel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ViewKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ViewKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_ViewKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_ViewKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SceneKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SceneKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_SceneKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_SceneKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_OverwriteKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_OverwriteKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_OverwriteKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_OverwriteKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_BBoxGeometryKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_BBoxGeometryKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_BBoxGeometryKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_BBoxGeometryKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_WindowspaceKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_WindowspaceKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_WindowspaceKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_WindowspaceKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ConstructionKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ConstructionKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_ConstructionKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_ConstructionKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_CuttingPlanesKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_CuttingPlanesKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_CuttingPlanesKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_CuttingPlanesKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_CuttingPlaneGeomKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_CuttingPlaneGeomKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_CuttingPlaneGeomKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_CuttingPlaneGeomKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_IntersectPolylinesKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_IntersectPolylinesKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_IntersectPolylinesKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_IntersectPolylinesKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_AxisTriadKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_AxisTriadKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_AxisTriadKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_AxisTriadKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ProgressBarKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ProgressBarKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_ProgressBarKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_ProgressBarKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_InfoTextKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_InfoTextKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_InfoTextKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_InfoTextKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_lIncludeLinkKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_lIncludeLinkKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_lIncludeLinkKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_lIncludeLinkKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_LightsKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_LightsKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBaseView_m_LightsKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result =  (darg->m_LightsKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SceneLight_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY *arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  {
    size_t ii;
    HC_KEY *b = (HC_KEY *) darg->m_SceneLight;
    for (ii = 0; ii < (size_t)HBaseView::MaxLights; ii++) b[ii] = *((HC_KEY *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_SceneLight_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HC_KEY *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HC_KEY *)(HC_KEY *) (darg->m_SceneLight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_RenderMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HRenderMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HRenderMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_RenderMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_RenderMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HRenderMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HRenderMode) (darg->m_RenderMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ViewMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ViewMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_ViewMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  ViewMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (ViewMode) (darg->m_ViewMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pOperator_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pOperator_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HBaseOperator *) (darg->m_pOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pEvent_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *arg2 = (HEventInfo *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventInfo *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pEvent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pEvent_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HEventInfo *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HEventInfo *) (darg->m_pEvent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pSelection_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pSelection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pSelection_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HSelectionSet *) (darg->m_pSelection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pHighlight_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pHighlight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pHighlight_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HSelectionSet *) (darg->m_pHighlight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pConstantFrameRate_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pConstantFrameRate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pConstantFrameRate_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HConstantFrameRate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HConstantFrameRate *) (darg->m_pConstantFrameRate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ShadowMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HShadowMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ShadowMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_ShadowMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HShadowMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HShadowMode) (darg->m_ShadowMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pSharedKey_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSharedKey *arg2 = (HSharedKey *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HSharedKey *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pSharedKey = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pSharedKey_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HSharedKey *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HSharedKey *) (darg->m_pSharedKey);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_UpdateInterrupted_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_UpdateInterrupted = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_UpdateInterrupted_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_UpdateInterrupted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_InUpdateInternal_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_InUpdateInternal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_InUpdateInternal_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_InUpdateInternal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pfEventChecker_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  void (*arg2)(HIC_Rendition const *) = (void (*)(HIC_Rendition const *)) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (void (*)(HIC_Rendition const *))jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pfEventChecker = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pfEventChecker_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  void (*result)(HIC_Rendition const *) = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (void (*)(HIC_Rendition const *)) (darg->m_pfEventChecker);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pfKeyState_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool (*arg2)(unsigned int,int &) = (bool (*)(unsigned int,int &)) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (bool (*)(unsigned int,int &))jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pfKeyState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pfKeyState_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool (*result)(unsigned int,int &) = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool (*)(unsigned int,int &)) (darg->m_pfKeyState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_ViewUpdateMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ViewUpdateMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ViewUpdateMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_ViewUpdateMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_ViewUpdateMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  ViewUpdateMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (ViewUpdateMode) (darg->m_ViewUpdateMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bUpdateRequested_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bUpdateRequested = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bUpdateRequested_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bUpdateRequested);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pEventManager_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventManager *arg2 = (HEventManager *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HEventManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pEventManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pEventManager_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HEventManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HEventManager *) (darg->m_pEventManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pUndoManager_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HUndoManager *arg2 = (HUndoManager *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HUndoManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pUndoManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pUndoManager_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HUndoManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HUndoManager *) (darg->m_pUndoManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pObjectManager_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HObjectManager *arg2 = (HObjectManager *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HObjectManager *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pObjectManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pObjectManager_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HObjectManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HObjectManager *) (darg->m_pObjectManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pDebugZBuffer_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HDebugZBuffer *arg2 = (HDebugZBuffer *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HDebugZBuffer *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pDebugZBuffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pDebugZBuffer_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HDebugZBuffer *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HDebugZBuffer *) (darg->m_pDebugZBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bLButtonDown_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bLButtonDown = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bLButtonDown_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bLButtonDown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bMouseMove_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bMouseMove = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bMouseMove_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bMouseMove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pManipulateOperator_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraManipulate *arg2 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HOpCameraManipulate *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pManipulateOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pManipulateOperator_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HOpCameraManipulate *) (darg->m_pManipulateOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bShadowRegeneration_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bShadowRegeneration = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bShadowRegeneration_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bShadowRegeneration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bShadowRegenerationToggle_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bShadowRegenerationToggle = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bShadowRegenerationToggle_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bShadowRegenerationToggle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlaneRegeneration_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCuttingPlaneRegeneration = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCuttingPlaneRegeneration_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCuttingPlaneRegeneration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bCameraChanged_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bCameraChanged = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bCameraChanged_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bCameraChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_IdleTime_set(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_IdleTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_m_IdleTime_get(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (float) (darg->m_IdleTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bFirstUpdate_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bFirstUpdate = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bFirstUpdate_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bFirstUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_pHandleOperator_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_pHandleOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_pHandleOperator_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HBaseOperator *) (darg->m_pHandleOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bAllowInteractiveShadows_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bAllowInteractiveShadows = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bAllowInteractiveShadows_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bAllowInteractiveShadows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bAllowInteractiveCutGeometry_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bAllowInteractiveCutGeometry = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bAllowInteractiveCutGeometry_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bAllowInteractiveCutGeometry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_DefaultSelectionProximity_set(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_DefaultSelectionProximity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_m_DefaultSelectionProximity_get(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (float) (darg->m_DefaultSelectionProximity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_MaximumUpdateTime_set(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_MaximumUpdateTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseView_m_MaximumUpdateTime_get(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (float) (darg->m_MaximumUpdateTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_InitialCamera_set(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HCamera *arg2 = (HCamera *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HCamera *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_InitialCamera = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseView_m_InitialCamera_get(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  HCamera *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (HCamera *)& (darg->m_InitialCamera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bInitialCameraSet_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bInitialCameraSet = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bInitialCameraSet_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bInitialCameraSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bRecordCamera_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bRecordCamera = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bRecordCamera_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bRecordCamera);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bTransparentSelectionBox_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bTransparentSelectionBox = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bTransparentSelectionBox_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bTransparentSelectionBox);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bInvertMouseWheelZoom_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bInvertMouseWheelZoom = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bInvertMouseWheelZoom_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bInvertMouseWheelZoom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_AnnotationCookie_set(void * jarg1, unsigned long jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_AnnotationCookie = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HBaseView_m_AnnotationCookie_get(void * jarg1) {
  unsigned long jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  unsigned long result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (unsigned long) (darg->m_AnnotationCookie);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_AxisResizeCookie_set(void * jarg1, unsigned long jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_AxisResizeCookie = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HBaseView_m_AxisResizeCookie_get(void * jarg1) {
  unsigned long jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  unsigned long result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (unsigned long) (darg->m_AxisResizeCookie);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_FramerateMode_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  FramerateMode arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (FramerateMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_FramerateMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_FramerateMode_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  FramerateMode result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (FramerateMode) (darg->m_FramerateMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_bSplatRendering_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_bSplatRendering = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_bSplatRendering_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_bSplatRendering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SplatSize_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SplatSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_SplatSize_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (int) (darg->m_SplatSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_SplatSymbol_set(void * jarg1, int jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SplatSymbol arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (SplatSymbol)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_SplatSymbol = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseView_m_SplatSymbol_get(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  SplatSymbol result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (SplatSymbol) (darg->m_SplatSymbol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_m_FocusedOnSelection_set(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  if (arg1) darg->m_FocusedOnSelection = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseView_m_FocusedOnSelection_get(void * jarg1) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  result = (bool) (darg->m_FocusedOnSelection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_ComputeShadowParams(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPlane *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->ComputeShadowParams(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_AdjustShadowPlane(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPlane *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->AdjustShadowPlane(*arg2,(HPoint const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowParams__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPlane *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  char *arg5 = (char *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (HPoint *)jarg4; 
  arg5 = (char *)jarg5; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->SetShadowParams((HPlane const &)*arg2,(HPoint const &)*arg3,(HPoint const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowParams__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPlane *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (HPoint *)jarg4; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->SetShadowParams((HPlane const &)*arg2,(HPoint const &)*arg3,(HPoint const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetShadowParams__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPlane *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->SetShadowParams((HPlane const &)*arg2,(HPoint const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_RefreshViewSize(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->RefreshViewSize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_QueryDeviceCapabilities(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->QueryDeviceCapabilities();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternal__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_0(void * jarg1, bool jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternalSwigPublic(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternal__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_1(void * jarg1, bool jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternalSwigPublic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternal__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_UpdateInternalSwigExplicitHBaseView__SWIG_2(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->UpdateInternalSwigPublic();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetupLights(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->SetupLights();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_SetupLightsSwigExplicitHBaseView(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  SwigDirector_HBaseView *darg = 0;
  
  arg1 = (HBaseView *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseView *>(arg1);
  (darg)->SetupLightsSwigPublic();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseView_director_connect(void *objarg, SwigDirector_HBaseView::SWIG_Callback0_t callback0, SwigDirector_HBaseView::SWIG_Callback1_t callback1, SwigDirector_HBaseView::SWIG_Callback2_t callback2, SwigDirector_HBaseView::SWIG_Callback3_t callback3, SwigDirector_HBaseView::SWIG_Callback4_t callback4, SwigDirector_HBaseView::SWIG_Callback5_t callback5, SwigDirector_HBaseView::SWIG_Callback6_t callback6, SwigDirector_HBaseView::SWIG_Callback7_t callback7, SwigDirector_HBaseView::SWIG_Callback8_t callback8, SwigDirector_HBaseView::SWIG_Callback9_t callback9, SwigDirector_HBaseView::SWIG_Callback10_t callback10, SwigDirector_HBaseView::SWIG_Callback11_t callback11, SwigDirector_HBaseView::SWIG_Callback12_t callback12, SwigDirector_HBaseView::SWIG_Callback13_t callback13, SwigDirector_HBaseView::SWIG_Callback14_t callback14, SwigDirector_HBaseView::SWIG_Callback15_t callback15, SwigDirector_HBaseView::SWIG_Callback16_t callback16, SwigDirector_HBaseView::SWIG_Callback17_t callback17, SwigDirector_HBaseView::SWIG_Callback18_t callback18, SwigDirector_HBaseView::SWIG_Callback19_t callback19, SwigDirector_HBaseView::SWIG_Callback20_t callback20, SwigDirector_HBaseView::SWIG_Callback21_t callback21, SwigDirector_HBaseView::SWIG_Callback22_t callback22, SwigDirector_HBaseView::SWIG_Callback23_t callback23, SwigDirector_HBaseView::SWIG_Callback24_t callback24, SwigDirector_HBaseView::SWIG_Callback25_t callback25, SwigDirector_HBaseView::SWIG_Callback26_t callback26, SwigDirector_HBaseView::SWIG_Callback27_t callback27, SwigDirector_HBaseView::SWIG_Callback28_t callback28, SwigDirector_HBaseView::SWIG_Callback29_t callback29, SwigDirector_HBaseView::SWIG_Callback30_t callback30, SwigDirector_HBaseView::SWIG_Callback31_t callback31, SwigDirector_HBaseView::SWIG_Callback32_t callback32, SwigDirector_HBaseView::SWIG_Callback33_t callback33, SwigDirector_HBaseView::SWIG_Callback34_t callback34, SwigDirector_HBaseView::SWIG_Callback35_t callback35, SwigDirector_HBaseView::SWIG_Callback36_t callback36, SwigDirector_HBaseView::SWIG_Callback37_t callback37, SwigDirector_HBaseView::SWIG_Callback38_t callback38, SwigDirector_HBaseView::SWIG_Callback39_t callback39, SwigDirector_HBaseView::SWIG_Callback40_t callback40, SwigDirector_HBaseView::SWIG_Callback41_t callback41, SwigDirector_HBaseView::SWIG_Callback42_t callback42, SwigDirector_HBaseView::SWIG_Callback43_t callback43, SwigDirector_HBaseView::SWIG_Callback44_t callback44, SwigDirector_HBaseView::SWIG_Callback45_t callback45, SwigDirector_HBaseView::SWIG_Callback46_t callback46, SwigDirector_HBaseView::SWIG_Callback47_t callback47, SwigDirector_HBaseView::SWIG_Callback48_t callback48, SwigDirector_HBaseView::SWIG_Callback49_t callback49, SwigDirector_HBaseView::SWIG_Callback50_t callback50, SwigDirector_HBaseView::SWIG_Callback51_t callback51, SwigDirector_HBaseView::SWIG_Callback52_t callback52, SwigDirector_HBaseView::SWIG_Callback53_t callback53, SwigDirector_HBaseView::SWIG_Callback54_t callback54, SwigDirector_HBaseView::SWIG_Callback55_t callback55, SwigDirector_HBaseView::SWIG_Callback56_t callback56, SwigDirector_HBaseView::SWIG_Callback57_t callback57, SwigDirector_HBaseView::SWIG_Callback58_t callback58, SwigDirector_HBaseView::SWIG_Callback59_t callback59, SwigDirector_HBaseView::SWIG_Callback60_t callback60, SwigDirector_HBaseView::SWIG_Callback61_t callback61, SwigDirector_HBaseView::SWIG_Callback62_t callback62, SwigDirector_HBaseView::SWIG_Callback63_t callback63, SwigDirector_HBaseView::SWIG_Callback64_t callback64, SwigDirector_HBaseView::SWIG_Callback65_t callback65, SwigDirector_HBaseView::SWIG_Callback66_t callback66, SwigDirector_HBaseView::SWIG_Callback67_t callback67, SwigDirector_HBaseView::SWIG_Callback68_t callback68, SwigDirector_HBaseView::SWIG_Callback69_t callback69, SwigDirector_HBaseView::SWIG_Callback70_t callback70, SwigDirector_HBaseView::SWIG_Callback71_t callback71, SwigDirector_HBaseView::SWIG_Callback72_t callback72, SwigDirector_HBaseView::SWIG_Callback73_t callback73, SwigDirector_HBaseView::SWIG_Callback74_t callback74, SwigDirector_HBaseView::SWIG_Callback75_t callback75, SwigDirector_HBaseView::SWIG_Callback76_t callback76, SwigDirector_HBaseView::SWIG_Callback77_t callback77, SwigDirector_HBaseView::SWIG_Callback78_t callback78, SwigDirector_HBaseView::SWIG_Callback79_t callback79, SwigDirector_HBaseView::SWIG_Callback80_t callback80, SwigDirector_HBaseView::SWIG_Callback81_t callback81, SwigDirector_HBaseView::SWIG_Callback82_t callback82, SwigDirector_HBaseView::SWIG_Callback83_t callback83, SwigDirector_HBaseView::SWIG_Callback84_t callback84, SwigDirector_HBaseView::SWIG_Callback85_t callback85, SwigDirector_HBaseView::SWIG_Callback86_t callback86, SwigDirector_HBaseView::SWIG_Callback87_t callback87, SwigDirector_HBaseView::SWIG_Callback88_t callback88, SwigDirector_HBaseView::SWIG_Callback89_t callback89, SwigDirector_HBaseView::SWIG_Callback90_t callback90, SwigDirector_HBaseView::SWIG_Callback91_t callback91, SwigDirector_HBaseView::SWIG_Callback92_t callback92, SwigDirector_HBaseView::SWIG_Callback93_t callback93, SwigDirector_HBaseView::SWIG_Callback94_t callback94, SwigDirector_HBaseView::SWIG_Callback95_t callback95, SwigDirector_HBaseView::SWIG_Callback96_t callback96, SwigDirector_HBaseView::SWIG_Callback97_t callback97, SwigDirector_HBaseView::SWIG_Callback98_t callback98, SwigDirector_HBaseView::SWIG_Callback99_t callback99, SwigDirector_HBaseView::SWIG_Callback100_t callback100, SwigDirector_HBaseView::SWIG_Callback101_t callback101, SwigDirector_HBaseView::SWIG_Callback102_t callback102, SwigDirector_HBaseView::SWIG_Callback103_t callback103, SwigDirector_HBaseView::SWIG_Callback104_t callback104, SwigDirector_HBaseView::SWIG_Callback105_t callback105, SwigDirector_HBaseView::SWIG_Callback106_t callback106, SwigDirector_HBaseView::SWIG_Callback107_t callback107, SwigDirector_HBaseView::SWIG_Callback108_t callback108, SwigDirector_HBaseView::SWIG_Callback109_t callback109, SwigDirector_HBaseView::SWIG_Callback110_t callback110, SwigDirector_HBaseView::SWIG_Callback111_t callback111, SwigDirector_HBaseView::SWIG_Callback112_t callback112, SwigDirector_HBaseView::SWIG_Callback113_t callback113, SwigDirector_HBaseView::SWIG_Callback114_t callback114, SwigDirector_HBaseView::SWIG_Callback115_t callback115, SwigDirector_HBaseView::SWIG_Callback116_t callback116, SwigDirector_HBaseView::SWIG_Callback117_t callback117, SwigDirector_HBaseView::SWIG_Callback118_t callback118, SwigDirector_HBaseView::SWIG_Callback119_t callback119, SwigDirector_HBaseView::SWIG_Callback120_t callback120, SwigDirector_HBaseView::SWIG_Callback121_t callback121, SwigDirector_HBaseView::SWIG_Callback122_t callback122, SwigDirector_HBaseView::SWIG_Callback123_t callback123, SwigDirector_HBaseView::SWIG_Callback124_t callback124, SwigDirector_HBaseView::SWIG_Callback125_t callback125, SwigDirector_HBaseView::SWIG_Callback126_t callback126, SwigDirector_HBaseView::SWIG_Callback127_t callback127, SwigDirector_HBaseView::SWIG_Callback128_t callback128, SwigDirector_HBaseView::SWIG_Callback129_t callback129, SwigDirector_HBaseView::SWIG_Callback130_t callback130, SwigDirector_HBaseView::SWIG_Callback131_t callback131, SwigDirector_HBaseView::SWIG_Callback132_t callback132, SwigDirector_HBaseView::SWIG_Callback133_t callback133, SwigDirector_HBaseView::SWIG_Callback134_t callback134, SwigDirector_HBaseView::SWIG_Callback135_t callback135, SwigDirector_HBaseView::SWIG_Callback136_t callback136, SwigDirector_HBaseView::SWIG_Callback137_t callback137, SwigDirector_HBaseView::SWIG_Callback138_t callback138, SwigDirector_HBaseView::SWIG_Callback139_t callback139, SwigDirector_HBaseView::SWIG_Callback140_t callback140, SwigDirector_HBaseView::SWIG_Callback141_t callback141, SwigDirector_HBaseView::SWIG_Callback142_t callback142, SwigDirector_HBaseView::SWIG_Callback143_t callback143, SwigDirector_HBaseView::SWIG_Callback144_t callback144, SwigDirector_HBaseView::SWIG_Callback145_t callback145, SwigDirector_HBaseView::SWIG_Callback146_t callback146, SwigDirector_HBaseView::SWIG_Callback147_t callback147, SwigDirector_HBaseView::SWIG_Callback148_t callback148, SwigDirector_HBaseView::SWIG_Callback149_t callback149, SwigDirector_HBaseView::SWIG_Callback150_t callback150, SwigDirector_HBaseView::SWIG_Callback151_t callback151, SwigDirector_HBaseView::SWIG_Callback152_t callback152, SwigDirector_HBaseView::SWIG_Callback153_t callback153, SwigDirector_HBaseView::SWIG_Callback154_t callback154, SwigDirector_HBaseView::SWIG_Callback155_t callback155, SwigDirector_HBaseView::SWIG_Callback156_t callback156, SwigDirector_HBaseView::SWIG_Callback157_t callback157, SwigDirector_HBaseView::SWIG_Callback158_t callback158, SwigDirector_HBaseView::SWIG_Callback159_t callback159) {
  HBaseView *obj = (HBaseView *)objarg;
  SwigDirector_HBaseView *director = dynamic_cast<SwigDirector_HBaseView *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40, callback41, callback42, callback43, callback44, callback45, callback46, callback47, callback48, callback49, callback50, callback51, callback52, callback53, callback54, callback55, callback56, callback57, callback58, callback59, callback60, callback61, callback62, callback63, callback64, callback65, callback66, callback67, callback68, callback69, callback70, callback71, callback72, callback73, callback74, callback75, callback76, callback77, callback78, callback79, callback80, callback81, callback82, callback83, callback84, callback85, callback86, callback87, callback88, callback89, callback90, callback91, callback92, callback93, callback94, callback95, callback96, callback97, callback98, callback99, callback100, callback101, callback102, callback103, callback104, callback105, callback106, callback107, callback108, callback109, callback110, callback111, callback112, callback113, callback114, callback115, callback116, callback117, callback118, callback119, callback120, callback121, callback122, callback123, callback124, callback125, callback126, callback127, callback128, callback129, callback130, callback131, callback132, callback133, callback134, callback135, callback136, callback137, callback138, callback139, callback140, callback141, callback142, callback143, callback144, callback145, callback146, callback147, callback148, callback149, callback150, callback151, callback152, callback153, callback154, callback155, callback156, callback157, callback158, callback159);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HDB() {
  void * jresult ;
  HDB *result = 0 ;
  
  result = (HDB *)new SwigDirector_HDB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HDB(void * jarg1) {
  HDB *arg1 = (HDB *) 0 ;
  
  arg1 = (HDB *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_Init(void * jarg1) {
  HDB *arg1 = (HDB *) 0 ;
  
  arg1 = (HDB *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_InitSwigExplicitHDB(void * jarg1) {
  HDB *arg1 = (HDB *) 0 ;
  
  arg1 = (HDB *)jarg1; 
  (arg1)->HDB::Init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_GetHDB() {
  void * jresult ;
  HDB *result = 0 ;
  
  result = (HDB *)HDB::GetHDB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_IncrementInstanceCount() {
  HDB::IncrementInstanceCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_DecrementInstanceCount() {
  HDB::DecrementInstanceCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetInstanceBase(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  HDB::SetInstanceBase((char const *)arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HDB_GetInstanceBase() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)HDB::GetInstanceBase();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetDriverType(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  HDB::SetDriverType((char const *)arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HDB_GetDriverType() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)HDB::GetDriverType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HDB_GetCleanInclude() {
  bool jresult ;
  bool result;
  
  result = (bool)HDB::GetCleanInclude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetCleanInclude(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HDB::SetCleanInclude(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HDB_GetInstanceCount() {
  int jresult ;
  int result;
  
  result = (int)HDB::GetInstanceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HDB_GetUniqueID() {
  int jresult ;
  int result;
  
  result = (int)HDB::GetUniqueID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetInstanceCount(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  HDB::SetInstanceCount(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_GetHImManager() {
  void * jresult ;
  HImManager *result = 0 ;
  
  result = (HImManager *)HDB::GetHImManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_SetHImManager(void * jarg1) {
  void * jresult ;
  HImManager *arg1 = (HImManager *) 0 ;
  HImManager *result = 0 ;
  
  arg1 = (HImManager *)jarg1; 
  result = (HImManager *)HDB::SetHImManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_GetHIOManager() {
  void * jresult ;
  HIOManager *result = 0 ;
  
  result = (HIOManager *)HDB::GetHIOManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_SetHIOManager(void * jarg1) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  HIOManager *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  result = (HIOManager *)HDB::SetHIOManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_GetMaterialLibrary() {
  void * jresult ;
  HMaterialLibrary *result = 0 ;
  
  result = (HMaterialLibrary *)HDB::GetMaterialLibrary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetMaterialLibrary(void * jarg1) {
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  HDB::SetMaterialLibrary(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_GetHTManager() {
  void * jresult ;
  HTManager *result = 0 ;
  
  result = (HTManager *)HDB::GetHTManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HDB_SetHTManager(void * jarg1) {
  void * jresult ;
  HTManager *arg1 = (HTManager *) 0 ;
  HTManager *result = 0 ;
  
  arg1 = (HTManager *)jarg1; 
  result = (HTManager *)HDB::SetHTManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HDB_GetUniqueIncludeKey() {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY result;
  
  result = HDB::GetUniqueIncludeKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HDB_GetNextCookie() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long)HDB::GetNextCookie();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_ReportError__SWIG_0(char * jarg1, int jarg2, int jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  HDB::ReportError((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_ReportError__SWIG_1(char * jarg1, int jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  HDB::ReportError((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_ReportError__SWIG_2(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  HDB::ReportError((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_ReportError__SWIG_3(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  HDB::ReportError((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_EnableErrorManager() {
  HDB::EnableErrorManager();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_DisableErrorManager() {
  HDB::DisableErrorManager();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetOwnsSystem(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HDB::SetOwnsSystem(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HDB_GetOwnsSystem() {
  bool jresult ;
  bool result;
  
  result = (bool)HDB::GetOwnsSystem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetIsolatedDrivers(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HDB::SetIsolatedDrivers(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HDB_GetIsolatedDrivers() {
  bool jresult ;
  bool result;
  
  result = (bool)HDB::GetIsolatedDrivers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_Lock() {
  HDB::Lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_UnLock() {
  HDB::UnLock();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HDB_GetPublishExchangeLicenseSet() {
  bool jresult ;
  bool result;
  
  result = (bool)HDB::GetPublishExchangeLicenseSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetPublishExchangeLicenseSet(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HDB::SetPublishExchangeLicenseSet(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HDB_GetPublishInitialized() {
  bool jresult ;
  bool result;
  
  result = (bool)HDB::GetPublishInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_SetPublishInitialized(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HDB::SetPublishInitialized(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDB_director_connect(void *objarg, SwigDirector_HDB::SWIG_Callback0_t callback0) {
  HDB *obj = (HDB *)objarg;
  SwigDirector_HDB *director = dynamic_cast<SwigDirector_HDB *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTouchInfo__SWIG_0(float jarg1, float jarg2, float jarg3, int jarg4, MVO_POINTER_SIZED_UINT jarg5, bool jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  MVO_POINTER_SIZED_UINT arg5 ;
  bool arg6 ;
  HTouchInfo *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (HTouchInfo *)new HTouchInfo(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTouchInfo__SWIG_1(float jarg1, float jarg2, float jarg3, int jarg4, MVO_POINTER_SIZED_UINT jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  MVO_POINTER_SIZED_UINT arg5 ;
  HTouchInfo *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5; 
  result = (HTouchInfo *)new HTouchInfo(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTouchInfo__SWIG_2() {
  void * jresult ;
  HTouchInfo *result = 0 ;
  
  result = (HTouchInfo *)new HTouchInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, MVO_POINTER_SIZED_UINT jarg6, bool jarg7) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  MVO_POINTER_SIZED_UINT arg6 ;
  bool arg7 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, MVO_POINTER_SIZED_UINT jarg6) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  MVO_POINTER_SIZED_UINT arg6 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6; 
  (arg1)->Init(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->Init(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Init(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_4(void * jarg1, float jarg2, float jarg3) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Init(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_5(void * jarg1, float jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_Init__SWIG_6(void * jarg1) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_x_set(void * jarg1, float jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HTouchInfo_m_x_get(void * jarg1) {
  float jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result = (float) ((arg1)->m_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_y_set(void * jarg1, float jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HTouchInfo_m_y_get(void * jarg1) {
  float jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result = (float) ((arg1)->m_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_timestamp_set(void * jarg1, float jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timestamp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HTouchInfo_m_timestamp_get(void * jarg1) {
  float jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  float result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result = (float) ((arg1)->m_timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_taps_set(void * jarg1, int jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  int arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_taps = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTouchInfo_m_taps_get(void * jarg1) {
  int jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  int result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result = (int) ((arg1)->m_taps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_bActive_set(void * jarg1, bool jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bActive = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HTouchInfo_m_bActive_get(void * jarg1) {
  bool jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  bool result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result = (bool) ((arg1)->m_bActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchInfo_m_id_set(void * jarg1, MVO_POINTER_SIZED_UINT jarg2) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  MVO_POINTER_SIZED_UINT arg2 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_id = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_UINT SWIGSTDCALL CSharp_HTouchInfo_m_id_get(void * jarg1) {
  MVO_POINTER_SIZED_UINT jresult ;
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  MVO_POINTER_SIZED_UINT result;
  
  arg1 = (HTouchInfo *)jarg1; 
  result =  ((arg1)->m_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTouchInfo(void * jarg1) {
  HTouchInfo *arg1 = (HTouchInfo *) 0 ;
  
  arg1 = (HTouchInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTouchManager() {
  void * jresult ;
  HTouchManager *result = 0 ;
  
  result = (HTouchManager *)new HTouchManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTouchManager(void * jarg1) {
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTouchManager_AddTouch(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5, MVO_POINTER_SIZED_UINT jarg6) {
  void * jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  MVO_POINTER_SIZED_UINT arg6 ;
  HTouchInfo *result = 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6; 
  result = (HTouchInfo *)(arg1)->AddTouch(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchManager_ClearTouchActivity(void * jarg1) {
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  (arg1)->ClearTouchActivity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTouchManager_ClearTouches(void * jarg1) {
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  (arg1)->ClearTouches();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HTouchManager_RemoveTouch(void * jarg1, MVO_POINTER_SIZED_UINT jarg2) {
  bool jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  MVO_POINTER_SIZED_UINT arg2 ;
  bool result;
  
  arg1 = (HTouchManager *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->RemoveTouch(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTouchManager_GetActiveTouchCount(void * jarg1) {
  int jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  int result;
  
  arg1 = (HTouchManager *)jarg1; 
  result = (int)(arg1)->GetActiveTouchCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTouchManager_GetTouchCount(void * jarg1) {
  int jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  int result;
  
  arg1 = (HTouchManager *)jarg1; 
  result = (int)(arg1)->GetTouchCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTouchManager_GetTouch__SWIG_0(void * jarg1, int jarg2, bool jarg3) {
  void * jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  HTouchInfo *result = 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (HTouchInfo *)(arg1)->GetTouch(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTouchManager_GetTouch__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HTouchManager *arg1 = (HTouchManager *) 0 ;
  int arg2 ;
  HTouchInfo *result = 0 ;
  
  arg1 = (HTouchManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HTouchInfo *)(arg1)->GetTouch(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEventInfo(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HEventInfo *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HEventInfo *)new HEventInfo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_ALT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_LBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_MBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 5;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_RBUTTON_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 6;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_RIGHT_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 7;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_RIGHT_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 8;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_RIGHT_ALT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 9;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_LEFT_CONTROL_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 10;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_LEFT_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 11;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_LEFT_ALT_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 12;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_LEFT_ARROW_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 13;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_UP_ARROW_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 14;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_RIGHT_ARROW_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 15;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_DOWN_ARROW_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 16;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_1_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 17;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_2_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 18;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_3_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 19;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_4_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 20;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_5_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 21;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_6_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 22;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_7_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 23;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MVO_JOYSTICK_BUTTON_8_get() {
  int jresult ;
  int result;
  
  result = (int) 1 << 24;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventInfo_MAX_TOUCHES_get() {
  int jresult ;
  int result;
  
  result = (int)HEventInfo::MAX_TOUCHES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_Control(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->Control();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_Shift(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->Shift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_Alt(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->Alt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_LeftAlt(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->LeftAlt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_LeftControl(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->LeftControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_LeftShift(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->LeftShift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_RightAlt(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->RightAlt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_RightControl(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->RightControl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_RightShift(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->RightShift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_LButton(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->LButton();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_MButton(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->MButton();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_RButton(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->RButton();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_LeftArrow(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->LeftArrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_UpArrow(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->UpArrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_RightArrow(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->RightArrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventInfo_DownArrow(void * jarg1) {
  bool jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  bool result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (bool)((HEventInfo const *)arg1)->DownArrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetView(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HBaseView *)((HEventInfo const *)arg1)->GetView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetMousePixelPos(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetMousePixelPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetMouseWindowPos(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetMouseWindowPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetMouseWorldPos(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetMouseWorldPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetMouseViewpointPos(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetMouseViewpointPos();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetJoystickRotation(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetJoystickRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventInfo_GetJoystickTranslation(void * jarg1) {
  void * jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HPoint *) &((HEventInfo const *)arg1)->GetJoystickTranslation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEventInfo_GetChar(void * jarg1) {
  unsigned int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  unsigned int result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (unsigned int)((HEventInfo const *)arg1)->GetChar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEventInfo_GetCharRepCount(void * jarg1) {
  unsigned int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  unsigned int result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (unsigned int)((HEventInfo const *)arg1)->GetCharRepCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEventInfo_GetTimerId(void * jarg1) {
  unsigned int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  unsigned int result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (unsigned int)((HEventInfo const *)arg1)->GetTimerId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HEventInfo_GetFlags(void * jarg1) {
  unsigned int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  unsigned int result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (unsigned int)((HEventInfo const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetType(void * jarg1, int jarg2) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventInfo_GetEventType(void * jarg1) {
  int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (HEventType)((HEventInfo const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetPoint(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->SetPoint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetPixelPos(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  HPoint *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (unsigned int)jarg4; 
  (arg1)->SetPixelPos(arg2,(HPoint const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetWindowPos(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  HPoint *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (unsigned int)jarg4; 
  (arg1)->SetWindowPos(arg2,(HPoint const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetWorldPos(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  HPoint *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (unsigned int)jarg4; 
  (arg1)->SetWorldPos(arg2,(HPoint const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetViewpointPos(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  HPoint *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (unsigned int)jarg4; 
  (arg1)->SetViewpointPos(arg2,(HPoint const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetKey(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->SetKey(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetTimer(void * jarg1, int jarg2, unsigned int jarg3) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  HEventType arg2 ;
  unsigned int arg3 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (HEventType)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetMouseWheelDelta(void * jarg1, int jarg2) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  int arg2 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMouseWheelDelta(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventInfo_SetFlags(void * jarg1, int jarg2) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  int arg2 ;
  
  arg1 = (HEventInfo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventInfo_GetMouseWheelDelta(void * jarg1) {
  int jresult ;
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  int result;
  
  arg1 = (HEventInfo *)jarg1; 
  result = (int)((HEventInfo const *)arg1)->GetMouseWheelDelta();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEventInfo(void * jarg1) {
  HEventInfo *arg1 = (HEventInfo *) 0 ;
  
  arg1 = (HEventInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double) 0.00001;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_bOpStarted_set(void * jarg1, bool jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_bOpStarted = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseOperator_m_bOpStarted_get(void * jarg1) {
  bool jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  bool result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (bool) (darg->m_bOpStarted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_doRepeat_set(void * jarg1, int jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  int arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_doRepeat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_m_doRepeat_get(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (int) (darg->m_doRepeat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_doCapture_set(void * jarg1, int jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  int arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_doCapture = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_m_doCapture_get(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (int) (darg->m_doCapture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_ptFirst_set(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_ptFirst = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_m_ptFirst_get(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (HPoint *)& (darg->m_ptFirst);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_ptNew_set(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_ptNew = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_m_ptNew_get(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (HPoint *)& (darg->m_ptNew);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_pView_set(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_pView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_m_pView_get(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (HBaseView *) (darg->m_pView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_bMapTouchesToMouseEvents_set(void * jarg1, bool jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_bMapTouchesToMouseEvents = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseOperator_m_bMapTouchesToMouseEvents_get(void * jarg1) {
  bool jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  bool result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (bool) (darg->m_bMapTouchesToMouseEvents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseOperator_IsSpecialKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  bool result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (bool)(darg)->IsSpecialKey(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_TempShadowMode_set(void * jarg1, int jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HShadowMode arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HShadowMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_TempShadowMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_m_TempShadowMode_get(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  HShadowMode result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (HShadowMode) (darg->m_TempShadowMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_m_TempCutGeometryVisibility_set(void * jarg1, int jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HCutGeometryVisibility arg2 ;
  SwigDirector_HBaseOperator *darg = 0;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HCutGeometryVisibility)jarg2; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  if (arg1) darg->m_TempCutGeometryVisibility = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_m_TempCutGeometryVisibility_get(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  SwigDirector_HBaseOperator *darg = 0;
  HCutGeometryVisibility result;
  
  arg1 = (HBaseOperator *)jarg1; 
  darg = dynamic_cast<SwigDirector_HBaseOperator *>(arg1);
  result = (HCutGeometryVisibility) (darg->m_TempCutGeometryVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_Repeat(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (int)(arg1)->Repeat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_Capture(void * jarg1) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (int)(arg1)->Capture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_Clone(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_CloneSwigExplicitHBaseOperator(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (HBaseOperator *)(arg1)->HBaseOperator::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_SetFirstPoint(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->SetFirstPoint((HPoint const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_GetFirstPoint(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (arg1)->GetFirstPoint();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_SetNewPoint(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->SetNewPoint((HPoint const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_GetNewPoint(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HPoint result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (arg1)->GetNewPoint();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseOperator_GetView(void * jarg1) {
  void * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (HBaseView *)(arg1)->GetView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_SetView(void * jarg1, void * jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->SetView(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseOperator_OperatorStarted(void * jarg1) {
  bool jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (bool)(arg1)->OperatorStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseOperator_OperatorStartedSwigExplicitHBaseOperator(void * jarg1) {
  bool jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool result;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (bool)(arg1)->HBaseOperator::OperatorStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_SetOperatorStarted(void * jarg1, bool jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOperatorStarted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_SetMapTouchesToMouseEvents(void * jarg1, bool jarg2) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMapTouchesToMouseEvents(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseOperator__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HBaseOperator *)new SwigDirector_HBaseOperator(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseOperator__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HBaseOperator *)new SwigDirector_HBaseOperator(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBaseOperator__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HBaseOperator *)new SwigDirector_HBaseOperator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBaseOperator(void * jarg1) {
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMouseMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMouseMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMouseMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBaseOperator_GetName(void * jarg1) {
  char * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBaseOperator_GetNameSwigExplicitHBaseOperator(void * jarg1) {
  char * jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBaseOperator *)jarg1; 
  result = (char *)(arg1)->HBaseOperator::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDownSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonUpSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDblClkSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLButtonDownAndMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDownSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonUpSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDblClkSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMButtonDownAndMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDownSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonUpSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDblClkSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnRButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnRButtonDownAndMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnLRButtonDownAndMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnLRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnNoButtonDownAndMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTimer(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTimer(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTimerSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnTimer(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnKeyDownSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnKeyUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnKeyUpSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnKeyUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMouseWheel(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnMouseWheelSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesDownSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesMoveSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseOperator_OnTouchesUpSwigExplicitHBaseOperator(void * jarg1, void * jarg2) {
  int jresult ;
  HBaseOperator *arg1 = (HBaseOperator *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HBaseOperator *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HBaseOperator::OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseOperator_director_connect(void *objarg, SwigDirector_HBaseOperator::SWIG_Callback0_t callback0, SwigDirector_HBaseOperator::SWIG_Callback1_t callback1, SwigDirector_HBaseOperator::SWIG_Callback2_t callback2, SwigDirector_HBaseOperator::SWIG_Callback3_t callback3, SwigDirector_HBaseOperator::SWIG_Callback4_t callback4, SwigDirector_HBaseOperator::SWIG_Callback5_t callback5, SwigDirector_HBaseOperator::SWIG_Callback6_t callback6, SwigDirector_HBaseOperator::SWIG_Callback7_t callback7, SwigDirector_HBaseOperator::SWIG_Callback8_t callback8, SwigDirector_HBaseOperator::SWIG_Callback9_t callback9, SwigDirector_HBaseOperator::SWIG_Callback10_t callback10, SwigDirector_HBaseOperator::SWIG_Callback11_t callback11, SwigDirector_HBaseOperator::SWIG_Callback12_t callback12, SwigDirector_HBaseOperator::SWIG_Callback13_t callback13, SwigDirector_HBaseOperator::SWIG_Callback14_t callback14, SwigDirector_HBaseOperator::SWIG_Callback15_t callback15, SwigDirector_HBaseOperator::SWIG_Callback16_t callback16, SwigDirector_HBaseOperator::SWIG_Callback17_t callback17, SwigDirector_HBaseOperator::SWIG_Callback18_t callback18, SwigDirector_HBaseOperator::SWIG_Callback19_t callback19, SwigDirector_HBaseOperator::SWIG_Callback20_t callback20, SwigDirector_HBaseOperator::SWIG_Callback21_t callback21, SwigDirector_HBaseOperator::SWIG_Callback22_t callback22, SwigDirector_HBaseOperator::SWIG_Callback23_t callback23, SwigDirector_HBaseOperator::SWIG_Callback24_t callback24, SwigDirector_HBaseOperator::SWIG_Callback25_t callback25) {
  HBaseOperator *obj = (HBaseOperator *)objarg;
  SwigDirector_HBaseOperator *director = dynamic_cast<SwigDirector_HBaseOperator *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FaceWithNormalInfo() {
  void * jresult ;
  FaceWithNormalInfo *result = 0 ;
  
  result = (FaceWithNormalInfo *)new FaceWithNormalInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaceWithNormalInfo_nindex_set(void * jarg1, int jarg2) {
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int arg2 ;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nindex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FaceWithNormalInfo_nindex_get(void * jarg1) {
  int jresult ;
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int result;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  result = (int) ((arg1)->nindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaceWithNormalInfo_nextindex_set(void * jarg1, int jarg2) {
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int arg2 ;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nextindex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FaceWithNormalInfo_nextindex_get(void * jarg1) {
  int jresult ;
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int result;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  result = (int) ((arg1)->nextindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FaceWithNormalInfo_tcindex_set(void * jarg1, int jarg2) {
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int arg2 ;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tcindex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FaceWithNormalInfo_tcindex_get(void * jarg1) {
  int jresult ;
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  int result;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  result = (int) ((arg1)->tcindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FaceWithNormalInfo(void * jarg1) {
  FaceWithNormalInfo *arg1 = (FaceWithNormalInfo *) 0 ;
  
  arg1 = (FaceWithNormalInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShellToRegionMapper() {
  void * jresult ;
  ShellToRegionMapper *result = 0 ;
  
  result = (ShellToRegionMapper *)new ShellToRegionMapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_AddRegion__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, bool jarg5) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddRegion(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_AddRegion__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->AddRegion(arg2,arg3,arg4);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_ShellToRegionMapper_GetOriginalShell(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY result;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->GetOriginalShell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ShellToRegionMapper_GetRegionsFromOriginalShell(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, int * jarg4) {
  int jresult ;
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  HC_KEY **arg3 = (HC_KEY **) 0 ;
  int *arg4 = 0 ;
  int result;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HC_KEY **)jarg3; 
  arg4 = (int *)jarg4; 
  result = (int)(arg1)->GetRegionsFromOriginalShell(arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_BuildSegmentTreeRecursive(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->BuildSegmentTreeRecursive(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_MapSegmentTree(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  (arg1)->MapSegmentTree(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_AddSegmentMapping(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->AddSegmentMapping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_m_RegionToShellHash_set(void * jarg1, void * jarg2) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_RegionToShellHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShellToRegionMapper_m_RegionToShellHash_get(void * jarg1) {
  void * jresult ;
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  result = (vhash_s *) ((arg1)->m_RegionToShellHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_m_ShellToRegionHash_set(void * jarg1, void * jarg2) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_ShellToRegionHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShellToRegionMapper_m_ShellToRegionHash_get(void * jarg1) {
  void * jresult ;
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  result = (vhash_s *) ((arg1)->m_ShellToRegionHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellToRegionMapper_m_ShellToSegmentHash_set(void * jarg1, void * jarg2) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_ShellToSegmentHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShellToRegionMapper_m_ShellToSegmentHash_get(void * jarg1) {
  void * jresult ;
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  result = (vhash_s *) ((arg1)->m_ShellToSegmentHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShellToRegionMapper(void * jarg1) {
  ShellToRegionMapper *arg1 = (ShellToRegionMapper *) 0 ;
  
  arg1 = (ShellToRegionMapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellEdge__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HShellEdge *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HShellEdge *)new HShellEdge(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellEdge__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  HShellEdge *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HShellEdge *)new HShellEdge(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellEdge__SWIG_2() {
  void * jresult ;
  HShellEdge *result = 0 ;
  
  result = (HShellEdge *)new HShellEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellEdge_GetFirst(void * jarg1) {
  int jresult ;
  HShellEdge *arg1 = (HShellEdge *) 0 ;
  int result;
  
  arg1 = (HShellEdge *)jarg1; 
  result = (int)((HShellEdge const *)arg1)->GetFirst();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellEdge_GetSecond(void * jarg1) {
  int jresult ;
  HShellEdge *arg1 = (HShellEdge *) 0 ;
  int result;
  
  arg1 = (HShellEdge *)jarg1; 
  result = (int)((HShellEdge const *)arg1)->GetSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellEdge_Set(void * jarg1, int jarg2, int jarg3) {
  HShellEdge *arg1 = (HShellEdge *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HShellEdge *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellEdge(void * jarg1) {
  HShellEdge *arg1 = (HShellEdge *) 0 ;
  
  arg1 = (HShellEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellFace(void * jarg1, int jarg2) {
  void * jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int arg2 ;
  HShellFace *result = 0 ;
  
  arg1 = (HShellObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HShellFace *)new HShellFace((HShellObject const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellFace_GetPointCount(void * jarg1) {
  int jresult ;
  HShellFace *arg1 = (HShellFace *) 0 ;
  int result;
  
  arg1 = (HShellFace *)jarg1; 
  result = (int)((HShellFace const *)arg1)->GetPointCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellFace_GetEdgeCount(void * jarg1) {
  int jresult ;
  HShellFace *arg1 = (HShellFace *) 0 ;
  int result;
  
  arg1 = (HShellFace *)jarg1; 
  result = (int)((HShellFace const *)arg1)->GetEdgeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellFace_GetEdge(void * jarg1, int jarg2) {
  void * jresult ;
  HShellFace *arg1 = (HShellFace *) 0 ;
  int arg2 ;
  HShellEdge result;
  
  arg1 = (HShellFace *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((HShellFace const *)arg1)->GetEdge(arg2);
  jresult = new HShellEdge((const HShellEdge &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellFace_OpenEdge(void * jarg1, int jarg2) {
  HShellFace *arg1 = (HShellFace *) 0 ;
  int arg2 ;
  
  arg1 = (HShellFace *)jarg1; 
  arg2 = (int)jarg2; 
  ((HShellFace const *)arg1)->OpenEdge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellFace_CloseEdge(void * jarg1) {
  HShellFace *arg1 = (HShellFace *) 0 ;
  
  arg1 = (HShellFace *)jarg1; 
  ((HShellFace const *)arg1)->CloseEdge();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellFace(void * jarg1) {
  HShellFace *arg1 = (HShellFace *) 0 ;
  
  arg1 = (HShellFace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellRegion(void * jarg1, int jarg2) {
  void * jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int arg2 ;
  HShellRegion *result = 0 ;
  
  arg1 = (HShellObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HShellRegion *)new HShellRegion((HShellObject const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellRegion(void * jarg1) {
  HShellRegion *arg1 = (HShellRegion *) 0 ;
  
  arg1 = (HShellRegion *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellRegion_GetFaceCount(void * jarg1) {
  int jresult ;
  HShellRegion *arg1 = (HShellRegion *) 0 ;
  int result;
  
  arg1 = (HShellRegion *)jarg1; 
  result = (int)((HShellRegion const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellRegion_GetFace(void * jarg1, int jarg2) {
  void * jresult ;
  HShellRegion *arg1 = (HShellRegion *) 0 ;
  int arg2 ;
  SwigValueWrapper< HShellFace > result;
  
  arg1 = (HShellRegion *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((HShellRegion const *)arg1)->GetFace(arg2);
  jresult = new HShellFace((const HShellFace &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellObject__SWIG_0(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HShellObject *result = 0 ;
  
  arg1 = jarg1; 
  result = (HShellObject *)new HShellObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellObject__SWIG_1(void * jarg1) {
  void * jresult ;
  HShellObject *arg1 = 0 ;
  HShellObject *result = 0 ;
  
  arg1 = (HShellObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return 0;
  } 
  result = (HShellObject *)new HShellObject((HShellObject const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellObject(void * jarg1) {
  HShellObject *arg1 = (HShellObject *) 0 ;
  
  arg1 = (HShellObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellObject_GetRegion(void * jarg1, int jarg2) {
  void * jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int arg2 ;
  SwigValueWrapper< HShellRegion > result;
  
  arg1 = (HShellObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((HShellObject const *)arg1)->GetRegion(arg2);
  jresult = new HShellRegion((const HShellRegion &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellObject_GetFaceCount(void * jarg1) {
  int jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int result;
  
  arg1 = (HShellObject *)jarg1; 
  result = (int)((HShellObject const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellObject_GetFaceFlistIndex(void * jarg1, int jarg2) {
  int jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HShellObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((HShellObject const *)arg1)->GetFaceFlistIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellObject_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellObject *)jarg1; 
  result = ((HShellObject const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellObject_GetFlistLen(void * jarg1) {
  int jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int result;
  
  arg1 = (HShellObject *)jarg1; 
  result = (int)((HShellObject const *)arg1)->GetFlistLen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const int * SWIGSTDCALL CSharp_HShellObject_GetFlist__SWIG_0(void * jarg1) {
  const int * jresult ;
  HShellObject *arg1 = (HShellObject *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShellObject *)jarg1; 
  result = (int *)((HShellObject const *)arg1)->GetFlist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellObject_GetFlist__SWIG_1(void * jarg1, int * jarg2) {
  HShellObject *arg1 = (HShellObject *) 0 ;
  int *arg2 ;
  
  arg1 = (HShellObject *)jarg1; 
  arg2 = (int *)jarg2; 
  ((HShellObject const *)arg1)->GetFlist(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShell() {
  void * jresult ;
  HShell *result = 0 ;
  
  result = (HShell *)new HShell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShell(void * jarg1) {
  HShell *arg1 = (HShell *) 0 ;
  
  arg1 = (HShell *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShell_point_list_len_set(void * jarg1, int jarg2) {
  HShell *arg1 = (HShell *) 0 ;
  int arg2 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->point_list_len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShell_point_list_len_get(void * jarg1) {
  int jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int result;
  
  arg1 = (HShell *)jarg1; 
  result = (int) ((arg1)->point_list_len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShell_point_list_get(void * jarg1) {
  void * jresult ;
  HShell *arg1 = (HShell *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HShell *)jarg1; 
  result = (HPoint *) ((arg1)->point_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShell_normal_list_get(void * jarg1) {
  void * jresult ;
  HShell *arg1 = (HShell *) 0 ;
  HVector *result = 0 ;
  
  arg1 = (HShell *)jarg1; 
  result = (HVector *) ((arg1)->normal_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShell_face_list_len_set(void * jarg1, int jarg2) {
  HShell *arg1 = (HShell *) 0 ;
  int arg2 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->face_list_len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShell_face_list_len_get(void * jarg1) {
  int jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int result;
  
  arg1 = (HShell *)jarg1; 
  result = (int) ((arg1)->face_list_len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_HShell_face_list_get(void * jarg1) {
  int * jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShell *)jarg1; 
  result = (int *) ((arg1)->face_list);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShell_face_count_set(void * jarg1, int jarg2) {
  HShell *arg1 = (HShell *) 0 ;
  int arg2 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->face_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShell_face_count_get(void * jarg1) {
  int jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int result;
  
  arg1 = (HShell *)jarg1; 
  result = (int) ((arg1)->face_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShell_region_count_set(void * jarg1, int jarg2) {
  HShell *arg1 = (HShell *) 0 ;
  int arg2 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->region_count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShell_region_count_get(void * jarg1) {
  int jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int result;
  
  arg1 = (HShell *)jarg1; 
  result = (int) ((arg1)->region_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_HShell_region_list_get(void * jarg1) {
  int * jresult ;
  HShell *arg1 = (HShell *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShell *)jarg1; 
  result = (int *) ((arg1)->region_list);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellWrapper__SWIG_0(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HShellWrapper *result = 0 ;
  
  arg1 = jarg1; 
  result = (HShellWrapper *)new HShellWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellWrapper__SWIG_1() {
  void * jresult ;
  HShellWrapper *result = 0 ;
  
  result = (HShellWrapper *)new HShellWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellWrapper(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_Insert__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, MVO_POINTER_SIZED_INT jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HC_KEY arg6 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = jarg6; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_Insert__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_Show(void * jarg1, int * jarg2, void * jarg3, int * jarg4, void * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 = (int *) 0 ;
  HPoint **arg3 = (HPoint **) 0 ;
  int *arg4 = (int *) 0 ;
  int **arg5 = (int **) 0 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (HPoint **)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int **)jarg5; 
  result = (arg1)->Show(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_TransformPoints(void * jarg1, float * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  float *arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->TransformPoints(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_Optimize(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->Optimize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_Optimize2(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->Optimize2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_MakePolygon(void * jarg1, int jarg2, int * jarg3, void * jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  int *arg3 ;
  HPoint *arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  (arg1)->MakePolygon(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_OpenOwnerSegment(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  (arg1)->OpenOwnerSegment();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_BeginFaceIteration(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  (arg1)->BeginFaceIteration();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_EndFaceIteration(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  (arg1)->EndFaceIteration();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_GetFace(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int **)jarg3; 
  result = (int)(arg1)->GetFace(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_NextFace(void * jarg1, void * jarg2) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int **arg2 = (int **) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int **)jarg2; 
  result = (int)(arg1)->NextFace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_CalculateFaceCenter(void * jarg1, int * jarg2, int jarg3, void * jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  (arg1)->CalculateFaceCenter(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddPoints__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, bool jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  HPoint *arg5 ;
  bool arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddPoints(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddPoints__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  HPoint *arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5; 
  (arg1)->AddPoints(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddPoints__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  (arg1)->AddPoints(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddPoints__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AddPoints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFace__SWIG_0(void * jarg1, int * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6, bool jarg7) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  HPoint *arg5 ;
  HPoint *arg6 ;
  bool arg7 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HPoint *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->AddFace(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFace__SWIG_1(void * jarg1, int * jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  HPoint *arg5 ;
  HPoint *arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HPoint *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  (arg1)->AddFace(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFace__SWIG_2(void * jarg1, int * jarg2, int jarg3, int jarg4, void * jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  HPoint *arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HPoint *)jarg5; 
  (arg1)->AddFace(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFaceDirect__SWIG_0(void * jarg1, int * jarg2, int jarg3, bool jarg4, bool jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddFaceDirect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFaceDirect__SWIG_1(void * jarg1, int * jarg2, int jarg3, bool jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddFaceDirect(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFaceDirect__SWIG_2(void * jarg1, int * jarg2, int jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  int arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AddFaceDirect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFace__SWIG_3(void * jarg1, void * jarg2, int jarg3, bool jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddFace(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddFace__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 ;
  int arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AddFace(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  (arg1)->Set(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Regenerate__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3, bool jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->Regenerate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Regenerate__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Regenerate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Regenerate__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  (arg1)->Regenerate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Regenerate__SWIG_3(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  (arg1)->Regenerate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowArrays(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GrowArrays(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->GrowPointArray(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray__SWIG_1(void * jarg1, int jarg2, bool jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->GrowPointArray(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray__SWIG_2(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GrowPointArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray2__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4, bool jarg5, bool jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->GrowPointArray2(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray2__SWIG_1(void * jarg1, int jarg2, bool jarg3, bool jarg4, bool jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->GrowPointArray2(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray2__SWIG_2(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->GrowPointArray2(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray2__SWIG_3(void * jarg1, int jarg2, bool jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->GrowPointArray2(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowPointArray2__SWIG_4(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GrowPointArray2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddNextFaceWithDistinctNormals(void * jarg1, void * jarg2, void * jarg3, const int * jarg4, const int * jarg5, int jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->AddNextFaceWithDistinctNormals((HPoint const *)arg2,(HPoint const *)arg3,(int const *)arg4,(int const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddNextFaceWithDistinctNormalsAndTexture(void * jarg1, void * jarg2, void * jarg3, void * jarg4, const int * jarg5, const int * jarg6, const int * jarg7, int jarg8) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int arg8 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->AddNextFaceWithDistinctNormalsAndTexture((HPoint const *)arg2,(HPoint const *)arg3,(HPoint const *)arg4,(int const *)arg5,(int const *)arg6,(int const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_AddNextFaceWithDistinctNormalsAndColor(void * jarg1, void * jarg2, void * jarg3, const int * jarg4, const int * jarg5, void * jarg6, int jarg7) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  HPoint *arg6 = (HPoint *) 0 ;
  int arg7 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->AddNextFaceWithDistinctNormalsAndColor((HPoint const *)arg2,(HPoint const *)arg3,(int const *)arg4,(int const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_BeginAddFaces(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->BeginAddFaces(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_EndAddFaces(void * jarg1) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  (arg1)->EndAddFaces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_GrowFaceArray(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GrowFaceArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SubdivideOneQuadFace(void * jarg1, int * jarg2, void * jarg3, bool jarg4, int * jarg5, int * jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  HShellWrapper *arg3 = 0 ;
  bool arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (HShellWrapper *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellWrapper & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  (arg1)->SubdivideOneQuadFace(arg2,*arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SubdivideOneQuadFace2(void * jarg1, int * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->SubdivideOneQuadFace2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SubdivideQuadFaces(void * jarg1, bool jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  bool arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SubdivideQuadFaces(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SetVertexColors__SWIG_0(void * jarg1, void * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ShowVertexColors__SWIG_0(void * jarg1, void * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->ShowVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SetVertexColors__SWIG_1(void * jarg1, float * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ShowVertexColors__SWIG_1(void * jarg1, float * jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->ShowVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_MakeLod(void * jarg1, int jarg2, int jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->MakeLod(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_FindExtents(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->FindExtents(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, float * jarg7, int jarg8, void * jarg9, bool jarg10) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  float *arg7 ;
  int arg8 ;
  HPoint *arg9 ;
  bool arg10 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (HPoint *)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, float * jarg7, int jarg8, void * jarg9) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  float *arg7 ;
  int arg8 ;
  HPoint *arg9 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (HPoint *)jarg9; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, float * jarg7, int jarg8) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  float *arg7 ;
  int arg8 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_3(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, float * jarg7) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  float *arg7 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (float *)jarg7; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_4(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_5(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_ReplaceWithParameters__SWIG_6(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, float * jarg7, int jarg8, bool jarg9) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  float *arg7 ;
  int arg8 ;
  bool arg9 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (float *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->ReplaceWithParameters(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Replace__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6, bool jarg7) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  bool arg7 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->Replace(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Replace__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5, void * jarg6) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HPoint *arg6 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (HPoint *)jarg6; 
  (arg1)->Replace(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_Replace__SWIG_2(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->Replace(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SetFaceRegion(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetFaceRegion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_SetEmptyShell(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetEmptyShell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_plen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_plen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_plen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_plen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_flen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_flen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_flen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellWrapper_m_Points_get(void * jarg1) {
  void * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (HPoint *) ((arg1)->m_Points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellWrapper_m_VParams_get(void * jarg1) {
  void * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (HPoint *) ((arg1)->m_VParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellWrapper_m_VColors_get(void * jarg1) {
  void * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (HPoint *) ((arg1)->m_VColors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellWrapper_m_VNormals_get(void * jarg1) {
  void * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (HPoint *) ((arg1)->m_VNormals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_HShellWrapper_m_Flist_get(void * jarg1) {
  int * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int *) ((arg1)->m_Flist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_Key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_Key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellWrapper_m_Key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result =  ((arg1)->m_Key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_facepointer_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_facepointer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_facepointer_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_facepointer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_totalflen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalflen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_totalflen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_totalflen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_totalplen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalplen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_totalplen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_totalplen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_totalnumfaceslen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalnumfaceslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_totalnumfaceslen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_totalnumfaceslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellWrapper_m_numfaceslen_set(void * jarg1, int jarg2) {
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numfaceslen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellWrapper_m_numfaceslen_get(void * jarg1) {
  int jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int result;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int) ((arg1)->m_numfaceslen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_HShellWrapper_m_faceregion_get(void * jarg1) {
  int * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int *) ((arg1)->m_faceregion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_HShellWrapper_m_faceindirect_get(void * jarg1) {
  int * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  int *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (int *) ((arg1)->m_faceindirect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HShellWrapper_m_FNArray_get(void * jarg1) {
  void * jresult ;
  HShellWrapper *arg1 = (HShellWrapper *) 0 ;
  FaceWithNormalInfo *result = 0 ;
  
  arg1 = (HShellWrapper *)jarg1; 
  result = (FaceWithNormalInfo *) ((arg1)->m_FNArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_valid_set(void * jarg1, bool jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->valid = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HCamera_valid_get(void * jarg1) {
  bool jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  bool result;
  
  arg1 = (HCamera *)jarg1; 
  result = (bool) ((arg1)->valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_position_set(void * jarg1, void * jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HCamera_position_get(void * jarg1) {
  void * jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HCamera *)jarg1; 
  result = (HPoint *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_target_set(void * jarg1, void * jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->target = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HCamera_target_get(void * jarg1) {
  void * jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HCamera *)jarg1; 
  result = (HPoint *)& ((arg1)->target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_up_vector_set(void * jarg1, void * jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->up_vector = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HCamera_up_vector_get(void * jarg1) {
  void * jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HCamera *)jarg1; 
  result = (HPoint *)& ((arg1)->up_vector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_field_width_set(void * jarg1, float jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  float arg2 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->field_width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HCamera_field_width_get(void * jarg1) {
  float jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  float result;
  
  arg1 = (HCamera *)jarg1; 
  result = (float) ((arg1)->field_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_field_height_set(void * jarg1, float jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  float arg2 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->field_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HCamera_field_height_get(void * jarg1) {
  float jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  float result;
  
  arg1 = (HCamera *)jarg1; 
  result = (float) ((arg1)->field_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_projection_set(void * jarg1, char * jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  char *arg2 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->projection, (const char *)arg2, 128-1);
      arg1->projection[128-1] = 0;
    } else {
      arg1->projection[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HCamera_projection_get(void * jarg1) {
  char * jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  char *result = 0 ;
  
  arg1 = (HCamera *)jarg1; 
  result = (char *)(char *) ((arg1)->projection);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HCamera() {
  void * jresult ;
  HCamera *result = 0 ;
  
  result = (HCamera *)new HCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_InvalidateCamera(void * jarg1) {
  HCamera *arg1 = (HCamera *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  (arg1)->InvalidateCamera();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HCamera_CameraDifferent(void * jarg1, void * jarg2) {
  bool jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  HCamera *arg2 = 0 ;
  bool result;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CameraDifferent(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HCamera_CameraDifferentByAngle(void * jarg1, void * jarg2) {
  bool jresult ;
  HCamera *arg1 = (HCamera *) 0 ;
  HCamera *arg2 = 0 ;
  bool result;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CameraDifferentByAngle(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_GetFromView(void * jarg1, void * jarg2) {
  HCamera *arg1 = (HCamera *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->GetFromView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_Show(void * jarg1) {
  HCamera *arg1 = (HCamera *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  (arg1)->Show();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HCamera_Set(void * jarg1) {
  HCamera *arg1 = (HCamera *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  ((HCamera const *)arg1)->Set();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HCamera(void * jarg1) {
  HCamera *arg1 = (HCamera *) 0 ;
  
  arg1 = (HCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBSurfVertex_x_set(void * jarg1, double jarg2) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double arg2 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HBSurfVertex_x_get(void * jarg1) {
  double jresult ;
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double result;
  
  arg1 = (HBSurfVertex *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBSurfVertex_y_set(void * jarg1, double jarg2) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double arg2 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HBSurfVertex_y_get(void * jarg1) {
  double jresult ;
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double result;
  
  arg1 = (HBSurfVertex *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBSurfVertex_z_set(void * jarg1, double jarg2) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double arg2 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HBSurfVertex_z_get(void * jarg1) {
  double jresult ;
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double result;
  
  arg1 = (HBSurfVertex *)jarg1; 
  result = (double) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBSurfVertex_w_set(void * jarg1, double jarg2) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double arg2 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HBSurfVertex_w_get(void * jarg1) {
  double jresult ;
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double result;
  
  arg1 = (HBSurfVertex *)jarg1; 
  result = (double) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBSurfVertex_Set(void * jarg1, double jarg2, double jarg3, double jarg4, double jarg5) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBSurfVertex() {
  void * jresult ;
  HBSurfVertex *result = 0 ;
  
  result = (HBSurfVertex *)new HBSurfVertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBSurfVertex(void * jarg1) {
  HBSurfVertex *arg1 = (HBSurfVertex *) 0 ;
  
  arg1 = (HBSurfVertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPolyline_m_PointCount_set(void * jarg1, int jarg2) {
  HPolyline *arg1 = (HPolyline *) 0 ;
  int arg2 ;
  
  arg1 = (HPolyline *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_PointCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPolyline_m_PointCount_get(void * jarg1) {
  int jresult ;
  HPolyline *arg1 = (HPolyline *) 0 ;
  int result;
  
  arg1 = (HPolyline *)jarg1; 
  result = (int) ((arg1)->m_PointCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HPolyline_m_pHPointArray_get(void * jarg1) {
  void * jresult ;
  HPolyline *arg1 = (HPolyline *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HPolyline *)jarg1; 
  result = (HPoint *) ((arg1)->m_pHPointArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPolyline_m_pNextPolyline_set(void * jarg1, void * jarg2) {
  HPolyline *arg1 = (HPolyline *) 0 ;
  HPolyline *arg2 = (HPolyline *) 0 ;
  
  arg1 = (HPolyline *)jarg1; 
  arg2 = (HPolyline *)jarg2; 
  if (arg1) (arg1)->m_pNextPolyline = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HPolyline_m_pNextPolyline_get(void * jarg1) {
  void * jresult ;
  HPolyline *arg1 = (HPolyline *) 0 ;
  HPolyline *result = 0 ;
  
  arg1 = (HPolyline *)jarg1; 
  result = (HPolyline *) ((arg1)->m_pNextPolyline);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPolyline() {
  void * jresult ;
  HPolyline *result = 0 ;
  
  result = (HPolyline *)new HPolyline();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPolyline(void * jarg1) {
  HPolyline *arg1 = (HPolyline *) 0 ;
  
  arg1 = (HPolyline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShellVertexData() {
  void * jresult ;
  HShellVertexData *result = 0 ;
  
  result = (HShellVertexData *)new HShellVertexData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShellVertexData(void * jarg1) {
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellVertexData_SetKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetKey(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HShellVertexData_GetHType(void * jarg1) {
  char * jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  char *result = 0 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = (char *)((HShellVertexData const *)arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellVertexData_GetVertexCount(void * jarg1) {
  int jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  int result;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = (int)((HShellVertexData const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShellVertexData_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  HC_KEY result;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = ((HShellVertexData const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShellVertexData_GetFIndexDataSize(void * jarg1) {
  int jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  int result;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = (int)((HShellVertexData const *)arg1)->GetFIndexDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HShellVertexData_GetFIndexData__SWIG_0(void * jarg1) {
  float * jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  float *result = 0 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = (float *)((HShellVertexData const *)arg1)->GetFIndexData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellVertexData_GetFIndexData__SWIG_1(void * jarg1, float * jarg2) {
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  float *arg2 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  arg2 = (float *)jarg2; 
  ((HShellVertexData const *)arg1)->GetFIndexData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShellVertexData_SetFIndexData(void * jarg1, int jarg2, float * jarg3) {
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  int arg2 ;
  float *arg3 ;
  
  arg1 = (HShellVertexData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->SetFIndexData(arg2,(float const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShowContentsWithPathType_len_set(void * jarg1, int jarg2) {
  HShowContentsWithPathType *arg1 = (HShowContentsWithPathType *) 0 ;
  int arg2 ;
  
  arg1 = (HShowContentsWithPathType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShowContentsWithPathType_len_get(void * jarg1) {
  int jresult ;
  HShowContentsWithPathType *arg1 = (HShowContentsWithPathType *) 0 ;
  int result;
  
  arg1 = (HShowContentsWithPathType *)jarg1; 
  result = (int) ((arg1)->len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShowContentsWithPathType() {
  void * jresult ;
  HShowContentsWithPathType *result = 0 ;
  
  result = (HShowContentsWithPathType *)new HShowContentsWithPathType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShowContentsWithPathType(void * jarg1) {
  HShowContentsWithPathType *arg1 = (HShowContentsWithPathType *) 0 ;
  
  arg1 = (HShowContentsWithPathType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUserOptions_m_data_set(void * jarg1, char * jarg2) {
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg1->m_data) delete [] arg1->m_data;
    if (arg2) {
      arg1->m_data = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_data, (const char *)arg2);
    } else {
      arg1->m_data = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUserOptions_m_data_get(void * jarg1) {
  char * jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (char *) ((arg1)->m_data);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUserOptions_m_length_set(void * jarg1, int jarg2) {
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HUserOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUserOptions_m_length_get(void * jarg1) {
  int jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  int result;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (int) ((arg1)->m_length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUserOptions_m_valid_set(void * jarg1, bool jarg2) {
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HUserOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_valid = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUserOptions_m_valid_get(void * jarg1) {
  bool jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  bool result;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (bool) ((arg1)->m_valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUserOptions__SWIG_0() {
  void * jresult ;
  HUserOptions *result = 0 ;
  
  result = (HUserOptions *)new HUserOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUserOptions__SWIG_1(void * jarg1) {
  void * jresult ;
  HUserOptions *arg1 = 0 ;
  HUserOptions *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HUserOptions const & type is null", 0);
    return 0;
  } 
  result = (HUserOptions *)new HUserOptions((HUserOptions const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUserOptions(void * jarg1) {
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUserOptions_IsValid(void * jarg1) {
  bool jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  bool result;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUserOptions_Show_User_Options(void * jarg1) {
  char * jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (char *)(arg1)->Show_User_Options();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUserOptions_Show_One_Net_User_Option(void * jarg1, char * jarg2) {
  char * jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->Show_One_Net_User_Option((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUserOptions_Show_One_User_Option(void * jarg1, char * jarg2) {
  char * jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->Show_One_User_Option((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUserOptions_Show_Net_User_Options(void * jarg1) {
  char * jresult ;
  HUserOptions *arg1 = (HUserOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUserOptions *)jarg1; 
  result = (char *)(arg1)->Show_Net_User_Options();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtility_PI_get() {
  float jresult ;
  float result;
  
  result = (float)(float)HUtility::PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_X_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::X;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_Y_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::Y;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_Z_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::Z;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_W_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::W;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_XY_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::XY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_XZ_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::XZ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_YZ_get() {
  int jresult ;
  int result;
  
  result = (int)HUtility::YZ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtility_EH_Epsilon_get() {
  float jresult ;
  float result;
  
  result = (float)(float)HUtility::EH_Epsilon;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Order(void * jarg1, void * jarg2) {
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  HUtility::Order(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Find_Relative_Path(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  HUtility::Find_Relative_Path(arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtility_GetTime() {
  float jresult ;
  float result;
  
  result = (float)HUtility::GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ClampPointToWindow(void * jarg1) {
  HPoint *arg1 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  HUtility::ClampPointToWindow(arg1);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_InsertBox(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HC_KEY result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = HUtility::InsertBox((HPoint const *)arg1,(HPoint const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_InsertWireframeBox(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HC_KEY result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = HUtility::InsertWireframeBox(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GenerateCuboidPoints(void * jarg1, void * jarg2, void * jarg3) {
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  HUtility::GenerateCuboidPoints((HPoint const *)arg1,(HPoint const *)arg2,arg3);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_InsertRectangle__SWIG_0(char * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, bool jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool arg7 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = HUtility::InsertRectangle((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_InsertRectangle__SWIG_1(char * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = HUtility::InsertRectangle((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_InsertRectangle__SWIG_2(char * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = HUtility::InsertRectangle((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InsertArrow__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6, char * jarg7, int jarg8, float jarg9, bool jarg10) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  float arg9 ;
  bool arg10 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = jarg10 ? true : false; 
  HUtility::InsertArrow(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InsertArrow__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6, char * jarg7, int jarg8, float jarg9) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  float arg9 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  HUtility::InsertArrow(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InsertArrow__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6, char * jarg7, int jarg8) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (int)jarg8; 
  HUtility::InsertArrow(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InsertArrow__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6, char * jarg7) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  HUtility::InsertArrow(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ComputeDoublePrecisionCrossProduct(double * jarg1, double * jarg2, double * jarg3) {
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  HUtility::ComputeDoublePrecisionCrossProduct(arg1,arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HUtility_ComputeDoublePrecisionDotProduct(double * jarg1, double * jarg2) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double result;
  
  arg1 = (double *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (double)HUtility::ComputeDoublePrecisionDotProduct(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HUtility_ComputeDoublePrecisionVectorLength(double * jarg1) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  double result;
  
  arg1 = (double *)jarg1; 
  result = (double)HUtility::ComputeDoublePrecisionVectorLength(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GetViewplaneVectors(MVO_POINTER_SIZED_INT jarg1, double * jarg2, double * jarg3) {
  HC_KEY arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  HUtility::GetViewplaneVectors(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_NormalizeDoublePrecisionVector(double * jarg1) {
  double *arg1 = (double *) 0 ;
  
  arg1 = (double *)jarg1; 
  HUtility::NormalizeDoublePrecisionVector(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_PointsEqual(void * jarg1, void * jarg2) {
  bool jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = (bool)HUtility::PointsEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_CreateAxisCircle__SWIG_0(void * jarg1, float jarg2, int jarg3, bool jarg4) {
  bool jresult ;
  HPoint *arg1 = 0 ;
  float arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (HPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)HUtility::CreateAxisCircle((HPoint const &)*arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_CreateAxisCircle__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  bool jresult ;
  HPoint *arg1 = 0 ;
  float arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (HPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)HUtility::CreateAxisCircle((HPoint const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_RotateToVector__SWIG_0(void * jarg1, void * jarg2, bool jarg3) {
  HPoint arg1 ;
  HPoint arg2 ;
  bool arg3 ;
  HPoint *argp1 ;
  HPoint *argp2 ;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  HUtility::RotateToVector(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_RotateToVector__SWIG_1(void * jarg1, void * jarg2) {
  HPoint arg1 ;
  HPoint arg2 ;
  HPoint *argp1 ;
  HPoint *argp2 ;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  HUtility::RotateToVector(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SmoothTransition__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, float jarg9, float jarg10, void * jarg11) {
  HPoint *arg1 = 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  HPoint *arg6 = 0 ;
  HPoint *arg7 = 0 ;
  HPoint *arg8 = 0 ;
  float arg9 ;
  float arg10 ;
  HBaseView *arg11 = (HBaseView *) 0 ;
  
  arg1 = (HPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg7 = (HPoint *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg8 = (HPoint *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (HBaseView *)jarg11; 
  HUtility::SmoothTransition((HPoint const &)*arg1,(HPoint const &)*arg2,(HPoint const &)*arg3,arg4,arg5,(HPoint const &)*arg6,(HPoint const &)*arg7,(HPoint const &)*arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SmoothTransition__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  HCamera arg1 ;
  HCamera *arg2 = 0 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  HCamera *argp1 ;
  
  argp1 = (HCamera *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HCamera", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera const & type is null", 0);
    return ;
  } 
  arg3 = (HBaseView *)jarg3; 
  HUtility::SmoothTransition(arg1,(HCamera const &)*arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_CamerasEqual(void * jarg1, void * jarg2) {
  bool jresult ;
  HCamera *arg1 = 0 ;
  HCamera *arg2 = 0 ;
  bool result;
  
  arg1 = (HCamera *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera const & type is null", 0);
    return 0;
  } 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera const & type is null", 0);
    return 0;
  } 
  result = (bool)HUtility::CamerasEqual((HCamera const &)*arg1,(HCamera const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ComputeVectorToVectorRotationMatrix(float * jarg1, void * jarg2, void * jarg3) {
  float *arg1 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (float *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  HUtility::ComputeVectorToVectorRotationMatrix(arg1,arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ExtractRGB(char * jarg1, float * jarg2, float * jarg3, float * jarg4) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)HUtility::ExtractRGB(arg1,*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_TransitionQuaternion(float * jarg1, float * jarg2, float jarg3, float * jarg4) {
  float *arg1 ;
  float *arg2 ;
  float arg3 ;
  float *arg4 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  HUtility::TransitionQuaternion(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MatrixToQuaternion(float * jarg1, float * jarg2) {
  float *arg1 ;
  float *arg2 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  HUtility::MatrixToQuaternion(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_QuaternionToMatrix(float * jarg1, float * jarg2) {
  float *arg1 ;
  float *arg2 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  HUtility::QuaternionToMatrix(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SmoothQuaternionTransition(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  HUtility::SmoothQuaternionTransition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SmoothMatrixTransition(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float *arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  HUtility::SmoothMatrixTransition(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MultiSmoothTransitions__SWIG_0(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, float * jarg4, void * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  float *arg4 ;
  HCamera *arg5 = (HCamera *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (HCamera *)jarg5; 
  HUtility::MultiSmoothTransitions(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MultiSmoothTransitions__SWIG_1(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, float * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  float *arg4 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = (float *)jarg4; 
  HUtility::MultiSmoothTransitions(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtility_GetCentroid(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HPoint result;
  
  arg1 = jarg1; 
  result = HUtility::GetCentroid(arg1);
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtility_GetTransformedCentroid__SWIG_0(MVO_POINTER_SIZED_INT jarg1, float * jarg2) {
  void * jresult ;
  HC_KEY arg1 ;
  float *arg2 ;
  HPoint result;
  
  arg1 = jarg1; 
  arg2 = (float *)jarg2; 
  result = HUtility::GetTransformedCentroid(arg1,arg2);
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtility_GetTransformedCentroid__SWIG_1(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HPoint result;
  
  arg1 = jarg1; 
  result = HUtility::GetTransformedCentroid(arg1);
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_URIencode(char * jarg1, MVO_POINTER_SIZED_UINT jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  MVO_POINTER_SIZED_UINT arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  HUtility::URIencode((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_URIdecode(char * jarg1, char * jarg2, MVO_POINTER_SIZED_UINT * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  MVO_POINTER_SIZED_UINT *arg3 = (MVO_POINTER_SIZED_UINT *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MVO_POINTER_SIZED_UINT *)jarg3; 
  HUtility::URIdecode((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GetCameraFromMatrix(float * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float *arg1 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = (HPoint *) 0 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5; 
  HUtility::GetCameraFromMatrix(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GetMatrixFromCamera(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float * jarg5) {
  HPoint arg1 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float *arg5 ;
  HPoint *argp1 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float *)jarg5; 
  HUtility::GetMatrixFromCamera(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GetCameraFromGLFrustum(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, double jarg6, bool jarg7, void * jarg8, void * jarg9, void * jarg10, char * jarg11, double * jarg12, double * jarg13, double * jarg14) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  HPoint *arg8 = 0 ;
  HPoint *arg9 = 0 ;
  HPoint *arg10 = 0 ;
  char *arg11 = (char *) 0 ;
  double *arg12 = 0 ;
  double *arg13 = 0 ;
  double *arg14 = 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (HPoint *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg9 = (HPoint *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg10 = (HPoint *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg11 = (char *)jarg11; 
  arg12 = (double *)jarg12; 
  arg13 = (double *)jarg13; 
  arg14 = (double *)jarg14; 
  HUtility::GetCameraFromGLFrustum(arg1,arg2,arg3,arg4,arg5,arg6,arg7,*arg8,*arg9,*arg10,arg11,*arg12,*arg13,*arg14);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_PushAttribute__SWIG_0(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::PushAttribute((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_PushAttribute__SWIG_1(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::PushAttribute((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_PopAttribute(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::PopAttribute((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ModifyPushedAttribute(char * jarg1, char * jarg2) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)HUtility::ModifyPushedAttribute((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowPushedAttribute(char * jarg1, void * jarg2) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  HUserOptions *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (HUserOptions *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HUserOptions & type is null", 0);
    return 0;
  } 
  result = (bool)HUtility::ShowPushedAttribute((char const *)arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Recursive_Merge_Shells__SWIG_0(void * jarg1, void * jarg2, bool jarg3, bool jarg4, bool jarg5) {
  HShell *arg1 = (HShell *) 0 ;
  HShell *arg2 = (HShell *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (HShell *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  HUtility::Recursive_Merge_Shells(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Recursive_Merge_Shells__SWIG_1(void * jarg1, void * jarg2, bool jarg3, bool jarg4) {
  HShell *arg1 = (HShell *) 0 ;
  HShell *arg2 = (HShell *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (HShell *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  HUtility::Recursive_Merge_Shells(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Recursive_Merge_Shells__SWIG_2(void * jarg1, void * jarg2, bool jarg3) {
  HShell *arg1 = (HShell *) 0 ;
  HShell *arg2 = (HShell *) 0 ;
  bool arg3 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (HShell *)jarg2; 
  arg3 = jarg3 ? true : false; 
  HUtility::Recursive_Merge_Shells(arg1,arg2,arg3);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells__SWIG_0(bool jarg1, bool jarg2, bool jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = HUtility::Merge_Shells(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells__SWIG_1(bool jarg1, bool jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = HUtility::Merge_Shells(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells__SWIG_2(bool jarg1, bool jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  bool arg1 ;
  bool arg2 ;
  HC_KEY result;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = HUtility::Merge_Shells(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells__SWIG_3(bool jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  bool arg1 ;
  HC_KEY result;
  
  arg1 = jarg1 ? true : false; 
  result = HUtility::Merge_Shells(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells_Generate_Regions__SWIG_0(int jarg1, MVO_POINTER_SIZED_INT * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  int arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (int)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = HUtility::Merge_Shells_Generate_Regions(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_Merge_Shells_Generate_Regions__SWIG_1(int jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  int arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  HC_KEY result;
  
  arg1 = (int)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  result = HUtility::Merge_Shells_Generate_Regions(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_0(bool jarg1, bool jarg2, bool jarg3, int jarg4, float jarg5) {
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  HUtility::Generate_LODs(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_1(bool jarg1, bool jarg2, bool jarg3, int jarg4) {
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  HUtility::Generate_LODs(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_2(bool jarg1, bool jarg2, bool jarg3) {
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  HUtility::Generate_LODs(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_3(bool jarg1, bool jarg2) {
  bool arg1 ;
  bool arg2 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  HUtility::Generate_LODs(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_4(bool jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  HUtility::Generate_LODs(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Generate_LODs__SWIG_5() {
  HUtility::Generate_LODs();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_Segment_Shell_Allocate(void * jarg1, void * jarg2, bool jarg3) {
  bool jresult ;
  HShell *arg1 = (HShell *) 0 ;
  HShell *arg2 = (HShell *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (HShell *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)HUtility::Segment_Shell_Allocate(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Shell_Search(void * jarg1, void * jarg2, bool jarg3) {
  HShell *arg1 = (HShell *) 0 ;
  HShell *arg2 = (HShell *) 0 ;
  bool arg3 ;
  
  arg1 = (HShell *)jarg1; 
  arg2 = (HShell *)jarg2; 
  arg3 = jarg3 ? true : false; 
  HUtility::Shell_Search(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_OptimizeSegmentTree__SWIG_0(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT * jarg2, bool jarg3, bool jarg4, bool jarg5) {
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  HUtility::OptimizeSegmentTree(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_OptimizeSegmentTree__SWIG_1(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT * jarg2, bool jarg3, bool jarg4) {
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  HUtility::OptimizeSegmentTree(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_OptimizeSegmentTree__SWIG_2(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT * jarg2, bool jarg3) {
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  bool arg3 ;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = jarg3 ? true : false; 
  HUtility::OptimizeSegmentTree(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_OptimizeSegmentTree__SWIG_3(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  HUtility::OptimizeSegmentTree(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CountShellData__SWIG_0(MVO_POINTER_SIZED_INT jarg1, int * jarg2, int * jarg3, int * jarg4, int * jarg5) {
  HC_KEY arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  HUtility::CountShellData(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CountShellData__SWIG_1(MVO_POINTER_SIZED_INT jarg1, int * jarg2, int * jarg3, int * jarg4) {
  HC_KEY arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  HUtility::CountShellData(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_FindFileNameExtension__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  HUtility::FindFileNameExtension((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_FindFileNameExtension__SWIG_1(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::FindFileNameExtension((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_FindUnicodeFileNameExtension(const unsigned short * jarg1, char * jarg2) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (unsigned short *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::FindUnicodeFileNameExtension((unsigned short const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_FindFileNameAndDirectory__SWIG_0(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  HUtility::FindFileNameAndDirectory((char const *)arg1,arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUtility_extra_pointer_format() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)HUtility::extra_pointer_format();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_CreateScaleIndependentSegment__SWIG_0(char * jarg1, bool jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = HUtility::CreateScaleIndependentSegment((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_CreateScaleIndependentSegment__SWIG_1(char * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  result = HUtility::CreateScaleIndependentSegment((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_GetScaleIndependentGeomSegmentKey(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HUtility::GetScaleIndependentGeomSegmentKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SetScaleIndependentGeomPosition(MVO_POINTER_SIZED_INT jarg1, float jarg2, float jarg3, float jarg4) {
  HC_KEY arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  HUtility::SetScaleIndependentGeomPosition(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_GetScaleIndependentGeomPosition(MVO_POINTER_SIZED_INT jarg1, float * jarg2, float * jarg3, float * jarg4) {
  HC_KEY arg1 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  HUtility::GetScaleIndependentGeomPosition(arg1,*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_RegisterCallbacks() {
  HUtility::RegisterCallbacks();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_IsModelKey(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (bool)HUtility::IsModelKey(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_UserOptionExists(MVO_POINTER_SIZED_INT jarg1, char * jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = HUtility::UserOptionExists(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InsertRotatedArrow(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, float jarg7, char * jarg8, char * jarg9, int jarg10, float jarg11, bool jarg12) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  int arg10 ;
  float arg11 ;
  bool arg12 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = jarg12 ? true : false; 
  HUtility::InsertRotatedArrow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,arg10,arg11,arg12);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_CalculateKeyPath(MVO_POINTER_SIZED_INT jarg1, void * jarg2, MVO_POINTER_SIZED_INT * jarg3, int jarg4) {
  int jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)HUtility::CalculateKeyPath(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_SegmentExists(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::SegmentExists((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_UnsetAttributes() {
  HUtility::UnsetAttributes();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_IsChildOf__SWIG_0(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  int jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY *arg3 ;
  int result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  result = (int)HUtility::IsChildOf(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_IsChildOf__SWIG_1(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  int jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  int result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (int)HUtility::IsChildOf(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_IsIdentityMatrix(float * jarg1) {
  bool jresult ;
  float *arg1 ;
  bool result;
  
  arg1 = (float *)jarg1; 
  result = (bool)HUtility::IsIdentityMatrix(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ComputeShellNormal(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HPoint *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  HUtility::ComputeShellNormal(arg1,*arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SelectUnderCursor__SWIG_0(void * jarg1, float jarg2, float jarg3, bool jarg4, bool jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = HUtility::SelectUnderCursor(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SelectUnderCursor__SWIG_1(void * jarg1, float jarg2, float jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = HUtility::SelectUnderCursor(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SelectUnderCursor__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = HUtility::SelectUnderCursor(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SmartSelectUnderCursor__SWIG_0(void * jarg1, float jarg2, float jarg3, bool jarg4, bool jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool arg5 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = HUtility::SmartSelectUnderCursor(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SmartSelectUnderCursor__SWIG_1(void * jarg1, float jarg2, float jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = HUtility::SmartSelectUnderCursor(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_SmartSelectUnderCursor__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = HUtility::SmartSelectUnderCursor(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowOneHeuristic__SWIG_0(char * jarg1, char * jarg2) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)HUtility::ShowOneHeuristic((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowOneHeuristic__SWIG_1(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::ShowOneHeuristic((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowOneRenderingOption__SWIG_0(char * jarg1, char * jarg2) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)HUtility::ShowOneRenderingOption((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowOneRenderingOption__SWIG_1(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::ShowOneRenderingOption((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtility_EaseInEaseOut(float jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)HUtility::EaseInEaseOut(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_UnwindIncludes__SWIG_0(MVO_POINTER_SIZED_INT * jarg1) {
  HC_KEY *arg1 = 0 ;
  
  arg1 = (HC_KEY *)jarg1; 
  HUtility::UnwindIncludes(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_UnwindIncludes__SWIG_1(MVO_POINTER_SIZED_INT * jarg1, MVO_POINTER_SIZED_INT * jarg2, int jarg3) {
  HC_KEY *arg1 = 0 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  int arg3 ;
  
  arg1 = (HC_KEY *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = (int)jarg3; 
  HUtility::UnwindIncludes(*arg1,arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_SafeSetUserOption(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::SafeSetUserOption((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_SafeShowUserOption(char * jarg1) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)HUtility::SafeShowUserOption(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ProjectShell(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HUtility::ProjectShell(arg1);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_MergeShells(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = HUtility::MergeShells(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowModellingMatrix(float * jarg1) {
  float *arg1 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  HUtility::ShowModellingMatrix(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ConvertLocalPixelsToLocalWindow__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  HUtility::ConvertLocalPixelsToLocalWindow(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ConvertLocalPixelsToLocalWindow__SWIG_1(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  HUtility::ConvertLocalPixelsToLocalWindow(arg1,arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_GrabSegment(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HUtility::GrabSegment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_RenameSegment(MVO_POINTER_SIZED_INT jarg1, char * jarg2) {
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::RenameSegment(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_InterpolateNormalAlongEdge(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  HPoint *arg1 = 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  HPoint *arg5 = 0 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  HUtility::InterpolateNormalAlongEdge(*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowNormals(MVO_POINTER_SIZED_INT jarg1, float jarg2) {
  HC_KEY arg1 ;
  float arg2 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  HUtility::ShowNormals(arg1,arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_IsSegmentKey(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtility::IsSegmentKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_FindContents(MVO_POINTER_SIZED_INT * jarg1) {
  int jresult ;
  HC_KEY *arg1 = 0 ;
  int result;
  
  arg1 = (HC_KEY *)jarg1; 
  result = (int)HUtility::FindContents(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_CalculateMajorAxis(void * jarg1) {
  int jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (int)HUtility::CalculateMajorAxis(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_FindOneObject__SWIG_0(char * jarg1, bool jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = HUtility::FindOneObject((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_FindOneObject__SWIG_1(char * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  result = HUtility::FindOneObject((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CloseAllSegments__SWIG_0(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HUtility::CloseAllSegments(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CloseAllSegments__SWIG_1() {
  HUtility::CloseAllSegments();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ReadjustTarget(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtility::ReadjustTarget(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_GetAllowAnimation(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtility::GetAllowAnimation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SuppressAnimation() {
  HUtility::SuppressAnimation();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_FindFaceByIndex(int jarg1, int * jarg2, int jarg3) {
  int jresult ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)HUtility::FindFaceByIndex(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ShowOneUserOption(char * jarg1, char * jarg2) {
  bool jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)HUtility::ShowOneUserOption((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_GetNextRenumberedKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = HUtility::GetNextRenumberedKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_NameSegments(MVO_POINTER_SIZED_INT * jarg1, void * jarg2) {
  HC_KEY *arg1 = 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HC_KEY *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  HUtility::NameSegments(*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MoveToTemp(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  HUtility::MoveToTemp(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowContentsWithPath__SWIG_0(char * jarg1, void * jarg2, bool jarg3, bool jarg4, bool jarg5) {
  char *arg1 = (char *) 0 ;
  vlist_s **arg2 = (vlist_s **) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (vlist_s **)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  HUtility::ShowContentsWithPath((char const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowContentsWithPath__SWIG_1(char * jarg1, void * jarg2, bool jarg3, bool jarg4) {
  char *arg1 = (char *) 0 ;
  vlist_s **arg2 = (vlist_s **) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (vlist_s **)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  HUtility::ShowContentsWithPath((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowContentsWithPath__SWIG_2(char * jarg1, void * jarg2, bool jarg3) {
  char *arg1 = (char *) 0 ;
  vlist_s **arg2 = (vlist_s **) 0 ;
  bool arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (vlist_s **)jarg2; 
  arg3 = jarg3 ? true : false; 
  HUtility::ShowContentsWithPath((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ShowContentsWithPath__SWIG_3(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  vlist_s **arg2 = (vlist_s **) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (vlist_s **)jarg2; 
  HUtility::ShowContentsWithPath((char const *)arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_ustrlen(unsigned short * jarg1) {
  int jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  int result;
  
  arg1 = (unsigned short *)jarg1; 
  result = (int)HUtility::ustrlen(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_RLECompress(int jarg1, unsigned char * jarg2, int * jarg3, unsigned char * jarg4) {
  bool jresult ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) (unsigned char *)0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  result = (bool)HUtility::RLECompress(arg1,(unsigned char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ZlibCompress(int jarg1, unsigned char * jarg2, int * jarg3, unsigned char * jarg4) {
  bool jresult ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  int *arg3 = 0 ;
  unsigned char *arg4 = (unsigned char *) (unsigned char *)0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  result = (bool)HUtility::ZlibCompress(arg1,(unsigned char const *)arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_ZlibDecompress(int jarg1, unsigned char * jarg2, int * jarg3, unsigned char * jarg4) {
  bool jresult ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ;
  int *arg3 = 0 ;
  unsigned char *arg4 = (unsigned char *) (unsigned char *)0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  result = (bool)HUtility::ZlibDecompress(arg1,(unsigned char const *)arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short * SWIGSTDCALL CSharp_HUtility_uconvert(char * jarg1) {
  unsigned short * jresult ;
  char *arg1 = (char *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (unsigned short *)HUtility::uconvert((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_BuildIncludePath__SWIG_0(MVO_POINTER_SIZED_INT jarg1, const MVO_POINTER_SIZED_INT * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int * jarg5, MVO_POINTER_SIZED_INT jarg6) {
  bool jresult ;
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  int arg3 ;
  HC_KEY *arg4 = (HC_KEY *) 0 ;
  int *arg5 = (int *) 0 ;
  HC_KEY arg6 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = jarg6; 
  result = (bool)HUtility::BuildIncludePath(arg1,(HC_KEY const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_BuildIncludePath__SWIG_1(MVO_POINTER_SIZED_INT jarg1, const MVO_POINTER_SIZED_INT * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int * jarg5) {
  bool jresult ;
  HC_KEY arg1 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  int arg3 ;
  HC_KEY *arg4 = (HC_KEY *) 0 ;
  int *arg5 = (int *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (bool)HUtility::BuildIncludePath(arg1,(HC_KEY const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_BuildIncludePathFromSelection(void * jarg1, int * jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  int *arg2 = 0 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  HUtility::BuildIncludePathFromSelection(arg1,*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MakeViewSnapshot__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char **)jarg4; 
  HUtility::MakeViewSnapshot(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MakeViewSnapshot__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  HUtility::MakeViewSnapshot(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_ConstrainToVector(float * jarg1, void * jarg2, float * jarg3) {
  int jresult ;
  float *arg1 ;
  HVector *arg2 = 0 ;
  float *arg3 ;
  int result;
  
  arg1 = (float *)jarg1; 
  arg2 = (HVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HVector const & type is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3; 
  result = (int)HUtility::ConstrainToVector((float const (*))arg1,(HPoint const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_Camera_To_Transform(void * jarg1, float * jarg2, float * jarg3, float * jarg4) {
  HCamera *arg1 = (HCamera *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 ;
  float *arg4 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  HUtility::Camera_To_Transform(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_LocalPixelsToWorld(void * jarg1, bool jarg2, float jarg3, float jarg4, int jarg5, int jarg6, float * jarg7) {
  HCamera *arg1 = (HCamera *) 0 ;
  bool arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 ;
  
  arg1 = (HCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float *)jarg7; 
  HUtility::LocalPixelsToWorld(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtility_ComputeAngleBetweenVector(void * jarg1, void * jarg2) {
  float jresult ;
  HPoint arg1 ;
  HPoint arg2 ;
  HPoint *argp1 ;
  HPoint *argp2 ;
  float result;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)HUtility::ComputeAngleBetweenVector(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_strlen16(const unsigned short * jarg1) {
  int jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  int result;
  
  arg1 = (unsigned short *)jarg1; 
  result = (int)HUtility::strlen16((unsigned short const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CalculateBoundingInfo(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HC_KEY arg1 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  HPoint *arg5 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  HUtility::CalculateBoundingInfo(arg1,*arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT long SWIGSTDCALL CSharp_HUtility_ClipPolygonAgainstPlane__SWIG_0(long jarg1, void * jarg2, float * jarg3, void * jarg4, unsigned int * jarg5) {
  long jresult ;
  long arg1 ;
  HPoint *arg2 ;
  float *arg3 ;
  HPoint *arg4 ;
  bool *arg5 = (bool *) 0 ;
  long result;
  
  arg1 = (long)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (bool *)jarg5; 
  result = (long)HUtility::ClipPolygonAgainstPlane(arg1,(HPoint const (*))arg2,(float const (*))arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_HUtility_ClipPolygonAgainstPlane__SWIG_1(long jarg1, void * jarg2, float * jarg3, void * jarg4) {
  long jresult ;
  long arg1 ;
  HPoint *arg2 ;
  float *arg3 ;
  HPoint *arg4 ;
  long result;
  
  arg1 = (long)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (long)HUtility::ClipPolygonAgainstPlane(arg1,(HPoint const (*))arg2,(float const (*))arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtility_TwoPassPrint(char * jarg1, void * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  HOutputHandlerOptions *arg2 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (char *)jarg1; 
  arg2 = (HOutputHandlerOptions *)jarg2; 
  result = (HFileIOResult)HUtility::TwoPassPrint((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtility_OpenSegmentFromKey(MVO_POINTER_SIZED_INT jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  result = HUtility::OpenSegmentFromKey(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtility_IsPointInsideAllEdges(const float * jarg1, float * jarg2, int jarg3, int * jarg4, float * jarg5, float jarg6) {
  bool jresult ;
  float *arg1 = (float *) 0 ;
  float *arg2 ;
  int arg3 ;
  int *arg4 ;
  float *arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (float *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)HUtility::IsPointInsideAllEdges((float const *)arg1,(float const (*))arg2,arg3,(int const (*))arg4,(float const (*))arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_IntersectionLinePlane(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPlane *arg3 = (HPlane *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPlane *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  HUtility::IntersectionLinePlane(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DeleteManipulators(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HUtility::DeleteManipulators(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MergePointsIntoShell(int jarg1, void * jarg2, int jarg3, int * jarg4, int jarg5, void * jarg6, void * jarg7, float jarg8, bool jarg9, int * jarg10, int * jarg11) {
  int arg1 ;
  HPoint *arg2 ;
  int arg3 ;
  int *arg4 ;
  int arg5 ;
  HPoint *arg6 ;
  HPoint *arg7 ;
  float arg8 ;
  bool arg9 ;
  int *arg10 ;
  int *arg11 = (int *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6; 
  arg7 = (HPoint *)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (int *)jarg10; 
  arg11 = (int *)jarg11; 
  HUtility::MergePointsIntoShell(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SubdivideShells__SWIG_0(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, bool jarg8, bool jarg9, bool jarg10) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  ShellToRegionMapper *arg7 = (ShellToRegionMapper *) 0 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (ShellToRegionMapper *)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  HUtility::SubdivideShells(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SubdivideShells__SWIG_1(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, bool jarg8, bool jarg9) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  ShellToRegionMapper *arg7 = (ShellToRegionMapper *) 0 ;
  bool arg8 ;
  bool arg9 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (ShellToRegionMapper *)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  HUtility::SubdivideShells(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SubdivideShells__SWIG_2(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, bool jarg8) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  ShellToRegionMapper *arg7 = (ShellToRegionMapper *) 0 ;
  bool arg8 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (ShellToRegionMapper *)jarg7; 
  arg8 = jarg8 ? true : false; 
  HUtility::SubdivideShells(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SubdivideShells__SWIG_3(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  ShellToRegionMapper *arg7 = (ShellToRegionMapper *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (ShellToRegionMapper *)jarg7; 
  HUtility::SubdivideShells(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_SubdivideShells__SWIG_4(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5, int jarg6) {
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  HUtility::SubdivideShells(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_MergePolylines() {
  HUtility::MergePolylines();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CreateZebraStripeTexture(int jarg1, int jarg2, int jarg3, bool jarg4, void * jarg5, void * jarg6) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  HPixelRGB arg5 ;
  HPixelRGB arg6 ;
  HPixelRGB *argp5 ;
  HPixelRGB *argp6 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (HPixelRGB *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPixelRGB", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (HPixelRGB *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPixelRGB", 0);
    return ;
  }
  arg6 = *argp6; 
  HUtility::CreateZebraStripeTexture(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_ascii_to_unicode(char * jarg1, unsigned short * jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  HUtility::ascii_to_unicode((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_unicode_to_ascii(const unsigned short * jarg1, char * jarg2) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (unsigned short *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::unicode_to_ascii((unsigned short const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_BatchRead(void * jarg1, char * jarg2, char * jarg3) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  HUtility::BatchRead(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_AdjustPositionToPlane(void * jarg1, void * jarg2, void * jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  HUtility::AdjustPositionToPlane(arg1,*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_CalculateCornerImagePosition(void * jarg1, int jarg2, int jarg3, int jarg4, float * jarg5, float * jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HWindowCorner arg4 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HWindowCorner)jarg4; 
  arg5 = (float *)jarg5; 
  arg6 = (float *)jarg6; 
  HUtility::CalculateCornerImagePosition(arg1,arg2,arg3,arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_OptimizeModelByGrid(void * jarg1, void * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  ShellToRegionMapper *arg2 = (ShellToRegionMapper *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (ShellToRegionMapper *)jarg2; 
  HUtility::OptimizeModelByGrid(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_0(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, unsigned int * jarg10, unsigned int * jarg11, float * jarg12, float * jarg13, char * jarg14) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool *arg10 = (bool *) 0 ;
  bool *arg11 = (bool *) 0 ;
  float *arg12 = (float *) 0 ;
  float *arg13 = (float *) 0 ;
  char *arg14 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (bool *)jarg10; 
  arg11 = (bool *)jarg11; 
  arg12 = (float *)jarg12; 
  arg13 = (float *)jarg13; 
  arg14 = (char *)jarg14; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_1(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, unsigned int * jarg10, unsigned int * jarg11, float * jarg12, float * jarg13) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool *arg10 = (bool *) 0 ;
  bool *arg11 = (bool *) 0 ;
  float *arg12 = (float *) 0 ;
  float *arg13 = (float *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (bool *)jarg10; 
  arg11 = (bool *)jarg11; 
  arg12 = (float *)jarg12; 
  arg13 = (float *)jarg13; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_2(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, unsigned int * jarg10, unsigned int * jarg11, float * jarg12) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool *arg10 = (bool *) 0 ;
  bool *arg11 = (bool *) 0 ;
  float *arg12 = (float *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (bool *)jarg10; 
  arg11 = (bool *)jarg11; 
  arg12 = (float *)jarg12; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_3(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, unsigned int * jarg10, unsigned int * jarg11) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool *arg10 = (bool *) 0 ;
  bool *arg11 = (bool *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (bool *)jarg10; 
  arg11 = (bool *)jarg11; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_4(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, unsigned int * jarg10) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  bool *arg10 = (bool *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (bool *)jarg10; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_5(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_6(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_7(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_8(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5, char * jarg6) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_9(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4, char * jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  arg5 = (char *)jarg5; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_10(char * jarg1, char * jarg2, unsigned int * jarg3, unsigned int * jarg4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool *arg4 = (bool *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (bool *)jarg4; 
  HUtility::DecipherTextureString(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_11(char * jarg1, char * jarg2, unsigned int * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  HUtility::DecipherTextureString(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtility_DecipherTextureString__SWIG_12(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtility::DecipherTextureString(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtility() {
  void * jresult ;
  HUtility *result = 0 ;
  
  result = (HUtility *)new HUtility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtility(void * jarg1) {
  HUtility *arg1 = (HUtility *) 0 ;
  
  arg1 = (HUtility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQualifiedKey(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT * jarg2, int jarg3) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY *arg2 ;
  int arg3 ;
  HQualifiedKey *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  arg3 = (int)jarg3; 
  result = (HQualifiedKey *)new HQualifiedKey(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HQualifiedKey(void * jarg1) {
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  
  arg1 = (HQualifiedKey *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_HQualifiedKey_MakeHashKey__SWIG_0(void * jarg1) {
  long jresult ;
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  long result;
  
  arg1 = (HQualifiedKey *)jarg1; 
  result = (long)(arg1)->MakeHashKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_HQualifiedKey_MakeHashKey__SWIG_1(MVO_POINTER_SIZED_INT jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  long jresult ;
  HC_KEY arg1 ;
  int arg2 ;
  HC_KEY *arg3 ;
  long result;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  result = (long)HQualifiedKey::MakeHashKey(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQualifiedKey_m_Key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HQualifiedKey *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_Key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HQualifiedKey_m_Key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  HC_KEY result;
  
  arg1 = (HQualifiedKey *)jarg1; 
  result =  ((arg1)->m_Key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HQualifiedKey_m_pIncludeList_get(void * jarg1) {
  MVO_POINTER_SIZED_INT * jresult ;
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HQualifiedKey *)jarg1; 
  result = (HC_KEY *) ((arg1)->m_pIncludeList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQualifiedKey_m_IncludeListLength_set(void * jarg1, int jarg2) {
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  int arg2 ;
  
  arg1 = (HQualifiedKey *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_IncludeListLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HQualifiedKey_m_IncludeListLength_get(void * jarg1) {
  int jresult ;
  HQualifiedKey *arg1 = (HQualifiedKey *) 0 ;
  int result;
  
  arg1 = (HQualifiedKey *)jarg1; 
  result = (int) ((arg1)->m_IncludeListLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMergeShellFace() {
  void * jresult ;
  HMergeShellFace *result = 0 ;
  
  result = (HMergeShellFace *)new HMergeShellFace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMergeShellFace(void * jarg1) {
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMergeShellFace_Init(void * jarg1, int * jarg2) {
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMergeShellFace_MakeChildFaces(void * jarg1, int * jarg2, void * jarg3, bool jarg4, int * jarg5, int * jarg6) {
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int *arg2 = 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  (arg1)->MakeChildFaces(*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMergeShellFace_Divide(void * jarg1, int jarg2, void * jarg3) {
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int arg2 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->Divide(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMergeShellFace_CheckHit(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  bool jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = 0 ;
  bool result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CheckHit(*arg2,*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMergeShellFace_FindHitFaceRecursive(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = 0 ;
  HMergeShellFace *result = 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (HMergeShellFace *)(arg1)->FindHitFaceRecursive(*arg2,*arg3,arg4,*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMergeShellFace_FindHitFace(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HPoint *arg5 = 0 ;
  HMergeShellFace *result = 0 ;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (HMergeShellFace *)(arg1)->FindHitFace(*arg2,*arg3,arg4,*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMergeShellFace_CheckIfColinear(void * jarg1, void * jarg2) {
  bool jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  bool result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = (bool)(arg1)->CheckIfColinear(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMergeShellFace_GetLengthRecursive(void * jarg1, int jarg2) {
  int jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetLengthRecursive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMergeShellFace_GetLength(void * jarg1) {
  int jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  result = (int)(arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMergeShellFace_AddToFacelistRecursive(void * jarg1, int * jarg2, int jarg3) {
  int jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->AddToFacelistRecursive(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMergeShellFace_AddToFacelist(void * jarg1, int * jarg2) {
  int jresult ;
  HMergeShellFace *arg1 = (HMergeShellFace *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  arg1 = (HMergeShellFace *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (int)(arg1)->AddToFacelist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPiece(int * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int *arg1 ;
  int arg2 ;
  int arg3 ;
  ColorPiece *result = 0 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ColorPiece *)new ColorPiece(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorPiece(void * jarg1) {
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  
  arg1 = (ColorPiece *)jarg1; 
  delete arg1;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_ColorPiece_m_uvindex_get(void * jarg1) {
  int * jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int *result = 0 ;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (int *) ((arg1)->m_uvindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_ColorPiece_m_fllen_get(void * jarg1) {
  int * jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int *result = 0 ;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (int *) ((arg1)->m_fllen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_ColorPiece_m_flindex_get(void * jarg1) {
  int * jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int *result = 0 ;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (int *) ((arg1)->m_flindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPiece_m_len_set(void * jarg1, int jarg2) {
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int arg2 ;
  
  arg1 = (ColorPiece *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorPiece_m_len_get(void * jarg1) {
  int jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int result;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (int) ((arg1)->m_len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPiece_m_col_set(void * jarg1, int jarg2) {
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int arg2 ;
  
  arg1 = (ColorPiece *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_col = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ColorPiece_m_col_get(void * jarg1) {
  int jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  int result;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (int) ((arg1)->m_col);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPiece_m_done_set(void * jarg1, bool jarg2) {
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  bool arg2 ;
  
  arg1 = (ColorPiece *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_done = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_ColorPiece_m_done_get(void * jarg1) {
  bool jresult ;
  ColorPiece *arg1 = (ColorPiece *) 0 ;
  bool result;
  
  arg1 = (ColorPiece *)jarg1; 
  result = (bool) ((arg1)->m_done);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColorPieceList() {
  void * jresult ;
  ColorPieceList *result = 0 ;
  
  result = (ColorPieceList *)new ColorPieceList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColorPieceList(void * jarg1) {
  ColorPieceList *arg1 = (ColorPieceList *) 0 ;
  
  arg1 = (ColorPieceList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPieceList_AddColorPiece(void * jarg1, int * jarg2, int jarg3, int jarg4) {
  ColorPieceList *arg1 = (ColorPieceList *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ColorPieceList *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->AddColorPiece(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPieceList_FindMatch(void * jarg1, int jarg2, int jarg3, int jarg4, int * jarg5, int * jarg6, unsigned int * jarg7) {
  void * jresult ;
  ColorPieceList *arg1 = (ColorPieceList *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  bool *arg7 = 0 ;
  ColorPiece *result = 0 ;
  
  arg1 = (ColorPieceList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (bool *)jarg7; 
  result = (ColorPiece *)(arg1)->FindMatch(arg2,arg3,arg4,*arg5,*arg6,*arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorPieceList_m_ColorPieceList_set(void * jarg1, void * jarg2) {
  ColorPieceList *arg1 = (ColorPieceList *) 0 ;
  vlist_s *arg2 = (vlist_s *) 0 ;
  
  arg1 = (ColorPieceList *)jarg1; 
  arg2 = (vlist_s *)jarg2; 
  if (arg1) (arg1)->m_ColorPieceList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorPieceList_m_ColorPieceList_get(void * jarg1) {
  void * jresult ;
  ColorPieceList *arg1 = (ColorPieceList *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (ColorPieceList *)jarg1; 
  result = (vlist_s *) ((arg1)->m_ColorPieceList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HVerticalUtility_ColorizePointCloud(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HVerticalUtility::ColorizePointCloud(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HVerticalUtility() {
  void * jresult ;
  HVerticalUtility *result = 0 ;
  
  result = (HVerticalUtility *)new HVerticalUtility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HVerticalUtility(void * jarg1) {
  HVerticalUtility *arg1 = (HVerticalUtility *) 0 ;
  
  arg1 = (HVerticalUtility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9, int jarg10, bool jarg11) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  AbsoluteWindowType arg9 ;
  AbsoluteWindowType arg10 ;
  bool arg11 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  arg9 = (AbsoluteWindowType)jarg9; 
  arg10 = (AbsoluteWindowType)jarg10; 
  arg11 = jarg11 ? true : false; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  AbsoluteWindowType arg9 ;
  AbsoluteWindowType arg10 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  arg9 = (AbsoluteWindowType)jarg9; 
  arg10 = (AbsoluteWindowType)jarg10; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8, int jarg9) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  AbsoluteWindowType arg9 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  arg9 = (AbsoluteWindowType)jarg9; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7, int jarg8) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  AbsoluteWindowType arg7 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_5(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HAbsoluteWindow__SWIG_6(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  HAbsoluteWindow *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  result = (HAbsoluteWindow *)new HAbsoluteWindow(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_DecipherOptions(void * jarg1) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  (arg1)->DecipherOptions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_AdjustX(void * jarg1, float jarg2, int jarg3, float * jarg4) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  AbsoluteWindowType arg3 ;
  float *arg4 = 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (AbsoluteWindowType)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->AdjustX(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_AdjustY(void * jarg1, float jarg2, int jarg3, float * jarg4) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  AbsoluteWindowType arg3 ;
  float *arg4 = 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (AbsoluteWindowType)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->AdjustY(arg2,arg3,*arg4);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_Adjust(void * jarg1) {
  bool jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  bool result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (bool)(arg1)->Adjust();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_AdjustAll(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HAbsoluteWindow::AdjustAll(arg1);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8, int jarg9, bool jarg10) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  AbsoluteWindowType arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  AbsoluteWindowType arg9 ;
  bool arg10 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (AbsoluteWindowType)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  arg9 = (AbsoluteWindowType)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  AbsoluteWindowType arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  AbsoluteWindowType arg9 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (AbsoluteWindowType)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  arg9 = (AbsoluteWindowType)jarg9; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7, int jarg8) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  AbsoluteWindowType arg6 ;
  AbsoluteWindowType arg7 ;
  AbsoluteWindowType arg8 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (AbsoluteWindowType)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  arg8 = (AbsoluteWindowType)jarg8; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, int jarg7) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  AbsoluteWindowType arg6 ;
  AbsoluteWindowType arg7 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (AbsoluteWindowType)jarg6; 
  arg7 = (AbsoluteWindowType)jarg7; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  AbsoluteWindowType arg6 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (AbsoluteWindowType)jarg6; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_SetWindow__SWIG_5(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)HAbsoluteWindow::SetWindow(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_IsPositionInWindow__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  bool jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->IsPositionInWindow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_IsPositionInWindow__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  bool jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)HAbsoluteWindow::IsPositionInWindow(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_CalculateLocalWindowPos__SWIG_0(void * jarg1, float jarg2, float jarg3, float * jarg4, float * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  HAbsoluteWindow::CalculateLocalWindowPos(arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_CalculateLocalWindowPos__SWIG_1(void * jarg1, float jarg2, float jarg3, float * jarg4, float * jarg5) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->CalculateLocalWindowPos(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_CalculateOuterWindowPos__SWIG_0(void * jarg1, float jarg2, float jarg3, float * jarg4, float * jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  HAbsoluteWindow::CalculateOuterWindowPos(arg1,arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_CalculateOuterWindowPos__SWIG_1(void * jarg1, float jarg2, float jarg3, float * jarg4, float * jarg5) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->CalculateOuterWindowPos(arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_pView_set(void * jarg1, void * jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  if (arg1) (arg1)->m_pView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HAbsoluteWindow_m_pView_get(void * jarg1) {
  void * jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (HBaseView *) ((arg1)->m_pView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_width_set(void * jarg1, float jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HAbsoluteWindow_m_width_get(void * jarg1) {
  float jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (float) ((arg1)->m_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_height_set(void * jarg1, float jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HAbsoluteWindow_m_height_get(void * jarg1) {
  float jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (float) ((arg1)->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_xpos_set(void * jarg1, float jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_xpos = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HAbsoluteWindow_m_xpos_get(void * jarg1) {
  float jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (float) ((arg1)->m_xpos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_ypos_set(void * jarg1, float jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ypos = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HAbsoluteWindow_m_ypos_get(void * jarg1) {
  float jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  float result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (float) ((arg1)->m_ypos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_xpos_type_set(void * jarg1, int jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (AbsoluteWindowType)jarg2; 
  if (arg1) (arg1)->m_xpos_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAbsoluteWindow_m_xpos_type_get(void * jarg1) {
  int jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (AbsoluteWindowType) ((arg1)->m_xpos_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_ypos_type_set(void * jarg1, int jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (AbsoluteWindowType)jarg2; 
  if (arg1) (arg1)->m_ypos_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAbsoluteWindow_m_ypos_type_get(void * jarg1) {
  int jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (AbsoluteWindowType) ((arg1)->m_ypos_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_width_type_set(void * jarg1, int jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (AbsoluteWindowType)jarg2; 
  if (arg1) (arg1)->m_width_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAbsoluteWindow_m_width_type_get(void * jarg1) {
  int jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (AbsoluteWindowType) ((arg1)->m_width_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_height_type_set(void * jarg1, int jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = (AbsoluteWindowType)jarg2; 
  if (arg1) (arg1)->m_height_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAbsoluteWindow_m_height_type_get(void * jarg1) {
  int jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  AbsoluteWindowType result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (AbsoluteWindowType) ((arg1)->m_height_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_bShowBackground_set(void * jarg1, bool jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bShowBackground = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HAbsoluteWindow_m_bShowBackground_get(void * jarg1) {
  bool jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  bool result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result = (bool) ((arg1)->m_bShowBackground);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HAbsoluteWindow_m_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HAbsoluteWindow_m_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  HC_KEY result;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  result =  ((arg1)->m_key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HAbsoluteWindow(void * jarg1) {
  HAbsoluteWindow *arg1 = (HAbsoluteWindow *) 0 ;
  
  arg1 = (HAbsoluteWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUnicodeOptions_m_data_set(void * jarg1, wchar_t * jarg2) {
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  if (arg1) (arg1)->m_data = arg2;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HUnicodeOptions_m_data_get(void * jarg1) {
  wchar_t * jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (wchar_t *) ((arg1)->m_data);
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUnicodeOptions_m_length_set(void * jarg1, int jarg2) {
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUnicodeOptions_m_length_get(void * jarg1) {
  int jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  int result;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (int) ((arg1)->m_length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUnicodeOptions_m_valid_set(void * jarg1, bool jarg2) {
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_valid = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUnicodeOptions_m_valid_get(void * jarg1) {
  bool jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  bool result;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (bool) ((arg1)->m_valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUnicodeOptions__SWIG_0() {
  void * jresult ;
  HUnicodeOptions *result = 0 ;
  
  result = (HUnicodeOptions *)new HUnicodeOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUnicodeOptions__SWIG_1(void * jarg1) {
  void * jresult ;
  HUnicodeOptions *arg1 = 0 ;
  HUnicodeOptions *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HUnicodeOptions const & type is null", 0);
    return 0;
  } 
  result = (HUnicodeOptions *)new HUnicodeOptions((HUnicodeOptions const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUnicodeOptions(void * jarg1) {
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUnicodeOptions_IsValid(void * jarg1) {
  bool jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  bool result;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (bool)(arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HUnicodeOptions_Show_Unicode_Options(void * jarg1) {
  wchar_t * jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (wchar_t *)(arg1)->Show_Unicode_Options();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HUnicodeOptions_Show_One_Net_Unicode_Option(void * jarg1, wchar_t * jarg2) {
  wchar_t * jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (wchar_t *)(arg1)->Show_One_Net_Unicode_Option((wchar_t const *)arg2);
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HUnicodeOptions_Show_One_Unicode_Option(void * jarg1, wchar_t * jarg2) {
  wchar_t * jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  result = (wchar_t *)(arg1)->Show_One_Unicode_Option((wchar_t const *)arg2);
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HUnicodeOptions_Show_Net_Unicode_Options(void * jarg1) {
  wchar_t * jresult ;
  HUnicodeOptions *arg1 = (HUnicodeOptions *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HUnicodeOptions *)jarg1; 
  result = (wchar_t *)(arg1)->Show_Net_Unicode_Options();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BREP_Edge(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  BREP_Edge *result = 0 ;
  
  arg1 = jarg1; 
  result = (BREP_Edge *)new BREP_Edge(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Edge_m_edgekey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (BREP_Edge *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_edgekey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Edge_m_edgekey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY result;
  
  arg1 = (BREP_Edge *)jarg1; 
  result =  ((arg1)->m_edgekey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Edge_m_vertex1_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (BREP_Edge *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_vertex1 = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Edge_m_vertex1_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY result;
  
  arg1 = (BREP_Edge *)jarg1; 
  result =  ((arg1)->m_vertex1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Edge_m_vertex2_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (BREP_Edge *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_vertex2 = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Edge_m_vertex2_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  HC_KEY result;
  
  arg1 = (BREP_Edge *)jarg1; 
  result =  ((arg1)->m_vertex2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BREP_Edge(void * jarg1) {
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  
  arg1 = (BREP_Edge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BREP_CoEdge(void * jarg1) {
  void * jresult ;
  BREP_Edge *arg1 = (BREP_Edge *) 0 ;
  BREP_CoEdge *result = 0 ;
  
  arg1 = (BREP_Edge *)jarg1; 
  result = (BREP_CoEdge *)new BREP_CoEdge(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_CoEdge_m_edge_set(void * jarg1, void * jarg2) {
  BREP_CoEdge *arg1 = (BREP_CoEdge *) 0 ;
  BREP_Edge *arg2 = (BREP_Edge *) 0 ;
  
  arg1 = (BREP_CoEdge *)jarg1; 
  arg2 = (BREP_Edge *)jarg2; 
  if (arg1) (arg1)->m_edge = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_CoEdge_m_edge_get(void * jarg1) {
  void * jresult ;
  BREP_CoEdge *arg1 = (BREP_CoEdge *) 0 ;
  BREP_Edge *result = 0 ;
  
  arg1 = (BREP_CoEdge *)jarg1; 
  result = (BREP_Edge *) ((arg1)->m_edge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BREP_CoEdge(void * jarg1) {
  BREP_CoEdge *arg1 = (BREP_CoEdge *) 0 ;
  
  arg1 = (BREP_CoEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BREP_Face(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  BREP_Face *result = 0 ;
  
  arg1 = jarg1; 
  result = (BREP_Face *)new BREP_Face(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BREP_Face(void * jarg1) {
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  
  arg1 = (BREP_Face *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Face_AddCoEdge(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  void * jresult ;
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  BREP_Topology *arg2 = (BREP_Topology *) 0 ;
  void *arg3 = (void *) 0 ;
  HC_KEY arg4 ;
  BREP_Edge *result = 0 ;
  
  arg1 = (BREP_Face *)jarg1; 
  arg2 = (BREP_Topology *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (BREP_Edge *)(arg1)->AddCoEdge(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Face_m_CoEdgeList_set(void * jarg1, void * jarg2) {
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  vlist_s *arg2 = (vlist_s *) 0 ;
  
  arg1 = (BREP_Face *)jarg1; 
  arg2 = (vlist_s *)jarg2; 
  if (arg1) (arg1)->m_CoEdgeList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Face_m_CoEdgeList_get(void * jarg1) {
  void * jresult ;
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (BREP_Face *)jarg1; 
  result = (vlist_s *) ((arg1)->m_CoEdgeList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Face_m_facekey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (BREP_Face *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_facekey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Face_m_facekey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Face *arg1 = (BREP_Face *) 0 ;
  HC_KEY result;
  
  arg1 = (BREP_Face *)jarg1; 
  result =  ((arg1)->m_facekey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Topology_m_FaceHash_set(void * jarg1, void * jarg2) {
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_FaceHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_m_FaceHash_get(void * jarg1) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  result = (vhash_s *) ((arg1)->m_FaceHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Topology_m_EdgeHash_set(void * jarg1, void * jarg2) {
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_EdgeHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_m_EdgeHash_get(void * jarg1) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  result = (vhash_s *) ((arg1)->m_EdgeHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Topology_m_VertexHash_set(void * jarg1, void * jarg2) {
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_VertexHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_m_VertexHash_get(void * jarg1) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  result = (vhash_s *) ((arg1)->m_VertexHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BREP_Topology_m_CurrentFace_set(void * jarg1, void * jarg2) {
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  BREP_Face *arg2 = (BREP_Face *) 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = (BREP_Face *)jarg2; 
  if (arg1) (arg1)->m_CurrentFace = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_m_CurrentFace_get(void * jarg1) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  BREP_Face *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  result = (BREP_Face *) ((arg1)->m_CurrentFace);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BREP_Topology() {
  void * jresult ;
  BREP_Topology *result = 0 ;
  
  result = (BREP_Topology *)new BREP_Topology();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BREP_Topology(void * jarg1) {
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_AddFace(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  HC_KEY arg2 ;
  BREP_Face *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  result = (BREP_Face *)(arg1)->AddFace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_GetFace(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  HC_KEY arg2 ;
  BREP_Face *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  result = (BREP_Face *)(arg1)->GetFace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_FindEdge(void * jarg1, void * jarg2) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  void *arg2 = (void *) 0 ;
  BREP_Edge *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  result = (BREP_Edge *)(arg1)->FindEdge(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_AddEdge(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  void *arg2 = (void *) 0 ;
  HC_KEY arg3 ;
  BREP_Edge *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  result = (BREP_Edge *)(arg1)->AddEdge(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Topology_AddVertex(void * jarg1, void * jarg2, void * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  void *arg2 = (void *) 0 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->AddVertex(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_BREP_Topology_FindVertex(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  void *arg2 = (void *) 0 ;
  HC_KEY result;
  
  arg1 = (BREP_Topology *)jarg1; 
  arg2 = jarg2; 
  result = (arg1)->FindVertex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BREP_Topology_GetCurrentFace(void * jarg1) {
  void * jresult ;
  BREP_Topology *arg1 = (BREP_Topology *) 0 ;
  BREP_Face *result = 0 ;
  
  arg1 = (BREP_Topology *)jarg1; 
  result = (BREP_Face *)(arg1)->GetCurrentFace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBestImageDriver__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  HBestImageDriver *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (HBestImageDriver *)new HBestImageDriver((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBestImageDriver__SWIG_1() {
  void * jresult ;
  HBestImageDriver *result = 0 ;
  
  result = (HBestImageDriver *)new HBestImageDriver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBestImageDriver(void * jarg1) {
  HBestImageDriver *arg1 = (HBestImageDriver *) 0 ;
  
  arg1 = (HBestImageDriver *)jarg1; 
  delete arg1;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBestImageDriver_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBestImageDriver *arg1 = (HBestImageDriver *) 0 ;
  HC_KEY result;
  
  arg1 = (HBestImageDriver *)jarg1; 
  result = ((HBestImageDriver const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPVOOptions(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  HPVOOptions *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (HPVOOptions *)new HPVOOptions((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPVOOptions(void * jarg1) {
  HPVOOptions *arg1 = (HPVOOptions *) 0 ;
  
  arg1 = (HPVOOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HPVOOptions_getOption(void * jarg1, char * jarg2) {
  char * jresult ;
  HPVOOptions *arg1 = (HPVOOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HPVOOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)((HPVOOptions const *)arg1)->getOption((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HInputOpNone_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 0);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HInputOpFileInputByKey_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HInputOpFileInputToImageKey_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputOpNone_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 0);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputOpFileOutputByKey_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 1);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputOpFileOutputFromImageKey_get() {
  unsigned long jresult ;
  unsigned long result;
  
  result = (unsigned long) (1UL << 2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIONoticeCallback(void * jarg1) {
  HIONoticeCallback *arg1 = (HIONoticeCallback *) 0 ;
  
  arg1 = (HIONoticeCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIONoticeCallback_Notice__SWIG_0(void * jarg1, char * jarg2) {
  HIONoticeCallback *arg1 = (HIONoticeCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HIONoticeCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Notice((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIONoticeCallback_NoticeSwigExplicitHIONoticeCallback__SWIG_1(void * jarg1, wchar_t * jarg2) {
  HIONoticeCallback *arg1 = (HIONoticeCallback *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (HIONoticeCallback *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  (arg1)->HIONoticeCallback::Notice((wchar_t const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIONoticeCallback() {
  void * jresult ;
  HIONoticeCallback *result = 0 ;
  
  result = (HIONoticeCallback *)new SwigDirector_HIONoticeCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIONoticeCallback_director_connect(void *objarg, SwigDirector_HIONoticeCallback::SWIG_Callback0_t callback0, SwigDirector_HIONoticeCallback::SWIG_Callback1_t callback1) {
  HIONoticeCallback *obj = (HIONoticeCallback *)objarg;
  SwigDirector_HIONoticeCallback *director = dynamic_cast<SwigDirector_HIONoticeCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIOPercentNoticeCallback(void * jarg1) {
  HIOPercentNoticeCallback *arg1 = (HIOPercentNoticeCallback *) 0 ;
  
  arg1 = (HIOPercentNoticeCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOPercentNoticeCallback_Notice(void * jarg1, float jarg2) {
  HIOPercentNoticeCallback *arg1 = (HIOPercentNoticeCallback *) 0 ;
  float arg2 ;
  
  arg1 = (HIOPercentNoticeCallback *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Notice(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIOPercentNoticeCallback() {
  void * jresult ;
  HIOPercentNoticeCallback *result = 0 ;
  
  result = (HIOPercentNoticeCallback *)new SwigDirector_HIOPercentNoticeCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOPercentNoticeCallback_director_connect(void *objarg, SwigDirector_HIOPercentNoticeCallback::SWIG_Callback0_t callback0) {
  HIOPercentNoticeCallback *obj = (HIOPercentNoticeCallback *)objarg;
  SwigDirector_HIOPercentNoticeCallback *director = dynamic_cast<SwigDirector_HIOPercentNoticeCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIOConnector() {
  void * jresult ;
  HIOConnector *result = 0 ;
  
  result = (HIOConnector *)new HIOConnector();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIOConnector(void * jarg1) {
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  
  arg1 = (HIOConnector *)jarg1; 
  delete arg1;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HIOConnector_GetHoopsEntity__SWIG_0(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  void *arg2 = (void *) 0 ;
  HC_KEY result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  result = (arg1)->GetHoopsEntity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HIOConnector_GetHoopsEntity__SWIG_1(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  void *arg2 = (void *) 0 ;
  HC_KEY arg3 ;
  HC_KEY result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  result = (arg1)->GetHoopsEntity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOConnector_GetKernelEntity__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  void *result = 0 ;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  result = (void *)(arg1)->GetKernelEntity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOConnector_GetKernelEntity__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  void * jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  void *result = 0 ;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  result = (void *)(arg1)->GetKernelEntity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HIOConnector_GetHoopsEntities__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  void *arg2 = (void *) 0 ;
  vlist_s *arg3 = (vlist_s *) 0 ;
  bool result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = (vlist_s *)jarg3; 
  result = (bool)(arg1)->GetHoopsEntities(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HIOConnector_GetHoopsEntities__SWIG_1(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  bool jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  void *arg2 = (void *) 0 ;
  vlist_s *arg3 = (vlist_s *) 0 ;
  HC_KEY arg4 ;
  bool result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = (vlist_s *)jarg3; 
  arg4 = jarg4; 
  result = (bool)(arg1)->GetHoopsEntities(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HIOConnector_GetKernelEntities__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  bool jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  vlist_s *arg3 = (vlist_s *) 0 ;
  bool result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = (vlist_s *)jarg3; 
  result = (bool)(arg1)->GetKernelEntities(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HIOConnector_GetKernelEntities__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  bool jresult ;
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  vlist_s *arg3 = (vlist_s *) 0 ;
  HC_KEY arg4 ;
  bool result;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = (vlist_s *)jarg3; 
  arg4 = jarg4; 
  result = (bool)(arg1)->GetKernelEntities(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOConnector_AddConnection__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->AddConnection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOConnector_AddConnection__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  HC_KEY arg2 ;
  void *arg3 = (void *) 0 ;
  HC_KEY arg4 ;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  (arg1)->AddConnection(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOConnector_OptimizeTree(void * jarg1, char * jarg2, char * jarg3) {
  HIOConnector *arg1 = (HIOConnector *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HIOConnector *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->OptimizeTree((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HInputHandlerOptions__SWIG_0() {
  void * jresult ;
  HInputHandlerOptions *result = 0 ;
  
  result = (HInputHandlerOptions *)new HInputHandlerOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HInputHandlerOptions__SWIG_1(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HInputHandlerOptions *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (HInputHandlerOptions *)new HInputHandlerOptions((HInputHandlerOptions const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HInputHandlerOptions(void * jarg1) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pHBaseView_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  if (arg1) (arg1)->m_pHBaseView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pHBaseView_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (HBaseView *) ((arg1)->m_pHBaseView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pImageName_set(void * jarg1, char * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_pImageName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_pImageName, (const char *)arg2);
    } else {
      arg1->m_pImageName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pImageName_get(void * jarg1) {
  char * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_pImageName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pImageFormat_set(void * jarg1, char * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_pImageFormat = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_pImageFormat, (const char *)arg2);
    } else {
      arg1->m_pImageFormat = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pImageFormat_get(void * jarg1) {
  char * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_pImageFormat);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLocal_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLocal = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLocal_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bLocal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_tk_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HStreamFileToolkit *arg2 = (HStreamFileToolkit *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (HStreamFileToolkit *)jarg2; 
  if (arg1) (arg1)->m_tk = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_tk_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HStreamFileToolkit *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (HStreamFileToolkit *) ((arg1)->m_tk);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLogging_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLogging = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLogging_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bLogging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pConnector_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HIOConnector *arg2 = (HIOConnector *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (HIOConnector *)jarg2; 
  if (arg1) (arg1)->m_pConnector = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pConnector_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HIOConnector *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (HIOConnector *) ((arg1)->m_pConnector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pExtendedData_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_pExtendedData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pExtendedData_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (void *) ((arg1)->m_pExtendedData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bImportMetadata_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bImportMetadata = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bImportMetadata_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bImportMetadata);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_license_set(void * jarg1, char * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_license = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_license, (const char *)arg2);
    } else {
      arg1->m_license = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HInputHandlerOptions_m_license_get(void * jarg1) {
  char * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_license);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bIgnoreOffEntities_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bIgnoreOffEntities = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bIgnoreOffEntities_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bIgnoreOffEntities);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_coneFactor_set(void * jarg1, double jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_coneFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HInputHandlerOptions_m_coneFactor_get(void * jarg1) {
  double jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (double) ((arg1)->m_coneFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_factorForSmartSolids_set(void * jarg1, double jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_factorForSmartSolids = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HInputHandlerOptions_m_factorForSmartSolids_get(void * jarg1) {
  double jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (double) ((arg1)->m_factorForSmartSolids);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_iDGNCellHeaderOption_set(void * jarg1, int jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_iDGNCellHeaderOption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandlerOptions_m_iDGNCellHeaderOption_get(void * jarg1) {
  int jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_iDGNCellHeaderOption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandlerOptions_SINGLE_ENTITY_CELLHEADER_get() {
  int jresult ;
  int result;
  
  result = (int)HInputHandlerOptions::SINGLE_ENTITY_CELLHEADER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandlerOptions_BREAK_CELLHEADER_get() {
  int jresult ;
  int result;
  
  result = (int)HInputHandlerOptions::BREAK_CELLHEADER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandlerOptions_OPT_CELLHEADER_get() {
  int jresult ;
  int result;
  
  result = (int)HInputHandlerOptions::OPT_CELLHEADER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCAsmModelFile_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_pPRCAsmModelFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCAsmModelFile_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (void *) ((arg1)->m_pPRCAsmModelFile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCDeleteModelFile_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_pPRCDeleteModelFile = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCDeleteModelFile_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_pPRCDeleteModelFile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCPMIConnector_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HIOConnector *arg2 = (HIOConnector *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (HIOConnector *)jarg2; 
  if (arg1) (arg1)->m_pPRCPMIConnector = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCPMIConnector_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  HIOConnector *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (HIOConnector *) ((arg1)->m_pPRCPMIConnector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCTopologyManager_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  BREP_Topology *arg2 = (BREP_Topology *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (BREP_Topology *)jarg2; 
  if (arg1) (arg1)->m_pPRCTopologyManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCTopologyManager_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  BREP_Topology *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (BREP_Topology *) ((arg1)->m_pPRCTopologyManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCMergeFaces_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCMergeFaces = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCMergeFaces_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCMergeFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCImportNonBrepFaces_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCImportNonBrepFaces = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCImportNonBrepFaces_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCImportNonBrepFaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCCreatePRCFileOnly_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCCreatePRCFileOnly = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCCreatePRCFileOnly_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCCreatePRCFileOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCInstanceShells_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCInstanceShells = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCInstanceShells_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCInstanceShells);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCCalculatePhysicalProperties_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCCalculatePhysicalProperties = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCCalculatePhysicalProperties_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCCalculatePhysicalProperties);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCMultiModelSelectionCallback_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void (*arg2)(char const *,int,char const *[],int &) = (void (*)(char const *,int,char const *[],int &)) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (void (*)(char const *,int,char const *[],int &))jarg2; 
  if (arg1) (arg1)->m_pPRCMultiModelSelectionCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pPRCMultiModelSelectionCallback_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void (*result)(char const *,int,char const *[],int &) = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (void (*)(char const *,int,char const *[],int &)) ((arg1)->m_pPRCMultiModelSelectionCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCStoreUserAttributes_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCStoreUserAttributes = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCStoreUserAttributes_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCStoreUserAttributes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCImportHiddenObjects_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPRCImportHiddenObjects = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bPRCImportHiddenObjects_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPRCImportHiddenObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDGNRebaselineModel_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDGNRebaselineModel = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDGNRebaselineModel_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bDGNRebaselineModel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDGNImportAllModels_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDGNImportAllModels = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDGNImportAllModels_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bDGNImportAllModels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDisableDWFDrawOrder_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDisableDWFDrawOrder = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDisableDWFDrawOrder_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bDisableDWFDrawOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bImportThumbnail_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bImportThumbnail = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bImportThumbnail_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bImportThumbnail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDWFRebaselineModel_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDWFRebaselineModel = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDWFRebaselineModel_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bDWFRebaselineModel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOptimizeSegmentTree_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOptimizeSegmentTree = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOptimizeSegmentTree_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bOptimizeSegmentTree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLegacyOptimize_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLegacyOptimize = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bLegacyOptimize_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bLegacyOptimize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDwgSkipUnreferencedBlocks_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDwgSkipUnreferencedBlocks = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bDwgSkipUnreferencedBlocks_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bDwgSkipUnreferencedBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_z_separation_set(void * jarg1, double jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_z_separation = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HInputHandlerOptions_m_z_separation_get(void * jarg1) {
  double jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (double) ((arg1)->m_z_separation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_depth_range_set(void * jarg1, double jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_depth_range = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HInputHandlerOptions_m_depth_range_get(void * jarg1) {
  double jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (double) ((arg1)->m_depth_range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_pOOCNodeDeltas_set(void * jarg1, void * jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_pOOCNodeDeltas = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandlerOptions_m_pOOCNodeDeltas_get(void * jarg1) {
  void * jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (void *) ((arg1)->m_pOOCNodeDeltas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOOCAutoUpdate_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOOCAutoUpdate = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOOCAutoUpdate_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bOOCAutoUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOOCAutoCleanup_set(void * jarg1, bool jarg2) {
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bOOCAutoCleanup = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HInputHandlerOptions_m_bOOCAutoCleanup_get(void * jarg1) {
  bool jresult ;
  HInputHandlerOptions *arg1 = (HInputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HInputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bOOCAutoCleanup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HInputHandler() {
  void * jresult ;
  HInputHandler *result = 0 ;
  
  result = (HInputHandler *)new SwigDirector_HInputHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HInputHandler(void * jarg1) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HInputHandler_GetInputOps(void * jarg1) {
  unsigned long jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  unsigned long result;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (unsigned long)(arg1)->GetInputOps();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HInputHandler_GetInputName(void * jarg1) {
  char * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (char *)(arg1)->GetInputName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_RegisterInputHandlerTypes(void * jarg1) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  (arg1)->RegisterInputHandlerTypes();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandler_GetInputStyle(void * jarg1) {
  int jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  HInputHandlerStyle result;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (HInputHandlerStyle)(arg1)->GetInputStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandler_FileInputByKey(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HInputHandlerOptions *arg4 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HInputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileInputByKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandler_FileInputByKeySwigExplicitHInputHandler(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HInputHandlerOptions *arg4 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HInputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HInputHandler::FileInputByKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandler_FileInputToImageKey(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  int jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  HC_KEY arg4 ;
  HInputHandlerOptions *arg5 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = jarg4; 
  arg5 = (HInputHandlerOptions *)jarg5; 
  result = (HFileIOResult)(arg1)->FileInputToImageKey((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HInputHandler_FileInputToImageKeySwigExplicitHInputHandler(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  int jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY *arg3 = (HC_KEY *) 0 ;
  HC_KEY arg4 ;
  HInputHandlerOptions *arg5 = (HInputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = jarg4; 
  arg5 = (HInputHandlerOptions *)jarg5; 
  result = (HFileIOResult)(arg1)->HInputHandler::FileInputToImageKey((wchar_t const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HInputHandler_GetInputTypesString(void * jarg1) {
  char * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (char *)(arg1)->GetInputTypesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HInputHandler_GetInputProgress(void * jarg1) {
  wchar_t * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (wchar_t *)(arg1)->GetInputProgress();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HInputHandler_GetInputPercentProgress(void * jarg1) {
  float jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  float result;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (float)(arg1)->GetInputPercentProgress();
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HInputHandler_GetInputInformation(void * jarg1) {
  wchar_t * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  result = (wchar_t *)(arg1)->GetInputInformation();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandler_SetInputProgressNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  HIONoticeCallback *arg2 = (HIONoticeCallback *) 0 ;
  HIONoticeCallback *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (HIONoticeCallback *)jarg2; 
  result = (HIONoticeCallback *)(arg1)->SetInputProgressNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandler_SetInputPercentProgressNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  HIOPercentNoticeCallback *arg2 = (HIOPercentNoticeCallback *) 0 ;
  HIOPercentNoticeCallback *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (HIOPercentNoticeCallback *)jarg2; 
  result = (HIOPercentNoticeCallback *)(arg1)->SetInputPercentProgressNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HInputHandler_SetInputInformationNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  HIONoticeCallback *arg2 = (HIONoticeCallback *) 0 ;
  HIONoticeCallback *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (HIONoticeCallback *)jarg2; 
  result = (HIONoticeCallback *)(arg1)->SetInputInformationNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_ReportInputProgress__SWIG_0(void * jarg1, char * jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ReportInputProgress((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_ReportInputPercentProgress(void * jarg1, float jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  float arg2 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ReportInputPercentProgress(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_ReportInputInformation__SWIG_0(void * jarg1, char * jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ReportInputInformation((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_SetModuleDirectory__SWIG_0(void * jarg1, char * jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetModuleDirectory((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_SetStartingInput__SWIG_0(void * jarg1, char * jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  (darg)->SetStartingInput((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_SetStartingInput__SWIG_2(void * jarg1) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  (darg)->SetStartingInput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_SetFinishedInput(void * jarg1) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  (darg)->SetFinishedInput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_SetInputOps(void * jarg1, unsigned long jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  (darg)->SetInputOps(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_m_InputOps_set(void * jarg1, unsigned long jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  if (arg1) darg->m_InputOps = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HInputHandler_m_InputOps_get(void * jarg1) {
  unsigned long jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  unsigned long result;
  
  arg1 = (HInputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  result = (unsigned long) (darg->m_InputOps);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_m_module_directory_set(void * jarg1, wchar_t * jarg2) {
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  
  arg1 = (HInputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  if (arg1) darg->m_module_directory = arg2;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HInputHandler_m_module_directory_get(void * jarg1) {
  wchar_t * jresult ;
  HInputHandler *arg1 = (HInputHandler *) 0 ;
  SwigDirector_HInputHandler *darg = 0;
  wchar_t *result = 0 ;
  
  arg1 = (HInputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HInputHandler *>(arg1);
  result = (wchar_t *) (darg->m_module_directory);
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HInputHandler_director_connect(void *objarg, SwigDirector_HInputHandler::SWIG_Callback0_t callback0, SwigDirector_HInputHandler::SWIG_Callback1_t callback1, SwigDirector_HInputHandler::SWIG_Callback2_t callback2, SwigDirector_HInputHandler::SWIG_Callback3_t callback3, SwigDirector_HInputHandler::SWIG_Callback4_t callback4, SwigDirector_HInputHandler::SWIG_Callback5_t callback5) {
  HInputHandler *obj = (HInputHandler *)objarg;
  SwigDirector_HInputHandler *director = dynamic_cast<SwigDirector_HInputHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOutputHandlerOptions__SWIG_0() {
  void * jresult ;
  HOutputHandlerOptions *result = 0 ;
  
  result = (HOutputHandlerOptions *)new HOutputHandlerOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_GetHType(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *)((HOutputHandlerOptions const *)arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_PopulateOptions(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)(arg1)->PopulateOptions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOutputHandlerOptions__SWIG_1(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HOutputHandlerOptions *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HOutputHandlerOptions *)new HOutputHandlerOptions((HOutputHandlerOptions const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOutputHandlerOptions(void * jarg1) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Init(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HOutputHandlerOptions *arg2 = (HOutputHandlerOptions *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HOutputHandlerOptions *)jarg2; 
  (arg1)->Init((HOutputHandlerOptions const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHBaseView_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  if (arg1) (arg1)->m_pHBaseView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHBaseView_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HBaseView *) ((arg1)->m_pHBaseView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_View__SWIG_0(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HBaseView *)((HOutputHandlerOptions const *)arg1)->View();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_View__SWIG_1(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseView *arg2 = (HBaseView *) (HBaseView *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->View(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHBaseModel_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  if (arg1) (arg1)->m_pHBaseModel = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHBaseModel_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HBaseModel *) ((arg1)->m_pHBaseModel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_Model__SWIG_0(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HBaseModel *)((HOutputHandlerOptions const *)arg1)->Model();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Model__SWIG_1(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) (HBaseModel *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  (arg1)->Model(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pCamera_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HCamera *arg2 = (HCamera *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HCamera *)jarg2; 
  if (arg1) (arg1)->m_pCamera = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pCamera_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HCamera *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HCamera *) ((arg1)->m_pCamera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_Camera__SWIG_0(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HCamera *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HCamera *)((HOutputHandlerOptions const *)arg1)->Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Camera__SWIG_1(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HCamera *arg2 = (HCamera *) (HCamera *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HCamera *)jarg2; 
  (arg1)->Camera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_Key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HC_KEY result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result =  ((arg1)->m_Key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOutputHandlerOptions_Key__SWIG_0(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HC_KEY result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = ((HOutputHandlerOptions const *)arg1)->Key();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Key__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  (arg1)->Key(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHSRAOptions_set(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_pHSRAOptions = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_pHSRAOptions, (const char *)arg2);
    } else {
      arg1->m_pHSRAOptions = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pHSRAOptions_get(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_pHSRAOptions);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_HSRAOptions__SWIG_0(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *)((HOutputHandlerOptions const *)arg1)->HSRAOptions();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_HSRAOptions__SWIG_1(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HSRAOptions((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pWindowColor_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_pWindowColor = (HPoint const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pWindowColor_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HPoint *) ((arg1)->m_pWindowColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowColor__SWIG_0(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HPoint *)((HOutputHandlerOptions const *)arg1)->WindowColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowColor__SWIG_1(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPoint *arg2 = (HPoint *) (HPoint *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  (arg1)->WindowColor((HPoint const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bUseWindowColor_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bUseWindowColor = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bUseWindowColor_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bUseWindowColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_UseWindowColor__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->UseWindowColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_UseWindowColor__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UseWindowColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Window_Width_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Window_Width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Window_Width_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_Window_Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowWidth__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->WindowWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowWidth__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->WindowWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Window_Height_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Window_Height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Window_Height_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_Window_Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowHeight__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->WindowHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowHeight__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->WindowHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Width_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Paper_Width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Width_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_Paper_Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperWidth__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->PaperWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperWidth__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->PaperWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Height_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Paper_Height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Height_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_Paper_Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperHeight__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->PaperHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperHeight__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->PaperHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ForceGrayscale_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_ForceGrayscale = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ForceGrayscale_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_ForceGrayscale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_ForceGrayscale__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->ForceGrayscale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_ForceGrayscale__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ForceGrayscale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_lineFuseThreshold_set(void * jarg1, unsigned long jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->m_lineFuseThreshold = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputHandlerOptions_m_lineFuseThreshold_get(void * jarg1) {
  unsigned long jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result =  ((arg1)->m_lineFuseThreshold);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputHandlerOptions_LineFuseThreshold__SWIG_0(void * jarg1) {
  unsigned long jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = ((HOutputHandlerOptions const *)arg1)->LineFuseThreshold();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_LineFuseThreshold__SWIG_1(void * jarg1, unsigned long jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->LineFuseThreshold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bFastPrint_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bFastPrint = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bFastPrint_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bFastPrint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_FastPrint__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->FastPrint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_FastPrint__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->FastPrint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bConserveMemory_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bConserveMemory = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bConserveMemory_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bConserveMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_ConserveMemory__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->ConserveMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_ConserveMemory__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ConserveMemory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bWriteAnimations_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bWriteAnimations = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bWriteAnimations_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bWriteAnimations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_WriteAnimations__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->WriteAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_WriteAnimations__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->WriteAnimations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bWindowFrame_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bWindowFrame = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bWindowFrame_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bWindowFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowFrame__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->WindowFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_WindowFrame__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->WindowFrame(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bUseSubscreen_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bUseSubscreen = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bUseSubscreen_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bUseSubscreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_UseSubscreen__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->UseSubscreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_UseSubscreen__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UseSubscreen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Image_Dpi_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Image_Dpi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Image_Dpi_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_Image_Dpi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_ImageDpi__SWIG_0(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int)((HOutputHandlerOptions const *)arg1)->ImageDpi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_ImageDpi__SWIG_1(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ImageDpi(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Dpi_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Paper_Dpi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Paper_Dpi_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_Paper_Dpi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperDpi__SWIG_0(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int)((HOutputHandlerOptions const *)arg1)->PaperDpi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_PaperDpi__SWIG_1(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PaperDpi(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pExtendedData_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_pExtendedData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pExtendedData_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (void *) ((arg1)->m_pExtendedData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_ExtendedData__SWIG_0(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (void *)((HOutputHandlerOptions const *)arg1)->ExtendedData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_ExtendedData__SWIG_1(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ExtendedData(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_ActivateOnPageOpen__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->ActivateOnPageOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_ActivateOnPageOpen__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ActivateOnPageOpen(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotLeft__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->AnnotLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotLeft__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->AnnotLeft(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotRight__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->AnnotRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotRight__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->AnnotRight(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotBottom__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->AnnotBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotBottom__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->AnnotBottom(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotTop__SWIG_0(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float)((HOutputHandlerOptions const *)arg1)->AnnotTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_AnnotTop__SWIG_1(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->AnnotTop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_license_set(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_license = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_license, (const char *)arg2);
    } else {
      arg1->m_license = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_license_get(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_license);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_antialiasLevel_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_antialiasLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_antialiasLevel_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_antialiasLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_jpeg_quality_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_jpeg_quality = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_jpeg_quality_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_jpeg_quality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_imageOutputBufferSize_set(void * jarg1, unsigned long jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->m_imageOutputBufferSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputHandlerOptions_m_imageOutputBufferSize_get(void * jarg1) {
  unsigned long jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  size_t result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result =  ((arg1)->m_imageOutputBufferSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Version_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Version = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_Version_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int) ((arg1)->m_Version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_Version__SWIG_0(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (int)((HOutputHandlerOptions const *)arg1)->Version();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Version__SWIG_1(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  int arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Version(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_OutputType_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  H_OUTPUT_TYPE arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (H_OUTPUT_TYPE)jarg2; 
  if (arg1) (arg1)->m_OutputType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_OutputType_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  H_OUTPUT_TYPE result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (H_OUTPUT_TYPE) ((arg1)->m_OutputType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_OutputType__SWIG_0(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  H_OUTPUT_TYPE result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (H_OUTPUT_TYPE)((HOutputHandlerOptions const *)arg1)->OutputType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_OutputType__SWIG_1(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  H_OUTPUT_TYPE arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (H_OUTPUT_TYPE)jarg2; 
  (arg1)->OutputType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_b3dOutput_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_b3dOutput = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_b3dOutput_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_b3dOutput);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_Output3d__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->Output3d();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Output3d__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Output3d(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAscii_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bAscii = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAscii_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bAscii);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_Ascii__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->Ascii();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_Ascii__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Ascii(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bStlNormals_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bStlNormals = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bStlNormals_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bStlNormals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_StlNormals__SWIG_0(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool)((HOutputHandlerOptions const *)arg1)->StlNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_StlNormals__SWIG_1(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->StlNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ratio_cm_to_internal_units_set(void * jarg1, double jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ratio_cm_to_internal_units = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ratio_cm_to_internal_units_get(void * jarg1) {
  double jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (double) ((arg1)->m_ratio_cm_to_internal_units);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HOutputHandlerOptions_PrintToScale__SWIG_0(void * jarg1) {
  double jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  double result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (double)((HOutputHandlerOptions const *)arg1)->PrintToScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_PrintToScale__SWIG_1(void * jarg1, double jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  double arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PrintToScale(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_PageMargins_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float *)(float *) ((arg1)->m_PageMargins);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pBehaviorManager_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  if (arg1) (arg1)->m_pBehaviorManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pBehaviorManager_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HBhvBehaviorManager *) ((arg1)->m_pBehaviorManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pDWFModelName_set(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_pDWFModelName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_pDWFModelName, (const char *)arg2);
    } else {
      arg1->m_pDWFModelName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pDWFModelName_get(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_pDWFModelName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pPDFResourceDirectory_set(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_pPDFResourceDirectory = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_pPDFResourceDirectory, (const char *)arg2);
    } else {
      arg1->m_pPDFResourceDirectory = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pPDFResourceDirectory_get(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *) ((arg1)->m_pPDFResourceDirectory);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pPRCAsmModelFile_set(void * jarg1, void * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_pPRCAsmModelFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_pPRCAsmModelFile_get(void * jarg1) {
  void * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  void *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (void *) ((arg1)->m_pPRCAsmModelFile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bActivateOnPageOpen_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bActivateOnPageOpen = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bActivateOnPageOpen_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bActivateOnPageOpen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotLeft_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fAnnotLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotLeft_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_fAnnotLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotRight_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fAnnotRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotRight_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_fAnnotRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotBottom_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fAnnotBottom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotBottom_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_fAnnotBottom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotTop_set(void * jarg1, float jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_fAnnotTop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandlerOptions_m_fAnnotTop_get(void * jarg1) {
  float jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  float result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (float) ((arg1)->m_fAnnotTop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ePrcBrepCompression_set(void * jarg1, int jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPrcBrepCompression arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (HPrcBrepCompression)jarg2; 
  if (arg1) (arg1)->m_ePrcBrepCompression = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandlerOptions_m_ePrcBrepCompression_get(void * jarg1) {
  int jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  HPrcBrepCompression result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (HPrcBrepCompression) ((arg1)->m_ePrcBrepCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcRemoveBRep_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPrcRemoveBRep = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcRemoveBRep_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPrcRemoveBRep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcRemoveAttributes_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPrcRemoveAttributes = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcRemoveAttributes_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPrcRemoveAttributes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcUseNameUserData_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPrcUseNameUserData = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcUseNameUserData_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPrcUseNameUserData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_iPrcNameUserDataIndex_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  MVO_POINTER_SIZED_INT arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_iPrcNameUserDataIndex = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOutputHandlerOptions_m_iPrcNameUserDataIndex_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  MVO_POINTER_SIZED_INT result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result =  ((arg1)->m_iPrcNameUserDataIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcCompressTessellation_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bPrcCompressTessellation = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bPrcCompressTessellation_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bPrcCompressTessellation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAVIShowCompressionDialog_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bAVIShowCompressionDialog = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAVIShowCompressionDialog_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bAVIShowCompressionDialog);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAVICodec_set(void * jarg1, char * jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_bAVICodec, (const char *)arg2, 4-1);
      arg1->m_bAVICodec[4-1] = 0;
    } else {
      arg1->m_bAVICodec[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bAVICodec_get(void * jarg1) {
  char * jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (char *)(char *) ((arg1)->m_bAVICodec);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bExporting2DDwf_set(void * jarg1, bool jarg2) {
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bExporting2DDwf = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOutputHandlerOptions_m_bExporting2DDwf_get(void * jarg1) {
  bool jresult ;
  HOutputHandlerOptions *arg1 = (HOutputHandlerOptions *) 0 ;
  bool result;
  
  arg1 = (HOutputHandlerOptions *)jarg1; 
  result = (bool) ((arg1)->m_bExporting2DDwf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOutputHandler() {
  void * jresult ;
  HOutputHandler *result = 0 ;
  
  result = (HOutputHandler *)new SwigDirector_HOutputHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOutputHandler(void * jarg1) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_GetOutputName(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (char *)(arg1)->GetOutputName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputHandler_GetOutputOps(void * jarg1) {
  unsigned long jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  unsigned long result;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (unsigned long)(arg1)->GetOutputOps();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_RegisterOutputHandlerTypes(void * jarg1) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  (arg1)->RegisterOutputHandlerTypes();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandler_FileOutputByKey(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileOutputByKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandler_FileOutputByKeySwigExplicitHOutputHandler(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HOutputHandler::FileOutputByKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandler_FileOutputFromImageKey(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileOutputFromImageKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandler_FileOutputFromImageKeySwigExplicitHOutputHandler(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->HOutputHandler::FileOutputFromImageKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_GetOutputTypesString(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (char *)(arg1)->GetOutputTypesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOutputHandler_GetOutputStyle(void * jarg1) {
  int jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  HOutputHandlerStyle result;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (HOutputHandlerStyle)(arg1)->GetOutputStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_GetOutputDefaultHSRA(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (char *)(arg1)->GetOutputDefaultHSRA();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_GetOutputDefaultHSRASwigExplicitHOutputHandler(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (char *)(arg1)->HOutputHandler::GetOutputDefaultHSRA();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_GetOutputProgress(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (char *)(arg1)->GetOutputProgress();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOutputHandler_GetOutputPercentProgress(void * jarg1) {
  float jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  float result;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (float)(arg1)->GetOutputPercentProgress();
  jresult = result; 
  return jresult;
}


SWIGEXPORT wchar_t * SWIGSTDCALL CSharp_HOutputHandler_GetOutputInformation(void * jarg1) {
  wchar_t * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  result = (wchar_t *)(arg1)->GetOutputInformation();
  jresult = (wchar_t *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandler_SetOutputProgressNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  HIONoticeCallback *arg2 = (HIONoticeCallback *) 0 ;
  HIONoticeCallback *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (HIONoticeCallback *)jarg2; 
  result = (HIONoticeCallback *)(arg1)->SetOutputProgressNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandler_SetOutputPercentProgressNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  HIOPercentNoticeCallback *arg2 = (HIOPercentNoticeCallback *) 0 ;
  HIOPercentNoticeCallback *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (HIOPercentNoticeCallback *)jarg2; 
  result = (HIOPercentNoticeCallback *)(arg1)->SetOutputPercentProgressNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOutputHandler_SetOutputInformationNoticeCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  HIONoticeCallback *arg2 = (HIONoticeCallback *) 0 ;
  HIONoticeCallback *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (HIONoticeCallback *)jarg2; 
  result = (HIONoticeCallback *)(arg1)->SetOutputInformationNoticeCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_ReportOutputProgress(void * jarg1, char * jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ReportOutputProgress((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_ReportOutputPercentProgress(void * jarg1, float jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  float arg2 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ReportOutputPercentProgress(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_ReportOutputInformation(void * jarg1, char * jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ReportOutputInformation((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_SetModuleDirectory__SWIG_0(void * jarg1, char * jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetModuleDirectory((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_SetStartingOutput(void * jarg1) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  SwigDirector_HOutputHandler *darg = 0;
  
  arg1 = (HOutputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  (darg)->SetStartingOutput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_SetFinishedOutput(void * jarg1) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  SwigDirector_HOutputHandler *darg = 0;
  
  arg1 = (HOutputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  (darg)->SetFinishedOutput();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_SetOutputOps(void * jarg1, unsigned long jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HOutputHandler *darg = 0;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  (darg)->SetOutputOps(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_m_OutputOps_set(void * jarg1, unsigned long jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  unsigned long arg2 ;
  SwigDirector_HOutputHandler *darg = 0;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  if (arg1) darg->m_OutputOps = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HOutputHandler_m_OutputOps_get(void * jarg1) {
  unsigned long jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  SwigDirector_HOutputHandler *darg = 0;
  unsigned long result;
  
  arg1 = (HOutputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  result = (unsigned long) (darg->m_OutputOps);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_m_module_directory_set(void * jarg1, char * jarg2) {
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigDirector_HOutputHandler *darg = 0;
  
  arg1 = (HOutputHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  {
    if (darg->m_module_directory) delete [] darg->m_module_directory;
    if (arg2) {
      darg->m_module_directory = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)darg->m_module_directory, (const char *)arg2);
    } else {
      darg->m_module_directory = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOutputHandler_m_module_directory_get(void * jarg1) {
  char * jresult ;
  HOutputHandler *arg1 = (HOutputHandler *) 0 ;
  SwigDirector_HOutputHandler *darg = 0;
  char *result = 0 ;
  
  arg1 = (HOutputHandler *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOutputHandler *>(arg1);
  result = (char *) (darg->m_module_directory);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOutputHandler_director_connect(void *objarg, SwigDirector_HOutputHandler::SWIG_Callback0_t callback0, SwigDirector_HOutputHandler::SWIG_Callback1_t callback1, SwigDirector_HOutputHandler::SWIG_Callback2_t callback2, SwigDirector_HOutputHandler::SWIG_Callback3_t callback3, SwigDirector_HOutputHandler::SWIG_Callback4_t callback4, SwigDirector_HOutputHandler::SWIG_Callback5_t callback5, SwigDirector_HOutputHandler::SWIG_Callback6_t callback6) {
  HOutputHandler *obj = (HOutputHandler *)objarg;
  SwigDirector_HOutputHandler *director = dynamic_cast<SwigDirector_HOutputHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIOManager() {
  void * jresult ;
  HIOManager *result = 0 ;
  
  result = (HIOManager *)new HIOManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIOManager(void * jarg1) {
  HIOManager *arg1 = (HIOManager *) 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_RegisterInputHandler(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HInputHandler *arg3 = (HInputHandler *) 0 ;
  HInputHandler *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HInputHandler *)jarg3; 
  result = (HInputHandler *)(arg1)->RegisterInputHandler((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_RegisterOutputHandler(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HOutputHandler *arg3 = (HOutputHandler *) 0 ;
  HOutputHandler *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HOutputHandler *)jarg3; 
  result = (HOutputHandler *)(arg1)->RegisterOutputHandler((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_RegisterConnector(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HIO_CREATE_FREE_FUNCTION arg3 = (HIO_CREATE_FREE_FUNCTION) 0 ;
  HIO_FREE_CONNECTOR_FUNCTION arg4 = (HIO_FREE_CONNECTOR_FUNCTION) 0 ;
  HIOConnector *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HIO_CREATE_FREE_FUNCTION)jarg3; 
  arg4 = (HIO_FREE_CONNECTOR_FUNCTION)jarg4; 
  result = (HIOConnector *)(arg1)->RegisterConnector((char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_GetInputHandler__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HInputHandler *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HInputHandler *)(arg1)->GetInputHandler((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_GetOutputHandler__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HOutputHandler *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HOutputHandler *)(arg1)->GetOutputHandler((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOManager_RegisterHandlers(void * jarg1) {
  HIOManager *arg1 = (HIOManager *) 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  (arg1)->RegisterHandlers();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HIOManager_GetInputHandlerTypes(void * jarg1) {
  char * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  result = (char *)(arg1)->GetInputHandlerTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HIOManager_GetOutputHandlerTypes(void * jarg1) {
  char * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  result = (char *)(arg1)->GetOutputHandlerTypes();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_CreateConnector(void * jarg1, char * jarg2) {
  void * jresult ;
  HIOManager *arg1 = (HIOManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HIOConnector *result = 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HIOConnector *)(arg1)->CreateConnector((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOManager_FreeConnector(void * jarg1, void * jarg2) {
  HIOManager *arg1 = (HIOManager *) 0 ;
  HIOConnector *arg2 = (HIOConnector *) 0 ;
  
  arg1 = (HIOManager *)jarg1; 
  arg2 = (HIOConnector *)jarg2; 
  (arg1)->FreeConnector(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HIOManager_GetCurrentHIOManager() {
  void * jresult ;
  HIOManager *result = 0 ;
  
  result = (HIOManager *)HIOManager::GetCurrentHIOManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOManager_GetFileOutputResultString(int jarg1, char * jarg2) {
  HFileIOResult arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HFileIOResult)jarg1; 
  arg2 = (char *)jarg2; 
  HIOManager::GetFileOutputResultString(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HImManager() {
  void * jresult ;
  HImManager *result = 0 ;
  
  result = (HImManager *)new HImManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HImManager(void * jarg1) {
  HImManager *arg1 = (HImManager *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_RegisterCallbacks(void * jarg1) {
  HImManager *arg1 = (HImManager *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  (arg1)->RegisterCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_RegisterOneCallback(void * jarg1, char * jarg2, void * jarg3) {
  HImManager *arg1 = (HImManager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3; 
  (arg1)->RegisterOneCallback((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_SetCallback__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, char * jarg4) {
  HImManager *arg1 = (HImManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SetCallback(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_SetCallback__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  HImManager *arg1 = (HImManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetCallback((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_UnSetOneCallback__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  HImManager *arg1 = (HImManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->UnSetOneCallback(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_UnSetOneCallback__SWIG_1(void * jarg1, char * jarg2) {
  HImManager *arg1 = (HImManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnSetOneCallback((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImManager_ShowCallback(void * jarg1, char * jarg2, char * jarg3) {
  HImManager *arg1 = (HImManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HImManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ShowCallback((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HImManager_GetCurrentHImManager() {
  void * jresult ;
  HImManager *result = 0 ;
  
  result = (HImManager *)HImManager::GetCurrentHImManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_RegisterCallbacks() {
  HImUtility::RegisterCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_set_clip_rectangle(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_Segment_Info *arg2 = (HIC_Segment_Info *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_Segment_Info *)jarg2; 
  HImUtility::set_clip_rectangle((HIC_Rendition const *)arg1,(HIC_Segment_Info const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_suppress_3d_geometry(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_Geometry *arg2 = (HIC_Geometry *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_Geometry *)jarg2; 
  HImUtility::suppress_3d_geometry((HIC_Rendition const *)arg1,(HIC_Geometry const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_draw_gradiated_window_background(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_Int_Rectangle *arg2 = (HIC_Int_Rectangle *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_Int_Rectangle *)jarg2; 
  HImUtility::draw_gradiated_window_background((HIC_Rendition const *)arg1,(HIC_Int_Rectangle const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_draw_annotation_lines(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_Polyline *arg2 = (HIC_Polyline *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_Polyline *)jarg2; 
  HImUtility::draw_annotation_lines((HIC_Rendition const *)arg1,(HIC_Polyline const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImUtility_drawTextInfront(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_Text_Info *arg2 = (HIC_Text_Info *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_Text_Info *)jarg2; 
  HImUtility::drawTextInfront((HIC_Rendition const *)arg1,(HIC_Text_Info const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HImUtility(void * jarg1) {
  HImUtility *arg1 = (HImUtility *) 0 ;
  
  arg1 = (HImUtility *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VI_BITS_get() {
  int jresult ;
  int result;
  
  result = (int) (16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VI_MASK_get() {
  int jresult ;
  int result;
  
  result = (int) ((1 << (16)) -1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SI_INDEX_get() {
  int jresult ;
  int result;
  
  result = (int) ((0x1 << (31-(16))) -1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellInfo_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  ShellInfo *arg1 = (ShellInfo *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (ShellInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_ShellInfo_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  ShellInfo *arg1 = (ShellInfo *) 0 ;
  HC_KEY result;
  
  arg1 = (ShellInfo *)jarg1; 
  result =  ((arg1)->key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellInfo_offset_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  ShellInfo *arg1 = (ShellInfo *) 0 ;
  MVO_POINTER_SIZED_INT arg2 ;
  
  arg1 = (ShellInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_ShellInfo_offset_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  ShellInfo *arg1 = (ShellInfo *) 0 ;
  MVO_POINTER_SIZED_INT result;
  
  arg1 = (ShellInfo *)jarg1; 
  result =  ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShellInfo() {
  void * jresult ;
  ShellInfo *result = 0 ;
  
  result = (ShellInfo *)new ShellInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShellInfo(void * jarg1) {
  ShellInfo *arg1 = (ShellInfo *) 0 ;
  
  arg1 = (ShellInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PairToIndex_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  PairToIndex *arg1 = (PairToIndex *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (PairToIndex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_PairToIndex_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  PairToIndex *arg1 = (PairToIndex *) 0 ;
  HC_KEY result;
  
  arg1 = (PairToIndex *)jarg1; 
  result =  ((arg1)->key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int * SWIGSTDCALL CSharp_PairToIndex_bigIndices_get(void * jarg1) {
  int * jresult ;
  PairToIndex *arg1 = (PairToIndex *) 0 ;
  int *result = 0 ;
  
  arg1 = (PairToIndex *)jarg1; 
  result = (int *) ((arg1)->bigIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PairToIndex() {
  void * jresult ;
  PairToIndex *result = 0 ;
  
  result = (PairToIndex *)new PairToIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PairToIndex(void * jarg1) {
  PairToIndex *arg1 = (PairToIndex *) 0 ;
  
  arg1 = (PairToIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UNUSED_INDEX_TO_PAIR_get() {
  int jresult ;
  int result;
  
  result = (int) 0xffffffff;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int * SWIGSTDCALL CSharp_SharedVertex_IndexToPair_get(void * jarg1) {
  unsigned int * jresult ;
  SharedVertex *arg1 = (SharedVertex *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (SharedVertex *)jarg1; 
  result = (unsigned int *) ((arg1)->IndexToPair);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedVertex() {
  void * jresult ;
  SharedVertex *result = 0 ;
  
  result = (SharedVertex *)new SharedVertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedVertex(void * jarg1) {
  SharedVertex *arg1 = (SharedVertex *) 0 ;
  
  arg1 = (SharedVertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilitySparseShell(bool jarg1, bool jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  HUtilitySparseShell *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (HUtilitySparseShell *)new HUtilitySparseShell(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilitySparseShell(void * jarg1) {
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  delete arg1;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilitySparseShell_KInsertShell(void * jarg1, int jarg2, void * jarg3, int jarg4, int * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  int *arg5 ;
  HC_KEY result;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  result = (arg1)->KInsertShell(arg2,(HPoint const (*))arg3,arg4,(int const (*))arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilitySparseShell_DeleteByKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = jarg2; 
  (arg1)->DeleteByKey(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilitySparseShell_EditShellPoints(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  HPoint *arg6 ;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6; 
  (arg1)->EditShellPoints(arg2,arg3,arg4,arg5,(HPoint const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilitySparseShell_EditShellFaces(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, int jarg4, int jarg5, int * jarg6) {
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 ;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  (arg1)->EditShellFaces(arg2,arg3,arg4,arg5,(int const (*))arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtilitySparseShell_GetPairCount(void * jarg1, int jarg2) {
  int jresult ;
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((HUtilitySparseShell const *)arg1)->GetPairCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilitySparseShell_GetPair(void * jarg1, int jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int * jarg5) {
  bool jresult ;
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  int arg2 ;
  int arg3 ;
  HC_KEY *arg4 = (HC_KEY *) 0 ;
  int *arg5 = (int *) 0 ;
  bool result;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int *)jarg5; 
  result = (bool)((HUtilitySparseShell const *)arg1)->GetPair(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilitySparseShell_GetPairs(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, int * jarg4) {
  bool jresult ;
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  int arg2 ;
  HC_KEY *arg3 ;
  int *arg4 ;
  bool result;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = (int *)jarg4; 
  result = (bool)((HUtilitySparseShell const *)arg1)->GetPairs(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilitySparseShell_GetIndex(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, int * jarg4) {
  bool jresult ;
  HUtilitySparseShell *arg1 = (HUtilitySparseShell *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  bool result;
  
  arg1 = (HUtilitySparseShell *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  result = (bool)((HUtilitySparseShell const *)arg1)->GetIndex(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMaterialLibrary() {
  void * jresult ;
  HMaterialLibrary *result = 0 ;
  
  result = (HMaterialLibrary *)new HMaterialLibrary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMaterialLibrary(void * jarg1) {
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_RegisterMaterials__SWIG_0(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->RegisterMaterials((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_IsValid(void * jarg1) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (bool)((HMaterialLibrary const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_ApplyStyles(void * jarg1) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (bool)(arg1)->ApplyStyles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetContainerSegment(void * jarg1) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (char *)((HMaterialLibrary const *)arg1)->GetContainerSegment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetMaterialList__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)(arg1)->GetMaterialList(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetMaterialList__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->GetMaterialList(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetMaterialList__SWIG_2(void * jarg1) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (char *)(arg1)->GetMaterialList();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_IsValidMaterial(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((HMaterialLibrary const *)arg1)->IsValidMaterial((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_ApplyMaterial(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->ApplyMaterial((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_ReloadMaterial(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->ReloadMaterial((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_CloneMaterial(void * jarg1, char * jarg2, char * jarg3) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->CloneMaterial((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_RenameMaterial(void * jarg1, char * jarg2, char * jarg3) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->RenameMaterial((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_GetTweakablesCount(void * jarg1, char * jarg2, int * jarg3) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->GetTweakablesCount((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_GetTweakableByIndex(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->GetTweakableByIndex((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_GetTweakableByName(void * jarg1, char * jarg2, char * jarg3, int * jarg4, char * jarg5) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->GetTweakableByName((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMaterialLibrary_CountFromType(void * jarg1, char * jarg2) {
  int jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->CountFromType((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_GetTweakableDefaults(void * jarg1, char * jarg2, int jarg3, float * jarg4) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)(arg1)->GetTweakableDefaults((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Tweak__SWIG_0(void * jarg1, char * jarg2, int jarg3, const float * jarg4) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)(arg1)->Tweak((char const *)arg2,arg3,(float const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Tweak__SWIG_1(void * jarg1, char * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->Tweak((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Tweak__SWIG_2(void * jarg1, char * jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->Tweak((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Tweak__SWIG_3(void * jarg1, char * jarg2, int jarg3, float jarg4, float jarg5) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->Tweak((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Tweak__SWIG_4(void * jarg1, char * jarg2, int jarg3, float jarg4) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->Tweak((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetEnvironmentList__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)(arg1)->GetEnvironmentList(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetEnvironmentList__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->GetEnvironmentList(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetEnvironmentList__SWIG_2(void * jarg1) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (char *)(arg1)->GetEnvironmentList();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_IsValidEnvironment(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((HMaterialLibrary const *)arg1)->IsValidEnvironment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_SetEnvironment(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetEnvironment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_EnsureMaterialInitialized(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->EnsureMaterialInitialized((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_EnsureEnvironmentInitialized(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->EnsureEnvironmentInitialized((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_FindReferencedMaterials(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, int jarg4) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->FindReferencedMaterials(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_InitWrite(void * jarg1, char * jarg2, int * jarg3) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)(arg1)->InitWrite((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_InitRead(void * jarg1, int jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->InitRead(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMaterialLibrary_ParseBuffer(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  TK_Status result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (TK_Status)(arg1)->ParseBuffer((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetCurrentEnvironment__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)(arg1)->GetCurrentEnvironment(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetCurrentEnvironment__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->GetCurrentEnvironment(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMaterialLibrary_GetCurrentEnvironment__SWIG_2(void * jarg1) {
  char * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (char *)(arg1)->GetCurrentEnvironment();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMaterialLibrary_Compile(void * jarg1, char * jarg2) {
  bool jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->Compile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMaterialLibrary_SetReadFlags(void * jarg1, int jarg2) {
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HMaterialLibrary::Read_Flags arg2 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (HMaterialLibrary::Read_Flags)jarg2; 
  (arg1)->SetReadFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMaterialLibrary_GetReadFlags(void * jarg1) {
  int jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HMaterialLibrary::Read_Flags result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (HMaterialLibrary::Read_Flags)(arg1)->GetReadFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMaterialLibrary_SetWriteFlags(void * jarg1, int jarg2) {
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HMaterialLibrary::Write_Flags arg2 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = (HMaterialLibrary::Write_Flags)jarg2; 
  (arg1)->SetWriteFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HMaterialLibrary_GetWriteFlags(void * jarg1) {
  int jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HMaterialLibrary::Write_Flags result;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (HMaterialLibrary::Write_Flags)(arg1)->GetWriteFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Material_Composite__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HC_KEY arg2 ;
  HTK_Material_Composite *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  arg2 = jarg2; 
  result = (HTK_Material_Composite *)new HTK_Material_Composite(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_Material_Composite__SWIG_1(void * jarg1) {
  void * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HTK_Material_Composite *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (HTK_Material_Composite *)new HTK_Material_Composite(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Material_Composite_Interpret(void * jarg1, void * jarg2, long jarg3, int jarg4) {
  int jresult ;
  HTK_Material_Composite *arg1 = (HTK_Material_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (HTK_Material_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (long)jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_Material_Composite_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_Material_Composite *arg1 = (HTK_Material_Composite *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_Material_Composite *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_Material_Composite(void * jarg1) {
  HTK_Material_Composite *arg1 = (HTK_Material_Composite *) 0 ;
  
  arg1 = (HTK_Material_Composite *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_One_Material__SWIG_0() {
  void * jresult ;
  HTK_One_Material *result = 0 ;
  
  result = (HTK_One_Material *)new HTK_One_Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTK_One_Material__SWIG_1(void * jarg1) {
  void * jresult ;
  HMaterialLibrary *arg1 = (HMaterialLibrary *) 0 ;
  HTK_One_Material *result = 0 ;
  
  arg1 = (HMaterialLibrary *)jarg1; 
  result = (HTK_One_Material *)new HTK_One_Material(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTK_One_Material(void * jarg1) {
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  
  arg1 = (HTK_One_Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_One_Material_Interpret(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  int jresult ;
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  HMaterialLibrary *arg3 = (HMaterialLibrary *) 0 ;
  char *arg4 = (char *) 0 ;
  TK_Status result;
  
  arg1 = (HTK_One_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = (HMaterialLibrary *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_One_Material_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_One_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_One_Material_Read(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_One_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTK_One_Material_Write(void * jarg1, void * jarg2) {
  int jresult ;
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (HTK_One_Material *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Write(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTK_One_Material_Reset(void * jarg1) {
  HTK_One_Material *arg1 = (HTK_One_Material *) 0 ;
  
  arg1 = (HTK_One_Material *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTManager__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  HTManager *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HTManager *)new HTManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTManager__SWIG_1() {
  void * jresult ;
  HTManager *result = 0 ;
  
  result = (HTManager *)new HTManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTManager(void * jarg1) {
  HTManager *arg1 = (HTManager *) 0 ;
  
  arg1 = (HTManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTManager_Tick(void * jarg1, float jarg2) {
  HTManager *arg1 = (HTManager *) 0 ;
  float arg2 ;
  
  arg1 = (HTManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Tick(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTManager_RegisterClient(void * jarg1, void * jarg2) {
  HTManager *arg1 = (HTManager *) 0 ;
  HTClient *arg2 = (HTClient *) 0 ;
  
  arg1 = (HTManager *)jarg1; 
  arg2 = (HTClient *)jarg2; 
  (arg1)->RegisterClient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTManager_UnRegisterClient(void * jarg1, void * jarg2) {
  HTManager *arg1 = (HTManager *) 0 ;
  HTClient *arg2 = (HTClient *) 0 ;
  
  arg1 = (HTManager *)jarg1; 
  arg2 = (HTClient *)jarg2; 
  (arg1)->UnRegisterClient(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTManager_GetCurrentHTManager() {
  void * jresult ;
  HTManager *result = 0 ;
  
  result = (HTManager *)HTManager::GetCurrentHTManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTClient__SWIG_0(float jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  float arg1 ;
  HTCStyle arg2 ;
  HTClientTickFunction arg3 = (HTClientTickFunction) 0 ;
  void *arg4 = (void *) 0 ;
  HTClient *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (HTCStyle)jarg2; 
  arg3 = (HTClientTickFunction)jarg3; 
  arg4 = jarg4; 
  result = (HTClient *)new HTClient(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTClient__SWIG_1(float jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  HTCStyle arg2 ;
  HTClientTickFunction arg3 = (HTClientTickFunction) 0 ;
  HTClient *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (HTCStyle)jarg2; 
  arg3 = (HTClientTickFunction)jarg3; 
  result = (HTClient *)new HTClient(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTClient__SWIG_2(float jarg1, int jarg2) {
  void * jresult ;
  float arg1 ;
  HTCStyle arg2 ;
  HTClient *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (HTCStyle)jarg2; 
  result = (HTClient *)new HTClient(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTClient__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  HTClient *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HTClient *)new HTClient(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HTClient__SWIG_4() {
  void * jresult ;
  HTClient *result = 0 ;
  
  result = (HTClient *)new HTClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HTClient(void * jarg1) {
  HTClient *arg1 = (HTClient *) 0 ;
  
  arg1 = (HTClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HTClient_Tick(void * jarg1, float jarg2, float jarg3) {
  bool jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Tick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetInterval(void * jarg1, float jarg2) {
  HTClient *arg1 = (HTClient *) 0 ;
  float arg2 ;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetInterval(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HTClient_GetInterval(void * jarg1) {
  float jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  float result;
  
  arg1 = (HTClient *)jarg1; 
  result = (float)((HTClient const *)arg1)->GetInterval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetStyle(void * jarg1, int jarg2) {
  HTClient *arg1 = (HTClient *) 0 ;
  HTCStyle arg2 ;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = (HTCStyle)jarg2; 
  (arg1)->SetStyle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTClient_GetStyle(void * jarg1) {
  int jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  HTCStyle result;
  
  arg1 = (HTClient *)jarg1; 
  result = (HTCStyle)((HTClient const *)arg1)->GetStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetNextRequest(void * jarg1, float jarg2) {
  HTClient *arg1 = (HTClient *) 0 ;
  float arg2 ;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetNextRequest(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HTClient_GetNextRequest(void * jarg1) {
  float jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  float result;
  
  arg1 = (HTClient *)jarg1; 
  result = (float)((HTClient const *)arg1)->GetNextRequest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HTClient_GetPriority(void * jarg1) {
  int jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  int result;
  
  arg1 = (HTClient *)jarg1; 
  result = (int)((HTClient const *)arg1)->GetPriority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetPriorityLowest(void * jarg1) {
  HTClient *arg1 = (HTClient *) 0 ;
  
  arg1 = (HTClient *)jarg1; 
  (arg1)->SetPriorityLowest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetUserData(void * jarg1, void * jarg2) {
  HTClient *arg1 = (HTClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTClient_GetUserData(void * jarg1) {
  void * jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  void *result = 0 ;
  
  arg1 = (HTClient *)jarg1; 
  result = (void *)((HTClient const *)arg1)->GetUserData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HTClient_SetTickFunction(void * jarg1, void * jarg2) {
  HTClient *arg1 = (HTClient *) 0 ;
  HTClientTickFunction arg2 = (HTClientTickFunction) 0 ;
  
  arg1 = (HTClient *)jarg1; 
  arg2 = (HTClientTickFunction)jarg2; 
  (arg1)->SetTickFunction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HTClient_GetTickFunction(void * jarg1) {
  void * jresult ;
  HTClient *arg1 = (HTClient *) 0 ;
  HTClientTickFunction result;
  
  arg1 = (HTClient *)jarg1; 
  result = (HTClientTickFunction)((HTClient const *)arg1)->GetTickFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstFRSimpType_m_SimpLevelMin_set(void * jarg1, int jarg2) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int arg2 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_SimpLevelMin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstFRSimpType_m_SimpLevelMin_get(void * jarg1) {
  int jresult ;
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int result;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  result = (int) ((arg1)->m_SimpLevelMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstFRSimpType_m_SimpLevelMax_set(void * jarg1, int jarg2) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int arg2 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_SimpLevelMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstFRSimpType_m_SimpLevelMax_get(void * jarg1) {
  int jresult ;
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int result;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  result = (int) ((arg1)->m_SimpLevelMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HConstFRSimpType(void * jarg1) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstFRSimpType_Reset(void * jarg1, void * jarg2) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstFRSimpType_Set(void * jarg1, void * jarg2, int jarg3) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstFRSimpType_Update(void * jarg1, void * jarg2, int jarg3) {
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstFRSimpType_GetFRType(void * jarg1) {
  int jresult ;
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  ConstFRType result;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstFRSimpType_GetMinSimpLevel(void * jarg1) {
  int jresult ;
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int result;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  result = (int)(arg1)->GetMinSimpLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstFRSimpType_GetMaxSimpLevel(void * jarg1) {
  int jresult ;
  HConstFRSimpType *arg1 = (HConstFRSimpType *) 0 ;
  int result;
  
  arg1 = (HConstFRSimpType *)jarg1; 
  result = (int)(arg1)->GetMaxSimpLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HConstFRSimpType_CreateList(int jarg1) {
  void * jresult ;
  int arg1 ;
  HConstFRSimpType **result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (HConstFRSimpType **)HConstFRSimpType::CreateList(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrExtent__SWIG_0() {
  void * jresult ;
  HFrExtent *result = 0 ;
  
  result = (HFrExtent *)new HFrExtent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrExtent__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrExtent *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrExtent *)new HFrExtent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrExtent(void * jarg1) {
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  
  arg1 = (HFrExtent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrExtent_SetMultiplier(void * jarg1, int jarg2) {
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  int arg2 ;
  
  arg1 = (HFrExtent *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMultiplier(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrExtent_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrExtent *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrExtent_SetUseLod(void * jarg1, bool jarg2) {
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  bool arg2 ;
  
  arg1 = (HFrExtent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseLod(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HFrExtent_GetUseLod(void * jarg1) {
  bool jresult ;
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  bool result;
  
  arg1 = (HFrExtent *)jarg1; 
  result = (bool)((HFrExtent const *)arg1)->GetUseLod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrExtent_GetFRType(void * jarg1) {
  int jresult ;
  HFrExtent *arg1 = (HFrExtent *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrExtent *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrExtent_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrExtent::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrNoSimpAA__SWIG_0() {
  void * jresult ;
  HFrNoSimpAA *result = 0 ;
  
  result = (HFrNoSimpAA *)new HFrNoSimpAA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrNoSimpAA__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrNoSimpAA *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrNoSimpAA *)new HFrNoSimpAA(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrNoSimpAA(void * jarg1) {
  HFrNoSimpAA *arg1 = (HFrNoSimpAA *) 0 ;
  
  arg1 = (HFrNoSimpAA *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrNoSimpAA_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrNoSimpAA *arg1 = (HFrNoSimpAA *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrNoSimpAA *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrNoSimpAA_GetFRType(void * jarg1) {
  int jresult ;
  HFrNoSimpAA *arg1 = (HFrNoSimpAA *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrNoSimpAA *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrNoSimpAA_Update(void * jarg1, void * jarg2, int jarg3) {
  HFrNoSimpAA *arg1 = (HFrNoSimpAA *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrNoSimpAA *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Update(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrNoSimpAA_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrNoSimpAA::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrNoSimp__SWIG_0() {
  void * jresult ;
  HFrNoSimp *result = 0 ;
  
  result = (HFrNoSimp *)new HFrNoSimp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrNoSimp__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrNoSimp *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrNoSimp *)new HFrNoSimp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrNoSimp(void * jarg1) {
  HFrNoSimp *arg1 = (HFrNoSimp *) 0 ;
  
  arg1 = (HFrNoSimp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrNoSimp_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrNoSimp *arg1 = (HFrNoSimp *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrNoSimp *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrNoSimp_GetFRType(void * jarg1) {
  int jresult ;
  HFrNoSimp *arg1 = (HFrNoSimp *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrNoSimp *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrNoSimp_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrNoSimp::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrLodClamp__SWIG_0() {
  void * jresult ;
  HFrLodClamp *result = 0 ;
  
  result = (HFrLodClamp *)new HFrLodClamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrLodClamp__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrLodClamp *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrLodClamp *)new HFrLodClamp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrLodClamp_Reset(void * jarg1, void * jarg2) {
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HFrLodClamp *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrLodClamp(void * jarg1) {
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  
  arg1 = (HFrLodClamp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrLodClamp_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrLodClamp *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrLodClamp_GetFRType(void * jarg1) {
  int jresult ;
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrLodClamp *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrLodClamp_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrLodClamp::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrLodClamp_SetSegmentSwitch(void * jarg1, bool jarg2) {
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  bool arg2 ;
  
  arg1 = (HFrLodClamp *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSegmentSwitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrLodClamp_m_bSegmentSwitch_set(void * jarg1, bool jarg2) {
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  bool arg2 ;
  
  arg1 = (HFrLodClamp *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bSegmentSwitch = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HFrLodClamp_m_bSegmentSwitch_get(void * jarg1) {
  bool jresult ;
  HFrLodClamp *arg1 = (HFrLodClamp *) 0 ;
  bool result;
  
  arg1 = (HFrLodClamp *)jarg1; 
  result = (bool) ((arg1)->m_bSegmentSwitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrLodThreshold__SWIG_0() {
  void * jresult ;
  HFrLodThreshold *result = 0 ;
  
  result = (HFrLodThreshold *)new HFrLodThreshold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrLodThreshold__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrLodThreshold *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrLodThreshold *)new HFrLodThreshold(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrLodThreshold(void * jarg1) {
  HFrLodThreshold *arg1 = (HFrLodThreshold *) 0 ;
  
  arg1 = (HFrLodThreshold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrLodThreshold_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrLodThreshold *arg1 = (HFrLodThreshold *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrLodThreshold *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrLodThreshold_GetFRType(void * jarg1) {
  int jresult ;
  HFrLodThreshold *arg1 = (HFrLodThreshold *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrLodThreshold *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrLodThreshold_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrLodThreshold::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrSolidBBox__SWIG_0() {
  void * jresult ;
  HFrSolidBBox *result = 0 ;
  
  result = (HFrSolidBBox *)new HFrSolidBBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrSolidBBox__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrSolidBBox *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrSolidBBox *)new HFrSolidBBox(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrSolidBBox(void * jarg1) {
  HFrSolidBBox *arg1 = (HFrSolidBBox *) 0 ;
  
  arg1 = (HFrSolidBBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrSolidBBox_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrSolidBBox *arg1 = (HFrSolidBBox *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrSolidBBox *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrSolidBBox_GetFRType(void * jarg1) {
  int jresult ;
  HFrSolidBBox *arg1 = (HFrSolidBBox *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrSolidBBox *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrSolidBBox_RegisterCallbacks() {
  HFrSolidBBox::RegisterCallbacks();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrSolidBBox_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrSolidBBox::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrWireframeBBox__SWIG_0() {
  void * jresult ;
  HFrWireframeBBox *result = 0 ;
  
  result = (HFrWireframeBBox *)new HFrWireframeBBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrWireframeBBox__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrWireframeBBox *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrWireframeBBox *)new HFrWireframeBBox(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrWireframeBBox(void * jarg1) {
  HFrWireframeBBox *arg1 = (HFrWireframeBBox *) 0 ;
  
  arg1 = (HFrWireframeBBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrWireframeBBox_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrWireframeBBox *arg1 = (HFrWireframeBBox *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrWireframeBBox *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrWireframeBBox_GetFRType(void * jarg1) {
  int jresult ;
  HFrWireframeBBox *arg1 = (HFrWireframeBBox *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrWireframeBBox *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrWireframeBBox_RegisterCallbacks() {
  HFrWireframeBBox::RegisterCallbacks();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrWireframeBBox_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrWireframeBBox::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrWireframe__SWIG_0() {
  void * jresult ;
  HFrWireframe *result = 0 ;
  
  result = (HFrWireframe *)new HFrWireframe();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HFrWireframe__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HFrWireframe *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HFrWireframe *)new HFrWireframe(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HFrWireframe(void * jarg1) {
  HFrWireframe *arg1 = (HFrWireframe *) 0 ;
  
  arg1 = (HFrWireframe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HFrWireframe_Set(void * jarg1, void * jarg2, int jarg3) {
  HFrWireframe *arg1 = (HFrWireframe *) 0 ;
  HConstantFrameRate *arg2 = (HConstantFrameRate *) 0 ;
  int arg3 ;
  
  arg1 = (HFrWireframe *)jarg1; 
  arg2 = (HConstantFrameRate *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HFrWireframe_GetFRType(void * jarg1) {
  int jresult ;
  HFrWireframe *arg1 = (HFrWireframe *) 0 ;
  ConstFRType result;
  
  arg1 = (HFrWireframe *)jarg1; 
  result = (ConstFRType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HFrWireframe_Create(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HConstFRSimpType *)HFrWireframe::Create(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HConstantFrameRate(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HConstantFrameRate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HConstantFrameRate *)new HConstantFrameRate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HConstantFrameRate(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HConstantFrameRate_GetView(void * jarg1) {
  void * jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (HBaseView *)(arg1)->GetView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_UpdateLevel(void * jarg1, int jarg2, int jarg3) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UpdateLevel(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetMode__SWIG_0(void * jarg1, void * jarg2, float * jarg3, int * jarg4) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HConstFRSimpType ***arg2 = (HConstFRSimpType ***) 0 ;
  float *arg3 = (float *) 0 ;
  int *arg4 = (int *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (HConstFRSimpType ***)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (int *)jarg4; 
  result = (bool)(arg1)->GetMode(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetMode__SWIG_1(void * jarg1, void * jarg2, float * jarg3) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HConstFRSimpType ***arg2 = (HConstFRSimpType ***) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (HConstFRSimpType ***)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)(arg1)->GetMode(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetMode__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HConstFRSimpType ***arg2 = (HConstFRSimpType ***) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (HConstFRSimpType ***)jarg2; 
  result = (bool)(arg1)->GetMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetMode__SWIG_3(void * jarg1) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (bool)(arg1)->GetMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Init__SWIG_0(void * jarg1, float jarg2, void * jarg3, int jarg4, float jarg5) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  HConstFRSimpType **arg3 = (HConstFRSimpType **) 0 ;
  int arg4 ;
  float arg5 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (HConstFRSimpType **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Init(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Init__SWIG_1(void * jarg1, float jarg2, void * jarg3, int jarg4) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  HConstFRSimpType **arg3 = (HConstFRSimpType **) 0 ;
  int arg4 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (HConstFRSimpType **)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Init(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Init__SWIG_2(void * jarg1, float jarg2, void * jarg3) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  HConstFRSimpType **arg3 = (HConstFRSimpType **) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (HConstFRSimpType **)jarg3; 
  (arg1)->Init(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Init__SWIG_3(void * jarg1, float jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Init__SWIG_4(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Shutdown(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetActive(void * jarg1) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (bool)(arg1)->GetActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Watch(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->Watch();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Start(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_Stop(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_IncreaseDetailTemp(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->IncreaseDetailTemp();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_ViewpointHasChanged__SWIG_0(void * jarg1, bool jarg2) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->ViewpointHasChanged(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_ViewpointHasChanged__SWIG_1(void * jarg1) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (bool)(arg1)->ViewpointHasChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDetailIncMode(void * jarg1, int jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  DetailChangeMode arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (DetailChangeMode)jarg2; 
  (arg1)->SetDetailIncMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDetailIncOnIdleMode(void * jarg1, int jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  DetailChangeMode arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (DetailChangeMode)jarg2; 
  (arg1)->SetDetailIncOnIdleMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetDetailIncMode(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  DetailChangeMode result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (DetailChangeMode)(arg1)->GetDetailIncMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDetailDecMode(void * jarg1, int jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  DetailChangeMode arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (DetailChangeMode)jarg2; 
  (arg1)->SetDetailDecMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetDetailDecMode(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  DetailChangeMode result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (DetailChangeMode)(arg1)->GetDetailDecMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_ResetListPointers(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->ResetListPointers();
}


SWIGEXPORT float SWIGSTDCALL CSharp_HConstantFrameRate_GetTargetFrameRate(void * jarg1) {
  float jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (float)(arg1)->GetTargetFrameRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetTargetFrameRate(void * jarg1, float jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTargetFrameRate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDeadZone(void * jarg1, float jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  float arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetDeadZone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetEmergencyDetailDecrease(void * jarg1, bool jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEmergencyDetailDecrease(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetActivityType(void * jarg1, int jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HActivityType arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (HActivityType)jarg2; 
  (arg1)->SetActivityType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetActivityType(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  HActivityType result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (HActivityType)(arg1)->GetActivityType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetSimpLevel(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (int)(arg1)->GetSimpLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_AdjustLodOptions(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->AdjustLodOptions();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_GetDetailIncreaseState(void * jarg1) {
  bool jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (bool)(arg1)->GetDetailIncreaseState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDetailLevel(void * jarg1, int jarg2, int jarg3) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetDetailLevel(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HConstantFrameRate_GetSimpType(void * jarg1, int jarg2) {
  void * jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  ConstFRType arg2 ;
  HConstFRSimpType *result = 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (ConstFRType)jarg2; 
  result = (HConstFRSimpType *)(arg1)->GetSimpType(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetSimpLevel(void * jarg1, int jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSimpLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_AdjustDefaultDetailLevelToModel(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->AdjustDefaultDetailLevelToModel();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HConstantFrameRate_Tick(float jarg1, float jarg2, void * jarg3) {
  bool jresult ;
  float arg1 ;
  float arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3; 
  result = (bool)HConstantFrameRate::Tick(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetDisableIncreaseTemp(void * jarg1, bool jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisableIncreaseTemp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_InitiateDelay(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->InitiateDelay();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetDetailLevelNum(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (int)(arg1)->GetDetailLevelNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HConstantFrameRate_GetTotalDetailLevelNum(void * jarg1) {
  int jresult ;
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  int result;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  result = (int)(arg1)->GetTotalDetailLevelNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_SetWatchActivity(void * jarg1, bool jarg2) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  bool arg2 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetWatchActivity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_MajorDetailDecrease(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->MajorDetailDecrease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HConstantFrameRate_MajorDetailIncrease(void * jarg1) {
  HConstantFrameRate *arg1 = (HConstantFrameRate *) 0 ;
  
  arg1 = (HConstantFrameRate *)jarg1; 
  (arg1)->MajorDetailIncrease();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HDebugZBuffer(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HDebugZBuffer *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HDebugZBuffer *)new HDebugZBuffer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HDebugZBuffer(void * jarg1) {
  HDebugZBuffer *arg1 = (HDebugZBuffer *) 0 ;
  
  arg1 = (HDebugZBuffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDebugZBuffer_OpenglFinishPicture(void * jarg1, void * jarg2, bool jarg3) {
  HDebugZBuffer *arg1 = (HDebugZBuffer *) 0 ;
  HIC_Rendition *arg2 = (HIC_Rendition *) 0 ;
  bool arg3 ;
  
  arg1 = (HDebugZBuffer *)jarg1; 
  arg2 = (HIC_Rendition *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->OpenglFinishPicture((HIC_Rendition const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDebugZBuffer_Update(void * jarg1) {
  HDebugZBuffer *arg1 = (HDebugZBuffer *) 0 ;
  
  arg1 = (HDebugZBuffer *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDebugZBuffer_RegisterCallbacks() {
  HDebugZBuffer::RegisterCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HDebugZBuffer_ogl_finish_picture(void * jarg1, bool jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  bool arg2 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  HDebugZBuffer::ogl_finish_picture((HIC_Rendition const *)arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp__PI_get() {
  double jresult ;
  double result;
  
  result = (double) 3.14159265358979323;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HGraphAxis() {
  void * jresult ;
  HGraphAxis *result = 0 ;
  
  result = (HGraphAxis *)new HGraphAxis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_min_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_min_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_max_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_max_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_axis_scale_factor_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->axis_scale_factor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_axis_scale_factor_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->axis_scale_factor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_tick_frequency_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tick_frequency = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_tick_frequency_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->tick_frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_tick_size_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->tick_size = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_tick_size_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->tick_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_grid_frequency_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->grid_frequency = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_grid_frequency_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->grid_frequency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_grid_min_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->grid_min = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_grid_min_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->grid_min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_grid_max_set(void * jarg1, double jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->grid_max = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphAxis_grid_max_get(void * jarg1) {
  double jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  double result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (double) ((arg1)->grid_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_segment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphAxis_segment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result =  ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_precision_set(void * jarg1, int jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  int arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->precision = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HGraphAxis_precision_get(void * jarg1) {
  int jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  int result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (int) ((arg1)->precision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_axis_scale_set(void * jarg1, int jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  HGraphAxisScale arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = (HGraphAxisScale)jarg2; 
  if (arg1) (arg1)->axis_scale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HGraphAxis_axis_scale_get(void * jarg1) {
  int jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  HGraphAxisScale result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (HGraphAxisScale) ((arg1)->axis_scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_show_labels_set(void * jarg1, bool jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  bool arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show_labels = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HGraphAxis_show_labels_get(void * jarg1) {
  bool jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  bool result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (bool) ((arg1)->show_labels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphAxis_visible_set(void * jarg1, bool jarg2) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  bool arg2 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->visible = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HGraphAxis_visible_get(void * jarg1) {
  bool jresult ;
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  bool result;
  
  arg1 = (HGraphAxis *)jarg1; 
  result = (bool) ((arg1)->visible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HGraphAxis(void * jarg1) {
  HGraphAxis *arg1 = (HGraphAxis *) 0 ;
  
  arg1 = (HGraphAxis *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphLabelNode_segment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphLabelNode *arg1 = (HGraphLabelNode *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphLabelNode *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphLabelNode_segment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphLabelNode *arg1 = (HGraphLabelNode *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphLabelNode *)jarg1; 
  result =  ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphLabelNode_text_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphLabelNode *arg1 = (HGraphLabelNode *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphLabelNode *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->text_key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphLabelNode_text_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphLabelNode *arg1 = (HGraphLabelNode *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphLabelNode *)jarg1; 
  result =  ((arg1)->text_key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HGraphLabelNode() {
  void * jresult ;
  HGraphLabelNode *result = 0 ;
  
  result = (HGraphLabelNode *)new HGraphLabelNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HGraphLabelNode(void * jarg1) {
  HGraphLabelNode *arg1 = (HGraphLabelNode *) 0 ;
  
  arg1 = (HGraphLabelNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_bar_width_set(void * jarg1, double jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->bar_width = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphDataSetNode_bar_width_get(void * jarg1) {
  double jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  double result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (double) ((arg1)->bar_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_segment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphDataSetNode_segment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result =  ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_data_size_set(void * jarg1, int jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  int arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->data_size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HGraphDataSetNode_data_size_get(void * jarg1) {
  int jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  int result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (int) ((arg1)->data_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_format_set(void * jarg1, int jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  HGraphPointFormat arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = (HGraphPointFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HGraphDataSetNode_format_get(void * jarg1) {
  int jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  HGraphPointFormat result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (HGraphPointFormat) ((arg1)->format);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_line_vis_set(void * jarg1, bool jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->line_vis = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HGraphDataSetNode_line_vis_get(void * jarg1) {
  bool jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (bool) ((arg1)->line_vis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_bar_vis_set(void * jarg1, bool jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bar_vis = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HGraphDataSetNode_bar_vis_get(void * jarg1) {
  bool jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (bool) ((arg1)->bar_vis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphDataSetNode_polygon_vis_set(void * jarg1, bool jarg2) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool arg2 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->polygon_vis = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HGraphDataSetNode_polygon_vis_get(void * jarg1) {
  bool jresult ;
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  bool result;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  result = (bool) ((arg1)->polygon_vis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HGraphDataSetNode() {
  void * jresult ;
  HGraphDataSetNode *result = 0 ;
  
  result = (HGraphDataSetNode *)new HGraphDataSetNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HGraphDataSetNode(void * jarg1) {
  HGraphDataSetNode *arg1 = (HGraphDataSetNode *) 0 ;
  
  arg1 = (HGraphDataSetNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphPieSlice_amount_set(void * jarg1, double jarg2) {
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  double arg2 ;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_HGraphPieSlice_amount_get(void * jarg1) {
  double jresult ;
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  double result;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  result = (double) ((arg1)->amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphPieSlice_segment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphPieSlice_segment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  result =  ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphPieSlice_text_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->text_key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphPieSlice_text_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  result =  ((arg1)->text_key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HGraphPieSlice() {
  void * jresult ;
  HGraphPieSlice *result = 0 ;
  
  result = (HGraphPieSlice *)new HGraphPieSlice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HGraphPieSlice(void * jarg1) {
  HGraphPieSlice *arg1 = (HGraphPieSlice *) 0 ;
  
  arg1 = (HGraphPieSlice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HGraphLegend() {
  void * jresult ;
  HGraphLegend *result = 0 ;
  
  result = (HGraphLegend *)new HGraphLegend();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphLegend_segment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphLegend *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphLegend_segment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphLegend *)jarg1; 
  result =  ((arg1)->segment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphLegend_title_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HGraphLegend *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->title = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HGraphLegend_title_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  HC_KEY result;
  
  arg1 = (HGraphLegend *)jarg1; 
  result =  ((arg1)->title);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HGraphLegend_entries_set(void * jarg1, void * jarg2) {
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  VArray< HGraphLabelNode * > *arg2 = (VArray< HGraphLabelNode * > *) 0 ;
  
  arg1 = (HGraphLegend *)jarg1; 
  arg2 = (VArray< HGraphLabelNode * > *)jarg2; 
  if (arg1) (arg1)->entries = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HGraphLegend_entries_get(void * jarg1) {
  void * jresult ;
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  VArray< HGraphLabelNode * > *result = 0 ;
  
  arg1 = (HGraphLegend *)jarg1; 
  result = (VArray< HGraphLabelNode * > *)& ((arg1)->entries);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HGraphLegend(void * jarg1) {
  HGraphLegend *arg1 = (HGraphLegend *) 0 ;
  
  arg1 = (HGraphLegend *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBaseGraph(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetPlotTitle(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetPlotTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetPlotUnicodeTitle(void * jarg1, unsigned short * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->GetPlotUnicodeTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotTitle(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPlotTitle((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotUnicodeTitle(void * jarg1, unsigned short * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->SetPlotUnicodeTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetPlotTitleColor(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetPlotTitleColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotTitleColor(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPlotTitleColor((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetPlotTitleTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetPlotTitleTextFont(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotTitleTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPlotTitleTextFont((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseGraph_GetPlotTitleLocation(void * jarg1) {
  void * jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (arg1)->GetPlotTitleLocation();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotTitleLocation(void * jarg1, void * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPlotTitleLocation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseGraph_GetPlotOrigin(void * jarg1) {
  void * jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (arg1)->GetPlotOrigin();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetPlotOrigin(void * jarg1, void * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPlotOrigin(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseGraph_GetFrameVisibility(void * jarg1) {
  bool jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  bool result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (bool)(arg1)->GetFrameVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetFrameVisibility(void * jarg1, bool jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFrameVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetFramePattern(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetFramePattern(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetFramePattern(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFramePattern((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetFrameColor(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetFrameColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetFrameColor(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFrameColor((char const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBaseGraph_GetFrameWeight(void * jarg1) {
  float jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  float result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (float)(arg1)->GetFrameWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetFrameWeight(void * jarg1, float jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFrameWeight(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLabel__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, float jarg5, float jarg6, float jarg7) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (int)(arg1)->AddLabel((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLabel__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4, float jarg5, float jarg6) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  float arg6 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (int)(arg1)->AddLabel((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLabel__SWIG_2(void * jarg1, char * jarg2, void * jarg3, int jarg4, float jarg5) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->AddLabel((char const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLabel__SWIG_3(void * jarg1, char * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  result = (int)(arg1)->AddLabel((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLabel__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->AddLabel((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddUnicodeLabel__SWIG_0(void * jarg1, const unsigned short * jarg2, void * jarg3, int jarg4, float jarg5, float jarg6, float jarg7) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (int)(arg1)->AddUnicodeLabel((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddUnicodeLabel__SWIG_1(void * jarg1, const unsigned short * jarg2, void * jarg3, int jarg4, float jarg5, float jarg6) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  float arg6 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (int)(arg1)->AddUnicodeLabel((unsigned short const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddUnicodeLabel__SWIG_2(void * jarg1, const unsigned short * jarg2, void * jarg3, int jarg4, float jarg5) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  float arg5 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (float)jarg5; 
  result = (int)(arg1)->AddUnicodeLabel((unsigned short const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddUnicodeLabel__SWIG_3(void * jarg1, const unsigned short * jarg2, void * jarg3, int jarg4) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  result = (int)(arg1)->AddUnicodeLabel((unsigned short const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddUnicodeLabel__SWIG_4(void * jarg1, const unsigned short * jarg2, void * jarg3) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->AddUnicodeLabel((unsigned short const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_RemoveLabel(void * jarg1, int jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveLabel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelContents(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLabelContents(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelUnicodeContents(void * jarg1, int jarg2, unsigned short * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (arg1)->GetLabelUnicodeContents(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelContents(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLabelContents(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelUnicodeContents(void * jarg1, int jarg2, const unsigned short * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (arg1)->SetLabelUnicodeContents(arg2,(unsigned short const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLabelTextFont(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLabelTextFont(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelTextColor(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLabelTextColor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelTextColor(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLabelTextColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelTextAlignment(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLabelTextAlignment(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelTextAlignment(void * jarg1, int jarg2, char * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLabelTextAlignment(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelLocation__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  HPoint arg3 ;
  HGraphPointFormat arg4 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (HGraphPointFormat)jarg4; 
  (arg1)->SetLabelLocation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelLocation__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetLabelLocation(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseGraph_GetLabelLocation(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  HPoint result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetLabelLocation(arg2);
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLabelTextPath(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetLabelTextPath(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLabelTextPath(void * jarg1, int jarg2, float * jarg3, float * jarg4, float * jarg5) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->GetLabelTextPath(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_AddLegend__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HGraphPointFormat arg3 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (HGraphPointFormat)jarg3; 
  (arg1)->AddLegend(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_AddLegend__SWIG_1(void * jarg1, void * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddLegend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_RemoveLegend(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  (arg1)->RemoveLegend();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendTitle(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLegendTitle((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendTitle(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetLegendTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_RemoveLegendTitle(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  (arg1)->RemoveLegendTitle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendUnicodeTitle(void * jarg1, const unsigned short * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->SetLegendUnicodeTitle((unsigned short const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendUnicodeTitle(void * jarg1, unsigned short * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->GetLegendUnicodeTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendTitleTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLegendTitleTextFont((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendTitleTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetLegendTitleTextFont(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLegendTextFont((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendTextFont(void * jarg1, char * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetLegendTextFont(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLegendEntry__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HGraphLegendEntryType arg4 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HGraphLegendEntryType)jarg4; 
  result = (int)(arg1)->AddLegendEntry((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLegendEntry__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->AddLegendEntry((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLegendUnicodeEntry__SWIG_0(void * jarg1, const unsigned short * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  HGraphLegendEntryType arg4 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HGraphLegendEntryType)jarg4; 
  result = (int)(arg1)->AddLegendUnicodeEntry((unsigned short const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBaseGraph_AddLegendUnicodeEntry__SWIG_1(void * jarg1, const unsigned short * jarg2, char * jarg3) {
  int jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->AddLegendUnicodeEntry((unsigned short const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_RemoveLegendEntry(void * jarg1, int jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveLegendEntry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendEntry__SWIG_0(void * jarg1, int jarg2, char * jarg3, char * jarg4, void * jarg5) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HGraphLegendEntryType *arg5 = (HGraphLegendEntryType *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (HGraphLegendEntryType *)jarg5; 
  (arg1)->GetLegendEntry(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendEntry__SWIG_1(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->GetLegendEntry(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendUnicodeEntry__SWIG_0(void * jarg1, int jarg2, unsigned short * jarg3, char * jarg4, void * jarg5) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  char *arg4 = (char *) 0 ;
  HGraphLegendEntryType *arg5 = (HGraphLegendEntryType *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (HGraphLegendEntryType *)jarg5; 
  (arg1)->GetLegendUnicodeEntry(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_GetLegendUnicodeEntry__SWIG_1(void * jarg1, int jarg2, unsigned short * jarg3, char * jarg4) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->GetLegendUnicodeEntry(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendLocation__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HGraphPointFormat arg3 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (HGraphPointFormat)jarg3; 
  (arg1)->SetLegendLocation(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetLegendLocation__SWIG_1(void * jarg1, void * jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetLegendLocation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBaseGraph_GetLegendLocation(void * jarg1) {
  void * jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  HPoint result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (arg1)->GetLegendLocation();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_ConvertPoints(void * jarg1, unsigned int jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  unsigned int arg2 ;
  HPoint *arg3 ;
  HGraphPointFormat arg4 ;
  HPoint *arg5 ;
  HGraphPointFormat arg6 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (HPoint *)jarg5; 
  arg6 = (HGraphPointFormat)jarg6; 
  (arg1)->ConvertPoints(arg2,(HPoint const (*))arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_PreserveData__SWIG_0(void * jarg1, bool jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->PreserveData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_PreserveData__SWIG_1(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  (arg1)->PreserveData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetAutomaticUpdates__SWIG_0(void * jarg1, bool jarg2) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  bool arg2 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutomaticUpdates(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_SetAutomaticUpdates__SWIG_1(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  (arg1)->SetAutomaticUpdates();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBaseGraph_GetAutomaticUpdates(void * jarg1) {
  bool jresult ;
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  bool result;
  
  arg1 = (HBaseGraph *)jarg1; 
  result = (bool)(arg1)->GetAutomaticUpdates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBaseGraph_Update(void * jarg1) {
  HBaseGraph *arg1 = (HBaseGraph *) 0 ;
  
  arg1 = (HBaseGraph *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlot2D__SWIG_0(MVO_POINTER_SIZED_INT jarg1, int jarg2) {
  void * jresult ;
  HC_KEY arg1 ;
  HGraphPlotType arg2 ;
  HPlot2D *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HGraphPlotType)jarg2; 
  result = (HPlot2D *)new HPlot2D(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPlot2D__SWIG_1(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HPlot2D *result = 0 ;
  
  arg1 = jarg1; 
  result = (HPlot2D *)new HPlot2D(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPlot2D(void * jarg1) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPlotTitle(void * jarg1, char * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPlotTitle((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPlotUnicodeTitle(void * jarg1, unsigned short * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->SetPlotUnicodeTitle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetPlotType(void * jarg1) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphPlotType result;
  
  arg1 = (HPlot2D *)jarg1; 
  result = (HGraphPlotType)(arg1)->GetPlotType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPlotOrigin(void * jarg1, void * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HPlot2D *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPlotOrigin(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetGridType(void * jarg1) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphGridType result;
  
  arg1 = (HPlot2D *)jarg1; 
  result = (HGraphGridType)(arg1)->GetGridType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetGridType(void * jarg1, int jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphGridType arg2 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphGridType)jarg2; 
  (arg1)->SetGridType(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetGridVisibility(void * jarg1) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  result = (bool)(arg1)->GetGridVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetGridVisibility(void * jarg1, bool jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  bool arg2 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGridVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetGridPattern(void * jarg1, char * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetGridPattern(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetGridPattern(void * jarg1, char * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetGridPattern((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetGridColor(void * jarg1, char * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetGridColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetGridColor(void * jarg1, char * jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetGridColor((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetAxisScale__SWIG_0(void * jarg1, int jarg2, double * jarg3) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double *arg3 = (double *) 0 ;
  HGraphAxisScale result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double *)jarg3; 
  result = (HGraphAxisScale)(arg1)->GetAxisScale(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetAxisScale__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  HGraphAxisScale result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (HGraphAxisScale)(arg1)->GetAxisScale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisScale__SWIG_0(void * jarg1, int jarg2, int jarg3, double jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  HGraphAxisScale arg3 ;
  double arg4 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (HGraphAxisScale)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetAxisScale(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisScale__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  HGraphAxisScale arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (HGraphAxisScale)jarg3; 
  (arg1)->SetAxisScale(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisRange(void * jarg1, int jarg2, double * jarg3, double * jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->GetAxisRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisRange(void * jarg1, int jarg2, double jarg3, double jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetAxisRange(arg2,arg3,arg4);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetAxisVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (bool)(arg1)->GetAxisVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAxisVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetAxisColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetAxisColor(arg2,(char const *)arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlot2D_GetAxisWeight(void * jarg1, int jarg2) {
  float jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  float result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (float)(arg1)->GetAxisWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisWeight(void * jarg1, int jarg2, float jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  float arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAxisWeight(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlot2D_GetAxisTickFrequency(void * jarg1, int jarg2) {
  double jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (double)(arg1)->GetAxisTickFrequency(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisTickFrequency(void * jarg1, int jarg2, double jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetAxisTickFrequency(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetAxisPrecision(void * jarg1, int jarg2) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  int result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (int)(arg1)->GetAxisPrecision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisPrecision(void * jarg1, int jarg2, int jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  int arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetAxisPrecision(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlot2D_GetAxisTickSize(void * jarg1, int jarg2) {
  double jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (double)(arg1)->GetAxisTickSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisTickSize(void * jarg1, int jarg2, double jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetAxisTickSize(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlot2D_GetAxisGridFrequency(void * jarg1, int jarg2) {
  double jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (double)(arg1)->GetAxisGridFrequency(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisGridFrequency(void * jarg1, int jarg2, double jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetAxisGridFrequency(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisGridRange(void * jarg1, int jarg2, double * jarg3, double * jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (double *)jarg4; 
  (arg1)->GetAxisGridRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisGridRange(void * jarg1, int jarg2, double jarg3, double jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->SetAxisGridRange(arg2,arg3,arg4);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetAxisLabelVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  result = (bool)(arg1)->GetAxisLabelVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisLabelVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAxisLabelVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetAxisLabelTextFont(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetAxisLabelTextFont(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisLabelTextColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetAxisLabelTextColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisLabelTextColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetAxisLabelTextColor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAxisLabelTextPath(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetAxisLabelTextPath(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetAxisLabelTextPath(void * jarg1, int jarg2, float * jarg3, float * jarg4, float * jarg5) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  HGraphAxisSelection arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (HGraphAxisSelection)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->GetAxisLabelTextPath(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_AddDataSet__SWIG_0(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  HGraphPointFormat arg4 ;
  HPoint *arg5 ;
  int result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HGraphPointFormat)jarg4; 
  arg5 = (HPoint *)jarg5; 
  result = (int)(arg1)->AddDataSet(arg2,(HPoint const (*))arg3,arg4,(HPoint const (*))arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_AddDataSet__SWIG_1(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  HGraphPointFormat arg4 ;
  int result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (HGraphPointFormat)jarg4; 
  result = (int)(arg1)->AddDataSet(arg2,(HPoint const (*))arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_AddDataSet__SWIG_2(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  int result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  result = (int)(arg1)->AddDataSet(arg2,(HPoint const (*))arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_RemoveDataSet(void * jarg1, int jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveDataSet(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetDataSetSize(void * jarg1, int jarg2) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetDataSetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPlot2D_GetDataSetFormat(void * jarg1, int jarg2) {
  int jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  HGraphPointFormat result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HGraphPointFormat)(arg1)->GetDataSetFormat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetDataSet(void * jarg1, int jarg2, void * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->GetDataSet(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_ReplaceDataSet__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  HGraphPointFormat arg5 ;
  HPoint *arg6 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HGraphPointFormat)jarg5; 
  arg6 = (HPoint *)jarg6; 
  (arg1)->ReplaceDataSet(arg2,arg3,(HPoint const (*))arg4,arg5,(HPoint const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_ReplaceDataSet__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, int jarg5) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  HGraphPointFormat arg5 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (HGraphPointFormat)jarg5; 
  (arg1)->ReplaceDataSet(arg2,arg3,(HPoint const (*))arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_ReplaceDataSet__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  (arg1)->ReplaceDataSet(arg2,arg3,(HPoint const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPointColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetPointColor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetPointColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetPointColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPointSymbol(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetPointSymbol(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetPointSymbol(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetPointSymbol(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPointSize(void * jarg1, int jarg2, double jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetPointSize(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlot2D_GetPointSize(void * jarg1, int jarg2) {
  float jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetPointSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetPointVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetPointVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPointVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPointVisibility(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetLineVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetLineVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetLineVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetLineVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetLinePattern(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLinePattern(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetLinePattern(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLinePattern(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetLineColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetLineColor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetLineColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetLineColor(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HPlot2D_GetLineWeight(void * jarg1, int jarg2) {
  float jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetLineWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetLineWeight(void * jarg1, int jarg2, float jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetLineWeight(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetBarVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetBarVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBarVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarColorMap(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetBarColorMap(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetBarColorMap(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetBarColorMap(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarColorMapByValue__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, char * jarg5) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SetBarColorMapByValue(arg2,arg3,(HPoint const (*))arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarColorMapByValue__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int arg3 ;
  HPoint *arg4 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  (arg1)->SetBarColorMapByValue(arg2,arg3,(HPoint const (*))arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetBarColorMapByValue(void * jarg1, int jarg2, int * jarg3, void * jarg4, char * jarg5) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  HPoint *arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->GetBarColorMapByValue(arg2,arg3,arg4,arg5);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlot2D_GetBarWidth(void * jarg1, int jarg2) {
  double jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->GetBarWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarWidth(void * jarg1, int jarg2, double jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetBarWidth(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetBarEdgeVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetBarEdgeVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetBarEdgeVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBarEdgeVisibility(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPlot2D_GetPolygonVisibility(void * jarg1, int jarg2) {
  bool jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->GetPolygonVisibility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPolygonVisibility(void * jarg1, int jarg2, bool jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPolygonVisibility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_GetPolygonColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetPolygonColor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetPolygonColor(void * jarg1, int jarg2, char * jarg3) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetPolygonColor(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_Update(void * jarg1) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPlot2D_GetAspectRatio(void * jarg1) {
  double jresult ;
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  double result;
  
  arg1 = (HPlot2D *)jarg1; 
  result = (double)(arg1)->GetAspectRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_SetAspectRatio(void * jarg1, double jarg2) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  double arg2 ;
  
  arg1 = (HPlot2D *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetAspectRatio(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPlot2D_UnSetAspectRatio(void * jarg1) {
  HPlot2D *arg1 = (HPlot2D *) 0 ;
  
  arg1 = (HPlot2D *)jarg1; 
  (arg1)->UnSetAspectRatio();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HPieChart(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HPieChart *result = 0 ;
  
  arg1 = jarg1; 
  result = (HPieChart *)new HPieChart(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HPieChart(void * jarg1) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPlotTitle(void * jarg1, char * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPlotTitle((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPlotUnicodeTitle(void * jarg1, unsigned short * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->SetPlotUnicodeTitle(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HPieChart_AddPieSlice(void * jarg1, double jarg2) {
  int jresult ;
  HPieChart *arg1 = (HPieChart *) 0 ;
  double arg2 ;
  int result;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->AddPieSlice(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_RemovePieSlice(void * jarg1, int jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemovePieSlice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieColorMap(void * jarg1, char * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPieColorMap((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieColorMap(void * jarg1, char * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetPieColorMap(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieColorMapByValue__SWIG_0(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SetPieColorMapByValue(arg2,(HPoint const (*))arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieColorMapByValue__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  HPoint *arg3 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->SetPieColorMapByValue(arg2,(HPoint const (*))arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieColorMapByValue(void * jarg1, int * jarg2, void * jarg3, char * jarg4) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int *arg2 = (int *) 0 ;
  HPoint *arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->GetPieColorMapByValue(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_AddPieSliceLabel(void * jarg1, int jarg2, char * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddPieSliceLabel(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_AddPieSliceUnicodeLabel(void * jarg1, int jarg2, const unsigned short * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (arg1)->AddPieSliceUnicodeLabel(arg2,(unsigned short const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_RemovePieSliceLabel(void * jarg1, int jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemovePieSliceLabel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieSliceLabelContents(void * jarg1, int jarg2, char * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetPieSliceLabelContents(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieSliceUnicodeLabelContents(void * jarg1, int jarg2, unsigned short * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (arg1)->GetPieSliceUnicodeLabelContents(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieSliceLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetPieSliceLabelTextFont(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieSliceLabelTextFont(void * jarg1, int jarg2, char * jarg3) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetPieSliceLabelTextFont(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HPieChart_GetPieEdgeVisibility(void * jarg1) {
  bool jresult ;
  HPieChart *arg1 = (HPieChart *) 0 ;
  bool result;
  
  arg1 = (HPieChart *)jarg1; 
  result = (bool)(arg1)->GetPieEdgeVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieEdgeVisibility(void * jarg1, bool jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  bool arg2 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPieEdgeVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_GetPieEdgeColor(void * jarg1, char * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->GetPieEdgeColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieEdgeColor(void * jarg1, char * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPieEdgeColor((char const *)arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_HPieChart_GetPieRadius(void * jarg1) {
  double jresult ;
  HPieChart *arg1 = (HPieChart *) 0 ;
  double result;
  
  arg1 = (HPieChart *)jarg1; 
  result = (double)(arg1)->GetPieRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPieRadius(void * jarg1, double jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  double arg2 ;
  
  arg1 = (HPieChart *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetPieRadius(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_SetPlotOrigin(void * jarg1, void * jarg2) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HPieChart *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPlotOrigin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HPieChart_Update(void * jarg1) {
  HPieChart *arg1 = (HPieChart *) 0 ;
  
  arg1 = (HPieChart *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectTranslate__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpObjectTranslate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpObjectTranslate *)new SwigDirector_HOpObjectTranslate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectTranslate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpObjectTranslate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpObjectTranslate *)new SwigDirector_HOpObjectTranslate(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectTranslate__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpObjectTranslate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpObjectTranslate *)new SwigDirector_HOpObjectTranslate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpObjectTranslate(void * jarg1) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectTranslate_GetName(void * jarg1) {
  char * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectTranslate_GetNameSwigExplicitHOpObjectTranslate(void * jarg1) {
  char * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (char *)(arg1)->HOpObjectTranslate::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDownSwigExplicitHOpObjectTranslate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectTranslate::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDownAndMoveSwigExplicitHOpObjectTranslate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectTranslate::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonUpSwigExplicitHOpObjectTranslate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectTranslate::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_OnLButtonDblClkSwigExplicitHOpObjectTranslate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectTranslate::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptRecent_set(void * jarg1, void * jarg2) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_ptRecent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptRecent_get(void * jarg1) {
  void * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (HPoint *)& ((arg1)->m_ptRecent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptRecentVP_set(void * jarg1, void * jarg2) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_ptRecentVP = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptRecentVP_get(void * jarg1) {
  void * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (HPoint *)& ((arg1)->m_ptRecentVP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectTranslate_Clone(void * jarg1) {
  void * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectTranslate_CloneSwigExplicitHOpObjectTranslate(void * jarg1) {
  void * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpObjectTranslate::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_Init(void * jarg1) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  (darg)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_Cleanup(void * jarg1) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  (darg)->Cleanup();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_GetMatrix(void * jarg1, void * jarg2, int jarg3, const MVO_POINTER_SIZED_INT * jarg4, float * jarg5) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 = (HC_KEY *) 0 ;
  float *arg5 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (float *)jarg5; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  result = (int)(darg)->GetMatrix(*arg2,arg3,(HC_KEY const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectTranslate_UpdateMousePos(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HEventInfo *arg2 = 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  int result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  result = (int)(darg)->UpdateMousePos(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_m_bTemporarySelection_set(void * jarg1, bool jarg2) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  if (arg1) darg->m_bTemporarySelection = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpObjectTranslate_m_bTemporarySelection_get(void * jarg1) {
  bool jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  bool result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  result = (bool) (darg->m_bTemporarySelection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_m_bInitialMatrix_set(void * jarg1, bool jarg2) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  if (arg1) darg->m_bInitialMatrix = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpObjectTranslate_m_bInitialMatrix_get(void * jarg1) {
  bool jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  bool result;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  result = (bool) (darg->m_bInitialMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptLast_set(void * jarg1, void * jarg2) {
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  if (arg1) darg->m_ptLast = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectTranslate_m_ptLast_get(void * jarg1) {
  void * jresult ;
  HOpObjectTranslate *arg1 = (HOpObjectTranslate *) 0 ;
  SwigDirector_HOpObjectTranslate *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectTranslate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectTranslate *>(arg1);
  result = (HPoint *)& (darg->m_ptLast);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectTranslate_director_connect(void *objarg, SwigDirector_HOpObjectTranslate::SWIG_Callback0_t callback0, SwigDirector_HOpObjectTranslate::SWIG_Callback1_t callback1, SwigDirector_HOpObjectTranslate::SWIG_Callback2_t callback2, SwigDirector_HOpObjectTranslate::SWIG_Callback3_t callback3, SwigDirector_HOpObjectTranslate::SWIG_Callback4_t callback4, SwigDirector_HOpObjectTranslate::SWIG_Callback5_t callback5, SwigDirector_HOpObjectTranslate::SWIG_Callback6_t callback6, SwigDirector_HOpObjectTranslate::SWIG_Callback7_t callback7, SwigDirector_HOpObjectTranslate::SWIG_Callback8_t callback8, SwigDirector_HOpObjectTranslate::SWIG_Callback9_t callback9, SwigDirector_HOpObjectTranslate::SWIG_Callback10_t callback10, SwigDirector_HOpObjectTranslate::SWIG_Callback11_t callback11, SwigDirector_HOpObjectTranslate::SWIG_Callback12_t callback12, SwigDirector_HOpObjectTranslate::SWIG_Callback13_t callback13, SwigDirector_HOpObjectTranslate::SWIG_Callback14_t callback14, SwigDirector_HOpObjectTranslate::SWIG_Callback15_t callback15, SwigDirector_HOpObjectTranslate::SWIG_Callback16_t callback16, SwigDirector_HOpObjectTranslate::SWIG_Callback17_t callback17, SwigDirector_HOpObjectTranslate::SWIG_Callback18_t callback18, SwigDirector_HOpObjectTranslate::SWIG_Callback19_t callback19, SwigDirector_HOpObjectTranslate::SWIG_Callback20_t callback20, SwigDirector_HOpObjectTranslate::SWIG_Callback21_t callback21, SwigDirector_HOpObjectTranslate::SWIG_Callback22_t callback22, SwigDirector_HOpObjectTranslate::SWIG_Callback23_t callback23, SwigDirector_HOpObjectTranslate::SWIG_Callback24_t callback24, SwigDirector_HOpObjectTranslate::SWIG_Callback25_t callback25) {
  HOpObjectTranslate *obj = (HOpObjectTranslate *)objarg;
  SwigDirector_HOpObjectTranslate *director = dynamic_cast<SwigDirector_HOpObjectTranslate *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCircle__SWIG_0(void * jarg1, int jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  HOpConstructCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HOpConstructCircle *)new SwigDirector_HOpConstructCircle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCircle__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructCircle *)new SwigDirector_HOpConstructCircle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCircle__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructCircle *)new SwigDirector_HOpConstructCircle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCircle__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructCircle *)new SwigDirector_HOpConstructCircle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructCircle(void * jarg1) {
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCircle_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCircle_GetNameSwigExplicitHOpConstructCircle(void * jarg1) {
  char * jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  result = (char *)(arg1)->HOpConstructCircle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonDownSwigExplicitHOpConstructCircle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCircle::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonDownAndMoveSwigExplicitHOpConstructCircle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCircle::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCircle_OnLButtonUpSwigExplicitHOpConstructCircle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCircle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCircle_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCircle_CloneSwigExplicitHOpConstructCircle(void * jarg1) {
  void * jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructCircle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCircle_m_radius_set(void * jarg1, float jarg2) {
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructCircle *darg = 0;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCircle *>(arg1);
  if (arg1) darg->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructCircle_m_radius_get(void * jarg1) {
  float jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  SwigDirector_HOpConstructCircle *darg = 0;
  float result;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCircle *>(arg1);
  result = (float) (darg->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCircle_m_ptCircle_set(void * jarg1, void * jarg2) {
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  HPoint *arg2 ;
  SwigDirector_HOpConstructCircle *darg = 0;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCircle *>(arg1);
  {
    size_t ii;
    HPoint *b = (HPoint *) darg->m_ptCircle;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((HPoint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCircle_m_ptCircle_get(void * jarg1) {
  void * jresult ;
  HOpConstructCircle *arg1 = (HOpConstructCircle *) 0 ;
  SwigDirector_HOpConstructCircle *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructCircle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCircle *>(arg1);
  result = (HPoint *)(HPoint *) (darg->m_ptCircle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCircle_director_connect(void *objarg, SwigDirector_HOpConstructCircle::SWIG_Callback0_t callback0, SwigDirector_HOpConstructCircle::SWIG_Callback1_t callback1, SwigDirector_HOpConstructCircle::SWIG_Callback2_t callback2, SwigDirector_HOpConstructCircle::SWIG_Callback3_t callback3, SwigDirector_HOpConstructCircle::SWIG_Callback4_t callback4, SwigDirector_HOpConstructCircle::SWIG_Callback5_t callback5, SwigDirector_HOpConstructCircle::SWIG_Callback6_t callback6, SwigDirector_HOpConstructCircle::SWIG_Callback7_t callback7, SwigDirector_HOpConstructCircle::SWIG_Callback8_t callback8, SwigDirector_HOpConstructCircle::SWIG_Callback9_t callback9, SwigDirector_HOpConstructCircle::SWIG_Callback10_t callback10, SwigDirector_HOpConstructCircle::SWIG_Callback11_t callback11, SwigDirector_HOpConstructCircle::SWIG_Callback12_t callback12, SwigDirector_HOpConstructCircle::SWIG_Callback13_t callback13, SwigDirector_HOpConstructCircle::SWIG_Callback14_t callback14, SwigDirector_HOpConstructCircle::SWIG_Callback15_t callback15, SwigDirector_HOpConstructCircle::SWIG_Callback16_t callback16, SwigDirector_HOpConstructCircle::SWIG_Callback17_t callback17, SwigDirector_HOpConstructCircle::SWIG_Callback18_t callback18, SwigDirector_HOpConstructCircle::SWIG_Callback19_t callback19, SwigDirector_HOpConstructCircle::SWIG_Callback20_t callback20, SwigDirector_HOpConstructCircle::SWIG_Callback21_t callback21, SwigDirector_HOpConstructCircle::SWIG_Callback22_t callback22, SwigDirector_HOpConstructCircle::SWIG_Callback23_t callback23, SwigDirector_HOpConstructCircle::SWIG_Callback24_t callback24, SwigDirector_HOpConstructCircle::SWIG_Callback25_t callback25) {
  HOpConstructCircle *obj = (HOpConstructCircle *)objarg;
  SwigDirector_HOpConstructCircle *director = dynamic_cast<SwigDirector_HOpConstructCircle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCone_m_height_set(void * jarg1, float jarg2) {
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructCone *darg = 0;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  if (arg1) darg->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructCone_m_height_get(void * jarg1) {
  float jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  SwigDirector_HOpConstructCone *darg = 0;
  float result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  result = (float) (darg->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCone_m_RadiusLength_set(void * jarg1, float jarg2) {
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructCone *darg = 0;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  if (arg1) darg->m_RadiusLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructCone_m_RadiusLength_get(void * jarg1) {
  float jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  SwigDirector_HOpConstructCone *darg = 0;
  float result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  result = (float) (darg->m_RadiusLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCone_m_WorldRadiusVector_set(void * jarg1, void * jarg2) {
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  SwigDirector_HOpConstructCone *darg = 0;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HVector *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  if (arg1) darg->m_WorldRadiusVector = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCone_m_WorldRadiusVector_get(void * jarg1) {
  void * jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  SwigDirector_HOpConstructCone *darg = 0;
  HVector *result = 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  result = (HVector *)& (darg->m_WorldRadiusVector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCone_ConstructWireframeCone(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HPoint arg2 ;
  float arg3 ;
  float arg4 ;
  HPoint *argp2 ;
  SwigDirector_HOpConstructCone *darg = 0;
  
  arg1 = (HOpConstructCone *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  darg = dynamic_cast<SwigDirector_HOpConstructCone *>(arg1);
  (darg)->ConstructWireframeCone(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCone__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructCone *)new SwigDirector_HOpConstructCone(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCone__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructCone *)new SwigDirector_HOpConstructCone(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCone__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructCone *)new SwigDirector_HOpConstructCone(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructCone(void * jarg1) {
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCone_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCone_GetNameSwigExplicitHOpConstructCone(void * jarg1) {
  char * jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  result = (char *)(arg1)->HOpConstructCone::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonDownSwigExplicitHOpConstructCone(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCone::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnNoButtonDownAndMoveSwigExplicitHOpConstructCone(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCone::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonDownAndMoveSwigExplicitHOpConstructCone(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCone::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCone_OnLButtonUpSwigExplicitHOpConstructCone(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCone::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCone_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCone_CloneSwigExplicitHOpConstructCone(void * jarg1) {
  void * jresult ;
  HOpConstructCone *arg1 = (HOpConstructCone *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCone *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructCone::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCone_director_connect(void *objarg, SwigDirector_HOpConstructCone::SWIG_Callback0_t callback0, SwigDirector_HOpConstructCone::SWIG_Callback1_t callback1, SwigDirector_HOpConstructCone::SWIG_Callback2_t callback2, SwigDirector_HOpConstructCone::SWIG_Callback3_t callback3, SwigDirector_HOpConstructCone::SWIG_Callback4_t callback4, SwigDirector_HOpConstructCone::SWIG_Callback5_t callback5, SwigDirector_HOpConstructCone::SWIG_Callback6_t callback6, SwigDirector_HOpConstructCone::SWIG_Callback7_t callback7, SwigDirector_HOpConstructCone::SWIG_Callback8_t callback8, SwigDirector_HOpConstructCone::SWIG_Callback9_t callback9, SwigDirector_HOpConstructCone::SWIG_Callback10_t callback10, SwigDirector_HOpConstructCone::SWIG_Callback11_t callback11, SwigDirector_HOpConstructCone::SWIG_Callback12_t callback12, SwigDirector_HOpConstructCone::SWIG_Callback13_t callback13, SwigDirector_HOpConstructCone::SWIG_Callback14_t callback14, SwigDirector_HOpConstructCone::SWIG_Callback15_t callback15, SwigDirector_HOpConstructCone::SWIG_Callback16_t callback16, SwigDirector_HOpConstructCone::SWIG_Callback17_t callback17, SwigDirector_HOpConstructCone::SWIG_Callback18_t callback18, SwigDirector_HOpConstructCone::SWIG_Callback19_t callback19, SwigDirector_HOpConstructCone::SWIG_Callback20_t callback20, SwigDirector_HOpConstructCone::SWIG_Callback21_t callback21, SwigDirector_HOpConstructCone::SWIG_Callback22_t callback22, SwigDirector_HOpConstructCone::SWIG_Callback23_t callback23, SwigDirector_HOpConstructCone::SWIG_Callback24_t callback24, SwigDirector_HOpConstructCone::SWIG_Callback25_t callback25) {
  HOpConstructCone *obj = (HOpConstructCone *)objarg;
  SwigDirector_HOpConstructCone *director = dynamic_cast<SwigDirector_HOpConstructCone *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_m_ptEdge_set(void * jarg1, void * jarg2) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  if (arg1) darg->m_ptEdge = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCuboid_m_ptEdge_get(void * jarg1) {
  void * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  result = (HPoint *)& (darg->m_ptEdge);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_m_ptPointList_set(void * jarg1, void * jarg2) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  {
    size_t ii;
    HPoint *b = (HPoint *) darg->m_ptPointList;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((HPoint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCuboid_m_ptPointList_get(void * jarg1) {
  void * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  result = (HPoint *)(HPoint *) (darg->m_ptPointList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_m_FaceList_set(void * jarg1, void * jarg2) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  int *arg2 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (int *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  {
    size_t ii;
    int *b = (int *) darg->m_FaceList;
    for (ii = 0; ii < (size_t)30; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCuboid_m_FaceList_get(void * jarg1) {
  void * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  SwigDirector_HOpConstructCuboid *darg = 0;
  int *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCuboid *>(arg1);
  result = (int *)(int *) (darg->m_FaceList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCuboid__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructCuboid *)new SwigDirector_HOpConstructCuboid(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCuboid__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructCuboid *)new SwigDirector_HOpConstructCuboid(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCuboid__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructCuboid *)new SwigDirector_HOpConstructCuboid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructCuboid(void * jarg1) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCuboid_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCuboid_GetNameSwigExplicitHOpConstructCuboid(void * jarg1) {
  char * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  result = (char *)(arg1)->HOpConstructCuboid::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonDownSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCuboid::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnNoButtonDownAndMoveSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCuboid::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonDownAndMoveSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCuboid::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCuboid_OnLButtonUpSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCuboid::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_CreateCuboid(void * jarg1, void * jarg2) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->CreateCuboid((HPoint const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_CreateCuboidSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->HOpConstructCuboid::CreateCuboid((HPoint const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_CreateSquare(void * jarg1, void * jarg2, void * jarg3) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->CreateSquare((HPoint const &)*arg2,(HPoint const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_CreateSquareSwigExplicitHOpConstructCuboid(void * jarg1, void * jarg2, void * jarg3) {
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->HOpConstructCuboid::CreateSquare((HPoint const &)*arg2,(HPoint const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCuboid_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCuboid_CloneSwigExplicitHOpConstructCuboid(void * jarg1) {
  void * jresult ;
  HOpConstructCuboid *arg1 = (HOpConstructCuboid *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCuboid *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructCuboid::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCuboid_director_connect(void *objarg, SwigDirector_HOpConstructCuboid::SWIG_Callback0_t callback0, SwigDirector_HOpConstructCuboid::SWIG_Callback1_t callback1, SwigDirector_HOpConstructCuboid::SWIG_Callback2_t callback2, SwigDirector_HOpConstructCuboid::SWIG_Callback3_t callback3, SwigDirector_HOpConstructCuboid::SWIG_Callback4_t callback4, SwigDirector_HOpConstructCuboid::SWIG_Callback5_t callback5, SwigDirector_HOpConstructCuboid::SWIG_Callback6_t callback6, SwigDirector_HOpConstructCuboid::SWIG_Callback7_t callback7, SwigDirector_HOpConstructCuboid::SWIG_Callback8_t callback8, SwigDirector_HOpConstructCuboid::SWIG_Callback9_t callback9, SwigDirector_HOpConstructCuboid::SWIG_Callback10_t callback10, SwigDirector_HOpConstructCuboid::SWIG_Callback11_t callback11, SwigDirector_HOpConstructCuboid::SWIG_Callback12_t callback12, SwigDirector_HOpConstructCuboid::SWIG_Callback13_t callback13, SwigDirector_HOpConstructCuboid::SWIG_Callback14_t callback14, SwigDirector_HOpConstructCuboid::SWIG_Callback15_t callback15, SwigDirector_HOpConstructCuboid::SWIG_Callback16_t callback16, SwigDirector_HOpConstructCuboid::SWIG_Callback17_t callback17, SwigDirector_HOpConstructCuboid::SWIG_Callback18_t callback18, SwigDirector_HOpConstructCuboid::SWIG_Callback19_t callback19, SwigDirector_HOpConstructCuboid::SWIG_Callback20_t callback20, SwigDirector_HOpConstructCuboid::SWIG_Callback21_t callback21, SwigDirector_HOpConstructCuboid::SWIG_Callback22_t callback22, SwigDirector_HOpConstructCuboid::SWIG_Callback23_t callback23, SwigDirector_HOpConstructCuboid::SWIG_Callback24_t callback24, SwigDirector_HOpConstructCuboid::SWIG_Callback25_t callback25, SwigDirector_HOpConstructCuboid::SWIG_Callback26_t callback26, SwigDirector_HOpConstructCuboid::SWIG_Callback27_t callback27) {
  HOpConstructCuboid *obj = (HOpConstructCuboid *)objarg;
  SwigDirector_HOpConstructCuboid *director = dynamic_cast<SwigDirector_HOpConstructCuboid *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCylinder_m_height_set(void * jarg1, float jarg2) {
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  if (arg1) darg->m_height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructCylinder_m_height_get(void * jarg1) {
  float jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  float result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  result = (float) (darg->m_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCylinder_m_RadiusLength_set(void * jarg1, float jarg2) {
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  if (arg1) darg->m_RadiusLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructCylinder_m_RadiusLength_get(void * jarg1) {
  float jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  float result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  result = (float) (darg->m_RadiusLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCylinder_m_WorldRadiusVector_set(void * jarg1, void * jarg2) {
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HVector *arg2 = (HVector *) 0 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HVector *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  if (arg1) darg->m_WorldRadiusVector = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCylinder_m_WorldRadiusVector_get(void * jarg1) {
  void * jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  HVector *result = 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  result = (HVector *)& (darg->m_WorldRadiusVector);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCylinder_ConstructWireframeCylinder(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HPoint arg2 ;
  float arg3 ;
  float arg4 ;
  HPoint *argp2 ;
  SwigDirector_HOpConstructCylinder *darg = 0;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  darg = dynamic_cast<SwigDirector_HOpConstructCylinder *>(arg1);
  (darg)->ConstructWireframeCylinder(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCylinder__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructCylinder *)new SwigDirector_HOpConstructCylinder(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCylinder__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructCylinder *)new SwigDirector_HOpConstructCylinder(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructCylinder__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructCylinder *)new SwigDirector_HOpConstructCylinder(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructCylinder(void * jarg1) {
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCylinder_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructCylinder_GetNameSwigExplicitHOpConstructCylinder(void * jarg1) {
  char * jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  result = (char *)(arg1)->HOpConstructCylinder::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonDownSwigExplicitHOpConstructCylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCylinder::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnNoButtonDownAndMoveSwigExplicitHOpConstructCylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCylinder::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonDownAndMoveSwigExplicitHOpConstructCylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCylinder::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructCylinder_OnLButtonUpSwigExplicitHOpConstructCylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructCylinder::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCylinder_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructCylinder_CloneSwigExplicitHOpConstructCylinder(void * jarg1) {
  void * jresult ;
  HOpConstructCylinder *arg1 = (HOpConstructCylinder *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructCylinder *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructCylinder::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructCylinder_director_connect(void *objarg, SwigDirector_HOpConstructCylinder::SWIG_Callback0_t callback0, SwigDirector_HOpConstructCylinder::SWIG_Callback1_t callback1, SwigDirector_HOpConstructCylinder::SWIG_Callback2_t callback2, SwigDirector_HOpConstructCylinder::SWIG_Callback3_t callback3, SwigDirector_HOpConstructCylinder::SWIG_Callback4_t callback4, SwigDirector_HOpConstructCylinder::SWIG_Callback5_t callback5, SwigDirector_HOpConstructCylinder::SWIG_Callback6_t callback6, SwigDirector_HOpConstructCylinder::SWIG_Callback7_t callback7, SwigDirector_HOpConstructCylinder::SWIG_Callback8_t callback8, SwigDirector_HOpConstructCylinder::SWIG_Callback9_t callback9, SwigDirector_HOpConstructCylinder::SWIG_Callback10_t callback10, SwigDirector_HOpConstructCylinder::SWIG_Callback11_t callback11, SwigDirector_HOpConstructCylinder::SWIG_Callback12_t callback12, SwigDirector_HOpConstructCylinder::SWIG_Callback13_t callback13, SwigDirector_HOpConstructCylinder::SWIG_Callback14_t callback14, SwigDirector_HOpConstructCylinder::SWIG_Callback15_t callback15, SwigDirector_HOpConstructCylinder::SWIG_Callback16_t callback16, SwigDirector_HOpConstructCylinder::SWIG_Callback17_t callback17, SwigDirector_HOpConstructCylinder::SWIG_Callback18_t callback18, SwigDirector_HOpConstructCylinder::SWIG_Callback19_t callback19, SwigDirector_HOpConstructCylinder::SWIG_Callback20_t callback20, SwigDirector_HOpConstructCylinder::SWIG_Callback21_t callback21, SwigDirector_HOpConstructCylinder::SWIG_Callback22_t callback22, SwigDirector_HOpConstructCylinder::SWIG_Callback23_t callback23, SwigDirector_HOpConstructCylinder::SWIG_Callback24_t callback24, SwigDirector_HOpConstructCylinder::SWIG_Callback25_t callback25) {
  HOpConstructCylinder *obj = (HOpConstructCylinder *)objarg;
  SwigDirector_HOpConstructCylinder *director = dynamic_cast<SwigDirector_HOpConstructCylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructPolyline__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructPolyline *)new SwigDirector_HOpConstructPolyline(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructPolyline__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructPolyline *)new SwigDirector_HOpConstructPolyline(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructPolyline__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructPolyline *)new SwigDirector_HOpConstructPolyline(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructPolyline(void * jarg1) {
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructPolyline_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructPolyline_CloneSwigExplicitHOpConstructPolyline(void * jarg1) {
  void * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructPolyline::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructPolyline_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructPolyline_GetNameSwigExplicitHOpConstructPolyline(void * jarg1) {
  char * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  result = (char *)(arg1)->HOpConstructPolyline::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructPolyline_m_PolylineKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_PolylineKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpConstructPolyline_m_PolylineKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HC_KEY result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  result =  ((arg1)->m_PolylineKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnNoButtonDownAndMoveSwigExplicitHOpConstructPolyline(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructPolyline::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnLButtonDownSwigExplicitHOpConstructPolyline(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructPolyline::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_OnLButtonDblClkSwigExplicitHOpConstructPolyline(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructPolyline::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructPolyline_m_ptLast_set(void * jarg1, void * jarg2) {
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  if (arg1) darg->m_ptLast = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructPolyline_m_ptLast_get(void * jarg1) {
  void * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  result = (HPoint *)& (darg->m_ptLast);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructPolyline_m_pPolyline_set(void * jarg1, void * jarg2) {
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  if (arg1) darg->m_pPolyline = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructPolyline_m_pPolyline_get(void * jarg1) {
  void * jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  result = (HPoint *) (darg->m_pPolyline);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructPolyline_m_PolylineCount_set(void * jarg1, int jarg2) {
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  int arg2 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  if (arg1) darg->m_PolylineCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructPolyline_m_PolylineCount_get(void * jarg1) {
  int jresult ;
  HOpConstructPolyline *arg1 = (HOpConstructPolyline *) 0 ;
  SwigDirector_HOpConstructPolyline *darg = 0;
  int result;
  
  arg1 = (HOpConstructPolyline *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructPolyline *>(arg1);
  result = (int) (darg->m_PolylineCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructPolyline_director_connect(void *objarg, SwigDirector_HOpConstructPolyline::SWIG_Callback0_t callback0, SwigDirector_HOpConstructPolyline::SWIG_Callback1_t callback1, SwigDirector_HOpConstructPolyline::SWIG_Callback2_t callback2, SwigDirector_HOpConstructPolyline::SWIG_Callback3_t callback3, SwigDirector_HOpConstructPolyline::SWIG_Callback4_t callback4, SwigDirector_HOpConstructPolyline::SWIG_Callback5_t callback5, SwigDirector_HOpConstructPolyline::SWIG_Callback6_t callback6, SwigDirector_HOpConstructPolyline::SWIG_Callback7_t callback7, SwigDirector_HOpConstructPolyline::SWIG_Callback8_t callback8, SwigDirector_HOpConstructPolyline::SWIG_Callback9_t callback9, SwigDirector_HOpConstructPolyline::SWIG_Callback10_t callback10, SwigDirector_HOpConstructPolyline::SWIG_Callback11_t callback11, SwigDirector_HOpConstructPolyline::SWIG_Callback12_t callback12, SwigDirector_HOpConstructPolyline::SWIG_Callback13_t callback13, SwigDirector_HOpConstructPolyline::SWIG_Callback14_t callback14, SwigDirector_HOpConstructPolyline::SWIG_Callback15_t callback15, SwigDirector_HOpConstructPolyline::SWIG_Callback16_t callback16, SwigDirector_HOpConstructPolyline::SWIG_Callback17_t callback17, SwigDirector_HOpConstructPolyline::SWIG_Callback18_t callback18, SwigDirector_HOpConstructPolyline::SWIG_Callback19_t callback19, SwigDirector_HOpConstructPolyline::SWIG_Callback20_t callback20, SwigDirector_HOpConstructPolyline::SWIG_Callback21_t callback21, SwigDirector_HOpConstructPolyline::SWIG_Callback22_t callback22, SwigDirector_HOpConstructPolyline::SWIG_Callback23_t callback23, SwigDirector_HOpConstructPolyline::SWIG_Callback24_t callback24, SwigDirector_HOpConstructPolyline::SWIG_Callback25_t callback25) {
  HOpConstructPolyline *obj = (HOpConstructPolyline *)objarg;
  SwigDirector_HOpConstructPolyline *director = dynamic_cast<SwigDirector_HOpConstructPolyline *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_Degree_set(void * jarg1, int jarg2) {
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  int arg2 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  if (arg1) darg->m_Degree = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_Degree_get(void * jarg1) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (int) (darg->m_Degree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_WeightsArray_get(void * jarg1) {
  float * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  float *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (float *) (darg->m_WeightsArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_KnotsArray_get(void * jarg1) {
  float * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  float *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (float *) (darg->m_KnotsArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_StartU_set(void * jarg1, int jarg2) {
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  int arg2 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  if (arg1) darg->m_StartU = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_StartU_get(void * jarg1) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (int) (darg->m_StartU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_EndU_set(void * jarg1, int jarg2) {
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  int arg2 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  if (arg1) darg->m_EndU = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_EndU_get(void * jarg1) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (int) (darg->m_EndU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_bFirstTimeThrough_set(void * jarg1, bool jarg2) {
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  bool arg2 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  if (arg1) darg->m_bFirstTimeThrough = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpConstructNurbsCurve_m_bFirstTimeThrough_get(void * jarg1) {
  bool jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  SwigDirector_HOpConstructNurbsCurve *darg = 0;
  bool result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(arg1);
  result = (bool) (darg->m_bFirstTimeThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructNurbsCurve__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructNurbsCurve *)new SwigDirector_HOpConstructNurbsCurve(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructNurbsCurve__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructNurbsCurve *)new SwigDirector_HOpConstructNurbsCurve(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructNurbsCurve__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructNurbsCurve *)new SwigDirector_HOpConstructNurbsCurve(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructNurbsCurve(void * jarg1) {
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_CloneSwigExplicitHOpConstructNurbsCurve(void * jarg1) {
  void * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructNurbsCurve::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructNurbsCurve_GetNameSwigExplicitHOpConstructNurbsCurve(void * jarg1) {
  char * jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  result = (char *)(arg1)->HOpConstructNurbsCurve::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnNoButtonDownAndMoveSwigExplicitHOpConstructNurbsCurve(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructNurbsCurve::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnLButtonDownSwigExplicitHOpConstructNurbsCurve(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructNurbsCurve::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnLButtonDblClkSwigExplicitHOpConstructNurbsCurve(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructNurbsCurve::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnMButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructNurbsCurve_OnMButtonDownSwigExplicitHOpConstructNurbsCurve(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructNurbsCurve *arg1 = (HOpConstructNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructNurbsCurve::OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructNurbsCurve_director_connect(void *objarg, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback0_t callback0, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback1_t callback1, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback2_t callback2, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback3_t callback3, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback4_t callback4, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback5_t callback5, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback6_t callback6, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback7_t callback7, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback8_t callback8, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback9_t callback9, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback10_t callback10, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback11_t callback11, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback12_t callback12, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback13_t callback13, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback14_t callback14, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback15_t callback15, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback16_t callback16, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback17_t callback17, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback18_t callback18, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback19_t callback19, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback20_t callback20, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback21_t callback21, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback22_t callback22, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback23_t callback23, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback24_t callback24, SwigDirector_HOpConstructNurbsCurve::SWIG_Callback25_t callback25) {
  HOpConstructNurbsCurve *obj = (HOpConstructNurbsCurve *)objarg;
  SwigDirector_HOpConstructNurbsCurve *director = dynamic_cast<SwigDirector_HOpConstructNurbsCurve *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructRectangle__SWIG_0(void * jarg1, int jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  HOpConstructRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HOpConstructRectangle *)new SwigDirector_HOpConstructRectangle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructRectangle__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructRectangle *)new SwigDirector_HOpConstructRectangle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructRectangle__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructRectangle *)new SwigDirector_HOpConstructRectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructRectangle__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructRectangle *)new SwigDirector_HOpConstructRectangle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructRectangle(void * jarg1) {
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructRectangle_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructRectangle_GetNameSwigExplicitHOpConstructRectangle(void * jarg1) {
  char * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  result = (char *)(arg1)->HOpConstructRectangle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructRectangle_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructRectangle_CloneSwigExplicitHOpConstructRectangle(void * jarg1) {
  void * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructRectangle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonDownSwigExplicitHOpConstructRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructRectangle::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonDownAndMoveSwigExplicitHOpConstructRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructRectangle::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnLButtonUpSwigExplicitHOpConstructRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructRectangle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnRButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructRectangle_OnRButtonUpSwigExplicitHOpConstructRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructRectangle::OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructRectangle_m_bRectangleExists_set(void * jarg1, bool jarg2) {
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  bool arg2 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  if (arg1) darg->m_bRectangleExists = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpConstructRectangle_m_bRectangleExists_get(void * jarg1) {
  bool jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  bool result;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  result = (bool) (darg->m_bRectangleExists);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructRectangle_m_ptRectangle_set(void * jarg1, void * jarg2) {
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  HPoint *arg2 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  {
    size_t ii;
    HPoint *b = (HPoint *) darg->m_ptRectangle;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((HPoint *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructRectangle_m_ptRectangle_get(void * jarg1) {
  void * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  result = (HPoint *)(HPoint *) (darg->m_ptRectangle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructRectangle_m_pSavedVisibility_set(void * jarg1, char * jarg2) {
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  char *arg2 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  {
    if(arg2) {
      strncpy((char*)darg->m_pSavedVisibility, (const char *)arg2, 4096-1);
      darg->m_pSavedVisibility[4096-1] = 0;
    } else {
      darg->m_pSavedVisibility[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructRectangle_m_pSavedVisibility_get(void * jarg1) {
  char * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  char *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  result = (char *)(char *) (darg->m_pSavedVisibility);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructRectangle_m_pSavedColor_set(void * jarg1, char * jarg2) {
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  char *arg2 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  {
    if(arg2) {
      strncpy((char*)darg->m_pSavedColor, (const char *)arg2, 4096-1);
      darg->m_pSavedColor[4096-1] = 0;
    } else {
      darg->m_pSavedColor[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructRectangle_m_pSavedColor_get(void * jarg1) {
  char * jresult ;
  HOpConstructRectangle *arg1 = (HOpConstructRectangle *) 0 ;
  SwigDirector_HOpConstructRectangle *darg = 0;
  char *result = 0 ;
  
  arg1 = (HOpConstructRectangle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructRectangle *>(arg1);
  result = (char *)(char *) (darg->m_pSavedColor);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructRectangle_director_connect(void *objarg, SwigDirector_HOpConstructRectangle::SWIG_Callback0_t callback0, SwigDirector_HOpConstructRectangle::SWIG_Callback1_t callback1, SwigDirector_HOpConstructRectangle::SWIG_Callback2_t callback2, SwigDirector_HOpConstructRectangle::SWIG_Callback3_t callback3, SwigDirector_HOpConstructRectangle::SWIG_Callback4_t callback4, SwigDirector_HOpConstructRectangle::SWIG_Callback5_t callback5, SwigDirector_HOpConstructRectangle::SWIG_Callback6_t callback6, SwigDirector_HOpConstructRectangle::SWIG_Callback7_t callback7, SwigDirector_HOpConstructRectangle::SWIG_Callback8_t callback8, SwigDirector_HOpConstructRectangle::SWIG_Callback9_t callback9, SwigDirector_HOpConstructRectangle::SWIG_Callback10_t callback10, SwigDirector_HOpConstructRectangle::SWIG_Callback11_t callback11, SwigDirector_HOpConstructRectangle::SWIG_Callback12_t callback12, SwigDirector_HOpConstructRectangle::SWIG_Callback13_t callback13, SwigDirector_HOpConstructRectangle::SWIG_Callback14_t callback14, SwigDirector_HOpConstructRectangle::SWIG_Callback15_t callback15, SwigDirector_HOpConstructRectangle::SWIG_Callback16_t callback16, SwigDirector_HOpConstructRectangle::SWIG_Callback17_t callback17, SwigDirector_HOpConstructRectangle::SWIG_Callback18_t callback18, SwigDirector_HOpConstructRectangle::SWIG_Callback19_t callback19, SwigDirector_HOpConstructRectangle::SWIG_Callback20_t callback20, SwigDirector_HOpConstructRectangle::SWIG_Callback21_t callback21, SwigDirector_HOpConstructRectangle::SWIG_Callback22_t callback22, SwigDirector_HOpConstructRectangle::SWIG_Callback23_t callback23, SwigDirector_HOpConstructRectangle::SWIG_Callback24_t callback24, SwigDirector_HOpConstructRectangle::SWIG_Callback25_t callback25) {
  HOpConstructRectangle *obj = (HOpConstructRectangle *)objarg;
  SwigDirector_HOpConstructRectangle *director = dynamic_cast<SwigDirector_HOpConstructRectangle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructSphere_m_radius_set(void * jarg1, float jarg2) {
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  float arg2 ;
  SwigDirector_HOpConstructSphere *darg = 0;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpConstructSphere *>(arg1);
  if (arg1) darg->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpConstructSphere_m_radius_get(void * jarg1) {
  float jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  SwigDirector_HOpConstructSphere *darg = 0;
  float result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpConstructSphere *>(arg1);
  result = (float) (darg->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructSphere_ConstructWireframeSphere(void * jarg1, void * jarg2, float jarg3) {
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  SwigDirector_HOpConstructSphere *darg = 0;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  darg = dynamic_cast<SwigDirector_HOpConstructSphere *>(arg1);
  (darg)->ConstructWireframeSphere((HPoint const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructSphere__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpConstructSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpConstructSphere *)new SwigDirector_HOpConstructSphere(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructSphere__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpConstructSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpConstructSphere *)new SwigDirector_HOpConstructSphere(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpConstructSphere__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpConstructSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpConstructSphere *)new SwigDirector_HOpConstructSphere(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpConstructSphere(void * jarg1) {
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructSphere_GetName(void * jarg1) {
  char * jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpConstructSphere_GetNameSwigExplicitHOpConstructSphere(void * jarg1) {
  char * jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  result = (char *)(arg1)->HOpConstructSphere::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonDownSwigExplicitHOpConstructSphere(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructSphere::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonDownAndMoveSwigExplicitHOpConstructSphere(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructSphere::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpConstructSphere_OnLButtonUpSwigExplicitHOpConstructSphere(void * jarg1, void * jarg2) {
  int jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpConstructSphere::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructSphere_Clone(void * jarg1) {
  void * jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpConstructSphere_CloneSwigExplicitHOpConstructSphere(void * jarg1) {
  void * jresult ;
  HOpConstructSphere *arg1 = (HOpConstructSphere *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpConstructSphere *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpConstructSphere::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpConstructSphere_director_connect(void *objarg, SwigDirector_HOpConstructSphere::SWIG_Callback0_t callback0, SwigDirector_HOpConstructSphere::SWIG_Callback1_t callback1, SwigDirector_HOpConstructSphere::SWIG_Callback2_t callback2, SwigDirector_HOpConstructSphere::SWIG_Callback3_t callback3, SwigDirector_HOpConstructSphere::SWIG_Callback4_t callback4, SwigDirector_HOpConstructSphere::SWIG_Callback5_t callback5, SwigDirector_HOpConstructSphere::SWIG_Callback6_t callback6, SwigDirector_HOpConstructSphere::SWIG_Callback7_t callback7, SwigDirector_HOpConstructSphere::SWIG_Callback8_t callback8, SwigDirector_HOpConstructSphere::SWIG_Callback9_t callback9, SwigDirector_HOpConstructSphere::SWIG_Callback10_t callback10, SwigDirector_HOpConstructSphere::SWIG_Callback11_t callback11, SwigDirector_HOpConstructSphere::SWIG_Callback12_t callback12, SwigDirector_HOpConstructSphere::SWIG_Callback13_t callback13, SwigDirector_HOpConstructSphere::SWIG_Callback14_t callback14, SwigDirector_HOpConstructSphere::SWIG_Callback15_t callback15, SwigDirector_HOpConstructSphere::SWIG_Callback16_t callback16, SwigDirector_HOpConstructSphere::SWIG_Callback17_t callback17, SwigDirector_HOpConstructSphere::SWIG_Callback18_t callback18, SwigDirector_HOpConstructSphere::SWIG_Callback19_t callback19, SwigDirector_HOpConstructSphere::SWIG_Callback20_t callback20, SwigDirector_HOpConstructSphere::SWIG_Callback21_t callback21, SwigDirector_HOpConstructSphere::SWIG_Callback22_t callback22, SwigDirector_HOpConstructSphere::SWIG_Callback23_t callback23, SwigDirector_HOpConstructSphere::SWIG_Callback24_t callback24, SwigDirector_HOpConstructSphere::SWIG_Callback25_t callback25) {
  HOpConstructSphere *obj = (HOpConstructSphere *)objarg;
  SwigDirector_HOpConstructSphere *director = dynamic_cast<SwigDirector_HOpConstructSphere *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOOLEAN_TYPE_NONE_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOOLEAN_TYPE_INTERSECT_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOOLEAN_TYPE_SUBTRACT_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BOOLEAN_TYPE_UNION_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateBoolean__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  HOpCreateBoolean *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HOpCreateBoolean *)new SwigDirector_HOpCreateBoolean(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateBoolean__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateBoolean *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateBoolean *)new SwigDirector_HOpCreateBoolean(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateBoolean__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateBoolean *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateBoolean *)new SwigDirector_HOpCreateBoolean(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateBoolean(void * jarg1) {
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateBoolean_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateBoolean_GetNameSwigExplicitHOpCreateBoolean(void * jarg1) {
  char * jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  result = (char *)(arg1)->HOpCreateBoolean::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateBoolean_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateBoolean_OnLButtonDownSwigExplicitHOpCreateBoolean(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateBoolean::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateBoolean_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateBoolean_CloneSwigExplicitHOpCreateBoolean(void * jarg1) {
  void * jresult ;
  HOpCreateBoolean *arg1 = (HOpCreateBoolean *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateBoolean *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateBoolean::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateBoolean_director_connect(void *objarg, SwigDirector_HOpCreateBoolean::SWIG_Callback0_t callback0, SwigDirector_HOpCreateBoolean::SWIG_Callback1_t callback1, SwigDirector_HOpCreateBoolean::SWIG_Callback2_t callback2, SwigDirector_HOpCreateBoolean::SWIG_Callback3_t callback3, SwigDirector_HOpCreateBoolean::SWIG_Callback4_t callback4, SwigDirector_HOpCreateBoolean::SWIG_Callback5_t callback5, SwigDirector_HOpCreateBoolean::SWIG_Callback6_t callback6, SwigDirector_HOpCreateBoolean::SWIG_Callback7_t callback7, SwigDirector_HOpCreateBoolean::SWIG_Callback8_t callback8, SwigDirector_HOpCreateBoolean::SWIG_Callback9_t callback9, SwigDirector_HOpCreateBoolean::SWIG_Callback10_t callback10, SwigDirector_HOpCreateBoolean::SWIG_Callback11_t callback11, SwigDirector_HOpCreateBoolean::SWIG_Callback12_t callback12, SwigDirector_HOpCreateBoolean::SWIG_Callback13_t callback13, SwigDirector_HOpCreateBoolean::SWIG_Callback14_t callback14, SwigDirector_HOpCreateBoolean::SWIG_Callback15_t callback15, SwigDirector_HOpCreateBoolean::SWIG_Callback16_t callback16, SwigDirector_HOpCreateBoolean::SWIG_Callback17_t callback17, SwigDirector_HOpCreateBoolean::SWIG_Callback18_t callback18, SwigDirector_HOpCreateBoolean::SWIG_Callback19_t callback19, SwigDirector_HOpCreateBoolean::SWIG_Callback20_t callback20, SwigDirector_HOpCreateBoolean::SWIG_Callback21_t callback21, SwigDirector_HOpCreateBoolean::SWIG_Callback22_t callback22, SwigDirector_HOpCreateBoolean::SWIG_Callback23_t callback23, SwigDirector_HOpCreateBoolean::SWIG_Callback24_t callback24, SwigDirector_HOpCreateBoolean::SWIG_Callback25_t callback25) {
  HOpCreateBoolean *obj = (HOpCreateBoolean *)objarg;
  SwigDirector_HOpCreateBoolean *director = dynamic_cast<SwigDirector_HOpCreateBoolean *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCircle__SWIG_0(void * jarg1, int jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  HOpCreateCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HOpCreateCircle *)new SwigDirector_HOpCreateCircle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCircle__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateCircle *)new SwigDirector_HOpCreateCircle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCircle__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateCircle *)new SwigDirector_HOpCreateCircle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCircle__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateCircle *)new SwigDirector_HOpCreateCircle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateCircle(void * jarg1) {
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCircle_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCircle_GetNameSwigExplicitHOpCreateCircle(void * jarg1) {
  char * jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  result = (char *)(arg1)->HOpCreateCircle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCircle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCircle_OnLButtonUpSwigExplicitHOpCreateCircle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCircle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCircle_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCircle_CloneSwigExplicitHOpCreateCircle(void * jarg1) {
  void * jresult ;
  HOpCreateCircle *arg1 = (HOpCreateCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateCircle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateCircle_director_connect(void *objarg, SwigDirector_HOpCreateCircle::SWIG_Callback0_t callback0, SwigDirector_HOpCreateCircle::SWIG_Callback1_t callback1, SwigDirector_HOpCreateCircle::SWIG_Callback2_t callback2, SwigDirector_HOpCreateCircle::SWIG_Callback3_t callback3, SwigDirector_HOpCreateCircle::SWIG_Callback4_t callback4, SwigDirector_HOpCreateCircle::SWIG_Callback5_t callback5, SwigDirector_HOpCreateCircle::SWIG_Callback6_t callback6, SwigDirector_HOpCreateCircle::SWIG_Callback7_t callback7, SwigDirector_HOpCreateCircle::SWIG_Callback8_t callback8, SwigDirector_HOpCreateCircle::SWIG_Callback9_t callback9, SwigDirector_HOpCreateCircle::SWIG_Callback10_t callback10, SwigDirector_HOpCreateCircle::SWIG_Callback11_t callback11, SwigDirector_HOpCreateCircle::SWIG_Callback12_t callback12, SwigDirector_HOpCreateCircle::SWIG_Callback13_t callback13, SwigDirector_HOpCreateCircle::SWIG_Callback14_t callback14, SwigDirector_HOpCreateCircle::SWIG_Callback15_t callback15, SwigDirector_HOpCreateCircle::SWIG_Callback16_t callback16, SwigDirector_HOpCreateCircle::SWIG_Callback17_t callback17, SwigDirector_HOpCreateCircle::SWIG_Callback18_t callback18, SwigDirector_HOpCreateCircle::SWIG_Callback19_t callback19, SwigDirector_HOpCreateCircle::SWIG_Callback20_t callback20, SwigDirector_HOpCreateCircle::SWIG_Callback21_t callback21, SwigDirector_HOpCreateCircle::SWIG_Callback22_t callback22, SwigDirector_HOpCreateCircle::SWIG_Callback23_t callback23, SwigDirector_HOpCreateCircle::SWIG_Callback24_t callback24, SwigDirector_HOpCreateCircle::SWIG_Callback25_t callback25) {
  HOpCreateCircle *obj = (HOpCreateCircle *)objarg;
  SwigDirector_HOpCreateCircle *director = dynamic_cast<SwigDirector_HOpCreateCircle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCone__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateCone *)new SwigDirector_HOpCreateCone(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCone__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateCone *)new SwigDirector_HOpCreateCone(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCone__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateCone *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateCone *)new SwigDirector_HOpCreateCone(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateCone(void * jarg1) {
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  
  arg1 = (HOpCreateCone *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCone_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCone *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCone_GetNameSwigExplicitHOpCreateCone(void * jarg1) {
  char * jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCone *)jarg1; 
  result = (char *)(arg1)->HOpCreateCone::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCone_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCone_OnLButtonDownSwigExplicitHOpCreateCone(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCone *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCone::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCone_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCone *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCone_CloneSwigExplicitHOpCreateCone(void * jarg1) {
  void * jresult ;
  HOpCreateCone *arg1 = (HOpCreateCone *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCone *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateCone::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateCone_director_connect(void *objarg, SwigDirector_HOpCreateCone::SWIG_Callback0_t callback0, SwigDirector_HOpCreateCone::SWIG_Callback1_t callback1, SwigDirector_HOpCreateCone::SWIG_Callback2_t callback2, SwigDirector_HOpCreateCone::SWIG_Callback3_t callback3, SwigDirector_HOpCreateCone::SWIG_Callback4_t callback4, SwigDirector_HOpCreateCone::SWIG_Callback5_t callback5, SwigDirector_HOpCreateCone::SWIG_Callback6_t callback6, SwigDirector_HOpCreateCone::SWIG_Callback7_t callback7, SwigDirector_HOpCreateCone::SWIG_Callback8_t callback8, SwigDirector_HOpCreateCone::SWIG_Callback9_t callback9, SwigDirector_HOpCreateCone::SWIG_Callback10_t callback10, SwigDirector_HOpCreateCone::SWIG_Callback11_t callback11, SwigDirector_HOpCreateCone::SWIG_Callback12_t callback12, SwigDirector_HOpCreateCone::SWIG_Callback13_t callback13, SwigDirector_HOpCreateCone::SWIG_Callback14_t callback14, SwigDirector_HOpCreateCone::SWIG_Callback15_t callback15, SwigDirector_HOpCreateCone::SWIG_Callback16_t callback16, SwigDirector_HOpCreateCone::SWIG_Callback17_t callback17, SwigDirector_HOpCreateCone::SWIG_Callback18_t callback18, SwigDirector_HOpCreateCone::SWIG_Callback19_t callback19, SwigDirector_HOpCreateCone::SWIG_Callback20_t callback20, SwigDirector_HOpCreateCone::SWIG_Callback21_t callback21, SwigDirector_HOpCreateCone::SWIG_Callback22_t callback22, SwigDirector_HOpCreateCone::SWIG_Callback23_t callback23, SwigDirector_HOpCreateCone::SWIG_Callback24_t callback24, SwigDirector_HOpCreateCone::SWIG_Callback25_t callback25) {
  HOpCreateCone *obj = (HOpCreateCone *)objarg;
  SwigDirector_HOpCreateCone *director = dynamic_cast<SwigDirector_HOpCreateCone *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuboid__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateCuboid *)new SwigDirector_HOpCreateCuboid(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuboid__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateCuboid *)new SwigDirector_HOpCreateCuboid(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuboid__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateCuboid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateCuboid *)new SwigDirector_HOpCreateCuboid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateCuboid(void * jarg1) {
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCuboid_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCuboid_GetNameSwigExplicitHOpCreateCuboid(void * jarg1) {
  char * jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  result = (char *)(arg1)->HOpCreateCuboid::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuboid_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuboid_OnLButtonDownSwigExplicitHOpCreateCuboid(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCuboid::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCuboid_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCuboid_CloneSwigExplicitHOpCreateCuboid(void * jarg1) {
  void * jresult ;
  HOpCreateCuboid *arg1 = (HOpCreateCuboid *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCuboid *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateCuboid::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateCuboid_director_connect(void *objarg, SwigDirector_HOpCreateCuboid::SWIG_Callback0_t callback0, SwigDirector_HOpCreateCuboid::SWIG_Callback1_t callback1, SwigDirector_HOpCreateCuboid::SWIG_Callback2_t callback2, SwigDirector_HOpCreateCuboid::SWIG_Callback3_t callback3, SwigDirector_HOpCreateCuboid::SWIG_Callback4_t callback4, SwigDirector_HOpCreateCuboid::SWIG_Callback5_t callback5, SwigDirector_HOpCreateCuboid::SWIG_Callback6_t callback6, SwigDirector_HOpCreateCuboid::SWIG_Callback7_t callback7, SwigDirector_HOpCreateCuboid::SWIG_Callback8_t callback8, SwigDirector_HOpCreateCuboid::SWIG_Callback9_t callback9, SwigDirector_HOpCreateCuboid::SWIG_Callback10_t callback10, SwigDirector_HOpCreateCuboid::SWIG_Callback11_t callback11, SwigDirector_HOpCreateCuboid::SWIG_Callback12_t callback12, SwigDirector_HOpCreateCuboid::SWIG_Callback13_t callback13, SwigDirector_HOpCreateCuboid::SWIG_Callback14_t callback14, SwigDirector_HOpCreateCuboid::SWIG_Callback15_t callback15, SwigDirector_HOpCreateCuboid::SWIG_Callback16_t callback16, SwigDirector_HOpCreateCuboid::SWIG_Callback17_t callback17, SwigDirector_HOpCreateCuboid::SWIG_Callback18_t callback18, SwigDirector_HOpCreateCuboid::SWIG_Callback19_t callback19, SwigDirector_HOpCreateCuboid::SWIG_Callback20_t callback20, SwigDirector_HOpCreateCuboid::SWIG_Callback21_t callback21, SwigDirector_HOpCreateCuboid::SWIG_Callback22_t callback22, SwigDirector_HOpCreateCuboid::SWIG_Callback23_t callback23, SwigDirector_HOpCreateCuboid::SWIG_Callback24_t callback24, SwigDirector_HOpCreateCuboid::SWIG_Callback25_t callback25, SwigDirector_HOpCreateCuboid::SWIG_Callback26_t callback26, SwigDirector_HOpCreateCuboid::SWIG_Callback27_t callback27) {
  HOpCreateCuboid *obj = (HOpCreateCuboid *)objarg;
  SwigDirector_HOpCreateCuboid *director = dynamic_cast<SwigDirector_HOpCreateCuboid *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuttingPlane__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateCuttingPlane *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateCuttingPlane *)new SwigDirector_HOpCreateCuttingPlane(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuttingPlane__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateCuttingPlane *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateCuttingPlane *)new SwigDirector_HOpCreateCuttingPlane(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCuttingPlane__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateCuttingPlane *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateCuttingPlane *)new SwigDirector_HOpCreateCuttingPlane(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCuttingPlane_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCuttingPlane_GetNameSwigExplicitHOpCreateCuttingPlane(void * jarg1) {
  char * jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  result = (char *)(arg1)->HOpCreateCuttingPlane::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuttingPlane_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuttingPlane_OnLButtonDownSwigExplicitHOpCreateCuttingPlane(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCuttingPlane::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuttingPlane_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCuttingPlane_OnLButtonUpSwigExplicitHOpCreateCuttingPlane(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCuttingPlane::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCuttingPlane_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCuttingPlane_CloneSwigExplicitHOpCreateCuttingPlane(void * jarg1) {
  void * jresult ;
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateCuttingPlane::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateCuttingPlane(void * jarg1) {
  HOpCreateCuttingPlane *arg1 = (HOpCreateCuttingPlane *) 0 ;
  
  arg1 = (HOpCreateCuttingPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateCuttingPlane_director_connect(void *objarg, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback0_t callback0, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback1_t callback1, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback2_t callback2, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback3_t callback3, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback4_t callback4, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback5_t callback5, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback6_t callback6, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback7_t callback7, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback8_t callback8, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback9_t callback9, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback10_t callback10, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback11_t callback11, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback12_t callback12, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback13_t callback13, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback14_t callback14, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback15_t callback15, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback16_t callback16, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback17_t callback17, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback18_t callback18, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback19_t callback19, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback20_t callback20, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback21_t callback21, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback22_t callback22, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback23_t callback23, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback24_t callback24, SwigDirector_HOpCreateCuttingPlane::SWIG_Callback25_t callback25) {
  HOpCreateCuttingPlane *obj = (HOpCreateCuttingPlane *)objarg;
  SwigDirector_HOpCreateCuttingPlane *director = dynamic_cast<SwigDirector_HOpCreateCuttingPlane *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCylinder__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateCylinder *)new SwigDirector_HOpCreateCylinder(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCylinder__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateCylinder *)new SwigDirector_HOpCreateCylinder(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateCylinder__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateCylinder *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateCylinder *)new SwigDirector_HOpCreateCylinder(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateCylinder(void * jarg1) {
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCylinder_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateCylinder_GetNameSwigExplicitHOpCreateCylinder(void * jarg1) {
  char * jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  result = (char *)(arg1)->HOpCreateCylinder::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCylinder_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateCylinder_OnLButtonDownSwigExplicitHOpCreateCylinder(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateCylinder::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCylinder_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateCylinder_CloneSwigExplicitHOpCreateCylinder(void * jarg1) {
  void * jresult ;
  HOpCreateCylinder *arg1 = (HOpCreateCylinder *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateCylinder *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateCylinder::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateCylinder_director_connect(void *objarg, SwigDirector_HOpCreateCylinder::SWIG_Callback0_t callback0, SwigDirector_HOpCreateCylinder::SWIG_Callback1_t callback1, SwigDirector_HOpCreateCylinder::SWIG_Callback2_t callback2, SwigDirector_HOpCreateCylinder::SWIG_Callback3_t callback3, SwigDirector_HOpCreateCylinder::SWIG_Callback4_t callback4, SwigDirector_HOpCreateCylinder::SWIG_Callback5_t callback5, SwigDirector_HOpCreateCylinder::SWIG_Callback6_t callback6, SwigDirector_HOpCreateCylinder::SWIG_Callback7_t callback7, SwigDirector_HOpCreateCylinder::SWIG_Callback8_t callback8, SwigDirector_HOpCreateCylinder::SWIG_Callback9_t callback9, SwigDirector_HOpCreateCylinder::SWIG_Callback10_t callback10, SwigDirector_HOpCreateCylinder::SWIG_Callback11_t callback11, SwigDirector_HOpCreateCylinder::SWIG_Callback12_t callback12, SwigDirector_HOpCreateCylinder::SWIG_Callback13_t callback13, SwigDirector_HOpCreateCylinder::SWIG_Callback14_t callback14, SwigDirector_HOpCreateCylinder::SWIG_Callback15_t callback15, SwigDirector_HOpCreateCylinder::SWIG_Callback16_t callback16, SwigDirector_HOpCreateCylinder::SWIG_Callback17_t callback17, SwigDirector_HOpCreateCylinder::SWIG_Callback18_t callback18, SwigDirector_HOpCreateCylinder::SWIG_Callback19_t callback19, SwigDirector_HOpCreateCylinder::SWIG_Callback20_t callback20, SwigDirector_HOpCreateCylinder::SWIG_Callback21_t callback21, SwigDirector_HOpCreateCylinder::SWIG_Callback22_t callback22, SwigDirector_HOpCreateCylinder::SWIG_Callback23_t callback23, SwigDirector_HOpCreateCylinder::SWIG_Callback24_t callback24, SwigDirector_HOpCreateCylinder::SWIG_Callback25_t callback25) {
  HOpCreateCylinder *obj = (HOpCreateCylinder *)objarg;
  SwigDirector_HOpCreateCylinder *director = dynamic_cast<SwigDirector_HOpCreateCylinder *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbs3D__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateNurbs3D *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateNurbs3D *)new SwigDirector_HOpCreateNurbs3D(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbs3D__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateNurbs3D *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateNurbs3D *)new SwigDirector_HOpCreateNurbs3D(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbs3D__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateNurbs3D *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateNurbs3D *)new SwigDirector_HOpCreateNurbs3D(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateNurbs3D(void * jarg1) {
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateNurbs3D_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateNurbs3D_CloneSwigExplicitHOpCreateNurbs3D(void * jarg1) {
  void * jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateNurbs3D::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateNurbs3D_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateNurbs3D_GetNameSwigExplicitHOpCreateNurbs3D(void * jarg1) {
  char * jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  result = (char *)(arg1)->HOpCreateNurbs3D::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonDownSwigExplicitHOpCreateNurbs3D(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateNurbs3D::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonUpSwigExplicitHOpCreateNurbs3D(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateNurbs3D::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbs3D_OnLButtonDownAndMoveSwigExplicitHOpCreateNurbs3D(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbs3D *arg1 = (HOpCreateNurbs3D *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbs3D *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateNurbs3D::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpCreateNurbs3D_InsertNurbs(void * jarg1, void * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HNurbsSurface *arg2 = (HNurbsSurface *) 0 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (HNurbsSurface *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = HOpCreateNurbs3D::InsertNurbs(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_InsertNurbsFromMessage(char * jarg1, unsigned int jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  HOpCreateNurbs3D::InsertNurbsFromMessage((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_EmitModifyControlPointMessage(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  HOpCreateNurbs3D::EmitModifyControlPointMessage(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_ModifyControlPointFromMessage(char * jarg1, unsigned int jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  HOpCreateNurbs3D::ModifyControlPointFromMessage((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_EmitFinishNurbsEditing(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  HOpCreateNurbs3D::EmitFinishNurbsEditing(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_FinishNurbsEditingFromMessage(char * jarg1, unsigned int jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (HBaseView *)jarg3; 
  HOpCreateNurbs3D::FinishNurbsEditingFromMessage((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbs3D_director_connect(void *objarg, SwigDirector_HOpCreateNurbs3D::SWIG_Callback0_t callback0, SwigDirector_HOpCreateNurbs3D::SWIG_Callback1_t callback1, SwigDirector_HOpCreateNurbs3D::SWIG_Callback2_t callback2, SwigDirector_HOpCreateNurbs3D::SWIG_Callback3_t callback3, SwigDirector_HOpCreateNurbs3D::SWIG_Callback4_t callback4, SwigDirector_HOpCreateNurbs3D::SWIG_Callback5_t callback5, SwigDirector_HOpCreateNurbs3D::SWIG_Callback6_t callback6, SwigDirector_HOpCreateNurbs3D::SWIG_Callback7_t callback7, SwigDirector_HOpCreateNurbs3D::SWIG_Callback8_t callback8, SwigDirector_HOpCreateNurbs3D::SWIG_Callback9_t callback9, SwigDirector_HOpCreateNurbs3D::SWIG_Callback10_t callback10, SwigDirector_HOpCreateNurbs3D::SWIG_Callback11_t callback11, SwigDirector_HOpCreateNurbs3D::SWIG_Callback12_t callback12, SwigDirector_HOpCreateNurbs3D::SWIG_Callback13_t callback13, SwigDirector_HOpCreateNurbs3D::SWIG_Callback14_t callback14, SwigDirector_HOpCreateNurbs3D::SWIG_Callback15_t callback15, SwigDirector_HOpCreateNurbs3D::SWIG_Callback16_t callback16, SwigDirector_HOpCreateNurbs3D::SWIG_Callback17_t callback17, SwigDirector_HOpCreateNurbs3D::SWIG_Callback18_t callback18, SwigDirector_HOpCreateNurbs3D::SWIG_Callback19_t callback19, SwigDirector_HOpCreateNurbs3D::SWIG_Callback20_t callback20, SwigDirector_HOpCreateNurbs3D::SWIG_Callback21_t callback21, SwigDirector_HOpCreateNurbs3D::SWIG_Callback22_t callback22, SwigDirector_HOpCreateNurbs3D::SWIG_Callback23_t callback23, SwigDirector_HOpCreateNurbs3D::SWIG_Callback24_t callback24, SwigDirector_HOpCreateNurbs3D::SWIG_Callback25_t callback25) {
  HOpCreateNurbs3D *obj = (HOpCreateNurbs3D *)objarg;
  SwigDirector_HOpCreateNurbs3D *director = dynamic_cast<SwigDirector_HOpCreateNurbs3D *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HNurbsSurface() {
  void * jresult ;
  HNurbsSurface *result = 0 ;
  
  result = (HNurbsSurface *)new HNurbsSurface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HNurbsSurface(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_Init__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  arg2 = jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HNurbsSurface_Init__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7, float jarg8, int jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  HSurfaceType arg9 ;
  HC_KEY result;
  
  arg1 = (HNurbsSurface *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (HSurfaceType)jarg9; 
  result = (arg1)->Init(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_Recalculate(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  (arg1)->Recalculate();
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HNurbsSurface_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  HC_KEY result;
  
  arg1 = (HNurbsSurface *)jarg1; 
  result = (arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_DisplayVertices(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  (arg1)->DisplayVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_HideVertices(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  (arg1)->HideVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_EnableSelectability(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  (arg1)->EnableSelectability();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_DisableSelectability(void * jarg1) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  (arg1)->DisableSelectability();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_UpdateVertex(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->UpdateVertex(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_ShowVertex(void * jarg1, int jarg2, void * jarg3) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  int arg2 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->ShowVertex(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HNurbsSurface_CreateDefaultVertices(void * jarg1, void * jarg2, void * jarg3) {
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HNurbsSurface *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  (arg1)->CreateDefaultVertices(arg2,arg3);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HNurbsSurface_GetSurfaceMeshKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HNurbsSurface *arg1 = (HNurbsSurface *) 0 ;
  HC_KEY result;
  
  arg1 = (HNurbsSurface *)jarg1; 
  result = (arg1)->GetSurfaceMeshKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbsCurve__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateNurbsCurve *)new SwigDirector_HOpCreateNurbsCurve(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbsCurve__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateNurbsCurve *)new SwigDirector_HOpCreateNurbsCurve(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateNurbsCurve__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateNurbsCurve *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateNurbsCurve *)new SwigDirector_HOpCreateNurbsCurve(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateNurbsCurve(void * jarg1) {
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateNurbsCurve_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateNurbsCurve_CloneSwigExplicitHOpCreateNurbsCurve(void * jarg1) {
  void * jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateNurbsCurve::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateNurbsCurve_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateNurbsCurve_GetNameSwigExplicitHOpCreateNurbsCurve(void * jarg1) {
  char * jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  result = (char *)(arg1)->HOpCreateNurbsCurve::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbsCurve_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateNurbsCurve_OnLButtonDblClkSwigExplicitHOpCreateNurbsCurve(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateNurbsCurve *arg1 = (HOpCreateNurbsCurve *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateNurbsCurve *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateNurbsCurve::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateNurbsCurve_director_connect(void *objarg, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback0_t callback0, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback1_t callback1, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback2_t callback2, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback3_t callback3, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback4_t callback4, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback5_t callback5, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback6_t callback6, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback7_t callback7, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback8_t callback8, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback9_t callback9, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback10_t callback10, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback11_t callback11, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback12_t callback12, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback13_t callback13, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback14_t callback14, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback15_t callback15, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback16_t callback16, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback17_t callback17, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback18_t callback18, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback19_t callback19, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback20_t callback20, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback21_t callback21, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback22_t callback22, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback23_t callback23, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback24_t callback24, SwigDirector_HOpCreateNurbsCurve::SWIG_Callback25_t callback25) {
  HOpCreateNurbsCurve *obj = (HOpCreateNurbsCurve *)objarg;
  SwigDirector_HOpCreateNurbsCurve *director = dynamic_cast<SwigDirector_HOpCreateNurbsCurve *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateSphere__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateSphere *)new SwigDirector_HOpCreateSphere(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateSphere__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateSphere *)new SwigDirector_HOpCreateSphere(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateSphere__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateSphere *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateSphere *)new SwigDirector_HOpCreateSphere(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateSphere(void * jarg1) {
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateSphere_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateSphere_GetNameSwigExplicitHOpCreateSphere(void * jarg1) {
  char * jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  result = (char *)(arg1)->HOpCreateSphere::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateSphere_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateSphere_OnLButtonUpSwigExplicitHOpCreateSphere(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateSphere::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateSphere_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateSphere_CloneSwigExplicitHOpCreateSphere(void * jarg1) {
  void * jresult ;
  HOpCreateSphere *arg1 = (HOpCreateSphere *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateSphere *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateSphere::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateSphere_director_connect(void *objarg, SwigDirector_HOpCreateSphere::SWIG_Callback0_t callback0, SwigDirector_HOpCreateSphere::SWIG_Callback1_t callback1, SwigDirector_HOpCreateSphere::SWIG_Callback2_t callback2, SwigDirector_HOpCreateSphere::SWIG_Callback3_t callback3, SwigDirector_HOpCreateSphere::SWIG_Callback4_t callback4, SwigDirector_HOpCreateSphere::SWIG_Callback5_t callback5, SwigDirector_HOpCreateSphere::SWIG_Callback6_t callback6, SwigDirector_HOpCreateSphere::SWIG_Callback7_t callback7, SwigDirector_HOpCreateSphere::SWIG_Callback8_t callback8, SwigDirector_HOpCreateSphere::SWIG_Callback9_t callback9, SwigDirector_HOpCreateSphere::SWIG_Callback10_t callback10, SwigDirector_HOpCreateSphere::SWIG_Callback11_t callback11, SwigDirector_HOpCreateSphere::SWIG_Callback12_t callback12, SwigDirector_HOpCreateSphere::SWIG_Callback13_t callback13, SwigDirector_HOpCreateSphere::SWIG_Callback14_t callback14, SwigDirector_HOpCreateSphere::SWIG_Callback15_t callback15, SwigDirector_HOpCreateSphere::SWIG_Callback16_t callback16, SwigDirector_HOpCreateSphere::SWIG_Callback17_t callback17, SwigDirector_HOpCreateSphere::SWIG_Callback18_t callback18, SwigDirector_HOpCreateSphere::SWIG_Callback19_t callback19, SwigDirector_HOpCreateSphere::SWIG_Callback20_t callback20, SwigDirector_HOpCreateSphere::SWIG_Callback21_t callback21, SwigDirector_HOpCreateSphere::SWIG_Callback22_t callback22, SwigDirector_HOpCreateSphere::SWIG_Callback23_t callback23, SwigDirector_HOpCreateSphere::SWIG_Callback24_t callback24, SwigDirector_HOpCreateSphere::SWIG_Callback25_t callback25) {
  HOpCreateSphere *obj = (HOpCreateSphere *)objarg;
  SwigDirector_HOpCreateSphere *director = dynamic_cast<SwigDirector_HOpCreateSphere *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, bool jarg8) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HBaseOperator *arg6 = (HBaseOperator *) 0 ;
  HBaseOperator *arg7 = (HBaseOperator *) 0 ;
  bool arg8 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  arg6 = (HBaseOperator *)jarg6; 
  arg7 = (HBaseOperator *)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HBaseOperator *arg6 = (HBaseOperator *) 0 ;
  HBaseOperator *arg7 = (HBaseOperator *) 0 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  arg6 = (HBaseOperator *)jarg6; 
  arg7 = (HBaseOperator *)jarg7; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HBaseOperator *arg6 = (HBaseOperator *) 0 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  arg6 = (HBaseOperator *)jarg6; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_4(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_6(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulate__SWIG_7(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraManipulate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraManipulate *)new SwigDirector_HOpCameraManipulate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraManipulate(void * jarg1) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraManipulate_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraManipulate_GetNameSwigExplicitHOpCameraManipulate(void * jarg1) {
  char * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (char *)(arg1)->HOpCameraManipulate::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonDownSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonDownAndMoveSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnLButtonUpSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonDownSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonDownAndMoveSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnMButtonUpSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonDownSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonDownAndMoveSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulate_OnRButtonUpSwigExplicitHOpCameraManipulate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraManipulate::OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_CloneSwigExplicitHOpCameraManipulate(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraManipulate::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraManipulate_OperatorStarted(void * jarg1) {
  bool jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  bool result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (bool)(arg1)->OperatorStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraManipulate_OperatorStartedSwigExplicitHOpCameraManipulate(void * jarg1) {
  bool jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  bool result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (bool)(arg1)->HOpCameraManipulate::OperatorStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_GetOrbitOperator(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HOpCameraOrbit *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (HOpCameraOrbit *)(arg1)->GetOrbitOperator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_HandleDblClk(void * jarg1, float jarg2, float jarg3) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->HandleDblClk(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraManipulate_GetLButtonDown(void * jarg1) {
  bool jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  bool result;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  result = (bool)(arg1)->GetLButtonDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_pDblClkTimer_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HTClient *arg2 = (HTClient *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HTClient *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_pDblClkTimer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_pDblClkTimer_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HTClient *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HTClient *) (darg->m_pDblClkTimer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_pOrbitOperator_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_pOrbitOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_pOrbitOperator_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HBaseOperator *) (darg->m_pOrbitOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_pRelativeOrbitOperator_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_pRelativeOrbitOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_pRelativeOrbitOperator_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HBaseOperator *) (darg->m_pRelativeOrbitOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_pPanOperator_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_pPanOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_pPanOperator_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HBaseOperator *) (darg->m_pPanOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_pZoomOperator_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HBaseOperator *arg2 = (HBaseOperator *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HBaseOperator *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_pZoomOperator = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_pZoomOperator_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HBaseOperator *) (darg->m_pZoomOperator);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_m_ptRealOld_set(void * jarg1, void * jarg2) {
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  if (arg1) darg->m_ptRealOld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulate_m_ptRealOld_get(void * jarg1) {
  void * jresult ;
  HOpCameraManipulate *arg1 = (HOpCameraManipulate *) 0 ;
  SwigDirector_HOpCameraManipulate *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpCameraManipulate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraManipulate *>(arg1);
  result = (HPoint *)& (darg->m_ptRealOld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraManipulate_director_connect(void *objarg, SwigDirector_HOpCameraManipulate::SWIG_Callback0_t callback0, SwigDirector_HOpCameraManipulate::SWIG_Callback1_t callback1, SwigDirector_HOpCameraManipulate::SWIG_Callback2_t callback2, SwigDirector_HOpCameraManipulate::SWIG_Callback3_t callback3, SwigDirector_HOpCameraManipulate::SWIG_Callback4_t callback4, SwigDirector_HOpCameraManipulate::SWIG_Callback5_t callback5, SwigDirector_HOpCameraManipulate::SWIG_Callback6_t callback6, SwigDirector_HOpCameraManipulate::SWIG_Callback7_t callback7, SwigDirector_HOpCameraManipulate::SWIG_Callback8_t callback8, SwigDirector_HOpCameraManipulate::SWIG_Callback9_t callback9, SwigDirector_HOpCameraManipulate::SWIG_Callback10_t callback10, SwigDirector_HOpCameraManipulate::SWIG_Callback11_t callback11, SwigDirector_HOpCameraManipulate::SWIG_Callback12_t callback12, SwigDirector_HOpCameraManipulate::SWIG_Callback13_t callback13, SwigDirector_HOpCameraManipulate::SWIG_Callback14_t callback14, SwigDirector_HOpCameraManipulate::SWIG_Callback15_t callback15, SwigDirector_HOpCameraManipulate::SWIG_Callback16_t callback16, SwigDirector_HOpCameraManipulate::SWIG_Callback17_t callback17, SwigDirector_HOpCameraManipulate::SWIG_Callback18_t callback18, SwigDirector_HOpCameraManipulate::SWIG_Callback19_t callback19, SwigDirector_HOpCameraManipulate::SWIG_Callback20_t callback20, SwigDirector_HOpCameraManipulate::SWIG_Callback21_t callback21, SwigDirector_HOpCameraManipulate::SWIG_Callback22_t callback22, SwigDirector_HOpCameraManipulate::SWIG_Callback23_t callback23, SwigDirector_HOpCameraManipulate::SWIG_Callback24_t callback24, SwigDirector_HOpCameraManipulate::SWIG_Callback25_t callback25) {
  HOpCameraManipulate *obj = (HOpCameraManipulate *)objarg;
  SwigDirector_HOpCameraManipulate *director = dynamic_cast<SwigDirector_HOpCameraManipulate *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbit__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraOrbit *)new SwigDirector_HOpCameraOrbit(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbit__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraOrbit *)new SwigDirector_HOpCameraOrbit(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbit__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraOrbit *)new SwigDirector_HOpCameraOrbit(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraOrbit(void * jarg1) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraOrbit_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraOrbit_GetNameSwigExplicitHOpCameraOrbit(void * jarg1) {
  char * jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (char *)(arg1)->HOpCameraOrbit::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonDownSwigExplicitHOpCameraOrbit(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbit::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonDownAndMoveSwigExplicitHOpCameraOrbit(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbit::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbit_OnLButtonUpSwigExplicitHOpCameraOrbit(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbit::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_SetSceneBoundingBoxVis(void * jarg1, bool jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSceneBoundingBoxVis(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_GetSceneBoundingBoxVis(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (bool)(arg1)->GetSceneBoundingBoxVis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraOrbit_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraOrbit_CloneSwigExplicitHOpCameraOrbit(void * jarg1) {
  void * jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraOrbit::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle2_set(void * jarg1, float jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Angle2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle2_get(void * jarg1) {
  float jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (float) ((arg1)->m_Angle2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle1_set(void * jarg1, float jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Angle1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle1_get(void * jarg1) {
  float jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (float) ((arg1)->m_Angle1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle3_set(void * jarg1, float jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_Angle3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraOrbit_m_Angle3_get(void * jarg1) {
  float jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  float result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (float) ((arg1)->m_Angle3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_GetSingleClick(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  result = (bool)(arg1)->GetSingleClick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_bLightFollowsCamera_set(void * jarg1, bool jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool arg2 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  if (arg1) darg->m_bLightFollowsCamera = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_m_bLightFollowsCamera_get(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  result = (bool) (darg->m_bLightFollowsCamera);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_bSceneBoundingBoxVis_set(void * jarg1, bool jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool arg2 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  if (arg1) darg->m_bSceneBoundingBoxVis = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_m_bSceneBoundingBoxVis_get(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  result = (bool) (darg->m_bSceneBoundingBoxVis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_bSingleClick_set(void * jarg1, bool jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  bool arg2 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  if (arg1) darg->m_bSingleClick = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbit_m_bSingleClick_get(void * jarg1) {
  bool jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  bool result;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  result = (bool) (darg->m_bSingleClick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_m_ptRealOld_set(void * jarg1, void * jarg2) {
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  if (arg1) darg->m_ptRealOld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraOrbit_m_ptRealOld_get(void * jarg1) {
  void * jresult ;
  HOpCameraOrbit *arg1 = (HOpCameraOrbit *) 0 ;
  SwigDirector_HOpCameraOrbit *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpCameraOrbit *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbit *>(arg1);
  result = (HPoint *)& (darg->m_ptRealOld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbit_director_connect(void *objarg, SwigDirector_HOpCameraOrbit::SWIG_Callback0_t callback0, SwigDirector_HOpCameraOrbit::SWIG_Callback1_t callback1, SwigDirector_HOpCameraOrbit::SWIG_Callback2_t callback2, SwigDirector_HOpCameraOrbit::SWIG_Callback3_t callback3, SwigDirector_HOpCameraOrbit::SWIG_Callback4_t callback4, SwigDirector_HOpCameraOrbit::SWIG_Callback5_t callback5, SwigDirector_HOpCameraOrbit::SWIG_Callback6_t callback6, SwigDirector_HOpCameraOrbit::SWIG_Callback7_t callback7, SwigDirector_HOpCameraOrbit::SWIG_Callback8_t callback8, SwigDirector_HOpCameraOrbit::SWIG_Callback9_t callback9, SwigDirector_HOpCameraOrbit::SWIG_Callback10_t callback10, SwigDirector_HOpCameraOrbit::SWIG_Callback11_t callback11, SwigDirector_HOpCameraOrbit::SWIG_Callback12_t callback12, SwigDirector_HOpCameraOrbit::SWIG_Callback13_t callback13, SwigDirector_HOpCameraOrbit::SWIG_Callback14_t callback14, SwigDirector_HOpCameraOrbit::SWIG_Callback15_t callback15, SwigDirector_HOpCameraOrbit::SWIG_Callback16_t callback16, SwigDirector_HOpCameraOrbit::SWIG_Callback17_t callback17, SwigDirector_HOpCameraOrbit::SWIG_Callback18_t callback18, SwigDirector_HOpCameraOrbit::SWIG_Callback19_t callback19, SwigDirector_HOpCameraOrbit::SWIG_Callback20_t callback20, SwigDirector_HOpCameraOrbit::SWIG_Callback21_t callback21, SwigDirector_HOpCameraOrbit::SWIG_Callback22_t callback22, SwigDirector_HOpCameraOrbit::SWIG_Callback23_t callback23, SwigDirector_HOpCameraOrbit::SWIG_Callback24_t callback24, SwigDirector_HOpCameraOrbit::SWIG_Callback25_t callback25) {
  HOpCameraOrbit *obj = (HOpCameraOrbit *)objarg;
  SwigDirector_HOpCameraOrbit *director = dynamic_cast<SwigDirector_HOpCameraOrbit *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPan__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraPan *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraPan *)new SwigDirector_HOpCameraPan(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPan__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraPan *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraPan *)new SwigDirector_HOpCameraPan(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPan__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraPan *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraPan *)new SwigDirector_HOpCameraPan(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraPan(void * jarg1) {
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraPan_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraPan_GetNameSwigExplicitHOpCameraPan(void * jarg1) {
  char * jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  result = (char *)(arg1)->HOpCameraPan::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonDownSwigExplicitHOpCameraPan(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraPan::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonDownAndMoveSwigExplicitHOpCameraPan(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraPan::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPan_OnLButtonUpSwigExplicitHOpCameraPan(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraPan::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraPan_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraPan_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  bool result;
  
  arg1 = (HOpCameraPan *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraPan_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraPan_CloneSwigExplicitHOpCameraPan(void * jarg1) {
  void * jresult ;
  HOpCameraPan *arg1 = (HOpCameraPan *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraPan *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraPan::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraPan_director_connect(void *objarg, SwigDirector_HOpCameraPan::SWIG_Callback0_t callback0, SwigDirector_HOpCameraPan::SWIG_Callback1_t callback1, SwigDirector_HOpCameraPan::SWIG_Callback2_t callback2, SwigDirector_HOpCameraPan::SWIG_Callback3_t callback3, SwigDirector_HOpCameraPan::SWIG_Callback4_t callback4, SwigDirector_HOpCameraPan::SWIG_Callback5_t callback5, SwigDirector_HOpCameraPan::SWIG_Callback6_t callback6, SwigDirector_HOpCameraPan::SWIG_Callback7_t callback7, SwigDirector_HOpCameraPan::SWIG_Callback8_t callback8, SwigDirector_HOpCameraPan::SWIG_Callback9_t callback9, SwigDirector_HOpCameraPan::SWIG_Callback10_t callback10, SwigDirector_HOpCameraPan::SWIG_Callback11_t callback11, SwigDirector_HOpCameraPan::SWIG_Callback12_t callback12, SwigDirector_HOpCameraPan::SWIG_Callback13_t callback13, SwigDirector_HOpCameraPan::SWIG_Callback14_t callback14, SwigDirector_HOpCameraPan::SWIG_Callback15_t callback15, SwigDirector_HOpCameraPan::SWIG_Callback16_t callback16, SwigDirector_HOpCameraPan::SWIG_Callback17_t callback17, SwigDirector_HOpCameraPan::SWIG_Callback18_t callback18, SwigDirector_HOpCameraPan::SWIG_Callback19_t callback19, SwigDirector_HOpCameraPan::SWIG_Callback20_t callback20, SwigDirector_HOpCameraPan::SWIG_Callback21_t callback21, SwigDirector_HOpCameraPan::SWIG_Callback22_t callback22, SwigDirector_HOpCameraPan::SWIG_Callback23_t callback23, SwigDirector_HOpCameraPan::SWIG_Callback24_t callback24, SwigDirector_HOpCameraPan::SWIG_Callback25_t callback25) {
  HOpCameraPan *obj = (HOpCameraPan *)objarg;
  SwigDirector_HOpCameraPan *director = dynamic_cast<SwigDirector_HOpCameraPan *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreatePolyline__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreatePolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreatePolyline *)new SwigDirector_HOpCreatePolyline(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreatePolyline__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreatePolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreatePolyline *)new SwigDirector_HOpCreatePolyline(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreatePolyline__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreatePolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreatePolyline *)new SwigDirector_HOpCreatePolyline(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreatePolyline(void * jarg1) {
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreatePolyline_Clone(void * jarg1) {
  void * jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreatePolyline_CloneSwigExplicitHOpCreatePolyline(void * jarg1) {
  void * jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreatePolyline::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreatePolyline_GetName(void * jarg1) {
  char * jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreatePolyline_GetNameSwigExplicitHOpCreatePolyline(void * jarg1) {
  char * jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  result = (char *)(arg1)->HOpCreatePolyline::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreatePolyline_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreatePolyline_OnLButtonDblClkSwigExplicitHOpCreatePolyline(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreatePolyline *arg1 = (HOpCreatePolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreatePolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreatePolyline::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreatePolyline_director_connect(void *objarg, SwigDirector_HOpCreatePolyline::SWIG_Callback0_t callback0, SwigDirector_HOpCreatePolyline::SWIG_Callback1_t callback1, SwigDirector_HOpCreatePolyline::SWIG_Callback2_t callback2, SwigDirector_HOpCreatePolyline::SWIG_Callback3_t callback3, SwigDirector_HOpCreatePolyline::SWIG_Callback4_t callback4, SwigDirector_HOpCreatePolyline::SWIG_Callback5_t callback5, SwigDirector_HOpCreatePolyline::SWIG_Callback6_t callback6, SwigDirector_HOpCreatePolyline::SWIG_Callback7_t callback7, SwigDirector_HOpCreatePolyline::SWIG_Callback8_t callback8, SwigDirector_HOpCreatePolyline::SWIG_Callback9_t callback9, SwigDirector_HOpCreatePolyline::SWIG_Callback10_t callback10, SwigDirector_HOpCreatePolyline::SWIG_Callback11_t callback11, SwigDirector_HOpCreatePolyline::SWIG_Callback12_t callback12, SwigDirector_HOpCreatePolyline::SWIG_Callback13_t callback13, SwigDirector_HOpCreatePolyline::SWIG_Callback14_t callback14, SwigDirector_HOpCreatePolyline::SWIG_Callback15_t callback15, SwigDirector_HOpCreatePolyline::SWIG_Callback16_t callback16, SwigDirector_HOpCreatePolyline::SWIG_Callback17_t callback17, SwigDirector_HOpCreatePolyline::SWIG_Callback18_t callback18, SwigDirector_HOpCreatePolyline::SWIG_Callback19_t callback19, SwigDirector_HOpCreatePolyline::SWIG_Callback20_t callback20, SwigDirector_HOpCreatePolyline::SWIG_Callback21_t callback21, SwigDirector_HOpCreatePolyline::SWIG_Callback22_t callback22, SwigDirector_HOpCreatePolyline::SWIG_Callback23_t callback23, SwigDirector_HOpCreatePolyline::SWIG_Callback24_t callback24, SwigDirector_HOpCreatePolyline::SWIG_Callback25_t callback25) {
  HOpCreatePolyline *obj = (HOpCreatePolyline *)objarg;
  SwigDirector_HOpCreatePolyline *director = dynamic_cast<SwigDirector_HOpCreatePolyline *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateRectangle__SWIG_0(void * jarg1, int jarg2, int jarg3, bool jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  HOpCreateRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (HOpCreateRectangle *)new SwigDirector_HOpCreateRectangle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateRectangle__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCreateRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCreateRectangle *)new SwigDirector_HOpCreateRectangle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateRectangle__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCreateRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCreateRectangle *)new SwigDirector_HOpCreateRectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCreateRectangle__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCreateRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCreateRectangle *)new SwigDirector_HOpCreateRectangle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCreateRectangle(void * jarg1) {
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateRectangle_GetName(void * jarg1) {
  char * jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCreateRectangle_GetNameSwigExplicitHOpCreateRectangle(void * jarg1) {
  char * jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  result = (char *)(arg1)->HOpCreateRectangle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateRectangle_Clone(void * jarg1) {
  void * jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCreateRectangle_CloneSwigExplicitHOpCreateRectangle(void * jarg1) {
  void * jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCreateRectangle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateRectangle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCreateRectangle_OnLButtonUpSwigExplicitHOpCreateRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCreateRectangle *arg1 = (HOpCreateRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCreateRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCreateRectangle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCreateRectangle_director_connect(void *objarg, SwigDirector_HOpCreateRectangle::SWIG_Callback0_t callback0, SwigDirector_HOpCreateRectangle::SWIG_Callback1_t callback1, SwigDirector_HOpCreateRectangle::SWIG_Callback2_t callback2, SwigDirector_HOpCreateRectangle::SWIG_Callback3_t callback3, SwigDirector_HOpCreateRectangle::SWIG_Callback4_t callback4, SwigDirector_HOpCreateRectangle::SWIG_Callback5_t callback5, SwigDirector_HOpCreateRectangle::SWIG_Callback6_t callback6, SwigDirector_HOpCreateRectangle::SWIG_Callback7_t callback7, SwigDirector_HOpCreateRectangle::SWIG_Callback8_t callback8, SwigDirector_HOpCreateRectangle::SWIG_Callback9_t callback9, SwigDirector_HOpCreateRectangle::SWIG_Callback10_t callback10, SwigDirector_HOpCreateRectangle::SWIG_Callback11_t callback11, SwigDirector_HOpCreateRectangle::SWIG_Callback12_t callback12, SwigDirector_HOpCreateRectangle::SWIG_Callback13_t callback13, SwigDirector_HOpCreateRectangle::SWIG_Callback14_t callback14, SwigDirector_HOpCreateRectangle::SWIG_Callback15_t callback15, SwigDirector_HOpCreateRectangle::SWIG_Callback16_t callback16, SwigDirector_HOpCreateRectangle::SWIG_Callback17_t callback17, SwigDirector_HOpCreateRectangle::SWIG_Callback18_t callback18, SwigDirector_HOpCreateRectangle::SWIG_Callback19_t callback19, SwigDirector_HOpCreateRectangle::SWIG_Callback20_t callback20, SwigDirector_HOpCreateRectangle::SWIG_Callback21_t callback21, SwigDirector_HOpCreateRectangle::SWIG_Callback22_t callback22, SwigDirector_HOpCreateRectangle::SWIG_Callback23_t callback23, SwigDirector_HOpCreateRectangle::SWIG_Callback24_t callback24, SwigDirector_HOpCreateRectangle::SWIG_Callback25_t callback25) {
  HOpCreateRectangle *obj = (HOpCreateRectangle *)objarg;
  SwigDirector_HOpCreateRectangle *director = dynamic_cast<SwigDirector_HOpCreateRectangle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRelativeOrbit__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraRelativeOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraRelativeOrbit *)new SwigDirector_HOpCameraRelativeOrbit(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRelativeOrbit__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraRelativeOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraRelativeOrbit *)new SwigDirector_HOpCameraRelativeOrbit(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRelativeOrbit__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraRelativeOrbit *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraRelativeOrbit *)new SwigDirector_HOpCameraRelativeOrbit(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraRelativeOrbit(void * jarg1) {
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_GetNameSwigExplicitHOpCameraRelativeOrbit(void * jarg1) {
  char * jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  result = (char *)(arg1)->HOpCameraRelativeOrbit::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_OnLButtonDownSwigExplicitHOpCameraRelativeOrbit(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraRelativeOrbit::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_OnLButtonDownAndMoveSwigExplicitHOpCameraRelativeOrbit(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraRelativeOrbit::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_CloneSwigExplicitHOpCameraRelativeOrbit(void * jarg1) {
  void * jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraRelativeOrbit::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_SetCenter(void * jarg1, void * jarg2) {
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCenter(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_GetCenter(void * jarg1) {
  void * jresult ;
  HOpCameraRelativeOrbit *arg1 = (HOpCameraRelativeOrbit *) 0 ;
  HPoint result;
  
  arg1 = (HOpCameraRelativeOrbit *)jarg1; 
  result = (arg1)->GetCenter();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraRelativeOrbit_director_connect(void *objarg, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback0_t callback0, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback1_t callback1, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback2_t callback2, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback3_t callback3, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback4_t callback4, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback5_t callback5, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback6_t callback6, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback7_t callback7, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback8_t callback8, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback9_t callback9, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback10_t callback10, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback11_t callback11, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback12_t callback12, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback13_t callback13, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback14_t callback14, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback15_t callback15, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback16_t callback16, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback17_t callback17, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback18_t callback18, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback19_t callback19, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback20_t callback20, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback21_t callback21, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback22_t callback22, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback23_t callback23, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback24_t callback24, SwigDirector_HOpCameraRelativeOrbit::SWIG_Callback25_t callback25) {
  HOpCameraRelativeOrbit *obj = (HOpCameraRelativeOrbit *)objarg;
  SwigDirector_HOpCameraRelativeOrbit *director = dynamic_cast<SwigDirector_HOpCameraRelativeOrbit *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraWalk__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraWalk *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraWalk *)new SwigDirector_HOpCameraWalk(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraWalk__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraWalk *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraWalk *)new SwigDirector_HOpCameraWalk(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraWalk__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraWalk *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraWalk *)new SwigDirector_HOpCameraWalk(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraWalk(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraWalk_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraWalk_GetNameSwigExplicitHOpCameraWalk(void * jarg1) {
  char * jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (char *)(arg1)->HOpCameraWalk::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonDownSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonDownAndMoveSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnLButtonUpSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraWalk_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  bool result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMouseWheel(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMouseWheelSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonDownSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnMButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonDownAndMoveSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnMButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnMButtonUpSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnMButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraWalk_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraWalk_CloneSwigExplicitHOpCameraWalk(void * jarg1) {
  void * jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraWalk::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_OnWalk(void * jarg1, float jarg2, float jarg3) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnWalk(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_OnKeyWalk(void * jarg1, float jarg2, float jarg3) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->OnKeyWalk(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_OnButtonWalk(void * jarg1, char * jarg2, void * jarg3) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  char *arg2 = (char *) 0 ;
  HButtonState arg3 ;
  HButtonState *argp3 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HButtonState *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HButtonState", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnButtonWalk((char const *)arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraWalk_WalkTimerClbk(float jarg1, float jarg2, void * jarg3) {
  bool jresult ;
  float arg1 ;
  float arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3; 
  result = (bool)HOpCameraWalk::WalkTimerClbk(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_ViewDeleted(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  (arg1)->ViewDeleted();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetKeyboardWalk(void * jarg1, bool jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKeyboardWalk(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetCollision(void * jarg1, bool jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCollision(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetSnapToFloor(void * jarg1, bool jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSnapToFloor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetAvatarHeight(void * jarg1, float jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAvatarHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetStepHeightUp(void * jarg1, float jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStepHeightUp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetStepHeightDown(void * jarg1, float jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStepHeightDown(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraWalk_GetAvatarHeight(void * jarg1) {
  float jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (float)(arg1)->GetAvatarHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetSpeed(void * jarg1, float jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float arg2 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSpeed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraWalk_GetSpeed(void * jarg1) {
  float jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  float result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  result = (float)(arg1)->GetSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpCameraWalk_CalculateExtents(void * jarg1) {
  float jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  float result;
  
  arg1 = (HBaseView *)jarg1; 
  result = (float)HOpCameraWalk::CalculateExtents(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_OnKeyDownSwigExplicitHOpCameraWalk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraWalk::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraWalk_ImageAction(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  HImageRegion *arg1 = (HImageRegion *) 0 ;
  void *arg2 = (void *) 0 ;
  HButtonState arg3 ;
  HButtonState *argp3 ;
  int result;
  
  arg1 = (HImageRegion *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HButtonState *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HButtonState", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)HOpCameraWalk::ImageAction(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_ShowNavigationWindow__SWIG_0(void * jarg1, char * jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ShowNavigationWindow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_ShowNavigationWindow__SWIG_1(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  (arg1)->ShowNavigationWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_RemoveNavigationWindow(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  (arg1)->RemoveNavigationWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_FitControlsToCorner(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  (arg1)->FitControlsToCorner();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SnapToGround(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->SnapToGround();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_AdjustCameraCollision__SWIG_0(void * jarg1, void * jarg2, bool jarg3) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HCamera *arg2 = 0 ;
  bool arg3 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->AdjustCameraCollision(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_AdjustCameraCollision__SWIG_1(void * jarg1, void * jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HCamera *arg2 = 0 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->AdjustCameraCollision(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_AdjustHeight(void * jarg1, void * jarg2) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  HCamera *arg2 = 0 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (HCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->AdjustHeight(*arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraWalk_signal_callback(int jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  int arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  result = (bool)SwigDirector_HOpCameraWalk::signal_callback(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_ReadjustPosition(void * jarg1) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->ReadjustPosition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_SetupControls(void * jarg1, char jarg2, char jarg3, char jarg4, char jarg5, char jarg6, char jarg7) {
  HOpCameraWalk *arg1 = (HOpCameraWalk *) 0 ;
  char arg2 ;
  char arg3 ;
  char arg4 ;
  char arg5 ;
  char arg6 ;
  char arg7 ;
  SwigDirector_HOpCameraWalk *darg = 0;
  
  arg1 = (HOpCameraWalk *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (char)jarg3; 
  arg4 = (char)jarg4; 
  arg5 = (char)jarg5; 
  arg6 = (char)jarg6; 
  arg7 = (char)jarg7; 
  darg = dynamic_cast<SwigDirector_HOpCameraWalk *>(arg1);
  (darg)->SetupControls(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraWalk_director_connect(void *objarg, SwigDirector_HOpCameraWalk::SWIG_Callback0_t callback0, SwigDirector_HOpCameraWalk::SWIG_Callback1_t callback1, SwigDirector_HOpCameraWalk::SWIG_Callback2_t callback2, SwigDirector_HOpCameraWalk::SWIG_Callback3_t callback3, SwigDirector_HOpCameraWalk::SWIG_Callback4_t callback4, SwigDirector_HOpCameraWalk::SWIG_Callback5_t callback5, SwigDirector_HOpCameraWalk::SWIG_Callback6_t callback6, SwigDirector_HOpCameraWalk::SWIG_Callback7_t callback7, SwigDirector_HOpCameraWalk::SWIG_Callback8_t callback8, SwigDirector_HOpCameraWalk::SWIG_Callback9_t callback9, SwigDirector_HOpCameraWalk::SWIG_Callback10_t callback10, SwigDirector_HOpCameraWalk::SWIG_Callback11_t callback11, SwigDirector_HOpCameraWalk::SWIG_Callback12_t callback12, SwigDirector_HOpCameraWalk::SWIG_Callback13_t callback13, SwigDirector_HOpCameraWalk::SWIG_Callback14_t callback14, SwigDirector_HOpCameraWalk::SWIG_Callback15_t callback15, SwigDirector_HOpCameraWalk::SWIG_Callback16_t callback16, SwigDirector_HOpCameraWalk::SWIG_Callback17_t callback17, SwigDirector_HOpCameraWalk::SWIG_Callback18_t callback18, SwigDirector_HOpCameraWalk::SWIG_Callback19_t callback19, SwigDirector_HOpCameraWalk::SWIG_Callback20_t callback20, SwigDirector_HOpCameraWalk::SWIG_Callback21_t callback21, SwigDirector_HOpCameraWalk::SWIG_Callback22_t callback22, SwigDirector_HOpCameraWalk::SWIG_Callback23_t callback23, SwigDirector_HOpCameraWalk::SWIG_Callback24_t callback24, SwigDirector_HOpCameraWalk::SWIG_Callback25_t callback25) {
  HOpCameraWalk *obj = (HOpCameraWalk *)objarg;
  SwigDirector_HOpCameraWalk *director = dynamic_cast<SwigDirector_HOpCameraWalk *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoom__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraZoom *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraZoom *)new SwigDirector_HOpCameraZoom(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoom__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraZoom *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraZoom *)new SwigDirector_HOpCameraZoom(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoom__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraZoom *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraZoom *)new SwigDirector_HOpCameraZoom(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraZoom(void * jarg1) {
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraZoom_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraZoom_GetNameSwigExplicitHOpCameraZoom(void * jarg1) {
  char * jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  result = (char *)(arg1)->HOpCameraZoom::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonDownSwigExplicitHOpCameraZoom(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraZoom::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonDownAndMoveSwigExplicitHOpCameraZoom(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraZoom::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoom_OnLButtonUpSwigExplicitHOpCameraZoom(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraZoom::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoom_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraZoom_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  bool result;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraZoom_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraZoom_CloneSwigExplicitHOpCameraZoom(void * jarg1) {
  void * jresult ;
  HOpCameraZoom *arg1 = (HOpCameraZoom *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraZoom *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraZoom::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoom_director_connect(void *objarg, SwigDirector_HOpCameraZoom::SWIG_Callback0_t callback0, SwigDirector_HOpCameraZoom::SWIG_Callback1_t callback1, SwigDirector_HOpCameraZoom::SWIG_Callback2_t callback2, SwigDirector_HOpCameraZoom::SWIG_Callback3_t callback3, SwigDirector_HOpCameraZoom::SWIG_Callback4_t callback4, SwigDirector_HOpCameraZoom::SWIG_Callback5_t callback5, SwigDirector_HOpCameraZoom::SWIG_Callback6_t callback6, SwigDirector_HOpCameraZoom::SWIG_Callback7_t callback7, SwigDirector_HOpCameraZoom::SWIG_Callback8_t callback8, SwigDirector_HOpCameraZoom::SWIG_Callback9_t callback9, SwigDirector_HOpCameraZoom::SWIG_Callback10_t callback10, SwigDirector_HOpCameraZoom::SWIG_Callback11_t callback11, SwigDirector_HOpCameraZoom::SWIG_Callback12_t callback12, SwigDirector_HOpCameraZoom::SWIG_Callback13_t callback13, SwigDirector_HOpCameraZoom::SWIG_Callback14_t callback14, SwigDirector_HOpCameraZoom::SWIG_Callback15_t callback15, SwigDirector_HOpCameraZoom::SWIG_Callback16_t callback16, SwigDirector_HOpCameraZoom::SWIG_Callback17_t callback17, SwigDirector_HOpCameraZoom::SWIG_Callback18_t callback18, SwigDirector_HOpCameraZoom::SWIG_Callback19_t callback19, SwigDirector_HOpCameraZoom::SWIG_Callback20_t callback20, SwigDirector_HOpCameraZoom::SWIG_Callback21_t callback21, SwigDirector_HOpCameraZoom::SWIG_Callback22_t callback22, SwigDirector_HOpCameraZoom::SWIG_Callback23_t callback23, SwigDirector_HOpCameraZoom::SWIG_Callback24_t callback24, SwigDirector_HOpCameraZoom::SWIG_Callback25_t callback25) {
  HOpCameraZoom *obj = (HOpCameraZoom *)objarg;
  SwigDirector_HOpCameraZoom *director = dynamic_cast<SwigDirector_HOpCameraZoom *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomBox__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraZoomBox *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraZoomBox *)new SwigDirector_HOpCameraZoomBox(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomBox__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraZoomBox *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraZoomBox *)new SwigDirector_HOpCameraZoomBox(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomBox__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraZoomBox *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraZoomBox *)new SwigDirector_HOpCameraZoomBox(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraZoomBox(void * jarg1) {
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraZoomBox_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraZoomBox_GetNameSwigExplicitHOpCameraZoomBox(void * jarg1) {
  char * jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  result = (char *)(arg1)->HOpCameraZoomBox::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomBox_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomBox_OnLButtonUpSwigExplicitHOpCameraZoomBox(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraZoomBox::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomBox_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomBox_OnLButtonDblClkSwigExplicitHOpCameraZoomBox(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraZoomBox::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoomBox_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraZoomBox_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  bool result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraZoomBox_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraZoomBox_CloneSwigExplicitHOpCameraZoomBox(void * jarg1) {
  void * jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraZoomBox::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraZoomBox_ComputeReasonableTarget(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  bool jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  HPoint *arg5 = 0 ;
  SwigDirector_HOpCameraZoomBox *darg = 0;
  bool result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg5 = (HPoint *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_HOpCameraZoomBox *>(arg1);
  result = (bool)(darg)->ComputeReasonableTarget(*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4,(HPoint const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoomBox_ComputeNewField(void * jarg1, float * jarg2, float * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  HPoint arg4 ;
  HPoint arg5 ;
  HPoint *arg6 = 0 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  SwigDirector_HOpCameraZoomBox *darg = 0;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpCameraZoomBox *>(arg1);
  (darg)->ComputeNewField(*arg2,*arg3,arg4,arg5,(HPoint const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoomBox_m_LightFollowsCamera_set(void * jarg1, bool jarg2) {
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  bool arg2 ;
  SwigDirector_HOpCameraZoomBox *darg = 0;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpCameraZoomBox *>(arg1);
  if (arg1) darg->m_LightFollowsCamera = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraZoomBox_m_LightFollowsCamera_get(void * jarg1) {
  bool jresult ;
  HOpCameraZoomBox *arg1 = (HOpCameraZoomBox *) 0 ;
  SwigDirector_HOpCameraZoomBox *darg = 0;
  bool result;
  
  arg1 = (HOpCameraZoomBox *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpCameraZoomBox *>(arg1);
  result = (bool) (darg->m_LightFollowsCamera);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoomBox_director_connect(void *objarg, SwigDirector_HOpCameraZoomBox::SWIG_Callback0_t callback0, SwigDirector_HOpCameraZoomBox::SWIG_Callback1_t callback1, SwigDirector_HOpCameraZoomBox::SWIG_Callback2_t callback2, SwigDirector_HOpCameraZoomBox::SWIG_Callback3_t callback3, SwigDirector_HOpCameraZoomBox::SWIG_Callback4_t callback4, SwigDirector_HOpCameraZoomBox::SWIG_Callback5_t callback5, SwigDirector_HOpCameraZoomBox::SWIG_Callback6_t callback6, SwigDirector_HOpCameraZoomBox::SWIG_Callback7_t callback7, SwigDirector_HOpCameraZoomBox::SWIG_Callback8_t callback8, SwigDirector_HOpCameraZoomBox::SWIG_Callback9_t callback9, SwigDirector_HOpCameraZoomBox::SWIG_Callback10_t callback10, SwigDirector_HOpCameraZoomBox::SWIG_Callback11_t callback11, SwigDirector_HOpCameraZoomBox::SWIG_Callback12_t callback12, SwigDirector_HOpCameraZoomBox::SWIG_Callback13_t callback13, SwigDirector_HOpCameraZoomBox::SWIG_Callback14_t callback14, SwigDirector_HOpCameraZoomBox::SWIG_Callback15_t callback15, SwigDirector_HOpCameraZoomBox::SWIG_Callback16_t callback16, SwigDirector_HOpCameraZoomBox::SWIG_Callback17_t callback17, SwigDirector_HOpCameraZoomBox::SWIG_Callback18_t callback18, SwigDirector_HOpCameraZoomBox::SWIG_Callback19_t callback19, SwigDirector_HOpCameraZoomBox::SWIG_Callback20_t callback20, SwigDirector_HOpCameraZoomBox::SWIG_Callback21_t callback21, SwigDirector_HOpCameraZoomBox::SWIG_Callback22_t callback22, SwigDirector_HOpCameraZoomBox::SWIG_Callback23_t callback23, SwigDirector_HOpCameraZoomBox::SWIG_Callback24_t callback24, SwigDirector_HOpCameraZoomBox::SWIG_Callback25_t callback25) {
  HOpCameraZoomBox *obj = (HOpCameraZoomBox *)objarg;
  SwigDirector_HOpCameraZoomBox *director = dynamic_cast<SwigDirector_HOpCameraZoomBox *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupAnnotate__SWIG_0(void * jarg1, bool jarg2, int jarg3, int jarg4, bool jarg5) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  HOpMarkupAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (HOpMarkupAnnotate *)new SwigDirector_HOpMarkupAnnotate(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupAnnotate__SWIG_1(void * jarg1, bool jarg2, int jarg3, int jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  HOpMarkupAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HOpMarkupAnnotate *)new SwigDirector_HOpMarkupAnnotate(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupAnnotate__SWIG_2(void * jarg1, bool jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  HOpMarkupAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupAnnotate *)new SwigDirector_HOpMarkupAnnotate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupAnnotate__SWIG_3(void * jarg1, bool jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HOpMarkupAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (HOpMarkupAnnotate *)new SwigDirector_HOpMarkupAnnotate(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupAnnotate__SWIG_4(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupAnnotate *)new SwigDirector_HOpMarkupAnnotate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupAnnotate(void * jarg1) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetNameSwigExplicitHOpMarkupAnnotate(void * jarg1) {
  char * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  result = (char *)(arg1)->HOpMarkupAnnotate::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonDownSwigExplicitHOpMarkupAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupAnnotate::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonDownAndMoveSwigExplicitHOpMarkupAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupAnnotate::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnRButtonDownSwigExplicitHOpMarkupAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupAnnotate::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnLButtonUpSwigExplicitHOpMarkupAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupAnnotate::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_OnKeyDownSwigExplicitHOpMarkupAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupAnnotate::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupAnnotate_Clone(void * jarg1) {
  void * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupAnnotate_CloneSwigExplicitHOpMarkupAnnotate(void * jarg1) {
  void * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMarkupAnnotate::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_iBackgroundType_set(void * jarg1, int jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  int arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_iBackgroundType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_iBackgroundType_get(void * jarg1) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (int) (darg->m_iBackgroundType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetBackgroundType(void * jarg1) {
  int jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  int result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (int)((SwigDirector_HOpMarkupAnnotate const *)darg)->GetBackgroundType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetBackgroundType(void * jarg1, int jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  int arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetBackgroundType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_pNoteKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_pNoteKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_pNoteKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result =  (darg->m_pNoteKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetNoteKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = ((SwigDirector_HOpMarkupAnnotate const *)darg)->GetNoteKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetNoteKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetNoteKey(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_Annotation_set(void * jarg1, void * jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HUtilityAnnotation *arg2 = (HUtilityAnnotation *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HUtilityAnnotation *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_Annotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_Annotation_get(void * jarg1) {
  void * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  HUtilityAnnotation *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (HUtilityAnnotation *)& (darg->m_Annotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetAnnotation(void * jarg1) {
  void * jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  HUtilityAnnotation *result = 0 ;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (HUtilityAnnotation *) &(darg)->GetAnnotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetAnnotation(void * jarg1, void * jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  HUtilityAnnotation *arg2 = 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = (HUtilityAnnotation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HUtilityAnnotation const & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetAnnotation((HUtilityAnnotation const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bAddToLayer_set(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_bAddToLayer = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bAddToLayer_get(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool) (darg->m_bAddToLayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetAddToLayer(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool)((SwigDirector_HOpMarkupAnnotate const *)darg)->GetAddToLayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetAddToLayer(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetAddToLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bTouchedText_set(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_bTouchedText = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bTouchedText_get(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool) (darg->m_bTouchedText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetTouchedText(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool)((SwigDirector_HOpMarkupAnnotate const *)darg)->GetTouchedText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetTouchedText(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetTouchedText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bHideOverlappedText_set(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_bHideOverlappedText = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bHideOverlappedText_get(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool) (darg->m_bHideOverlappedText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetHideOverlappedText(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool)((SwigDirector_HOpMarkupAnnotate const *)darg)->GetHideOverlappedText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetHideOverlappedText(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetHideOverlappedText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bCreateNewNotes_set(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  if (arg1) darg->m_bCreateNewNotes = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_m_bCreateNewNotes_get(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool) (darg->m_bCreateNewNotes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_GetCreateNewNotes(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool)((SwigDirector_HOpMarkupAnnotate const *)darg)->GetCreateNewNotes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_SetCreateNewNotes(void * jarg1, bool jarg2) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->SetCreateNewNotes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_StartOp(void * jarg1) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->StartOp();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupAnnotate_EndOp(void * jarg1) {
  bool jresult ;
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  result = (bool)(darg)->EndOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_TransmitMarkupSegment(void * jarg1) {
  HOpMarkupAnnotate *arg1 = (HOpMarkupAnnotate *) 0 ;
  SwigDirector_HOpMarkupAnnotate *darg = 0;
  
  arg1 = (HOpMarkupAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(arg1);
  (darg)->TransmitMarkupSegment();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupAnnotate_director_connect(void *objarg, SwigDirector_HOpMarkupAnnotate::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupAnnotate::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupAnnotate::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupAnnotate::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupAnnotate::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupAnnotate::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupAnnotate::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupAnnotate::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupAnnotate::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupAnnotate::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupAnnotate::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupAnnotate::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupAnnotate::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupAnnotate::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupAnnotate::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupAnnotate::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupAnnotate::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupAnnotate::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupAnnotate::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupAnnotate::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupAnnotate::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupAnnotate::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupAnnotate::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupAnnotate::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupAnnotate::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupAnnotate::SWIG_Callback25_t callback25) {
  HOpMarkupAnnotate *obj = (HOpMarkupAnnotate *)objarg;
  SwigDirector_HOpMarkupAnnotate *director = dynamic_cast<SwigDirector_HOpMarkupAnnotate *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupCircle__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpMarkupCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupCircle *)new SwigDirector_HOpMarkupCircle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupCircle__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpMarkupCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpMarkupCircle *)new SwigDirector_HOpMarkupCircle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupCircle__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupCircle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupCircle *)new SwigDirector_HOpMarkupCircle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupCircle(void * jarg1) {
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupCircle_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupCircle_GetNameSwigExplicitHOpMarkupCircle(void * jarg1) {
  char * jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  result = (char *)(arg1)->HOpMarkupCircle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupCircle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupCircle_OnLButtonUpSwigExplicitHOpMarkupCircle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupCircle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupCircle_Clone(void * jarg1) {
  void * jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupCircle_CloneSwigExplicitHOpMarkupCircle(void * jarg1) {
  void * jresult ;
  HOpMarkupCircle *arg1 = (HOpMarkupCircle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupCircle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMarkupCircle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupCircle_director_connect(void *objarg, SwigDirector_HOpMarkupCircle::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupCircle::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupCircle::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupCircle::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupCircle::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupCircle::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupCircle::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupCircle::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupCircle::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupCircle::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupCircle::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupCircle::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupCircle::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupCircle::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupCircle::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupCircle::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupCircle::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupCircle::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupCircle::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupCircle::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupCircle::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupCircle::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupCircle::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupCircle::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupCircle::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupCircle::SWIG_Callback25_t callback25) {
  HOpMarkupCircle *obj = (HOpMarkupCircle *)objarg;
  SwigDirector_HOpMarkupCircle *director = dynamic_cast<SwigDirector_HOpMarkupCircle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupFreehand__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpMarkupFreehand *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupFreehand *)new SwigDirector_HOpMarkupFreehand(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupFreehand__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpMarkupFreehand *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpMarkupFreehand *)new SwigDirector_HOpMarkupFreehand(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupFreehand__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupFreehand *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupFreehand *)new SwigDirector_HOpMarkupFreehand(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupFreehand_CreateMarkupFreehand(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, bool jarg5) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  HPoint *arg4 = (HPoint *) 0 ;
  bool arg5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (HPoint *)jarg4; 
  arg5 = jarg5 ? true : false; 
  HOpMarkupFreehand::CreateMarkupFreehand(arg1,(char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupFreehand_Clone(void * jarg1) {
  void * jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupFreehand_CloneSwigExplicitHOpMarkupFreehand(void * jarg1) {
  void * jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMarkupFreehand::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupFreehand_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupFreehand_GetNameSwigExplicitHOpMarkupFreehand(void * jarg1) {
  char * jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  result = (char *)(arg1)->HOpMarkupFreehand::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupFreehand_m_lPolyline_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_lPolyline = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMarkupFreehand_m_lPolyline_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HC_KEY result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  result =  ((arg1)->m_lPolyline);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonDownAndMoveSwigExplicitHOpMarkupFreehand(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupFreehand::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonDownSwigExplicitHOpMarkupFreehand(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupFreehand::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupFreehand_OnLButtonUpSwigExplicitHOpMarkupFreehand(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupFreehand::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupFreehand_m_ptLast_set(void * jarg1, void * jarg2) {
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpMarkupFreehand *darg = 0;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupFreehand *>(arg1);
  if (arg1) darg->m_ptLast = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupFreehand_m_ptLast_get(void * jarg1) {
  void * jresult ;
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  SwigDirector_HOpMarkupFreehand *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupFreehand *>(arg1);
  result = (HPoint *)& (darg->m_ptLast);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupFreehand(void * jarg1) {
  HOpMarkupFreehand *arg1 = (HOpMarkupFreehand *) 0 ;
  
  arg1 = (HOpMarkupFreehand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupFreehand_director_connect(void *objarg, SwigDirector_HOpMarkupFreehand::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupFreehand::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupFreehand::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupFreehand::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupFreehand::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupFreehand::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupFreehand::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupFreehand::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupFreehand::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupFreehand::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupFreehand::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupFreehand::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupFreehand::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupFreehand::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupFreehand::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupFreehand::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupFreehand::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupFreehand::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupFreehand::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupFreehand::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupFreehand::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupFreehand::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupFreehand::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupFreehand::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupFreehand::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupFreehand::SWIG_Callback25_t callback25) {
  HOpMarkupFreehand *obj = (HOpMarkupFreehand *)objarg;
  SwigDirector_HOpMarkupFreehand *director = dynamic_cast<SwigDirector_HOpMarkupFreehand *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupMeasure__SWIG_0(void * jarg1, bool jarg2, int jarg3, int jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  HOpMarkupMeasure *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HOpMarkupMeasure *)new SwigDirector_HOpMarkupMeasure(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupMeasure__SWIG_1(void * jarg1, bool jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  HOpMarkupMeasure *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupMeasure *)new SwigDirector_HOpMarkupMeasure(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupMeasure__SWIG_2(void * jarg1, bool jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HOpMarkupMeasure *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (HOpMarkupMeasure *)new SwigDirector_HOpMarkupMeasure(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupMeasure__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupMeasure *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupMeasure *)new SwigDirector_HOpMarkupMeasure(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupMeasure(void * jarg1) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupMeasure_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupMeasure_GetNameSwigExplicitHOpMarkupMeasure(void * jarg1) {
  char * jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  result = (char *)(arg1)->HOpMarkupMeasure::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonDownSwigExplicitHOpMarkupMeasure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupMeasure::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonDownAndMoveSwigExplicitHOpMarkupMeasure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupMeasure::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnLButtonUpSwigExplicitHOpMarkupMeasure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupMeasure::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnRButtonDownSwigExplicitHOpMarkupMeasure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupMeasure::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_OnKeyDownSwigExplicitHOpMarkupMeasure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupMeasure::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupMeasure_Clone(void * jarg1) {
  void * jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupMeasure_CloneSwigExplicitHOpMarkupMeasure(void * jarg1) {
  void * jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMarkupMeasure::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_StartOp(void * jarg1) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  (darg)->StartOp();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupMeasure_EndOp(void * jarg1) {
  bool jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (bool)(darg)->EndOp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_Annotation_set(void * jarg1, void * jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  HUtilityAnnotationMeasure *arg2 = (HUtilityAnnotationMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (HUtilityAnnotationMeasure *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_Annotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupMeasure_m_Annotation_get(void * jarg1) {
  void * jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  HUtilityAnnotationMeasure *result = 0 ;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (HUtilityAnnotationMeasure *)& (darg->m_Annotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_iBackgroundType_set(void * jarg1, int jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  int arg2 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_iBackgroundType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupMeasure_m_iBackgroundType_get(void * jarg1) {
  int jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  int result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (int) (darg->m_iBackgroundType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bAddToLayer_set(void * jarg1, bool jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_bAddToLayer = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bAddToLayer_get(void * jarg1) {
  bool jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (bool) (darg->m_bAddToLayer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bNewNote_set(void * jarg1, bool jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_bNewNote = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bNewNote_get(void * jarg1) {
  bool jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (bool) (darg->m_bNewNote);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bTouchedText_set(void * jarg1, bool jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_bTouchedText = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bTouchedText_get(void * jarg1) {
  bool jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (bool) (darg->m_bTouchedText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bHideOverlappedText_set(void * jarg1, bool jarg2) {
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  if (arg1) darg->m_bHideOverlappedText = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMarkupMeasure_m_bHideOverlappedText_get(void * jarg1) {
  bool jresult ;
  HOpMarkupMeasure *arg1 = (HOpMarkupMeasure *) 0 ;
  SwigDirector_HOpMarkupMeasure *darg = 0;
  bool result;
  
  arg1 = (HOpMarkupMeasure *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(arg1);
  result = (bool) (darg->m_bHideOverlappedText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupMeasure_director_connect(void *objarg, SwigDirector_HOpMarkupMeasure::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupMeasure::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupMeasure::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupMeasure::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupMeasure::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupMeasure::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupMeasure::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupMeasure::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupMeasure::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupMeasure::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupMeasure::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupMeasure::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupMeasure::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupMeasure::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupMeasure::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupMeasure::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupMeasure::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupMeasure::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupMeasure::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupMeasure::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupMeasure::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupMeasure::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupMeasure::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupMeasure::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupMeasure::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupMeasure::SWIG_Callback25_t callback25) {
  HOpMarkupMeasure *obj = (HOpMarkupMeasure *)objarg;
  SwigDirector_HOpMarkupMeasure *director = dynamic_cast<SwigDirector_HOpMarkupMeasure *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupPostIt__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpMarkupPostIt *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupPostIt *)new SwigDirector_HOpMarkupPostIt(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupPostIt__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpMarkupPostIt *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpMarkupPostIt *)new SwigDirector_HOpMarkupPostIt(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupPostIt__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupPostIt *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupPostIt *)new SwigDirector_HOpMarkupPostIt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupPostIt_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupPostIt *arg1 = (HOpMarkupPostIt *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupPostIt *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupPostIt_GetNameSwigExplicitHOpMarkupPostIt(void * jarg1) {
  char * jresult ;
  HOpMarkupPostIt *arg1 = (HOpMarkupPostIt *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupPostIt *)jarg1; 
  result = (char *)(arg1)->HOpMarkupPostIt::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupPostIt_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupPostIt *arg1 = (HOpMarkupPostIt *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupPostIt *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupPostIt_OnLButtonDownSwigExplicitHOpMarkupPostIt(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupPostIt *arg1 = (HOpMarkupPostIt *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupPostIt *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupPostIt::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupPostIt(void * jarg1) {
  HOpMarkupPostIt *arg1 = (HOpMarkupPostIt *) 0 ;
  
  arg1 = (HOpMarkupPostIt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupPostIt_director_connect(void *objarg, SwigDirector_HOpMarkupPostIt::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupPostIt::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupPostIt::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupPostIt::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupPostIt::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupPostIt::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupPostIt::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupPostIt::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupPostIt::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupPostIt::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupPostIt::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupPostIt::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupPostIt::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupPostIt::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupPostIt::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupPostIt::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupPostIt::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupPostIt::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupPostIt::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupPostIt::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupPostIt::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupPostIt::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupPostIt::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupPostIt::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupPostIt::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupPostIt::SWIG_Callback25_t callback25) {
  HOpMarkupPostIt *obj = (HOpMarkupPostIt *)objarg;
  SwigDirector_HOpMarkupPostIt *director = dynamic_cast<SwigDirector_HOpMarkupPostIt *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupRectangle__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpMarkupRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpMarkupRectangle *)new SwigDirector_HOpMarkupRectangle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupRectangle__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpMarkupRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpMarkupRectangle *)new SwigDirector_HOpMarkupRectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMarkupRectangle__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMarkupRectangle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMarkupRectangle *)new SwigDirector_HOpMarkupRectangle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMarkupRectangle(void * jarg1) {
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupRectangle_GetName(void * jarg1) {
  char * jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMarkupRectangle_GetNameSwigExplicitHOpMarkupRectangle(void * jarg1) {
  char * jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  result = (char *)(arg1)->HOpMarkupRectangle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupRectangle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMarkupRectangle_OnLButtonUpSwigExplicitHOpMarkupRectangle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMarkupRectangle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupRectangle_Clone(void * jarg1) {
  void * jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMarkupRectangle_CloneSwigExplicitHOpMarkupRectangle(void * jarg1) {
  void * jresult ;
  HOpMarkupRectangle *arg1 = (HOpMarkupRectangle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMarkupRectangle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMarkupRectangle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMarkupRectangle_director_connect(void *objarg, SwigDirector_HOpMarkupRectangle::SWIG_Callback0_t callback0, SwigDirector_HOpMarkupRectangle::SWIG_Callback1_t callback1, SwigDirector_HOpMarkupRectangle::SWIG_Callback2_t callback2, SwigDirector_HOpMarkupRectangle::SWIG_Callback3_t callback3, SwigDirector_HOpMarkupRectangle::SWIG_Callback4_t callback4, SwigDirector_HOpMarkupRectangle::SWIG_Callback5_t callback5, SwigDirector_HOpMarkupRectangle::SWIG_Callback6_t callback6, SwigDirector_HOpMarkupRectangle::SWIG_Callback7_t callback7, SwigDirector_HOpMarkupRectangle::SWIG_Callback8_t callback8, SwigDirector_HOpMarkupRectangle::SWIG_Callback9_t callback9, SwigDirector_HOpMarkupRectangle::SWIG_Callback10_t callback10, SwigDirector_HOpMarkupRectangle::SWIG_Callback11_t callback11, SwigDirector_HOpMarkupRectangle::SWIG_Callback12_t callback12, SwigDirector_HOpMarkupRectangle::SWIG_Callback13_t callback13, SwigDirector_HOpMarkupRectangle::SWIG_Callback14_t callback14, SwigDirector_HOpMarkupRectangle::SWIG_Callback15_t callback15, SwigDirector_HOpMarkupRectangle::SWIG_Callback16_t callback16, SwigDirector_HOpMarkupRectangle::SWIG_Callback17_t callback17, SwigDirector_HOpMarkupRectangle::SWIG_Callback18_t callback18, SwigDirector_HOpMarkupRectangle::SWIG_Callback19_t callback19, SwigDirector_HOpMarkupRectangle::SWIG_Callback20_t callback20, SwigDirector_HOpMarkupRectangle::SWIG_Callback21_t callback21, SwigDirector_HOpMarkupRectangle::SWIG_Callback22_t callback22, SwigDirector_HOpMarkupRectangle::SWIG_Callback23_t callback23, SwigDirector_HOpMarkupRectangle::SWIG_Callback24_t callback24, SwigDirector_HOpMarkupRectangle::SWIG_Callback25_t callback25) {
  HOpMarkupRectangle *obj = (HOpMarkupRectangle *)objarg;
  SwigDirector_HOpMarkupRectangle *director = dynamic_cast<SwigDirector_HOpMarkupRectangle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMoveHandle__SWIG_0(void * jarg1, bool jarg2, int jarg3, int jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  HOpMoveHandle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (HOpMoveHandle *)new SwigDirector_HOpMoveHandle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMoveHandle__SWIG_1(void * jarg1, bool jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  int arg3 ;
  HOpMoveHandle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (HOpMoveHandle *)new SwigDirector_HOpMoveHandle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMoveHandle__SWIG_2(void * jarg1, bool jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HOpMoveHandle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (HOpMoveHandle *)new SwigDirector_HOpMoveHandle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpMoveHandle__SWIG_3(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpMoveHandle *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpMoveHandle *)new SwigDirector_HOpMoveHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpMoveHandle(void * jarg1) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMoveHandle_GetName(void * jarg1) {
  char * jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpMoveHandle_GetNameSwigExplicitHOpMoveHandle(void * jarg1) {
  char * jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  result = (char *)(arg1)->HOpMoveHandle::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonDownSwigExplicitHOpMoveHandle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMoveHandle::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonDownAndMoveSwigExplicitHOpMoveHandle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMoveHandle::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnNoButtonDownAndMoveSwigExplicitHOpMoveHandle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMoveHandle::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpMoveHandle_OnLButtonUpSwigExplicitHOpMoveHandle(void * jarg1, void * jarg2) {
  int jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpMoveHandle::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMoveHandle_FindHandle(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  HC_KEY result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (arg1)->FindHandle(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMoveHandle_FindObject__SWIG_0(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  HC_KEY arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->FindObject(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMoveHandle_FindObject__SWIG_1(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HEventInfo *arg2 = 0 ;
  HC_KEY arg3 ;
  HC_KEY result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  result = (arg1)->FindObject(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_SetupObject(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetupObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_Reset(void * jarg1) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMoveHandle_Clone(void * jarg1) {
  void * jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpMoveHandle_CloneSwigExplicitHOpMoveHandle(void * jarg1) {
  void * jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpMoveHandle::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_m_pHandleKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  if (arg1) darg->m_pHandleKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMoveHandle_m_pHandleKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  result =  (darg->m_pHandleKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_m_pObjectKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  if (arg1) darg->m_pObjectKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpMoveHandle_m_pObjectKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  result =  (darg->m_pObjectKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_m_bAllowSelect_set(void * jarg1, bool jarg2) {
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  bool arg2 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  if (arg1) darg->m_bAllowSelect = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpMoveHandle_m_bAllowSelect_get(void * jarg1) {
  bool jresult ;
  HOpMoveHandle *arg1 = (HOpMoveHandle *) 0 ;
  SwigDirector_HOpMoveHandle *darg = 0;
  bool result;
  
  arg1 = (HOpMoveHandle *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpMoveHandle *>(arg1);
  result = (bool) (darg->m_bAllowSelect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpMoveHandle_director_connect(void *objarg, SwigDirector_HOpMoveHandle::SWIG_Callback0_t callback0, SwigDirector_HOpMoveHandle::SWIG_Callback1_t callback1, SwigDirector_HOpMoveHandle::SWIG_Callback2_t callback2, SwigDirector_HOpMoveHandle::SWIG_Callback3_t callback3, SwigDirector_HOpMoveHandle::SWIG_Callback4_t callback4, SwigDirector_HOpMoveHandle::SWIG_Callback5_t callback5, SwigDirector_HOpMoveHandle::SWIG_Callback6_t callback6, SwigDirector_HOpMoveHandle::SWIG_Callback7_t callback7, SwigDirector_HOpMoveHandle::SWIG_Callback8_t callback8, SwigDirector_HOpMoveHandle::SWIG_Callback9_t callback9, SwigDirector_HOpMoveHandle::SWIG_Callback10_t callback10, SwigDirector_HOpMoveHandle::SWIG_Callback11_t callback11, SwigDirector_HOpMoveHandle::SWIG_Callback12_t callback12, SwigDirector_HOpMoveHandle::SWIG_Callback13_t callback13, SwigDirector_HOpMoveHandle::SWIG_Callback14_t callback14, SwigDirector_HOpMoveHandle::SWIG_Callback15_t callback15, SwigDirector_HOpMoveHandle::SWIG_Callback16_t callback16, SwigDirector_HOpMoveHandle::SWIG_Callback17_t callback17, SwigDirector_HOpMoveHandle::SWIG_Callback18_t callback18, SwigDirector_HOpMoveHandle::SWIG_Callback19_t callback19, SwigDirector_HOpMoveHandle::SWIG_Callback20_t callback20, SwigDirector_HOpMoveHandle::SWIG_Callback21_t callback21, SwigDirector_HOpMoveHandle::SWIG_Callback22_t callback22, SwigDirector_HOpMoveHandle::SWIG_Callback23_t callback23, SwigDirector_HOpMoveHandle::SWIG_Callback24_t callback24, SwigDirector_HOpMoveHandle::SWIG_Callback25_t callback25) {
  HOpMoveHandle *obj = (HOpMoveHandle *)objarg;
  SwigDirector_HOpMoveHandle *director = dynamic_cast<SwigDirector_HOpMoveHandle *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpNavCube__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpNavCube *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpNavCube *)new SwigDirector_HOpNavCube(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpNavCube__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpNavCube *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpNavCube *)new SwigDirector_HOpNavCube(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpNavCube__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpNavCube *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpNavCube *)new SwigDirector_HOpNavCube(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpNavCube(void * jarg1) {
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  
  arg1 = (HOpNavCube *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpNavCube_GetName(void * jarg1) {
  char * jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpNavCube *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpNavCube_GetNameSwigExplicitHOpNavCube(void * jarg1) {
  char * jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpNavCube *)jarg1; 
  result = (char *)(arg1)->HOpNavCube::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNavCube_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNavCube *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNavCube_OnLButtonDownSwigExplicitHOpNavCube(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNavCube *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNavCube::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpNavCube_Clone(void * jarg1) {
  void * jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpNavCube *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpNavCube_CloneSwigExplicitHOpNavCube(void * jarg1) {
  void * jresult ;
  HOpNavCube *arg1 = (HOpNavCube *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpNavCube *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpNavCube::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNavCube_director_connect(void *objarg, SwigDirector_HOpNavCube::SWIG_Callback0_t callback0, SwigDirector_HOpNavCube::SWIG_Callback1_t callback1, SwigDirector_HOpNavCube::SWIG_Callback2_t callback2, SwigDirector_HOpNavCube::SWIG_Callback3_t callback3, SwigDirector_HOpNavCube::SWIG_Callback4_t callback4, SwigDirector_HOpNavCube::SWIG_Callback5_t callback5, SwigDirector_HOpNavCube::SWIG_Callback6_t callback6, SwigDirector_HOpNavCube::SWIG_Callback7_t callback7, SwigDirector_HOpNavCube::SWIG_Callback8_t callback8, SwigDirector_HOpNavCube::SWIG_Callback9_t callback9, SwigDirector_HOpNavCube::SWIG_Callback10_t callback10, SwigDirector_HOpNavCube::SWIG_Callback11_t callback11, SwigDirector_HOpNavCube::SWIG_Callback12_t callback12, SwigDirector_HOpNavCube::SWIG_Callback13_t callback13, SwigDirector_HOpNavCube::SWIG_Callback14_t callback14, SwigDirector_HOpNavCube::SWIG_Callback15_t callback15, SwigDirector_HOpNavCube::SWIG_Callback16_t callback16, SwigDirector_HOpNavCube::SWIG_Callback17_t callback17, SwigDirector_HOpNavCube::SWIG_Callback18_t callback18, SwigDirector_HOpNavCube::SWIG_Callback19_t callback19, SwigDirector_HOpNavCube::SWIG_Callback20_t callback20, SwigDirector_HOpNavCube::SWIG_Callback21_t callback21, SwigDirector_HOpNavCube::SWIG_Callback22_t callback22, SwigDirector_HOpNavCube::SWIG_Callback23_t callback23, SwigDirector_HOpNavCube::SWIG_Callback24_t callback24, SwigDirector_HOpNavCube::SWIG_Callback25_t callback25) {
  HOpNavCube *obj = (HOpNavCube *)objarg;
  SwigDirector_HOpNavCube *director = dynamic_cast<SwigDirector_HOpNavCube *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpNetwork(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpNetwork *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpNetwork *)new SwigDirector_HOpNetwork(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpNetwork(void * jarg1) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  
  arg1 = (HOpNetwork *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonDownSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonDownAndMoveSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnLButtonUpSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonDownSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnRButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonDownAndMoveSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnRButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpNetwork_OnRButtonUpSwigExplicitHOpNetwork(void * jarg1, void * jarg2) {
  int jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpNetwork::OnRButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_m_NetworkKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  if (arg1) darg->m_NetworkKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_m_NetworkKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result =  (darg->m_NetworkKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_m_NodesKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  if (arg1) darg->m_NodesKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_m_NodesKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result =  (darg->m_NodesKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_m_SelectedNodeKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  if (arg1) darg->m_SelectedNodeKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_m_SelectedNodeKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result =  (darg->m_SelectedNodeKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_m_SelectedLineKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  if (arg1) darg->m_SelectedLineKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_m_SelectedLineKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result =  (darg->m_SelectedLineKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_My_KInsert_Line(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result = (darg)->My_KInsert_Line(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Line_Common(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Line_Common(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Edit_Line(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Edit_Line(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Delete_Line(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Delete_Line(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_My_KInsert_Node(void * jarg1, float jarg2, float jarg3, float jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result = (darg)->My_KInsert_Node(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Edit_Node(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Edit_Node(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_Show_Node_Position(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3, float * jarg4, float * jarg5) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->Show_Node_Position(arg2,*arg3,*arg4,*arg5);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_Get_Node_Key(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result = (darg)->Get_Node_Key(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Open_Node(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Open_Node(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_My_Close_Node(void * jarg1) {
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  (darg)->My_Close_Node();
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_My_Renumber_Key(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result = (darg)->My_Renumber_Key(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpNetwork_GetNextKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpNetwork *arg1 = (HOpNetwork *) 0 ;
  SwigDirector_HOpNetwork *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpNetwork *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpNetwork *>(arg1);
  result = (darg)->GetNextKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpNetwork_director_connect(void *objarg, SwigDirector_HOpNetwork::SWIG_Callback0_t callback0, SwigDirector_HOpNetwork::SWIG_Callback1_t callback1, SwigDirector_HOpNetwork::SWIG_Callback2_t callback2, SwigDirector_HOpNetwork::SWIG_Callback3_t callback3, SwigDirector_HOpNetwork::SWIG_Callback4_t callback4, SwigDirector_HOpNetwork::SWIG_Callback5_t callback5, SwigDirector_HOpNetwork::SWIG_Callback6_t callback6, SwigDirector_HOpNetwork::SWIG_Callback7_t callback7, SwigDirector_HOpNetwork::SWIG_Callback8_t callback8, SwigDirector_HOpNetwork::SWIG_Callback9_t callback9, SwigDirector_HOpNetwork::SWIG_Callback10_t callback10, SwigDirector_HOpNetwork::SWIG_Callback11_t callback11, SwigDirector_HOpNetwork::SWIG_Callback12_t callback12, SwigDirector_HOpNetwork::SWIG_Callback13_t callback13, SwigDirector_HOpNetwork::SWIG_Callback14_t callback14, SwigDirector_HOpNetwork::SWIG_Callback15_t callback15, SwigDirector_HOpNetwork::SWIG_Callback16_t callback16, SwigDirector_HOpNetwork::SWIG_Callback17_t callback17, SwigDirector_HOpNetwork::SWIG_Callback18_t callback18, SwigDirector_HOpNetwork::SWIG_Callback19_t callback19, SwigDirector_HOpNetwork::SWIG_Callback20_t callback20, SwigDirector_HOpNetwork::SWIG_Callback21_t callback21, SwigDirector_HOpNetwork::SWIG_Callback22_t callback22, SwigDirector_HOpNetwork::SWIG_Callback23_t callback23, SwigDirector_HOpNetwork::SWIG_Callback24_t callback24, SwigDirector_HOpNetwork::SWIG_Callback25_t callback25) {
  HOpNetwork *obj = (HOpNetwork *)objarg;
  SwigDirector_HOpNetwork *director = dynamic_cast<SwigDirector_HOpNetwork *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectAnnotate__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpObjectAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpObjectAnnotate *)new SwigDirector_HOpObjectAnnotate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectAnnotate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpObjectAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpObjectAnnotate *)new SwigDirector_HOpObjectAnnotate(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectAnnotate__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpObjectAnnotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpObjectAnnotate *)new SwigDirector_HOpObjectAnnotate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpObjectAnnotate(void * jarg1) {
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectAnnotate_GetName(void * jarg1) {
  char * jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectAnnotate_GetNameSwigExplicitHOpObjectAnnotate(void * jarg1) {
  char * jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  result = (char *)(arg1)->HOpObjectAnnotate::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectAnnotate_Clone(void * jarg1) {
  void * jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectAnnotate_CloneSwigExplicitHOpObjectAnnotate(void * jarg1) {
  void * jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpObjectAnnotate::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectAnnotate_AnnotateObject(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5, bool jarg6) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint arg4 ;
  HPoint arg5 ;
  bool arg6 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  HOpObjectAnnotate::AnnotateObject(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectAnnotate_AnnotateObjectFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  HOpObjectAnnotate::AnnotateObjectFromMessage(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnLButtonDownSwigExplicitHOpObjectAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectAnnotate::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnNoButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnNoButtonDownAndMoveSwigExplicitHOpObjectAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectAnnotate::OnNoButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectAnnotate_OnKeyDownSwigExplicitHOpObjectAnnotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectAnnotate::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectAnnotate_finalize_text(void * jarg1) {
  HOpObjectAnnotate *arg1 = (HOpObjectAnnotate *) 0 ;
  SwigDirector_HOpObjectAnnotate *darg = 0;
  
  arg1 = (HOpObjectAnnotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectAnnotate *>(arg1);
  (darg)->finalize_text();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectAnnotate_director_connect(void *objarg, SwigDirector_HOpObjectAnnotate::SWIG_Callback0_t callback0, SwigDirector_HOpObjectAnnotate::SWIG_Callback1_t callback1, SwigDirector_HOpObjectAnnotate::SWIG_Callback2_t callback2, SwigDirector_HOpObjectAnnotate::SWIG_Callback3_t callback3, SwigDirector_HOpObjectAnnotate::SWIG_Callback4_t callback4, SwigDirector_HOpObjectAnnotate::SWIG_Callback5_t callback5, SwigDirector_HOpObjectAnnotate::SWIG_Callback6_t callback6, SwigDirector_HOpObjectAnnotate::SWIG_Callback7_t callback7, SwigDirector_HOpObjectAnnotate::SWIG_Callback8_t callback8, SwigDirector_HOpObjectAnnotate::SWIG_Callback9_t callback9, SwigDirector_HOpObjectAnnotate::SWIG_Callback10_t callback10, SwigDirector_HOpObjectAnnotate::SWIG_Callback11_t callback11, SwigDirector_HOpObjectAnnotate::SWIG_Callback12_t callback12, SwigDirector_HOpObjectAnnotate::SWIG_Callback13_t callback13, SwigDirector_HOpObjectAnnotate::SWIG_Callback14_t callback14, SwigDirector_HOpObjectAnnotate::SWIG_Callback15_t callback15, SwigDirector_HOpObjectAnnotate::SWIG_Callback16_t callback16, SwigDirector_HOpObjectAnnotate::SWIG_Callback17_t callback17, SwigDirector_HOpObjectAnnotate::SWIG_Callback18_t callback18, SwigDirector_HOpObjectAnnotate::SWIG_Callback19_t callback19, SwigDirector_HOpObjectAnnotate::SWIG_Callback20_t callback20, SwigDirector_HOpObjectAnnotate::SWIG_Callback21_t callback21, SwigDirector_HOpObjectAnnotate::SWIG_Callback22_t callback22, SwigDirector_HOpObjectAnnotate::SWIG_Callback23_t callback23, SwigDirector_HOpObjectAnnotate::SWIG_Callback24_t callback24, SwigDirector_HOpObjectAnnotate::SWIG_Callback25_t callback25) {
  HOpObjectAnnotate *obj = (HOpObjectAnnotate *)objarg;
  SwigDirector_HOpObjectAnnotate *director = dynamic_cast<SwigDirector_HOpObjectAnnotate *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_IntersectPolyline(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  float *arg3 = (float *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->IntersectPolyline(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_ProcessSelectionResults__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  float *arg3 = (float *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->ProcessSelectionResults(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_ProcessSelectionResults__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->ProcessSelectionResults(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_ProcessSelectionResults__SWIG_2(void * jarg1) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->ProcessSelectionResults();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_TestEnclosure(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  float *arg3 = (float *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->TestEnclosure(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_GetScreenVolume(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->GetScreenVolume(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByScreenVolume(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByScreenVolume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByScreenVolumeSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByScreenVolumeSwigPublic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByWorldVolume(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByWorldVolume(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByWorldVolumeSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByWorldVolumeSwigPublic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByEnclosure(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByEnclosure(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByEnclosureSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByEnclosureSwigPublic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByShell(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByShell(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_SelectByShellSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSmartSelItem *arg2 = (HSmartSelItem *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSmartSelItem *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->SelectByShellSwigPublic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_SetSelectMode(void * jarg1, int jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  int arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->SetSelectMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_GetWorldVolume(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int)(darg)->GetWorldVolume(arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_GrabSelectionSet(void * jarg1) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->GrabSelectionSet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_RestoreSelectionSet(void * jarg1) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->RestoreSelectionSet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_m_save_spriting_mode_set(void * jarg1, bool jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  bool arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  if (arg1) darg->m_save_spriting_mode = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpObjectClash_m_save_spriting_mode_get(void * jarg1) {
  bool jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  bool result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (bool) (darg->m_save_spriting_mode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_m_pClashSelection_set(void * jarg1, void * jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  if (arg1) darg->m_pClashSelection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectClash_m_pClashSelection_get(void * jarg1) {
  void * jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  HSelectionSet *result = 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (HSelectionSet *) (darg->m_pClashSelection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_m_SelectMode_set(void * jarg1, int jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  int arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  if (arg1) darg->m_SelectMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_m_SelectMode_get(void * jarg1) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int) (darg->m_SelectMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_m_IntersectPolylinesVisible_set(void * jarg1, int jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  int arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  if (arg1) darg->m_IntersectPolylinesVisible = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_m_IntersectPolylinesVisible_get(void * jarg1) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result = (int) (darg->m_IntersectPolylinesVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_m_TempSegKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  if (arg1) darg->m_TempSegKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HOpObjectClash_m_TempSegKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  HC_KEY result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  result =  (darg->m_TempSegKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_ClashDetect(void * jarg1, void * jarg2) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  SwigDirector_HOpObjectClash *darg = 0;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpObjectClash *>(arg1);
  (darg)->ClashDetect(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectClash__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpObjectClash *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpObjectClash *)new SwigDirector_HOpObjectClash(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectClash__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpObjectClash *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpObjectClash *)new SwigDirector_HOpObjectClash(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectClash__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpObjectClash *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpObjectClash *)new SwigDirector_HOpObjectClash(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpObjectClash(void * jarg1) {
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectClash_GetName(void * jarg1) {
  char * jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectClash_GetNameSwigExplicitHOpObjectClash(void * jarg1) {
  char * jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  result = (char *)(arg1)->HOpObjectClash::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonDownSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectClash::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonDownAndMoveSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectClash::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnLButtonUpSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectClash::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnKeyDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectClash_OnKeyDownSwigExplicitHOpObjectClash(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectClash *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectClash::OnKeyDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectClash_Clone(void * jarg1) {
  void * jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectClash_CloneSwigExplicitHOpObjectClash(void * jarg1) {
  void * jresult ;
  HOpObjectClash *arg1 = (HOpObjectClash *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectClash *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpObjectClash::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectClash_director_connect(void *objarg, SwigDirector_HOpObjectClash::SWIG_Callback0_t callback0, SwigDirector_HOpObjectClash::SWIG_Callback1_t callback1, SwigDirector_HOpObjectClash::SWIG_Callback2_t callback2, SwigDirector_HOpObjectClash::SWIG_Callback3_t callback3, SwigDirector_HOpObjectClash::SWIG_Callback4_t callback4, SwigDirector_HOpObjectClash::SWIG_Callback5_t callback5, SwigDirector_HOpObjectClash::SWIG_Callback6_t callback6, SwigDirector_HOpObjectClash::SWIG_Callback7_t callback7, SwigDirector_HOpObjectClash::SWIG_Callback8_t callback8, SwigDirector_HOpObjectClash::SWIG_Callback9_t callback9, SwigDirector_HOpObjectClash::SWIG_Callback10_t callback10, SwigDirector_HOpObjectClash::SWIG_Callback11_t callback11, SwigDirector_HOpObjectClash::SWIG_Callback12_t callback12, SwigDirector_HOpObjectClash::SWIG_Callback13_t callback13, SwigDirector_HOpObjectClash::SWIG_Callback14_t callback14, SwigDirector_HOpObjectClash::SWIG_Callback15_t callback15, SwigDirector_HOpObjectClash::SWIG_Callback16_t callback16, SwigDirector_HOpObjectClash::SWIG_Callback17_t callback17, SwigDirector_HOpObjectClash::SWIG_Callback18_t callback18, SwigDirector_HOpObjectClash::SWIG_Callback19_t callback19, SwigDirector_HOpObjectClash::SWIG_Callback20_t callback20, SwigDirector_HOpObjectClash::SWIG_Callback21_t callback21, SwigDirector_HOpObjectClash::SWIG_Callback22_t callback22, SwigDirector_HOpObjectClash::SWIG_Callback23_t callback23, SwigDirector_HOpObjectClash::SWIG_Callback24_t callback24, SwigDirector_HOpObjectClash::SWIG_Callback25_t callback25, SwigDirector_HOpObjectClash::SWIG_Callback26_t callback26, SwigDirector_HOpObjectClash::SWIG_Callback27_t callback27, SwigDirector_HOpObjectClash::SWIG_Callback28_t callback28, SwigDirector_HOpObjectClash::SWIG_Callback29_t callback29) {
  HOpObjectClash *obj = (HOpObjectClash *)objarg;
  SwigDirector_HOpObjectClash *director = dynamic_cast<SwigDirector_HOpObjectClash *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectRotate__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpObjectRotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpObjectRotate *)new SwigDirector_HOpObjectRotate(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectRotate__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpObjectRotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpObjectRotate *)new SwigDirector_HOpObjectRotate(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpObjectRotate__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpObjectRotate *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpObjectRotate *)new SwigDirector_HOpObjectRotate(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpObjectRotate(void * jarg1) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectRotate_GetName(void * jarg1) {
  char * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpObjectRotate_GetNameSwigExplicitHOpObjectRotate(void * jarg1) {
  char * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  result = (char *)(arg1)->HOpObjectRotate::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDownSwigExplicitHOpObjectRotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectRotate::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDownAndMoveSwigExplicitHOpObjectRotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectRotate::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonUpSwigExplicitHOpObjectRotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectRotate::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpObjectRotate_OnLButtonDblClkSwigExplicitHOpObjectRotate(void * jarg1, void * jarg2) {
  int jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpObjectRotate::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectRotate_Clone(void * jarg1) {
  void * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectRotate_CloneSwigExplicitHOpObjectRotate(void * jarg1) {
  void * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpObjectRotate::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroid_set(void * jarg1, void * jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_ptCentroid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroid_get(void * jarg1) {
  void * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (HPoint *)& (darg->m_ptCentroid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroidWorld_set(void * jarg1, void * jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_ptCentroidWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroidWorld_get(void * jarg1) {
  void * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (HPoint *)& (darg->m_ptCentroidWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroidViewpoint_set(void * jarg1, void * jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_ptCentroidViewpoint = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpObjectRotate_m_ptCentroidViewpoint_get(void * jarg1) {
  void * jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (HPoint *)& (darg->m_ptCentroidViewpoint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_radius_set(void * jarg1, float jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  float arg2 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HOpObjectRotate_m_radius_get(void * jarg1) {
  float jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  float result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (float) (darg->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_bTemporarySelection_set(void * jarg1, bool jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_bTemporarySelection = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpObjectRotate_m_bTemporarySelection_get(void * jarg1) {
  bool jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  bool result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (bool) (darg->m_bTemporarySelection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_m_bInitialMatrix_set(void * jarg1, bool jarg2) {
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  bool arg2 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  if (arg1) darg->m_bInitialMatrix = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpObjectRotate_m_bInitialMatrix_get(void * jarg1) {
  bool jresult ;
  HOpObjectRotate *arg1 = (HOpObjectRotate *) 0 ;
  SwigDirector_HOpObjectRotate *darg = 0;
  bool result;
  
  arg1 = (HOpObjectRotate *)jarg1; 
  darg = dynamic_cast<SwigDirector_HOpObjectRotate *>(arg1);
  result = (bool) (darg->m_bInitialMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpObjectRotate_director_connect(void *objarg, SwigDirector_HOpObjectRotate::SWIG_Callback0_t callback0, SwigDirector_HOpObjectRotate::SWIG_Callback1_t callback1, SwigDirector_HOpObjectRotate::SWIG_Callback2_t callback2, SwigDirector_HOpObjectRotate::SWIG_Callback3_t callback3, SwigDirector_HOpObjectRotate::SWIG_Callback4_t callback4, SwigDirector_HOpObjectRotate::SWIG_Callback5_t callback5, SwigDirector_HOpObjectRotate::SWIG_Callback6_t callback6, SwigDirector_HOpObjectRotate::SWIG_Callback7_t callback7, SwigDirector_HOpObjectRotate::SWIG_Callback8_t callback8, SwigDirector_HOpObjectRotate::SWIG_Callback9_t callback9, SwigDirector_HOpObjectRotate::SWIG_Callback10_t callback10, SwigDirector_HOpObjectRotate::SWIG_Callback11_t callback11, SwigDirector_HOpObjectRotate::SWIG_Callback12_t callback12, SwigDirector_HOpObjectRotate::SWIG_Callback13_t callback13, SwigDirector_HOpObjectRotate::SWIG_Callback14_t callback14, SwigDirector_HOpObjectRotate::SWIG_Callback15_t callback15, SwigDirector_HOpObjectRotate::SWIG_Callback16_t callback16, SwigDirector_HOpObjectRotate::SWIG_Callback17_t callback17, SwigDirector_HOpObjectRotate::SWIG_Callback18_t callback18, SwigDirector_HOpObjectRotate::SWIG_Callback19_t callback19, SwigDirector_HOpObjectRotate::SWIG_Callback20_t callback20, SwigDirector_HOpObjectRotate::SWIG_Callback21_t callback21, SwigDirector_HOpObjectRotate::SWIG_Callback22_t callback22, SwigDirector_HOpObjectRotate::SWIG_Callback23_t callback23, SwigDirector_HOpObjectRotate::SWIG_Callback24_t callback24, SwigDirector_HOpObjectRotate::SWIG_Callback25_t callback25) {
  HOpObjectRotate *obj = (HOpObjectRotate *)objarg;
  SwigDirector_HOpObjectRotate *director = dynamic_cast<SwigDirector_HOpObjectRotate *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectArea__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpSelectArea *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpSelectArea *)new SwigDirector_HOpSelectArea(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectArea__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpSelectArea *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpSelectArea *)new SwigDirector_HOpSelectArea(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectArea__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpSelectArea *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpSelectArea *)new SwigDirector_HOpSelectArea(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpSelectArea(void * jarg1) {
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  
  arg1 = (HOpSelectArea *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectArea_GetName(void * jarg1) {
  char * jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectArea *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectArea_GetNameSwigExplicitHOpSelectArea(void * jarg1) {
  char * jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectArea *)jarg1; 
  result = (char *)(arg1)->HOpSelectArea::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectArea_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectArea *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectArea_OnLButtonDownSwigExplicitHOpSelectArea(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectArea *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectArea::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectArea_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectArea *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectArea_OnLButtonUpSwigExplicitHOpSelectArea(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectArea *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectArea::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectArea_Clone(void * jarg1) {
  void * jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectArea *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectArea_CloneSwigExplicitHOpSelectArea(void * jarg1) {
  void * jresult ;
  HOpSelectArea *arg1 = (HOpSelectArea *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectArea *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpSelectArea::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectArea_director_connect(void *objarg, SwigDirector_HOpSelectArea::SWIG_Callback0_t callback0, SwigDirector_HOpSelectArea::SWIG_Callback1_t callback1, SwigDirector_HOpSelectArea::SWIG_Callback2_t callback2, SwigDirector_HOpSelectArea::SWIG_Callback3_t callback3, SwigDirector_HOpSelectArea::SWIG_Callback4_t callback4, SwigDirector_HOpSelectArea::SWIG_Callback5_t callback5, SwigDirector_HOpSelectArea::SWIG_Callback6_t callback6, SwigDirector_HOpSelectArea::SWIG_Callback7_t callback7, SwigDirector_HOpSelectArea::SWIG_Callback8_t callback8, SwigDirector_HOpSelectArea::SWIG_Callback9_t callback9, SwigDirector_HOpSelectArea::SWIG_Callback10_t callback10, SwigDirector_HOpSelectArea::SWIG_Callback11_t callback11, SwigDirector_HOpSelectArea::SWIG_Callback12_t callback12, SwigDirector_HOpSelectArea::SWIG_Callback13_t callback13, SwigDirector_HOpSelectArea::SWIG_Callback14_t callback14, SwigDirector_HOpSelectArea::SWIG_Callback15_t callback15, SwigDirector_HOpSelectArea::SWIG_Callback16_t callback16, SwigDirector_HOpSelectArea::SWIG_Callback17_t callback17, SwigDirector_HOpSelectArea::SWIG_Callback18_t callback18, SwigDirector_HOpSelectArea::SWIG_Callback19_t callback19, SwigDirector_HOpSelectArea::SWIG_Callback20_t callback20, SwigDirector_HOpSelectArea::SWIG_Callback21_t callback21, SwigDirector_HOpSelectArea::SWIG_Callback22_t callback22, SwigDirector_HOpSelectArea::SWIG_Callback23_t callback23, SwigDirector_HOpSelectArea::SWIG_Callback24_t callback24, SwigDirector_HOpSelectArea::SWIG_Callback25_t callback25) {
  HOpSelectArea *obj = (HOpSelectArea *)objarg;
  SwigDirector_HOpSelectArea *director = dynamic_cast<SwigDirector_HOpSelectArea *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectAperture__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpSelectAperture *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpSelectAperture *)new SwigDirector_HOpSelectAperture(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectAperture__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpSelectAperture *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpSelectAperture *)new SwigDirector_HOpSelectAperture(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectAperture__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpSelectAperture *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpSelectAperture *)new SwigDirector_HOpSelectAperture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpSelectAperture(void * jarg1) {
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectAperture_GetName(void * jarg1) {
  char * jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectAperture_GetNameSwigExplicitHOpSelectAperture(void * jarg1) {
  char * jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  result = (char *)(arg1)->HOpSelectAperture::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectAperture_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectAperture_OnLButtonDownSwigExplicitHOpSelectAperture(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectAperture::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectAperture_Clone(void * jarg1) {
  void * jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectAperture_CloneSwigExplicitHOpSelectAperture(void * jarg1) {
  void * jresult ;
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpSelectAperture::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectAperture_HandleSelection(void * jarg1, void * jarg2) {
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HEventInfo *arg2 = 0 ;
  SwigDirector_HOpSelectAperture *darg = 0;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpSelectAperture *>(arg1);
  (darg)->HandleSelection(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectAperture_HandleSelectionSwigExplicitHOpSelectAperture(void * jarg1, void * jarg2) {
  HOpSelectAperture *arg1 = (HOpSelectAperture *) 0 ;
  HEventInfo *arg2 = 0 ;
  SwigDirector_HOpSelectAperture *darg = 0;
  
  arg1 = (HOpSelectAperture *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return ;
  } 
  darg = dynamic_cast<SwigDirector_HOpSelectAperture *>(arg1);
  (darg)->HandleSelectionSwigPublic(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectAperture_director_connect(void *objarg, SwigDirector_HOpSelectAperture::SWIG_Callback0_t callback0, SwigDirector_HOpSelectAperture::SWIG_Callback1_t callback1, SwigDirector_HOpSelectAperture::SWIG_Callback2_t callback2, SwigDirector_HOpSelectAperture::SWIG_Callback3_t callback3, SwigDirector_HOpSelectAperture::SWIG_Callback4_t callback4, SwigDirector_HOpSelectAperture::SWIG_Callback5_t callback5, SwigDirector_HOpSelectAperture::SWIG_Callback6_t callback6, SwigDirector_HOpSelectAperture::SWIG_Callback7_t callback7, SwigDirector_HOpSelectAperture::SWIG_Callback8_t callback8, SwigDirector_HOpSelectAperture::SWIG_Callback9_t callback9, SwigDirector_HOpSelectAperture::SWIG_Callback10_t callback10, SwigDirector_HOpSelectAperture::SWIG_Callback11_t callback11, SwigDirector_HOpSelectAperture::SWIG_Callback12_t callback12, SwigDirector_HOpSelectAperture::SWIG_Callback13_t callback13, SwigDirector_HOpSelectAperture::SWIG_Callback14_t callback14, SwigDirector_HOpSelectAperture::SWIG_Callback15_t callback15, SwigDirector_HOpSelectAperture::SWIG_Callback16_t callback16, SwigDirector_HOpSelectAperture::SWIG_Callback17_t callback17, SwigDirector_HOpSelectAperture::SWIG_Callback18_t callback18, SwigDirector_HOpSelectAperture::SWIG_Callback19_t callback19, SwigDirector_HOpSelectAperture::SWIG_Callback20_t callback20, SwigDirector_HOpSelectAperture::SWIG_Callback21_t callback21, SwigDirector_HOpSelectAperture::SWIG_Callback22_t callback22, SwigDirector_HOpSelectAperture::SWIG_Callback23_t callback23, SwigDirector_HOpSelectAperture::SWIG_Callback24_t callback24, SwigDirector_HOpSelectAperture::SWIG_Callback25_t callback25, SwigDirector_HOpSelectAperture::SWIG_Callback26_t callback26) {
  HOpSelectAperture *obj = (HOpSelectAperture *)objarg;
  SwigDirector_HOpSelectAperture *director = dynamic_cast<SwigDirector_HOpSelectAperture *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolygon__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpSelectPolygon *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpSelectPolygon *)new SwigDirector_HOpSelectPolygon(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolygon__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpSelectPolygon *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpSelectPolygon *)new SwigDirector_HOpSelectPolygon(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolygon__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpSelectPolygon *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpSelectPolygon *)new SwigDirector_HOpSelectPolygon(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpSelectPolygon(void * jarg1) {
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectPolygon_GetName(void * jarg1) {
  char * jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectPolygon_GetNameSwigExplicitHOpSelectPolygon(void * jarg1) {
  char * jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  result = (char *)(arg1)->HOpSelectPolygon::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectPolygon_Clone(void * jarg1) {
  void * jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectPolygon_CloneSwigExplicitHOpSelectPolygon(void * jarg1) {
  void * jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpSelectPolygon::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolygon_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolygon_OnLButtonDblClkSwigExplicitHOpSelectPolygon(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectPolygon::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolygon_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolygon_OnLButtonDownSwigExplicitHOpSelectPolygon(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolygon *arg1 = (HOpSelectPolygon *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolygon *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectPolygon::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectPolygon_director_connect(void *objarg, SwigDirector_HOpSelectPolygon::SWIG_Callback0_t callback0, SwigDirector_HOpSelectPolygon::SWIG_Callback1_t callback1, SwigDirector_HOpSelectPolygon::SWIG_Callback2_t callback2, SwigDirector_HOpSelectPolygon::SWIG_Callback3_t callback3, SwigDirector_HOpSelectPolygon::SWIG_Callback4_t callback4, SwigDirector_HOpSelectPolygon::SWIG_Callback5_t callback5, SwigDirector_HOpSelectPolygon::SWIG_Callback6_t callback6, SwigDirector_HOpSelectPolygon::SWIG_Callback7_t callback7, SwigDirector_HOpSelectPolygon::SWIG_Callback8_t callback8, SwigDirector_HOpSelectPolygon::SWIG_Callback9_t callback9, SwigDirector_HOpSelectPolygon::SWIG_Callback10_t callback10, SwigDirector_HOpSelectPolygon::SWIG_Callback11_t callback11, SwigDirector_HOpSelectPolygon::SWIG_Callback12_t callback12, SwigDirector_HOpSelectPolygon::SWIG_Callback13_t callback13, SwigDirector_HOpSelectPolygon::SWIG_Callback14_t callback14, SwigDirector_HOpSelectPolygon::SWIG_Callback15_t callback15, SwigDirector_HOpSelectPolygon::SWIG_Callback16_t callback16, SwigDirector_HOpSelectPolygon::SWIG_Callback17_t callback17, SwigDirector_HOpSelectPolygon::SWIG_Callback18_t callback18, SwigDirector_HOpSelectPolygon::SWIG_Callback19_t callback19, SwigDirector_HOpSelectPolygon::SWIG_Callback20_t callback20, SwigDirector_HOpSelectPolygon::SWIG_Callback21_t callback21, SwigDirector_HOpSelectPolygon::SWIG_Callback22_t callback22, SwigDirector_HOpSelectPolygon::SWIG_Callback23_t callback23, SwigDirector_HOpSelectPolygon::SWIG_Callback24_t callback24, SwigDirector_HOpSelectPolygon::SWIG_Callback25_t callback25) {
  HOpSelectPolygon *obj = (HOpSelectPolygon *)objarg;
  SwigDirector_HOpSelectPolygon *director = dynamic_cast<SwigDirector_HOpSelectPolygon *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolyline__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpSelectPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpSelectPolyline *)new SwigDirector_HOpSelectPolyline(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolyline__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpSelectPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpSelectPolyline *)new SwigDirector_HOpSelectPolyline(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpSelectPolyline__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpSelectPolyline *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpSelectPolyline *)new SwigDirector_HOpSelectPolyline(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpSelectPolyline(void * jarg1) {
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectPolyline_GetName(void * jarg1) {
  char * jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpSelectPolyline_GetNameSwigExplicitHOpSelectPolyline(void * jarg1) {
  char * jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  result = (char *)(arg1)->HOpSelectPolyline::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectPolyline_Clone(void * jarg1) {
  void * jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpSelectPolyline_CloneSwigExplicitHOpSelectPolyline(void * jarg1) {
  void * jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpSelectPolyline::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolyline_OnLButtonDblClk(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpSelectPolyline_OnLButtonDblClkSwigExplicitHOpSelectPolyline(void * jarg1, void * jarg2) {
  int jresult ;
  HOpSelectPolyline *arg1 = (HOpSelectPolyline *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpSelectPolyline *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpSelectPolyline::OnLButtonDblClk(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpSelectPolyline_director_connect(void *objarg, SwigDirector_HOpSelectPolyline::SWIG_Callback0_t callback0, SwigDirector_HOpSelectPolyline::SWIG_Callback1_t callback1, SwigDirector_HOpSelectPolyline::SWIG_Callback2_t callback2, SwigDirector_HOpSelectPolyline::SWIG_Callback3_t callback3, SwigDirector_HOpSelectPolyline::SWIG_Callback4_t callback4, SwigDirector_HOpSelectPolyline::SWIG_Callback5_t callback5, SwigDirector_HOpSelectPolyline::SWIG_Callback6_t callback6, SwigDirector_HOpSelectPolyline::SWIG_Callback7_t callback7, SwigDirector_HOpSelectPolyline::SWIG_Callback8_t callback8, SwigDirector_HOpSelectPolyline::SWIG_Callback9_t callback9, SwigDirector_HOpSelectPolyline::SWIG_Callback10_t callback10, SwigDirector_HOpSelectPolyline::SWIG_Callback11_t callback11, SwigDirector_HOpSelectPolyline::SWIG_Callback12_t callback12, SwigDirector_HOpSelectPolyline::SWIG_Callback13_t callback13, SwigDirector_HOpSelectPolyline::SWIG_Callback14_t callback14, SwigDirector_HOpSelectPolyline::SWIG_Callback15_t callback15, SwigDirector_HOpSelectPolyline::SWIG_Callback16_t callback16, SwigDirector_HOpSelectPolyline::SWIG_Callback17_t callback17, SwigDirector_HOpSelectPolyline::SWIG_Callback18_t callback18, SwigDirector_HOpSelectPolyline::SWIG_Callback19_t callback19, SwigDirector_HOpSelectPolyline::SWIG_Callback20_t callback20, SwigDirector_HOpSelectPolyline::SWIG_Callback21_t callback21, SwigDirector_HOpSelectPolyline::SWIG_Callback22_t callback22, SwigDirector_HOpSelectPolyline::SWIG_Callback23_t callback23, SwigDirector_HOpSelectPolyline::SWIG_Callback24_t callback24, SwigDirector_HOpSelectPolyline::SWIG_Callback25_t callback25) {
  HOpSelectPolyline *obj = (HOpSelectPolyline *)objarg;
  SwigDirector_HOpSelectPolyline *director = dynamic_cast<SwigDirector_HOpSelectPolyline *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSelectionItem(void * jarg1) {
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HSelectionItem_GetName(void * jarg1) {
  char * jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (char *)((HSelectionItem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionItem_GetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = ((HSelectionItem const *)arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionItem_GetSegmentKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = ((HSelectionItem const *)arg1)->GetSegmentKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_Equals(void * jarg1, void * jarg2) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSelectionItem const *)arg1)->Equals((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_Highlight(void * jarg1) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (bool)(arg1)->Highlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_UnHighlight(void * jarg1) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (bool)(arg1)->UnHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_IsHighlighted(void * jarg1) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (bool)((HSelectionItem const *)arg1)->IsHighlighted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_Delete(void * jarg1) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (bool)(arg1)->Delete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_IsInstanced(void * jarg1) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (bool)((HSelectionItem const *)arg1)->IsInstanced();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionItem_GetIncludeCount(void * jarg1) {
  int jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  int result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (int)((HSelectionItem const *)arg1)->GetIncludeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HSelectionItem_GetIncludeKeys__SWIG_0(void * jarg1) {
  MVO_POINTER_SIZED_INT * jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (HC_KEY *)((HSelectionItem const *)arg1)->GetIncludeKeys();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionItem_GetIncludeKeys__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY *arg2 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  ((HSelectionItem const *)arg1)->GetIncludeKeys(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_QueryIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *arg3 = 0 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  result = (bool)(arg1)->QueryIncludeDependency(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionItem_UpdateIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, MVO_POINTER_SIZED_INT jarg4) {
  bool jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  HC_KEY arg4 ;
  bool result;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (bool)(arg1)->UpdateIncludeDependency(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionItem_GetFullPathCount(void * jarg1, void * jarg2) {
  int jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  int result;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (int)(arg1)->GetFullPathCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HSelectionItem_GetFullPathKeys__SWIG_0(void * jarg1, void * jarg2) {
  const MVO_POINTER_SIZED_INT * jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (HC_KEY *)(arg1)->GetFullPathKeys(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionItem_GetFullPathKeys__SWIG_1(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY *arg3 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  (arg1)->GetFullPathKeys(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionItem_SetTimeStamp(void * jarg1, float jarg2) {
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionItem *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTimeStamp(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionItem_GetTimeStamp(void * jarg1) {
  float jresult ;
  HSelectionItem *arg1 = (HSelectionItem *) 0 ;
  float result;
  
  arg1 = (HSelectionItem *)jarg1; 
  result = (float)(arg1)->GetTimeStamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSmartSelItem__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  HSmartSelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (HSmartSelItem *)new HSmartSelItem(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSmartSelItem__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  HSmartSelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (HSmartSelItem *)new HSmartSelItem(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSmartSelItem(void * jarg1) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HSmartSelItem_GetName(void * jarg1) {
  char * jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (char *)((HSmartSelItem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSmartSelItem_GetIncludeCount(void * jarg1) {
  int jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  int result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (int)((HSmartSelItem const *)arg1)->GetIncludeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HSmartSelItem_GetIncludeKeys__SWIG_0(void * jarg1) {
  MVO_POINTER_SIZED_INT * jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (HC_KEY *)((HSmartSelItem const *)arg1)->GetIncludeKeys();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmartSelItem_GetIncludeKeys__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HC_KEY *arg2 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  ((HSmartSelItem const *)arg1)->GetIncludeKeys(arg2);
}


SWIGEXPORT const MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HSmartSelItem_GetFullPathKeys__SWIG_0(void * jarg1, void * jarg2) {
  const MVO_POINTER_SIZED_INT * jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  result = (HC_KEY *)(arg1)->GetFullPathKeys(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmartSelItem_GetFullPathKeys__SWIG_1(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HC_KEY *arg3 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  (arg1)->GetFullPathKeys(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_Equals(void * jarg1, void * jarg2) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSmartSelItem const *)arg1)->Equals((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_Highlight(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)(arg1)->Highlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_UnHighlight(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)(arg1)->UnHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_IsHighlighted__SWIG_0(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)((HSmartSelItem const *)arg1)->IsHighlighted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_IsHighlighted__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  bool jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (bool)HSmartSelItem::IsHighlighted(arg1,(HSelectionSet const *)arg2,arg3,(HC_KEY const (*))arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_IsRegionHighlighted(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  bool jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)HSmartSelItem::IsRegionHighlighted(arg1,(HSelectionSet const *)arg2,arg3,(HC_KEY const (*))arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_Delete(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)(arg1)->Delete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_IsInstanced(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)((HSmartSelItem const *)arg1)->IsInstanced();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_QueryIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *arg3 = 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  result = (bool)(arg1)->QueryIncludeDependency(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_UpdateIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, MVO_POINTER_SIZED_INT jarg4) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  HC_KEY arg4 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (bool)(arg1)->UpdateIncludeDependency(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmartSelItem_UpdateIncludePath(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  int arg2 ;
  HC_KEY *arg3 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  (arg1)->UpdateIncludePath(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSmartSelItem_GetHighlightMode(void * jarg1) {
  int jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  int result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (int)(arg1)->GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmartSelItem_SetHighlightMode(void * jarg1, int jarg2) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HSelectionHighlightMode arg2 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  (arg1)->SetHighlightMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSmartSelItem_GetHighlightedRefListCount(void * jarg1) {
  int jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  int result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (int)(arg1)->GetHighlightedRefListCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmartSelItem_GetHighlightedRefList(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  HC_KEY *arg2 = (HC_KEY *) 0 ;
  
  arg1 = (HSmartSelItem *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  (arg1)->GetHighlightedRefList(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSmartSelItem_IsSegment(void * jarg1) {
  bool jresult ;
  HSmartSelItem *arg1 = (HSmartSelItem *) 0 ;
  bool result;
  
  arg1 = (HSmartSelItem *)jarg1; 
  result = (bool)(arg1)->IsSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRegionSelItem(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  void * jresult ;
  HShellObject *arg1 = 0 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  HRegionSelItem *result = 0 ;
  
  arg1 = (HShellObject *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return 0;
  } 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (HRegionSelItem *)new HRegionSelItem((HShellObject const &)*arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HRegionSelItem(void * jarg1) {
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  
  arg1 = (HRegionSelItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HRegionSelItem_GetName(void * jarg1) {
  char * jresult ;
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HRegionSelItem *)jarg1; 
  result = (char *)((HRegionSelItem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HRegionSelItem_GetRegion(void * jarg1) {
  int jresult ;
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  int result;
  
  arg1 = (HRegionSelItem *)jarg1; 
  result = (int)((HRegionSelItem const *)arg1)->GetRegion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRegionSelItem_Equals(void * jarg1, void * jarg2) {
  bool jresult ;
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HRegionSelItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HRegionSelItem const *)arg1)->Equals((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRegionSelItem_Highlight(void * jarg1) {
  bool jresult ;
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  bool result;
  
  arg1 = (HRegionSelItem *)jarg1; 
  result = (bool)(arg1)->Highlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRegionSelItem_UnHighlight(void * jarg1) {
  bool jresult ;
  HRegionSelItem *arg1 = (HRegionSelItem *) 0 ;
  bool result;
  
  arg1 = (HRegionSelItem *)jarg1; 
  result = (bool)(arg1)->UnHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSUBENTITY_FACES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x01;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSUBENTITY_VERTICES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x02;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSUBENTITY_EDGES_get() {
  int jresult ;
  int result;
  
  result = (int) 0x04;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSubentitySelItem__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int jarg7, int * jarg8, int * jarg9, bool jarg10, bool jarg11, bool jarg12, bool jarg13) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int arg7 ;
  int *arg8 ;
  int *arg9 ;
  bool arg10 ;
  bool arg11 ;
  bool arg12 ;
  bool arg13 ;
  HSubentitySelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = jarg12 ? true : false; 
  arg13 = jarg13 ? true : false; 
  result = (HSubentitySelItem *)new HSubentitySelItem(arg1,arg2,arg3,arg4,arg5,(int const (*))arg6,arg7,(int const (*))arg8,(int const (*))arg9,arg10,arg11,arg12,arg13);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSubentitySelItem__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int jarg7, int * jarg8, int * jarg9, bool jarg10, bool jarg11, bool jarg12) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int arg7 ;
  int *arg8 ;
  int *arg9 ;
  bool arg10 ;
  bool arg11 ;
  bool arg12 ;
  HSubentitySelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = jarg12 ? true : false; 
  result = (HSubentitySelItem *)new HSubentitySelItem(arg1,arg2,arg3,arg4,arg5,(int const (*))arg6,arg7,(int const (*))arg8,(int const (*))arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSubentitySelItem__SWIG_2(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int jarg7, int * jarg8, int * jarg9, bool jarg10, bool jarg11) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int arg7 ;
  int *arg8 ;
  int *arg9 ;
  bool arg10 ;
  bool arg11 ;
  HSubentitySelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (HSubentitySelItem *)new HSubentitySelItem(arg1,arg2,arg3,arg4,arg5,(int const (*))arg6,arg7,(int const (*))arg8,(int const (*))arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSubentitySelItem__SWIG_3(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int jarg7, int * jarg8, int * jarg9, bool jarg10) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int arg7 ;
  int *arg8 ;
  int *arg9 ;
  bool arg10 ;
  HSubentitySelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (HSubentitySelItem *)new HSubentitySelItem(arg1,arg2,arg3,arg4,arg5,(int const (*))arg6,arg7,(int const (*))arg8,(int const (*))arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSubentitySelItem__SWIG_4(MVO_POINTER_SIZED_INT jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int jarg7, int * jarg8, int * jarg9) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int arg7 ;
  int *arg8 ;
  int *arg9 ;
  HSubentitySelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = (int *)jarg9; 
  result = (HSubentitySelItem *)new HSubentitySelItem(arg1,arg2,arg3,arg4,arg5,(int const (*))arg6,arg7,(int const (*))arg8,(int const (*))arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSubentitySelItem(void * jarg1) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HSubentitySelItem_GetName(void * jarg1) {
  char * jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (char *)((HSubentitySelItem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_Equals(void * jarg1, void * jarg2) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSubentitySelItem const *)arg1)->Equals((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_Similar(void * jarg1, void * jarg2) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSubentitySelItem const *)arg1)->Similar((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_Highlight(void * jarg1) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (bool)(arg1)->Highlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_UnHighlight__SWIG_0(void * jarg1) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (bool)(arg1)->UnHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_UnHighlight__SWIG_1(void * jarg1, void * jarg2) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  HSubentitySelItem *arg2 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (HSubentitySelItem *)jarg2; 
  result = (bool)(arg1)->UnHighlight((HSubentitySelItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_IsEmpty(void * jarg1) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (bool)(arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_Delete(void * jarg1) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (bool)(arg1)->Delete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSubentitySelItem_GetFaceCount(void * jarg1) {
  int jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (int)((HSubentitySelItem const *)arg1)->GetFaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_GetFaces(void * jarg1, int * jarg2) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int *arg2 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->GetFaces(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSubentitySelItem_GetVertexCount(void * jarg1) {
  int jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (int)((HSubentitySelItem const *)arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_GetVertices(void * jarg1, int * jarg2, int * jarg3) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int *arg2 ;
  int *arg3 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->GetVertices(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSubentitySelItem_MaintainMaps__SWIG_0(void * jarg1) {
  bool jresult ;
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool result;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  result = (bool)(arg1)->MaintainMaps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_MaintainMaps__SWIG_1(void * jarg1, bool jarg2) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  bool arg2 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->MaintainMaps(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_GetMapCounts(void * jarg1, int * jarg2, int * jarg3) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->GetMapCounts(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_GetMaps(void * jarg1, int * jarg2, int * jarg3) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  int *arg2 ;
  int *arg3 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->GetMaps(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSubentitySelItem_MergeMaps(void * jarg1, void * jarg2) {
  HSubentitySelItem *arg1 = (HSubentitySelItem *) 0 ;
  HSubentitySelItem *arg2 = (HSubentitySelItem *) 0 ;
  
  arg1 = (HSubentitySelItem *)jarg1; 
  arg2 = (HSubentitySelItem *)jarg2; 
  (arg1)->MergeMaps(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOldSelItem(MVO_POINTER_SIZED_INT jarg1, void * jarg2, char * jarg3, MVO_POINTER_SIZED_INT jarg4, MVO_POINTER_SIZED_INT jarg5) {
  void * jresult ;
  HC_KEY arg1 ;
  HSelectionSet *arg2 = (HSelectionSet *) 0 ;
  char *arg3 = (char *) 0 ;
  HC_KEY arg4 ;
  HC_KEY arg5 ;
  HOldSelItem *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HSelectionSet *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  result = (HOldSelItem *)new HOldSelItem(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOldSelItem(void * jarg1) {
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  
  arg1 = (HOldSelItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOldSelItem_GetName(void * jarg1) {
  char * jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (char *)((HOldSelItem const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_Equals(void * jarg1, void * jarg2) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HOldSelItem const *)arg1)->Equals((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_Highlight(void * jarg1) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (bool)(arg1)->Highlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_UnHighlight(void * jarg1) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (bool)(arg1)->UnHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_IsHighlighted(void * jarg1) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (bool)((HOldSelItem const *)arg1)->IsHighlighted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_Delete(void * jarg1) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (bool)(arg1)->Delete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_IsInstanced(void * jarg1) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (bool)((HOldSelItem const *)arg1)->IsInstanced();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOldSelItem_GetIncludeCount(void * jarg1) {
  int jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  int result;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (int)((HOldSelItem const *)arg1)->GetIncludeCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT * SWIGSTDCALL CSharp_HOldSelItem_GetIncludeKeys__SWIG_0(void * jarg1) {
  MVO_POINTER_SIZED_INT * jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  HC_KEY *result = 0 ;
  
  arg1 = (HOldSelItem *)jarg1; 
  result = (HC_KEY *)((HOldSelItem const *)arg1)->GetIncludeKeys();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOldSelItem_GetIncludeKeys__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  HC_KEY *arg2 ;
  
  arg1 = (HOldSelItem *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  ((HOldSelItem const *)arg1)->GetIncludeKeys(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_QueryIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT * jarg3) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY *arg3 = 0 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  result = (bool)(arg1)->QueryIncludeDependency(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOldSelItem_UpdateIncludeDependency(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, MVO_POINTER_SIZED_INT jarg4) {
  bool jresult ;
  HOldSelItem *arg1 = (HOldSelItem *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  HC_KEY arg4 ;
  bool result;
  
  arg1 = (HOldSelItem *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  result = (bool)(arg1)->UpdateIncludeDependency(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_pView_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_pView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_pView_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HBaseView *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HBaseView *) (darg->m_pView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_pSelItemsList_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelList *arg2 = (HSelList *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelList *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_pSelItemsList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_pSelItemsList_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HSelList *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HSelList *) (darg->m_pSelItemsList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_pHighlightSegsHash_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_pHighlightSegsHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_pHighlightSegsHash_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  vhash_s *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (vhash_s *) (darg->m_pHighlightSegsHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_SelectionSegment_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_SelectionSegment = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_m_SelectionSegment_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result =  (darg->m_SelectionSegment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_TransparencyStyle_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_TransparencyStyle = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_m_TransparencyStyle_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result =  (darg->m_TransparencyStyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_selectedFaceColor_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = (HPixelRGBA *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_selectedFaceColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_selectedFaceColor_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HPixelRGBA *)& (darg->m_selectedFaceColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_selectedEdgeColor_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = (HPixelRGBA *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_selectedEdgeColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_selectedEdgeColor_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HPixelRGBA *)& (darg->m_selectedEdgeColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_selectedCutEdgeColor_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = (HPixelRGBA *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_selectedCutEdgeColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_selectedCutEdgeColor_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HPixelRGBA *)& (darg->m_selectedCutEdgeColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_selectedCutFaceColor_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = (HPixelRGBA *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_selectedCutFaceColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_selectedCutFaceColor_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HPixelRGBA *)& (darg->m_selectedCutFaceColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_selectedMarkerColor_set(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = (HPixelRGBA *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_selectedMarkerColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_m_selectedMarkerColor_get(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HPixelRGBA *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HPixelRGBA *)& (darg->m_selectedMarkerColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_fselectedEdgeWeight_set(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_fselectedEdgeWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_m_fselectedEdgeWeight_get(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (float) (darg->m_fselectedEdgeWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_fselectedMarkerSize_set(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_fselectedMarkerSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_m_fselectedMarkerSize_get(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (float) (darg->m_fselectedMarkerSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bForceGrayScale_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bForceGrayScale = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bForceGrayScale_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bForceGrayScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bForceInvisible_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bForceInvisible = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bForceInvisible_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bForceInvisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bAllowDisplacement_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bAllowDisplacement = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bAllowDisplacement_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bAllowDisplacement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionEdges_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bHighlightRegionEdges = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionEdges_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bHighlightRegionEdges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightAnnotations_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bHighlightAnnotations = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightAnnotations_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bHighlightAnnotations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_set(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionEdgeHighlightMode arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionEdgeHighlightMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bHighlightRegionEdgesAutoVisibility = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_get(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HRegionEdgeHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HRegionEdgeHighlightMode) (darg->m_bHighlightRegionEdgesAutoVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionFacesAutoVisibility_set(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionFaceHighlightMode arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionFaceHighlightMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bHighlightRegionFacesAutoVisibility = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_m_bHighlightRegionFacesAutoVisibility_get(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HRegionFaceHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HRegionFaceHighlightMode) (darg->m_bHighlightRegionFacesAutoVisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_HighlightMode_set(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionHighlightMode arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_HighlightMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_m_HighlightMode_get(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  HSelectionHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (HSelectionHighlightMode) (darg->m_HighlightMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_fTransmission_set(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_fTransmission = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_m_fTransmission_get(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (float) (darg->m_fTransmission);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bSortSelectionList_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bSortSelectionList = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bSortSelectionList_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bSortSelectionList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bNotify_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bNotify = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bNotify_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bNotify);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_m_bUseDefinedHighlight_set(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  if (arg1) darg->m_bUseDefinedHighlight = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_m_bUseDefinedHighlight_get(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  result = (bool) (darg->m_bUseDefinedHighlight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateTransparency__SWIG_0(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  (darg)->UpdateTransparency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_0(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  (darg)->UpdateTransparencySwigPublic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateTransparency__SWIG_1(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  (darg)->UpdateTransparency();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_1(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  SwigDirector_HSelectionSet *darg = 0;
  
  arg1 = (HSelectionSet *)jarg1; 
  darg = dynamic_cast<SwigDirector_HSelectionSet *>(arg1);
  (darg)->UpdateTransparencySwigPublic();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSelectionSet__SWIG_0(void * jarg1, bool jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  bool arg2 ;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (HSelectionSet *)new SwigDirector_HSelectionSet(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSelectionSet__SWIG_1(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSelectionSet *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSelectionSet *)new SwigDirector_HSelectionSet(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSelectionSet(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Init(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_InitSwigExplicitHSelectionSet(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->HSelectionSet::Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->Select(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->HSelectionSet::Select(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  (arg1)->Select(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  (arg1)->HSelectionSet::Select(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_2(void * jarg1, void * jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Select(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_2(void * jarg1, void * jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HSelectionSet::Select(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_3(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  (arg1)->Select(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_3(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  (arg1)->HSelectionSet::Select(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectRegion(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectRegionSwigExplicitHSelectionSet(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->HSelectionSet::SelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentity__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->HSelectionSet::SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentity__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  (arg1)->SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  (arg1)->HSelectionSet::SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentity__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  (arg1)->SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  (arg1)->HSelectionSet::SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentity__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  (arg1)->SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  (arg1)->HSelectionSet::SelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentity__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SelectSubentity(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->HSelectionSet::SelectSubentity(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, MVO_POINTER_SIZED_INT jarg4, MVO_POINTER_SIZED_INT jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY arg4 ;
  HC_KEY arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Select(arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, MVO_POINTER_SIZED_INT jarg4, MVO_POINTER_SIZED_INT jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY arg4 ;
  HC_KEY arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->HSelectionSet::Select(arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Select__SWIG_5(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, MVO_POINTER_SIZED_INT jarg4, MVO_POINTER_SIZED_INT jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY arg4 ;
  HC_KEY arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  (arg1)->Select(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_5(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3, MVO_POINTER_SIZED_INT jarg4, MVO_POINTER_SIZED_INT jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY arg4 ;
  HC_KEY arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  (arg1)->HSelectionSet::Select(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DeSelect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HSelectionSet::DeSelect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  (arg1)->DeSelect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HSelectionSet::DeSelect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DeSelect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->HSelectionSet::DeSelect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  (arg1)->DeSelect(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  (arg1)->HSelectionSet::DeSelect(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_4(void * jarg1, void * jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DeSelect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_4(void * jarg1, void * jarg2, bool jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool arg3 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->HSelectionSet::DeSelect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelect__SWIG_5(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  (arg1)->DeSelect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_5(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  (arg1)->HSelectionSet::DeSelect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegion__SWIG_0(void * jarg1, void * jarg2, int jarg3, bool jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DeSelectRegion((HShellObject const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_0(void * jarg1, void * jarg2, int jarg3, bool jarg4) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->HSelectionSet::DeSelectRegion((HShellObject const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegion__SWIG_1(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->DeSelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_1(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, bool jarg6) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->HSelectionSet::DeSelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegion__SWIG_2(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->DeSelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_2(void * jarg1, void * jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HShellObject *arg2 = 0 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HShellObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HShellObject const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->HSelectionSet::DeSelectRegion((HShellObject const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSubentity__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->DeSelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->HSelectionSet::DeSelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSubentity__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  (arg1)->DeSelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  (arg1)->HSelectionSet::DeSelectSubentity(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOC__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (bool)(arg1)->SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8, bool jarg9) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool arg9 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (bool)(arg1)->HSelectionSet::SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOC__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  result = (bool)(arg1)->SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7, int * jarg8) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  int *arg8 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (int *)jarg8; 
  result = (bool)(arg1)->HSelectionSet::SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7,(int const (*))arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOC__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  result = (bool)(arg1)->SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6, int * jarg7) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  int *arg7 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  arg7 = (int *)jarg7; 
  result = (bool)(arg1)->HSelectionSet::SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6,(int const (*))arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOC__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  result = (bool)(arg1)->SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5, int * jarg6) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  int *arg6 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int *)jarg6; 
  result = (bool)(arg1)->HSelectionSet::SelectSubentityOOC(arg2,arg3,arg4,arg5,(int const (*))arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOC__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SelectSubentityOOC(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->HSelectionSet::SelectSubentityOOC(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeSelectOOC__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->DeSelectOOC(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, bool jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->HSelectionSet::DeSelectOOC(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeSelectOOC__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (bool)(arg1)->DeSelectOOC(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (bool)(arg1)->HSelectionSet::DeSelectOOC(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdges__SWIG_0(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HighlightRegionEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_0(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::HighlightRegionEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdges__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HighlightRegionEdges(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::HighlightRegionEdges(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_HighlightAnnotations__SWIG_0(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HighlightAnnotations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_0(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::HighlightAnnotations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightAnnotations__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HighlightAnnotations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::HighlightAnnotations(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_0(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionEdgeHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRegionEdgeHighlightMode)(arg1)->HighlightRegionEdgesAutoVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionEdgeHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRegionEdgeHighlightMode)(arg1)->HSelectionSet::HighlightRegionEdgesAutoVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HighlightRegionEdgesAutoVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::HighlightRegionEdgesAutoVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_2(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionEdgeHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionEdgeHighlightMode)jarg2; 
  (arg1)->HighlightRegionEdgesAutoVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_2(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionEdgeHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionEdgeHighlightMode)jarg2; 
  (arg1)->HSelectionSet::HighlightRegionEdgesAutoVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_0(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionFaceHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionFaceHighlightMode)jarg2; 
  (arg1)->HighlightRegionFacesAutoVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionFaceHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRegionFaceHighlightMode)jarg2; 
  (arg1)->HSelectionSet::HighlightRegionFacesAutoVisibility(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_1(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionFaceHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRegionFaceHighlightMode)(arg1)->HighlightRegionFacesAutoVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRegionFaceHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRegionFaceHighlightMode)(arg1)->HSelectionSet::HighlightRegionFacesAutoVisibility();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectAll(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->DeSelectAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_DeSelectAllSwigExplicitHSelectionSet(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->HSelectionSet::DeSelectAll();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelected__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->IsSelected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::IsSelected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelected__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (bool)((HSelectionSet const *)arg1)->IsSelected(arg2,arg3,(HC_KEY const (*))arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::IsSelected(arg2,arg3,(HC_KEY const (*))arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelected__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->IsSelected((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_2(void * jarg1, void * jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::IsSelected((HSelectionItem const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsRegionSelected(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((HSelectionSet const *)arg1)->IsRegionSelected(arg2,arg3,(HC_KEY const (*))arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsRegionSelectedSwigExplicitHSelectionSet(void * jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3, MVO_POINTER_SIZED_INT * jarg4, int jarg5) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY *arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HC_KEY *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::IsRegionSelected(arg2,arg3,(HC_KEY const (*))arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsHighlightSegment(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->IsHighlightSegment(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_IsHighlightSegmentSwigExplicitHSelectionSet(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::IsHighlightSegment(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionFaceColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectionFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionFaceColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::SetSelectionFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetGrayScale(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGrayScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetGrayScaleSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetGrayScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetInvisible(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetInvisibleSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetInvisible(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetInvisible(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetInvisibleSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowDisplacement(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowDisplacement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowDisplacementSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetAllowDisplacement(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowDisplacement(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetAllowDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowDisplacementSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetAllowDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionFaceColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->GetSelectionFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionFaceColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::GetSelectionFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionEdgeColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectionEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionEdgeColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::SetSelectionEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionEdgeColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->GetSelectionEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionEdgeColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::GetSelectionEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionCutEdgeColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectionCutEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionCutEdgeColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::SetSelectionCutEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionCutEdgeColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->GetSelectionCutEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionCutEdgeColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::GetSelectionCutEdgeColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionCutFaceColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectionCutFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionCutFaceColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::SetSelectionCutFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionCutFaceColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->GetSelectionCutFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionCutFaceColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::GetSelectionCutFaceColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionMarkerColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->SetSelectionMarkerColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionMarkerColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::SetSelectionMarkerColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionMarkerColor(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->GetSelectionMarkerColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionMarkerColorSwigExplicitHSelectionSet(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPixelRGBA *arg2 = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPixelRGBA *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPixelRGBA & type is null", 0);
    return ;
  } 
  (arg1)->HSelectionSet::GetSelectionMarkerColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionEdgeWeight(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSelectionEdgeWeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionEdgeWeightSwigExplicitHSelectionSet(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->HSelectionSet::SetSelectionEdgeWeight(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_GetSelectionEdgeWeight(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (float)(arg1)->GetSelectionEdgeWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_GetSelectionEdgeWeightSwigExplicitHSelectionSet(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (float)(arg1)->HSelectionSet::GetSelectionEdgeWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionMarkerSize(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSelectionMarkerSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionMarkerSizeSwigExplicitHSelectionSet(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->HSelectionSet::SetSelectionMarkerSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_GetSelectionMarkerSize(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (float)(arg1)->GetSelectionMarkerSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HSelectionSet_GetSelectionMarkerSizeSwigExplicitHSelectionSet(void * jarg1) {
  float jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (float)(arg1)->HSelectionSet::GetSelectionMarkerSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_GetAt(void * jarg1, unsigned int jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  unsigned int arg2 ;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->GetAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_GetAtSwigExplicitHSelectionSet(void * jarg1, unsigned int jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  unsigned int arg2 ;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->HSelectionSet::GetAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAll(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY *arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  result = (bool)(arg1)->GetAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllSwigExplicitHSelectionSet(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY *arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  result = (bool)(arg1)->HSelectionSet::GetAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetSelectionItemAt(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  unsigned int arg2 ;
  HSelectionItem *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (HSelectionItem *)(arg1)->GetSelectionItemAt(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetSelectionItem(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  HSelectionItem *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (HSelectionItem *)(arg1)->GetSelectionItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HSelectionSet_GetSize(void * jarg1) {
  unsigned int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  unsigned int result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (unsigned int)((HSelectionSet const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_Reset(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_ResetSwigExplicitHSelectionSet(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->HSelectionSet::Reset();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeleteSelection__SWIG_0(void * jarg1, bool jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->DeleteSelection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_0(void * jarg1, bool jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->HSelectionSet::DeleteSelection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeleteSelection__SWIG_1(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->DeleteSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_1(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::DeleteSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_GetHighlightStyle(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = ((HSelectionSet const *)arg1)->GetHighlightStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetHighlightStyle(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetHighlightStyle(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HSelectionSet_GetHighlightStyleName(void * jarg1) {
  char * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  char *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (char *)((HSelectionSet const *)arg1)->GetHighlightStyleName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeInstance__SWIG_0(void * jarg1, void * jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionItem *arg2 = (HSelectionItem *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionItem *)jarg2; 
  result = (bool)(arg1)->DeInstance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_DeInstance__SWIG_1(void * jarg1, unsigned int jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->DeInstance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubwindowPenetration(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSubwindowPenetration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubwindowPenetrationSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetSubwindowPenetration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubwindowPenetration(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubwindowPenetration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubwindowPenetrationSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSubwindowPenetration(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowSubentitySelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetAllowSubentitySelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowSubentitySelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetAllowSubentitySelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowSubentitySelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowSubentitySelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowSubentitySelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetAllowSubentitySelection(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetSelectionLevel(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectLevel result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HSelectLevel)((HSelectionSet const *)arg1)->GetSelectionLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetSelectionLevelSwigExplicitHSelectionSet(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectLevel result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HSelectLevel)((HSelectionSet const *)arg1)->HSelectionSet::GetSelectionLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionLevel(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectLevel arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectLevel)jarg2; 
  (arg1)->SetSelectionLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectionLevelSwigExplicitHSelectionSet(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectLevel arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectLevel)jarg2; 
  (arg1)->HSelectionSet::SetSelectionLevel(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowEntitySelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetAllowEntitySelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowEntitySelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetAllowEntitySelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowEntitySelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowEntitySelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowEntitySelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetAllowEntitySelection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowRegionSelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->GetAllowRegionSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowRegionSelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::GetAllowRegionSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowRegionSelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowRegionSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowRegionSelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetAllowRegionSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_RegisterHighlightSeg(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  (arg1)->RegisterHighlightSeg(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UnRegisterHighlightSeg(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  (arg1)->UnRegisterHighlightSeg(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetHighlightMode(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HSelectionHighlightMode)(arg1)->GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetHighlightModeSwigExplicitHSelectionSet(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionHighlightMode result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HSelectionHighlightMode)(arg1)->HSelectionSet::GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetHighlightMode(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  (arg1)->SetHighlightMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetHighlightModeSwigExplicitHSelectionSet(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionHighlightMode arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HSelectionHighlightMode)jarg2; 
  (arg1)->HSelectionSet::SetHighlightMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetHighlightTransparency(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHighlightTransparency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetHighlightTransparencySwigExplicitHSelectionSet(void * jarg1, float jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  float arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->HSelectionSet::SetHighlightTransparency(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_GetSelectionSegment(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (arg1)->GetSelectionSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSelectionSet_GetSelectionSegmentSwigExplicitHSelectionSet(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (arg1)->HSelectionSet::GetSelectionSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_ToggleHighlightStyle(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->ToggleHighlightStyle();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetIsSelection(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->GetIsSelection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetIsSelectionSwigExplicitHSelectionSet(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->HSelectionSet::GetIsSelection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetReferenceSelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->GetReferenceSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetReferenceSelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::GetReferenceSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetReferenceSelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetReferenceSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetReferenceSelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetReferenceSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetUseDefinedHighlight(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseDefinedHighlight(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetUseDefinedHighlight(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetUseDefinedHighlight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetReferenceSelectionType(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRefSelType arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRefSelType)jarg2; 
  (arg1)->SetReferenceSelectionType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetReferenceSelectionTypeSwigExplicitHSelectionSet(void * jarg1, int jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRefSelType arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HRefSelType)jarg2; 
  (arg1)->HSelectionSet::SetReferenceSelectionType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetReferenceSelectionType(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRefSelType result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRefSelType)(arg1)->GetReferenceSelectionType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetReferenceSelectionTypeSwigExplicitHSelectionSet(void * jarg1) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HRefSelType result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HRefSelType)(arg1)->HSelectionSet::GetReferenceSelectionType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateHighlightStyle(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->UpdateHighlightStyle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateHighlightStyleSwigExplicitHSelectionSet(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->HSelectionSet::UpdateHighlightStyle();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetPShowCache(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HVHashPShowCache *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HVHashPShowCache *)(arg1)->GetPShowCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetPShowCache(void * jarg1, void * jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HVHashPShowCache *arg2 = (HVHashPShowCache *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HVHashPShowCache *)jarg2; 
  (arg1)->SetPShowCache(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_FlushPShowCache(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->FlushPShowCache();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_UpdateHighlighting(void * jarg1) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  (arg1)->UpdateHighlighting();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetView(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HBaseView *)(arg1)->GetView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSortSelectionList(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSortSelectionList(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSortSelectionList(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSortSelectionList();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityFaceSelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSubentityFaceSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityFaceSelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetSubentityFaceSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityFaceSelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubentityFaceSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityFaceSelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSubentityFaceSelection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityEdgeSelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSubentityEdgeSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityEdgeSelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetSubentityEdgeSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityEdgeSelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubentityEdgeSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityEdgeSelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSubentityEdgeSelection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityVertexSelection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSubentityVertexSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityVertexSelectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetSubentityVertexSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityVertexSelection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubentityVertexSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityVertexSelectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSubentityVertexSelection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowSubentityDeselection(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowSubentityDeselection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetAllowSubentityDeselectionSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetAllowSubentityDeselection(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowSubentityDeselection(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetAllowSubentityDeselection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetAllowSubentityDeselectionSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetAllowSubentityDeselection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityTracking(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSubentityTracking(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSubentityTrackingSwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSubentityTracking(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityTracking(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->GetSubentityTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSubentityTrackingSwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)(arg1)->HSelectionSet::GetSubentityTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_GetSelectionBounding(void * jarg1, void * jarg2, void * jarg3) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  ((HSelectionSet const *)arg1)->GetSelectionBounding(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectWillNotify(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSelectWillNotify(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_SetSelectWillNotifySwigExplicitHSelectionSet(void * jarg1, bool jarg2) {
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool arg2 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HSelectionSet::SetSelectWillNotify(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSelectWillNotify(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->GetSelectWillNotify();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSelectionSet_GetSelectWillNotifySwigExplicitHSelectionSet(void * jarg1) {
  bool jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  bool result;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (bool)((HSelectionSet const *)arg1)->HSelectionSet::GetSelectWillNotify();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSelectionSet_GetAttrLookupID(void * jarg1, char * jarg2) {
  int jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (HSelectionSet *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->GetAttrLookupID((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetSelectionSegmentConditionInfo(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HSelectionSegmentConditionInfo *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HSelectionSegmentConditionInfo *)(arg1)->GetSelectionSegmentConditionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSelectionSet_GetConditionStyleKeyInfo(void * jarg1) {
  void * jresult ;
  HSelectionSet *arg1 = (HSelectionSet *) 0 ;
  HConditionStyleKeyInfoHash *result = 0 ;
  
  arg1 = (HSelectionSet *)jarg1; 
  result = (HConditionStyleKeyInfoHash *)(arg1)->GetConditionStyleKeyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSelectionSet_director_connect(void *objarg, SwigDirector_HSelectionSet::SWIG_Callback0_t callback0, SwigDirector_HSelectionSet::SWIG_Callback1_t callback1, SwigDirector_HSelectionSet::SWIG_Callback2_t callback2, SwigDirector_HSelectionSet::SWIG_Callback3_t callback3, SwigDirector_HSelectionSet::SWIG_Callback4_t callback4, SwigDirector_HSelectionSet::SWIG_Callback5_t callback5, SwigDirector_HSelectionSet::SWIG_Callback6_t callback6, SwigDirector_HSelectionSet::SWIG_Callback7_t callback7, SwigDirector_HSelectionSet::SWIG_Callback8_t callback8, SwigDirector_HSelectionSet::SWIG_Callback9_t callback9, SwigDirector_HSelectionSet::SWIG_Callback10_t callback10, SwigDirector_HSelectionSet::SWIG_Callback11_t callback11, SwigDirector_HSelectionSet::SWIG_Callback12_t callback12, SwigDirector_HSelectionSet::SWIG_Callback13_t callback13, SwigDirector_HSelectionSet::SWIG_Callback14_t callback14, SwigDirector_HSelectionSet::SWIG_Callback15_t callback15, SwigDirector_HSelectionSet::SWIG_Callback16_t callback16, SwigDirector_HSelectionSet::SWIG_Callback17_t callback17, SwigDirector_HSelectionSet::SWIG_Callback18_t callback18, SwigDirector_HSelectionSet::SWIG_Callback19_t callback19, SwigDirector_HSelectionSet::SWIG_Callback20_t callback20, SwigDirector_HSelectionSet::SWIG_Callback21_t callback21, SwigDirector_HSelectionSet::SWIG_Callback22_t callback22, SwigDirector_HSelectionSet::SWIG_Callback23_t callback23, SwigDirector_HSelectionSet::SWIG_Callback24_t callback24, SwigDirector_HSelectionSet::SWIG_Callback25_t callback25, SwigDirector_HSelectionSet::SWIG_Callback26_t callback26, SwigDirector_HSelectionSet::SWIG_Callback27_t callback27, SwigDirector_HSelectionSet::SWIG_Callback28_t callback28, SwigDirector_HSelectionSet::SWIG_Callback29_t callback29, SwigDirector_HSelectionSet::SWIG_Callback30_t callback30, SwigDirector_HSelectionSet::SWIG_Callback31_t callback31, SwigDirector_HSelectionSet::SWIG_Callback32_t callback32, SwigDirector_HSelectionSet::SWIG_Callback33_t callback33, SwigDirector_HSelectionSet::SWIG_Callback34_t callback34, SwigDirector_HSelectionSet::SWIG_Callback35_t callback35, SwigDirector_HSelectionSet::SWIG_Callback36_t callback36, SwigDirector_HSelectionSet::SWIG_Callback37_t callback37, SwigDirector_HSelectionSet::SWIG_Callback38_t callback38, SwigDirector_HSelectionSet::SWIG_Callback39_t callback39, SwigDirector_HSelectionSet::SWIG_Callback40_t callback40, SwigDirector_HSelectionSet::SWIG_Callback41_t callback41, SwigDirector_HSelectionSet::SWIG_Callback42_t callback42, SwigDirector_HSelectionSet::SWIG_Callback43_t callback43, SwigDirector_HSelectionSet::SWIG_Callback44_t callback44, SwigDirector_HSelectionSet::SWIG_Callback45_t callback45, SwigDirector_HSelectionSet::SWIG_Callback46_t callback46, SwigDirector_HSelectionSet::SWIG_Callback47_t callback47, SwigDirector_HSelectionSet::SWIG_Callback48_t callback48, SwigDirector_HSelectionSet::SWIG_Callback49_t callback49, SwigDirector_HSelectionSet::SWIG_Callback50_t callback50, SwigDirector_HSelectionSet::SWIG_Callback51_t callback51, SwigDirector_HSelectionSet::SWIG_Callback52_t callback52, SwigDirector_HSelectionSet::SWIG_Callback53_t callback53, SwigDirector_HSelectionSet::SWIG_Callback54_t callback54, SwigDirector_HSelectionSet::SWIG_Callback55_t callback55, SwigDirector_HSelectionSet::SWIG_Callback56_t callback56, SwigDirector_HSelectionSet::SWIG_Callback57_t callback57, SwigDirector_HSelectionSet::SWIG_Callback58_t callback58, SwigDirector_HSelectionSet::SWIG_Callback59_t callback59, SwigDirector_HSelectionSet::SWIG_Callback60_t callback60, SwigDirector_HSelectionSet::SWIG_Callback61_t callback61, SwigDirector_HSelectionSet::SWIG_Callback62_t callback62, SwigDirector_HSelectionSet::SWIG_Callback63_t callback63, SwigDirector_HSelectionSet::SWIG_Callback64_t callback64, SwigDirector_HSelectionSet::SWIG_Callback65_t callback65, SwigDirector_HSelectionSet::SWIG_Callback66_t callback66, SwigDirector_HSelectionSet::SWIG_Callback67_t callback67, SwigDirector_HSelectionSet::SWIG_Callback68_t callback68, SwigDirector_HSelectionSet::SWIG_Callback69_t callback69, SwigDirector_HSelectionSet::SWIG_Callback70_t callback70, SwigDirector_HSelectionSet::SWIG_Callback71_t callback71, SwigDirector_HSelectionSet::SWIG_Callback72_t callback72, SwigDirector_HSelectionSet::SWIG_Callback73_t callback73, SwigDirector_HSelectionSet::SWIG_Callback74_t callback74, SwigDirector_HSelectionSet::SWIG_Callback75_t callback75, SwigDirector_HSelectionSet::SWIG_Callback76_t callback76, SwigDirector_HSelectionSet::SWIG_Callback77_t callback77, SwigDirector_HSelectionSet::SWIG_Callback78_t callback78, SwigDirector_HSelectionSet::SWIG_Callback79_t callback79, SwigDirector_HSelectionSet::SWIG_Callback80_t callback80, SwigDirector_HSelectionSet::SWIG_Callback81_t callback81, SwigDirector_HSelectionSet::SWIG_Callback82_t callback82, SwigDirector_HSelectionSet::SWIG_Callback83_t callback83, SwigDirector_HSelectionSet::SWIG_Callback84_t callback84, SwigDirector_HSelectionSet::SWIG_Callback85_t callback85, SwigDirector_HSelectionSet::SWIG_Callback86_t callback86, SwigDirector_HSelectionSet::SWIG_Callback87_t callback87, SwigDirector_HSelectionSet::SWIG_Callback88_t callback88, SwigDirector_HSelectionSet::SWIG_Callback89_t callback89, SwigDirector_HSelectionSet::SWIG_Callback90_t callback90, SwigDirector_HSelectionSet::SWIG_Callback91_t callback91, SwigDirector_HSelectionSet::SWIG_Callback92_t callback92, SwigDirector_HSelectionSet::SWIG_Callback93_t callback93, SwigDirector_HSelectionSet::SWIG_Callback94_t callback94, SwigDirector_HSelectionSet::SWIG_Callback95_t callback95, SwigDirector_HSelectionSet::SWIG_Callback96_t callback96, SwigDirector_HSelectionSet::SWIG_Callback97_t callback97, SwigDirector_HSelectionSet::SWIG_Callback98_t callback98, SwigDirector_HSelectionSet::SWIG_Callback99_t callback99, SwigDirector_HSelectionSet::SWIG_Callback100_t callback100, SwigDirector_HSelectionSet::SWIG_Callback101_t callback101, SwigDirector_HSelectionSet::SWIG_Callback102_t callback102, SwigDirector_HSelectionSet::SWIG_Callback103_t callback103) {
  HSelectionSet *obj = (HSelectionSet *)objarg;
  SwigDirector_HSelectionSet *director = dynamic_cast<SwigDirector_HSelectionSet *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40, callback41, callback42, callback43, callback44, callback45, callback46, callback47, callback48, callback49, callback50, callback51, callback52, callback53, callback54, callback55, callback56, callback57, callback58, callback59, callback60, callback61, callback62, callback63, callback64, callback65, callback66, callback67, callback68, callback69, callback70, callback71, callback72, callback73, callback74, callback75, callback76, callback77, callback78, callback79, callback80, callback81, callback82, callback83, callback84, callback85, callback86, callback87, callback88, callback89, callback90, callback91, callback92, callback93, callback94, callback95, callback96, callback97, callback98, callback99, callback100, callback101, callback102, callback103);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_BG_CIRCLE_get() {
  int jresult ;
  int result;
  
  result = (int) 0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BG_QUAD_get() {
  int jresult ;
  int result;
  
  result = (int) 1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BG_CLOUD_get() {
  int jresult ;
  int result;
  
  result = (int) 2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BG_NONE_get() {
  int jresult ;
  int result;
  
  result = (int) 3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilityAnnotation() {
  void * jresult ;
  HUtilityAnnotation *result = 0 ;
  
  result = (HUtilityAnnotation *)new HUtilityAnnotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilityAnnotation(void * jarg1) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_AddChar__SWIG_0(void * jarg1, char jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->AddChar(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_AddChar__SWIG_1(void * jarg1, unsigned short jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  (arg1)->AddChar(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_GetBackgroundSegmentKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = (arg1)->GetBackgroundSegmentKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_GetKey__SWIG_0(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = (arg1)->GetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_GetKey__SWIG_1(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HUtilityAnnotation::GetKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_GetText(void * jarg1, char * jarg2, int * jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->GetText(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtilityAnnotation_GetTextLength(void * jarg1) {
  int jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  int result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = (int)(arg1)->GetTextLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_GetTextWithEncoding(void * jarg1, unsigned short * jarg2, int * jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  int *arg3 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->GetTextWithEncoding(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUtilityAnnotation_GetHType(void * jarg1) {
  char * jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = (char *)(arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_0(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8, MVO_POINTER_SIZED_INT * jarg9, int jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HC_KEY *arg9 = (HC_KEY *) 0 ;
  int arg10 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (HC_KEY *)jarg9; 
  arg10 = (int)jarg10; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8, MVO_POINTER_SIZED_INT * jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HC_KEY *arg9 = (HC_KEY *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (HC_KEY *)jarg9; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_2(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_3(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_4(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_5(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_6(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10, int jarg11) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  int arg11 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  arg11 = (int)jarg11; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_7(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_8(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_9(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_10(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_Insert__SWIG_11(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_0(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10, int jarg11) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  int arg11 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  arg11 = (int)jarg11; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_1(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_2(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_3(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_4(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotation_InsertWithEncoding__SWIG_5(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityAnnotation_IsAnnotation(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtilityAnnotation::IsAnnotation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityAnnotation_IsNote(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtilityAnnotation::IsNote(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ChangeAllFonts__SWIG_0(void * jarg1, char * jarg2, MVO_POINTER_SIZED_INT jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  HC_KEY arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3; 
  HUtilityAnnotation::ChangeAllFonts(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ChangeAllFonts__SWIG_1(void * jarg1, char * jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  HUtilityAnnotation::ChangeAllFonts(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_MoveText__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  HCamera *arg3 = (HCamera *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HCamera *)jarg3; 
  (arg1)->MoveText((HPoint const &)*arg2,(HCamera const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_MoveText__SWIG_1(void * jarg1, void * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->MoveText((HPoint const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_MoveText__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HCamera *arg4 = (HCamera *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg4 = (HCamera *)jarg4; 
  (arg1)->MoveText((HPoint const &)*arg2,(HPoint const &)*arg3,(HCamera const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_MoveText__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return ;
  } 
  (arg1)->MoveText((HPoint const &)*arg2,(HPoint const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetBackgroundType(void * jarg1, long jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  long arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->SetBackgroundType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetColor(void * jarg1, char * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetColor((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetEdgeWeight(void * jarg1, float jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  float arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEdgeWeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetExtents(void * jarg1, int jarg2, int jarg3, MVO_POINTER_SIZED_INT jarg4) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  int arg2 ;
  int arg3 ;
  HC_KEY arg4 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4; 
  (arg1)->SetExtents(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetFacePattern(void * jarg1, char * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetFacePattern((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetLinePattern(void * jarg1, char * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLinePattern((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetLineWeight(void * jarg1, float jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  float arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetLineWeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetNote__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->SetNote(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetNote__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HC_KEY arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HBaseView *)jarg3; 
  (arg1)->SetNote(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetOnTop(void * jarg1, bool jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  bool arg2 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOnTop(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityAnnotation_GetOnTop(void * jarg1) {
  bool jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  bool result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = (bool)(arg1)->GetOnTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetText(void * jarg1, char * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetText((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetTextFont(void * jarg1, char * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTextFont((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_SetTextWithEncoding(void * jarg1, const unsigned short * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (arg1)->SetTextWithEncoding((unsigned short const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ShowPosition__SWIG_0(void * jarg1, void * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->ShowPosition(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ShowPosition__SWIG_1(void * jarg1, float * jarg2, float * jarg3, float * jarg4) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->ShowPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ShowTarget__SWIG_0(void * jarg1, void * jarg2) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->ShowTarget(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_ShowTarget__SWIG_1(void * jarg1, float * jarg2, float * jarg3, float * jarg4) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->ShowTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_UnSetExtents(void * jarg1) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  (arg1)->UnSetExtents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_Resize__SWIG_0(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  int arg2 ;
  HC_KEY *arg3 ;
  HC_KEY arg4 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = jarg4; 
  (arg1)->Resize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_Resize__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->Resize(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtilityAnnotation_GetFacing(void * jarg1) {
  void * jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = ((HUtilityAnnotation const *)arg1)->GetFacing();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtilityAnnotation_GetUp(void * jarg1) {
  void * jresult ;
  HUtilityAnnotation *arg1 = (HUtilityAnnotation *) 0 ;
  HPoint result;
  
  arg1 = (HUtilityAnnotation *)jarg1; 
  result = ((HUtilityAnnotation const *)arg1)->GetUp();
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_WindowResizeCallback(int jarg1, void * jarg2, void * jarg3) {
  int arg1 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  HUtilityAnnotation::WindowResizeCallback(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_recursive_resize(MVO_POINTER_SIZED_INT jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  HC_KEY arg1 ;
  int arg2 ;
  HC_KEY *arg3 ;
  HC_KEY arg4 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = jarg4; 
  HUtilityAnnotation::recursive_resize(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_drawLineCallback(void * jarg1, int jarg2, void * jarg3) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  int arg2 ;
  HIC_DC_Point *arg3 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HIC_DC_Point *)jarg3; 
  HUtilityAnnotation::drawLineCallback((HIC_Rendition const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_drawLineCallbackClip(void * jarg1, int jarg2, void * jarg3) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  int arg2 ;
  HIC_DC_Point *arg3 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HIC_DC_Point *)jarg3; 
  HUtilityAnnotation::drawLineCallbackClip((HIC_Rendition const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotation_drawMarkerCallback(void * jarg1, void * jarg2) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  HIC_DC_Point *arg2 = (HIC_DC_Point *) 0 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (HIC_DC_Point *)jarg2; 
  HUtilityAnnotation::drawMarkerCallback((HIC_Rendition const *)arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEventListenerItem() {
  void * jresult ;
  HEventListenerItem *result = 0 ;
  
  result = (HEventListenerItem *)new HEventListenerItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListenerItem_m_Priority_set(void * jarg1, int jarg2) {
  HEventListenerItem *arg1 = (HEventListenerItem *) 0 ;
  int arg2 ;
  
  arg1 = (HEventListenerItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_Priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEventListenerItem_m_Priority_get(void * jarg1) {
  int jresult ;
  HEventListenerItem *arg1 = (HEventListenerItem *) 0 ;
  int result;
  
  arg1 = (HEventListenerItem *)jarg1; 
  result = (int) ((arg1)->m_Priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventListenerItem_m_pEventListener_set(void * jarg1, void * jarg2) {
  HEventListenerItem *arg1 = (HEventListenerItem *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  
  arg1 = (HEventListenerItem *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  if (arg1) (arg1)->m_pEventListener = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventListenerItem_m_pEventListener_get(void * jarg1) {
  void * jresult ;
  HEventListenerItem *arg1 = (HEventListenerItem *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventListenerItem *)jarg1; 
  result = (HEventListener *) ((arg1)->m_pEventListener);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEventListenerItem(void * jarg1) {
  HEventListenerItem *arg1 = (HEventListenerItem *) 0 ;
  
  arg1 = (HEventListenerItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HEventManager() {
  void * jresult ;
  HEventManager *result = 0 ;
  
  result = (HEventManager *)new HEventManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HEventManager(void * jarg1) {
  HEventManager *arg1 = (HEventManager *) 0 ;
  
  arg1 = (HEventManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventManager_RegisterHandler__SWIG_0(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->RegisterHandler(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventManager_RegisterHandler__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  HEventListenerType arg3 ;
  int arg4 ;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  arg3 = (HEventListenerType)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->RegisterHandler(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventManager_GetEventListenerManager__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  HEventManager *arg1 = (HEventManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HEventListener *)(arg1)->GetEventListenerManager((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HEventManager_GetEventListenerManager__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListenerType arg2 ;
  HEventListener *result = 0 ;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListenerType)jarg2; 
  result = (HEventListener *)(arg1)->GetEventListenerManager(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventManager_UnRegisterHandler__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  bool jresult ;
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->UnRegisterHandler(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HEventManager_UnRegisterHandler__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  bool jresult ;
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  HEventListenerType arg3 ;
  bool result;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  arg3 = (HEventListenerType)jarg3; 
  result = (bool)(arg1)->UnRegisterHandler(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HEventManager_UnRegisterHandler__SWIG_2(void * jarg1, void * jarg2) {
  HEventManager *arg1 = (HEventManager *) 0 ;
  HEventListener *arg2 = (HEventListener *) 0 ;
  
  arg1 = (HEventManager *)jarg1; 
  arg2 = (HEventListener *)jarg2; 
  (arg1)->UnRegisterHandler(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HObject() {
  void * jresult ;
  HObject *result = 0 ;
  
  result = (HObject *)new SwigDirector_HObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HObject(void * jarg1) {
  HObject *arg1 = (HObject *) 0 ;
  
  arg1 = (HObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HObject_GetName(void * jarg1) {
  char * jresult ;
  HObject *arg1 = (HObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (HObject *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HObject_director_connect(void *objarg, SwigDirector_HObject::SWIG_Callback0_t callback0) {
  HObject *obj = (HObject *)objarg;
  SwigDirector_HObject *director = dynamic_cast<SwigDirector_HObject *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HObjectManager() {
  void * jresult ;
  HObjectManager *result = 0 ;
  
  result = (HObjectManager *)new HObjectManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HObjectManager(void * jarg1) {
  HObjectManager *arg1 = (HObjectManager *) 0 ;
  
  arg1 = (HObjectManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HObjectManager_AddHObject(void * jarg1, void * jarg2) {
  void * jresult ;
  HObjectManager *arg1 = (HObjectManager *) 0 ;
  HObject *arg2 = (HObject *) 0 ;
  HObject *result = 0 ;
  
  arg1 = (HObjectManager *)jarg1; 
  arg2 = (HObject *)jarg2; 
  result = (HObject *)(arg1)->AddHObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HObjectManager_RemoveHObject(void * jarg1, char * jarg2) {
  void * jresult ;
  HObjectManager *arg1 = (HObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HObject *result = 0 ;
  
  arg1 = (HObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HObject *)(arg1)->RemoveHObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HObjectManager_GetHObject(void * jarg1, char * jarg2) {
  void * jresult ;
  HObjectManager *arg1 = (HObjectManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HObject *result = 0 ;
  
  arg1 = (HObjectManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HObject *)(arg1)->GetHObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HObjectManager_FindHObjectSegment__SWIG_0(MVO_POINTER_SIZED_INT jarg1, char * jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = HObjectManager::FindHObjectSegment(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HObjectManager_FindHObjectSegment__SWIG_1(MVO_POINTER_SIZED_INT jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  result = HObjectManager::FindHObjectSegment(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HObjectManager_FindHObjectSegment__SWIG_2(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HObjectManager::FindHObjectSegment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HObjectManager_FileLoadHObjectCheck(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HObjectManager::FileLoadHObjectCheck(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HObjectManager_SetHObjectSegment(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  HObjectManager::SetHObjectSegment((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HObjectManager_SetHObjectInfo(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  HObjectManager::SetHObjectInfo((char const *)arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_GetHType(void * jarg1) {
  char * jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  result = (char *)(arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_0(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8, MVO_POINTER_SIZED_INT * jarg9, int jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HC_KEY *arg9 = (HC_KEY *) 0 ;
  int arg10 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (HC_KEY *)jarg9; 
  arg10 = (int)jarg10; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_1(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8, MVO_POINTER_SIZED_INT * jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HC_KEY *arg9 = (HC_KEY *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (HC_KEY *)jarg9; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_2(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7, bool jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  bool arg8 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_3(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6, int jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  int arg7 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  arg7 = (int)jarg7; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_4(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5, MVO_POINTER_SIZED_INT jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HC_KEY arg6 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  arg6 = jarg6; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_5(void * jarg1, void * jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  result = (arg1)->Insert(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_6(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10, int jarg11) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  int arg11 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  arg11 = (int)jarg11; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_7(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_8(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_9(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_10(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_Insert__SWIG_11(void * jarg1, char * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  result = (arg1)->Insert((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_0(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10, int jarg11) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  int arg11 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  arg11 = (int)jarg11; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_1(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9, MVO_POINTER_SIZED_INT * jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HC_KEY *arg10 = (HC_KEY *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (HC_KEY *)jarg10; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_2(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8, bool jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  bool arg9 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_3(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7, int jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  int arg8 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  arg8 = (int)jarg8; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_4(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6, MVO_POINTER_SIZED_INT jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HC_KEY arg7 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  arg7 = jarg7; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_5(void * jarg1, const unsigned short * jarg2, void * jarg3, void * jarg4, MVO_POINTER_SIZED_INT jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HC_KEY arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HC_KEY result;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5; 
  arg6 = (HBaseView *)jarg6; 
  result = (arg1)->InsertWithEncoding((unsigned short const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_MoveText__SWIG_0(void * jarg1, void * jarg2) {
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->MoveText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_MoveText__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->MoveText(arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_IsMeasurement(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtilityAnnotationMeasure::IsMeasurement(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_SetNote(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  HC_KEY arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HBaseView *)jarg3; 
  (arg1)->SetNote(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityAnnotationMeasure_drawLineCallbackDummy(void * jarg1, int jarg2, void * jarg3) {
  HIC_Rendition *arg1 = (HIC_Rendition *) 0 ;
  int arg2 ;
  HIC_DC_Point *arg3 ;
  
  arg1 = (HIC_Rendition *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HIC_DC_Point *)jarg3; 
  HUtilityAnnotationMeasure::drawLineCallbackDummy((HIC_Rendition const *)arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilityAnnotationMeasure() {
  void * jresult ;
  HUtilityAnnotationMeasure *result = 0 ;
  
  result = (HUtilityAnnotationMeasure *)new HUtilityAnnotationMeasure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilityAnnotationMeasure(void * jarg1) {
  HUtilityAnnotationMeasure *arg1 = (HUtilityAnnotationMeasure *) 0 ;
  
  arg1 = (HUtilityAnnotationMeasure *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_GeneratePointOnCircle__SWIG_0(void * jarg1, void * jarg2, float jarg3, int jarg4, float jarg5, bool jarg6) {
  bool jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)HUtilityGeometryCreation::GeneratePointOnCircle(arg1,(HPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_GeneratePointOnCircle__SWIG_1(void * jarg1, void * jarg2, float jarg3, int jarg4, float jarg5) {
  bool jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)HUtilityGeometryCreation::GeneratePointOnCircle(arg1,(HPoint const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_GeneratePointsOnCircle__SWIG_0(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, bool jarg6) {
  bool jresult ;
  HPoint *arg1 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)HUtilityGeometryCreation::GeneratePointsOnCircle(arg1,(HPoint const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_GeneratePointsOnCircle__SWIG_1(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  bool jresult ;
  HPoint *arg1 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)HUtilityGeometryCreation::GeneratePointsOnCircle(arg1,(HPoint const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_GeneratePointsOnCircularArc(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, bool jarg6, float jarg7, float jarg8) {
  bool jresult ;
  HPoint *arg1 ;
  HPoint *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)HUtilityGeometryCreation::GeneratePointsOnCircularArc(arg1,(HPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateWireframeCircleWithEllipse(void * jarg1, void * jarg2, void * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint *arg1 = 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HC_KEY result;
  
  arg1 = (HPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  result = HUtilityGeometryCreation::CreateWireframeCircleWithEllipse((HPoint const &)*arg1,(HPoint const &)*arg2,(HPoint const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateSphere__SWIG_0(char * jarg1, void * jarg2, float jarg3, int jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  char *arg1 = (char *) 0 ;
  HPoint arg2 ;
  float arg3 ;
  int arg4 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (char *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = HUtilityGeometryCreation::CreateSphere((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateSphere__SWIG_1(void * jarg1, float jarg2, int jarg3, void * jarg4, void * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint arg1 ;
  float arg2 ;
  int arg3 ;
  HPoint arg4 ;
  HPoint arg5 ;
  HPoint *argp1 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  HC_KEY result;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = HUtilityGeometryCreation::CreateSphere(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCone(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  HPoint arg5 ;
  HPoint arg6 ;
  HPoint *argp1 ;
  HPoint *argp5 ;
  HPoint *argp6 ;
  HC_KEY result;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (HPoint *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = HUtilityGeometryCreation::CreateCone(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCylinder(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint arg1 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  HPoint arg5 ;
  HPoint arg6 ;
  HPoint *argp1 ;
  HPoint *argp5 ;
  HPoint *argp6 ;
  HC_KEY result;
  
  argp1 = (HPoint *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (HPoint *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = HUtilityGeometryCreation::CreateCylinder(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCuboid(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HPoint *arg1 = (HPoint *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  HC_KEY result;
  
  arg1 = (HPoint *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  result = HUtilityGeometryCreation::CreateCuboid((HPoint const *)arg1,(HPoint const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_SetupModellingMatrix(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HVector arg1 ;
  HVector arg2 ;
  HVector arg3 ;
  HPoint arg4 ;
  HVector *argp1 ;
  HVector *argp2 ;
  HVector *argp3 ;
  HPoint *argp4 ;
  
  argp1 = (HVector *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HVector", 0);
    return ;
  }
  arg1 = *argp1; 
  argp2 = (HVector *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HVector", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HVector *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HVector", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  HUtilityGeometryCreation::SetupModellingMatrix(arg1,arg2,arg3,arg4);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCuttingPlane__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = HUtilityGeometryCreation::CreateCuttingPlane(arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCuttingPlane__SWIG_1(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (char *)jarg2; 
  result = HUtilityGeometryCreation::CreateCuttingPlane(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateCuttingPlane__SWIG_2(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  result = HUtilityGeometryCreation::CreateCuttingPlane(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_SetCuttingPlaneVisibilityForAll(MVO_POINTER_SIZED_INT jarg1, char * jarg2) {
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  HUtilityGeometryCreation::SetCuttingPlaneVisibilityForAll(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_AdjustCuttingPlaneRendering(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtilityGeometryCreation::AdjustCuttingPlaneRendering(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_AdjustSection(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = jarg2; 
  HUtilityGeometryCreation::AdjustSection(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateThreeSidedSection(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtilityGeometryCreation::CreateThreeSidedSection(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateTwoSidedSection(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtilityGeometryCreation::CreateTwoSidedSection(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateSlice__SWIG_0(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  HUtilityGeometryCreation::CreateSlice(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateSlice__SWIG_1(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtilityGeometryCreation::CreateSlice(arg1);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_0(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8, int * jarg9, float * jarg10, int * jarg11, int jarg12, float jarg13) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  int *arg9 ;
  float *arg10 ;
  int *arg11 ;
  int arg12 ;
  float arg13 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = (float *)jarg10; 
  arg11 = (int *)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (float)jarg13; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_1(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8, int * jarg9, float * jarg10, int * jarg11, int jarg12) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  int *arg9 ;
  float *arg10 ;
  int *arg11 ;
  int arg12 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = (float *)jarg10; 
  arg11 = (int *)jarg11; 
  arg12 = (int)jarg12; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_2(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8, int * jarg9, float * jarg10, int * jarg11) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  int *arg9 ;
  float *arg10 ;
  int *arg11 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = (float *)jarg10; 
  arg11 = (int *)jarg11; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_3(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8, int * jarg9, float * jarg10) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  int *arg9 ;
  float *arg10 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int *)jarg9; 
  arg10 = (float *)jarg10; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_4(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8, int * jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  int *arg9 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  arg9 = (int *)jarg9; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_5(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7, float * jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  float *arg8 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (float *)jarg8; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_6(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6, int * jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  int *arg7 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  arg7 = (int *)jarg7; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_7(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5, float * jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  float *arg6 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (float *)jarg6; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_8(float * jarg1, int jarg2, int * jarg3, float * jarg4, int * jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  int *arg5 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int *)jarg5; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_9(float * jarg1, int jarg2, int * jarg3, float * jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  float *arg4 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float *)jarg4; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellWithFaceSpecificVertexAttributes__SWIG_10(float * jarg1, int jarg2, int * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  float *arg1 ;
  int arg2 ;
  int *arg3 ;
  HC_KEY result;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = HUtilityGeometryCreation::CreateShellWithFaceSpecificVertexAttributes(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_GenerateFEAShell(MVO_POINTER_SIZED_INT jarg1, bool jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (char *)jarg3; 
  result = HUtilityGeometryCreation::GenerateFEAShell(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateSmoothedShell(int jarg1, void * jarg2, int jarg3, int * jarg4, float jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  int arg1 ;
  HPoint *arg2 ;
  int arg3 ;
  int *arg4 ;
  float arg5 ;
  HC_KEY result;
  
  arg1 = (int)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (float)jarg5; 
  result = HUtilityGeometryCreation::CreateSmoothedShell(arg1,(HPoint const (*))arg2,arg3,(int const (*))arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_ComputeFIndexDemoData__SWIG_0(void * jarg1, int jarg2) {
  bool jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (HShellVertexData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)HUtilityGeometryCreation::ComputeFIndexDemoData(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeometryCreation_ComputeFIndexDemoData__SWIG_1(void * jarg1) {
  bool jresult ;
  HShellVertexData *arg1 = (HShellVertexData *) 0 ;
  bool result;
  
  arg1 = (HShellVertexData *)jarg1; 
  result = (bool)HUtilityGeometryCreation::ComputeFIndexDemoData(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateBoolean(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, int jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  int arg3 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  result = HUtilityGeometryCreation::CreateBoolean(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellFromRotationalSweep(int jarg1, void * jarg2, float * jarg3, float jarg4, float jarg5, int jarg6, unsigned int * jarg7, int jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  int arg1 ;
  HPoint *arg2 ;
  float *arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  bool *arg7 ;
  int arg8 ;
  HC_KEY result;
  
  arg1 = (int)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (bool *)jarg7; 
  arg8 = (int)jarg8; 
  result = HUtilityGeometryCreation::CreateShellFromRotationalSweep(arg1,(HPoint const (*))arg2,(float const (*))arg3,arg4,arg5,arg6,(bool const (*))arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeometryCreation_CreateShellFromPathSweep(int jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, bool jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  int arg1 ;
  HPoint *arg2 ;
  HPoint *arg3 ;
  int arg4 ;
  HPoint *arg5 ;
  bool arg6 ;
  HC_KEY result;
  
  arg1 = (int)jarg1; 
  arg2 = (HPoint *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HPoint *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = HUtilityGeometryCreation::CreateShellFromPathSweep(arg1,(HPoint const (*))arg2,(HPoint const (*))arg3,arg4,(HPoint const (*))arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilityGeometryCreation() {
  void * jresult ;
  HUtilityGeometryCreation *result = 0 ;
  
  result = (HUtilityGeometryCreation *)new HUtilityGeometryCreation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilityGeometryCreation(void * jarg1) {
  HUtilityGeometryCreation *arg1 = (HUtilityGeometryCreation *) 0 ;
  
  arg1 = (HUtilityGeometryCreation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilityGeomHandle(void * jarg1) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_RegisterCallbacks() {
  HUtilityGeomHandle::RegisterCallbacks();
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_Insert__SWIG_0(void * jarg1, void * jarg2, bool jarg3, int jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HPoint arg2 ;
  bool arg3 ;
  int arg4 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (arg1)->Insert(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_Insert__SWIG_1(void * jarg1, void * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HPoint arg2 ;
  bool arg3 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->Insert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_Insert__SWIG_2(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->Insert(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupGeomHandleSegment(void * jarg1, bool jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  bool arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetupGeomHandleSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToPlane__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint arg5 ;
  HBaseView *arg6 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (HBaseView *)jarg6; 
  (arg1)->ConstrainToPlane(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToPlane__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint arg5 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->ConstrainToPlane(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToViewplane__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HBaseView *)jarg3; 
  (arg1)->ConstrainToViewplane(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToViewplane__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ConstrainToViewplane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToRay__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (HBaseView *)jarg5; 
  (arg1)->ConstrainToRay(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToRay__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ConstrainToRay(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToRotationVector__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (HBaseView *)jarg5; 
  (arg1)->ConstrainToRotationVector(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToRotationVector__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ConstrainToRotationVector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToScale__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (HBaseView *)jarg5; 
  (arg1)->ConstrainToScale(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToScale__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->ConstrainToScale(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToOnOff__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HBaseView *arg3 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HBaseView *)jarg3; 
  (arg1)->ConstrainToOnOff(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ConstrainToOnOff__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ConstrainToOnOff(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_Move__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  HPoint *argp3 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  (arg1)->Move(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_Move__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HC_KEY arg4 ;
  HPoint *argp3 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4; 
  (arg1)->Move(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ShowBasePosition(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->ShowBasePosition(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_GetConstraintParameters(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->GetConstraintParameters(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_Rotate(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Rotate(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HUtilityGeomHandle_CalculatePlaneZ(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  float jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint arg3 ;
  HPoint *argp3 ;
  float result;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (float)(arg1)->CalculatePlaneZ(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_AdjustPositionToRay(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  HPoint arg4 ;
  HPoint arg5 ;
  HPoint *argp4 ;
  HPoint *argp5 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (HPoint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->AdjustPositionToRay(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_CalculatePositionOnPlane(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->CalculatePositionOnPlane(arg2,*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_AdjustPointToRay(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, MVO_POINTER_SIZED_INT jarg4, void * jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  HC_KEY arg4 ;
  HBaseView *arg5 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = jarg4; 
  arg5 = (HBaseView *)jarg5; 
  (arg1)->AdjustPointToRay(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_AdjustPositionToPlane(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, MVO_POINTER_SIZED_INT jarg8) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  HC_KEY arg8 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8; 
  (arg1)->AdjustPositionToPlane(arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_IsGeomHandle(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HUtilityGeomHandle::IsGeomHandle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityGeomHandle_ContainsGeomHandles(MVO_POINTER_SIZED_INT jarg1) {
  bool jresult ;
  HC_KEY arg1 ;
  bool result;
  
  arg1 = jarg1; 
  result = (bool)HUtilityGeomHandle::ContainsGeomHandles(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_CalculateTransformedPosition(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *arg3 = 0 ;
  HBaseView *arg4 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg4 = (HBaseView *)jarg4; 
  (arg1)->CalculateTransformedPosition(arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUtilityGeomHandle_GetConstraintType(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  int jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HConstrainType result;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  result = (HConstrainType)(arg1)->GetConstraintType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ShowHandle__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  HBaseView *arg4 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (HBaseView *)jarg4; 
  (arg1)->ShowHandle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ShowHandle__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->ShowHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ShowHandle__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ShowHandle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ResetHandle__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, void * jarg4) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  HBaseView *arg4 = (HBaseView *) 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (HBaseView *)jarg4; 
  (arg1)->ResetHandle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ResetHandle__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->ResetHandle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ResetHandle__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ResetHandle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_Scale(void * jarg1, MVO_POINTER_SIZED_INT jarg2, float jarg3, float jarg4, float jarg5) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Scale(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_TurnOff(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  (arg1)->TurnOff(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUtilityGeomHandle_GetRotationAxis(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HUtilityGeomHandle *arg1 = (HUtilityGeomHandle *) 0 ;
  HC_KEY arg2 ;
  HPoint *result = 0 ;
  
  arg1 = (HUtilityGeomHandle *)jarg1; 
  arg2 = jarg2; 
  result = (HPoint *)(arg1)->GetRotationAxis(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_ClearAllHandles(void * jarg1) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  HUtilityGeomHandle::ClearAllHandles(arg1);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SelectHandle(void * jarg1, void * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = HUtilityGeomHandle::SelectHandle(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SelectObject__SWIG_0(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4, float jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HC_KEY arg3 ;
  bool arg4 ;
  float arg5 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  result = HUtilityGeomHandle::SelectObject(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SelectObject__SWIG_1(void * jarg1, void * jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HPoint arg2 ;
  HC_KEY arg3 ;
  bool arg4 ;
  HPoint *argp2 ;
  HC_KEY result;
  
  arg1 = (HBaseView *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  result = HUtilityGeomHandle::SelectObject(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupObject__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, float jarg3) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  float arg3 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (float)jarg3; 
  HUtilityGeomHandle::SetupObject(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupObject__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  HUtilityGeomHandle::SetupObject(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupTextObject__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, float jarg3, float jarg4) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  HUtilityGeomHandle::SetupTextObject(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupTextObject__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, float jarg3) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  float arg3 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (float)jarg3; 
  HUtilityGeomHandle::SetupTextObject(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupTextObject__SWIG_2(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  HUtilityGeomHandle::SetupTextObject(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupCuttingPlane(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  HUtilityGeomHandle::SetupCuttingPlane(arg1,arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4, bool jarg5, bool jarg6, bool jarg7, bool jarg8, bool jarg9) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4, bool jarg5, bool jarg6, bool jarg7, bool jarg8) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_2(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4, bool jarg5, bool jarg6, bool jarg7) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_3(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4, bool jarg5, bool jarg6) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_4(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4, bool jarg5) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  bool arg5 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_5(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupManipulator__SWIG_6(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  result = HUtilityGeomHandle::SetupManipulator(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_0(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3, bool jarg4) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  bool arg4 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = jarg4 ? true : false; 
  HUtilityGeomHandle::SetupCuttingPlaneManipulator(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_1(MVO_POINTER_SIZED_INT jarg1, void * jarg2, void * jarg3) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  HUtilityGeomHandle::SetupCuttingPlaneManipulator(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_2(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (HBaseView *)jarg2; 
  HUtilityGeomHandle::SetupCuttingPlaneManipulator(arg1,arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HUtilityGeomHandle_GetMMSegment(MVO_POINTER_SIZED_INT jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HC_KEY arg1 ;
  HC_KEY result;
  
  arg1 = jarg1; 
  result = HUtilityGeomHandle::GetMMSegment(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_GetCenterPoint(MVO_POINTER_SIZED_INT jarg1, void * jarg2) {
  HC_KEY arg1 ;
  HPoint *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  HUtilityGeomHandle::GetCenterPoint(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityGeomHandle_SetVisibilityForAll(MVO_POINTER_SIZED_INT jarg1, char * jarg2) {
  HC_KEY arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (char *)jarg2; 
  HUtilityGeomHandle::SetVisibilityForAll(arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilityGeomHandle() {
  void * jresult ;
  HUtilityGeomHandle *result = 0 ;
  
  result = (HUtilityGeomHandle *)new HUtilityGeomHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  HRectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (HRectangle *)new HRectangle(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HRectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HRectangle *)new HRectangle(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HRectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HRectangle *)new HRectangle(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_3(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HRectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HRectangle *)new HRectangle(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_4(float jarg1) {
  void * jresult ;
  float arg1 ;
  HRectangle *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HRectangle *)new HRectangle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_5() {
  void * jresult ;
  HRectangle *result = 0 ;
  
  result = (HRectangle *)new HRectangle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HRectangle__SWIG_6(void * jarg1) {
  void * jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *result = 0 ;
  
  arg1 = (HRectangle *)jarg1; 
  result = (HRectangle *)new HRectangle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HRectangle(void * jarg1) {
  HRectangle *arg1 = (HRectangle *) 0 ;
  
  arg1 = (HRectangle *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HRectangle_GetLeft(void * jarg1) {
  float jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  float result;
  
  arg1 = (HRectangle *)jarg1; 
  result = (float)(arg1)->GetLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HRectangle_GetRight(void * jarg1) {
  float jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  float result;
  
  arg1 = (HRectangle *)jarg1; 
  result = (float)(arg1)->GetRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HRectangle_GetTop(void * jarg1) {
  float jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  float result;
  
  arg1 = (HRectangle *)jarg1; 
  result = (float)(arg1)->GetTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HRectangle_GetBottom(void * jarg1) {
  float jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  float result;
  
  arg1 = (HRectangle *)jarg1; 
  result = (float)(arg1)->GetBottom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HRectangle_GetZ(void * jarg1) {
  float jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  float result;
  
  arg1 = (HRectangle *)jarg1; 
  result = (float)(arg1)->GetZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HRectangle_SetCoordinates__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  HRectangle *arg1 = (HRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetCoordinates(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HRectangle_SetCoordinates__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  HRectangle *arg1 = (HRectangle *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetCoordinates(arg2,arg3,arg4,arg5);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_IsRectInside(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  HRectangle *arg3 = (HRectangle *) 0 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (HRectangle *)jarg3; 
  result = (bool)(arg1)->IsRectInside(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_IsRectAbove(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->IsRectAbove(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_IsRectBelow(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->IsRectBelow(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_IsRectRight(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->IsRectRight(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_IsRectLeft(void * jarg1, void * jarg2, float jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->IsRectLeft(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HRectangle_RectOverlap(void * jarg1, void * jarg2, void * jarg3) {
  bool jresult ;
  HRectangle *arg1 = (HRectangle *) 0 ;
  HRectangle *arg2 = (HRectangle *) 0 ;
  HRectangle *arg3 = (HRectangle *) 0 ;
  bool result;
  
  arg1 = (HRectangle *)jarg1; 
  arg2 = (HRectangle *)jarg2; 
  arg3 = (HRectangle *)jarg3; 
  result = (bool)(arg1)->RectOverlap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_0(void * jarg1) {
  void * jresult ;
  HQuadTreeItem *arg1 = (HQuadTreeItem *) 0 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (HQuadTreeItem *)jarg1; 
  result = (HQuadTreeItem *)new HQuadTreeItem((HQuadTreeItem const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5; 
  result = (HQuadTreeItem *)new HQuadTreeItem(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HQuadTreeItem *)new HQuadTreeItem(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HQuadTreeItem *)new HQuadTreeItem(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_4(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HQuadTreeItem *)new HQuadTreeItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_5(float jarg1) {
  void * jresult ;
  float arg1 ;
  HQuadTreeItem *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HQuadTreeItem *)new HQuadTreeItem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeItem__SWIG_6() {
  void * jresult ;
  HQuadTreeItem *result = 0 ;
  
  result = (HQuadTreeItem *)new HQuadTreeItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HQuadTreeItem(void * jarg1) {
  HQuadTreeItem *arg1 = (HQuadTreeItem *) 0 ;
  
  arg1 = (HQuadTreeItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTreeNode(float jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HQuadTreeNode *arg5 = (HQuadTreeNode *) 0 ;
  HQuadTreeNode *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (HQuadTreeNode *)jarg5; 
  result = (HQuadTreeNode *)new HQuadTreeNode(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HQuadTreeNode(void * jarg1) {
  HQuadTreeNode *arg1 = (HQuadTreeNode *) 0 ;
  
  arg1 = (HQuadTreeNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5, bool jarg6, bool jarg7) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5, bool jarg6) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  bool arg6 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, int jarg5) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_4(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_5(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HQuadTree *)new HQuadTree(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_6(float jarg1) {
  void * jresult ;
  float arg1 ;
  HQuadTree *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HQuadTree *)new HQuadTree(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuadTree__SWIG_7() {
  void * jresult ;
  HQuadTree *result = 0 ;
  
  result = (HQuadTree *)new HQuadTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HQuadTree(void * jarg1) {
  HQuadTree *arg1 = (HQuadTree *) 0 ;
  
  arg1 = (HQuadTree *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HQuadTree_Insert(void * jarg1, void * jarg2) {
  int jresult ;
  HQuadTree *arg1 = (HQuadTree *) 0 ;
  HQuadTreeItem *arg2 = (HQuadTreeItem *) 0 ;
  HQuadtreeInsertStatus result;
  
  arg1 = (HQuadTree *)jarg1; 
  arg2 = (HQuadTreeItem *)jarg2; 
  result = (HQuadtreeInsertStatus)(arg1)->Insert(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShadow__SWIG_0(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, float * jarg3) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  float *arg3 ;
  HShadow *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (float *)jarg3; 
  result = (HShadow *)new HShadow(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HShadow__SWIG_1(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HShadow *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (HShadow *)new HShadow(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_CalculateTotalModelExtents(void * jarg1) {
  HShadow *arg1 = (HShadow *) 0 ;
  
  arg1 = (HShadow *)jarg1; 
  (arg1)->CalculateTotalModelExtents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_GetModelExtents(void * jarg1, void * jarg2, void * jarg3) {
  HShadow *arg1 = (HShadow *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  
  arg1 = (HShadow *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetModelExtents(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_GetShadowLightPos(void * jarg1, void * jarg2) {
  HShadow *arg1 = (HShadow *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HShadow *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetShadowLightPos(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_GetShadowGroundPlane(void * jarg1, void * jarg2) {
  HShadow *arg1 = (HShadow *) 0 ;
  HPlane *arg2 = 0 ;
  
  arg1 = (HShadow *)jarg1; 
  arg2 = (HPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPlane & type is null", 0);
    return ;
  } 
  (arg1)->GetShadowGroundPlane(*arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HShadow_GetShadowKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HShadow *arg1 = (HShadow *) 0 ;
  HC_KEY result;
  
  arg1 = (HShadow *)jarg1; 
  result = (arg1)->GetShadowKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_SetShadowLightPos(void * jarg1, void * jarg2) {
  HShadow *arg1 = (HShadow *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HShadow *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetShadowLightPos(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_SetShadowGroundPlane(void * jarg1, void * jarg2) {
  HShadow *arg1 = (HShadow *) 0 ;
  HPlane arg2 ;
  HPlane *argp2 ;
  
  arg1 = (HShadow *)jarg1; 
  argp2 = (HPlane *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPlane", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetShadowGroundPlane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HShadow_SetShadowBrightness(void * jarg1, int jarg2) {
  HShadow *arg1 = (HShadow *) 0 ;
  int arg2 ;
  
  arg1 = (HShadow *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShadowBrightness(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HShadow_GetShadowBrightness(void * jarg1) {
  int jresult ;
  HShadow *arg1 = (HShadow *) 0 ;
  int result;
  
  arg1 = (HShadow *)jarg1; 
  result = (int)(arg1)->GetShadowBrightness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HShadow(void * jarg1) {
  HShadow *arg1 = (HShadow *) 0 ;
  
  arg1 = (HShadow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSmoothShadow__SWIG_0(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  bool arg3 ;
  HSmoothShadow *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (HSmoothShadow *)new HSmoothShadow(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSmoothShadow__SWIG_1(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HSmoothShadow *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (HSmoothShadow *)new HSmoothShadow(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSmoothShadow(void * jarg1) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_CleanUp(void * jarg1) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  (arg1)->CleanUp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_Create__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int * jarg5) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  ShadowPlaneType arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (ShadowPlaneType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->Create(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_Create__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  ShadowPlaneType arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (ShadowPlaneType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Create(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_Create__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  ShadowPlaneType arg2 ;
  int arg3 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (ShadowPlaneType)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Create(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_Create__SWIG_3(void * jarg1, int jarg2) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  ShadowPlaneType arg2 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (ShadowPlaneType)jarg2; 
  (arg1)->Create(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_Create__SWIG_4(void * jarg1) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  (arg1)->Create();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSmoothShadow_GetFilterSize(void * jarg1) {
  int jresult ;
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  int result;
  
  arg1 = (HSmoothShadow *)jarg1; 
  result = (int)(arg1)->GetFilterSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HSmoothShadow_GetTextureSize(void * jarg1) {
  int jresult ;
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  int result;
  
  arg1 = (HSmoothShadow *)jarg1; 
  result = (int)(arg1)->GetTextureSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_SetTextureSize(void * jarg1, int jarg2) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  int arg2 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTextureSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_SetFilter(void * jarg1, int * jarg2, int jarg3) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  int *arg2 ;
  int arg3 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetFilter(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_UnDefineShadowTexture(void * jarg1) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  (arg1)->UnDefineShadowTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_UnDefineAllShadowTextures(MVO_POINTER_SIZED_INT jarg1) {
  HC_KEY arg1 ;
  
  arg1 = jarg1; 
  HSmoothShadow::UnDefineAllShadowTextures(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSmoothShadow_SetAllowOpenglShadow(void * jarg1, bool jarg2) {
  HSmoothShadow *arg1 = (HSmoothShadow *) 0 ;
  bool arg2 ;
  
  arg1 = (HSmoothShadow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowOpenglShadow(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HHardShadow(MVO_POINTER_SIZED_INT jarg1, MVO_POINTER_SIZED_INT jarg2) {
  void * jresult ;
  HC_KEY arg1 ;
  HC_KEY arg2 ;
  HHardShadow *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  result = (HHardShadow *)new HHardShadow(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HHardShadow(void * jarg1) {
  HHardShadow *arg1 = (HHardShadow *) 0 ;
  
  arg1 = (HHardShadow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HHardShadow_Create__SWIG_0(void * jarg1, int jarg2) {
  HHardShadow *arg1 = (HHardShadow *) 0 ;
  ShadowPlaneType arg2 ;
  
  arg1 = (HHardShadow *)jarg1; 
  arg2 = (ShadowPlaneType)jarg2; 
  (arg1)->Create(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HHardShadow_Create__SWIG_1(void * jarg1) {
  HHardShadow *arg1 = (HHardShadow *) 0 ;
  
  arg1 = (HHardShadow *)jarg1; 
  (arg1)->Create();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_t_sd_set(void * jarg1, char * jarg2) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (delimiter_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->sd = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sd, (const char *)arg2);
    } else {
      arg1->sd = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_delimiter_t_sd_get(void * jarg1) {
  char * jresult ;
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (delimiter_t *)jarg1; 
  result = (char *) ((arg1)->sd);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_t_sd_exclude_set(void * jarg1, bool jarg2) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool arg2 ;
  
  arg1 = (delimiter_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sd_exclude = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_delimiter_t_sd_exclude_get(void * jarg1) {
  bool jresult ;
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool result;
  
  arg1 = (delimiter_t *)jarg1; 
  result = (bool) ((arg1)->sd_exclude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_t_ed_set(void * jarg1, char * jarg2) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (delimiter_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->ed = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->ed, (const char *)arg2);
    } else {
      arg1->ed = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_delimiter_t_ed_get(void * jarg1) {
  char * jresult ;
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (delimiter_t *)jarg1; 
  result = (char *) ((arg1)->ed);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_t_ed_exclude_set(void * jarg1, bool jarg2) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool arg2 ;
  
  arg1 = (delimiter_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ed_exclude = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_delimiter_t_ed_exclude_get(void * jarg1) {
  bool jresult ;
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool result;
  
  arg1 = (delimiter_t *)jarg1; 
  result = (bool) ((arg1)->ed_exclude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_t_checkopenclose_set(void * jarg1, bool jarg2) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool arg2 ;
  
  arg1 = (delimiter_t *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->checkopenclose = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_delimiter_t_checkopenclose_get(void * jarg1) {
  bool jresult ;
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  bool result;
  
  arg1 = (delimiter_t *)jarg1; 
  result = (bool) ((arg1)->checkopenclose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_delimiter_t() {
  void * jresult ;
  delimiter_t *result = 0 ;
  
  result = (delimiter_t *)new delimiter_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_delimiter_t(void * jarg1) {
  delimiter_t *arg1 = (delimiter_t *) 0 ;
  
  arg1 = (delimiter_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_full_t_mc1_set(void * jarg1, char * jarg2) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  char *arg2 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mc1, (const char *)arg2, 32-1);
      arg1->mc1[32-1] = 0;
    } else {
      arg1->mc1[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_delimiter_full_t_mc1_get(void * jarg1) {
  char * jresult ;
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  result = (char *)(char *) ((arg1)->mc1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_full_t_mc2_set(void * jarg1, char * jarg2) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  char *arg2 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->mc2, (const char *)arg2, 32-1);
      arg1->mc2[32-1] = 0;
    } else {
      arg1->mc2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_delimiter_full_t_mc2_get(void * jarg1) {
  char * jresult ;
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  result = (char *)(char *) ((arg1)->mc2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_full_t_i1_set(void * jarg1, int jarg2) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int arg2 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_delimiter_full_t_i1_get(void * jarg1) {
  int jresult ;
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int result;
  
  arg1 = (delimiter_full_t *)jarg1; 
  result = (int) ((arg1)->i1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_full_t_i2_set(void * jarg1, int jarg2) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int arg2 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_delimiter_full_t_i2_get(void * jarg1) {
  int jresult ;
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int result;
  
  arg1 = (delimiter_full_t *)jarg1; 
  result = (int) ((arg1)->i2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delimiter_full_t_len_set(void * jarg1, int jarg2) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int arg2 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->len = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_delimiter_full_t_len_get(void * jarg1) {
  int jresult ;
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  int result;
  
  arg1 = (delimiter_full_t *)jarg1; 
  result = (int) ((arg1)->len);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_delimiter_full_t() {
  void * jresult ;
  delimiter_full_t *result = 0 ;
  
  result = (delimiter_full_t *)new delimiter_full_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_delimiter_full_t(void * jarg1) {
  delimiter_full_t *arg1 = (delimiter_full_t *) 0 ;
  
  arg1 = (delimiter_full_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUtilityTextParser() {
  void * jresult ;
  HUtilityTextParser *result = 0 ;
  
  result = (HUtilityTextParser *)new HUtilityTextParser();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUtilityTextParser(void * jarg1) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityTextParser_SetDelimiterList(void * jarg1, void * jarg2, unsigned int jarg3) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  delimiter_t *arg2 ;
  unsigned int arg3 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (delimiter_t *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetDelimiterList((delimiter_t const (*))arg2,arg3);
}


SWIGEXPORT char SWIGSTDCALL CSharp_HUtilityTextParser_GetStartDelimiter(void * jarg1) {
  char jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  result = (char)(arg1)->GetStartDelimiter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_HUtilityTextParser_GetEndDelimiter(void * jarg1) {
  char jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  result = (char)(arg1)->GetEndDelimiter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_HUtilityTextParser_PeekAt__SWIG_0(void * jarg1, unsigned int jarg2) {
  char jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  unsigned int arg2 ;
  char result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char)(arg1)->PeekAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_HUtilityTextParser_PeekAt__SWIG_1(void * jarg1) {
  char jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  result = (char)(arg1)->PeekAt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityTextParser_Rewind(void * jarg1) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  (arg1)->Rewind();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityTextParser_SkipAhead(void * jarg1, int jarg2) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  int arg2 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SkipAhead(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityTextParser_ParseBuffer__SWIG_0(void * jarg1, char * jarg2, int * jarg3, void * jarg4, unsigned int jarg5, bool jarg6) {
  bool jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  delimiter_t *arg4 ;
  unsigned int arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (delimiter_t *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->ParseBuffer(arg2,*arg3,(delimiter_t const (*))arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityTextParser_ParseBuffer__SWIG_1(void * jarg1, char * jarg2, int * jarg3, void * jarg4, unsigned int jarg5) {
  bool jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  delimiter_t *arg4 ;
  unsigned int arg5 ;
  bool result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (delimiter_t *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (bool)(arg1)->ParseBuffer(arg2,*arg3,(delimiter_t const (*))arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityTextParser_ParseBuffer__SWIG_2(void * jarg1, char * jarg2, char * jarg3, int * jarg4, void * jarg5, unsigned int jarg6, bool jarg7) {
  bool jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = 0 ;
  delimiter_t *arg5 ;
  unsigned int arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (delimiter_t *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->ParseBuffer((char const *)arg2,arg3,*arg4,(delimiter_t const (*))arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HUtilityTextParser_ParseBuffer__SWIG_3(void * jarg1, char * jarg2, char * jarg3, int * jarg4, void * jarg5, unsigned int jarg6) {
  bool jresult ;
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = 0 ;
  delimiter_t *arg5 ;
  unsigned int arg6 ;
  bool result;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (delimiter_t *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (bool)(arg1)->ParseBuffer((char const *)arg2,arg3,*arg4,(delimiter_t const (*))arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUtilityTextParser_InsertBuffer(void * jarg1, char * jarg2, unsigned int jarg3) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->InsertBuffer((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HMarkupManager(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HMarkupManager *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HMarkupManager *)new SwigDirector_HMarkupManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_ReInit(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->ReInit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HMarkupManager(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayer__SWIG_0(void * jarg1, char * jarg2, bool jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->OpenLayer((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_0(void * jarg1, char * jarg2, bool jarg3, bool jarg4) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (arg1)->HMarkupManager::OpenLayer((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayer__SWIG_1(void * jarg1, char * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->OpenLayer((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_1(void * jarg1, char * jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->HMarkupManager::OpenLayer((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayer__SWIG_2(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->OpenLayer((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_2(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->HMarkupManager::OpenLayer((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_RenameLayer(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->RenameLayer(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_RenameLayerSwigExplicitHMarkupManager(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->HMarkupManager::RenameLayer(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_CopyLayer(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->CopyLayer(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_CopyLayerSwigExplicitHMarkupManager(void * jarg1, MVO_POINTER_SIZED_INT jarg2, char * jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  char *arg3 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (char *)jarg3; 
  result = (arg1)->HMarkupManager::CopyLayer(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_GetCamera(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  HCamera *arg3 = 0 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HCamera *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return 0;
  } 
  result = (bool)((HMarkupManager const *)arg1)->GetCamera(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_GetCameraSwigExplicitHMarkupManager(void * jarg1, MVO_POINTER_SIZED_INT jarg2, void * jarg3) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  HCamera *arg3 = 0 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = (HCamera *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HCamera & type is null", 0);
    return 0;
  } 
  result = (bool)((HMarkupManager const *)arg1)->HMarkupManager::GetCamera(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayer__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->OpenLayer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->HMarkupManager::OpenLayer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayer__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  result = (arg1)->OpenLayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_OpenLayerSwigExplicitHMarkupManager__SWIG_4(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  result = (arg1)->HMarkupManager::OpenLayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_FindLayer(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((HMarkupManager const *)arg1)->FindLayer((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_FindLayerSwigExplicitHMarkupManager(void * jarg1, char * jarg2) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((HMarkupManager const *)arg1)->HMarkupManager::FindLayer((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_GetLayerNames(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (char *)((HMarkupManager const *)arg1)->GetLayerNames();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_GetLayerNamesSwigExplicitHMarkupManager(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (char *)((HMarkupManager const *)arg1)->HMarkupManager::GetLayerNames();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_GetCurrentLayerKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = ((HMarkupManager const *)arg1)->GetCurrentLayerKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_GetCurrentLayerKeySwigExplicitHMarkupManager(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = ((HMarkupManager const *)arg1)->HMarkupManager::GetCurrentLayerKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_GetCurrentLayerName(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (char *)((HMarkupManager const *)arg1)->GetCurrentLayerName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_GetCurrentLayerNameSwigExplicitHMarkupManager(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (char *)((HMarkupManager const *)arg1)->HMarkupManager::GetCurrentLayerName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentLayer__SWIG_0(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DisableCurrentLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentLayerSwigExplicitHMarkupManager__SWIG_0(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HMarkupManager::DisableCurrentLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentLayer__SWIG_1(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->DisableCurrentLayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentLayerSwigExplicitHMarkupManager__SWIG_1(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->HMarkupManager::DisableCurrentLayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DeleteLayer__SWIG_0(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DeleteLayer((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DeleteLayerSwigExplicitHMarkupManager__SWIG_0(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HMarkupManager::DeleteLayer((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DeleteLayer__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->DeleteLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DeleteLayerSwigExplicitHMarkupManager__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HMarkupManager::DeleteLayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetDefaultLayerKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetDefaultLayerKey(arg2);
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_GetDefaultLayerKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (arg1)->GetDefaultLayerKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_GetMarkupKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (arg1)->GetMarkupKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_GetMarkupLayerKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (arg1)->GetMarkupLayerKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HMarkupManager_GetMarkupWeight(void * jarg1) {
  float jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  float result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (float)(arg1)->GetMarkupWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HMarkupManager_GetMarkupWeightSwigExplicitHMarkupManager(void * jarg1) {
  float jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  float result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (float)(arg1)->HMarkupManager::GetMarkupWeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupWeight(void * jarg1, float jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  float arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetMarkupWeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupWeightSwigExplicitHMarkupManager(void * jarg1, float jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  float arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->HMarkupManager::SetMarkupWeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_GetMarkupColor(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetMarkupColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_GetMarkupColorSwigExplicitHMarkupManager(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->HMarkupManager::GetMarkupColor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupColor(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetMarkupColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupColorSwigExplicitHMarkupManager(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->HMarkupManager::SetMarkupColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitMarkupSegment(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->EmitMarkupSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitMarkupSegmentSwigExplicitHMarkupManager(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->HMarkupManager::EmitMarkupSegment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_InsertMarkupSegmentFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->InsertMarkupSegmentFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_InsertMarkupSegmentFromMessageSwigExplicitHMarkupManager(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HMarkupManager::InsertMarkupSegmentFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitDisableCurrentMarkupLayer(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->EmitDisableCurrentMarkupLayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitDisableCurrentMarkupLayerSwigExplicitHMarkupManager(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->HMarkupManager::EmitDisableCurrentMarkupLayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentMarkupLayerFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->DisableCurrentMarkupLayerFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_DisableCurrentMarkupLayerFromMessageSwigExplicitHMarkupManager(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HMarkupManager::DisableCurrentMarkupLayerFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitSetMarkupLayer(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->EmitSetMarkupLayer((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_EmitSetMarkupLayerSwigExplicitHMarkupManager(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->HMarkupManager::EmitSetMarkupLayer((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupLayerFromMessage(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetMarkupLayerFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetMarkupLayerFromMessageSwigExplicitHMarkupManager(void * jarg1, char * jarg2, unsigned int jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->HMarkupManager::SetMarkupLayerFromMessage((char const *)arg2,arg3);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_GetPreviewImage(void * jarg1, char * jarg2, int * jarg3, int * jarg4, int * jarg5, void * jarg6) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  arg6 = (unsigned char **)jarg6; 
  result = (bool)(arg1)->GetPreviewImage((char const *)arg2,arg3,arg4,arg5,(unsigned char const **)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UpdatePreviewImage__SWIG_0(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdatePreviewImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UpdatePreviewImageSwigExplicitHMarkupManager__SWIG_0(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HMarkupManager::UpdatePreviewImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UpdatePreviewImage__SWIG_1(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->UpdatePreviewImage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UpdatePreviewImageSwigExplicitHMarkupManager__SWIG_1(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->HMarkupManager::UpdatePreviewImage();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_IsCameraLayer(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->IsCameraLayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetLayerCondition(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetLayerCondition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UnsetCurrentLayerCondition(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->UnsetCurrentLayerCondition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_UnsetLayerCondition(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  (arg1)->UnsetLayerCondition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetGeneratePreviewImage(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGeneratePreviewImage(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_GetGeneratePreviewImage(void * jarg1) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  result = (bool)(arg1)->GetGeneratePreviewImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetNoResetOnCameraChange(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  (arg1)->SetNoResetOnCameraChange();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_GetResetOnCameraChange(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  result = (bool)(arg1)->GetResetOnCameraChange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetupNewLayer(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  (darg)->SetupNewLayer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_SetupNewLayerSwigExplicitHMarkupManager(void * jarg1) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  (darg)->SetupNewLayerSwigPublic();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_OpenLayerInternal(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  (darg)->OpenLayerInternal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_OpenLayerInternalSwigExplicitHMarkupManager(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  (darg)->OpenLayerInternalSwigPublic(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_pHView_set(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_pHView = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMarkupManager_m_pHView_get(void * jarg1) {
  void * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HBaseView *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (HBaseView *) (darg->m_pHView);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_ActiveLayerKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_ActiveLayerKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_m_ActiveLayerKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result =  (darg->m_ActiveLayerKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_ActiveLayerName_set(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  {
    if (darg->m_ActiveLayerName) delete [] darg->m_ActiveLayerName;
    if (arg2) {
      darg->m_ActiveLayerName = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)darg->m_ActiveLayerName, (const char *)arg2);
    } else {
      darg->m_ActiveLayerName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_m_ActiveLayerName_get(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (char *) (darg->m_ActiveLayerName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_DefaultLayerKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_DefaultLayerKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_m_DefaultLayerKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result =  (darg->m_DefaultLayerKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_MarkupKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_MarkupKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_m_MarkupKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result =  (darg->m_MarkupKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_MarkupLayerKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HC_KEY arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_MarkupLayerKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HMarkupManager_m_MarkupLayerKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HC_KEY result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result =  (darg->m_MarkupLayerKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_MarkupColor_set(void * jarg1, void * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_MarkupColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HMarkupManager_m_MarkupColor_get(void * jarg1) {
  void * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  HPoint *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (HPoint *)& (darg->m_MarkupColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_fMarkupWeight_set(void * jarg1, float jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  float arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (float)jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_fMarkupWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HMarkupManager_m_fMarkupWeight_get(void * jarg1) {
  float jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  float result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (float) (darg->m_fMarkupWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_allNames_set(void * jarg1, char * jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = (char *)jarg2; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  {
    if (darg->m_allNames) delete [] darg->m_allNames;
    if (arg2) {
      darg->m_allNames = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)darg->m_allNames, (const char *)arg2);
    } else {
      darg->m_allNames = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HMarkupManager_m_allNames_get(void * jarg1) {
  char * jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  char *result = 0 ;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (char *) (darg->m_allNames);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_m_bGeneratePreviewImage_set(void * jarg1, bool jarg2) {
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  bool arg2 ;
  SwigDirector_HMarkupManager *darg = 0;
  
  arg1 = (HMarkupManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  if (arg1) darg->m_bGeneratePreviewImage = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HMarkupManager_m_bGeneratePreviewImage_get(void * jarg1) {
  bool jresult ;
  HMarkupManager *arg1 = (HMarkupManager *) 0 ;
  SwigDirector_HMarkupManager *darg = 0;
  bool result;
  
  arg1 = (HMarkupManager *)jarg1; 
  darg = dynamic_cast<SwigDirector_HMarkupManager *>(arg1);
  result = (bool) (darg->m_bGeneratePreviewImage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HMarkupManager_director_connect(void *objarg, SwigDirector_HMarkupManager::SWIG_Callback0_t callback0, SwigDirector_HMarkupManager::SWIG_Callback1_t callback1, SwigDirector_HMarkupManager::SWIG_Callback2_t callback2, SwigDirector_HMarkupManager::SWIG_Callback3_t callback3, SwigDirector_HMarkupManager::SWIG_Callback4_t callback4, SwigDirector_HMarkupManager::SWIG_Callback5_t callback5, SwigDirector_HMarkupManager::SWIG_Callback6_t callback6, SwigDirector_HMarkupManager::SWIG_Callback7_t callback7, SwigDirector_HMarkupManager::SWIG_Callback8_t callback8, SwigDirector_HMarkupManager::SWIG_Callback9_t callback9, SwigDirector_HMarkupManager::SWIG_Callback10_t callback10, SwigDirector_HMarkupManager::SWIG_Callback11_t callback11, SwigDirector_HMarkupManager::SWIG_Callback12_t callback12, SwigDirector_HMarkupManager::SWIG_Callback13_t callback13, SwigDirector_HMarkupManager::SWIG_Callback14_t callback14, SwigDirector_HMarkupManager::SWIG_Callback15_t callback15, SwigDirector_HMarkupManager::SWIG_Callback16_t callback16, SwigDirector_HMarkupManager::SWIG_Callback17_t callback17, SwigDirector_HMarkupManager::SWIG_Callback18_t callback18, SwigDirector_HMarkupManager::SWIG_Callback19_t callback19, SwigDirector_HMarkupManager::SWIG_Callback20_t callback20, SwigDirector_HMarkupManager::SWIG_Callback21_t callback21, SwigDirector_HMarkupManager::SWIG_Callback22_t callback22, SwigDirector_HMarkupManager::SWIG_Callback23_t callback23, SwigDirector_HMarkupManager::SWIG_Callback24_t callback24, SwigDirector_HMarkupManager::SWIG_Callback25_t callback25, SwigDirector_HMarkupManager::SWIG_Callback26_t callback26, SwigDirector_HMarkupManager::SWIG_Callback27_t callback27, SwigDirector_HMarkupManager::SWIG_Callback28_t callback28, SwigDirector_HMarkupManager::SWIG_Callback29_t callback29) {
  HMarkupManager *obj = (HMarkupManager *)objarg;
  SwigDirector_HMarkupManager *director = dynamic_cast<SwigDirector_HMarkupManager *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HModelInfo__SWIG_0(MVO_POINTER_SIZED_INT jarg1) {
  void * jresult ;
  HC_KEY arg1 ;
  HModelInfo *result = 0 ;
  
  arg1 = jarg1; 
  result = (HModelInfo *)new HModelInfo(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HModelInfo__SWIG_1() {
  void * jresult ;
  HModelInfo *result = 0 ;
  
  result = (HModelInfo *)new HModelInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HModelInfo(void * jarg1) {
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  
  arg1 = (HModelInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HModelInfo_ComputeModelInfo__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, bool jarg3) {
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  HC_KEY arg2 ;
  bool arg3 ;
  
  arg1 = (HModelInfo *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ComputeModelInfo(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HModelInfo_ComputeModelInfo__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HModelInfo *)jarg1; 
  arg2 = jarg2; 
  (arg1)->ComputeModelInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HModelInfo_ComputeModelInfo__SWIG_2(void * jarg1) {
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  
  arg1 = (HModelInfo *)jarg1; 
  (arg1)->ComputeModelInfo();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalFaces(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalFaces();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalVertices(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalVertices();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalTriangles(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalTriangles();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalTristrips(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalTristrips();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalSegments(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalSegments();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCircle(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCircle();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCircularArc(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCircularArc();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCircularChord(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCircularChord();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCircularWedge(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCircularWedge();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalEllipse(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalEllipse();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalEllipticalArc(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalEllipticalArc();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalGrid(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalGrid();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalImage(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalImage();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalIncludes(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalIncludes();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalIncluders(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalIncluders();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalLine(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalLine();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalMarker(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalMarker();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalMesh(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalMesh();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalPolygon(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalPolygon();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalPolyline(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalPolyline();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalShell(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalShell();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalStringCursor(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalStringCursor();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalText(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalText();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalMatrices(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalMatrices();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalSpotLight(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalSpotLight();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalDistantLight(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalDistantLight();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalLocalLight(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalLocalLight();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCuttingPlane(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCuttingPlane();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalCylinders(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalCylinders();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalPolyCylinders(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalPolyCylinders();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalSpheres(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalSpheres();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalNURBSCurves(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalNURBSCurves();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalNURBSSurfaces(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalNURBSSurfaces();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalReferences(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalReferences();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalInfiniteLines(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalInfiniteLines();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalInfiniteRays(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalInfiniteRays();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_HModelInfo_GetTotalOthers(void * jarg1) {
  unsigned long jresult ;
  HModelInfo *arg1 = (HModelInfo *) 0 ;
  unsigned long result;
  
  arg1 = (HModelInfo *)jarg1; 
  result = (unsigned long)(arg1)->GetTotalOthers();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HSnapGrid(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HSnapGrid *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HSnapGrid *)new HSnapGrid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HSnapGrid(void * jarg1) {
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  
  arg1 = (HSnapGrid *)jarg1; 
  delete arg1;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_Create__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->Create((HPoint const &)*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_Create__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->Create((HPoint const &)*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_Create__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HPoint *arg2 = 0 ;
  HPoint *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg3 = (HPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Create((HPoint const &)*arg2,(HPoint const &)*arg3,(HPoint const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HSnapGrid_SetOnTop(void * jarg1, bool jarg2) {
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  bool arg2 ;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOnTop(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_GetOnTop(void * jarg1) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  result = (bool)(arg1)->GetOnTop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_GetSnappedViewpointPos(void * jarg1, void * jarg2) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HPoint *arg2 = 0 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetSnappedViewpointPos(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HSnapGrid_GetSnappedWorldPos(void * jarg1, void * jarg2) {
  bool jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HPoint *arg2 = 0 ;
  bool result;
  
  arg1 = (HSnapGrid *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetSnappedWorldPos(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSnapGrid_GetGridSegment(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HC_KEY result;
  
  arg1 = (HSnapGrid *)jarg1; 
  result = (arg1)->GetGridSegment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HSnapGrid_GetGridGeometry(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HSnapGrid *arg1 = (HSnapGrid *) 0 ;
  HC_KEY result;
  
  arg1 = (HSnapGrid *)jarg1; 
  result = (arg1)->GetGridGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUndoItem() {
  void * jresult ;
  HUndoItem *result = 0 ;
  
  result = (HUndoItem *)new SwigDirector_HUndoItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUndoItem(void * jarg1) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_Undo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Undo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_UndoSwigExplicitHUndoItem__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HUndoItem::Undo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_Undo__SWIG_1(void * jarg1) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  (arg1)->Undo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_UndoSwigExplicitHUndoItem__SWIG_1(void * jarg1) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  (arg1)->HUndoItem::Undo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_Redo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Redo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_RedoSwigExplicitHUndoItem__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->HUndoItem::Redo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_Redo__SWIG_1(void * jarg1) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  (arg1)->Redo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_RedoSwigExplicitHUndoItem__SWIG_1(void * jarg1) {
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  (arg1)->HUndoItem::Redo();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUndoItem_GetName(void * jarg1) {
  char * jresult ;
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUndoItem_GetNameSwigExplicitHUndoItem(void * jarg1) {
  char * jresult ;
  HUndoItem *arg1 = (HUndoItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUndoItem *)jarg1; 
  result = (char *)(arg1)->HUndoItem::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItem_director_connect(void *objarg, SwigDirector_HUndoItem::SWIG_Callback0_t callback0, SwigDirector_HUndoItem::SWIG_Callback1_t callback1, SwigDirector_HUndoItem::SWIG_Callback2_t callback2, SwigDirector_HUndoItem::SWIG_Callback3_t callback3, SwigDirector_HUndoItem::SWIG_Callback4_t callback4) {
  HUndoItem *obj = (HUndoItem *)objarg;
  SwigDirector_HUndoItem *director = dynamic_cast<SwigDirector_HUndoItem *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUndoItemCamera(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HUndoItemCamera *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HUndoItemCamera *)new HUndoItemCamera(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUndoItemCamera(void * jarg1) {
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemCamera_Undo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Undo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemCamera_Undo__SWIG_1(void * jarg1) {
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  (arg1)->Undo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemCamera_Redo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Redo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemCamera_Redo__SWIG_1(void * jarg1) {
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  (arg1)->Redo();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUndoItemCamera_GetCamera(void * jarg1) {
  void * jresult ;
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  HCamera *result = 0 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  result = (HCamera *)(arg1)->GetCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUndoItemCamera_GetName(void * jarg1) {
  char * jresult ;
  HUndoItemCamera *arg1 = (HUndoItemCamera *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUndoItemCamera *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUndoItemMatrix(void * jarg1, int jarg2, MVO_POINTER_SIZED_INT * jarg3, float * jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HC_KEY *arg3 ;
  float *arg4 ;
  HUndoItemMatrix *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (HC_KEY *)jarg3; 
  arg4 = (float *)jarg4; 
  result = (HUndoItemMatrix *)new HUndoItemMatrix(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUndoItemMatrix(void * jarg1) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_Undo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Undo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_Undo__SWIG_1(void * jarg1) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  (arg1)->Undo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_Redo__SWIG_0(void * jarg1, bool jarg2) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  bool arg2 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Redo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_Redo__SWIG_1(void * jarg1) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  (arg1)->Redo();
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoItemMatrix_GetCount(void * jarg1) {
  int jresult ;
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  int result;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  result = (int)(arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_GetKey(void * jarg1, MVO_POINTER_SIZED_INT * jarg2) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  HC_KEY *arg2 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  arg2 = (HC_KEY *)jarg2; 
  (arg1)->GetKey(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoItemMatrix_GetMatrix(void * jarg1, float * jarg2) {
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  float *arg2 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->GetMatrix(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HUndoItemMatrix_GetName(void * jarg1) {
  char * jresult ;
  HUndoItemMatrix *arg1 = (HUndoItemMatrix *) 0 ;
  char *result = 0 ;
  
  arg1 = (HUndoItemMatrix *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HUndoManager() {
  void * jresult ;
  HUndoManager *result = 0 ;
  
  result = (HUndoManager *)new HUndoManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HUndoManager(void * jarg1) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Undo__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->Undo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Undo__SWIG_1(void * jarg1, int jarg2, bool jarg3) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->Undo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Undo__SWIG_2(void * jarg1, int jarg2) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Undo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Undo__SWIG_3(void * jarg1) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  result = (int)(arg1)->Undo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Redo__SWIG_0(void * jarg1, int jarg2, bool jarg3, bool jarg4) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->Redo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Redo__SWIG_1(void * jarg1, int jarg2, bool jarg3) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->Redo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Redo__SWIG_2(void * jarg1, int jarg2) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Redo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HUndoManager_Redo__SWIG_3(void * jarg1) {
  int jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  int result;
  
  arg1 = (HUndoManager *)jarg1; 
  result = (int)(arg1)->Redo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoManager_AddUndoItemInternal(void * jarg1, void * jarg2) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  HUndoItem *arg2 = (HUndoItem *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (HUndoItem *)jarg2; 
  (arg1)->AddUndoItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoManager_Flush(void * jarg1) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  (arg1)->Flush();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUndoManager_Peek(void * jarg1) {
  void * jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  HUndoItem *result = 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  result = (HUndoItem *)(arg1)->Peek();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoManager_Reset(void * jarg1, void * jarg2) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->Reset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoManager_BeginUndoItemIteration(void * jarg1) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  (arg1)->BeginUndoItemIteration();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HUndoManager_GetNextUndoItem(void * jarg1) {
  void * jresult ;
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  HUndoItem *result = 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  result = (HUndoItem *)(arg1)->GetNextUndoItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HUndoManager_EndUndoItemIteration(void * jarg1) {
  HUndoManager *arg1 = (HUndoManager *) 0 ;
  
  arg1 = (HUndoManager *)jarg1; 
  (arg1)->EndUndoItemIteration();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HImCuttingGeometry() {
  void * jresult ;
  HImCuttingGeometry *result = 0 ;
  
  result = (HImCuttingGeometry *)new HImCuttingGeometry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HImCuttingGeometry(void * jarg1) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_CreateCuttingGeometry__SWIG_0(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4, int jarg5) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->CreateCuttingGeometry(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_CreateCuttingGeometry__SWIG_1(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, int jarg4) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  int arg4 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->CreateCuttingGeometry(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_CreateCuttingGeometry__SWIG_2(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->CreateCuttingGeometry(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_CreateCuttingGeometry__SWIG_3(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, bool jarg4) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  bool arg4 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CreateCuttingGeometry(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_RegisterCallbacks() {
  HImCuttingGeometry::RegisterCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_SetSmallestFeature(void * jarg1, float jarg2) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  float arg2 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSmallestFeature(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HImCuttingGeometry_GetSmallestFeature(void * jarg1) {
  float jresult ;
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  float result;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  result = (float)(arg1)->GetSmallestFeature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImCuttingGeometry_SetTolerance(void * jarg1, float jarg2) {
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  float arg2 ;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTolerance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HImCuttingGeometry_GetTolerance(void * jarg1) {
  float jresult ;
  HImCuttingGeometry *arg1 = (HImCuttingGeometry *) 0 ;
  float result;
  
  arg1 = (HImCuttingGeometry *)jarg1; 
  result = (float)(arg1)->GetTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HImErrorHandler__SWIG_0(bool jarg1) {
  void * jresult ;
  bool arg1 ;
  HImErrorHandler *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (HImErrorHandler *)new HImErrorHandler(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HImErrorHandler__SWIG_1() {
  void * jresult ;
  HImErrorHandler *result = 0 ;
  
  result = (HImErrorHandler *)new HImErrorHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HImErrorHandler(void * jarg1) {
  HImErrorHandler *arg1 = (HImErrorHandler *) 0 ;
  
  arg1 = (HImErrorHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImErrorHandler_RegisterCallbacks() {
  HImErrorHandler::RegisterCallbacks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImErrorHandler_Block(int jarg1, int jarg2, int jarg3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  HImErrorHandler::Block(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImErrorHandler_Pass(int jarg1, int jarg2, int jarg3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  HImErrorHandler::Pass(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImErrorHandler_SetBlockByDefault(void * jarg1, bool jarg2) {
  HImErrorHandler *arg1 = (HImErrorHandler *) 0 ;
  bool arg2 ;
  
  arg1 = (HImErrorHandler *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBlockByDefault(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HImErrorHandler_BlockByDefault() {
  bool jresult ;
  bool result;
  
  result = (bool)HImErrorHandler::BlockByDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HImErrorHandler_CallbackEntryPoint(int jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6, void * jarg7) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char **arg5 ;
  int arg6 ;
  char **arg7 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char **)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char **)jarg7; 
  HImErrorHandler::CallbackEntryPoint(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HU3DOptions() {
  void * jresult ;
  HU3DOptions *result = 0 ;
  
  result = (HU3DOptions *)new HU3DOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HU3DOptions_Reset(void * jarg1) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HU3DOptions_m_bExportLines_set(void * jarg1, bool jarg2) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bExportLines = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HU3DOptions_m_bExportLines_get(void * jarg1) {
  bool jresult ;
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool result;
  
  arg1 = (HU3DOptions *)jarg1; 
  result = (bool) ((arg1)->m_bExportLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HU3DOptions_m_bExportAnnotations_set(void * jarg1, bool jarg2) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bExportAnnotations = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HU3DOptions_m_bExportAnnotations_get(void * jarg1) {
  bool jresult ;
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool result;
  
  arg1 = (HU3DOptions *)jarg1; 
  result = (bool) ((arg1)->m_bExportAnnotations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HU3DOptions_ExportLines__SWIG_0(void * jarg1) {
  bool jresult ;
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool result;
  
  arg1 = (HU3DOptions *)jarg1; 
  result = (bool)((HU3DOptions const *)arg1)->ExportLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HU3DOptions_ExportLines__SWIG_1(void * jarg1, bool jarg2) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ExportLines(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HU3DOptions_ExportAnnotations__SWIG_0(void * jarg1) {
  bool jresult ;
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool result;
  
  arg1 = (HU3DOptions *)jarg1; 
  result = (bool)((HU3DOptions const *)arg1)->ExportAnnotations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HU3DOptions_ExportAnnotations__SWIG_1(void * jarg1, bool jarg2) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ExportAnnotations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HU3DOptions(void * jarg1) {
  HU3DOptions *arg1 = (HU3DOptions *) 0 ;
  
  arg1 = (HU3DOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HIOUtilityPDF() {
  void * jresult ;
  HIOUtilityPDF *result = 0 ;
  
  result = (HIOUtilityPDF *)new HIOUtilityPDF();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HIOUtilityPDF(void * jarg1) {
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HIOUtilityPDF_GetOutputName(void * jarg1) {
  char * jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  char *result = 0 ;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  result = (char *)(arg1)->GetOutputName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HIOUtilityPDF_RegisterOutputHandlerTypes(void * jarg1) {
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  (arg1)->RegisterOutputHandlerTypes();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HIOUtilityPDF_GetOutputTypesString(void * jarg1) {
  char * jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  char *result = 0 ;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  result = (char *)(arg1)->GetOutputTypesString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIOUtilityPDF_GetOutputStyle(void * jarg1) {
  int jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  HOutputHandlerStyle result;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  result = (HOutputHandlerStyle)(arg1)->GetOutputStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HIOUtilityPDF_GetOutputDefaultHSRA(void * jarg1) {
  char * jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  char *result = 0 ;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  result = (char *)(arg1)->GetOutputDefaultHSRA();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HIOUtilityPDF_Has3dSupport(void * jarg1) {
  bool jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  bool result;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  result = (bool)(arg1)->Has3dSupport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIOUtilityPDF_FileOutputByKey(void * jarg1, wchar_t * jarg2, MVO_POINTER_SIZED_INT jarg3, void * jarg4) {
  int jresult ;
  HIOUtilityPDF *arg1 = (HIOUtilityPDF *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  HC_KEY arg3 ;
  HOutputHandlerOptions *arg4 = (HOutputHandlerOptions *) 0 ;
  HFileIOResult result;
  
  arg1 = (HIOUtilityPDF *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  arg3 = jarg3; 
  arg4 = (HOutputHandlerOptions *)jarg4; 
  result = (HFileIOResult)(arg1)->FileOutputByKey((wchar_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbitTurntable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraOrbitTurntable *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraOrbitTurntable *)new SwigDirector_HOpCameraOrbitTurntable(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbitTurntable__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraOrbitTurntable *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraOrbitTurntable *)new SwigDirector_HOpCameraOrbitTurntable(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraOrbitTurntable__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraOrbitTurntable *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraOrbitTurntable *)new SwigDirector_HOpCameraOrbitTurntable(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraOrbitTurntable(void * jarg1) {
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_GetNameSwigExplicitHOpCameraOrbitTurntable(void * jarg1) {
  char * jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  result = (char *)(arg1)->HOpCameraOrbitTurntable::GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonDownSwigExplicitHOpCameraOrbitTurntable(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbitTurntable::OnLButtonDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonDownAndMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonDownAndMoveSwigExplicitHOpCameraOrbitTurntable(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbitTurntable::OnLButtonDownAndMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnLButtonUpSwigExplicitHOpCameraOrbitTurntable(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbitTurntable::OnLButtonUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnMouseWheel(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_OnMouseWheelSwigExplicitHOpCameraOrbitTurntable(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->HOpCameraOrbitTurntable::OnMouseWheel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  bool result;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_SetCenter(void * jarg1, void * jarg2) {
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCenter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_UnSetCenter(void * jarg1) {
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  (arg1)->UnSetCenter();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_CloneSwigExplicitHOpCameraOrbitTurntable(void * jarg1) {
  void * jresult ;
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  result = (HBaseOperator *)(arg1)->HOpCameraOrbitTurntable::Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_RotateAroundAxis(void * jarg1, void * jarg2, float jarg3) {
  HOpCameraOrbitTurntable *arg1 = (HOpCameraOrbitTurntable *) 0 ;
  HPoint arg2 ;
  float arg3 ;
  HPoint *argp2 ;
  SwigDirector_HOpCameraOrbitTurntable *darg = 0;
  
  arg1 = (HOpCameraOrbitTurntable *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  darg = dynamic_cast<SwigDirector_HOpCameraOrbitTurntable *>(arg1);
  (darg)->RotateAroundAxis(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraOrbitTurntable_director_connect(void *objarg, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback0_t callback0, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback1_t callback1, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback2_t callback2, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback3_t callback3, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback4_t callback4, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback5_t callback5, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback6_t callback6, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback7_t callback7, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback8_t callback8, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback9_t callback9, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback10_t callback10, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback11_t callback11, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback12_t callback12, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback13_t callback13, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback14_t callback14, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback15_t callback15, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback16_t callback16, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback17_t callback17, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback18_t callback18, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback19_t callback19, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback20_t callback20, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback21_t callback21, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback22_t callback22, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback23_t callback23, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback24_t callback24, SwigDirector_HOpCameraOrbitTurntable::SWIG_Callback25_t callback25) {
  HOpCameraOrbitTurntable *obj = (HOpCameraOrbitTurntable *)objarg;
  SwigDirector_HOpCameraOrbitTurntable *director = dynamic_cast<SwigDirector_HOpCameraOrbitTurntable *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TK_Dispatch_XML(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  TK_Dispatch_XML *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (TK_Dispatch_XML *)new TK_Dispatch_XML(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TK_Dispatch_XML(void * jarg1) {
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dispatch_XML_Interpret(void * jarg1, void * jarg2, ID_Key jarg3, int jarg4) {
  int jresult ;
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  long arg3 ;
  int arg4 ;
  TK_Status result;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (int)jarg4; 
  result = (TK_Status)(arg1)->Interpret(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dispatch_XML_Execute(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Execute(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TK_Dispatch_XML_Read(void * jarg1, void * jarg2) {
  int jresult ;
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  BStreamFileToolkit *arg2 = 0 ;
  TK_Status result;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  arg2 = (BStreamFileToolkit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BStreamFileToolkit & type is null", 0);
    return 0;
  } 
  result = (TK_Status)(arg1)->Read(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dispatch_XML_AddHandler(void * jarg1, void * jarg2) {
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  TK_XML *arg2 = (TK_XML *) 0 ;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  arg2 = (TK_XML *)jarg2; 
  (arg1)->AddHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TK_Dispatch_XML_StopIteration(void * jarg1) {
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  (arg1)->StopIteration();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TK_Dispatch_XML_MakeCopy(void * jarg1) {
  void * jresult ;
  TK_Dispatch_XML *arg1 = (TK_Dispatch_XML *) 0 ;
  TK_Dispatch_XML *result = 0 ;
  
  arg1 = (TK_Dispatch_XML *)jarg1; 
  result = (TK_Dispatch_XML *)(arg1)->MakeCopy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvTargetObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (HBhvTargetObject *)new HBhvTargetObject(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvTargetObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (HBhvTargetObject *)new HBhvTargetObject(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvTargetObject_GetName(void * jarg1) {
  char * jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvTargetObject_GetPath(void * jarg1) {
  char * jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (char *)(arg1)->GetPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBhvTargetObject_GetTargetKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HC_KEY result;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (arg1)->GetTargetKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_SetTargetKey(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetTargetKey(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvTargetObject_GetResolvedPath(void * jarg1) {
  char * jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (char *)(arg1)->GetResolvedPath();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvTargetObject_GetHType(void * jarg1) {
  char * jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (char *)(arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvTargetObject_IsEqual(void * jarg1, char * jarg2) {
  bool jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsEqual((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvTargetObject_GetCameraType(void * jarg1) {
  int jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HBhvCameraType result;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (HBhvCameraType)(arg1)->GetCameraType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_ResolveTarget(char * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBaseModel *arg4 = (HBaseModel *) 0 ;
  HBhvCameraType *arg5 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HBaseModel *)jarg4; 
  arg5 = (HBhvCameraType *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HBhvCameraType & type is null", 0);
    return ;
  } 
  HBhvTargetObject::ResolveTarget((char const *)arg1,arg2,arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_CreateTargetString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, bool jarg4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = jarg4 ? true : false; 
  HBhvTargetObject::CreateTargetString((char const *)arg1,(char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_CreateTargetString__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  HBhvTargetObject::CreateTargetString((char const *)arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_SetPivot__SWIG_0(void * jarg1, void * jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetPivot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_SetCollision(void * jarg1, bool jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCollision(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvTargetObject_GetCollision(void * jarg1) {
  bool jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  bool result;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (bool)(arg1)->GetCollision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_SetPivot__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPivot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_GetPivot__SWIG_0(void * jarg1, void * jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HPoint *arg2 = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = (HPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->GetPivot(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvTargetObject_GetPivot__SWIG_1(void * jarg1) {
  void * jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (HPoint *)(arg1)->GetPivot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_Serialize(void * jarg1, void * jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  HUtilityXMLGenerator *arg2 = (HUtilityXMLGenerator *) 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = (HUtilityXMLGenerator *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvTargetObject_XMLCallback(void * jarg1, bool jarg2, void * jarg3) {
  void * jresult ;
  HUtilityXMLTag *arg1 = (HUtilityXMLTag *) 0 ;
  bool arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (HUtilityXMLTag *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  result = (void *)HBhvTargetObject::XMLCallback(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_FlagForCollision(void * jarg1) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  (arg1)->FlagForCollision();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_ResetForCollision(void * jarg1) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  (arg1)->ResetForCollision();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvTargetObject_HasMoved(void * jarg1) {
  bool jresult ;
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  bool result;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  result = (bool)(arg1)->HasMoved();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvTargetObject_SetSerializeFromKey(void * jarg1, bool jarg2) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSerializeFromKey(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvTargetObject(void * jarg1) {
  HBhvTargetObject *arg1 = (HBhvTargetObject *) 0 ;
  
  arg1 = (HBhvTargetObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_0(void * jarg1, int jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_1(void * jarg1, int jarg2, int jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_2(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1,arg2,arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_3(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  int arg3 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_4(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  int arg2 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvBehaviorManager__SWIG_5(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBhvBehaviorManager *)new HBhvBehaviorManager(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvBehaviorManager(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetTicksPerSecond(void * jarg1, int jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  int arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTicksPerSecond(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvBehaviorManager_GetTicksPerSecond(void * jarg1) {
  int jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  int result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (int)(arg1)->GetTicksPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Serialize(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HUtilityXMLGenerator *arg2 = (HUtilityXMLGenerator *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HUtilityXMLGenerator *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ScheduleAnimation(void * jarg1, void * jarg2, float jarg3) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  float arg3 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->ScheduleAnimation(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAnimation__SWIG_0(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBhvTimeline *arg4 = (HBhvTimeline *) 0 ;
  HBhvInterpolator *arg5 = (HBhvInterpolator *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HBhvTimeline *)jarg4; 
  arg5 = (HBhvInterpolator *)jarg5; 
  result = (HBhvAnimation *)(arg1)->AddAnimation((char const *)arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAnimation__SWIG_1(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  (arg1)->AddAnimation(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_Tick(void * jarg1, float jarg2, float jarg3) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Tick(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_GetAnimationList(void * jarg1) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (vlist_s *)(arg1)->GetAnimationList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvBehaviorManager_GetFreeName(void * jarg1) {
  int jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  int result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (int)(arg1)->GetFreeName();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_DeleteAllAnimations(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->DeleteAllAnimations();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_FindAnimation(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (HBhvAnimation *)(arg1)->FindAnimation((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_FindAnimationByName(void * jarg1, char * jarg2) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HBhvAnimation *)(arg1)->FindAnimationByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ScheduleAllAnimations__SWIG_0(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ScheduleAllAnimations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ScheduleAllAnimations__SWIG_1(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->ScheduleAllAnimations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_DeleteAnimation(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  (arg1)->DeleteAnimation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_CreateTargetObjectByPath(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (HBhvTargetObject *)(arg1)->CreateTargetObjectByPath((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTargetObject(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  (arg1)->AddTargetObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_FindTargetObjectByName(void * jarg1, char * jarg2) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HBhvTargetObject *)(arg1)->FindTargetObjectByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_FindTargetObjectByPath(void * jarg1, char * jarg2) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HBhvTargetObject *)(arg1)->FindTargetObjectByPath((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_WriteToFile__SWIG_0(void * jarg1, wchar_t * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  (arg1)->WriteToFile((wchar_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ReadFromFile__SWIG_0(void * jarg1, wchar_t * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (wchar_t *)jarg2; 
  HBhvBehaviorManager::ReadFromFile(arg1,(wchar_t const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ProcessXMLData(void * jarg1, char * jarg2) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  HBhvBehaviorManager::ProcessXMLData(arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_XMLCallback(void * jarg1, bool jarg2, void * jarg3) {
  void * jresult ;
  HUtilityXMLTag *arg1 = (HUtilityXMLTag *) 0 ;
  bool arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (HUtilityXMLTag *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  result = (void *)HBhvBehaviorManager::XMLCallback(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_GetModel(void * jarg1) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (HBaseModel *)(arg1)->GetModel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetCurrentTickByTime(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCurrentTickByTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetCurrentTick__SWIG_0(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCurrentTick(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetCurrentTick__SWIG_1(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->SetCurrentTick();
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBhvBehaviorManager_GetCurrentTick(void * jarg1) {
  float jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (float)(arg1)->GetCurrentTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetCurrentTickByPercentage(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCurrentTickByPercentage(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBhvBehaviorManager_GetCurrentTickByPercentage(void * jarg1) {
  float jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (float)(arg1)->GetCurrentTickByPercentage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Rewind(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->Rewind();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_IsPlaying(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->IsPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBhvBehaviorManager_GetActiveSceneKey(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HC_KEY result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (arg1)->GetActiveSceneKey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetActiveView(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBaseView *arg2 = (HBaseView *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBaseView *)jarg2; 
  (arg1)->SetActiveView(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_GetActiveView(void * jarg1) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBaseView *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (HBaseView *)(arg1)->GetActiveView();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_GetRenderEveryTick(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->GetRenderEveryTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetRenderEveryTick(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRenderEveryTick(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_GetUpdateCamera(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->GetUpdateCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_IsAtFinalTick(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->IsAtFinalTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetUpdateCamera(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUpdateCamera(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvBehaviorManager_GetNextKeyframe(void * jarg1, int jarg2, bool jarg3) {
  int jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->GetNextKeyframe(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddSensor(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvSensor *arg2 = (HBhvSensor *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvSensor *)jarg2; 
  (arg1)->AddSensor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_RemoveScheduledAnimation(void * jarg1, void * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  (arg1)->RemoveScheduledAnimation(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_HasAnimations(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->HasAnimations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvBehaviorManager_GetLastTick(void * jarg1) {
  int jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  int result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (int)(arg1)->GetLastTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_FindSensorByName(void * jarg1, char * jarg2) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HBhvSensor *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (HBhvSensor *)(arg1)->FindSensorByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ExecuteAnimations(void * jarg1, float jarg2, float jarg3) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->ExecuteAnimations(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetContinuousPlay(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetContinuousPlay(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetInfinitePlay(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInfinitePlay(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_GetContinuousPlay(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->GetContinuousPlay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_CameraUpdated(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->CameraUpdated();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_GetCameraUpdated(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->GetCameraUpdated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Play(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->Play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Stop(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Continue(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->Continue();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetPositionMatrix(void * jarg1, float * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetPositionMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_GetPositionMatrix(void * jarg1, float * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->GetPositionMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetTargetMatrix(void * jarg1, float * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetTargetMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_GetTargetMatrix(void * jarg1, float * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->GetTargetMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetFov(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFov(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_GetFov(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->GetFov(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_Reset(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_DeactivateAllAnimations(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->DeactivateAllAnimations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ActivateAllAnimations(void * jarg1) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  (arg1)->ActivateAllAnimations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ActivateAnimationByName__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ActivateAnimationByName((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_ActivateAnimationByName__SWIG_1(void * jarg1, char * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ActivateAnimationByName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_DeactivateAnimationByName__SWIG_0(void * jarg1, char * jarg2, bool jarg3) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DeactivateAnimationByName((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_DeactivateAnimationByName__SWIG_1(void * jarg1, char * jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DeactivateAnimationByName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetStartTime(void * jarg1, float jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  float arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetStartTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_SetMerge(void * jarg1, bool jarg2) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMerge(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvBehaviorManager_GetMerge(void * jarg1) {
  bool jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  bool result;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  result = (bool)(arg1)->GetMerge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAnimation__SWIG_2(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (HBhvAnimation *)(arg1)->AddAnimation((char const *)arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddPositionKeyframe(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddPositionKeyframe((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddQuatSquadKeyframe(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HQuat arg4 ;
  bool arg5 ;
  HQuat *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HQuat *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HQuat", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddQuatSquadKeyframe((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddMatrixKeyframe(void * jarg1, char * jarg2, int jarg3, float * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float *arg4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->AddMatrixKeyframe((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddSegmentMoveKeyframe(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->AddSegmentMoveKeyframe((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTrailKeyframe__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5, void * jarg6, int * jarg7, char * jarg8, char * jarg9) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  TrailInterpolatorType *arg6 = (TrailInterpolatorType *) 0 ;
  int *arg7 = (int *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (TrailInterpolatorType *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->AddTrailKeyframe((char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTrailKeyframe__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5, void * jarg6, int * jarg7, char * jarg8) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  TrailInterpolatorType *arg6 = (TrailInterpolatorType *) 0 ;
  int *arg7 = (int *) 0 ;
  char *arg8 = (char *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (TrailInterpolatorType *)jarg6; 
  arg7 = (int *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->AddTrailKeyframe((char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTrailKeyframe__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5, void * jarg6, int * jarg7) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  TrailInterpolatorType *arg6 = (TrailInterpolatorType *) 0 ;
  int *arg7 = (int *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (TrailInterpolatorType *)jarg6; 
  arg7 = (int *)jarg7; 
  (arg1)->AddTrailKeyframe((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTrailKeyframe__SWIG_3(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5, void * jarg6) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  TrailInterpolatorType *arg6 = (TrailInterpolatorType *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (TrailInterpolatorType *)jarg6; 
  (arg1)->AddTrailKeyframe((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddTrailKeyframe__SWIG_4(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddTrailKeyframe((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_0(void * jarg1, char * jarg2, int jarg3, float jarg4, void * jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  HPoint *arg5 = (HPoint *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (HPoint *)jarg5; 
  (arg1)->AddAxisRotateKeyframe((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAxisRotateKeyframe__SWIG_1(void * jarg1, char * jarg2, int jarg3, float jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->AddAxisRotateKeyframe((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorKeyframe__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, char * jarg5, char * jarg6) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->AddColorKeyframe((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorKeyframe__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4, char * jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  char *arg5 = (char *) 0 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (char *)jarg5; 
  (arg1)->AddColorKeyframe((char const *)arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorKeyframe__SWIG_2(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->AddColorKeyframe((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddScaleKeyframe(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  HPoint *argp4 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->AddScaleKeyframe((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddAttributeSwitchKeyframe(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->AddAttributeSwitchKeyframe((char const *)arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddVertexMorphInterpolator(void * jarg1, char * jarg2, int jarg3, char * jarg4, bool jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddVertexMorphInterpolator((char const *)arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorMorphInterpolator(void * jarg1, char * jarg2, int jarg3, char * jarg4, bool jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddColorMorphInterpolator((char const *)arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddSegmentSwitchKeyframe(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->AddSegmentSwitchKeyframe((char const *)arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddInstanceCreateKeyframe(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->AddInstanceCreateKeyframe((char const *)arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int arg4 ;
  HBaseModel *arg5 = (HBaseModel *) 0 ;
  int arg6 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HBaseModel *)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->AddVertexMorphDataToAnimation((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddVertexMorphDataToAnimation__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int arg4 ;
  HBaseModel *arg5 = (HBaseModel *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HBaseModel *)jarg5; 
  (arg1)->AddVertexMorphDataToAnimation((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_0(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5, int jarg6) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int arg4 ;
  HBaseModel *arg5 = (HBaseModel *) 0 ;
  int arg6 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HBaseModel *)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->AddColorMorphDataToAnimation((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvBehaviorManager_AddColorMorphDataToAnimation__SWIG_1(void * jarg1, char * jarg2, void * jarg3, int jarg4, void * jarg5) {
  HBhvBehaviorManager *arg1 = (HBhvBehaviorManager *) 0 ;
  char *arg2 = (char *) 0 ;
  HPoint *arg3 = (HPoint *) 0 ;
  int arg4 ;
  HBaseModel *arg5 = (HBaseModel *) 0 ;
  
  arg1 = (HBhvBehaviorManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (HPoint *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (HBaseModel *)jarg5; 
  (arg1)->AddColorMorphDataToAnimation((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BHV_MAX_NAME_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int) 256;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BHV_MAX_VERSION_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int) 256;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BHV_MAX_VENDOR_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int) 4096;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BHV_MAX_TYPE_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int) 4096;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_x_set(void * jarg1, float jarg2) {
  HQuat *arg1 = (HQuat *) 0 ;
  float arg2 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HQuat_x_get(void * jarg1) {
  float jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  float result;
  
  arg1 = (HQuat *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_y_set(void * jarg1, float jarg2) {
  HQuat *arg1 = (HQuat *) 0 ;
  float arg2 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HQuat_y_get(void * jarg1) {
  float jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  float result;
  
  arg1 = (HQuat *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_z_set(void * jarg1, float jarg2) {
  HQuat *arg1 = (HQuat *) 0 ;
  float arg2 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HQuat_z_get(void * jarg1) {
  float jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  float result;
  
  arg1 = (HQuat *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_w_set(void * jarg1, float jarg2) {
  HQuat *arg1 = (HQuat *) 0 ;
  float arg2 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HQuat_w_get(void * jarg1) {
  float jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  float result;
  
  arg1 = (HQuat *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Normalize(void * jarg1) {
  void * jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  HQuat *result = 0 ;
  
  arg1 = (HQuat *)jarg1; 
  result = (HQuat *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuat__SWIG_0() {
  void * jresult ;
  HQuat *result = 0 ;
  
  result = (HQuat *)new HQuat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuat__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HQuat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HQuat *)new HQuat(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HQuat__SWIG_2(void * jarg1) {
  void * jresult ;
  HQuat *arg1 = (HQuat *) 0 ;
  HQuat *result = 0 ;
  
  arg1 = (HQuat *)jarg1; 
  result = (HQuat *)new HQuat((HQuat const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_Set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  HQuat *arg1 = (HQuat *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qlog(void * jarg1) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  result = HQuat::Qlog((HQuat const &)*arg1);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HQuat_ToMatrix(void * jarg1, void * jarg2) {
  HQuat *arg1 = (HQuat *) 0 ;
  float *arg2 ;
  
  arg1 = (HQuat *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->ToMatrix(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qexp(void * jarg1) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  result = HQuat::Qexp((HQuat const &)*arg1);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qlerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  float arg3 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = HQuat::Qlerp((HQuat const &)*arg1,(HQuat const &)*arg2,arg3);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qslerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  float arg3 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = HQuat::Qslerp((HQuat const &)*arg1,(HQuat const &)*arg2,arg3);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_QslerpNoInvert(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  float arg3 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = HQuat::QslerpNoInvert((HQuat const &)*arg1,(HQuat const &)*arg2,arg3);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_QslerpNoInvertExtraSpins(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = HQuat::QslerpNoInvertExtraSpins((HQuat const &)*arg1,(HQuat const &)*arg2,arg3,arg4);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qsquad(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  HQuat *arg3 = 0 ;
  HQuat *arg4 = 0 ;
  float arg5 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (HQuat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg4 = (HQuat *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = HQuat::Qsquad((HQuat const &)*arg1,(HQuat const &)*arg2,(HQuat const &)*arg3,(HQuat const &)*arg4,arg5);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_Qspline(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  HQuat *arg1 = 0 ;
  HQuat *arg2 = 0 ;
  HQuat *arg3 = 0 ;
  HQuat result;
  
  arg1 = (HQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  arg3 = (HQuat *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat const & type is null", 0);
    return 0;
  } 
  result = HQuat::Qspline((HQuat const &)*arg1,(HQuat const &)*arg2,(HQuat const &)*arg3);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HQuat_MatrixToQuaternion(float * jarg1) {
  void * jresult ;
  float *arg1 ;
  HQuat result;
  
  arg1 = (float *)jarg1; 
  result = HQuat::MatrixToQuaternion(arg1);
  jresult = new HQuat((const HQuat &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HQuat(void * jarg1) {
  HQuat *arg1 = (HQuat *) 0 ;
  
  arg1 = (HQuat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframe() {
  void * jresult ;
  HKeyframe *result = 0 ;
  
  result = (HKeyframe *)new HKeyframe();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframe(void * jarg1) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  
  arg1 = (HKeyframe *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframe_Clone(void * jarg1) {
  void * jresult ;
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframe *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_Serialize(void * jarg1, void * jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_SetConstant(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetConstant(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_SetEaseInOut(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEaseInOut(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_SetRelative(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRelative(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_m_type_set(void * jarg1, int jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  HANIKeyframeType arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = (HANIKeyframeType)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HKeyframe_m_type_get(void * jarg1) {
  int jresult ;
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  HANIKeyframeType result;
  
  arg1 = (HKeyframe *)jarg1; 
  result = (HANIKeyframeType) ((arg1)->m_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_m_bConstant_set(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bConstant = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframe_m_bConstant_get(void * jarg1) {
  bool jresult ;
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool result;
  
  arg1 = (HKeyframe *)jarg1; 
  result = (bool) ((arg1)->m_bConstant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_m_bRelative_set(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bRelative = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframe_m_bRelative_get(void * jarg1) {
  bool jresult ;
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool result;
  
  arg1 = (HKeyframe *)jarg1; 
  result = (bool) ((arg1)->m_bRelative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe_m_bEaseInOut_set(void * jarg1, bool jarg2) {
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframe *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bEaseInOut = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframe_m_bEaseInOut_get(void * jarg1) {
  bool jresult ;
  HKeyframe *arg1 = (HKeyframe *) 0 ;
  bool result;
  
  arg1 = (HKeyframe *)jarg1; 
  result = (bool) ((arg1)->m_bEaseInOut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannel() {
  void * jresult ;
  HKeyframeChannel *result = 0 ;
  
  result = (HKeyframeChannel *)new HKeyframeChannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeChannel(void * jarg1) {
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannel_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannel_Interpolate(void * jarg1, void * jarg2, int jarg3, float jarg4, int jarg5, void * jarg6) {
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HKeyframeChannel **arg2 = (HKeyframeChannel **) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  arg2 = (HKeyframeChannel **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Interpolate(arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannel_m_cp_set(void * jarg1, void * jarg2) {
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_cp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannel_m_cp_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  result = (HPoint *)& ((arg1)->m_cp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannel_m_channeltype_set(void * jarg1, int jarg2) {
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HANIChannelType arg2 ;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  arg2 = (HANIChannelType)jarg2; 
  if (arg1) (arg1)->m_channeltype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HKeyframeChannel_m_channeltype_get(void * jarg1) {
  int jresult ;
  HKeyframeChannel *arg1 = (HKeyframeChannel *) 0 ;
  HANIChannelType result;
  
  arg1 = (HKeyframeChannel *)jarg1; 
  result = (HANIChannelType) ((arg1)->m_channeltype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelLinear__SWIG_0(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HKeyframeChannelLinear *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HKeyframeChannelLinear *)new HKeyframeChannelLinear(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelLinear__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HKeyframeChannelLinear *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HKeyframeChannelLinear *)new HKeyframeChannelLinear(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelLinear__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeChannelLinear *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeChannelLinear *)new HKeyframeChannelLinear(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelLinear__SWIG_3() {
  void * jresult ;
  HKeyframeChannelLinear *result = 0 ;
  
  result = (HKeyframeChannelLinear *)new HKeyframeChannelLinear();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeChannelLinear(void * jarg1) {
  HKeyframeChannelLinear *arg1 = (HKeyframeChannelLinear *) 0 ;
  
  arg1 = (HKeyframeChannelLinear *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelLinear_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeChannelLinear *arg1 = (HKeyframeChannelLinear *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeChannelLinear *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelLinear_Interpolate(void * jarg1, void * jarg2, int jarg3, float jarg4, int jarg5, void * jarg6) {
  HKeyframeChannelLinear *arg1 = (HKeyframeChannelLinear *) 0 ;
  HKeyframeChannel **arg2 = (HKeyframeChannel **) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HKeyframeChannelLinear *)jarg1; 
  arg2 = (HKeyframeChannel **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Interpolate(arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelLinear_Serialize(void * jarg1, void * jarg2) {
  HKeyframeChannelLinear *arg1 = (HKeyframeChannelLinear *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeChannelLinear *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelDiscrete__SWIG_0(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HKeyframeChannelDiscrete *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HKeyframeChannelDiscrete *)new HKeyframeChannelDiscrete(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelDiscrete__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HKeyframeChannelDiscrete *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HKeyframeChannelDiscrete *)new HKeyframeChannelDiscrete(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelDiscrete__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeChannelDiscrete *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeChannelDiscrete *)new HKeyframeChannelDiscrete(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelDiscrete__SWIG_3() {
  void * jresult ;
  HKeyframeChannelDiscrete *result = 0 ;
  
  result = (HKeyframeChannelDiscrete *)new HKeyframeChannelDiscrete();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeChannelDiscrete(void * jarg1) {
  HKeyframeChannelDiscrete *arg1 = (HKeyframeChannelDiscrete *) 0 ;
  
  arg1 = (HKeyframeChannelDiscrete *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelDiscrete_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeChannelDiscrete *arg1 = (HKeyframeChannelDiscrete *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeChannelDiscrete *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelDiscrete_Interpolate(void * jarg1, void * jarg2, int jarg3, float jarg4, int jarg5, void * jarg6) {
  HKeyframeChannelDiscrete *arg1 = (HKeyframeChannelDiscrete *) 0 ;
  HKeyframeChannel **arg2 = (HKeyframeChannel **) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HKeyframeChannelDiscrete *)jarg1; 
  arg2 = (HKeyframeChannel **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Interpolate(arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelDiscrete_Serialize(void * jarg1, void * jarg2) {
  HKeyframeChannelDiscrete *arg1 = (HKeyframeChannelDiscrete *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeChannelDiscrete *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelCurve__SWIG_0(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HKeyframeChannelCurve *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HKeyframeChannelCurve *)new HKeyframeChannelCurve(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelCurve__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HKeyframeChannelCurve *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HKeyframeChannelCurve *)new HKeyframeChannelCurve(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelCurve__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeChannelCurve *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeChannelCurve *)new HKeyframeChannelCurve(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelCurve__SWIG_3() {
  void * jresult ;
  HKeyframeChannelCurve *result = 0 ;
  
  result = (HKeyframeChannelCurve *)new HKeyframeChannelCurve();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeChannelCurve(void * jarg1) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelCurve_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_CalculateCurveFactor(void * jarg1, void * jarg2, int jarg3) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HBhvTimeline *arg2 = (HBhvTimeline *) 0 ;
  int arg3 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (HBhvTimeline *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->CalculateCurveFactor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  float arg5 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  (arg1)->CalculateHermiteTangents(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint *argp2 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->CalculateHermiteTangents(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelCurve_InterpolateHermiteSpline(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  HPoint arg3 ;
  HPoint arg4 ;
  HPoint *argp3 ;
  HPoint *argp4 ;
  HPoint result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  argp3 = (HPoint *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->InterpolateHermiteSpline(arg2,arg3,arg4);
  jresult = new HPoint((const HPoint &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_CalculateCurveLength(void * jarg1, void * jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->CalculateCurveLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_DrawTangents(void * jarg1, void * jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint arg2 ;
  HPoint *argp2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  argp2 = (HPoint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->DrawTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_Interpolate(void * jarg1, void * jarg2, int jarg3, float jarg4, int jarg5, void * jarg6) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HKeyframeChannel **arg2 = (HKeyframeChannel **) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (HKeyframeChannel **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Interpolate(arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_Serialize(void * jarg1, void * jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_tangent1_set(void * jarg1, void * jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_tangent1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_tangent1_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (HPoint *)& ((arg1)->m_tangent1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_tangent2_set(void * jarg1, void * jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint *arg2 = (HPoint *) 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (HPoint *)jarg2; 
  if (arg1) (arg1)->m_tangent2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_tangent2_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (HPoint *)& ((arg1)->m_tangent2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_factor1_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_factor1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_factor1_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->m_factor1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_factor2_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_factor2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_factor2_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->m_factor2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelCurve_control_polygon_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  HPoint *result = 0 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (HPoint *) ((arg1)->control_polygon);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_ItemType_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ItemType = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_ItemType_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->ItemType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_c_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_c_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_b_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_b_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_curvelength_set(void * jarg1, float jarg2) {
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_curvelength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeChannelCurve_m_curvelength_get(void * jarg1) {
  float jresult ;
  HKeyframeChannelCurve *arg1 = (HKeyframeChannelCurve *) 0 ;
  float result;
  
  arg1 = (HKeyframeChannelCurve *)jarg1; 
  result = (float) ((arg1)->m_curvelength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeChannelFollowPath() {
  void * jresult ;
  HKeyframeChannelFollowPath *result = 0 ;
  
  result = (HKeyframeChannelFollowPath *)new HKeyframeChannelFollowPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeChannelFollowPath(void * jarg1) {
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_Interpolate(void * jarg1, void * jarg2, int jarg3, float jarg4, int jarg5, void * jarg6) {
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  HKeyframeChannel **arg2 = (HKeyframeChannel **) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  HPoint *arg6 = 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  arg2 = (HKeyframeChannel **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (HPoint *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Interpolate(arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_Serialize(void * jarg1, void * jarg2) {
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_tmatrix_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  float *result = 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  result = (float *)(float *) ((arg1)->tmatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_tmatrix2_get(void * jarg1) {
  void * jresult ;
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  float *result = 0 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  result = (float *)(float *) ((arg1)->tmatrix2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_m_bLinear_set(void * jarg1, bool jarg2) {
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLinear = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_m_bLinear_get(void * jarg1) {
  bool jresult ;
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  bool result;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  result = (bool) ((arg1)->m_bLinear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_m_bNoRotate_set(void * jarg1, bool jarg2) {
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bNoRotate = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframeChannelFollowPath_m_bNoRotate_get(void * jarg1) {
  bool jresult ;
  HKeyframeChannelFollowPath *arg1 = (HKeyframeChannelFollowPath *) 0 ;
  bool result;
  
  arg1 = (HKeyframeChannelFollowPath *)jarg1; 
  result = (bool) ((arg1)->m_bNoRotate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeRotation() {
  void * jresult ;
  HKeyframeRotation *result = 0 ;
  
  result = (HKeyframeRotation *)new HKeyframeRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeRotation(void * jarg1) {
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeRotation_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeRotation_m_rotationtype_set(void * jarg1, int jarg2) {
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  HANIRotationType arg2 ;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  arg2 = (HANIRotationType)jarg2; 
  if (arg1) (arg1)->m_rotationtype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HKeyframeRotation_m_rotationtype_get(void * jarg1) {
  int jresult ;
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  HANIRotationType result;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  result = (HANIRotationType) ((arg1)->m_rotationtype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeRotation_m_bLinear_set(void * jarg1, bool jarg2) {
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bLinear = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframeRotation_m_bLinear_get(void * jarg1) {
  bool jresult ;
  HKeyframeRotation *arg1 = (HKeyframeRotation *) 0 ;
  bool result;
  
  arg1 = (HKeyframeRotation *)jarg1; 
  result = (bool) ((arg1)->m_bLinear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeAxisRotation__SWIG_0(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeAxisRotation *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeAxisRotation *)new HKeyframeAxisRotation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeAxisRotation__SWIG_1() {
  void * jresult ;
  HKeyframeAxisRotation *result = 0 ;
  
  result = (HKeyframeAxisRotation *)new HKeyframeAxisRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeAxisRotation(void * jarg1) {
  HKeyframeAxisRotation *arg1 = (HKeyframeAxisRotation *) 0 ;
  
  arg1 = (HKeyframeAxisRotation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeAxisRotation_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeAxisRotation *arg1 = (HKeyframeAxisRotation *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeAxisRotation *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeAxisRotation_Serialize(void * jarg1, void * jarg2) {
  HKeyframeAxisRotation *arg1 = (HKeyframeAxisRotation *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeAxisRotation *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeAxisRotation_m_angle_set(void * jarg1, float jarg2) {
  HKeyframeAxisRotation *arg1 = (HKeyframeAxisRotation *) 0 ;
  float arg2 ;
  
  arg1 = (HKeyframeAxisRotation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HKeyframeAxisRotation_m_angle_get(void * jarg1) {
  float jresult ;
  HKeyframeAxisRotation *arg1 = (HKeyframeAxisRotation *) 0 ;
  float result;
  
  arg1 = (HKeyframeAxisRotation *)jarg1; 
  result = (float) ((arg1)->m_angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSlerp__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HKeyframeQuatSlerp *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HKeyframeQuatSlerp *)new HKeyframeQuatSlerp(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSlerp__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HKeyframeQuatSlerp *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HKeyframeQuatSlerp *)new HKeyframeQuatSlerp(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSlerp__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HKeyframeQuatSlerp *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HKeyframeQuatSlerp *)new HKeyframeQuatSlerp(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSlerp__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeQuatSlerp *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeQuatSlerp *)new HKeyframeQuatSlerp(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSlerp__SWIG_4() {
  void * jresult ;
  HKeyframeQuatSlerp *result = 0 ;
  
  result = (HKeyframeQuatSlerp *)new HKeyframeQuatSlerp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeQuatSlerp(void * jarg1) {
  HKeyframeQuatSlerp *arg1 = (HKeyframeQuatSlerp *) 0 ;
  
  arg1 = (HKeyframeQuatSlerp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeQuatSlerp_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeQuatSlerp *arg1 = (HKeyframeQuatSlerp *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeQuatSlerp *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeQuatSlerp_m_quat_set(void * jarg1, void * jarg2) {
  HKeyframeQuatSlerp *arg1 = (HKeyframeQuatSlerp *) 0 ;
  HQuat *arg2 = (HQuat *) 0 ;
  
  arg1 = (HKeyframeQuatSlerp *)jarg1; 
  arg2 = (HQuat *)jarg2; 
  if (arg1) (arg1)->m_quat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeQuatSlerp_m_quat_get(void * jarg1) {
  void * jresult ;
  HKeyframeQuatSlerp *arg1 = (HKeyframeQuatSlerp *) 0 ;
  HQuat *result = 0 ;
  
  arg1 = (HKeyframeQuatSlerp *)jarg1; 
  result = (HQuat *)& ((arg1)->m_quat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSquad__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  HKeyframeQuatSquad *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (HKeyframeQuatSquad *)new HKeyframeQuatSquad(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSquad__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  HKeyframeQuatSquad *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (HKeyframeQuatSquad *)new HKeyframeQuatSquad(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSquad__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  HKeyframeQuatSquad *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (HKeyframeQuatSquad *)new HKeyframeQuatSquad(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSquad__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  HKeyframeQuatSquad *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (HKeyframeQuatSquad *)new HKeyframeQuatSquad(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeQuatSquad__SWIG_4() {
  void * jresult ;
  HKeyframeQuatSquad *result = 0 ;
  
  result = (HKeyframeQuatSquad *)new HKeyframeQuatSquad();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeQuatSquad(void * jarg1) {
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeQuatSquad_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeQuatSquad_Serialize(void * jarg1, void * jarg2) {
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeQuatSquad_m_quat_set(void * jarg1, void * jarg2) {
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  HQuat *arg2 = (HQuat *) 0 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  arg2 = (HQuat *)jarg2; 
  if (arg1) (arg1)->m_quat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeQuatSquad_m_quat_get(void * jarg1) {
  void * jresult ;
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  HQuat *result = 0 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  result = (HQuat *)& ((arg1)->m_quat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeQuatSquad_m_ExtraSpins_set(void * jarg1, int jarg2) {
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  int arg2 ;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_ExtraSpins = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HKeyframeQuatSquad_m_ExtraSpins_get(void * jarg1) {
  int jresult ;
  HKeyframeQuatSquad *arg1 = (HKeyframeQuatSquad *) 0 ;
  int result;
  
  arg1 = (HKeyframeQuatSquad *)jarg1; 
  result = (int) ((arg1)->m_ExtraSpins);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeMatrix__SWIG_0(float * jarg1) {
  void * jresult ;
  float *arg1 ;
  HKeyframeMatrix *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (HKeyframeMatrix *)new HKeyframeMatrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeMatrix__SWIG_1() {
  void * jresult ;
  HKeyframeMatrix *result = 0 ;
  
  result = (HKeyframeMatrix *)new HKeyframeMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeMatrix(void * jarg1) {
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeMatrix_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeMatrix_Serialize(void * jarg1, void * jarg2) {
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeMatrix_m_matrix_get(void * jarg1) {
  void * jresult ;
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  float *result = 0 ;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  result = (float *)(float *) ((arg1)->m_matrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeMatrix_m_ExtraSpins_set(void * jarg1, int jarg2) {
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  int arg2 ;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_ExtraSpins = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HKeyframeMatrix_m_ExtraSpins_get(void * jarg1) {
  int jresult ;
  HKeyframeMatrix *arg1 = (HKeyframeMatrix *) 0 ;
  int result;
  
  arg1 = (HKeyframeMatrix *)jarg1; 
  result = (int) ((arg1)->m_ExtraSpins);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframeString() {
  void * jresult ;
  HKeyframeString *result = 0 ;
  
  result = (HKeyframeString *)new HKeyframeString();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframeString(void * jarg1) {
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframeString_Clone(void * jarg1) {
  void * jresult ;
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeString_Serialize(void * jarg1, void * jarg2) {
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeString_SetTarget(void * jarg1, char * jarg2) {
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTarget((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframeString_GetTarget(void * jarg1) {
  char * jresult ;
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  result = (char *)(arg1)->GetTarget();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeString_m_target_set(void * jarg1, char * jarg2) {
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  char *arg2 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_target, (const char *)arg2, 4096-1);
      arg1->m_target[4096-1] = 0;
    } else {
      arg1->m_target[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframeString_m_target_get(void * jarg1) {
  char * jresult ;
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  result = (char *)(char *) ((arg1)->m_target);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframeString_m_bDiscrete_set(void * jarg1, bool jarg2) {
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  bool arg2 ;
  
  arg1 = (HKeyframeString *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bDiscrete = arg2;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HKeyframeString_m_bDiscrete_get(void * jarg1) {
  bool jresult ;
  HKeyframeString *arg1 = (HKeyframeString *) 0 ;
  bool result;
  
  arg1 = (HKeyframeString *)jarg1; 
  result = (bool) ((arg1)->m_bDiscrete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HKeyframe3String() {
  void * jresult ;
  HKeyframe3String *result = 0 ;
  
  result = (HKeyframe3String *)new HKeyframe3String();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HKeyframe3String(void * jarg1) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HKeyframe3String_Clone(void * jarg1) {
  void * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  HKeyframe *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (HKeyframe *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe3String_Serialize(void * jarg1, void * jarg2) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  HUtilityXMLTag *arg2 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  arg2 = (HUtilityXMLTag *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe3String_SetTarget(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SetTarget((char const *)arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_GetTarget1(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(arg1)->GetTarget1();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_GetTarget2(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(arg1)->GetTarget2();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_GetTarget3(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(arg1)->GetTarget3();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe3String_m_t1_set(void * jarg1, char * jarg2) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *arg2 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_t1, (const char *)arg2, 255-1);
      arg1->m_t1[255-1] = 0;
    } else {
      arg1->m_t1[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_m_t1_get(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(char *) ((arg1)->m_t1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe3String_m_t2_set(void * jarg1, char * jarg2) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *arg2 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_t2, (const char *)arg2, 255-1);
      arg1->m_t2[255-1] = 0;
    } else {
      arg1->m_t2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_m_t2_get(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(char *) ((arg1)->m_t2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HKeyframe3String_m_t3_set(void * jarg1, char * jarg2) {
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *arg2 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_t3, (const char *)arg2, 255-1);
      arg1->m_t3[255-1] = 0;
    } else {
      arg1->m_t3[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HKeyframe3String_m_t3_get(void * jarg1) {
  char * jresult ;
  HKeyframe3String *arg1 = (HKeyframe3String *) 0 ;
  char *result = 0 ;
  
  arg1 = (HKeyframe3String *)jarg1; 
  result = (char *)(char *) ((arg1)->m_t3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ShellMorphInfo() {
  void * jresult ;
  ShellMorphInfo *result = 0 ;
  
  result = (ShellMorphInfo *)new ShellMorphInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellMorphInfo_arrays_list_set(void * jarg1, void * jarg2) {
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  vlist_s *arg2 = (vlist_s *) 0 ;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  arg2 = (vlist_s *)jarg2; 
  if (arg1) (arg1)->arrays_list = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShellMorphInfo_arrays_list_get(void * jarg1) {
  void * jresult ;
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  result = (vlist_s *) ((arg1)->arrays_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellMorphInfo_original_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->original_key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_ShellMorphInfo_original_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  HC_KEY result;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  result =  ((arg1)->original_key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShellMorphInfo_temp_key_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->temp_key = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_ShellMorphInfo_temp_key_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  HC_KEY result;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  result =  ((arg1)->temp_key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ShellMorphInfo(void * jarg1) {
  ShellMorphInfo *arg1 = (ShellMorphInfo *) 0 ;
  
  arg1 = (ShellMorphInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_GetQuatPoint__SWIG_0(void * jarg1, void * jarg2) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  HQuat *arg2 = 0 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat & type is null", 0);
    return ;
  } 
  HBhvUtility::GetQuatPoint(arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_GetMatrix__SWIG_0(void * jarg1, float * jarg2) {
  HUtilityTextParser *arg1 = (HUtilityTextParser *) 0 ;
  float *arg2 ;
  
  arg1 = (HUtilityTextParser *)jarg1; 
  arg2 = (float *)jarg2; 
  HBhvUtility::GetMatrix(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_GetQuatPoint__SWIG_1(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  HQuat *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (HQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat & type is null", 0);
    return ;
  } 
  HBhvUtility::GetQuatPoint((char const *)arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_GetMatrix__SWIG_1(char * jarg1, float * jarg2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  HBhvUtility::GetMatrix((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_ConvertHSFtoMorph(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  HBhvUtility::ConvertHSFtoMorph((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_ConvertHSFtoSegSwitch(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  HBhvUtility::ConvertHSFtoSegSwitch((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_SetupAnimationReadFromHSF(void * jarg1, void * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  HBhvUtility::SetupAnimationReadFromHSF(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_SetupAnimationWriteFromHSF(void * jarg1, void * jarg2) {
  HStreamFileToolkit *arg1 = (HStreamFileToolkit *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (HStreamFileToolkit *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  HBhvUtility::SetupAnimationWriteFromHSF(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_ShowModellingMatrix(float * jarg1) {
  float *arg1 = (float *) 0 ;
  
  arg1 = (float *)jarg1; 
  HBhvUtility::ShowModellingMatrix(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_MakeCameraKeyframe__SWIG_0(void * jarg1, float jarg2, bool jarg3) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  HBhvUtility::MakeCameraKeyframe(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_MakeCameraKeyframe__SWIG_1(void * jarg1, float jarg2) {
  HBaseView *arg1 = (HBaseView *) 0 ;
  float arg2 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (float)jarg2; 
  HBhvUtility::MakeCameraKeyframe(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvUtility_AddAnimation(void * jarg1, char * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HPoint *arg4 = (HPoint *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (HPoint *)jarg4; 
  result = (HBhvAnimation *)HBhvUtility::AddAnimation(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddPosKeyframe(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  HBhvUtility::AddPosKeyframe(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddRotKeyframe(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HQuat arg4 ;
  bool arg5 ;
  HQuat *argp4 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HQuat *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HQuat", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  HBhvUtility::AddRotKeyframe(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddPosRotKeyframe__SWIG_0(void * jarg1, char * jarg2, int jarg3, void * jarg4, float * jarg5) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  float *arg5 ;
  HPoint *argp4 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float *)jarg5; 
  HBhvUtility::AddPosRotKeyframe(arg1,(char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddMatrixKeyframe(void * jarg1, void * jarg2, int jarg3, float * jarg4) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  int arg3 ;
  float *arg4 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float *)jarg4; 
  HBhvUtility::AddMatrixKeyframe(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddPosRotKeyframe__SWIG_1(void * jarg1, char * jarg2, int jarg3, void * jarg4, bool jarg5, void * jarg6, bool jarg7) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  HPoint arg4 ;
  bool arg5 ;
  HQuat arg6 ;
  bool arg7 ;
  HPoint *argp4 ;
  HQuat *argp6 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (HPoint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HPoint", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  argp6 = (HQuat *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HQuat", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  HBhvUtility::AddPosRotKeyframe(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddInstanceCreateKeyframe(void * jarg1, char * jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  HBhvUtility::AddInstanceCreateKeyframe(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvUtility_AddSegmentMoveKeyframe(void * jarg1, void * jarg2, int jarg3, char * jarg4) {
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  HBhvUtility::AddSegmentMoveKeyframe(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvUtility() {
  void * jresult ;
  HBhvUtility *result = 0 ;
  
  result = (HBhvUtility *)new HBhvUtility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvUtility(void * jarg1) {
  HBhvUtility *arg1 = (HBhvUtility *) 0 ;
  
  arg1 = (HBhvUtility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_segkey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->segkey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_segmentanimation_segkey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HC_KEY result;
  
  arg1 = (segmentanimation *)jarg1; 
  result =  ((arg1)->segkey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_matrix_set(void * jarg1, float * jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->matrix = arg2;
}


SWIGEXPORT float * SWIGSTDCALL CSharp_segmentanimation_matrix_get(void * jarg1) {
  float * jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  float *result = 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (float *) ((arg1)->matrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_anim_set(void * jarg1, void * jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  if (arg1) (arg1)->anim = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_segmentanimation_anim_get(void * jarg1) {
  void * jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (HBhvAnimation *) ((arg1)->anim);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_anim2_set(void * jarg1, void * jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  if (arg1) (arg1)->anim2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_segmentanimation_anim2_get(void * jarg1) {
  void * jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (HBhvAnimation *) ((arg1)->anim2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_tick_set(void * jarg1, int jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  int arg2 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tick = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_segmentanimation_tick_get(void * jarg1) {
  int jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  int result;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (int) ((arg1)->tick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_tick2_set(void * jarg1, int jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  int arg2 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tick2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_segmentanimation_tick2_get(void * jarg1) {
  int jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  int result;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (int) ((arg1)->tick2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_segmentanimation_path_set(void * jarg1, char * jarg2) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg1->path) delete [] arg1->path;
    if (arg2) {
      arg1->path = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->path, (const char *)arg2);
    } else {
      arg1->path = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_segmentanimation_path_get(void * jarg1) {
  char * jresult ;
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  result = (char *) ((arg1)->path);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_segmentanimation() {
  void * jresult ;
  segmentanimation *result = 0 ;
  
  result = (segmentanimation *)new segmentanimation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_segmentanimation(void * jarg1) {
  segmentanimation *arg1 = (segmentanimation *) 0 ;
  
  arg1 = (segmentanimation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvSegmentTracker(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvSegmentTracker *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBhvSegmentTracker *)new HBhvSegmentTracker(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvSegmentTracker_MakeTreeSnapshotRecursive(void * jarg1, MVO_POINTER_SIZED_INT jarg2, MVO_POINTER_SIZED_INT jarg3, MVO_POINTER_SIZED_INT * jarg4) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  HC_KEY arg2 ;
  HC_KEY arg3 ;
  MVO_POINTER_SIZED_INT *arg4 = 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (MVO_POINTER_SIZED_INT *)jarg4; 
  (arg1)->MakeTreeSnapshotRecursive(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvSegmentTracker_MakeTreeSnapshot(void * jarg1) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  (arg1)->MakeTreeSnapshot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvSegmentTracker_m_TrackerKey_set(void * jarg1, MVO_POINTER_SIZED_INT jarg2) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  HC_KEY arg2 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->m_TrackerKey = arg2;
}


SWIGEXPORT MVO_POINTER_SIZED_INT SWIGSTDCALL CSharp_HBhvSegmentTracker_m_TrackerKey_get(void * jarg1) {
  MVO_POINTER_SIZED_INT jresult ;
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  HC_KEY result;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  result =  ((arg1)->m_TrackerKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvSegmentTracker_m_pModel_set(void * jarg1, void * jarg2) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  HBaseModel *arg2 = (HBaseModel *) 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  arg2 = (HBaseModel *)jarg2; 
  if (arg1) (arg1)->m_pModel = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvSegmentTracker_m_pModel_get(void * jarg1) {
  void * jresult ;
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  HBaseModel *result = 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  result = (HBaseModel *) ((arg1)->m_pModel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvSegmentTracker_m_NewIncludesHash_set(void * jarg1, void * jarg2) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  vhash_s *arg2 = (vhash_s *) 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  arg2 = (vhash_s *)jarg2; 
  if (arg1) (arg1)->m_NewIncludesHash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvSegmentTracker_m_NewIncludesHash_get(void * jarg1) {
  void * jresult ;
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  vhash_s *result = 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  result = (vhash_s *) ((arg1)->m_NewIncludesHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvSegmentTracker(void * jarg1) {
  HBhvSegmentTracker *arg1 = (HBhvSegmentTracker *) 0 ;
  
  arg1 = (HBhvSegmentTracker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvKeyframeGenerator(void * jarg1) {
  void * jresult ;
  HBaseModel *arg1 = (HBaseModel *) 0 ;
  HBhvKeyframeGenerator *result = 0 ;
  
  arg1 = (HBaseModel *)jarg1; 
  result = (HBhvKeyframeGenerator *)new HBhvKeyframeGenerator(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvKeyframeGenerator_NewFrame(void * jarg1) {
  HBhvKeyframeGenerator *arg1 = (HBhvKeyframeGenerator *) 0 ;
  
  arg1 = (HBhvKeyframeGenerator *)jarg1; 
  (arg1)->NewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvKeyframeGenerator_StartFrames(void * jarg1) {
  HBhvKeyframeGenerator *arg1 = (HBhvKeyframeGenerator *) 0 ;
  
  arg1 = (HBhvKeyframeGenerator *)jarg1; 
  (arg1)->StartFrames();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvKeyframeGenerator_CompareMatrices(void * jarg1, float * jarg2, float * jarg3) {
  bool jresult ;
  HBhvKeyframeGenerator *arg1 = (HBhvKeyframeGenerator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (HBhvKeyframeGenerator *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)(arg1)->CompareMatrices(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvKeyframeGenerator(void * jarg1) {
  HBhvKeyframeGenerator *arg1 = (HBhvKeyframeGenerator *) 0 ;
  
  arg1 = (HBhvKeyframeGenerator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvAnimation__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *arg3 = (HBhvAnimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  arg3 = (HBhvAnimation *)jarg3; 
  result = (HBhvAnimation *)new HBhvAnimation((char const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HBhvAnimation__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  result = (HBhvAnimation *)new HBhvAnimation((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HBhvAnimation(void * jarg1) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvAnimation_GetHType(void * jarg1) {
  char * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (char *)(arg1)->GetType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HBhvAnimation_GetName(void * jarg1) {
  char * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetName(void * jarg1, char * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_Animate__SWIG_0(void * jarg1, float jarg2) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->Animate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_Animate__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Animate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_DeleteKeyframe(void * jarg1, int jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DeleteKeyframe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_DuplicateNextOrPrevious(void * jarg1, int jarg2, bool jarg3) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DuplicateNextOrPrevious(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_Duplicate(void * jarg1, int jarg2, int jarg3) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Duplicate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_PlotCurve(void * jarg1, bool jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->PlotCurve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_Serialize__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HUtilityXMLGenerator *arg2 = (HUtilityXMLGenerator *) 0 ;
  HUtilityXMLTag *arg3 = (HUtilityXMLTag *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HUtilityXMLGenerator *)jarg2; 
  arg3 = (HUtilityXMLTag *)jarg3; 
  (arg1)->Serialize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_Serialize__SWIG_1(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HUtilityXMLGenerator *arg2 = (HUtilityXMLGenerator *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HUtilityXMLGenerator *)jarg2; 
  (arg1)->Serialize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_XMLCallback(void * jarg1, bool jarg2, void * jarg3) {
  void * jresult ;
  HUtilityXMLTag *arg1 = (HUtilityXMLTag *) 0 ;
  bool arg2 ;
  void *arg3 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (HUtilityXMLTag *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3; 
  result = (void *)HBhvAnimation::XMLCallback(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetBehaviorManager(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvBehaviorManager *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvBehaviorManager *)(arg1)->GetBehaviorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetBehaviorManager(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvBehaviorManager *arg2 = (HBhvBehaviorManager *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvBehaviorManager *)jarg2; 
  (arg1)->SetBehaviorManager(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvAnimation_GetFirstTick(void * jarg1) {
  int jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (int)(arg1)->GetFirstTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvAnimation_GetLastTick(void * jarg1) {
  int jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (int)(arg1)->GetLastTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvAnimation_GetLoop(void * jarg1) {
  int jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (int)(arg1)->GetLoop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetLoop(void * jarg1, int jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetLoop(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetTimeline(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvTimeline *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvTimeline *)(arg1)->GetTimeline();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetTimeline(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvTimeline *arg2 = (HBhvTimeline *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvTimeline *)jarg2; 
  (arg1)->SetTimeline(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_CreateInstance(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvAnimation *)(arg1)->CreateInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetInterpolatorList(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (vlist_s *)(arg1)->GetInterpolatorList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetChildAnimationList(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  vlist_s *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (vlist_s *)(arg1)->GetChildAnimationList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetInterpolator__SWIG_0(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvInterpolator *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvInterpolator *)(arg1)->GetInterpolator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_AddInterpolator(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvInterpolator *arg2 = (HBhvInterpolator *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvInterpolator *)jarg2; 
  (arg1)->AddInterpolator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_AddChildAnimation(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  (arg1)->AddChildAnimation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetParentAnimation(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvAnimation *)(arg1)->GetParentAnimation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetDelay(void * jarg1, int jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDelay(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_HBhvAnimation_GetDelay(void * jarg1) {
  int jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (int)(arg1)->GetDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetTarget(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvTargetObject *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvTargetObject *)(arg1)->GetTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HBhvAnimation_GetInstancedAnimation(void * jarg1) {
  void * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvAnimation *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (HBhvAnimation *)(arg1)->GetInstancedAnimation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetInstancedAnimation(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvAnimation *arg2 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvAnimation *)jarg2; 
  (arg1)->SetInstancedAnimation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_Reset(void * jarg1) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetTargetByPath__SWIG_0(void * jarg1, char * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetTargetByPath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetTargetByPath__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetTargetByPath((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetTarget(void * jarg1, void * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  HBhvTargetObject *arg2 = (HBhvTargetObject *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (HBhvTargetObject *)jarg2; 
  (arg1)->SetTarget(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_GetInterpolator__SWIG_1(void * jarg1, int jarg2, int * jarg3, void * jarg4) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  HKeyframe **arg4 = (HKeyframe **) 0 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (HKeyframe **)jarg4; 
  result = (bool)(arg1)->GetInterpolator(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetDefaultActive(void * jarg1, bool jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDefaultActive(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_GetDefaultActive(void * jarg1) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (bool)(arg1)->GetDefaultActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetCurrentlyRunning(void * jarg1, bool jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCurrentlyRunning(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_GetCurrentlyRunning(void * jarg1) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (bool)(arg1)->GetCurrentlyRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HBhvAnimation_GetCurrentTick(void * jarg1) {
  float jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (float)(arg1)->GetCurrentTick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_AdjustKeyframe__SWIG_0(void * jarg1, int jarg2, int jarg3, bool jarg4, bool jarg5) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AdjustKeyframe(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_AdjustKeyframe__SWIG_1(void * jarg1, int jarg2, int jarg3, bool jarg4) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AdjustKeyframe(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_AdjustKeyframe__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AdjustKeyframe(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_CleanWithoutDelete(void * jarg1) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  (arg1)->CleanWithoutDelete();
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HBhvAnimation_ExecuteOnce(void * jarg1) {
  bool jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool result;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (bool)(arg1)->ExecuteOnce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetExecuteOnce(void * jarg1, bool jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetExecuteOnce(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_Evaluate(void * jarg1, float jarg2, unsigned int * jarg3, void * jarg4, unsigned int * jarg5, void * jarg6, unsigned int * jarg7, void * jarg8) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float arg2 ;
  bool *arg3 = 0 ;
  HPoint *arg4 = 0 ;
  bool *arg5 = 0 ;
  HQuat *arg6 = 0 ;
  bool *arg7 = 0 ;
  HPoint *arg8 = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (HPoint *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  arg5 = (bool *)jarg5; 
  arg6 = (HQuat *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HQuat & type is null", 0);
    return ;
  } 
  arg7 = (bool *)jarg7; 
  arg8 = (HPoint *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HPoint & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HBhvAnimation_SetTargetScaleMatrix(void * jarg1, const float * jarg2) {
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->SetTargetScaleMatrix((float const *)arg2);
}


SWIGEXPORT float * SWIGSTDCALL CSharp_HBhvAnimation_GetTargetScaleMatrix(void * jarg1) {
  float * jresult ;
  HBhvAnimation *arg1 = (HBhvAnimation *) 0 ;
  float *result = 0 ;
  
  arg1 = (HBhvAnimation *)jarg1; 
  result = (float *)(arg1)->GetTargetScaleMatrix();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HBaseOperator *arg6 = (HBaseOperator *) 0 ;
  HBaseOperator *arg7 = (HBaseOperator *) 0 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  arg6 = (HBaseOperator *)jarg6; 
  arg7 = (HBaseOperator *)jarg7; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HBaseOperator *arg6 = (HBaseOperator *) 0 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  arg6 = (HBaseOperator *)jarg6; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HBaseOperator *arg5 = (HBaseOperator *) 0 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  arg5 = (HBaseOperator *)jarg5; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_3(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HBaseOperator *arg4 = (HBaseOperator *) 0 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (HBaseOperator *)jarg4; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_4(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_5(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraManipulateTouch__SWIG_6(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraManipulateTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraManipulateTouch *)new HOpCameraManipulateTouch(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraManipulateTouch(void * jarg1) {
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraManipulateTouch_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulateTouch_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulateTouch_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraManipulateTouch_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraManipulateTouch_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraManipulateTouch_OperatorStarted(void * jarg1) {
  bool jresult ;
  HOpCameraManipulateTouch *arg1 = (HOpCameraManipulateTouch *) 0 ;
  bool result;
  
  arg1 = (HOpCameraManipulateTouch *)jarg1; 
  result = (bool)(arg1)->OperatorStarted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPanTouch__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraPanTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraPanTouch *)new HOpCameraPanTouch(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPanTouch__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraPanTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraPanTouch *)new HOpCameraPanTouch(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraPanTouch__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraPanTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraPanTouch *)new HOpCameraPanTouch(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraPanTouch(void * jarg1) {
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraPanTouch_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPanTouch_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPanTouch_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraPanTouch_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraPanTouch_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraPanTouch_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  bool result;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraPanTouch_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraPanTouch *arg1 = (HOpCameraPanTouch *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraPanTouch *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRollTouch__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraRollTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraRollTouch *)new HOpCameraRollTouch(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRollTouch__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraRollTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraRollTouch *)new HOpCameraRollTouch(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraRollTouch__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraRollTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraRollTouch *)new HOpCameraRollTouch(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraRollTouch(void * jarg1) {
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraRollTouch_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRollTouch_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRollTouch_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraRollTouch_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraRollTouch_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraRollTouch_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  bool result;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraRollTouch_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraRollTouch *arg1 = (HOpCameraRollTouch *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraRollTouch *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomTouch__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  int arg3 ;
  HOpCameraZoomTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (HOpCameraZoomTouch *)new HOpCameraZoomTouch(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomTouch__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  int arg2 ;
  HOpCameraZoomTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  arg2 = (int)jarg2; 
  result = (HOpCameraZoomTouch *)new HOpCameraZoomTouch(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HOpCameraZoomTouch__SWIG_2(void * jarg1) {
  void * jresult ;
  HBaseView *arg1 = (HBaseView *) 0 ;
  HOpCameraZoomTouch *result = 0 ;
  
  arg1 = (HBaseView *)jarg1; 
  result = (HOpCameraZoomTouch *)new HOpCameraZoomTouch(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HOpCameraZoomTouch(void * jarg1) {
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_HOpCameraZoomTouch_GetName(void * jarg1) {
  char * jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  char *result = 0 ;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomTouch_OnTouchesDown(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesDown(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomTouch_OnTouchesMove(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesMove(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOpCameraZoomTouch_OnTouchesUp(void * jarg1, void * jarg2) {
  int jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  HEventInfo *arg2 = 0 ;
  int result;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  arg2 = (HEventInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "HEventInfo & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->OnTouchesUp(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HOpCameraZoomTouch_SetLightFollowsCamera(void * jarg1, bool jarg2) {
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  bool arg2 ;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLightFollowsCamera(arg2);
}


SWIGEXPORT bool SWIGSTDCALL CSharp_HOpCameraZoomTouch_GetLightFollowsCamera(void * jarg1) {
  bool jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  bool result;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  result = (bool)(arg1)->GetLightFollowsCamera();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HOpCameraZoomTouch_Clone(void * jarg1) {
  void * jresult ;
  HOpCameraZoomTouch *arg1 = (HOpCameraZoomTouch *) 0 ;
  HBaseOperator *result = 0 ;
  
  arg1 = (HOpCameraZoomTouch *)jarg1; 
  result = (HBaseOperator *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT HPoint * SWIGSTDCALL CSharp_HPointKeyUpcast(HPointKey *objectRef) {
    return (HPoint *)objectRef;
}

SWIGEXPORT HPlane * SWIGSTDCALL CSharp_HPlaneKeyUpcast(HPlaneKey *objectRef) {
    return (HPlane *)objectRef;
}

SWIGEXPORT HPixelRGB * SWIGSTDCALL CSharp_HPixelRGBAUpcast(HPixelRGBA *objectRef) {
    return (HPixelRGB *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HUpdateListenerUpcast(HUpdateListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HFitWorldListenerUpcast(HFitWorldListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HObjectManipulationListenerUpcast(HObjectManipulationListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HAnimationListenerUpcast(HAnimationListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HSensorListenerUpcast(HSensorListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HMouseListenerUpcast(HMouseListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HEventListener * SWIGSTDCALL CSharp_HJoyStickListenerUpcast(HJoyStickListener *objectRef) {
    return (HEventListener *)objectRef;
}

SWIGEXPORT HUpdateListener * SWIGSTDCALL CSharp_HBaseViewUpcast(HBaseView *objectRef) {
    return (HUpdateListener *)objectRef;
}

SWIGEXPORT HMouseListener * SWIGSTDCALL CSharp_HBaseOperatorUpcast(HBaseOperator *objectRef) {
    return (HMouseListener *)objectRef;
}

SWIGEXPORT HUtility * SWIGSTDCALL CSharp_HVerticalUtilityUpcast(HVerticalUtility *objectRef) {
    return (HUtility *)objectRef;
}

SWIGEXPORT TK_Material * SWIGSTDCALL CSharp_HTK_Material_CompositeUpcast(HTK_Material_Composite *objectRef) {
    return (TK_Material *)objectRef;
}

SWIGEXPORT BBaseOpcodeHandler * SWIGSTDCALL CSharp_HTK_One_MaterialUpcast(HTK_One_Material *objectRef) {
    return (BBaseOpcodeHandler *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrExtentUpcast(HFrExtent *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrNoSimpAAUpcast(HFrNoSimpAA *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrNoSimpUpcast(HFrNoSimp *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrLodClampUpcast(HFrLodClamp *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrLodThresholdUpcast(HFrLodThreshold *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrSolidBBoxUpcast(HFrSolidBBox *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrWireframeBBoxUpcast(HFrWireframeBBox *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HConstFRSimpType * SWIGSTDCALL CSharp_HFrWireframeUpcast(HFrWireframe *objectRef) {
    return (HConstFRSimpType *)objectRef;
}

SWIGEXPORT HBaseGraph * SWIGSTDCALL CSharp_HPlot2DUpcast(HPlot2D *objectRef) {
    return (HBaseGraph *)objectRef;
}

SWIGEXPORT HBaseGraph * SWIGSTDCALL CSharp_HPieChartUpcast(HPieChart *objectRef) {
    return (HBaseGraph *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpObjectTranslateUpcast(HOpObjectTranslate *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructCircleUpcast(HOpConstructCircle *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructConeUpcast(HOpConstructCone *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructCuboidUpcast(HOpConstructCuboid *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructCylinderUpcast(HOpConstructCylinder *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructPolylineUpcast(HOpConstructPolyline *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructPolyline * SWIGSTDCALL CSharp_HOpConstructNurbsCurveUpcast(HOpConstructNurbsCurve *objectRef) {
    return (HOpConstructPolyline *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructRectangleUpcast(HOpConstructRectangle *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpConstructSphereUpcast(HOpConstructSphere *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCreateBooleanUpcast(HOpCreateBoolean *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructCircle * SWIGSTDCALL CSharp_HOpCreateCircleUpcast(HOpCreateCircle *objectRef) {
    return (HOpConstructCircle *)objectRef;
}

SWIGEXPORT HOpConstructCone * SWIGSTDCALL CSharp_HOpCreateConeUpcast(HOpCreateCone *objectRef) {
    return (HOpConstructCone *)objectRef;
}

SWIGEXPORT HOpConstructCuboid * SWIGSTDCALL CSharp_HOpCreateCuboidUpcast(HOpCreateCuboid *objectRef) {
    return (HOpConstructCuboid *)objectRef;
}

SWIGEXPORT HOpObjectTranslate * SWIGSTDCALL CSharp_HOpCreateCuttingPlaneUpcast(HOpCreateCuttingPlane *objectRef) {
    return (HOpObjectTranslate *)objectRef;
}

SWIGEXPORT HOpConstructCylinder * SWIGSTDCALL CSharp_HOpCreateCylinderUpcast(HOpCreateCylinder *objectRef) {
    return (HOpConstructCylinder *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCreateNurbs3DUpcast(HOpCreateNurbs3D *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructNurbsCurve * SWIGSTDCALL CSharp_HOpCreateNurbsCurveUpcast(HOpCreateNurbsCurve *objectRef) {
    return (HOpConstructNurbsCurve *)objectRef;
}

SWIGEXPORT HOpConstructSphere * SWIGSTDCALL CSharp_HOpCreateSphereUpcast(HOpCreateSphere *objectRef) {
    return (HOpConstructSphere *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraManipulateUpcast(HOpCameraManipulate *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraOrbitUpcast(HOpCameraOrbit *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraPanUpcast(HOpCameraPan *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructPolyline * SWIGSTDCALL CSharp_HOpCreatePolylineUpcast(HOpCreatePolyline *objectRef) {
    return (HOpConstructPolyline *)objectRef;
}

SWIGEXPORT HOpConstructRectangle * SWIGSTDCALL CSharp_HOpCreateRectangleUpcast(HOpCreateRectangle *objectRef) {
    return (HOpConstructRectangle *)objectRef;
}

SWIGEXPORT HOpCameraOrbit * SWIGSTDCALL CSharp_HOpCameraRelativeOrbitUpcast(HOpCameraRelativeOrbit *objectRef) {
    return (HOpCameraOrbit *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraWalkUpcast(HOpCameraWalk *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraZoomUpcast(HOpCameraZoom *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructRectangle * SWIGSTDCALL CSharp_HOpCameraZoomBoxUpcast(HOpCameraZoomBox *objectRef) {
    return (HOpConstructRectangle *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpMarkupAnnotateUpcast(HOpMarkupAnnotate *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructCircle * SWIGSTDCALL CSharp_HOpMarkupCircleUpcast(HOpMarkupCircle *objectRef) {
    return (HOpConstructCircle *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpMarkupFreehandUpcast(HOpMarkupFreehand *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpMarkupMeasureUpcast(HOpMarkupMeasure *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpMarkupAnnotate * SWIGSTDCALL CSharp_HOpMarkupPostItUpcast(HOpMarkupPostIt *objectRef) {
    return (HOpMarkupAnnotate *)objectRef;
}

SWIGEXPORT HOpConstructRectangle * SWIGSTDCALL CSharp_HOpMarkupRectangleUpcast(HOpMarkupRectangle *objectRef) {
    return (HOpConstructRectangle *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpMoveHandleUpcast(HOpMoveHandle *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpNavCubeUpcast(HOpNavCube *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpNetworkUpcast(HOpNetwork *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpObjectAnnotateUpcast(HOpObjectAnnotate *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpObjectTranslate * SWIGSTDCALL CSharp_HOpObjectClashUpcast(HOpObjectClash *objectRef) {
    return (HOpObjectTranslate *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpObjectRotateUpcast(HOpObjectRotate *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructRectangle * SWIGSTDCALL CSharp_HOpSelectAreaUpcast(HOpSelectArea *objectRef) {
    return (HOpConstructRectangle *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpSelectApertureUpcast(HOpSelectAperture *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HOpConstructPolyline * SWIGSTDCALL CSharp_HOpSelectPolygonUpcast(HOpSelectPolygon *objectRef) {
    return (HOpConstructPolyline *)objectRef;
}

SWIGEXPORT HOpConstructPolyline * SWIGSTDCALL CSharp_HOpSelectPolylineUpcast(HOpSelectPolyline *objectRef) {
    return (HOpConstructPolyline *)objectRef;
}

SWIGEXPORT HSelectionItem * SWIGSTDCALL CSharp_HSmartSelItemUpcast(HSmartSelItem *objectRef) {
    return (HSelectionItem *)objectRef;
}

SWIGEXPORT HSmartSelItem * SWIGSTDCALL CSharp_HRegionSelItemUpcast(HRegionSelItem *objectRef) {
    return (HSmartSelItem *)objectRef;
}

SWIGEXPORT HSmartSelItem * SWIGSTDCALL CSharp_HSubentitySelItemUpcast(HSubentitySelItem *objectRef) {
    return (HSmartSelItem *)objectRef;
}

SWIGEXPORT HSelectionItem * SWIGSTDCALL CSharp_HOldSelItemUpcast(HOldSelItem *objectRef) {
    return (HSelectionItem *)objectRef;
}

SWIGEXPORT HUtilityAnnotation * SWIGSTDCALL CSharp_HUtilityAnnotationMeasureUpcast(HUtilityAnnotationMeasure *objectRef) {
    return (HUtilityAnnotation *)objectRef;
}

SWIGEXPORT HRectangle * SWIGSTDCALL CSharp_HQuadTreeItemUpcast(HQuadTreeItem *objectRef) {
    return (HRectangle *)objectRef;
}

SWIGEXPORT HRectangle * SWIGSTDCALL CSharp_HQuadTreeNodeUpcast(HQuadTreeNode *objectRef) {
    return (HRectangle *)objectRef;
}

SWIGEXPORT HQuadTreeNode * SWIGSTDCALL CSharp_HQuadTreeUpcast(HQuadTree *objectRef) {
    return (HQuadTreeNode *)objectRef;
}

SWIGEXPORT HShadow * SWIGSTDCALL CSharp_HSmoothShadowUpcast(HSmoothShadow *objectRef) {
    return (HShadow *)objectRef;
}

SWIGEXPORT HShadow * SWIGSTDCALL CSharp_HHardShadowUpcast(HHardShadow *objectRef) {
    return (HShadow *)objectRef;
}

SWIGEXPORT HUndoItem * SWIGSTDCALL CSharp_HUndoItemCameraUpcast(HUndoItemCamera *objectRef) {
    return (HUndoItem *)objectRef;
}

SWIGEXPORT HUndoItem * SWIGSTDCALL CSharp_HUndoItemMatrixUpcast(HUndoItemMatrix *objectRef) {
    return (HUndoItem *)objectRef;
}

SWIGEXPORT HOutputHandler * SWIGSTDCALL CSharp_HIOUtilityPDFUpcast(HIOUtilityPDF *objectRef) {
    return (HOutputHandler *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraOrbitTurntableUpcast(HOpCameraOrbitTurntable *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT TK_XML * SWIGSTDCALL CSharp_TK_Dispatch_XMLUpcast(TK_Dispatch_XML *objectRef) {
    return (TK_XML *)objectRef;
}

SWIGEXPORT HTClient * SWIGSTDCALL CSharp_HBhvBehaviorManagerUpcast(HBhvBehaviorManager *objectRef) {
    return (HTClient *)objectRef;
}

SWIGEXPORT HKeyframe * SWIGSTDCALL CSharp_HKeyframeChannelUpcast(HKeyframeChannel *objectRef) {
    return (HKeyframe *)objectRef;
}

SWIGEXPORT HKeyframeChannel * SWIGSTDCALL CSharp_HKeyframeChannelLinearUpcast(HKeyframeChannelLinear *objectRef) {
    return (HKeyframeChannel *)objectRef;
}

SWIGEXPORT HKeyframeChannel * SWIGSTDCALL CSharp_HKeyframeChannelDiscreteUpcast(HKeyframeChannelDiscrete *objectRef) {
    return (HKeyframeChannel *)objectRef;
}

SWIGEXPORT HKeyframeChannel * SWIGSTDCALL CSharp_HKeyframeChannelCurveUpcast(HKeyframeChannelCurve *objectRef) {
    return (HKeyframeChannel *)objectRef;
}

SWIGEXPORT HKeyframeChannelCurve * SWIGSTDCALL CSharp_HKeyframeChannelFollowPathUpcast(HKeyframeChannelFollowPath *objectRef) {
    return (HKeyframeChannelCurve *)objectRef;
}

SWIGEXPORT HKeyframe * SWIGSTDCALL CSharp_HKeyframeRotationUpcast(HKeyframeRotation *objectRef) {
    return (HKeyframe *)objectRef;
}

SWIGEXPORT HKeyframeRotation * SWIGSTDCALL CSharp_HKeyframeAxisRotationUpcast(HKeyframeAxisRotation *objectRef) {
    return (HKeyframeRotation *)objectRef;
}

SWIGEXPORT HKeyframeRotation * SWIGSTDCALL CSharp_HKeyframeQuatSlerpUpcast(HKeyframeQuatSlerp *objectRef) {
    return (HKeyframeRotation *)objectRef;
}

SWIGEXPORT HKeyframeRotation * SWIGSTDCALL CSharp_HKeyframeQuatSquadUpcast(HKeyframeQuatSquad *objectRef) {
    return (HKeyframeRotation *)objectRef;
}

SWIGEXPORT HKeyframeRotation * SWIGSTDCALL CSharp_HKeyframeMatrixUpcast(HKeyframeMatrix *objectRef) {
    return (HKeyframeRotation *)objectRef;
}

SWIGEXPORT HKeyframe * SWIGSTDCALL CSharp_HKeyframeStringUpcast(HKeyframeString *objectRef) {
    return (HKeyframe *)objectRef;
}

SWIGEXPORT HKeyframe * SWIGSTDCALL CSharp_HKeyframe3StringUpcast(HKeyframe3String *objectRef) {
    return (HKeyframe *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraManipulateTouchUpcast(HOpCameraManipulateTouch *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraPanTouchUpcast(HOpCameraPanTouch *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraRollTouchUpcast(HOpCameraRollTouch *objectRef) {
    return (HBaseOperator *)objectRef;
}

SWIGEXPORT HBaseOperator * SWIGSTDCALL CSharp_HOpCameraZoomTouchUpcast(HOpCameraZoomTouch *objectRef) {
    return (HBaseOperator *)objectRef;
}

#ifdef __cplusplus
}
#endif

