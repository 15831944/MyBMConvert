/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUtility : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUtility(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUtility obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUtility() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUtility(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static float PI {
    get {
      float ret = HCSMVOPINVOKE.HUtility_PI_get();
      return ret;
    } 
  }

  public static float EH_Epsilon {
    get {
      float ret = HCSMVOPINVOKE.HUtility_EH_Epsilon_get();
      return ret;
    } 
  }

  public static void Order(HPoint one, HPoint two) {
    HCSMVOPINVOKE.HUtility_Order(HPoint.getCPtr(one), HPoint.getCPtr(two));
  }

  public static void Find_Relative_Path(MVO_POINTER_SIZED_INT from_seg_key, MVO_POINTER_SIZED_INT to_seg_key, System.Text.StringBuilder path) {
    HCSMVOPINVOKE.HUtility_Find_Relative_Path(from_seg_key, to_seg_key, path);
  }

  public static float GetTime() {
    float ret = HCSMVOPINVOKE.HUtility_GetTime();
    return ret;
  }

  public static void ClampPointToWindow(HPoint point) {
    HCSMVOPINVOKE.HUtility_ClampPointToWindow(HPoint.getCPtr(point));
  }

  public static MVO_POINTER_SIZED_INT InsertBox(HPoint max, HPoint min) {return HCSMVOPINVOKE.HUtility_InsertBox(HPoint.getCPtr(max), HPoint.getCPtr(min));}

  public static MVO_POINTER_SIZED_INT InsertWireframeBox(HPoint max, HPoint min) {return HCSMVOPINVOKE.HUtility_InsertWireframeBox(HPoint.getCPtr(max), HPoint.getCPtr(min));}

  public static void GenerateCuboidPoints(HPoint max, HPoint min, HPoint points) {
    HCSMVOPINVOKE.HUtility_GenerateCuboidPoints(HPoint.getCPtr(max), HPoint.getCPtr(min), HPoint.getCPtr(points));
  }

  public static MVO_POINTER_SIZED_INT InsertRectangle(string seg, float x0, float y0, float x1, float y1, float z, bool fill) {return HCSMVOPINVOKE.HUtility_InsertRectangle__SWIG_0(seg, x0, y0, x1, y1, z, fill);}

  public static MVO_POINTER_SIZED_INT InsertRectangle(string seg, float x0, float y0, float x1, float y1, float z) {return HCSMVOPINVOKE.HUtility_InsertRectangle__SWIG_1(seg, x0, y0, x1, y1, z);}

  public static MVO_POINTER_SIZED_INT InsertRectangle(string seg, float x0, float y0, float x1, float y1) {return HCSMVOPINVOKE.HUtility_InsertRectangle__SWIG_2(seg, x0, y0, x1, y1);}

  public static void InsertArrow(float stick_length, float tip_length, float stick_radius, float arrow_radius, string text, string stick_color, string tip_color, int num_sides, float tip_falloff, bool reverse) {
    HCSMVOPINVOKE.HUtility_InsertArrow__SWIG_0(stick_length, tip_length, stick_radius, arrow_radius, text, stick_color, tip_color, num_sides, tip_falloff, reverse);
  }

  public static void InsertArrow(float stick_length, float tip_length, float stick_radius, float arrow_radius, string text, string stick_color, string tip_color, int num_sides, float tip_falloff) {
    HCSMVOPINVOKE.HUtility_InsertArrow__SWIG_1(stick_length, tip_length, stick_radius, arrow_radius, text, stick_color, tip_color, num_sides, tip_falloff);
  }

  public static void InsertArrow(float stick_length, float tip_length, float stick_radius, float arrow_radius, string text, string stick_color, string tip_color, int num_sides) {
    HCSMVOPINVOKE.HUtility_InsertArrow__SWIG_2(stick_length, tip_length, stick_radius, arrow_radius, text, stick_color, tip_color, num_sides);
  }

  public static void InsertArrow(float stick_length, float tip_length, float stick_radius, float arrow_radius, string text, string stick_color, string tip_color) {
    HCSMVOPINVOKE.HUtility_InsertArrow__SWIG_3(stick_length, tip_length, stick_radius, arrow_radius, text, stick_color, tip_color);
  }

  public static void ComputeDoublePrecisionCrossProduct(double[] vector1, double[] vector2, double[] up) {
    HCSMVOPINVOKE.HUtility_ComputeDoublePrecisionCrossProduct(vector1, vector2, up);
  }

  public static double ComputeDoublePrecisionDotProduct(double[] vector1, double[] vector2) {
    double ret = HCSMVOPINVOKE.HUtility_ComputeDoublePrecisionDotProduct(vector1, vector2);
    return ret;
  }

  public static double ComputeDoublePrecisionVectorLength(double[] vector1) {
    double ret = HCSMVOPINVOKE.HUtility_ComputeDoublePrecisionVectorLength(vector1);
    return ret;
  }

  public static void GetViewplaneVectors(MVO_POINTER_SIZED_INT segment_key, double[] view, double[] up) {
    HCSMVOPINVOKE.HUtility_GetViewplaneVectors(segment_key, view, up);
  }

  public static void NormalizeDoublePrecisionVector(double[] vector1) {
    HCSMVOPINVOKE.HUtility_NormalizeDoublePrecisionVector(vector1);
  }

  public static bool PointsEqual(HPoint point1, HPoint point2) {
    bool ret = HCSMVOPINVOKE.HUtility_PointsEqual(HPoint.getCPtr(point1), HPoint.getCPtr(point2));
    return ret;
  }

  public static bool CreateAxisCircle(HPoint center, float radius, int axis, bool convert) {
    bool ret = HCSMVOPINVOKE.HUtility_CreateAxisCircle__SWIG_0(HPoint.getCPtr(center), radius, axis, convert);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CreateAxisCircle(HPoint center, float radius, int axis) {
    bool ret = HCSMVOPINVOKE.HUtility_CreateAxisCircle__SWIG_1(HPoint.getCPtr(center), radius, axis);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void RotateToVector(HPoint start, HPoint end, bool doTranslation) {
    HCSMVOPINVOKE.HUtility_RotateToVector__SWIG_0(HPoint.getCPtr(start), HPoint.getCPtr(end), doTranslation);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RotateToVector(HPoint start, HPoint end) {
    HCSMVOPINVOKE.HUtility_RotateToVector__SWIG_1(HPoint.getCPtr(start), HPoint.getCPtr(end));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SmoothTransition(HPoint co, HPoint to, HPoint uo, float fieldwidtho, float fieldheighto, HPoint cn, HPoint tn, HPoint un, float fieldwidthn, float fieldheightn, HBaseView view) {
    HCSMVOPINVOKE.HUtility_SmoothTransition__SWIG_0(HPoint.getCPtr(co), HPoint.getCPtr(to), HPoint.getCPtr(uo), fieldwidtho, fieldheighto, HPoint.getCPtr(cn), HPoint.getCPtr(tn), HPoint.getCPtr(un), fieldwidthn, fieldheightn, HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SmoothTransition(HCamera old_camera, HCamera new_camera, HBaseView view) {
    HCSMVOPINVOKE.HUtility_SmoothTransition__SWIG_1(HCamera.getCPtr(old_camera), HCamera.getCPtr(new_camera), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool CamerasEqual(HCamera camera1, HCamera camera2) {
    bool ret = HCSMVOPINVOKE.HUtility_CamerasEqual(HCamera.getCPtr(camera1), HCamera.getCPtr(camera2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ComputeVectorToVectorRotationMatrix(float[] matrix, HPoint v1, HPoint v2) {
    HCSMVOPINVOKE.HUtility_ComputeVectorToVectorRotationMatrix(matrix, HPoint.getCPtr(v1), HPoint.getCPtr(v2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool ExtractRGB(System.Text.StringBuilder text, float[] r, float[] g, float[] b) {
    bool ret = HCSMVOPINVOKE.HUtility_ExtractRGB(text, r, g, b);
    return ret;
  }

  public static void TransitionQuaternion(float[] quat_old, float[] quat_new, float t, float[] qt) {
    HCSMVOPINVOKE.HUtility_TransitionQuaternion(quat_old, quat_new, t, qt);
  }

  public static void MatrixToQuaternion(float[] matrix, float[] quaternion) {
    HCSMVOPINVOKE.HUtility_MatrixToQuaternion(matrix, quaternion);
  }

  public static void QuaternionToMatrix(float[] quaternion, float[] matrix) {
    HCSMVOPINVOKE.HUtility_QuaternionToMatrix(quaternion, matrix);
  }

  public static void SmoothQuaternionTransition(HBaseView m_pView, System.Text.StringBuilder old_seg, System.Text.StringBuilder new_seg, int num_of_transitions) {
    HCSMVOPINVOKE.HUtility_SmoothQuaternionTransition(HBaseView.getCPtr(m_pView), old_seg, new_seg, num_of_transitions);
  }

  public static void SmoothMatrixTransition(HBaseView m_pView, MVO_POINTER_SIZED_INT seg_key, float[] new_matrix) {
    HCSMVOPINVOKE.HUtility_SmoothMatrixTransition(HBaseView.getCPtr(m_pView), seg_key, new_matrix);
  }

  public static void MultiSmoothTransitions(HBaseView m_pView, int num_keys, MVO_POINTER_SIZED_INT[] seg_key, float[] new_matrix, HCamera new_camera) {
    HCSMVOPINVOKE.HUtility_MultiSmoothTransitions__SWIG_0(HBaseView.getCPtr(m_pView), num_keys, seg_key, new_matrix, HCamera.getCPtr(new_camera));
  }

  public static void MultiSmoothTransitions(HBaseView m_pView, int num_keys, MVO_POINTER_SIZED_INT[] seg_key, float[] new_matrix) {
    HCSMVOPINVOKE.HUtility_MultiSmoothTransitions__SWIG_1(HBaseView.getCPtr(m_pView), num_keys, seg_key, new_matrix);
  }

  public static HPoint GetCentroid(MVO_POINTER_SIZED_INT seg_key) {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HUtility_GetCentroid(seg_key), true);
    return ret;
  }

  public static HPoint GetTransformedCentroid(MVO_POINTER_SIZED_INT seg_key, float[] matrix) {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HUtility_GetTransformedCentroid__SWIG_0(seg_key, matrix), true);
    return ret;
  }

  public static HPoint GetTransformedCentroid(MVO_POINTER_SIZED_INT seg_key) {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HUtility_GetTransformedCentroid__SWIG_1(seg_key), true);
    return ret;
  }

  public static void URIencode(string in_string, MVO_POINTER_SIZED_UINT n, System.Text.StringBuilder out_buffer) {
    HCSMVOPINVOKE.HUtility_URIencode(in_string, n, out_buffer);
  }

  public static void URIdecode(string in_string, System.Text.StringBuilder out_buffer, MVO_POINTER_SIZED_UINT[] n) {
    HCSMVOPINVOKE.HUtility_URIdecode(in_string, out_buffer, n);
  }

  public static void GetCameraFromMatrix(float[] matrix, HPoint target, HPoint position, HPoint up_vector, HPoint translation) {
    HCSMVOPINVOKE.HUtility_GetCameraFromMatrix(matrix, HPoint.getCPtr(target), HPoint.getCPtr(position), HPoint.getCPtr(up_vector), HPoint.getCPtr(translation));
  }

  public static void GetMatrixFromCamera(HPoint target, HPoint position, HPoint up_vector, HPoint translation, float[] matrix) {
    HCSMVOPINVOKE.HUtility_GetMatrixFromCamera(HPoint.getCPtr(target), HPoint.getCPtr(position), HPoint.getCPtr(up_vector), HPoint.getCPtr(translation), matrix);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GetCameraFromGLFrustum(double left, double right, double bottom, double top, double near_z, double far_z, bool perspective, HPoint pos, HPoint target, HPoint up, System.Text.StringBuilder projection, double[] width, double[] height, double[] near_limit) {
    HCSMVOPINVOKE.HUtility_GetCameraFromGLFrustum(left, right, bottom, top, near_z, far_z, perspective, HPoint.getCPtr(pos), HPoint.getCPtr(target), HPoint.getCPtr(up), projection, width, height, near_limit);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool PushAttribute(string attName) {
    bool ret = HCSMVOPINVOKE.HUtility_PushAttribute__SWIG_0(attName);
    return ret;
  }

  public static void PushAttribute(string attName, string attText) {
    HCSMVOPINVOKE.HUtility_PushAttribute__SWIG_1(attName, attText);
  }

  public static bool PopAttribute(string attName) {
    bool ret = HCSMVOPINVOKE.HUtility_PopAttribute(attName);
    return ret;
  }

  public static bool ModifyPushedAttribute(string attName, string newStyle) {
    bool ret = HCSMVOPINVOKE.HUtility_ModifyPushedAttribute(attName, newStyle);
    return ret;
  }

  public static bool ShowPushedAttribute(string attName, HUserOptions attText) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowPushedAttribute(attName, HUserOptions.getCPtr(attText));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Recursive_Merge_Shells(HShell total_info, HShell max_info, bool do_recurse, bool delete_orig_shells, bool insert_null_lods) {
    HCSMVOPINVOKE.HUtility_Recursive_Merge_Shells__SWIG_0(HShell.getCPtr(total_info), HShell.getCPtr(max_info), do_recurse, delete_orig_shells, insert_null_lods);
  }

  public static void Recursive_Merge_Shells(HShell total_info, HShell max_info, bool do_recurse, bool delete_orig_shells) {
    HCSMVOPINVOKE.HUtility_Recursive_Merge_Shells__SWIG_1(HShell.getCPtr(total_info), HShell.getCPtr(max_info), do_recurse, delete_orig_shells);
  }

  public static void Recursive_Merge_Shells(HShell total_info, HShell max_info, bool do_recurse) {
    HCSMVOPINVOKE.HUtility_Recursive_Merge_Shells__SWIG_2(HShell.getCPtr(total_info), HShell.getCPtr(max_info), do_recurse);
  }

  public static MVO_POINTER_SIZED_INT Merge_Shells(bool do_recurse, bool delete_orig_shells, bool optimize_shell, bool generate_regions) {return HCSMVOPINVOKE.HUtility_Merge_Shells__SWIG_0(do_recurse, delete_orig_shells, optimize_shell, generate_regions);}

  public static MVO_POINTER_SIZED_INT Merge_Shells(bool do_recurse, bool delete_orig_shells, bool optimize_shell) {return HCSMVOPINVOKE.HUtility_Merge_Shells__SWIG_1(do_recurse, delete_orig_shells, optimize_shell);}

  public static MVO_POINTER_SIZED_INT Merge_Shells(bool do_recurse, bool delete_orig_shells) {return HCSMVOPINVOKE.HUtility_Merge_Shells__SWIG_2(do_recurse, delete_orig_shells);}

  public static MVO_POINTER_SIZED_INT Merge_Shells(bool do_recurse) {return HCSMVOPINVOKE.HUtility_Merge_Shells__SWIG_3(do_recurse);}

  public static MVO_POINTER_SIZED_INT Merge_Shells_Generate_Regions(int num_shells, MVO_POINTER_SIZED_INT[] shell_keys, bool delete_orig_shells) {return HCSMVOPINVOKE.HUtility_Merge_Shells_Generate_Regions__SWIG_0(num_shells, shell_keys, delete_orig_shells);}

  public static MVO_POINTER_SIZED_INT Merge_Shells_Generate_Regions(int num_shells, MVO_POINTER_SIZED_INT[] shell_keys) {return HCSMVOPINVOKE.HUtility_Merge_Shells_Generate_Regions__SWIG_1(num_shells, shell_keys);}

  public static void Generate_LODs(bool do_recurse, bool delete_orig_shells, bool insert_null_lods, int n_lod_levels, float reduction_ratio) {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_0(do_recurse, delete_orig_shells, insert_null_lods, n_lod_levels, reduction_ratio);
  }

  public static void Generate_LODs(bool do_recurse, bool delete_orig_shells, bool insert_null_lods, int n_lod_levels) {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_1(do_recurse, delete_orig_shells, insert_null_lods, n_lod_levels);
  }

  public static void Generate_LODs(bool do_recurse, bool delete_orig_shells, bool insert_null_lods) {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_2(do_recurse, delete_orig_shells, insert_null_lods);
  }

  public static void Generate_LODs(bool do_recurse, bool delete_orig_shells) {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_3(do_recurse, delete_orig_shells);
  }

  public static void Generate_LODs(bool do_recurse) {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_4(do_recurse);
  }

  public static void Generate_LODs() {
    HCSMVOPINVOKE.HUtility_Generate_LODs__SWIG_5();
  }

  public static bool Segment_Shell_Allocate(HShell total_info, HShell max_info, bool do_recurse) {
    bool ret = HCSMVOPINVOKE.HUtility_Segment_Shell_Allocate(HShell.getCPtr(total_info), HShell.getCPtr(max_info), do_recurse);
    return ret;
  }

  public static void Shell_Search(HShell total_info, HShell max_info, bool do_recurse) {
    HCSMVOPINVOKE.HUtility_Shell_Search(HShell.getCPtr(total_info), HShell.getCPtr(max_info), do_recurse);
  }

  public static void OptimizeSegmentTree(MVO_POINTER_SIZED_INT old_seg_key, MVO_POINTER_SIZED_INT[] new_seg_key, bool transform_shells, bool merge_shells, bool create_shell_regions) {
    HCSMVOPINVOKE.HUtility_OptimizeSegmentTree__SWIG_0(old_seg_key, new_seg_key, transform_shells, merge_shells, create_shell_regions);
  }

  public static void OptimizeSegmentTree(MVO_POINTER_SIZED_INT old_seg_key, MVO_POINTER_SIZED_INT[] new_seg_key, bool transform_shells, bool merge_shells) {
    HCSMVOPINVOKE.HUtility_OptimizeSegmentTree__SWIG_1(old_seg_key, new_seg_key, transform_shells, merge_shells);
  }

  public static void OptimizeSegmentTree(MVO_POINTER_SIZED_INT old_seg_key, MVO_POINTER_SIZED_INT[] new_seg_key, bool transform_shells) {
    HCSMVOPINVOKE.HUtility_OptimizeSegmentTree__SWIG_2(old_seg_key, new_seg_key, transform_shells);
  }

  public static void OptimizeSegmentTree(MVO_POINTER_SIZED_INT old_seg_key, MVO_POINTER_SIZED_INT[] new_seg_key) {
    HCSMVOPINVOKE.HUtility_OptimizeSegmentTree__SWIG_3(old_seg_key, new_seg_key);
  }

  public static void CountShellData(MVO_POINTER_SIZED_INT shell_key, int[] faces, int[] vertices, int[] triangles, int[] tristrips) {
    HCSMVOPINVOKE.HUtility_CountShellData__SWIG_0(shell_key, faces, vertices, triangles, tristrips);
  }

  public static void CountShellData(MVO_POINTER_SIZED_INT shell_key, int[] faces, int[] vertices, int[] triangles) {
    HCSMVOPINVOKE.HUtility_CountShellData__SWIG_1(shell_key, faces, vertices, triangles);
  }

  public static void FindFileNameExtension(string filename_in, System.Text.StringBuilder ext_out, int size) {
    HCSMVOPINVOKE.HUtility_FindFileNameExtension__SWIG_0(filename_in, ext_out, size);
  }

  public static void FindFileNameExtension(string filename_in, System.Text.StringBuilder ext_out) {
    HCSMVOPINVOKE.HUtility_FindFileNameExtension__SWIG_1(filename_in, ext_out);
  }

  public static void FindUnicodeFileNameExtension(ushort[] filename_in, System.Text.StringBuilder ext_out) {
    HCSMVOPINVOKE.HUtility_FindUnicodeFileNameExtension(filename_in, ext_out);
  }

  public static void FindFileNameAndDirectory(string filename_in, System.Text.StringBuilder dir_out, System.Text.StringBuilder filename_out) {
    HCSMVOPINVOKE.HUtility_FindFileNameAndDirectory__SWIG_0(filename_in, dir_out, filename_out);
  }

  public static string extra_pointer_format() {
    string ret = HCSMVOPINVOKE.HUtility_extra_pointer_format();
    return ret;
  }

  public static MVO_POINTER_SIZED_INT CreateScaleIndependentSegment(string segname, bool SetCallback) {return HCSMVOPINVOKE.HUtility_CreateScaleIndependentSegment__SWIG_0(segname, SetCallback);}

  public static MVO_POINTER_SIZED_INT CreateScaleIndependentSegment(string segname) {return HCSMVOPINVOKE.HUtility_CreateScaleIndependentSegment__SWIG_1(segname);}

  public static MVO_POINTER_SIZED_INT GetScaleIndependentGeomSegmentKey(MVO_POINTER_SIZED_INT segkey) {return HCSMVOPINVOKE.HUtility_GetScaleIndependentGeomSegmentKey(segkey);}

  public static void SetScaleIndependentGeomPosition(MVO_POINTER_SIZED_INT segkey, float x, float y, float z) {
    HCSMVOPINVOKE.HUtility_SetScaleIndependentGeomPosition(segkey, x, y, z);
  }

  public static void GetScaleIndependentGeomPosition(MVO_POINTER_SIZED_INT segkey, float[] x, float[] y, float[] z) {
    HCSMVOPINVOKE.HUtility_GetScaleIndependentGeomPosition(segkey, x, y, z);
  }

  public static void RegisterCallbacks() {
    HCSMVOPINVOKE.HUtility_RegisterCallbacks();
  }

  public static bool IsModelKey(MVO_POINTER_SIZED_INT modelkey, MVO_POINTER_SIZED_INT objectkey) {
    bool ret = HCSMVOPINVOKE.HUtility_IsModelKey(modelkey, objectkey);
    return ret;
  }

  public static MVO_POINTER_SIZED_INT UserOptionExists(MVO_POINTER_SIZED_INT key, string attrib, System.Text.StringBuilder result) {return HCSMVOPINVOKE.HUtility_UserOptionExists(key, attrib, result);}

  public static void InsertRotatedArrow(float stick_length, float tip_length, float stick_radius, float tip_radius, float distance, int adelta, float rotang, string stick_color, string tip_color, int num_sides, float tip_falloff, bool reverse) {
    HCSMVOPINVOKE.HUtility_InsertRotatedArrow(stick_length, tip_length, stick_radius, tip_radius, distance, adelta, rotang, stick_color, tip_color, num_sides, tip_falloff, reverse);
  }

  public static int CalculateKeyPath(MVO_POINTER_SIZED_INT startkey, HBaseView view, MVO_POINTER_SIZED_INT[] keyarray, int maxarray) {
    int ret = HCSMVOPINVOKE.HUtility_CalculateKeyPath(startkey, HBaseView.getCPtr(view), keyarray, maxarray);
    return ret;
  }

  public static bool SegmentExists(string segment) {
    bool ret = HCSMVOPINVOKE.HUtility_SegmentExists(segment);
    return ret;
  }

  public static void UnsetAttributes() {
    HCSMVOPINVOKE.HUtility_UnsetAttributes();
  }

  public static int IsChildOf(MVO_POINTER_SIZED_INT owner, MVO_POINTER_SIZED_INT child, MVO_POINTER_SIZED_INT[] klist) {
    int ret = HCSMVOPINVOKE.HUtility_IsChildOf__SWIG_0(owner, child, klist);
    return ret;
  }

  public static int IsChildOf(MVO_POINTER_SIZED_INT owner, MVO_POINTER_SIZED_INT child) {
    int ret = HCSMVOPINVOKE.HUtility_IsChildOf__SWIG_1(owner, child);
    return ret;
  }

  public static bool IsIdentityMatrix(float[] matrix) {
    bool ret = HCSMVOPINVOKE.HUtility_IsIdentityMatrix(matrix);
    return ret;
  }

  public static void ComputeShellNormal(MVO_POINTER_SIZED_INT skey, HPoint tnormal) {
    HCSMVOPINVOKE.HUtility_ComputeShellNormal(skey, HPoint.getCPtr(tnormal));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static MVO_POINTER_SIZED_INT SelectUnderCursor(HBaseView view, float x, float y, bool doSelection, bool DeSelect) {return HCSMVOPINVOKE.HUtility_SelectUnderCursor__SWIG_0(HBaseView.getCPtr(view), x, y, doSelection, DeSelect);}

  public static MVO_POINTER_SIZED_INT SelectUnderCursor(HBaseView view, float x, float y, bool doSelection) {return HCSMVOPINVOKE.HUtility_SelectUnderCursor__SWIG_1(HBaseView.getCPtr(view), x, y, doSelection);}

  public static MVO_POINTER_SIZED_INT SelectUnderCursor(HBaseView view, float x, float y) {return HCSMVOPINVOKE.HUtility_SelectUnderCursor__SWIG_2(HBaseView.getCPtr(view), x, y);}

  public static MVO_POINTER_SIZED_INT SmartSelectUnderCursor(HBaseView view, float x, float y, bool doSelection, bool DeSelect) {return HCSMVOPINVOKE.HUtility_SmartSelectUnderCursor__SWIG_0(HBaseView.getCPtr(view), x, y, doSelection, DeSelect);}

  public static MVO_POINTER_SIZED_INT SmartSelectUnderCursor(HBaseView view, float x, float y, bool doSelection) {return HCSMVOPINVOKE.HUtility_SmartSelectUnderCursor__SWIG_1(HBaseView.getCPtr(view), x, y, doSelection);}

  public static MVO_POINTER_SIZED_INT SmartSelectUnderCursor(HBaseView view, float x, float y) {return HCSMVOPINVOKE.HUtility_SmartSelectUnderCursor__SWIG_2(HBaseView.getCPtr(view), x, y);}

  public static bool ShowOneHeuristic(string type, System.Text.StringBuilder res) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowOneHeuristic__SWIG_0(type, res);
    return ret;
  }

  public static bool ShowOneHeuristic(string type) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowOneHeuristic__SWIG_1(type);
    return ret;
  }

  public static bool ShowOneRenderingOption(string type, System.Text.StringBuilder res) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowOneRenderingOption__SWIG_0(type, res);
    return ret;
  }

  public static bool ShowOneRenderingOption(string type) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowOneRenderingOption__SWIG_1(type);
    return ret;
  }

  public static float EaseInEaseOut(float t, float a, float b, float c) {
    float ret = HCSMVOPINVOKE.HUtility_EaseInEaseOut(t, a, b, c);
    return ret;
  }

  public static void UnwindIncludes(MVO_POINTER_SIZED_INT[] key) {
    HCSMVOPINVOKE.HUtility_UnwindIncludes__SWIG_0(key);
  }

  public static void UnwindIncludes(MVO_POINTER_SIZED_INT[] newkey, MVO_POINTER_SIZED_INT[] keys, int count) {
    HCSMVOPINVOKE.HUtility_UnwindIncludes__SWIG_1(newkey, keys, count);
  }

  public static bool SafeSetUserOption(string opt) {
    bool ret = HCSMVOPINVOKE.HUtility_SafeSetUserOption(opt);
    return ret;
  }

  public static bool SafeShowUserOption(System.Text.StringBuilder opt) {
    bool ret = HCSMVOPINVOKE.HUtility_SafeShowUserOption(opt);
    return ret;
  }

  public static void ProjectShell(MVO_POINTER_SIZED_INT shellkey) {
    HCSMVOPINVOKE.HUtility_ProjectShell(shellkey);
  }

  public static MVO_POINTER_SIZED_INT MergeShells(MVO_POINTER_SIZED_INT shell1, MVO_POINTER_SIZED_INT shell2) {return HCSMVOPINVOKE.HUtility_MergeShells(shell1, shell2);}

  public static void ShowModellingMatrix(float[] segment_modelling_matrix) {
    HCSMVOPINVOKE.HUtility_ShowModellingMatrix(segment_modelling_matrix);
  }

  public static void ConvertLocalPixelsToLocalWindow(HBaseView view, HPoint in_system, HPoint out_system) {
    HCSMVOPINVOKE.HUtility_ConvertLocalPixelsToLocalWindow__SWIG_0(HBaseView.getCPtr(view), HPoint.getCPtr(in_system), HPoint.getCPtr(out_system));
  }

  public static void ConvertLocalPixelsToLocalWindow(HBaseView view, HPoint in_system) {
    HCSMVOPINVOKE.HUtility_ConvertLocalPixelsToLocalWindow__SWIG_1(HBaseView.getCPtr(view), HPoint.getCPtr(in_system));
  }

  public static MVO_POINTER_SIZED_INT GrabSegment(MVO_POINTER_SIZED_INT key) {return HCSMVOPINVOKE.HUtility_GrabSegment(key);}

  public static void RenameSegment(MVO_POINTER_SIZED_INT segkey, string newname) {
    HCSMVOPINVOKE.HUtility_RenameSegment(segkey, newname);
  }

  public static void InterpolateNormalAlongEdge(HPoint p1, HPoint n1, HPoint p2, HPoint n2, HPoint p3, HPoint n3) {
    HCSMVOPINVOKE.HUtility_InterpolateNormalAlongEdge(HPoint.getCPtr(p1), HPoint.getCPtr(n1), HPoint.getCPtr(p2), HPoint.getCPtr(n2), HPoint.getCPtr(p3), HPoint.getCPtr(n3));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ShowNormals(MVO_POINTER_SIZED_INT shellkey, float normallength) {
    HCSMVOPINVOKE.HUtility_ShowNormals(shellkey, normallength);
  }

  public static bool IsSegmentKey(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HUtility_IsSegmentKey(key);
    return ret;
  }

  public static int FindContents(MVO_POINTER_SIZED_INT[] key) {
    int ret = HCSMVOPINVOKE.HUtility_FindContents(key);
    return ret;
  }

  public static int CalculateMajorAxis(HBaseView view) {
    int ret = HCSMVOPINVOKE.HUtility_CalculateMajorAxis(HBaseView.getCPtr(view));
    return ret;
  }

  public static MVO_POINTER_SIZED_INT FindOneObject(string type, bool l) {return HCSMVOPINVOKE.HUtility_FindOneObject__SWIG_0(type, l);}

  public static MVO_POINTER_SIZED_INT FindOneObject(string type) {return HCSMVOPINVOKE.HUtility_FindOneObject__SWIG_1(type);}

  public static void CloseAllSegments(MVO_POINTER_SIZED_INT endkey) {
    HCSMVOPINVOKE.HUtility_CloseAllSegments__SWIG_0(endkey);
  }

  public static void CloseAllSegments() {
    HCSMVOPINVOKE.HUtility_CloseAllSegments__SWIG_1();
  }

  public static void ReadjustTarget(HBaseView view) {
    HCSMVOPINVOKE.HUtility_ReadjustTarget(HBaseView.getCPtr(view));
  }

  public static bool GetAllowAnimation(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HUtility_GetAllowAnimation(key);
    return ret;
  }

  public static void SuppressAnimation() {
    HCSMVOPINVOKE.HUtility_SuppressAnimation();
  }

  public static int FindFaceByIndex(int findex, int[] flist, int flen) {
    int ret = HCSMVOPINVOKE.HUtility_FindFaceByIndex(findex, flist, flen);
    return ret;
  }

  public static bool ShowOneUserOption(string option, System.Text.StringBuilder res) {
    bool ret = HCSMVOPINVOKE.HUtility_ShowOneUserOption(option, res);
    return ret;
  }

  public static MVO_POINTER_SIZED_INT GetNextRenumberedKey(HBaseView view) {return HCSMVOPINVOKE.HUtility_GetNextRenumberedKey(HBaseView.getCPtr(view));}

  public static void NameSegments(MVO_POINTER_SIZED_INT[] key, HBaseView view) {
    HCSMVOPINVOKE.HUtility_NameSegments(key, HBaseView.getCPtr(view));
  }

  public static void MoveToTemp(MVO_POINTER_SIZED_INT movekey, MVO_POINTER_SIZED_INT tempkey) {
    HCSMVOPINVOKE.HUtility_MoveToTemp(movekey, tempkey);
  }

  public static void ShowContentsWithPath(string entitytypes, SWIGTYPE_p_p_vlist_s ret_pathlist, bool storePath, bool includeIncludes, bool filterIncludes) {
    HCSMVOPINVOKE.HUtility_ShowContentsWithPath__SWIG_0(entitytypes, SWIGTYPE_p_p_vlist_s.getCPtr(ret_pathlist), storePath, includeIncludes, filterIncludes);
  }

  public static void ShowContentsWithPath(string entitytypes, SWIGTYPE_p_p_vlist_s ret_pathlist, bool storePath, bool includeIncludes) {
    HCSMVOPINVOKE.HUtility_ShowContentsWithPath__SWIG_1(entitytypes, SWIGTYPE_p_p_vlist_s.getCPtr(ret_pathlist), storePath, includeIncludes);
  }

  public static void ShowContentsWithPath(string entitytypes, SWIGTYPE_p_p_vlist_s ret_pathlist, bool storePath) {
    HCSMVOPINVOKE.HUtility_ShowContentsWithPath__SWIG_2(entitytypes, SWIGTYPE_p_p_vlist_s.getCPtr(ret_pathlist), storePath);
  }

  public static void ShowContentsWithPath(string entitytypes, SWIGTYPE_p_p_vlist_s ret_pathlist) {
    HCSMVOPINVOKE.HUtility_ShowContentsWithPath__SWIG_3(entitytypes, SWIGTYPE_p_p_vlist_s.getCPtr(ret_pathlist));
  }

  public static int ustrlen(ushort[] text) {
    int ret = HCSMVOPINVOKE.HUtility_ustrlen(text);
    return ret;
  }

  public static bool RLECompress(int in_len, byte[] in_buf, int[] out_len, byte[] out_buf) {
    bool ret = HCSMVOPINVOKE.HUtility_RLECompress(in_len, in_buf, out_len, out_buf);
    return ret;
  }

  public static bool ZlibCompress(int in_len, byte[] in_buf, int[] out_len, byte[] out_buf) {
    bool ret = HCSMVOPINVOKE.HUtility_ZlibCompress(in_len, in_buf, out_len, out_buf);
    return ret;
  }

  public static bool ZlibDecompress(int in_len, byte[] in_buf, int[] out_len, byte[] out_buf) {
    bool ret = HCSMVOPINVOKE.HUtility_ZlibDecompress(in_len, in_buf, out_len, out_buf);
    return ret;
  }

  public static IntPtr uconvert(string text) {return HCSMVOPINVOKE.HUtility_uconvert(text);}

  public static bool BuildIncludePath(MVO_POINTER_SIZED_INT objectkey, MVO_POINTER_SIZED_INT[] includelist, int ilength, MVO_POINTER_SIZED_INT[] fullpath, int[] fplength, MVO_POINTER_SIZED_INT matchkey) {
    bool ret = HCSMVOPINVOKE.HUtility_BuildIncludePath__SWIG_0(objectkey, includelist, ilength, fullpath, fplength, matchkey);
    return ret;
  }

  public static bool BuildIncludePath(MVO_POINTER_SIZED_INT objectkey, MVO_POINTER_SIZED_INT[] includelist, int ilength, MVO_POINTER_SIZED_INT[] fullpath, int[] fplength) {
    bool ret = HCSMVOPINVOKE.HUtility_BuildIncludePath__SWIG_1(objectkey, includelist, ilength, fullpath, fplength);
    return ret;
  }

  public static void BuildIncludePathFromSelection(HSmartSelItem sitem, int[] plen, MVO_POINTER_SIZED_INT[] fullpath) {
    HCSMVOPINVOKE.HUtility_BuildIncludePathFromSelection(HSmartSelItem.getCPtr(sitem), plen, fullpath);
  }

  public static void MakeViewSnapshot(HBaseView view, int width, int height, SWIGTYPE_p_p_char data) {
    HCSMVOPINVOKE.HUtility_MakeViewSnapshot__SWIG_0(HBaseView.getCPtr(view), width, height, SWIGTYPE_p_p_char.getCPtr(data));
  }

  public static void MakeViewSnapshot(HBaseView view, MVO_POINTER_SIZED_INT image_key) {
    HCSMVOPINVOKE.HUtility_MakeViewSnapshot__SWIG_1(HBaseView.getCPtr(view), image_key);
  }

  public static int ConstrainToVector(float[] matrix_in, HPoint vector, float[] matrix_out) {
    int ret = HCSMVOPINVOKE.HUtility_ConstrainToVector(matrix_in, HPoint.getCPtr(vector), matrix_out);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Camera_To_Transform(HCamera camera, float[] pos, float[] projection_matrix, float[] complete_matrix) {
    HCSMVOPINVOKE.HUtility_Camera_To_Transform(HCamera.getCPtr(camera), pos, projection_matrix, complete_matrix);
  }

  public static void LocalPixelsToWorld(HCamera camera, bool righthanded, float xres, float yres, int xwpix, int ywpix, float[] result) {
    HCSMVOPINVOKE.HUtility_LocalPixelsToWorld(HCamera.getCPtr(camera), righthanded, xres, yres, xwpix, ywpix, result);
  }

  public static float ComputeAngleBetweenVector(HPoint p1, HPoint p2) {
    float ret = HCSMVOPINVOKE.HUtility_ComputeAngleBetweenVector(HPoint.getCPtr(p1), HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int strlen16(ushort[] p16) {
    int ret = HCSMVOPINVOKE.HUtility_strlen16(p16);
    return ret;
  }

  public static void CalculateBoundingInfo(MVO_POINTER_SIZED_INT startkey, HPoint min, HPoint max, HPoint delta, HPoint mid) {
    HCSMVOPINVOKE.HUtility_CalculateBoundingInfo(startkey, HPoint.getCPtr(min), HPoint.getCPtr(max), HPoint.getCPtr(delta), HPoint.getCPtr(mid));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ClipPolygonAgainstPlane(int vertexCount, float[] vertex, float[] plane, float[] result, bool[] noCut) {
    int ret = HCSMVOPINVOKE.HUtility_ClipPolygonAgainstPlane__SWIG_0(vertexCount, vertex, plane, result, noCut);
    return ret;
  }

  public static int ClipPolygonAgainstPlane(int vertexCount, float[] vertex, float[] plane, float[] result) {
    int ret = HCSMVOPINVOKE.HUtility_ClipPolygonAgainstPlane__SWIG_1(vertexCount, vertex, plane, result);
    return ret;
  }

  public static HFileIOResult TwoPassPrint(string driver, HOutputHandlerOptions options) {
    HFileIOResult ret = (HFileIOResult)HCSMVOPINVOKE.HUtility_TwoPassPrint(driver, HOutputHandlerOptions.getCPtr(options));
    return ret;
  }

  public static MVO_POINTER_SIZED_INT OpenSegmentFromKey(MVO_POINTER_SIZED_INT key, System.Text.StringBuilder segment) {return HCSMVOPINVOKE.HUtility_OpenSegmentFromKey(key, segment);}

  public static bool IsPointInsideAllEdges(float[] pt, float[] points1, int len, int[] face1, float[] plane1, float fudge) {
    bool ret = HCSMVOPINVOKE.HUtility_IsPointInsideAllEdges(pt, points1, len, face1, plane1, fudge);
    return ret;
  }

  public static void IntersectionLinePlane(HPoint p1, HPoint p2, HPlane p, HPoint res) {
    HCSMVOPINVOKE.HUtility_IntersectionLinePlane(HPoint.getCPtr(p1), HPoint.getCPtr(p2), HPlane.getCPtr(p), HPoint.getCPtr(res));
  }

  public static void DeleteManipulators(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HUtility_DeleteManipulators(key);
  }

  public static void MergePointsIntoShell(int num_shell_points, float[] plist1, int num_shell_facelist, int[] flist1, int num_merge_points, float[] merge_points, float[] merge_vectors, float tolerance, bool AddExtraPoints, int[] newpoints, int[] newpointslen) {
    HCSMVOPINVOKE.HUtility_MergePointsIntoShell(num_shell_points, plist1, num_shell_facelist, flist1, num_merge_points, merge_points, merge_vectors, tolerance, AddExtraPoints, newpoints, newpointslen);
  }

  public static void SubdivideShells(MVO_POINTER_SIZED_INT sskey, MVO_POINTER_SIZED_INT startkey, MVO_POINTER_SIZED_INT newkey, int numx, int numy, int numz, ShellToRegionMapper mapper, bool DoCut, bool DeleteOriginalShells, bool breakShells) {
    HCSMVOPINVOKE.HUtility_SubdivideShells__SWIG_0(sskey, startkey, newkey, numx, numy, numz, ShellToRegionMapper.getCPtr(mapper), DoCut, DeleteOriginalShells, breakShells);
  }

  public static void SubdivideShells(MVO_POINTER_SIZED_INT sskey, MVO_POINTER_SIZED_INT startkey, MVO_POINTER_SIZED_INT newkey, int numx, int numy, int numz, ShellToRegionMapper mapper, bool DoCut, bool DeleteOriginalShells) {
    HCSMVOPINVOKE.HUtility_SubdivideShells__SWIG_1(sskey, startkey, newkey, numx, numy, numz, ShellToRegionMapper.getCPtr(mapper), DoCut, DeleteOriginalShells);
  }

  public static void SubdivideShells(MVO_POINTER_SIZED_INT sskey, MVO_POINTER_SIZED_INT startkey, MVO_POINTER_SIZED_INT newkey, int numx, int numy, int numz, ShellToRegionMapper mapper, bool DoCut) {
    HCSMVOPINVOKE.HUtility_SubdivideShells__SWIG_2(sskey, startkey, newkey, numx, numy, numz, ShellToRegionMapper.getCPtr(mapper), DoCut);
  }

  public static void SubdivideShells(MVO_POINTER_SIZED_INT sskey, MVO_POINTER_SIZED_INT startkey, MVO_POINTER_SIZED_INT newkey, int numx, int numy, int numz, ShellToRegionMapper mapper) {
    HCSMVOPINVOKE.HUtility_SubdivideShells__SWIG_3(sskey, startkey, newkey, numx, numy, numz, ShellToRegionMapper.getCPtr(mapper));
  }

  public static void SubdivideShells(MVO_POINTER_SIZED_INT sskey, MVO_POINTER_SIZED_INT startkey, MVO_POINTER_SIZED_INT newkey, int numx, int numy, int numz) {
    HCSMVOPINVOKE.HUtility_SubdivideShells__SWIG_4(sskey, startkey, newkey, numx, numy, numz);
  }

  public static void MergePolylines() {
    HCSMVOPINVOKE.HUtility_MergePolylines();
  }

  public static void CreateZebraStripeTexture(int width, int height, int stripwidth, bool horizontal, HPixelRGB colorstripes, HPixelRGB colorbackground) {
    HCSMVOPINVOKE.HUtility_CreateZebraStripeTexture(width, height, stripwidth, horizontal, HPixelRGB.getCPtr(colorstripes), HPixelRGB.getCPtr(colorbackground));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ascii_to_unicode(string ascii, ushort[] unicode) {
    HCSMVOPINVOKE.HUtility_ascii_to_unicode(ascii, unicode);
  }

  public static void unicode_to_ascii(ushort[] unicode, System.Text.StringBuilder ascii) {
    HCSMVOPINVOKE.HUtility_unicode_to_ascii(unicode, ascii);
  }

  public static void BatchRead(HBaseModel model, string directory, string extension) {
    HCSMVOPINVOKE.HUtility_BatchRead(HBaseModel.getCPtr(model), directory, extension);
  }

  public static void AdjustPositionToPlane(HBaseView view, HPoint position, HPoint point_in_plane) {
    HCSMVOPINVOKE.HUtility_AdjustPositionToPlane(HBaseView.getCPtr(view), HPoint.getCPtr(position), HPoint.getCPtr(point_in_plane));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CalculateCornerImagePosition(HBaseView view, int iwidth, int iheight, HWindowCorner corner, float[] posx, float[] posy) {
    HCSMVOPINVOKE.HUtility_CalculateCornerImagePosition(HBaseView.getCPtr(view), iwidth, iheight, (int)corner, posx, posy);
  }

  public static void OptimizeModelByGrid(HBaseView view, ShellToRegionMapper mapper) {
    HCSMVOPINVOKE.HUtility_OptimizeModelByGrid(HBaseView.getCPtr(view), ShellToRegionMapper.getCPtr(mapper));
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling, bool[] ValueScaleSet, bool[] ValueScale, float[] ValueScaleMin, float[] ValueScaleMax, System.Text.StringBuilder BlendingMode) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_0(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling, ValueScaleSet, ValueScale, ValueScaleMin, ValueScaleMax, BlendingMode);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling, bool[] ValueScaleSet, bool[] ValueScale, float[] ValueScaleMin, float[] ValueScaleMax) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_1(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling, ValueScaleSet, ValueScale, ValueScaleMin, ValueScaleMax);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling, bool[] ValueScaleSet, bool[] ValueScale, float[] ValueScaleMin) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_2(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling, ValueScaleSet, ValueScale, ValueScaleMin);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling, bool[] ValueScaleSet, bool[] ValueScale) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_3(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling, ValueScaleSet, ValueScale);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling, bool[] ValueScaleSet) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_4(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling, ValueScaleSet);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout, System.Text.StringBuilder Tiling) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_5(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout, Tiling);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter, System.Text.StringBuilder Layout) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_6(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter, Layout);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter, System.Text.StringBuilder DecimationFilter) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_7(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter, DecimationFilter);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource, System.Text.StringBuilder InterpolationFilter) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_8(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource, InterpolationFilter);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet, System.Text.StringBuilder ParameterizationSource) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_9(texdef, Source, DownSampling, DownSamplingSet, ParameterizationSource);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling, bool[] DownSamplingSet) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_10(texdef, Source, DownSampling, DownSamplingSet);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source, bool[] DownSampling) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_11(texdef, Source, DownSampling);
  }

  public static void DecipherTextureString(System.Text.StringBuilder texdef, System.Text.StringBuilder Source) {
    HCSMVOPINVOKE.HUtility_DecipherTextureString__SWIG_12(texdef, Source);
  }

  public HUtility() : this(HCSMVOPINVOKE.new_HUtility(), true) {
  }

  public static readonly int X = HCSMVOPINVOKE.HUtility_X_get();
  public static readonly int Y = HCSMVOPINVOKE.HUtility_Y_get();
  public static readonly int Z = HCSMVOPINVOKE.HUtility_Z_get();
  public static readonly int W = HCSMVOPINVOKE.HUtility_W_get();

  public static readonly int XY = HCSMVOPINVOKE.HUtility_XY_get();
  public static readonly int XZ = HCSMVOPINVOKE.HUtility_XZ_get();
  public static readonly int YZ = HCSMVOPINVOKE.HUtility_YZ_get();

}
