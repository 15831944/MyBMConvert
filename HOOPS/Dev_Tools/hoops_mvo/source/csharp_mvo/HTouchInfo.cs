/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HTouchInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HTouchInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HTouchInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HTouchInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HTouchInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HTouchInfo(float x, float y, float timestamp, int taps, MVO_POINTER_SIZED_UINT ident, bool active) : this(HCSMVOPINVOKE.new_HTouchInfo__SWIG_0(x, y, timestamp, taps, ident, active), true) {
  }

  public HTouchInfo(float x, float y, float timestamp, int taps, MVO_POINTER_SIZED_UINT ident) : this(HCSMVOPINVOKE.new_HTouchInfo__SWIG_1(x, y, timestamp, taps, ident), true) {
  }

  public HTouchInfo() : this(HCSMVOPINVOKE.new_HTouchInfo__SWIG_2(), true) {
  }

  public void Init(float x, float y, float timestamp, int taps, MVO_POINTER_SIZED_UINT ident, bool active) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_0(swigCPtr, x, y, timestamp, taps, ident, active);
  }

  public void Init(float x, float y, float timestamp, int taps, MVO_POINTER_SIZED_UINT ident) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_1(swigCPtr, x, y, timestamp, taps, ident);
  }

  public void Init(float x, float y, float timestamp, int taps) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_2(swigCPtr, x, y, timestamp, taps);
  }

  public void Init(float x, float y, float timestamp) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_3(swigCPtr, x, y, timestamp);
  }

  public void Init(float x, float y) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_4(swigCPtr, x, y);
  }

  public void Init(float x) {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_5(swigCPtr, x);
  }

  public void Init() {
    HCSMVOPINVOKE.HTouchInfo_Init__SWIG_6(swigCPtr);
  }

  public float m_x {
    set {
      HCSMVOPINVOKE.HTouchInfo_m_x_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HTouchInfo_m_x_get(swigCPtr);
      return ret;
    } 
  }

  public float m_y {
    set {
      HCSMVOPINVOKE.HTouchInfo_m_y_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HTouchInfo_m_y_get(swigCPtr);
      return ret;
    } 
  }

  public float m_timestamp {
    set {
      HCSMVOPINVOKE.HTouchInfo_m_timestamp_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HTouchInfo_m_timestamp_get(swigCPtr);
      return ret;
    } 
  }

  public int m_taps {
    set {
      HCSMVOPINVOKE.HTouchInfo_m_taps_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HTouchInfo_m_taps_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bActive {
    set {
      HCSMVOPINVOKE.HTouchInfo_m_bActive_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HTouchInfo_m_bActive_get(swigCPtr);
      return ret;
    } 
  }

  public MVO_POINTER_SIZED_UINT m_id {
	set { HCSMVOPINVOKE.HTouchInfo_m_id_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HTouchInfo_m_id_get(swigCPtr); } 
  }

}
