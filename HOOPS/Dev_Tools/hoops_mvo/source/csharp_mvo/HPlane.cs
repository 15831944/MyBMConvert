/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HPlane : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HPlane(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HPlane obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HPlane() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HPlane(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HPlane(float A, float B, float C, float D) : this(HCSMVOPINVOKE.new_HPlane__SWIG_0(A, B, C, D), true) {
  }

  public HPlane(float A, float B, float C) : this(HCSMVOPINVOKE.new_HPlane__SWIG_1(A, B, C), true) {
  }

  public HPlane(float A, float B) : this(HCSMVOPINVOKE.new_HPlane__SWIG_2(A, B), true) {
  }

  public HPlane(float A) : this(HCSMVOPINVOKE.new_HPlane__SWIG_3(A), true) {
  }

  public HPlane() : this(HCSMVOPINVOKE.new_HPlane__SWIG_4(), true) {
  }

  public HPlane(HPoint normal, float D) : this(HCSMVOPINVOKE.new_HPlane__SWIG_5(HPoint.getCPtr(normal), D), true) {
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPlane(HPlane p) : this(HCSMVOPINVOKE.new_HPlane__SWIG_6(HPlane.getCPtr(p)), true) {
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(float A, float B, float C, float D) {
    HCSMVOPINVOKE.HPlane_Set(swigCPtr, A, B, C, D);
  }

  public double ClassifyPoint(HPoint p) {
    double ret = HCSMVOPINVOKE.HPlane_ClassifyPoint(swigCPtr, HPoint.getCPtr(p));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CalculateNormal(HPoint normal) {
    HCSMVOPINVOKE.HPlane_CalculateNormal(swigCPtr, HPoint.getCPtr(normal));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equal(HPlane p, float epsi1, float epsi2) {
    bool ret = HCSMVOPINVOKE.HPlane_Equal__SWIG_0(swigCPtr, HPlane.getCPtr(p), epsi1, epsi2);
    return ret;
  }

  public bool Equal(HPlane p, float epsi1) {
    bool ret = HCSMVOPINVOKE.HPlane_Equal__SWIG_1(swigCPtr, HPlane.getCPtr(p), epsi1);
    return ret;
  }

  public bool Equal(HPlane p) {
    bool ret = HCSMVOPINVOKE.HPlane_Equal__SWIG_2(swigCPtr, HPlane.getCPtr(p));
    return ret;
  }

  public float a() {
    float ret = HCSMVOPINVOKE.HPlane_a__SWIG_0(swigCPtr);
    return ret;
  }

  public float b() {
    float ret = HCSMVOPINVOKE.HPlane_b__SWIG_0(swigCPtr);
    return ret;
  }

  public float c() {
    float ret = HCSMVOPINVOKE.HPlane_c__SWIG_0(swigCPtr);
    return ret;
  }

  public float d() {
    float ret = HCSMVOPINVOKE.HPlane_d__SWIG_0(swigCPtr);
    return ret;
  }

  public void a(float A) {
    HCSMVOPINVOKE.HPlane_a__SWIG_1(swigCPtr, A);
  }

  public void b(float B) {
    HCSMVOPINVOKE.HPlane_b__SWIG_1(swigCPtr, B);
  }

  public void c(float C) {
    HCSMVOPINVOKE.HPlane_c__SWIG_1(swigCPtr, C);
  }

  public void d(float D) {
    HCSMVOPINVOKE.HPlane_d__SWIG_1(swigCPtr, D);
  }

}
