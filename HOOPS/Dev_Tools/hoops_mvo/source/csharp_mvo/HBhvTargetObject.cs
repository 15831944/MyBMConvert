/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HBhvTargetObject : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HBhvTargetObject(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HBhvTargetObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HBhvTargetObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HBhvTargetObject(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HBhvTargetObject(HBhvBehaviorManager behaviourmanager, string name, string path, HPoint pivot) : this(HCSMVOPINVOKE.new_HBhvTargetObject__SWIG_0(HBhvBehaviorManager.getCPtr(behaviourmanager), name, path, HPoint.getCPtr(pivot)), true) {
  }

  public HBhvTargetObject(HBhvBehaviorManager behaviourmanager, string name, string path) : this(HCSMVOPINVOKE.new_HBhvTargetObject__SWIG_1(HBhvBehaviorManager.getCPtr(behaviourmanager), name, path), true) {
  }

  public string GetName() {
    string ret = HCSMVOPINVOKE.HBhvTargetObject_GetName(swigCPtr);
    return ret;
  }

  public string GetPath() {
    string ret = HCSMVOPINVOKE.HBhvTargetObject_GetPath(swigCPtr);
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetTargetKey() {return HCSMVOPINVOKE.HBhvTargetObject_GetTargetKey(swigCPtr);}

  public void SetTargetKey(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HBhvTargetObject_SetTargetKey(swigCPtr, key);
  }

  public string GetResolvedPath() {
    string ret = HCSMVOPINVOKE.HBhvTargetObject_GetResolvedPath(swigCPtr);
    return ret;
  }

  public string GetHType() {
    string ret = HCSMVOPINVOKE.HBhvTargetObject_GetHType(swigCPtr);
    return ret;
  }

  public bool IsEqual(string target) {
    bool ret = HCSMVOPINVOKE.HBhvTargetObject_IsEqual(swigCPtr, target);
    return ret;
  }

  public HBhvCameraType GetCameraType() {
    HBhvCameraType ret = (HBhvCameraType)HCSMVOPINVOKE.HBhvTargetObject_GetCameraType(swigCPtr);
    return ret;
  }

  public static void ResolveTarget(string arg0, System.Text.StringBuilder result, System.Text.StringBuilder targettype, HBaseModel model, SWIGTYPE_p_HBhvCameraType ctype) {
    HCSMVOPINVOKE.HBhvTargetObject_ResolveTarget(arg0, result, targettype, HBaseModel.getCPtr(model), SWIGTYPE_p_HBhvCameraType.getCPtr(ctype));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CreateTargetString(string type, string path, System.Text.StringBuilder result, bool addquotes) {
    HCSMVOPINVOKE.HBhvTargetObject_CreateTargetString__SWIG_0(type, path, result, addquotes);
  }

  public static void CreateTargetString(string type, string path, System.Text.StringBuilder result) {
    HCSMVOPINVOKE.HBhvTargetObject_CreateTargetString__SWIG_1(type, path, result);
  }

  public void SetPivot(HPoint pv) {
    HCSMVOPINVOKE.HBhvTargetObject_SetPivot__SWIG_0(swigCPtr, HPoint.getCPtr(pv));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCollision(bool collision) {
    HCSMVOPINVOKE.HBhvTargetObject_SetCollision(swigCPtr, collision);
  }

  public bool GetCollision() {
    bool ret = HCSMVOPINVOKE.HBhvTargetObject_GetCollision(swigCPtr);
    return ret;
  }

  public void SetPivot(float x, float y, float z) {
    HCSMVOPINVOKE.HBhvTargetObject_SetPivot__SWIG_1(swigCPtr, x, y, z);
  }

  public void GetPivot(HPoint pv) {
    HCSMVOPINVOKE.HBhvTargetObject_GetPivot__SWIG_0(swigCPtr, HPoint.getCPtr(pv));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint GetPivot() {
    IntPtr cPtr = HCSMVOPINVOKE.HBhvTargetObject_GetPivot__SWIG_1(swigCPtr);
    HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
    return ret;
  }

  public void Serialize(SWIGTYPE_p_HUtilityXMLGenerator xmlgen) {
    HCSMVOPINVOKE.HBhvTargetObject_Serialize(swigCPtr, SWIGTYPE_p_HUtilityXMLGenerator.getCPtr(xmlgen));
  }

  public static IntPtr XMLCallback(SWIGTYPE_p_HUtilityXMLTag xt, bool open, IntPtr m_pExtraData) {return new IntPtr((int)HCSMVOPINVOKE.HBhvTargetObject_XMLCallback(SWIGTYPE_p_HUtilityXMLTag.getCPtr(xt), open, m_pExtraData));}

  public void FlagForCollision() {
    HCSMVOPINVOKE.HBhvTargetObject_FlagForCollision(swigCPtr);
  }

  public void ResetForCollision() {
    HCSMVOPINVOKE.HBhvTargetObject_ResetForCollision(swigCPtr);
  }

  public bool HasMoved() {
    bool ret = HCSMVOPINVOKE.HBhvTargetObject_HasMoved(swigCPtr);
    return ret;
  }

  public void SetSerializeFromKey(bool sfk) {
    HCSMVOPINVOKE.HBhvTargetObject_SetSerializeFromKey(swigCPtr, sfk);
  }

}
