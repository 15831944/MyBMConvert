/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HSmartSelItem : HSelectionItem {
  private HandleRef swigCPtr;

  public HSmartSelItem(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HSmartSelItemUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HSmartSelItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HSmartSelItem() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HSmartSelItem(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HSmartSelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys) : this(HCSMVOPINVOKE.new_HSmartSelItem__SWIG_0(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys), true) {
  }

  public HSmartSelItem(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, bool is_segment) : this(HCSMVOPINVOKE.new_HSmartSelItem__SWIG_1(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, is_segment), true) {
  }

  public override string GetName() {
    string ret = HCSMVOPINVOKE.HSmartSelItem_GetName(swigCPtr);
    return ret;
  }

  public override int GetIncludeCount() {
    int ret = HCSMVOPINVOKE.HSmartSelItem_GetIncludeCount(swigCPtr);
    return ret;
  }

  public override IntPtr GetIncludeKeys() {return HCSMVOPINVOKE.HSmartSelItem_GetIncludeKeys__SWIG_0(swigCPtr);}

  public override void GetIncludeKeys(MVO_POINTER_SIZED_INT[] includes) {
    HCSMVOPINVOKE.HSmartSelItem_GetIncludeKeys__SWIG_1(swigCPtr, includes);
  }

  public override IntPtr GetFullPathKeys(HBaseView view) {return HCSMVOPINVOKE.HSmartSelItem_GetFullPathKeys__SWIG_0(swigCPtr, HBaseView.getCPtr(view));}

  public override void GetFullPathKeys(HBaseView view, MVO_POINTER_SIZED_INT[] path) {
    HCSMVOPINVOKE.HSmartSelItem_GetFullPathKeys__SWIG_1(swigCPtr, HBaseView.getCPtr(view), path);
  }

  public override bool Equals(HSelectionItem i2) {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_Equals(swigCPtr, HSelectionItem.getCPtr(i2));
    return ret;
  }

  public override bool Highlight() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_Highlight(swigCPtr);
    return ret;
  }

  public override bool UnHighlight() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_UnHighlight(swigCPtr);
    return ret;
  }

  public override bool IsHighlighted() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_IsHighlighted__SWIG_0(swigCPtr);
    return ret;
  }

  public static bool IsHighlighted(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys) {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_IsHighlighted__SWIG_1(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys);
    return ret;
  }

  public static bool IsRegionHighlighted(MVO_POINTER_SIZED_INT key, HSelectionSet selection_set, int incl_count, MVO_POINTER_SIZED_INT[] incl_keys, int region) {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_IsRegionHighlighted(key, HSelectionSet.getCPtr(selection_set), incl_count, incl_keys, region);
    return ret;
  }

  public override bool Delete() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_Delete(swigCPtr);
    return ret;
  }

  public override bool IsInstanced() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_IsInstanced(swigCPtr);
    return ret;
  }

  public override bool QueryIncludeDependency(MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT[] ret_dependent_key) {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_QueryIncludeDependency(swigCPtr, include_key, ret_dependent_key);
    return ret;
  }

  public override bool UpdateIncludeDependency(MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT dependent_key, MVO_POINTER_SIZED_INT replacement_key) {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_UpdateIncludeDependency(swigCPtr, include_key, dependent_key, replacement_key);
    return ret;
  }

  public void UpdateIncludePath(int incl_count, MVO_POINTER_SIZED_INT[] incl_keys) {
    HCSMVOPINVOKE.HSmartSelItem_UpdateIncludePath(swigCPtr, incl_count, incl_keys);
  }

  public virtual int GetHighlightMode() {
    int ret = HCSMVOPINVOKE.HSmartSelItem_GetHighlightMode(swigCPtr);
    return ret;
  }

  public virtual void SetHighlightMode(HSelectionHighlightMode m) {
    HCSMVOPINVOKE.HSmartSelItem_SetHighlightMode(swigCPtr, (int)m);
  }

  public int GetHighlightedRefListCount() {
    int ret = HCSMVOPINVOKE.HSmartSelItem_GetHighlightedRefListCount(swigCPtr);
    return ret;
  }

  public void GetHighlightedRefList(MVO_POINTER_SIZED_INT[] keys) {
    HCSMVOPINVOKE.HSmartSelItem_GetHighlightedRefList(swigCPtr, keys);
  }

  public bool IsSegment() {
    bool ret = HCSMVOPINVOKE.HSmartSelItem_IsSegment(swigCPtr);
    return ret;
  }

}
