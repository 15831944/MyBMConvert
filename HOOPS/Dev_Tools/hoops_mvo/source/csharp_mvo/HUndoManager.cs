/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUndoManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUndoManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUndoManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUndoManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUndoManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

	public void AddUndoItem(HUndoItem item) {
		item.owns_memory(false);
		AddUndoItemInternal(item);
	}

  public HUndoManager() : this(HCSMVOPINVOKE.new_HUndoManager(), true) {
  }

  public int Undo(int steps, bool testOnly, bool setupOnly) {
    int ret = HCSMVOPINVOKE.HUndoManager_Undo__SWIG_0(swigCPtr, steps, testOnly, setupOnly);
    return ret;
  }

  public int Undo(int steps, bool testOnly) {
    int ret = HCSMVOPINVOKE.HUndoManager_Undo__SWIG_1(swigCPtr, steps, testOnly);
    return ret;
  }

  public int Undo(int steps) {
    int ret = HCSMVOPINVOKE.HUndoManager_Undo__SWIG_2(swigCPtr, steps);
    return ret;
  }

  public int Undo() {
    int ret = HCSMVOPINVOKE.HUndoManager_Undo__SWIG_3(swigCPtr);
    return ret;
  }

  public int Redo(int steps, bool testOnly, bool setupOnly) {
    int ret = HCSMVOPINVOKE.HUndoManager_Redo__SWIG_0(swigCPtr, steps, testOnly, setupOnly);
    return ret;
  }

  public int Redo(int steps, bool testOnly) {
    int ret = HCSMVOPINVOKE.HUndoManager_Redo__SWIG_1(swigCPtr, steps, testOnly);
    return ret;
  }

  public int Redo(int steps) {
    int ret = HCSMVOPINVOKE.HUndoManager_Redo__SWIG_2(swigCPtr, steps);
    return ret;
  }

  public int Redo() {
    int ret = HCSMVOPINVOKE.HUndoManager_Redo__SWIG_3(swigCPtr);
    return ret;
  }

  private void AddUndoItemInternal(HUndoItem item) {
    HCSMVOPINVOKE.HUndoManager_AddUndoItemInternal(swigCPtr, HUndoItem.getCPtr(item));
  }

  public void Flush() {
    HCSMVOPINVOKE.HUndoManager_Flush(swigCPtr);
  }

  public HUndoItem Peek() {
    IntPtr cPtr = HCSMVOPINVOKE.HUndoManager_Peek(swigCPtr);
    HUndoItem ret = (cPtr == IntPtr.Zero) ? null : new HUndoItem(cPtr, false);
    return ret;
  }

  public void Reset(HBaseView view) {
    HCSMVOPINVOKE.HUndoManager_Reset(swigCPtr, HBaseView.getCPtr(view));
  }

  public void BeginUndoItemIteration() {
    HCSMVOPINVOKE.HUndoManager_BeginUndoItemIteration(swigCPtr);
  }

  public HUndoItem GetNextUndoItem() {
    IntPtr cPtr = HCSMVOPINVOKE.HUndoManager_GetNextUndoItem(swigCPtr);
    HUndoItem ret = (cPtr == IntPtr.Zero) ? null : new HUndoItem(cPtr, false);
    return ret;
  }

  public void EndUndoItemIteration() {
    HCSMVOPINVOKE.HUndoManager_EndUndoItemIteration(swigCPtr);
  }

}
