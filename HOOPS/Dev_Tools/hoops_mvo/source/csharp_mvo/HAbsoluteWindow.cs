/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HAbsoluteWindow : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HAbsoluteWindow(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HAbsoluteWindow obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HAbsoluteWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HAbsoluteWindow(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type, AbsoluteWindowType height_type, bool sb) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_0(HBaseView.getCPtr(view), key, xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type, (int)height_type, sb), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type, AbsoluteWindowType height_type) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_1(HBaseView.getCPtr(view), key, xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type, (int)height_type), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_2(HBaseView.getCPtr(view), key, xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_3(HBaseView.getCPtr(view), key, xpos, ypos, width, height, (int)xpos_type, (int)ypos_type), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_4(HBaseView.getCPtr(view), key, xpos, ypos, width, height, (int)xpos_type), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key, float xpos, float ypos, float width, float height) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_5(HBaseView.getCPtr(view), key, xpos, ypos, width, height), true) {
  }

  public HAbsoluteWindow(HBaseView view, MVO_POINTER_SIZED_INT key) : this(HCSMVOPINVOKE.new_HAbsoluteWindow__SWIG_6(HBaseView.getCPtr(view), key), true) {
  }

  public void DecipherOptions() {
    HCSMVOPINVOKE.HAbsoluteWindow_DecipherOptions(swigCPtr);
  }

  public void AdjustX(float invalue, AbsoluteWindowType wt, float[] outvalue) {
    HCSMVOPINVOKE.HAbsoluteWindow_AdjustX(swigCPtr, invalue, (int)wt, outvalue);
  }

  public void AdjustY(float invalue, AbsoluteWindowType wt, float[] outvalue) {
    HCSMVOPINVOKE.HAbsoluteWindow_AdjustY(swigCPtr, invalue, (int)wt, outvalue);
  }

  public bool Adjust() {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_Adjust(swigCPtr);
    return ret;
  }

  public static void AdjustAll(HBaseView view) {
    HCSMVOPINVOKE.HAbsoluteWindow_AdjustAll(HBaseView.getCPtr(view));
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type, AbsoluteWindowType height_type, bool sb) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_0(HBaseView.getCPtr(view), xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type, (int)height_type, sb);
    return ret;
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type, AbsoluteWindowType height_type) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_1(HBaseView.getCPtr(view), xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type, (int)height_type);
    return ret;
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type, AbsoluteWindowType width_type) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_2(HBaseView.getCPtr(view), xpos, ypos, width, height, (int)xpos_type, (int)ypos_type, (int)width_type);
    return ret;
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type, AbsoluteWindowType ypos_type) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_3(HBaseView.getCPtr(view), xpos, ypos, width, height, (int)xpos_type, (int)ypos_type);
    return ret;
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height, AbsoluteWindowType xpos_type) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_4(HBaseView.getCPtr(view), xpos, ypos, width, height, (int)xpos_type);
    return ret;
  }

  public static bool SetWindow(HBaseView view, float xpos, float ypos, float width, float height) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_SetWindow__SWIG_5(HBaseView.getCPtr(view), xpos, ypos, width, height);
    return ret;
  }

  public bool IsPositionInWindow(float x, float y) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_IsPositionInWindow__SWIG_0(swigCPtr, x, y);
    return ret;
  }

  public static bool IsPositionInWindow(HBaseView view, float x, float y) {
    bool ret = HCSMVOPINVOKE.HAbsoluteWindow_IsPositionInWindow__SWIG_1(HBaseView.getCPtr(view), x, y);
    return ret;
  }

  public static void CalculateLocalWindowPos(HBaseView view, float x, float y, float[] xout, float[] yout) {
    HCSMVOPINVOKE.HAbsoluteWindow_CalculateLocalWindowPos__SWIG_0(HBaseView.getCPtr(view), x, y, xout, yout);
  }

  public void CalculateLocalWindowPos(float x, float y, float[] xout, float[] yout) {
    HCSMVOPINVOKE.HAbsoluteWindow_CalculateLocalWindowPos__SWIG_1(swigCPtr, x, y, xout, yout);
  }

  public static void CalculateOuterWindowPos(HBaseView view, float x, float y, float[] xout, float[] yout) {
    HCSMVOPINVOKE.HAbsoluteWindow_CalculateOuterWindowPos__SWIG_0(HBaseView.getCPtr(view), x, y, xout, yout);
  }

  public void CalculateOuterWindowPos(float x, float y, float[] xout, float[] yout) {
    HCSMVOPINVOKE.HAbsoluteWindow_CalculateOuterWindowPos__SWIG_1(swigCPtr, x, y, xout, yout);
  }

  public HBaseView m_pView {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_pView_set(swigCPtr, HBaseView.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HAbsoluteWindow_m_pView_get(swigCPtr);
      HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
      return ret;
    } 
  }

  public float m_width {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_width_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HAbsoluteWindow_m_width_get(swigCPtr);
      return ret;
    } 
  }

  public float m_height {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_height_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HAbsoluteWindow_m_height_get(swigCPtr);
      return ret;
    } 
  }

  public float m_xpos {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_xpos_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HAbsoluteWindow_m_xpos_get(swigCPtr);
      return ret;
    } 
  }

  public float m_ypos {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_ypos_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HAbsoluteWindow_m_ypos_get(swigCPtr);
      return ret;
    } 
  }

  public AbsoluteWindowType m_xpos_type {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_xpos_type_set(swigCPtr, (int)value);
    } 
    get {
      AbsoluteWindowType ret = (AbsoluteWindowType)HCSMVOPINVOKE.HAbsoluteWindow_m_xpos_type_get(swigCPtr);
      return ret;
    } 
  }

  public AbsoluteWindowType m_ypos_type {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_ypos_type_set(swigCPtr, (int)value);
    } 
    get {
      AbsoluteWindowType ret = (AbsoluteWindowType)HCSMVOPINVOKE.HAbsoluteWindow_m_ypos_type_get(swigCPtr);
      return ret;
    } 
  }

  public AbsoluteWindowType m_width_type {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_width_type_set(swigCPtr, (int)value);
    } 
    get {
      AbsoluteWindowType ret = (AbsoluteWindowType)HCSMVOPINVOKE.HAbsoluteWindow_m_width_type_get(swigCPtr);
      return ret;
    } 
  }

  public AbsoluteWindowType m_height_type {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_height_type_set(swigCPtr, (int)value);
    } 
    get {
      AbsoluteWindowType ret = (AbsoluteWindowType)HCSMVOPINVOKE.HAbsoluteWindow_m_height_type_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bShowBackground {
    set {
      HCSMVOPINVOKE.HAbsoluteWindow_m_bShowBackground_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HAbsoluteWindow_m_bShowBackground_get(swigCPtr);
      return ret;
    } 
  }

  public MVO_POINTER_SIZED_INT m_key {
	set { HCSMVOPINVOKE.HAbsoluteWindow_m_key_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HAbsoluteWindow_m_key_get(swigCPtr); } 
  }

}
