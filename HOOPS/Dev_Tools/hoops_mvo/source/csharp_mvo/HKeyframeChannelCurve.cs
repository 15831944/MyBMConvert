/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HKeyframeChannelCurve : HKeyframeChannel {
  private HandleRef swigCPtr;

  public HKeyframeChannelCurve(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HKeyframeChannelCurveUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HKeyframeChannelCurve obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HKeyframeChannelCurve() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HKeyframeChannelCurve(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HKeyframeChannelCurve(float x, float y, float z) : this(HCSMVOPINVOKE.new_HKeyframeChannelCurve__SWIG_0(x, y, z), true) {
  }

  public HKeyframeChannelCurve(float x, float y) : this(HCSMVOPINVOKE.new_HKeyframeChannelCurve__SWIG_1(x, y), true) {
  }

  public HKeyframeChannelCurve(float x) : this(HCSMVOPINVOKE.new_HKeyframeChannelCurve__SWIG_2(x), true) {
  }

  public HKeyframeChannelCurve() : this(HCSMVOPINVOKE.new_HKeyframeChannelCurve__SWIG_3(), true) {
  }

  public override HKeyframe Clone() {
    IntPtr cPtr = HCSMVOPINVOKE.HKeyframeChannelCurve_Clone(swigCPtr);
    HKeyframe ret = (cPtr == IntPtr.Zero) ? null : new HKeyframe(cPtr, false);
    return ret;
  }

  public void CalculateCurveFactor(SWIGTYPE_p_HBhvTimeline timeline, int keyframe) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_CalculateCurveFactor(swigCPtr, SWIGTYPE_p_HBhvTimeline.getCPtr(timeline), keyframe);
  }

  public void CalculateHermiteTangents(HPoint p0, HPoint p2, HPoint p3, float a) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_0(swigCPtr, HPoint.getCPtr(p0), HPoint.getCPtr(p2), HPoint.getCPtr(p3), a);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void CalculateHermiteTangents(HPoint p0, HPoint p2, HPoint p3) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_CalculateHermiteTangents__SWIG_1(swigCPtr, HPoint.getCPtr(p0), HPoint.getCPtr(p2), HPoint.getCPtr(p3));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HPoint InterpolateHermiteSpline(float fraction, HPoint p1, HPoint p2) {
    HPoint ret = new HPoint(HCSMVOPINVOKE.HKeyframeChannelCurve_InterpolateHermiteSpline(swigCPtr, fraction, HPoint.getCPtr(p1), HPoint.getCPtr(p2)), true);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CalculateCurveLength(HPoint p2) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_CalculateCurveLength(swigCPtr, HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DrawTangents(HPoint p2) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_DrawTangents(swigCPtr, HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Interpolate(SWIGTYPE_p_p_HKeyframeChannel posarray, int keyframe, float fraction, int length, HPoint res) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_Interpolate(swigCPtr, SWIGTYPE_p_p_HKeyframeChannel.getCPtr(posarray), keyframe, fraction, length, HPoint.getCPtr(res));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Serialize(SWIGTYPE_p_HUtilityXMLTag xmlgen) {
    HCSMVOPINVOKE.HKeyframeChannelCurve_Serialize(swigCPtr, SWIGTYPE_p_HUtilityXMLTag.getCPtr(xmlgen));
  }

  public HPoint m_tangent1 {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_m_tangent1_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HKeyframeChannelCurve_m_tangent1_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public HPoint m_tangent2 {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_m_tangent2_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HKeyframeChannelCurve_m_tangent2_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public float m_factor1 {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_m_factor1_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_m_factor1_get(swigCPtr);
      return ret;
    } 
  }

  public float m_factor2 {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_m_factor2_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_m_factor2_get(swigCPtr);
      return ret;
    } 
  }

  public HPoint control_polygon {
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HKeyframeChannelCurve_control_polygon_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public float ItemType {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_ItemType_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_ItemType_get(swigCPtr);
      return ret;
    } 
  }

  public float c {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_c_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_c_get(swigCPtr);
      return ret;
    } 
  }

  public float b {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_b_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_b_get(swigCPtr);
      return ret;
    } 
  }

  public float m_curvelength {
    set {
      HCSMVOPINVOKE.HKeyframeChannelCurve_m_curvelength_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HKeyframeChannelCurve_m_curvelength_get(swigCPtr);
      return ret;
    } 
  }

}
