/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HMaterialLibrary : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HMaterialLibrary(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HMaterialLibrary obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HMaterialLibrary() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HMaterialLibrary(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HMaterialLibrary() : this(HCSMVOPINVOKE.new_HMaterialLibrary(), true) {
  }

  public bool RegisterMaterials(string directory) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_RegisterMaterials__SWIG_0(swigCPtr, directory);
    return ret;
  }

  public bool IsValid() {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_IsValid(swigCPtr);
    return ret;
  }

  public bool ApplyStyles() {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_ApplyStyles(swigCPtr);
    return ret;
  }

  public string GetContainerSegment() {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetContainerSegment(swigCPtr);
    return ret;
  }

  public string GetMaterialList(System.Text.StringBuilder buffer, int buffer_length) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetMaterialList__SWIG_0(swigCPtr, buffer, buffer_length);
    return ret;
  }

  public string GetMaterialList(System.Text.StringBuilder buffer) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetMaterialList__SWIG_1(swigCPtr, buffer);
    return ret;
  }

  public string GetMaterialList() {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetMaterialList__SWIG_2(swigCPtr);
    return ret;
  }

  public bool IsValidMaterial(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_IsValidMaterial(swigCPtr, name);
    return ret;
  }

  public bool ApplyMaterial(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_ApplyMaterial(swigCPtr, name);
    return ret;
  }

  public bool ReloadMaterial(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_ReloadMaterial(swigCPtr, name);
    return ret;
  }

  public bool CloneMaterial(string old_material_name, System.Text.StringBuilder new_material_name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_CloneMaterial(swigCPtr, old_material_name, new_material_name);
    return ret;
  }

  public bool RenameMaterial(string old_material_name, string new_material_name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_RenameMaterial(swigCPtr, old_material_name, new_material_name);
    return ret;
  }

  public bool GetTweakablesCount(string material_name, int[] count) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_GetTweakablesCount(swigCPtr, material_name, count);
    return ret;
  }

  public bool GetTweakableByIndex(string material_name, int index, System.Text.StringBuilder tweakable_name, System.Text.StringBuilder type) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_GetTweakableByIndex(swigCPtr, material_name, index, tweakable_name, type);
    return ret;
  }

  public bool GetTweakableByName(string material_name, string tweakable_name, int[] index, System.Text.StringBuilder type) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_GetTweakableByName(swigCPtr, material_name, tweakable_name, index, type);
    return ret;
  }

  public int CountFromType(string type) {
    int ret = HCSMVOPINVOKE.HMaterialLibrary_CountFromType(swigCPtr, type);
    return ret;
  }

  public bool GetTweakableDefaults(string material_name, int index, float[] vals) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_GetTweakableDefaults(swigCPtr, material_name, index, vals);
    return ret;
  }

  public bool Tweak(string material_name, int index, float[] vals) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Tweak__SWIG_0(swigCPtr, material_name, index, vals);
    return ret;
  }

  public bool Tweak(string material_name, int index, float val0, float val1, float val2, float val3) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Tweak__SWIG_1(swigCPtr, material_name, index, val0, val1, val2, val3);
    return ret;
  }

  public bool Tweak(string material_name, int index, float val0, float val1, float val2) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Tweak__SWIG_2(swigCPtr, material_name, index, val0, val1, val2);
    return ret;
  }

  public bool Tweak(string material_name, int index, float val0, float val1) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Tweak__SWIG_3(swigCPtr, material_name, index, val0, val1);
    return ret;
  }

  public bool Tweak(string material_name, int index, float val0) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Tweak__SWIG_4(swigCPtr, material_name, index, val0);
    return ret;
  }

  public string GetEnvironmentList(System.Text.StringBuilder buffer, int buffer_length) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetEnvironmentList__SWIG_0(swigCPtr, buffer, buffer_length);
    return ret;
  }

  public string GetEnvironmentList(System.Text.StringBuilder buffer) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetEnvironmentList__SWIG_1(swigCPtr, buffer);
    return ret;
  }

  public string GetEnvironmentList() {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetEnvironmentList__SWIG_2(swigCPtr);
    return ret;
  }

  public bool IsValidEnvironment(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_IsValidEnvironment(swigCPtr, name);
    return ret;
  }

  public bool SetEnvironment(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_SetEnvironment(swigCPtr, name);
    return ret;
  }

  public bool EnsureMaterialInitialized(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_EnsureMaterialInitialized(swigCPtr, name);
    return ret;
  }

  public bool EnsureEnvironmentInitialized(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_EnsureEnvironmentInitialized(swigCPtr, name);
    return ret;
  }

  public bool FindReferencedMaterials(MVO_POINTER_SIZED_INT segment_tree, System.Text.StringBuilder list, int list_size) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_FindReferencedMaterials(swigCPtr, segment_tree, list, list_size);
    return ret;
  }

  public bool InitWrite(string list, int[] size) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_InitWrite(swigCPtr, list, size);
    return ret;
  }

  public bool InitRead(int version) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_InitRead(swigCPtr, version);
    return ret;
  }

  public TK_Status ParseBuffer(string buffer, int size) {
    TK_Status ret = (TK_Status)HCSMVOPINVOKE.HMaterialLibrary_ParseBuffer(swigCPtr, buffer, size);
    return ret;
  }

  public string GetCurrentEnvironment(System.Text.StringBuilder buffer, int buffer_length) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetCurrentEnvironment__SWIG_0(swigCPtr, buffer, buffer_length);
    return ret;
  }

  public string GetCurrentEnvironment(System.Text.StringBuilder buffer) {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetCurrentEnvironment__SWIG_1(swigCPtr, buffer);
    return ret;
  }

  public string GetCurrentEnvironment() {
    string ret = HCSMVOPINVOKE.HMaterialLibrary_GetCurrentEnvironment__SWIG_2(swigCPtr);
    return ret;
  }

  public bool Compile(string name) {
    bool ret = HCSMVOPINVOKE.HMaterialLibrary_Compile(swigCPtr, name);
    return ret;
  }

  public void SetReadFlags(HMaterialLibrary.Read_Flags flags) {
    HCSMVOPINVOKE.HMaterialLibrary_SetReadFlags(swigCPtr, (int)flags);
  }

  public HMaterialLibrary.Read_Flags GetReadFlags() {
    HMaterialLibrary.Read_Flags ret = (HMaterialLibrary.Read_Flags)HCSMVOPINVOKE.HMaterialLibrary_GetReadFlags(swigCPtr);
    return ret;
  }

  public void SetWriteFlags(HMaterialLibrary.Write_Flags flags) {
    HCSMVOPINVOKE.HMaterialLibrary_SetWriteFlags(swigCPtr, (int)flags);
  }

  public HMaterialLibrary.Write_Flags GetWriteFlags() {
    HMaterialLibrary.Write_Flags ret = (HMaterialLibrary.Write_Flags)HCSMVOPINVOKE.HMaterialLibrary_GetWriteFlags(swigCPtr);
    return ret;
  }

  public enum Read_Flags {
    Read_Flags_Default = 0x0000,
    Prefer_Embedded = 0x0001,
    Prefer_Highest_Resolution = 0x0002
  }

  public enum Write_Flags {
    Write_Flags_Default = 0x0000,
    Embedded = 0x0001
  }

}
