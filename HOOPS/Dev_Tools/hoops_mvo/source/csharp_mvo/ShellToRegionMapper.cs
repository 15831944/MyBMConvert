/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class ShellToRegionMapper : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ShellToRegionMapper(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(ShellToRegionMapper obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~ShellToRegionMapper() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_ShellToRegionMapper(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ShellToRegionMapper() : this(HCSMVOPINVOKE.new_ShellToRegionMapper(), true) {
  }

  public void AddRegion(MVO_POINTER_SIZED_INT originalshell, MVO_POINTER_SIZED_INT newshell, int regionnum, bool check) {
    HCSMVOPINVOKE.ShellToRegionMapper_AddRegion__SWIG_0(swigCPtr, originalshell, newshell, regionnum, check);
  }

  public void AddRegion(MVO_POINTER_SIZED_INT originalshell, MVO_POINTER_SIZED_INT newshell, int regionnum) {
    HCSMVOPINVOKE.ShellToRegionMapper_AddRegion__SWIG_1(swigCPtr, originalshell, newshell, regionnum);
  }

  public MVO_POINTER_SIZED_INT GetOriginalShell(MVO_POINTER_SIZED_INT newshell, int regionnum) {return HCSMVOPINVOKE.ShellToRegionMapper_GetOriginalShell(swigCPtr, newshell, regionnum);}

  public int GetRegionsFromOriginalShell(MVO_POINTER_SIZED_INT originalshell, SWIGTYPE_p_p_HC_KEY newshells, int[] regionnum) {
    int ret = HCSMVOPINVOKE.ShellToRegionMapper_GetRegionsFromOriginalShell(swigCPtr, originalshell, SWIGTYPE_p_p_HC_KEY.getCPtr(newshells), regionnum);
    return ret;
  }

  public void BuildSegmentTreeRecursive(MVO_POINTER_SIZED_INT okey, MVO_POINTER_SIZED_INT nkey) {
    HCSMVOPINVOKE.ShellToRegionMapper_BuildSegmentTreeRecursive(swigCPtr, okey, nkey);
  }

  public void MapSegmentTree(MVO_POINTER_SIZED_INT modelkey) {
    HCSMVOPINVOKE.ShellToRegionMapper_MapSegmentTree(swigCPtr, modelkey);
  }

  public void AddSegmentMapping(MVO_POINTER_SIZED_INT originalshell, MVO_POINTER_SIZED_INT segmentkey) {
    HCSMVOPINVOKE.ShellToRegionMapper_AddSegmentMapping(swigCPtr, originalshell, segmentkey);
  }

  public SWIGTYPE_p_vhash_s m_RegionToShellHash {
    set {
      HCSMVOPINVOKE.ShellToRegionMapper_m_RegionToShellHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.ShellToRegionMapper_m_RegionToShellHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_vhash_s m_ShellToRegionHash {
    set {
      HCSMVOPINVOKE.ShellToRegionMapper_m_ShellToRegionHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.ShellToRegionMapper_m_ShellToRegionHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_vhash_s m_ShellToSegmentHash {
    set {
      HCSMVOPINVOKE.ShellToRegionMapper_m_ShellToSegmentHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.ShellToRegionMapper_m_ShellToSegmentHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

}
