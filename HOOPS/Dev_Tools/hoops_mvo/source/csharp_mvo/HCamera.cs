/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HCamera : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HCamera(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HCamera obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HCamera() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HCamera(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool valid {
    set {
      HCSMVOPINVOKE.HCamera_valid_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HCamera_valid_get(swigCPtr);
      return ret;
    } 
  }

  public HPoint position {
    set {
      HCSMVOPINVOKE.HCamera_position_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HCamera_position_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public HPoint target {
    set {
      HCSMVOPINVOKE.HCamera_target_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HCamera_target_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public HPoint up_vector {
    set {
      HCSMVOPINVOKE.HCamera_up_vector_set(swigCPtr, HPoint.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HCamera_up_vector_get(swigCPtr);
      HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
      return ret;
    } 
  }

  public float field_width {
    set {
      HCSMVOPINVOKE.HCamera_field_width_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HCamera_field_width_get(swigCPtr);
      return ret;
    } 
  }

  public float field_height {
    set {
      HCSMVOPINVOKE.HCamera_field_height_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HCamera_field_height_get(swigCPtr);
      return ret;
    } 
  }

  public string projection {
    set {
      HCSMVOPINVOKE.HCamera_projection_set(swigCPtr, value);
    } 
    get {
      string ret = HCSMVOPINVOKE.HCamera_projection_get(swigCPtr);
      return ret;
    } 
  }

  public HCamera() : this(HCSMVOPINVOKE.new_HCamera(), true) {
  }

  public void InvalidateCamera() {
    HCSMVOPINVOKE.HCamera_InvalidateCamera(swigCPtr);
  }

  public bool CameraDifferent(HCamera cam) {
    bool ret = HCSMVOPINVOKE.HCamera_CameraDifferent(swigCPtr, HCamera.getCPtr(cam));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CameraDifferentByAngle(HCamera cam) {
    bool ret = HCSMVOPINVOKE.HCamera_CameraDifferentByAngle(swigCPtr, HCamera.getCPtr(cam));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetFromView(HBaseView view) {
    HCSMVOPINVOKE.HCamera_GetFromView(swigCPtr, HBaseView.getCPtr(view));
  }

  public void Show() {
    HCSMVOPINVOKE.HCamera_Show(swigCPtr);
  }

  public void Set() {
    HCSMVOPINVOKE.HCamera_Set(swigCPtr);
  }

}
