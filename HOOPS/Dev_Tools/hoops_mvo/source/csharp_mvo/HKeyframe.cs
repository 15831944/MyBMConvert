/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HKeyframe : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HKeyframe(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HKeyframe obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HKeyframe() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HKeyframe(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HKeyframe() : this(HCSMVOPINVOKE.new_HKeyframe(), true) {
  }

  public virtual HKeyframe Clone() {
    IntPtr cPtr = HCSMVOPINVOKE.HKeyframe_Clone(swigCPtr);
    HKeyframe ret = (cPtr == IntPtr.Zero) ? null : new HKeyframe(cPtr, false);
    return ret;
  }

  public virtual void Serialize(SWIGTYPE_p_HUtilityXMLTag xmlgen) {
    HCSMVOPINVOKE.HKeyframe_Serialize(swigCPtr, SWIGTYPE_p_HUtilityXMLTag.getCPtr(xmlgen));
  }

  public virtual void SetConstant(bool constant) {
    HCSMVOPINVOKE.HKeyframe_SetConstant(swigCPtr, constant);
  }

  public virtual void SetEaseInOut(bool easeinout) {
    HCSMVOPINVOKE.HKeyframe_SetEaseInOut(swigCPtr, easeinout);
  }

  public virtual void SetRelative(bool relative) {
    HCSMVOPINVOKE.HKeyframe_SetRelative(swigCPtr, relative);
  }

  public HANIKeyframeType m_type {
    set {
      HCSMVOPINVOKE.HKeyframe_m_type_set(swigCPtr, (int)value);
    } 
    get {
      HANIKeyframeType ret = (HANIKeyframeType)HCSMVOPINVOKE.HKeyframe_m_type_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bConstant {
    set {
      HCSMVOPINVOKE.HKeyframe_m_bConstant_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HKeyframe_m_bConstant_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bRelative {
    set {
      HCSMVOPINVOKE.HKeyframe_m_bRelative_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HKeyframe_m_bRelative_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_bEaseInOut {
    set {
      HCSMVOPINVOKE.HKeyframe_m_bEaseInOut_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HKeyframe_m_bEaseInOut_get(swigCPtr);
      return ret;
    } 
  }

}
