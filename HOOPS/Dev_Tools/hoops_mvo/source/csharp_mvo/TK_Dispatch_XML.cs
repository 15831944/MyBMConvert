/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class TK_Dispatch_XML : TK_XML {
  private HandleRef swigCPtr;

  public TK_Dispatch_XML(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.TK_Dispatch_XMLUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(TK_Dispatch_XML obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TK_Dispatch_XML() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_TK_Dispatch_XML(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public TK_Dispatch_XML(HBaseModel model) : this(HCSMVOPINVOKE.new_TK_Dispatch_XML(HBaseModel.getCPtr(model)), true) {
  }

  public override TK_Status Interpret(BStreamFileToolkit tk, ID_Key key, int variant) {
    TK_Status ret = (TK_Status)HCSMVOPINVOKE.TK_Dispatch_XML_Interpret(swigCPtr, BStreamFileToolkit.getCPtr(tk), key, variant);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Execute(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSMVOPINVOKE.TK_Dispatch_XML_Execute(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TK_Status Read(BStreamFileToolkit tk) {
    TK_Status ret = (TK_Status)HCSMVOPINVOKE.TK_Dispatch_XML_Read(swigCPtr, BStreamFileToolkit.getCPtr(tk));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddHandler(TK_XML handler) {
    HCSMVOPINVOKE.TK_Dispatch_XML_AddHandler(swigCPtr, TK_XML.getCPtr(handler));
  }

  public void StopIteration() {
    HCSMVOPINVOKE.TK_Dispatch_XML_StopIteration(swigCPtr);
  }

  public TK_Dispatch_XML MakeCopy() {
    IntPtr cPtr = HCSMVOPINVOKE.TK_Dispatch_XML_MakeCopy(swigCPtr);
    TK_Dispatch_XML ret = (cPtr == IntPtr.Zero) ? null : new TK_Dispatch_XML(cPtr, false);
    return ret;
  }

}
