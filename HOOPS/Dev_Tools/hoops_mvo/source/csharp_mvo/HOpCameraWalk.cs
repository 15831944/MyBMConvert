/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HOpCameraWalk : HBaseOperator {
  private HandleRef swigCPtr;

  public HOpCameraWalk(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HOpCameraWalkUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HOpCameraWalk obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HOpCameraWalk() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HOpCameraWalk(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HOpCameraWalk(HBaseView view, int DoRepeat, int DoCapture) : this(HCSMVOPINVOKE.new_HOpCameraWalk__SWIG_0(HBaseView.getCPtr(view), DoRepeat, DoCapture), true) {
    SwigDirectorConnect();
  }

  public HOpCameraWalk(HBaseView view, int DoRepeat) : this(HCSMVOPINVOKE.new_HOpCameraWalk__SWIG_1(HBaseView.getCPtr(view), DoRepeat), true) {
    SwigDirectorConnect();
  }

  public HOpCameraWalk(HBaseView view) : this(HCSMVOPINVOKE.new_HOpCameraWalk__SWIG_2(HBaseView.getCPtr(view)), true) {
    SwigDirectorConnect();
  }

  public override string GetName() {
    string ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_GetName(swigCPtr) : HCSMVOPINVOKE.HOpCameraWalk_GetNameSwigExplicitHOpCameraWalk(swigCPtr));
    return ret;
  }

  public override int OnLButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnLButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnLButtonDownSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnLButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnLButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnLButtonDownAndMoveSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnLButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnLButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnLButtonUpSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLightFollowsCamera(bool follow) {
    HCSMVOPINVOKE.HOpCameraWalk_SetLightFollowsCamera(swigCPtr, follow);
  }

  public bool GetLightFollowsCamera() {
    bool ret = HCSMVOPINVOKE.HOpCameraWalk_GetLightFollowsCamera(swigCPtr);
    return ret;
  }

  public override int OnMouseWheel(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnMouseWheel(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnMouseWheelSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnMButtonDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnMButtonDownSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonDownAndMove(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnMButtonDownAndMove(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnMButtonDownAndMoveSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int OnMButtonUp(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnMButtonUp(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnMButtonUpSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override HBaseOperator Clone() {
    IntPtr cPtr = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_Clone(swigCPtr) : HCSMVOPINVOKE.HOpCameraWalk_CloneSwigExplicitHOpCameraWalk(swigCPtr));
    HBaseOperator ret = (cPtr == IntPtr.Zero) ? null : new HBaseOperator(cPtr, false);
    return ret;
  }

  public void OnWalk(float requested_time, float actual_time) {
    HCSMVOPINVOKE.HOpCameraWalk_OnWalk(swigCPtr, requested_time, actual_time);
  }

  public void OnKeyWalk(float requested_time, float actual_time) {
    HCSMVOPINVOKE.HOpCameraWalk_OnKeyWalk(swigCPtr, requested_time, actual_time);
  }

  public void OnButtonWalk(string action, SWIGTYPE_p_HButtonState buttonstate) {
    HCSMVOPINVOKE.HOpCameraWalk_OnButtonWalk(swigCPtr, action, SWIGTYPE_p_HButtonState.getCPtr(buttonstate));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WalkTimerClbk(float request_time, float actual_time, IntPtr user_data) {
    bool ret = HCSMVOPINVOKE.HOpCameraWalk_WalkTimerClbk(request_time, actual_time, user_data);
    return ret;
  }

  public void ViewDeleted() {
    HCSMVOPINVOKE.HOpCameraWalk_ViewDeleted(swigCPtr);
  }

  public void SetKeyboardWalk(bool kw) {
    HCSMVOPINVOKE.HOpCameraWalk_SetKeyboardWalk(swigCPtr, kw);
  }

  public void SetCollision(bool c) {
    HCSMVOPINVOKE.HOpCameraWalk_SetCollision(swigCPtr, c);
  }

  public void SetSnapToFloor(bool s) {
    HCSMVOPINVOKE.HOpCameraWalk_SetSnapToFloor(swigCPtr, s);
  }

  public void SetAvatarHeight(float ah) {
    HCSMVOPINVOKE.HOpCameraWalk_SetAvatarHeight(swigCPtr, ah);
  }

  public void SetStepHeightUp(float shu) {
    HCSMVOPINVOKE.HOpCameraWalk_SetStepHeightUp(swigCPtr, shu);
  }

  public void SetStepHeightDown(float shd) {
    HCSMVOPINVOKE.HOpCameraWalk_SetStepHeightDown(swigCPtr, shd);
  }

  public float GetAvatarHeight() {
    float ret = HCSMVOPINVOKE.HOpCameraWalk_GetAvatarHeight(swigCPtr);
    return ret;
  }

  public void SetSpeed(float s) {
    HCSMVOPINVOKE.HOpCameraWalk_SetSpeed(swigCPtr, s);
  }

  public float GetSpeed() {
    float ret = HCSMVOPINVOKE.HOpCameraWalk_GetSpeed(swigCPtr);
    return ret;
  }

  public static float CalculateExtents(HBaseView view) {
    float ret = HCSMVOPINVOKE.HOpCameraWalk_CalculateExtents(HBaseView.getCPtr(view));
    return ret;
  }

  public override int OnKeyDown(HEventInfo hevent) {
    int ret = ((this.GetType() == typeof(HOpCameraWalk)) ? HCSMVOPINVOKE.HOpCameraWalk_OnKeyDown(swigCPtr, HEventInfo.getCPtr(hevent)) : HCSMVOPINVOKE.HOpCameraWalk_OnKeyDownSwigExplicitHOpCameraWalk(swigCPtr, HEventInfo.getCPtr(hevent)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ImageAction(SWIGTYPE_p_HImageRegion ii, IntPtr data, SWIGTYPE_p_HButtonState keyup) {
    int ret = HCSMVOPINVOKE.HOpCameraWalk_ImageAction(SWIGTYPE_p_HImageRegion.getCPtr(ii), data, SWIGTYPE_p_HButtonState.getCPtr(keyup));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ShowNavigationWindow(System.Text.StringBuilder image_dir) {
    HCSMVOPINVOKE.HOpCameraWalk_ShowNavigationWindow__SWIG_0(swigCPtr, image_dir);
  }

  public void ShowNavigationWindow() {
    HCSMVOPINVOKE.HOpCameraWalk_ShowNavigationWindow__SWIG_1(swigCPtr);
  }

  public void RemoveNavigationWindow() {
    HCSMVOPINVOKE.HOpCameraWalk_RemoveNavigationWindow(swigCPtr);
  }

  public void FitControlsToCorner() {
    HCSMVOPINVOKE.HOpCameraWalk_FitControlsToCorner(swigCPtr);
  }

  protected void SnapToGround() {
    HCSMVOPINVOKE.HOpCameraWalk_SnapToGround(swigCPtr);
  }

  protected void AdjustCameraCollision(HCamera oldcamera, bool noextrude) {
    HCSMVOPINVOKE.HOpCameraWalk_AdjustCameraCollision__SWIG_0(swigCPtr, HCamera.getCPtr(oldcamera), noextrude);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void AdjustCameraCollision(HCamera oldcamera) {
    HCSMVOPINVOKE.HOpCameraWalk_AdjustCameraCollision__SWIG_1(swigCPtr, HCamera.getCPtr(oldcamera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected void AdjustHeight(HCamera oldcamera) {
    HCSMVOPINVOKE.HOpCameraWalk_AdjustHeight(swigCPtr, HCamera.getCPtr(oldcamera));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  protected static bool signal_callback(int signal, IntPtr signal_data, IntPtr user_data) {
    bool ret = HCSMVOPINVOKE.HOpCameraWalk_signal_callback(signal, signal_data, user_data);
    return ret;
  }

  protected void ReadjustPosition() {
    HCSMVOPINVOKE.HOpCameraWalk_ReadjustPosition(swigCPtr);
  }

  protected void SetupControls(char forward, char backward, char strafe_left, char strafe_right, char up, char down) {
    HCSMVOPINVOKE.HOpCameraWalk_SetupControls(swigCPtr, forward, backward, strafe_left, strafe_right, up, down);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHOpCameraWalk_0(SwigDirectorCreateListenerManager);
    if (SwigDerivedClassHasMethod("OnLButtonDown", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHOpCameraWalk_1(SwigDirectorOnLButtonDown);
    if (SwigDerivedClassHasMethod("OnMouseMove", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHOpCameraWalk_2(SwigDirectorOnMouseMove);
    if (SwigDerivedClassHasMethod("OnLButtonUp", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHOpCameraWalk_3(SwigDirectorOnLButtonUp);
    if (SwigDerivedClassHasMethod("OnLButtonDblClk", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHOpCameraWalk_4(SwigDirectorOnLButtonDblClk);
    if (SwigDerivedClassHasMethod("OnMButtonDown", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHOpCameraWalk_5(SwigDirectorOnMButtonDown);
    if (SwigDerivedClassHasMethod("OnMButtonUp", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateHOpCameraWalk_6(SwigDirectorOnMButtonUp);
    if (SwigDerivedClassHasMethod("OnMButtonDblClk", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateHOpCameraWalk_7(SwigDirectorOnMButtonDblClk);
    if (SwigDerivedClassHasMethod("OnRButtonDown", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateHOpCameraWalk_8(SwigDirectorOnRButtonDown);
    if (SwigDerivedClassHasMethod("OnRButtonUp", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateHOpCameraWalk_9(SwigDirectorOnRButtonUp);
    if (SwigDerivedClassHasMethod("OnRButtonDblClk", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateHOpCameraWalk_10(SwigDirectorOnRButtonDblClk);
    if (SwigDerivedClassHasMethod("OnMouseWheel", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateHOpCameraWalk_11(SwigDirectorOnMouseWheel);
    if (SwigDerivedClassHasMethod("OnKeyDown", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateHOpCameraWalk_12(SwigDirectorOnKeyDown);
    if (SwigDerivedClassHasMethod("OnKeyUp", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateHOpCameraWalk_13(SwigDirectorOnKeyUp);
    if (SwigDerivedClassHasMethod("OnTouchesDown", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateHOpCameraWalk_14(SwigDirectorOnTouchesDown);
    if (SwigDerivedClassHasMethod("OnTouchesMove", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateHOpCameraWalk_15(SwigDirectorOnTouchesMove);
    if (SwigDerivedClassHasMethod("OnTouchesUp", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateHOpCameraWalk_16(SwigDirectorOnTouchesUp);
    if (SwigDerivedClassHasMethod("Clone", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateHOpCameraWalk_17(SwigDirectorClone);
    if (SwigDerivedClassHasMethod("OperatorStarted", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateHOpCameraWalk_18(SwigDirectorOperatorStarted);
    if (SwigDerivedClassHasMethod("GetName", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateHOpCameraWalk_19(SwigDirectorGetName);
    if (SwigDerivedClassHasMethod("OnLButtonDownAndMove", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateHOpCameraWalk_20(SwigDirectorOnLButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnMButtonDownAndMove", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateHOpCameraWalk_21(SwigDirectorOnMButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnRButtonDownAndMove", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateHOpCameraWalk_22(SwigDirectorOnRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnLRButtonDownAndMove", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateHOpCameraWalk_23(SwigDirectorOnLRButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnNoButtonDownAndMove", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateHOpCameraWalk_24(SwigDirectorOnNoButtonDownAndMove);
    if (SwigDerivedClassHasMethod("OnTimer", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateHOpCameraWalk_25(SwigDirectorOnTimer);
    HCSMVOPINVOKE.HOpCameraWalk_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HOpCameraWalk));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  private int SwigDirectorOnLButtonDown(IntPtr hevent) {
    return OnLButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseMove(IntPtr hevent) {
    return OnMouseMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonUp(IntPtr hevent) {
    return OnLButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLButtonDblClk(IntPtr hevent) {
    return OnLButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDown(IntPtr hevent) {
    return OnMButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonUp(IntPtr hevent) {
    return OnMButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDblClk(IntPtr hevent) {
    return OnMButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDown(IntPtr hevent) {
    return OnRButtonDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonUp(IntPtr hevent) {
    return OnRButtonUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDblClk(IntPtr hevent) {
    return OnRButtonDblClk(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMouseWheel(IntPtr hevent) {
    return OnMouseWheel(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnKeyDown(IntPtr hevent) {
    return OnKeyDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnKeyUp(IntPtr hevent) {
    return OnKeyUp(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesDown(IntPtr hevent) {
    return OnTouchesDown(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesMove(IntPtr hevent) {
    return OnTouchesMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTouchesUp(IntPtr hevent) {
    return OnTouchesUp(new HEventInfo(hevent, false));
  }

  private IntPtr SwigDirectorClone() {
    return HBaseOperator.getCPtr(Clone()).Handle;
  }

  private bool SwigDirectorOperatorStarted() {
    return OperatorStarted();
  }

  private string SwigDirectorGetName() {
    return GetName();
  }

  private int SwigDirectorOnLButtonDownAndMove(IntPtr hevent) {
    return OnLButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnMButtonDownAndMove(IntPtr hevent) {
    return OnMButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnRButtonDownAndMove(IntPtr hevent) {
    return OnRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnLRButtonDownAndMove(IntPtr hevent) {
    return OnLRButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnNoButtonDownAndMove(IntPtr hevent) {
    return OnNoButtonDownAndMove(new HEventInfo(hevent, false));
  }

  private int SwigDirectorOnTimer(IntPtr hevent) {
    return OnTimer(new HEventInfo(hevent, false));
  }

  public delegate IntPtr SwigDelegateHOpCameraWalk_0();
  public delegate int SwigDelegateHOpCameraWalk_1(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_2(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_3(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_4(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_5(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_6(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_7(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_8(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_9(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_10(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_11(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_12(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_13(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_14(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_15(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_16(IntPtr hevent);
  public delegate IntPtr SwigDelegateHOpCameraWalk_17();
  public delegate bool SwigDelegateHOpCameraWalk_18();
  public delegate string SwigDelegateHOpCameraWalk_19();
  public delegate int SwigDelegateHOpCameraWalk_20(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_21(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_22(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_23(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_24(IntPtr hevent);
  public delegate int SwigDelegateHOpCameraWalk_25(IntPtr hevent);

  private SwigDelegateHOpCameraWalk_0 swigDelegate0;
  private SwigDelegateHOpCameraWalk_1 swigDelegate1;
  private SwigDelegateHOpCameraWalk_2 swigDelegate2;
  private SwigDelegateHOpCameraWalk_3 swigDelegate3;
  private SwigDelegateHOpCameraWalk_4 swigDelegate4;
  private SwigDelegateHOpCameraWalk_5 swigDelegate5;
  private SwigDelegateHOpCameraWalk_6 swigDelegate6;
  private SwigDelegateHOpCameraWalk_7 swigDelegate7;
  private SwigDelegateHOpCameraWalk_8 swigDelegate8;
  private SwigDelegateHOpCameraWalk_9 swigDelegate9;
  private SwigDelegateHOpCameraWalk_10 swigDelegate10;
  private SwigDelegateHOpCameraWalk_11 swigDelegate11;
  private SwigDelegateHOpCameraWalk_12 swigDelegate12;
  private SwigDelegateHOpCameraWalk_13 swigDelegate13;
  private SwigDelegateHOpCameraWalk_14 swigDelegate14;
  private SwigDelegateHOpCameraWalk_15 swigDelegate15;
  private SwigDelegateHOpCameraWalk_16 swigDelegate16;
  private SwigDelegateHOpCameraWalk_17 swigDelegate17;
  private SwigDelegateHOpCameraWalk_18 swigDelegate18;
  private SwigDelegateHOpCameraWalk_19 swigDelegate19;
  private SwigDelegateHOpCameraWalk_20 swigDelegate20;
  private SwigDelegateHOpCameraWalk_21 swigDelegate21;
  private SwigDelegateHOpCameraWalk_22 swigDelegate22;
  private SwigDelegateHOpCameraWalk_23 swigDelegate23;
  private SwigDelegateHOpCameraWalk_24 swigDelegate24;
  private SwigDelegateHOpCameraWalk_25 swigDelegate25;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes17 = new Type[] {  };
  private static Type[] swigMethodTypes18 = new Type[] {  };
  private static Type[] swigMethodTypes19 = new Type[] {  };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes22 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes23 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(HEventInfo) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(HEventInfo) };
}
