/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HIOManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HIOManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HIOManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HIOManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HIOManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HIOManager() : this(HCSMVOPINVOKE.new_HIOManager(), true) {
  }

  public virtual HInputHandler RegisterInputHandler(string file_type, HInputHandler handler) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_RegisterInputHandler(swigCPtr, file_type, HInputHandler.getCPtr(handler));
    HInputHandler ret = (cPtr == IntPtr.Zero) ? null : new HInputHandler(cPtr, false);
    return ret;
  }

  public virtual HOutputHandler RegisterOutputHandler(string file_type, HOutputHandler handler) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_RegisterOutputHandler(swigCPtr, file_type, HOutputHandler.getCPtr(handler));
    HOutputHandler ret = (cPtr == IntPtr.Zero) ? null : new HOutputHandler(cPtr, false);
    return ret;
  }

  public virtual HIOConnector RegisterConnector(string file_type, SWIGTYPE_p_f_p_void__p_void Create, SWIGTYPE_p_f_p_void__void Free) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_RegisterConnector(swigCPtr, file_type, SWIGTYPE_p_f_p_void__p_void.getCPtr(Create), SWIGTYPE_p_f_p_void__void.getCPtr(Free));
    HIOConnector ret = (cPtr == IntPtr.Zero) ? null : new HIOConnector(cPtr, false);
    return ret;
  }

  public virtual HInputHandler GetInputHandler(string file_type) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_GetInputHandler__SWIG_0(swigCPtr, file_type);
    HInputHandler ret = (cPtr == IntPtr.Zero) ? null : new HInputHandler(cPtr, false);
    return ret;
  }

  public virtual HOutputHandler GetOutputHandler(string file_type) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_GetOutputHandler__SWIG_0(swigCPtr, file_type);
    HOutputHandler ret = (cPtr == IntPtr.Zero) ? null : new HOutputHandler(cPtr, false);
    return ret;
  }

  public virtual void RegisterHandlers() {
    HCSMVOPINVOKE.HIOManager_RegisterHandlers(swigCPtr);
  }

  public virtual string GetInputHandlerTypes() {
    string ret = HCSMVOPINVOKE.HIOManager_GetInputHandlerTypes(swigCPtr);
    return ret;
  }

  public virtual string GetOutputHandlerTypes() {
    string ret = HCSMVOPINVOKE.HIOManager_GetOutputHandlerTypes(swigCPtr);
    return ret;
  }

  public virtual HIOConnector CreateConnector(string file_type) {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_CreateConnector(swigCPtr, file_type);
    HIOConnector ret = (cPtr == IntPtr.Zero) ? null : new HIOConnector(cPtr, false);
    return ret;
  }

  public virtual void FreeConnector(HIOConnector old_connector) {
    HCSMVOPINVOKE.HIOManager_FreeConnector(swigCPtr, HIOConnector.getCPtr(old_connector));
  }

  public static HIOManager GetCurrentHIOManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HIOManager_GetCurrentHIOManager();
    HIOManager ret = (cPtr == IntPtr.Zero) ? null : new HIOManager(cPtr, false);
    return ret;
  }

  public static void GetFileOutputResultString(HFileIOResult result, System.Text.StringBuilder result_str) {
    HCSMVOPINVOKE.HIOManager_GetFileOutputResultString((int)result, result_str);
  }

}
