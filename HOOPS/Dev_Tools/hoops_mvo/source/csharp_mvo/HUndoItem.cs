/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUndoItem : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUndoItem(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUndoItem obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUndoItem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUndoItem(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HUndoItem() : this(HCSMVOPINVOKE.new_HUndoItem(), true) {
    SwigDirectorConnect();
  }

  public virtual void Undo(bool setupOnly) {
    if (this.GetType() == typeof(HUndoItem)) HCSMVOPINVOKE.HUndoItem_Undo__SWIG_0(swigCPtr, setupOnly); else HCSMVOPINVOKE.HUndoItem_UndoSwigExplicitHUndoItem__SWIG_0(swigCPtr, setupOnly);
  }

  public virtual void Undo() {
    if (this.GetType() == typeof(HUndoItem)) HCSMVOPINVOKE.HUndoItem_Undo__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HUndoItem_UndoSwigExplicitHUndoItem__SWIG_1(swigCPtr);
  }

  public virtual void Redo(bool setupOnly) {
    if (this.GetType() == typeof(HUndoItem)) HCSMVOPINVOKE.HUndoItem_Redo__SWIG_0(swigCPtr, setupOnly); else HCSMVOPINVOKE.HUndoItem_RedoSwigExplicitHUndoItem__SWIG_0(swigCPtr, setupOnly);
  }

  public virtual void Redo() {
    if (this.GetType() == typeof(HUndoItem)) HCSMVOPINVOKE.HUndoItem_Redo__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HUndoItem_RedoSwigExplicitHUndoItem__SWIG_1(swigCPtr);
  }

  public virtual string GetName() {
    string ret = ((this.GetType() == typeof(HUndoItem)) ? HCSMVOPINVOKE.HUndoItem_GetName(swigCPtr) : HCSMVOPINVOKE.HUndoItem_GetNameSwigExplicitHUndoItem(swigCPtr));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Undo", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHUndoItem_0(SwigDirectorUndo__SWIG_0);
    if (SwigDerivedClassHasMethod("Undo", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHUndoItem_1(SwigDirectorUndo__SWIG_1);
    if (SwigDerivedClassHasMethod("Redo", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHUndoItem_2(SwigDirectorRedo__SWIG_0);
    if (SwigDerivedClassHasMethod("Redo", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHUndoItem_3(SwigDirectorRedo__SWIG_1);
    if (SwigDerivedClassHasMethod("GetName", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHUndoItem_4(SwigDirectorGetName);
    HCSMVOPINVOKE.HUndoItem_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HUndoItem));
    return hasDerivedMethod;
  }

  private void SwigDirectorUndo__SWIG_0(bool setupOnly) {
    Undo(setupOnly);
  }

  private void SwigDirectorUndo__SWIG_1() {
    Undo();
  }

  private void SwigDirectorRedo__SWIG_0(bool setupOnly) {
    Redo(setupOnly);
  }

  private void SwigDirectorRedo__SWIG_1() {
    Redo();
  }

  private string SwigDirectorGetName() {
    return GetName();
  }

  public delegate void SwigDelegateHUndoItem_0(bool setupOnly);
  public delegate void SwigDelegateHUndoItem_1();
  public delegate void SwigDelegateHUndoItem_2(bool setupOnly);
  public delegate void SwigDelegateHUndoItem_3();
  public delegate string SwigDelegateHUndoItem_4();

  private SwigDelegateHUndoItem_0 swigDelegate0;
  private SwigDelegateHUndoItem_1 swigDelegate1;
  private SwigDelegateHUndoItem_2 swigDelegate2;
  private SwigDelegateHUndoItem_3 swigDelegate3;
  private SwigDelegateHUndoItem_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes3 = new Type[] {  };
  private static Type[] swigMethodTypes4 = new Type[] {  };
}
