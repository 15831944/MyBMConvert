/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class BREP_Topology : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public BREP_Topology(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(BREP_Topology obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~BREP_Topology() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_BREP_Topology(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_vhash_s m_FaceHash {
    set {
      HCSMVOPINVOKE.BREP_Topology_m_FaceHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_m_FaceHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_vhash_s m_EdgeHash {
    set {
      HCSMVOPINVOKE.BREP_Topology_m_EdgeHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_m_EdgeHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_vhash_s m_VertexHash {
    set {
      HCSMVOPINVOKE.BREP_Topology_m_VertexHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_m_VertexHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  public BREP_Face m_CurrentFace {
    set {
      HCSMVOPINVOKE.BREP_Topology_m_CurrentFace_set(swigCPtr, BREP_Face.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_m_CurrentFace_get(swigCPtr);
      BREP_Face ret = (cPtr == IntPtr.Zero) ? null : new BREP_Face(cPtr, false);
      return ret;
    } 
  }

  public BREP_Topology() : this(HCSMVOPINVOKE.new_BREP_Topology(), true) {
  }

  public BREP_Face AddFace(MVO_POINTER_SIZED_INT facekey) {
    IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_AddFace(swigCPtr, facekey);
    BREP_Face ret = (cPtr == IntPtr.Zero) ? null : new BREP_Face(cPtr, false);
    return ret;
  }

  public BREP_Face GetFace(MVO_POINTER_SIZED_INT facekey) {
    IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_GetFace(swigCPtr, facekey);
    BREP_Face ret = (cPtr == IntPtr.Zero) ? null : new BREP_Face(cPtr, false);
    return ret;
  }

  public BREP_Edge FindEdge(IntPtr edgeid) {
    IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_FindEdge(swigCPtr, edgeid);
    BREP_Edge ret = (cPtr == IntPtr.Zero) ? null : new BREP_Edge(cPtr, false);
    return ret;
  }

  public BREP_Edge AddEdge(IntPtr edgeid, MVO_POINTER_SIZED_INT edgekey) {
    IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_AddEdge(swigCPtr, edgeid, edgekey);
    BREP_Edge ret = (cPtr == IntPtr.Zero) ? null : new BREP_Edge(cPtr, false);
    return ret;
  }

  public MVO_POINTER_SIZED_INT AddVertex(IntPtr vertexid, HPoint vpos) {return HCSMVOPINVOKE.BREP_Topology_AddVertex(swigCPtr, vertexid, HPoint.getCPtr(vpos));}

  public MVO_POINTER_SIZED_INT FindVertex(IntPtr vertexid) {return HCSMVOPINVOKE.BREP_Topology_FindVertex(swigCPtr, vertexid);}

  public BREP_Face GetCurrentFace() {
    IntPtr cPtr = HCSMVOPINVOKE.BREP_Topology_GetCurrentFace(swigCPtr);
    BREP_Face ret = (cPtr == IntPtr.Zero) ? null : new BREP_Face(cPtr, false);
    return ret;
  }

}
