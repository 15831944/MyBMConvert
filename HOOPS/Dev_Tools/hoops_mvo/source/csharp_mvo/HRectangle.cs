/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HRectangle : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HRectangle(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HRectangle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HRectangle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HRectangle(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HRectangle(float Left, float Bottom, float Right, float Top, float Z) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_0(Left, Bottom, Right, Top, Z), true) {
  }

  public HRectangle(float Left, float Bottom, float Right, float Top) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_1(Left, Bottom, Right, Top), true) {
  }

  public HRectangle(float Left, float Bottom, float Right) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_2(Left, Bottom, Right), true) {
  }

  public HRectangle(float Left, float Bottom) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_3(Left, Bottom), true) {
  }

  public HRectangle(float Left) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_4(Left), true) {
  }

  public HRectangle() : this(HCSMVOPINVOKE.new_HRectangle__SWIG_5(), true) {
  }

  public HRectangle(HRectangle rect) : this(HCSMVOPINVOKE.new_HRectangle__SWIG_6(HRectangle.getCPtr(rect)), true) {
  }

  public float GetLeft() {
    float ret = HCSMVOPINVOKE.HRectangle_GetLeft(swigCPtr);
    return ret;
  }

  public float GetRight() {
    float ret = HCSMVOPINVOKE.HRectangle_GetRight(swigCPtr);
    return ret;
  }

  public float GetTop() {
    float ret = HCSMVOPINVOKE.HRectangle_GetTop(swigCPtr);
    return ret;
  }

  public float GetBottom() {
    float ret = HCSMVOPINVOKE.HRectangle_GetBottom(swigCPtr);
    return ret;
  }

  public float GetZ() {
    float ret = HCSMVOPINVOKE.HRectangle_GetZ(swigCPtr);
    return ret;
  }

  public void SetCoordinates(float Left, float Bottom, float Right, float Top, float Z) {
    HCSMVOPINVOKE.HRectangle_SetCoordinates__SWIG_0(swigCPtr, Left, Bottom, Right, Top, Z);
  }

  public void SetCoordinates(float Left, float Bottom, float Right, float Top) {
    HCSMVOPINVOKE.HRectangle_SetCoordinates__SWIG_1(swigCPtr, Left, Bottom, Right, Top);
  }

  public bool IsRectInside(HRectangle rect, HRectangle area) {
    bool ret = HCSMVOPINVOKE.HRectangle_IsRectInside(swigCPtr, HRectangle.getCPtr(rect), HRectangle.getCPtr(area));
    return ret;
  }

  public bool IsRectAbove(HRectangle rect, float y) {
    bool ret = HCSMVOPINVOKE.HRectangle_IsRectAbove(swigCPtr, HRectangle.getCPtr(rect), y);
    return ret;
  }

  public bool IsRectBelow(HRectangle rect, float y) {
    bool ret = HCSMVOPINVOKE.HRectangle_IsRectBelow(swigCPtr, HRectangle.getCPtr(rect), y);
    return ret;
  }

  public bool IsRectRight(HRectangle rect, float x) {
    bool ret = HCSMVOPINVOKE.HRectangle_IsRectRight(swigCPtr, HRectangle.getCPtr(rect), x);
    return ret;
  }

  public bool IsRectLeft(HRectangle rect, float x) {
    bool ret = HCSMVOPINVOKE.HRectangle_IsRectLeft(swigCPtr, HRectangle.getCPtr(rect), x);
    return ret;
  }

  public bool RectOverlap(HRectangle rect1, HRectangle rect2) {
    bool ret = HCSMVOPINVOKE.HRectangle_RectOverlap(swigCPtr, HRectangle.getCPtr(rect1), HRectangle.getCPtr(rect2));
    return ret;
  }

}
