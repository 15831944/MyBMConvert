/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HObjectManipulationListener : HEventListener {
  private HandleRef swigCPtr;

  public HObjectManipulationListener(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HObjectManipulationListenerUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HObjectManipulationListener obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HObjectManipulationListener() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HObjectManipulationListener(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static HEventListenerType GetEventType() {
    HEventListenerType ret = (HEventListenerType)HCSMVOPINVOKE.HObjectManipulationListener_GetEventType();
    return ret;
  }

  public override HEventListener CreateListenerManager() {
    IntPtr cPtr = ((this.GetType() == typeof(HObjectManipulationListener)) ? HCSMVOPINVOKE.HObjectManipulationListener_CreateListenerManager(swigCPtr) : HCSMVOPINVOKE.HObjectManipulationListener_CreateListenerManagerSwigExplicitHObjectManipulationListener(swigCPtr));
    HEventListener ret = (cPtr == IntPtr.Zero) ? null : new HEventListener(cPtr, false);
    return ret;
  }

  public virtual int SetupHandlesEvent(HBaseView view, MVO_POINTER_SIZED_INT key, bool complex) {
    int ret = ((this.GetType() == typeof(HObjectManipulationListener)) ? HCSMVOPINVOKE.HObjectManipulationListener_SetupHandlesEvent(swigCPtr, HBaseView.getCPtr(view), key, complex) : HCSMVOPINVOKE.HObjectManipulationListener_SetupHandlesEventSwigExplicitHObjectManipulationListener(swigCPtr, HBaseView.getCPtr(view), key, complex));
    return ret;
  }

  public virtual int ObjectBeforeMoveEvent(HBaseView view, MVO_POINTER_SIZED_INT key, HPoint p) {
    int ret = ((this.GetType() == typeof(HObjectManipulationListener)) ? HCSMVOPINVOKE.HObjectManipulationListener_ObjectBeforeMoveEvent(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)) : HCSMVOPINVOKE.HObjectManipulationListener_ObjectBeforeMoveEventSwigExplicitHObjectManipulationListener(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)));
    return ret;
  }

  public virtual int ObjectMovedEvent(HBaseView view, MVO_POINTER_SIZED_INT key, HPoint p) {
    int ret = ((this.GetType() == typeof(HObjectManipulationListener)) ? HCSMVOPINVOKE.HObjectManipulationListener_ObjectMovedEvent(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)) : HCSMVOPINVOKE.HObjectManipulationListener_ObjectMovedEventSwigExplicitHObjectManipulationListener(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)));
    return ret;
  }

  public virtual int ObjectScaledEvent(HBaseView view, MVO_POINTER_SIZED_INT key, HPoint p) {
    int ret = ((this.GetType() == typeof(HObjectManipulationListener)) ? HCSMVOPINVOKE.HObjectManipulationListener_ObjectScaledEvent(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)) : HCSMVOPINVOKE.HObjectManipulationListener_ObjectScaledEventSwigExplicitHObjectManipulationListener(swigCPtr, HBaseView.getCPtr(view), key, HPoint.getCPtr(p)));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public HObjectManipulationListener() : this(HCSMVOPINVOKE.new_HObjectManipulationListener(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHObjectManipulationListener_0(SwigDirectorCreateListenerManager);
    if (SwigDerivedClassHasMethod("SetupHandlesEvent", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHObjectManipulationListener_1(SwigDirectorSetupHandlesEvent);
    if (SwigDerivedClassHasMethod("ObjectBeforeMoveEvent", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHObjectManipulationListener_2(SwigDirectorObjectBeforeMoveEvent);
    if (SwigDerivedClassHasMethod("ObjectMovedEvent", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHObjectManipulationListener_3(SwigDirectorObjectMovedEvent);
    if (SwigDerivedClassHasMethod("ObjectScaledEvent", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHObjectManipulationListener_4(SwigDirectorObjectScaledEvent);
    HCSMVOPINVOKE.HObjectManipulationListener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HObjectManipulationListener));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  private int SwigDirectorSetupHandlesEvent(IntPtr view, MVO_POINTER_SIZED_INT key, bool complex) {
    return SetupHandlesEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, complex);
  }

  private int SwigDirectorObjectBeforeMoveEvent(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p) {
    return ObjectBeforeMoveEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, (p == IntPtr.Zero) ? null : new HPoint(p, false));
  }

  private int SwigDirectorObjectMovedEvent(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p) {
    return ObjectMovedEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, (p == IntPtr.Zero) ? null : new HPoint(p, false));
  }

  private int SwigDirectorObjectScaledEvent(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p) {
    return ObjectScaledEvent((view == IntPtr.Zero) ? null : new HBaseView(view, false), key, new HPoint(p, false));
  }

  public delegate IntPtr SwigDelegateHObjectManipulationListener_0();
  public delegate int SwigDelegateHObjectManipulationListener_1(IntPtr view, MVO_POINTER_SIZED_INT key, bool complex);
  public delegate int SwigDelegateHObjectManipulationListener_2(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p);
  public delegate int SwigDelegateHObjectManipulationListener_3(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p);
  public delegate int SwigDelegateHObjectManipulationListener_4(IntPtr view, MVO_POINTER_SIZED_INT key, IntPtr p);

  private SwigDelegateHObjectManipulationListener_0 swigDelegate0;
  private SwigDelegateHObjectManipulationListener_1 swigDelegate1;
  private SwigDelegateHObjectManipulationListener_2 swigDelegate2;
  private SwigDelegateHObjectManipulationListener_3 swigDelegate3;
  private SwigDelegateHObjectManipulationListener_4 swigDelegate4;

  private static Type[] swigMethodTypes0 = new Type[] {  };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(HPoint) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(HPoint) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(HBaseView), typeof(MVO_POINTER_SIZED_INT), typeof(HPoint) };
}
