/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HShellObject : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HShellObject(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HShellObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HShellObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HShellObject(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HShellObject(MVO_POINTER_SIZED_INT kShellKey) : this(HCSMVOPINVOKE.new_HShellObject__SWIG_0(kShellKey), true) {
  }

  public HShellObject(HShellObject oShellObj) : this(HCSMVOPINVOKE.new_HShellObject__SWIG_1(HShellObject.getCPtr(oShellObj)), true) {
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HShellRegion GetRegion(int index) {
    HShellRegion ret = new HShellRegion(HCSMVOPINVOKE.HShellObject_GetRegion(swigCPtr, index), true);
    return ret;
  }

  public int GetFaceCount() {
    int ret = HCSMVOPINVOKE.HShellObject_GetFaceCount(swigCPtr);
    return ret;
  }

  public int GetFaceFlistIndex(int index) {
    int ret = HCSMVOPINVOKE.HShellObject_GetFaceFlistIndex(swigCPtr, index);
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetKey() {return HCSMVOPINVOKE.HShellObject_GetKey(swigCPtr);}

  public int GetFlistLen() {
    int ret = HCSMVOPINVOKE.HShellObject_GetFlistLen(swigCPtr);
    return ret;
  }

  public IntPtr GetFlist() {return HCSMVOPINVOKE.HShellObject_GetFlist__SWIG_0(swigCPtr);}

  public void GetFlist(int[] flist) {
    HCSMVOPINVOKE.HShellObject_GetFlist__SWIG_1(swigCPtr, flist);
  }

}
