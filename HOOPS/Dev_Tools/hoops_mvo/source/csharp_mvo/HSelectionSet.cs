/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HSelectionSet : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HSelectionSet(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HSelectionSet obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HSelectionSet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HSelectionSet(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  protected HBaseView m_pView {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_pView_set(swigCPtr, HBaseView.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_pView_get(swigCPtr);
      HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
      return ret;
    } 
  }

  protected SWIGTYPE_p_HSelList m_pSelItemsList {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_pSelItemsList_set(swigCPtr, SWIGTYPE_p_HSelList.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_pSelItemsList_get(swigCPtr);
      SWIGTYPE_p_HSelList ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HSelList(cPtr, false);
      return ret;
    } 
  }

  protected SWIGTYPE_p_vhash_s m_pHighlightSegsHash {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_pHighlightSegsHash_set(swigCPtr, SWIGTYPE_p_vhash_s.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_pHighlightSegsHash_get(swigCPtr);
      SWIGTYPE_p_vhash_s ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vhash_s(cPtr, false);
      return ret;
    } 
  }

  protected MVO_POINTER_SIZED_INT m_SelectionSegment {
	set { HCSMVOPINVOKE.HSelectionSet_m_SelectionSegment_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HSelectionSet_m_SelectionSegment_get(swigCPtr); } 
  }

  protected MVO_POINTER_SIZED_INT m_TransparencyStyle {
	set { HCSMVOPINVOKE.HSelectionSet_m_TransparencyStyle_set(swigCPtr, value); } 
	get { return HCSMVOPINVOKE.HSelectionSet_m_TransparencyStyle_get(swigCPtr); } 
  }

  protected HPixelRGBA m_selectedFaceColor {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_selectedFaceColor_set(swigCPtr, HPixelRGBA.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_selectedFaceColor_get(swigCPtr);
      HPixelRGBA ret = (cPtr == IntPtr.Zero) ? null : new HPixelRGBA(cPtr, false);
      return ret;
    } 
  }

  protected HPixelRGBA m_selectedEdgeColor {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_selectedEdgeColor_set(swigCPtr, HPixelRGBA.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_selectedEdgeColor_get(swigCPtr);
      HPixelRGBA ret = (cPtr == IntPtr.Zero) ? null : new HPixelRGBA(cPtr, false);
      return ret;
    } 
  }

  protected HPixelRGBA m_selectedCutEdgeColor {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_selectedCutEdgeColor_set(swigCPtr, HPixelRGBA.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_selectedCutEdgeColor_get(swigCPtr);
      HPixelRGBA ret = (cPtr == IntPtr.Zero) ? null : new HPixelRGBA(cPtr, false);
      return ret;
    } 
  }

  protected HPixelRGBA m_selectedCutFaceColor {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_selectedCutFaceColor_set(swigCPtr, HPixelRGBA.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_selectedCutFaceColor_get(swigCPtr);
      HPixelRGBA ret = (cPtr == IntPtr.Zero) ? null : new HPixelRGBA(cPtr, false);
      return ret;
    } 
  }

  protected HPixelRGBA m_selectedMarkerColor {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_selectedMarkerColor_set(swigCPtr, HPixelRGBA.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_m_selectedMarkerColor_get(swigCPtr);
      HPixelRGBA ret = (cPtr == IntPtr.Zero) ? null : new HPixelRGBA(cPtr, false);
      return ret;
    } 
  }

  protected float m_fselectedEdgeWeight {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_fselectedEdgeWeight_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HSelectionSet_m_fselectedEdgeWeight_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_fselectedMarkerSize {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_fselectedMarkerSize_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HSelectionSet_m_fselectedMarkerSize_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bForceGrayScale {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bForceGrayScale_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bForceGrayScale_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bForceInvisible {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bForceInvisible_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bForceInvisible_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bAllowDisplacement {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bAllowDisplacement_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bAllowDisplacement_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bHighlightRegionEdges {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionEdges_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionEdges_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bHighlightAnnotations {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bHighlightAnnotations_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bHighlightAnnotations_get(swigCPtr);
      return ret;
    } 
  }

  protected HRegionEdgeHighlightMode m_bHighlightRegionEdgesAutoVisibility {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_set(swigCPtr, (int)value);
    } 
    get {
      HRegionEdgeHighlightMode ret = (HRegionEdgeHighlightMode)HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionEdgesAutoVisibility_get(swigCPtr);
      return ret;
    } 
  }

  protected HRegionFaceHighlightMode m_bHighlightRegionFacesAutoVisibility {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionFacesAutoVisibility_set(swigCPtr, (int)value);
    } 
    get {
      HRegionFaceHighlightMode ret = (HRegionFaceHighlightMode)HCSMVOPINVOKE.HSelectionSet_m_bHighlightRegionFacesAutoVisibility_get(swigCPtr);
      return ret;
    } 
  }

  protected HSelectionHighlightMode m_HighlightMode {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_HighlightMode_set(swigCPtr, (int)value);
    } 
    get {
      HSelectionHighlightMode ret = (HSelectionHighlightMode)HCSMVOPINVOKE.HSelectionSet_m_HighlightMode_get(swigCPtr);
      return ret;
    } 
  }

  protected float m_fTransmission {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_fTransmission_set(swigCPtr, value);
    } 
    get {
      float ret = HCSMVOPINVOKE.HSelectionSet_m_fTransmission_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bSortSelectionList {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bSortSelectionList_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bSortSelectionList_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bNotify {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bNotify_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bNotify_get(swigCPtr);
      return ret;
    } 
  }

  protected bool m_bUseDefinedHighlight {
    set {
      HCSMVOPINVOKE.HSelectionSet_m_bUseDefinedHighlight_set(swigCPtr, value);
    } 
    get {
      bool ret = HCSMVOPINVOKE.HSelectionSet_m_bUseDefinedHighlight_get(swigCPtr);
      return ret;
    } 
  }

  protected virtual void UpdateTransparency(bool force_flush) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_UpdateTransparency__SWIG_0(swigCPtr, force_flush); else HCSMVOPINVOKE.HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_0(swigCPtr, force_flush);
  }

  protected virtual void UpdateTransparency() {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_UpdateTransparency__SWIG_1(swigCPtr); else HCSMVOPINVOKE.HSelectionSet_UpdateTransparencySwigExplicitHSelectionSet__SWIG_1(swigCPtr);
  }

  public HSelectionSet(HBaseView view, bool bReferenceSelection) : this(HCSMVOPINVOKE.new_HSelectionSet__SWIG_0(HBaseView.getCPtr(view), bReferenceSelection), true) {
    SwigDirectorConnect();
  }

  public HSelectionSet(HBaseView view) : this(HCSMVOPINVOKE.new_HSelectionSet__SWIG_1(HBaseView.getCPtr(view)), true) {
    SwigDirectorConnect();
  }

  public virtual void Init() {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Init(swigCPtr); else HCSMVOPINVOKE.HSelectionSet_InitSwigExplicitHSelectionSet(swigCPtr);
  }

  public virtual void Select(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_0(swigCPtr, key, num_include_keys, include_keys, emit_message); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, num_include_keys, include_keys, emit_message);
  }

  public virtual void Select(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_1(swigCPtr, key, num_include_keys, include_keys); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys);
  }

  public virtual void Select(HSelectionItem new_sel, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_2(swigCPtr, HSelectionItem.getCPtr(new_sel), emit_message); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_2(swigCPtr, HSelectionItem.getCPtr(new_sel), emit_message);
  }

  public virtual void Select(HSelectionItem new_sel) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_3(swigCPtr, HSelectionItem.getCPtr(new_sel)); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_3(swigCPtr, HSelectionItem.getCPtr(new_sel));
  }

  public virtual void SelectRegion(HShellObject oShell, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectRegion(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region, emit_message); else HCSMVOPINVOKE.HSelectionSet_SelectRegionSwigExplicitHSelectionSet(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region, emit_message);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectSubentity__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message); else HCSMVOPINVOKE.HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }

  public virtual void SelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectSubentity__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2); else HCSMVOPINVOKE.HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }

  public virtual void SelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectSubentity__SWIG_2(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1); else HCSMVOPINVOKE.HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_2(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1);
  }

  public virtual void SelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectSubentity__SWIG_3(swigCPtr, key, num_include_keys, include_keys, count, faces); else HCSMVOPINVOKE.HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_3(swigCPtr, key, num_include_keys, include_keys, count, faces);
  }

  public virtual void SelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SelectSubentity__SWIG_4(swigCPtr, key, num_include_keys, include_keys, count); else HCSMVOPINVOKE.HSelectionSet_SelectSubentitySwigExplicitHSelectionSet__SWIG_4(swigCPtr, key, num_include_keys, include_keys, count);
  }

  public virtual void Select(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_4(swigCPtr, key, segpath, include_key, includer_key, emit_message); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_4(swigCPtr, key, segpath, include_key, includer_key, emit_message);
  }

  public virtual void Select(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Select__SWIG_5(swigCPtr, key, segpath, include_key, includer_key); else HCSMVOPINVOKE.HSelectionSet_SelectSwigExplicitHSelectionSet__SWIG_5(swigCPtr, key, segpath, include_key, includer_key);
  }

  public virtual void DeSelect(MVO_POINTER_SIZED_INT key, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_0(swigCPtr, key, emit_message); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, emit_message);
  }

  public virtual void DeSelect(MVO_POINTER_SIZED_INT key) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_1(swigCPtr, key); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_1(swigCPtr, key);
  }

  public virtual void DeSelect(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_2(swigCPtr, key, num_include_keys, include_keys, emit_message); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_2(swigCPtr, key, num_include_keys, include_keys, emit_message);
  }

  public virtual void DeSelect(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_3(swigCPtr, key, num_include_keys, include_keys); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_3(swigCPtr, key, num_include_keys, include_keys);
  }

  public virtual void DeSelect(HSelectionItem remove_sel, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_4(swigCPtr, HSelectionItem.getCPtr(remove_sel), emit_message); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_4(swigCPtr, HSelectionItem.getCPtr(remove_sel), emit_message);
  }

  public virtual void DeSelect(HSelectionItem remove_sel) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelect__SWIG_5(swigCPtr, HSelectionItem.getCPtr(remove_sel)); else HCSMVOPINVOKE.HSelectionSet_DeSelectSwigExplicitHSelectionSet__SWIG_5(swigCPtr, HSelectionItem.getCPtr(remove_sel));
  }

  public virtual void DeSelectRegion(HShellObject oShell, int region, bool emit_messag) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectRegion__SWIG_0(swigCPtr, HShellObject.getCPtr(oShell), region, emit_messag); else HCSMVOPINVOKE.HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_0(swigCPtr, HShellObject.getCPtr(oShell), region, emit_messag);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DeSelectRegion(HShellObject oShell, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectRegion__SWIG_1(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region, emit_message); else HCSMVOPINVOKE.HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_1(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region, emit_message);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DeSelectRegion(HShellObject oShell, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int region) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectRegion__SWIG_2(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region); else HCSMVOPINVOKE.HSelectionSet_DeSelectRegionSwigExplicitHSelectionSet__SWIG_2(swigCPtr, HShellObject.getCPtr(oShell), num_include_keys, include_keys, region);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void DeSelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, bool emit_message) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectSubentity__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message); else HCSMVOPINVOKE.HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }

  public virtual void DeSelectSubentity(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectSubentity__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2); else HCSMVOPINVOKE.HSelectionSet_DeSelectSubentitySwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }

  public virtual bool SelectSubentityOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2, bool emit_message) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOC__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message) : HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message));
    return ret;
  }

  public virtual bool SelectSubentityOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1, int[] vertex2) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOC__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2) : HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1, vertex2));
    return ret;
  }

  public virtual bool SelectSubentityOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces, int[] vertex1) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOC__SWIG_2(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1) : HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_2(swigCPtr, key, num_include_keys, include_keys, count, faces, vertex1));
    return ret;
  }

  public virtual bool SelectSubentityOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count, int[] faces) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOC__SWIG_3(swigCPtr, key, num_include_keys, include_keys, count, faces) : HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_3(swigCPtr, key, num_include_keys, include_keys, count, faces));
    return ret;
  }

  public virtual bool SelectSubentityOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int count) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOC__SWIG_4(swigCPtr, key, num_include_keys, include_keys, count) : HCSMVOPINVOKE.HSelectionSet_SelectSubentityOOCSwigExplicitHSelectionSet__SWIG_4(swigCPtr, key, num_include_keys, include_keys, count));
    return ret;
  }

  public virtual bool DeSelectOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_DeSelectOOC__SWIG_0(swigCPtr, key, num_include_keys, include_keys, emit_message) : HCSMVOPINVOKE.HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_0(swigCPtr, key, num_include_keys, include_keys, emit_message));
    return ret;
  }

  public virtual bool DeSelectOOC(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_DeSelectOOC__SWIG_1(swigCPtr, key, num_include_keys, include_keys) : HCSMVOPINVOKE.HSelectionSet_DeSelectOOCSwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys));
    return ret;
  }

  public virtual bool HighlightRegionEdges() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdges__SWIG_0(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_0(swigCPtr));
    return ret;
  }

  public virtual void HighlightRegionEdges(bool yesno) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdges__SWIG_1(swigCPtr, yesno); else HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesSwigExplicitHSelectionSet__SWIG_1(swigCPtr, yesno);
  }

  public virtual bool HighlightAnnotations() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_HighlightAnnotations__SWIG_0(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_0(swigCPtr));
    return ret;
  }

  public virtual void HighlightAnnotations(bool yesno) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_HighlightAnnotations__SWIG_1(swigCPtr, yesno); else HCSMVOPINVOKE.HSelectionSet_HighlightAnnotationsSwigExplicitHSelectionSet__SWIG_1(swigCPtr, yesno);
  }

  public virtual HRegionEdgeHighlightMode HighlightRegionEdgesAutoVisibility() {
    HRegionEdgeHighlightMode ret = (HRegionEdgeHighlightMode)((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_0(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(swigCPtr));
    return ret;
  }

  public virtual void HighlightRegionEdgesAutoVisibility(bool yesno) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_1(swigCPtr, yesno); else HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(swigCPtr, yesno);
  }

  public virtual void HighlightRegionEdgesAutoVisibility(HRegionEdgeHighlightMode edge_state) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibility__SWIG_2(swigCPtr, (int)edge_state); else HCSMVOPINVOKE.HSelectionSet_HighlightRegionEdgesAutoVisibilitySwigExplicitHSelectionSet__SWIG_2(swigCPtr, (int)edge_state);
  }

  public virtual void HighlightRegionFacesAutoVisibility(HRegionFaceHighlightMode face_state) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_0(swigCPtr, (int)face_state); else HCSMVOPINVOKE.HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_0(swigCPtr, (int)face_state);
  }

  public virtual HRegionFaceHighlightMode HighlightRegionFacesAutoVisibility() {
    HRegionFaceHighlightMode ret = (HRegionFaceHighlightMode)((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_HighlightRegionFacesAutoVisibility__SWIG_1(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_HighlightRegionFacesAutoVisibilitySwigExplicitHSelectionSet__SWIG_1(swigCPtr));
    return ret;
  }

  public virtual void DeSelectAll() {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_DeSelectAll(swigCPtr); else HCSMVOPINVOKE.HSelectionSet_DeSelectAllSwigExplicitHSelectionSet(swigCPtr);
  }

  public virtual bool IsSelected(MVO_POINTER_SIZED_INT key) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_IsSelected__SWIG_0(swigCPtr, key) : HCSMVOPINVOKE.HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_0(swigCPtr, key));
    return ret;
  }

  public virtual bool IsSelected(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_IsSelected__SWIG_1(swigCPtr, key, num_include_keys, include_keys) : HCSMVOPINVOKE.HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_1(swigCPtr, key, num_include_keys, include_keys));
    return ret;
  }

  public virtual bool IsSelected(HSelectionItem item) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_IsSelected__SWIG_2(swigCPtr, HSelectionItem.getCPtr(item)) : HCSMVOPINVOKE.HSelectionSet_IsSelectedSwigExplicitHSelectionSet__SWIG_2(swigCPtr, HSelectionItem.getCPtr(item)));
    return ret;
  }

  public virtual bool IsRegionSelected(MVO_POINTER_SIZED_INT key, int num_include_keys, MVO_POINTER_SIZED_INT[] include_keys, int region) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_IsRegionSelected(swigCPtr, key, num_include_keys, include_keys, region) : HCSMVOPINVOKE.HSelectionSet_IsRegionSelectedSwigExplicitHSelectionSet(swigCPtr, key, num_include_keys, include_keys, region));
    return ret;
  }

  public virtual bool IsHighlightSegment(MVO_POINTER_SIZED_INT segment_key) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_IsHighlightSegment(swigCPtr, segment_key) : HCSMVOPINVOKE.HSelectionSet_IsHighlightSegmentSwigExplicitHSelectionSet(swigCPtr, segment_key));
    return ret;
  }

  public virtual void SetSelectionFaceColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionFaceColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_SetSelectionFaceColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetGrayScale(bool grayScale) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetGrayScale(swigCPtr, grayScale); else HCSMVOPINVOKE.HSelectionSet_SetGrayScaleSwigExplicitHSelectionSet(swigCPtr, grayScale);
  }

  public virtual void SetInvisible(bool Invisible) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetInvisible(swigCPtr, Invisible); else HCSMVOPINVOKE.HSelectionSet_SetInvisibleSwigExplicitHSelectionSet(swigCPtr, Invisible);
  }

  public virtual bool GetInvisible() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetInvisible(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetInvisibleSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetAllowDisplacement(bool allowDisplacement) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetAllowDisplacement(swigCPtr, allowDisplacement); else HCSMVOPINVOKE.HSelectionSet_SetAllowDisplacementSwigExplicitHSelectionSet(swigCPtr, allowDisplacement);
  }

  public virtual bool GetAllowDisplacement() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAllowDisplacement(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetAllowDisplacementSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void GetSelectionFaceColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_GetSelectionFaceColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_GetSelectionFaceColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSelectionEdgeColor(HPixelRGBA rgb) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionEdgeColor(swigCPtr, HPixelRGBA.getCPtr(rgb)); else HCSMVOPINVOKE.HSelectionSet_SetSelectionEdgeColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgb));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSelectionEdgeColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_GetSelectionEdgeColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_GetSelectionEdgeColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSelectionCutEdgeColor(HPixelRGBA rgb) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionCutEdgeColor(swigCPtr, HPixelRGBA.getCPtr(rgb)); else HCSMVOPINVOKE.HSelectionSet_SetSelectionCutEdgeColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgb));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSelectionCutEdgeColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_GetSelectionCutEdgeColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_GetSelectionCutEdgeColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSelectionCutFaceColor(HPixelRGBA rgb) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionCutFaceColor(swigCPtr, HPixelRGBA.getCPtr(rgb)); else HCSMVOPINVOKE.HSelectionSet_SetSelectionCutFaceColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgb));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSelectionCutFaceColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_GetSelectionCutFaceColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_GetSelectionCutFaceColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSelectionMarkerColor(HPixelRGBA rgb) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionMarkerColor(swigCPtr, HPixelRGBA.getCPtr(rgb)); else HCSMVOPINVOKE.HSelectionSet_SetSelectionMarkerColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgb));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetSelectionMarkerColor(HPixelRGBA rgba) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_GetSelectionMarkerColor(swigCPtr, HPixelRGBA.getCPtr(rgba)); else HCSMVOPINVOKE.HSelectionSet_GetSelectionMarkerColorSwigExplicitHSelectionSet(swigCPtr, HPixelRGBA.getCPtr(rgba));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSelectionEdgeWeight(float weight) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionEdgeWeight(swigCPtr, weight); else HCSMVOPINVOKE.HSelectionSet_SetSelectionEdgeWeightSwigExplicitHSelectionSet(swigCPtr, weight);
  }

  public virtual float GetSelectionEdgeWeight() {
    float ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSelectionEdgeWeight(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSelectionEdgeWeightSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSelectionMarkerSize(float size) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionMarkerSize(swigCPtr, size); else HCSMVOPINVOKE.HSelectionSet_SetSelectionMarkerSizeSwigExplicitHSelectionSet(swigCPtr, size);
  }

  public virtual float GetSelectionMarkerSize() {
    float ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSelectionMarkerSize(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSelectionMarkerSizeSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual MVO_POINTER_SIZED_INT GetAt(uint index) {return ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAt(swigCPtr, index) : HCSMVOPINVOKE.HSelectionSet_GetAtSwigExplicitHSelectionSet(swigCPtr, index));}

  public virtual bool GetAll(MVO_POINTER_SIZED_INT[] out_array) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAll(swigCPtr, out_array) : HCSMVOPINVOKE.HSelectionSet_GetAllSwigExplicitHSelectionSet(swigCPtr, out_array));
    return ret;
  }

  public HSelectionItem GetSelectionItemAt(uint index) {
	IntPtr cptr = HCSMVOPINVOKE.HSelectionSet_GetSelectionItemAt(swigCPtr, index);	
	if (cptr == IntPtr.Zero)
		return null;		
	string name = HCSMVOPINVOKE.HSelectionItem_GetName(new HandleRef(null,cptr));	
	if (name == "HSmartSelItem")
		return new HSmartSelItem(cptr,false);	
	else if (name == "HSubentitySelItem")
		return new HSubentitySelItem(cptr,false);	
	else {
		return new HSelectionItem(cptr,false);	
	}		
}

  public HSelectionItem GetSelectionItem(MVO_POINTER_SIZED_INT key) {
	IntPtr cptr = HCSMVOPINVOKE.HSelectionSet_GetSelectionItem(swigCPtr, key);	
	if (cptr == IntPtr.Zero)
		return null;		
	string name = HCSMVOPINVOKE.HSelectionItem_GetName(new HandleRef(null,cptr));	
	if (name == "HSmartSelItem")
		return new HSmartSelItem(cptr,false);	
	else if (name == "HSubentitySelItem")
		return new HSubentitySelItem(cptr,false);	
	else {
		return new HSelectionItem(cptr,false);	
	}		
}

  public uint GetSize() {
    uint ret = HCSMVOPINVOKE.HSelectionSet_GetSize(swigCPtr);
    return ret;
  }

  public virtual void Reset() {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_Reset(swigCPtr); else HCSMVOPINVOKE.HSelectionSet_ResetSwigExplicitHSelectionSet(swigCPtr);
  }

  public virtual bool DeleteSelection(bool emit_message) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_DeleteSelection__SWIG_0(swigCPtr, emit_message) : HCSMVOPINVOKE.HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_0(swigCPtr, emit_message));
    return ret;
  }

  public virtual bool DeleteSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_DeleteSelection__SWIG_1(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_DeleteSelectionSwigExplicitHSelectionSet__SWIG_1(swigCPtr));
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetHighlightStyle() {return HCSMVOPINVOKE.HSelectionSet_GetHighlightStyle(swigCPtr);}

  public void SetHighlightStyle(MVO_POINTER_SIZED_INT key) {
    HCSMVOPINVOKE.HSelectionSet_SetHighlightStyle(swigCPtr, key);
  }

  public string GetHighlightStyleName() {
    string ret = HCSMVOPINVOKE.HSelectionSet_GetHighlightStyleName(swigCPtr);
    return ret;
  }

  public bool DeInstance(HSelectionItem sel_item) {
    bool ret = HCSMVOPINVOKE.HSelectionSet_DeInstance__SWIG_0(swigCPtr, HSelectionItem.getCPtr(sel_item));
    return ret;
  }

  public bool DeInstance(uint index) {
    bool ret = HCSMVOPINVOKE.HSelectionSet_DeInstance__SWIG_1(swigCPtr, index);
    return ret;
  }

  public virtual bool GetSubwindowPenetration() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSubwindowPenetration(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSubwindowPenetrationSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSubwindowPenetration(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSubwindowPenetration(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetSubwindowPenetrationSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public virtual bool GetAllowSubentitySelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAllowSubentitySelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetAllowSubentitySelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetAllowSubentitySelection(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetAllowSubentitySelection(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetAllowSubentitySelectionSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public virtual HSelectLevel GetSelectionLevel() {
    HSelectLevel ret = (HSelectLevel)((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSelectionLevel(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSelectionLevelSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSelectionLevel(HSelectLevel level) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectionLevel(swigCPtr, (int)level); else HCSMVOPINVOKE.HSelectionSet_SetSelectionLevelSwigExplicitHSelectionSet(swigCPtr, (int)level);
  }

  public virtual bool GetAllowEntitySelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAllowEntitySelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetAllowEntitySelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetAllowEntitySelection(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetAllowEntitySelection(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetAllowEntitySelectionSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public virtual bool GetAllowRegionSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAllowRegionSelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetAllowRegionSelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetAllowRegionSelection(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetAllowRegionSelection(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetAllowRegionSelectionSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public void RegisterHighlightSeg(MVO_POINTER_SIZED_INT seg_key) {
    HCSMVOPINVOKE.HSelectionSet_RegisterHighlightSeg(swigCPtr, seg_key);
  }

  public void UnRegisterHighlightSeg(MVO_POINTER_SIZED_INT seg_key) {
    HCSMVOPINVOKE.HSelectionSet_UnRegisterHighlightSeg(swigCPtr, seg_key);
  }

  public virtual HSelectionHighlightMode GetHighlightMode() {
    HSelectionHighlightMode ret = (HSelectionHighlightMode)((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetHighlightMode(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetHighlightModeSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetHighlightMode(HSelectionHighlightMode m) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetHighlightMode(swigCPtr, (int)m); else HCSMVOPINVOKE.HSelectionSet_SetHighlightModeSwigExplicitHSelectionSet(swigCPtr, (int)m);
  }

  public virtual void SetHighlightTransparency(float trans) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetHighlightTransparency(swigCPtr, trans); else HCSMVOPINVOKE.HSelectionSet_SetHighlightTransparencySwigExplicitHSelectionSet(swigCPtr, trans);
  }

  public virtual MVO_POINTER_SIZED_INT GetSelectionSegment() {return ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSelectionSegment(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSelectionSegmentSwigExplicitHSelectionSet(swigCPtr));}

  public void ToggleHighlightStyle() {
    HCSMVOPINVOKE.HSelectionSet_ToggleHighlightStyle(swigCPtr);
  }

  public virtual bool GetIsSelection(MVO_POINTER_SIZED_INT key) {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetIsSelection(swigCPtr, key) : HCSMVOPINVOKE.HSelectionSet_GetIsSelectionSwigExplicitHSelectionSet(swigCPtr, key));
    return ret;
  }

  public virtual bool GetReferenceSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetReferenceSelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetReferenceSelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetReferenceSelection(bool ref_sel) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetReferenceSelection(swigCPtr, ref_sel); else HCSMVOPINVOKE.HSelectionSet_SetReferenceSelectionSwigExplicitHSelectionSet(swigCPtr, ref_sel);
  }

  public void SetUseDefinedHighlight(bool use_defined_highlight) {
    HCSMVOPINVOKE.HSelectionSet_SetUseDefinedHighlight(swigCPtr, use_defined_highlight);
  }

  public bool GetUseDefinedHighlight() {
    bool ret = HCSMVOPINVOKE.HSelectionSet_GetUseDefinedHighlight(swigCPtr);
    return ret;
  }

  public virtual void SetReferenceSelectionType(HRefSelType type) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetReferenceSelectionType(swigCPtr, (int)type); else HCSMVOPINVOKE.HSelectionSet_SetReferenceSelectionTypeSwigExplicitHSelectionSet(swigCPtr, (int)type);
  }

  public virtual HRefSelType GetReferenceSelectionType() {
    HRefSelType ret = (HRefSelType)((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetReferenceSelectionType(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetReferenceSelectionTypeSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void UpdateHighlightStyle() {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_UpdateHighlightStyle(swigCPtr); else HCSMVOPINVOKE.HSelectionSet_UpdateHighlightStyleSwigExplicitHSelectionSet(swigCPtr);
  }

  public SWIGTYPE_p_HVHashPShowCache GetPShowCache() {
    IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_GetPShowCache(swigCPtr);
    SWIGTYPE_p_HVHashPShowCache ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HVHashPShowCache(cPtr, false);
    return ret;
  }

  public void SetPShowCache(SWIGTYPE_p_HVHashPShowCache new_cache) {
    HCSMVOPINVOKE.HSelectionSet_SetPShowCache(swigCPtr, SWIGTYPE_p_HVHashPShowCache.getCPtr(new_cache));
  }

  public void FlushPShowCache() {
    HCSMVOPINVOKE.HSelectionSet_FlushPShowCache(swigCPtr);
  }

  public void UpdateHighlighting() {
    HCSMVOPINVOKE.HSelectionSet_UpdateHighlighting(swigCPtr);
  }

  public HBaseView GetView() {
    IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_GetView(swigCPtr);
    HBaseView ret = (cPtr == IntPtr.Zero) ? null : new HBaseView(cPtr, false);
    return ret;
  }

  public void SetSortSelectionList(bool sort) {
    HCSMVOPINVOKE.HSelectionSet_SetSortSelectionList(swigCPtr, sort);
  }

  public bool GetSortSelectionList() {
    bool ret = HCSMVOPINVOKE.HSelectionSet_GetSortSelectionList(swigCPtr);
    return ret;
  }

  public virtual bool GetSubentityFaceSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSubentityFaceSelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSubentityFaceSelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSubentityFaceSelection(bool select) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSubentityFaceSelection(swigCPtr, select); else HCSMVOPINVOKE.HSelectionSet_SetSubentityFaceSelectionSwigExplicitHSelectionSet(swigCPtr, select);
  }

  public virtual bool GetSubentityEdgeSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSubentityEdgeSelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSubentityEdgeSelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSubentityEdgeSelection(bool select) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSubentityEdgeSelection(swigCPtr, select); else HCSMVOPINVOKE.HSelectionSet_SetSubentityEdgeSelectionSwigExplicitHSelectionSet(swigCPtr, select);
  }

  public virtual bool GetSubentityVertexSelection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSubentityVertexSelection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSubentityVertexSelectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSubentityVertexSelection(bool select) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSubentityVertexSelection(swigCPtr, select); else HCSMVOPINVOKE.HSelectionSet_SetSubentityVertexSelectionSwigExplicitHSelectionSet(swigCPtr, select);
  }

  public virtual void SetAllowSubentityDeselection(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetAllowSubentityDeselection(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetAllowSubentityDeselectionSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public virtual bool GetAllowSubentityDeselection() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetAllowSubentityDeselection(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetAllowSubentityDeselectionSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public virtual void SetSubentityTracking(bool allow) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSubentityTracking(swigCPtr, allow); else HCSMVOPINVOKE.HSelectionSet_SetSubentityTrackingSwigExplicitHSelectionSet(swigCPtr, allow);
  }

  public virtual bool GetSubentityTracking() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSubentityTracking(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSubentityTrackingSwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public void GetSelectionBounding(HPoint minimum, HPoint maximum) {
    HCSMVOPINVOKE.HSelectionSet_GetSelectionBounding(swigCPtr, HPoint.getCPtr(minimum), HPoint.getCPtr(maximum));
  }

  public virtual void SetSelectWillNotify(bool notify) {
    if (this.GetType() == typeof(HSelectionSet)) HCSMVOPINVOKE.HSelectionSet_SetSelectWillNotify(swigCPtr, notify); else HCSMVOPINVOKE.HSelectionSet_SetSelectWillNotifySwigExplicitHSelectionSet(swigCPtr, notify);
  }

  public virtual bool GetSelectWillNotify() {
    bool ret = ((this.GetType() == typeof(HSelectionSet)) ? HCSMVOPINVOKE.HSelectionSet_GetSelectWillNotify(swigCPtr) : HCSMVOPINVOKE.HSelectionSet_GetSelectWillNotifySwigExplicitHSelectionSet(swigCPtr));
    return ret;
  }

  public int GetAttrLookupID(string attribute_string) {
    int ret = HCSMVOPINVOKE.HSelectionSet_GetAttrLookupID(swigCPtr, attribute_string);
    return ret;
  }

  public SWIGTYPE_p_HSelectionSegmentConditionInfo GetSelectionSegmentConditionInfo() {
    IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_GetSelectionSegmentConditionInfo(swigCPtr);
    SWIGTYPE_p_HSelectionSegmentConditionInfo ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HSelectionSegmentConditionInfo(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_HConditionStyleKeyInfoHash GetConditionStyleKeyInfo() {
    IntPtr cPtr = HCSMVOPINVOKE.HSelectionSet_GetConditionStyleKeyInfo(swigCPtr);
    SWIGTYPE_p_HConditionStyleKeyInfoHash ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_HConditionStyleKeyInfoHash(cPtr, false);
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("UpdateTransparency", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHSelectionSet_0(SwigDirectorUpdateTransparency__SWIG_0);
    if (SwigDerivedClassHasMethod("UpdateTransparency", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateHSelectionSet_1(SwigDirectorUpdateTransparency__SWIG_1);
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateHSelectionSet_2(SwigDirectorInit);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateHSelectionSet_3(SwigDirectorSelect__SWIG_0);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateHSelectionSet_4(SwigDirectorSelect__SWIG_1);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateHSelectionSet_5(SwigDirectorSelect__SWIG_2);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateHSelectionSet_6(SwigDirectorSelect__SWIG_3);
    if (SwigDerivedClassHasMethod("SelectRegion", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateHSelectionSet_7(SwigDirectorSelectRegion);
    if (SwigDerivedClassHasMethod("SelectSubentity", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateHSelectionSet_8(SwigDirectorSelectSubentity__SWIG_0);
    if (SwigDerivedClassHasMethod("SelectSubentity", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateHSelectionSet_9(SwigDirectorSelectSubentity__SWIG_1);
    if (SwigDerivedClassHasMethod("SelectSubentity", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateHSelectionSet_10(SwigDirectorSelectSubentity__SWIG_2);
    if (SwigDerivedClassHasMethod("SelectSubentity", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateHSelectionSet_11(SwigDirectorSelectSubentity__SWIG_3);
    if (SwigDerivedClassHasMethod("SelectSubentity", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateHSelectionSet_12(SwigDirectorSelectSubentity__SWIG_4);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateHSelectionSet_13(SwigDirectorSelect__SWIG_4);
    if (SwigDerivedClassHasMethod("Select", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateHSelectionSet_14(SwigDirectorSelect__SWIG_5);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateHSelectionSet_15(SwigDirectorDeSelect__SWIG_0);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateHSelectionSet_16(SwigDirectorDeSelect__SWIG_1);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateHSelectionSet_17(SwigDirectorDeSelect__SWIG_2);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateHSelectionSet_18(SwigDirectorDeSelect__SWIG_3);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateHSelectionSet_19(SwigDirectorDeSelect__SWIG_4);
    if (SwigDerivedClassHasMethod("DeSelect", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateHSelectionSet_20(SwigDirectorDeSelect__SWIG_5);
    if (SwigDerivedClassHasMethod("DeSelectRegion", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateHSelectionSet_21(SwigDirectorDeSelectRegion__SWIG_0);
    if (SwigDerivedClassHasMethod("DeSelectRegion", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateHSelectionSet_22(SwigDirectorDeSelectRegion__SWIG_1);
    if (SwigDerivedClassHasMethod("DeSelectRegion", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateHSelectionSet_23(SwigDirectorDeSelectRegion__SWIG_2);
    if (SwigDerivedClassHasMethod("DeSelectSubentity", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateHSelectionSet_24(SwigDirectorDeSelectSubentity__SWIG_0);
    if (SwigDerivedClassHasMethod("DeSelectSubentity", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateHSelectionSet_25(SwigDirectorDeSelectSubentity__SWIG_1);
    if (SwigDerivedClassHasMethod("SelectSubentityOOC", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateHSelectionSet_26(SwigDirectorSelectSubentityOOC__SWIG_0);
    if (SwigDerivedClassHasMethod("SelectSubentityOOC", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateHSelectionSet_27(SwigDirectorSelectSubentityOOC__SWIG_1);
    if (SwigDerivedClassHasMethod("SelectSubentityOOC", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateHSelectionSet_28(SwigDirectorSelectSubentityOOC__SWIG_2);
    if (SwigDerivedClassHasMethod("SelectSubentityOOC", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateHSelectionSet_29(SwigDirectorSelectSubentityOOC__SWIG_3);
    if (SwigDerivedClassHasMethod("SelectSubentityOOC", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateHSelectionSet_30(SwigDirectorSelectSubentityOOC__SWIG_4);
    if (SwigDerivedClassHasMethod("DeSelectOOC", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateHSelectionSet_31(SwigDirectorDeSelectOOC__SWIG_0);
    if (SwigDerivedClassHasMethod("DeSelectOOC", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateHSelectionSet_32(SwigDirectorDeSelectOOC__SWIG_1);
    if (SwigDerivedClassHasMethod("HighlightRegionEdges", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateHSelectionSet_33(SwigDirectorHighlightRegionEdges__SWIG_0);
    if (SwigDerivedClassHasMethod("HighlightRegionEdges", swigMethodTypes34))
      swigDelegate34 = new SwigDelegateHSelectionSet_34(SwigDirectorHighlightRegionEdges__SWIG_1);
    if (SwigDerivedClassHasMethod("HighlightAnnotations", swigMethodTypes35))
      swigDelegate35 = new SwigDelegateHSelectionSet_35(SwigDirectorHighlightAnnotations__SWIG_0);
    if (SwigDerivedClassHasMethod("HighlightAnnotations", swigMethodTypes36))
      swigDelegate36 = new SwigDelegateHSelectionSet_36(SwigDirectorHighlightAnnotations__SWIG_1);
    if (SwigDerivedClassHasMethod("HighlightRegionEdgesAutoVisibility", swigMethodTypes37))
      swigDelegate37 = new SwigDelegateHSelectionSet_37(SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_0);
    if (SwigDerivedClassHasMethod("HighlightRegionEdgesAutoVisibility", swigMethodTypes38))
      swigDelegate38 = new SwigDelegateHSelectionSet_38(SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_1);
    if (SwigDerivedClassHasMethod("HighlightRegionEdgesAutoVisibility", swigMethodTypes39))
      swigDelegate39 = new SwigDelegateHSelectionSet_39(SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_2);
    if (SwigDerivedClassHasMethod("HighlightRegionFacesAutoVisibility", swigMethodTypes40))
      swigDelegate40 = new SwigDelegateHSelectionSet_40(SwigDirectorHighlightRegionFacesAutoVisibility__SWIG_0);
    if (SwigDerivedClassHasMethod("HighlightRegionFacesAutoVisibility", swigMethodTypes41))
      swigDelegate41 = new SwigDelegateHSelectionSet_41(SwigDirectorHighlightRegionFacesAutoVisibility__SWIG_1);
    if (SwigDerivedClassHasMethod("DeSelectAll", swigMethodTypes42))
      swigDelegate42 = new SwigDelegateHSelectionSet_42(SwigDirectorDeSelectAll);
    if (SwigDerivedClassHasMethod("IsSelected", swigMethodTypes43))
      swigDelegate43 = new SwigDelegateHSelectionSet_43(SwigDirectorIsSelected__SWIG_0);
    if (SwigDerivedClassHasMethod("IsSelected", swigMethodTypes44))
      swigDelegate44 = new SwigDelegateHSelectionSet_44(SwigDirectorIsSelected__SWIG_1);
    if (SwigDerivedClassHasMethod("IsSelected", swigMethodTypes45))
      swigDelegate45 = new SwigDelegateHSelectionSet_45(SwigDirectorIsSelected__SWIG_2);
    if (SwigDerivedClassHasMethod("IsRegionSelected", swigMethodTypes46))
      swigDelegate46 = new SwigDelegateHSelectionSet_46(SwigDirectorIsRegionSelected);
    if (SwigDerivedClassHasMethod("IsHighlightSegment", swigMethodTypes47))
      swigDelegate47 = new SwigDelegateHSelectionSet_47(SwigDirectorIsHighlightSegment);
    if (SwigDerivedClassHasMethod("SetSelectionFaceColor", swigMethodTypes48))
      swigDelegate48 = new SwigDelegateHSelectionSet_48(SwigDirectorSetSelectionFaceColor);
    if (SwigDerivedClassHasMethod("SetGrayScale", swigMethodTypes49))
      swigDelegate49 = new SwigDelegateHSelectionSet_49(SwigDirectorSetGrayScale);
    if (SwigDerivedClassHasMethod("SetInvisible", swigMethodTypes50))
      swigDelegate50 = new SwigDelegateHSelectionSet_50(SwigDirectorSetInvisible);
    if (SwigDerivedClassHasMethod("GetInvisible", swigMethodTypes51))
      swigDelegate51 = new SwigDelegateHSelectionSet_51(SwigDirectorGetInvisible);
    if (SwigDerivedClassHasMethod("SetAllowDisplacement", swigMethodTypes52))
      swigDelegate52 = new SwigDelegateHSelectionSet_52(SwigDirectorSetAllowDisplacement);
    if (SwigDerivedClassHasMethod("GetAllowDisplacement", swigMethodTypes53))
      swigDelegate53 = new SwigDelegateHSelectionSet_53(SwigDirectorGetAllowDisplacement);
    if (SwigDerivedClassHasMethod("GetSelectionFaceColor", swigMethodTypes54))
      swigDelegate54 = new SwigDelegateHSelectionSet_54(SwigDirectorGetSelectionFaceColor);
    if (SwigDerivedClassHasMethod("SetSelectionEdgeColor", swigMethodTypes55))
      swigDelegate55 = new SwigDelegateHSelectionSet_55(SwigDirectorSetSelectionEdgeColor);
    if (SwigDerivedClassHasMethod("GetSelectionEdgeColor", swigMethodTypes56))
      swigDelegate56 = new SwigDelegateHSelectionSet_56(SwigDirectorGetSelectionEdgeColor);
    if (SwigDerivedClassHasMethod("SetSelectionCutEdgeColor", swigMethodTypes57))
      swigDelegate57 = new SwigDelegateHSelectionSet_57(SwigDirectorSetSelectionCutEdgeColor);
    if (SwigDerivedClassHasMethod("GetSelectionCutEdgeColor", swigMethodTypes58))
      swigDelegate58 = new SwigDelegateHSelectionSet_58(SwigDirectorGetSelectionCutEdgeColor);
    if (SwigDerivedClassHasMethod("SetSelectionCutFaceColor", swigMethodTypes59))
      swigDelegate59 = new SwigDelegateHSelectionSet_59(SwigDirectorSetSelectionCutFaceColor);
    if (SwigDerivedClassHasMethod("GetSelectionCutFaceColor", swigMethodTypes60))
      swigDelegate60 = new SwigDelegateHSelectionSet_60(SwigDirectorGetSelectionCutFaceColor);
    if (SwigDerivedClassHasMethod("SetSelectionMarkerColor", swigMethodTypes61))
      swigDelegate61 = new SwigDelegateHSelectionSet_61(SwigDirectorSetSelectionMarkerColor);
    if (SwigDerivedClassHasMethod("GetSelectionMarkerColor", swigMethodTypes62))
      swigDelegate62 = new SwigDelegateHSelectionSet_62(SwigDirectorGetSelectionMarkerColor);
    if (SwigDerivedClassHasMethod("SetSelectionEdgeWeight", swigMethodTypes63))
      swigDelegate63 = new SwigDelegateHSelectionSet_63(SwigDirectorSetSelectionEdgeWeight);
    if (SwigDerivedClassHasMethod("GetSelectionEdgeWeight", swigMethodTypes64))
      swigDelegate64 = new SwigDelegateHSelectionSet_64(SwigDirectorGetSelectionEdgeWeight);
    if (SwigDerivedClassHasMethod("SetSelectionMarkerSize", swigMethodTypes65))
      swigDelegate65 = new SwigDelegateHSelectionSet_65(SwigDirectorSetSelectionMarkerSize);
    if (SwigDerivedClassHasMethod("GetSelectionMarkerSize", swigMethodTypes66))
      swigDelegate66 = new SwigDelegateHSelectionSet_66(SwigDirectorGetSelectionMarkerSize);
    if (SwigDerivedClassHasMethod("GetAt", swigMethodTypes67))
      swigDelegate67 = new SwigDelegateHSelectionSet_67(SwigDirectorGetAt);
    if (SwigDerivedClassHasMethod("GetAll", swigMethodTypes68))
      swigDelegate68 = new SwigDelegateHSelectionSet_68(SwigDirectorGetAll);
    if (SwigDerivedClassHasMethod("Reset", swigMethodTypes69))
      swigDelegate69 = new SwigDelegateHSelectionSet_69(SwigDirectorReset);
    if (SwigDerivedClassHasMethod("DeleteSelection", swigMethodTypes70))
      swigDelegate70 = new SwigDelegateHSelectionSet_70(SwigDirectorDeleteSelection__SWIG_0);
    if (SwigDerivedClassHasMethod("DeleteSelection", swigMethodTypes71))
      swigDelegate71 = new SwigDelegateHSelectionSet_71(SwigDirectorDeleteSelection__SWIG_1);
    if (SwigDerivedClassHasMethod("GetSubwindowPenetration", swigMethodTypes72))
      swigDelegate72 = new SwigDelegateHSelectionSet_72(SwigDirectorGetSubwindowPenetration);
    if (SwigDerivedClassHasMethod("SetSubwindowPenetration", swigMethodTypes73))
      swigDelegate73 = new SwigDelegateHSelectionSet_73(SwigDirectorSetSubwindowPenetration);
    if (SwigDerivedClassHasMethod("GetAllowSubentitySelection", swigMethodTypes74))
      swigDelegate74 = new SwigDelegateHSelectionSet_74(SwigDirectorGetAllowSubentitySelection);
    if (SwigDerivedClassHasMethod("SetAllowSubentitySelection", swigMethodTypes75))
      swigDelegate75 = new SwigDelegateHSelectionSet_75(SwigDirectorSetAllowSubentitySelection);
    if (SwigDerivedClassHasMethod("GetSelectionLevel", swigMethodTypes76))
      swigDelegate76 = new SwigDelegateHSelectionSet_76(SwigDirectorGetSelectionLevel);
    if (SwigDerivedClassHasMethod("SetSelectionLevel", swigMethodTypes77))
      swigDelegate77 = new SwigDelegateHSelectionSet_77(SwigDirectorSetSelectionLevel);
    if (SwigDerivedClassHasMethod("GetAllowEntitySelection", swigMethodTypes78))
      swigDelegate78 = new SwigDelegateHSelectionSet_78(SwigDirectorGetAllowEntitySelection);
    if (SwigDerivedClassHasMethod("SetAllowEntitySelection", swigMethodTypes79))
      swigDelegate79 = new SwigDelegateHSelectionSet_79(SwigDirectorSetAllowEntitySelection);
    if (SwigDerivedClassHasMethod("GetAllowRegionSelection", swigMethodTypes80))
      swigDelegate80 = new SwigDelegateHSelectionSet_80(SwigDirectorGetAllowRegionSelection);
    if (SwigDerivedClassHasMethod("SetAllowRegionSelection", swigMethodTypes81))
      swigDelegate81 = new SwigDelegateHSelectionSet_81(SwigDirectorSetAllowRegionSelection);
    if (SwigDerivedClassHasMethod("GetHighlightMode", swigMethodTypes82))
      swigDelegate82 = new SwigDelegateHSelectionSet_82(SwigDirectorGetHighlightMode);
    if (SwigDerivedClassHasMethod("SetHighlightMode", swigMethodTypes83))
      swigDelegate83 = new SwigDelegateHSelectionSet_83(SwigDirectorSetHighlightMode);
    if (SwigDerivedClassHasMethod("SetHighlightTransparency", swigMethodTypes84))
      swigDelegate84 = new SwigDelegateHSelectionSet_84(SwigDirectorSetHighlightTransparency);
    if (SwigDerivedClassHasMethod("GetSelectionSegment", swigMethodTypes85))
      swigDelegate85 = new SwigDelegateHSelectionSet_85(SwigDirectorGetSelectionSegment);
    if (SwigDerivedClassHasMethod("GetIsSelection", swigMethodTypes86))
      swigDelegate86 = new SwigDelegateHSelectionSet_86(SwigDirectorGetIsSelection);
    if (SwigDerivedClassHasMethod("GetReferenceSelection", swigMethodTypes87))
      swigDelegate87 = new SwigDelegateHSelectionSet_87(SwigDirectorGetReferenceSelection);
    if (SwigDerivedClassHasMethod("SetReferenceSelection", swigMethodTypes88))
      swigDelegate88 = new SwigDelegateHSelectionSet_88(SwigDirectorSetReferenceSelection);
    if (SwigDerivedClassHasMethod("SetReferenceSelectionType", swigMethodTypes89))
      swigDelegate89 = new SwigDelegateHSelectionSet_89(SwigDirectorSetReferenceSelectionType);
    if (SwigDerivedClassHasMethod("GetReferenceSelectionType", swigMethodTypes90))
      swigDelegate90 = new SwigDelegateHSelectionSet_90(SwigDirectorGetReferenceSelectionType);
    if (SwigDerivedClassHasMethod("UpdateHighlightStyle", swigMethodTypes91))
      swigDelegate91 = new SwigDelegateHSelectionSet_91(SwigDirectorUpdateHighlightStyle);
    if (SwigDerivedClassHasMethod("GetSubentityFaceSelection", swigMethodTypes92))
      swigDelegate92 = new SwigDelegateHSelectionSet_92(SwigDirectorGetSubentityFaceSelection);
    if (SwigDerivedClassHasMethod("SetSubentityFaceSelection", swigMethodTypes93))
      swigDelegate93 = new SwigDelegateHSelectionSet_93(SwigDirectorSetSubentityFaceSelection);
    if (SwigDerivedClassHasMethod("GetSubentityEdgeSelection", swigMethodTypes94))
      swigDelegate94 = new SwigDelegateHSelectionSet_94(SwigDirectorGetSubentityEdgeSelection);
    if (SwigDerivedClassHasMethod("SetSubentityEdgeSelection", swigMethodTypes95))
      swigDelegate95 = new SwigDelegateHSelectionSet_95(SwigDirectorSetSubentityEdgeSelection);
    if (SwigDerivedClassHasMethod("GetSubentityVertexSelection", swigMethodTypes96))
      swigDelegate96 = new SwigDelegateHSelectionSet_96(SwigDirectorGetSubentityVertexSelection);
    if (SwigDerivedClassHasMethod("SetSubentityVertexSelection", swigMethodTypes97))
      swigDelegate97 = new SwigDelegateHSelectionSet_97(SwigDirectorSetSubentityVertexSelection);
    if (SwigDerivedClassHasMethod("SetAllowSubentityDeselection", swigMethodTypes98))
      swigDelegate98 = new SwigDelegateHSelectionSet_98(SwigDirectorSetAllowSubentityDeselection);
    if (SwigDerivedClassHasMethod("GetAllowSubentityDeselection", swigMethodTypes99))
      swigDelegate99 = new SwigDelegateHSelectionSet_99(SwigDirectorGetAllowSubentityDeselection);
    if (SwigDerivedClassHasMethod("SetSubentityTracking", swigMethodTypes100))
      swigDelegate100 = new SwigDelegateHSelectionSet_100(SwigDirectorSetSubentityTracking);
    if (SwigDerivedClassHasMethod("GetSubentityTracking", swigMethodTypes101))
      swigDelegate101 = new SwigDelegateHSelectionSet_101(SwigDirectorGetSubentityTracking);
    if (SwigDerivedClassHasMethod("SetSelectWillNotify", swigMethodTypes102))
      swigDelegate102 = new SwigDelegateHSelectionSet_102(SwigDirectorSetSelectWillNotify);
    if (SwigDerivedClassHasMethod("GetSelectWillNotify", swigMethodTypes103))
      swigDelegate103 = new SwigDelegateHSelectionSet_103(SwigDirectorGetSelectWillNotify);
    HCSMVOPINVOKE.HSelectionSet_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33, swigDelegate34, swigDelegate35, swigDelegate36, swigDelegate37, swigDelegate38, swigDelegate39, swigDelegate40, swigDelegate41, swigDelegate42, swigDelegate43, swigDelegate44, swigDelegate45, swigDelegate46, swigDelegate47, swigDelegate48, swigDelegate49, swigDelegate50, swigDelegate51, swigDelegate52, swigDelegate53, swigDelegate54, swigDelegate55, swigDelegate56, swigDelegate57, swigDelegate58, swigDelegate59, swigDelegate60, swigDelegate61, swigDelegate62, swigDelegate63, swigDelegate64, swigDelegate65, swigDelegate66, swigDelegate67, swigDelegate68, swigDelegate69, swigDelegate70, swigDelegate71, swigDelegate72, swigDelegate73, swigDelegate74, swigDelegate75, swigDelegate76, swigDelegate77, swigDelegate78, swigDelegate79, swigDelegate80, swigDelegate81, swigDelegate82, swigDelegate83, swigDelegate84, swigDelegate85, swigDelegate86, swigDelegate87, swigDelegate88, swigDelegate89, swigDelegate90, swigDelegate91, swigDelegate92, swigDelegate93, swigDelegate94, swigDelegate95, swigDelegate96, swigDelegate97, swigDelegate98, swigDelegate99, swigDelegate100, swigDelegate101, swigDelegate102, swigDelegate103);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HSelectionSet));
    return hasDerivedMethod;
  }

  private void SwigDirectorUpdateTransparency__SWIG_0(bool force_flush) {
    UpdateTransparency(force_flush);
  }

  private void SwigDirectorUpdateTransparency__SWIG_1() {
    UpdateTransparency();
  }

  private void SwigDirectorInit() {
    Init();
  }

  private void SwigDirectorSelect__SWIG_0(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    Select(key, num_include_keys, include_keys, emit_message);
  }

  private void SwigDirectorSelect__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys) {
    Select(key, num_include_keys, include_keys);
  }

  private void SwigDirectorSelect__SWIG_2(IntPtr new_sel, bool emit_message) {
    Select((new_sel == IntPtr.Zero) ? null : new HSelectionItem(new_sel, false), emit_message);
  }

  private void SwigDirectorSelect__SWIG_3(IntPtr new_sel) {
    Select((new_sel == IntPtr.Zero) ? null : new HSelectionItem(new_sel, false));
  }

  private void SwigDirectorSelectRegion(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message) {
    SelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region, emit_message);
  }

  private void SwigDirectorSelectSubentity__SWIG_0(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message) {
    SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }

  private void SwigDirectorSelectSubentity__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2) {
    SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }

  private void SwigDirectorSelectSubentity__SWIG_2(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1) {
    SelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1);
  }

  private void SwigDirectorSelectSubentity__SWIG_3(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces) {
    SelectSubentity(key, num_include_keys, include_keys, count, faces);
  }

  private void SwigDirectorSelectSubentity__SWIG_4(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count) {
    SelectSubentity(key, num_include_keys, include_keys, count);
  }

  private void SwigDirectorSelect__SWIG_4(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key, bool emit_message) {
    Select(key, segpath, include_key, includer_key, emit_message);
  }

  private void SwigDirectorSelect__SWIG_5(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key) {
    Select(key, segpath, include_key, includer_key);
  }

  private void SwigDirectorDeSelect__SWIG_0(MVO_POINTER_SIZED_INT key, bool emit_message) {
    DeSelect(key, emit_message);
  }

  private void SwigDirectorDeSelect__SWIG_1(MVO_POINTER_SIZED_INT key) {
    DeSelect(key);
  }

  private void SwigDirectorDeSelect__SWIG_2(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    DeSelect(key, num_include_keys, include_keys, emit_message);
  }

  private void SwigDirectorDeSelect__SWIG_3(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys) {
    DeSelect(key, num_include_keys, include_keys);
  }

  private void SwigDirectorDeSelect__SWIG_4(IntPtr remove_sel, bool emit_message) {
    DeSelect((remove_sel == IntPtr.Zero) ? null : new HSelectionItem(remove_sel, false), emit_message);
  }

  private void SwigDirectorDeSelect__SWIG_5(IntPtr remove_sel) {
    DeSelect((remove_sel == IntPtr.Zero) ? null : new HSelectionItem(remove_sel, false));
  }

  private void SwigDirectorDeSelectRegion__SWIG_0(IntPtr oShell, int region, bool emit_messag) {
    DeSelectRegion(new HShellObject(oShell, false), region, emit_messag);
  }

  private void SwigDirectorDeSelectRegion__SWIG_1(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message) {
    DeSelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region, emit_message);
  }

  private void SwigDirectorDeSelectRegion__SWIG_2(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region) {
    DeSelectRegion(new HShellObject(oShell, false), num_include_keys, include_keys, region);
  }

  private void SwigDirectorDeSelectSubentity__SWIG_0(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message) {
    DeSelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }

  private void SwigDirectorDeSelectSubentity__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2) {
    DeSelectSubentity(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }

  private bool SwigDirectorSelectSubentityOOC__SWIG_0(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message) {
    return SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1, vertex2, emit_message);
  }

  private bool SwigDirectorSelectSubentityOOC__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2) {
    return SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1, vertex2);
  }

  private bool SwigDirectorSelectSubentityOOC__SWIG_2(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1) {
    return SelectSubentityOOC(key, num_include_keys, include_keys, count, faces, vertex1);
  }

  private bool SwigDirectorSelectSubentityOOC__SWIG_3(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces) {
    return SelectSubentityOOC(key, num_include_keys, include_keys, count, faces);
  }

  private bool SwigDirectorSelectSubentityOOC__SWIG_4(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count) {
    return SelectSubentityOOC(key, num_include_keys, include_keys, count);
  }

  private bool SwigDirectorDeSelectOOC__SWIG_0(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message) {
    return DeSelectOOC(key, num_include_keys, include_keys, emit_message);
  }

  private bool SwigDirectorDeSelectOOC__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys) {
    return DeSelectOOC(key, num_include_keys, include_keys);
  }

  private bool SwigDirectorHighlightRegionEdges__SWIG_0() {
    return HighlightRegionEdges();
  }

  private void SwigDirectorHighlightRegionEdges__SWIG_1(bool yesno) {
    HighlightRegionEdges(yesno);
  }

  private bool SwigDirectorHighlightAnnotations__SWIG_0() {
    return HighlightAnnotations();
  }

  private void SwigDirectorHighlightAnnotations__SWIG_1(bool yesno) {
    HighlightAnnotations(yesno);
  }

  private int SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_0() {
    return (int)HighlightRegionEdgesAutoVisibility();
  }

  private void SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_1(bool yesno) {
    HighlightRegionEdgesAutoVisibility(yesno);
  }

  private void SwigDirectorHighlightRegionEdgesAutoVisibility__SWIG_2(int edge_state) {
    HighlightRegionEdgesAutoVisibility((HRegionEdgeHighlightMode)edge_state);
  }

  private void SwigDirectorHighlightRegionFacesAutoVisibility__SWIG_0(int face_state) {
    HighlightRegionFacesAutoVisibility((HRegionFaceHighlightMode)face_state);
  }

  private int SwigDirectorHighlightRegionFacesAutoVisibility__SWIG_1() {
    return (int)HighlightRegionFacesAutoVisibility();
  }

  private void SwigDirectorDeSelectAll() {
    DeSelectAll();
  }

  private bool SwigDirectorIsSelected__SWIG_0(MVO_POINTER_SIZED_INT key) {
    return IsSelected(key);
  }

  private bool SwigDirectorIsSelected__SWIG_1(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys) {
    return IsSelected(key, num_include_keys, include_keys);
  }

  private bool SwigDirectorIsSelected__SWIG_2(IntPtr item) {
    return IsSelected((item == IntPtr.Zero) ? null : new HSelectionItem(item, false));
  }

  private bool SwigDirectorIsRegionSelected(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region) {
    return IsRegionSelected(key, num_include_keys, include_keys, region);
  }

  private bool SwigDirectorIsHighlightSegment(MVO_POINTER_SIZED_INT segment_key) {
    return IsHighlightSegment(segment_key);
  }

  private void SwigDirectorSetSelectionFaceColor(IntPtr rgba) {
    SetSelectionFaceColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetGrayScale(bool grayScale) {
    SetGrayScale(grayScale);
  }

  private void SwigDirectorSetInvisible(bool Invisible) {
    SetInvisible(Invisible);
  }

  private bool SwigDirectorGetInvisible() {
    return GetInvisible();
  }

  private void SwigDirectorSetAllowDisplacement(bool allowDisplacement) {
    SetAllowDisplacement(allowDisplacement);
  }

  private bool SwigDirectorGetAllowDisplacement() {
    return GetAllowDisplacement();
  }

  private void SwigDirectorGetSelectionFaceColor(IntPtr rgba) {
    GetSelectionFaceColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetSelectionEdgeColor(IntPtr rgb) {
    SetSelectionEdgeColor(new HPixelRGBA(rgb, false));
  }

  private void SwigDirectorGetSelectionEdgeColor(IntPtr rgba) {
    GetSelectionEdgeColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetSelectionCutEdgeColor(IntPtr rgb) {
    SetSelectionCutEdgeColor(new HPixelRGBA(rgb, false));
  }

  private void SwigDirectorGetSelectionCutEdgeColor(IntPtr rgba) {
    GetSelectionCutEdgeColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetSelectionCutFaceColor(IntPtr rgb) {
    SetSelectionCutFaceColor(new HPixelRGBA(rgb, false));
  }

  private void SwigDirectorGetSelectionCutFaceColor(IntPtr rgba) {
    GetSelectionCutFaceColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetSelectionMarkerColor(IntPtr rgb) {
    SetSelectionMarkerColor(new HPixelRGBA(rgb, false));
  }

  private void SwigDirectorGetSelectionMarkerColor(IntPtr rgba) {
    GetSelectionMarkerColor(new HPixelRGBA(rgba, false));
  }

  private void SwigDirectorSetSelectionEdgeWeight(float weight) {
    SetSelectionEdgeWeight(weight);
  }

  private float SwigDirectorGetSelectionEdgeWeight() {
    return GetSelectionEdgeWeight();
  }

  private void SwigDirectorSetSelectionMarkerSize(float size) {
    SetSelectionMarkerSize(size);
  }

  private float SwigDirectorGetSelectionMarkerSize() {
    return GetSelectionMarkerSize();
  }

  private MVO_POINTER_SIZED_INT SwigDirectorGetAt(uint index) {
    return GetAt(index);
  }

  private bool SwigDirectorGetAll(MVO_POINTER_SIZED_INT[] out_array) {
    return GetAll(out_array);
  }

  private void SwigDirectorReset() {
    Reset();
  }

  private bool SwigDirectorDeleteSelection__SWIG_0(bool emit_message) {
    return DeleteSelection(emit_message);
  }

  private bool SwigDirectorDeleteSelection__SWIG_1() {
    return DeleteSelection();
  }

  private bool SwigDirectorGetSubwindowPenetration() {
    return GetSubwindowPenetration();
  }

  private void SwigDirectorSetSubwindowPenetration(bool allow) {
    SetSubwindowPenetration(allow);
  }

  private bool SwigDirectorGetAllowSubentitySelection() {
    return GetAllowSubentitySelection();
  }

  private void SwigDirectorSetAllowSubentitySelection(bool allow) {
    SetAllowSubentitySelection(allow);
  }

  private int SwigDirectorGetSelectionLevel() {
    return (int)GetSelectionLevel();
  }

  private void SwigDirectorSetSelectionLevel(int level) {
    SetSelectionLevel((HSelectLevel)level);
  }

  private bool SwigDirectorGetAllowEntitySelection() {
    return GetAllowEntitySelection();
  }

  private void SwigDirectorSetAllowEntitySelection(bool allow) {
    SetAllowEntitySelection(allow);
  }

  private bool SwigDirectorGetAllowRegionSelection() {
    return GetAllowRegionSelection();
  }

  private void SwigDirectorSetAllowRegionSelection(bool allow) {
    SetAllowRegionSelection(allow);
  }

  private int SwigDirectorGetHighlightMode() {
    return (int)GetHighlightMode();
  }

  private void SwigDirectorSetHighlightMode(int m) {
    SetHighlightMode((HSelectionHighlightMode)m);
  }

  private void SwigDirectorSetHighlightTransparency(float trans) {
    SetHighlightTransparency(trans);
  }

  private MVO_POINTER_SIZED_INT SwigDirectorGetSelectionSegment() {
    return GetSelectionSegment();
  }

  private bool SwigDirectorGetIsSelection(MVO_POINTER_SIZED_INT key) {
    return GetIsSelection(key);
  }

  private bool SwigDirectorGetReferenceSelection() {
    return GetReferenceSelection();
  }

  private void SwigDirectorSetReferenceSelection(bool ref_sel) {
    SetReferenceSelection(ref_sel);
  }

  private void SwigDirectorSetReferenceSelectionType(int type) {
    SetReferenceSelectionType((HRefSelType)type);
  }

  private int SwigDirectorGetReferenceSelectionType() {
    return (int)GetReferenceSelectionType();
  }

  private void SwigDirectorUpdateHighlightStyle() {
    UpdateHighlightStyle();
  }

  private bool SwigDirectorGetSubentityFaceSelection() {
    return GetSubentityFaceSelection();
  }

  private void SwigDirectorSetSubentityFaceSelection(bool select) {
    SetSubentityFaceSelection(select);
  }

  private bool SwigDirectorGetSubentityEdgeSelection() {
    return GetSubentityEdgeSelection();
  }

  private void SwigDirectorSetSubentityEdgeSelection(bool select) {
    SetSubentityEdgeSelection(select);
  }

  private bool SwigDirectorGetSubentityVertexSelection() {
    return GetSubentityVertexSelection();
  }

  private void SwigDirectorSetSubentityVertexSelection(bool select) {
    SetSubentityVertexSelection(select);
  }

  private void SwigDirectorSetAllowSubentityDeselection(bool allow) {
    SetAllowSubentityDeselection(allow);
  }

  private bool SwigDirectorGetAllowSubentityDeselection() {
    return GetAllowSubentityDeselection();
  }

  private void SwigDirectorSetSubentityTracking(bool allow) {
    SetSubentityTracking(allow);
  }

  private bool SwigDirectorGetSubentityTracking() {
    return GetSubentityTracking();
  }

  private void SwigDirectorSetSelectWillNotify(bool notify) {
    SetSelectWillNotify(notify);
  }

  private bool SwigDirectorGetSelectWillNotify() {
    return GetSelectWillNotify();
  }

  public delegate void SwigDelegateHSelectionSet_0(bool force_flush);
  public delegate void SwigDelegateHSelectionSet_1();
  public delegate void SwigDelegateHSelectionSet_2();
  public delegate void SwigDelegateHSelectionSet_3(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_4(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys);
  public delegate void SwigDelegateHSelectionSet_5(IntPtr new_sel, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_6(IntPtr new_sel);
  public delegate void SwigDelegateHSelectionSet_7(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_8(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_9(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2);
  public delegate void SwigDelegateHSelectionSet_10(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1);
  public delegate void SwigDelegateHSelectionSet_11(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces);
  public delegate void SwigDelegateHSelectionSet_12(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count);
  public delegate void SwigDelegateHSelectionSet_13(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_14(MVO_POINTER_SIZED_INT key, string segpath, MVO_POINTER_SIZED_INT include_key, MVO_POINTER_SIZED_INT includer_key);
  public delegate void SwigDelegateHSelectionSet_15(MVO_POINTER_SIZED_INT key, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_16(MVO_POINTER_SIZED_INT key);
  public delegate void SwigDelegateHSelectionSet_17(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_18(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys);
  public delegate void SwigDelegateHSelectionSet_19(IntPtr remove_sel, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_20(IntPtr remove_sel);
  public delegate void SwigDelegateHSelectionSet_21(IntPtr oShell, int region, bool emit_messag);
  public delegate void SwigDelegateHSelectionSet_22(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_23(IntPtr oShell, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region);
  public delegate void SwigDelegateHSelectionSet_24(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message);
  public delegate void SwigDelegateHSelectionSet_25(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2);
  public delegate bool SwigDelegateHSelectionSet_26(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2, bool emit_message);
  public delegate bool SwigDelegateHSelectionSet_27(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex2);
  public delegate bool SwigDelegateHSelectionSet_28(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] vertex1);
  public delegate bool SwigDelegateHSelectionSet_29(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=3)]int[] faces);
  public delegate bool SwigDelegateHSelectionSet_30(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int count);
  public delegate bool SwigDelegateHSelectionSet_31(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, bool emit_message);
  public delegate bool SwigDelegateHSelectionSet_32(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys);
  public delegate bool SwigDelegateHSelectionSet_33();
  public delegate void SwigDelegateHSelectionSet_34(bool yesno);
  public delegate bool SwigDelegateHSelectionSet_35();
  public delegate void SwigDelegateHSelectionSet_36(bool yesno);
  public delegate int SwigDelegateHSelectionSet_37();
  public delegate void SwigDelegateHSelectionSet_38(bool yesno);
  public delegate void SwigDelegateHSelectionSet_39(int edge_state);
  public delegate void SwigDelegateHSelectionSet_40(int face_state);
  public delegate int SwigDelegateHSelectionSet_41();
  public delegate void SwigDelegateHSelectionSet_42();
  public delegate bool SwigDelegateHSelectionSet_43(MVO_POINTER_SIZED_INT key);
  public delegate bool SwigDelegateHSelectionSet_44(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys);
  public delegate bool SwigDelegateHSelectionSet_45(IntPtr item);
  public delegate bool SwigDelegateHSelectionSet_46(MVO_POINTER_SIZED_INT key, int num_include_keys, [MarshalAs(UnmanagedType.LPArray,SizeParamIndex=1)]MVO_POINTER_SIZED_INT[] include_keys, int region);
  public delegate bool SwigDelegateHSelectionSet_47(MVO_POINTER_SIZED_INT segment_key);
  public delegate void SwigDelegateHSelectionSet_48(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_49(bool grayScale);
  public delegate void SwigDelegateHSelectionSet_50(bool Invisible);
  public delegate bool SwigDelegateHSelectionSet_51();
  public delegate void SwigDelegateHSelectionSet_52(bool allowDisplacement);
  public delegate bool SwigDelegateHSelectionSet_53();
  public delegate void SwigDelegateHSelectionSet_54(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_55(IntPtr rgb);
  public delegate void SwigDelegateHSelectionSet_56(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_57(IntPtr rgb);
  public delegate void SwigDelegateHSelectionSet_58(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_59(IntPtr rgb);
  public delegate void SwigDelegateHSelectionSet_60(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_61(IntPtr rgb);
  public delegate void SwigDelegateHSelectionSet_62(IntPtr rgba);
  public delegate void SwigDelegateHSelectionSet_63(float weight);
  public delegate float SwigDelegateHSelectionSet_64();
  public delegate void SwigDelegateHSelectionSet_65(float size);
  public delegate float SwigDelegateHSelectionSet_66();
  public delegate MVO_POINTER_SIZED_INT SwigDelegateHSelectionSet_67(uint index);
  public delegate bool SwigDelegateHSelectionSet_68(MVO_POINTER_SIZED_INT[] out_array);
  public delegate void SwigDelegateHSelectionSet_69();
  public delegate bool SwigDelegateHSelectionSet_70(bool emit_message);
  public delegate bool SwigDelegateHSelectionSet_71();
  public delegate bool SwigDelegateHSelectionSet_72();
  public delegate void SwigDelegateHSelectionSet_73(bool allow);
  public delegate bool SwigDelegateHSelectionSet_74();
  public delegate void SwigDelegateHSelectionSet_75(bool allow);
  public delegate int SwigDelegateHSelectionSet_76();
  public delegate void SwigDelegateHSelectionSet_77(int level);
  public delegate bool SwigDelegateHSelectionSet_78();
  public delegate void SwigDelegateHSelectionSet_79(bool allow);
  public delegate bool SwigDelegateHSelectionSet_80();
  public delegate void SwigDelegateHSelectionSet_81(bool allow);
  public delegate int SwigDelegateHSelectionSet_82();
  public delegate void SwigDelegateHSelectionSet_83(int m);
  public delegate void SwigDelegateHSelectionSet_84(float trans);
  public delegate MVO_POINTER_SIZED_INT SwigDelegateHSelectionSet_85();
  public delegate bool SwigDelegateHSelectionSet_86(MVO_POINTER_SIZED_INT key);
  public delegate bool SwigDelegateHSelectionSet_87();
  public delegate void SwigDelegateHSelectionSet_88(bool ref_sel);
  public delegate void SwigDelegateHSelectionSet_89(int type);
  public delegate int SwigDelegateHSelectionSet_90();
  public delegate void SwigDelegateHSelectionSet_91();
  public delegate bool SwigDelegateHSelectionSet_92();
  public delegate void SwigDelegateHSelectionSet_93(bool select);
  public delegate bool SwigDelegateHSelectionSet_94();
  public delegate void SwigDelegateHSelectionSet_95(bool select);
  public delegate bool SwigDelegateHSelectionSet_96();
  public delegate void SwigDelegateHSelectionSet_97(bool select);
  public delegate void SwigDelegateHSelectionSet_98(bool allow);
  public delegate bool SwigDelegateHSelectionSet_99();
  public delegate void SwigDelegateHSelectionSet_100(bool allow);
  public delegate bool SwigDelegateHSelectionSet_101();
  public delegate void SwigDelegateHSelectionSet_102(bool notify);
  public delegate bool SwigDelegateHSelectionSet_103();

  private SwigDelegateHSelectionSet_0 swigDelegate0;
  private SwigDelegateHSelectionSet_1 swigDelegate1;
  private SwigDelegateHSelectionSet_2 swigDelegate2;
  private SwigDelegateHSelectionSet_3 swigDelegate3;
  private SwigDelegateHSelectionSet_4 swigDelegate4;
  private SwigDelegateHSelectionSet_5 swigDelegate5;
  private SwigDelegateHSelectionSet_6 swigDelegate6;
  private SwigDelegateHSelectionSet_7 swigDelegate7;
  private SwigDelegateHSelectionSet_8 swigDelegate8;
  private SwigDelegateHSelectionSet_9 swigDelegate9;
  private SwigDelegateHSelectionSet_10 swigDelegate10;
  private SwigDelegateHSelectionSet_11 swigDelegate11;
  private SwigDelegateHSelectionSet_12 swigDelegate12;
  private SwigDelegateHSelectionSet_13 swigDelegate13;
  private SwigDelegateHSelectionSet_14 swigDelegate14;
  private SwigDelegateHSelectionSet_15 swigDelegate15;
  private SwigDelegateHSelectionSet_16 swigDelegate16;
  private SwigDelegateHSelectionSet_17 swigDelegate17;
  private SwigDelegateHSelectionSet_18 swigDelegate18;
  private SwigDelegateHSelectionSet_19 swigDelegate19;
  private SwigDelegateHSelectionSet_20 swigDelegate20;
  private SwigDelegateHSelectionSet_21 swigDelegate21;
  private SwigDelegateHSelectionSet_22 swigDelegate22;
  private SwigDelegateHSelectionSet_23 swigDelegate23;
  private SwigDelegateHSelectionSet_24 swigDelegate24;
  private SwigDelegateHSelectionSet_25 swigDelegate25;
  private SwigDelegateHSelectionSet_26 swigDelegate26;
  private SwigDelegateHSelectionSet_27 swigDelegate27;
  private SwigDelegateHSelectionSet_28 swigDelegate28;
  private SwigDelegateHSelectionSet_29 swigDelegate29;
  private SwigDelegateHSelectionSet_30 swigDelegate30;
  private SwigDelegateHSelectionSet_31 swigDelegate31;
  private SwigDelegateHSelectionSet_32 swigDelegate32;
  private SwigDelegateHSelectionSet_33 swigDelegate33;
  private SwigDelegateHSelectionSet_34 swigDelegate34;
  private SwigDelegateHSelectionSet_35 swigDelegate35;
  private SwigDelegateHSelectionSet_36 swigDelegate36;
  private SwigDelegateHSelectionSet_37 swigDelegate37;
  private SwigDelegateHSelectionSet_38 swigDelegate38;
  private SwigDelegateHSelectionSet_39 swigDelegate39;
  private SwigDelegateHSelectionSet_40 swigDelegate40;
  private SwigDelegateHSelectionSet_41 swigDelegate41;
  private SwigDelegateHSelectionSet_42 swigDelegate42;
  private SwigDelegateHSelectionSet_43 swigDelegate43;
  private SwigDelegateHSelectionSet_44 swigDelegate44;
  private SwigDelegateHSelectionSet_45 swigDelegate45;
  private SwigDelegateHSelectionSet_46 swigDelegate46;
  private SwigDelegateHSelectionSet_47 swigDelegate47;
  private SwigDelegateHSelectionSet_48 swigDelegate48;
  private SwigDelegateHSelectionSet_49 swigDelegate49;
  private SwigDelegateHSelectionSet_50 swigDelegate50;
  private SwigDelegateHSelectionSet_51 swigDelegate51;
  private SwigDelegateHSelectionSet_52 swigDelegate52;
  private SwigDelegateHSelectionSet_53 swigDelegate53;
  private SwigDelegateHSelectionSet_54 swigDelegate54;
  private SwigDelegateHSelectionSet_55 swigDelegate55;
  private SwigDelegateHSelectionSet_56 swigDelegate56;
  private SwigDelegateHSelectionSet_57 swigDelegate57;
  private SwigDelegateHSelectionSet_58 swigDelegate58;
  private SwigDelegateHSelectionSet_59 swigDelegate59;
  private SwigDelegateHSelectionSet_60 swigDelegate60;
  private SwigDelegateHSelectionSet_61 swigDelegate61;
  private SwigDelegateHSelectionSet_62 swigDelegate62;
  private SwigDelegateHSelectionSet_63 swigDelegate63;
  private SwigDelegateHSelectionSet_64 swigDelegate64;
  private SwigDelegateHSelectionSet_65 swigDelegate65;
  private SwigDelegateHSelectionSet_66 swigDelegate66;
  private SwigDelegateHSelectionSet_67 swigDelegate67;
  private SwigDelegateHSelectionSet_68 swigDelegate68;
  private SwigDelegateHSelectionSet_69 swigDelegate69;
  private SwigDelegateHSelectionSet_70 swigDelegate70;
  private SwigDelegateHSelectionSet_71 swigDelegate71;
  private SwigDelegateHSelectionSet_72 swigDelegate72;
  private SwigDelegateHSelectionSet_73 swigDelegate73;
  private SwigDelegateHSelectionSet_74 swigDelegate74;
  private SwigDelegateHSelectionSet_75 swigDelegate75;
  private SwigDelegateHSelectionSet_76 swigDelegate76;
  private SwigDelegateHSelectionSet_77 swigDelegate77;
  private SwigDelegateHSelectionSet_78 swigDelegate78;
  private SwigDelegateHSelectionSet_79 swigDelegate79;
  private SwigDelegateHSelectionSet_80 swigDelegate80;
  private SwigDelegateHSelectionSet_81 swigDelegate81;
  private SwigDelegateHSelectionSet_82 swigDelegate82;
  private SwigDelegateHSelectionSet_83 swigDelegate83;
  private SwigDelegateHSelectionSet_84 swigDelegate84;
  private SwigDelegateHSelectionSet_85 swigDelegate85;
  private SwigDelegateHSelectionSet_86 swigDelegate86;
  private SwigDelegateHSelectionSet_87 swigDelegate87;
  private SwigDelegateHSelectionSet_88 swigDelegate88;
  private SwigDelegateHSelectionSet_89 swigDelegate89;
  private SwigDelegateHSelectionSet_90 swigDelegate90;
  private SwigDelegateHSelectionSet_91 swigDelegate91;
  private SwigDelegateHSelectionSet_92 swigDelegate92;
  private SwigDelegateHSelectionSet_93 swigDelegate93;
  private SwigDelegateHSelectionSet_94 swigDelegate94;
  private SwigDelegateHSelectionSet_95 swigDelegate95;
  private SwigDelegateHSelectionSet_96 swigDelegate96;
  private SwigDelegateHSelectionSet_97 swigDelegate97;
  private SwigDelegateHSelectionSet_98 swigDelegate98;
  private SwigDelegateHSelectionSet_99 swigDelegate99;
  private SwigDelegateHSelectionSet_100 swigDelegate100;
  private SwigDelegateHSelectionSet_101 swigDelegate101;
  private SwigDelegateHSelectionSet_102 swigDelegate102;
  private SwigDelegateHSelectionSet_103 swigDelegate103;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes1 = new Type[] {  };
  private static Type[] swigMethodTypes2 = new Type[] {  };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(bool) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(HSelectionItem), typeof(bool) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(HSelectionItem) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(HShellObject), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]), typeof(bool) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(string), typeof(MVO_POINTER_SIZED_INT), typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes14 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(string), typeof(MVO_POINTER_SIZED_INT), typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes15 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(bool) };
  private static Type[] swigMethodTypes16 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes17 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(bool) };
  private static Type[] swigMethodTypes18 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]) };
  private static Type[] swigMethodTypes19 = new Type[] { typeof(HSelectionItem), typeof(bool) };
  private static Type[] swigMethodTypes20 = new Type[] { typeof(HSelectionItem) };
  private static Type[] swigMethodTypes21 = new Type[] { typeof(HShellObject), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes22 = new Type[] { typeof(HShellObject), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes23 = new Type[] { typeof(HShellObject), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int) };
  private static Type[] swigMethodTypes24 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]), typeof(bool) };
  private static Type[] swigMethodTypes25 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]) };
  private static Type[] swigMethodTypes26 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]), typeof(bool) };
  private static Type[] swigMethodTypes27 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]), typeof(int[]) };
  private static Type[] swigMethodTypes28 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]), typeof(int[]) };
  private static Type[] swigMethodTypes29 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int), typeof(int[]) };
  private static Type[] swigMethodTypes30 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int) };
  private static Type[] swigMethodTypes31 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(bool) };
  private static Type[] swigMethodTypes32 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]) };
  private static Type[] swigMethodTypes33 = new Type[] {  };
  private static Type[] swigMethodTypes34 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes35 = new Type[] {  };
  private static Type[] swigMethodTypes36 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes37 = new Type[] {  };
  private static Type[] swigMethodTypes38 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes39 = new Type[] { typeof(HRegionEdgeHighlightMode) };
  private static Type[] swigMethodTypes40 = new Type[] { typeof(HRegionFaceHighlightMode) };
  private static Type[] swigMethodTypes41 = new Type[] {  };
  private static Type[] swigMethodTypes42 = new Type[] {  };
  private static Type[] swigMethodTypes43 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes44 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]) };
  private static Type[] swigMethodTypes45 = new Type[] { typeof(HSelectionItem) };
  private static Type[] swigMethodTypes46 = new Type[] { typeof(MVO_POINTER_SIZED_INT), typeof(int), typeof(MVO_POINTER_SIZED_INT[]), typeof(int) };
  private static Type[] swigMethodTypes47 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes48 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes49 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes50 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes51 = new Type[] {  };
  private static Type[] swigMethodTypes52 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes53 = new Type[] {  };
  private static Type[] swigMethodTypes54 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes55 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes56 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes57 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes58 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes59 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes60 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes61 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes62 = new Type[] { typeof(HPixelRGBA) };
  private static Type[] swigMethodTypes63 = new Type[] { typeof(float) };
  private static Type[] swigMethodTypes64 = new Type[] {  };
  private static Type[] swigMethodTypes65 = new Type[] { typeof(float) };
  private static Type[] swigMethodTypes66 = new Type[] {  };
  private static Type[] swigMethodTypes67 = new Type[] { typeof(uint) };
  private static Type[] swigMethodTypes68 = new Type[] { typeof(MVO_POINTER_SIZED_INT[]) };
  private static Type[] swigMethodTypes69 = new Type[] {  };
  private static Type[] swigMethodTypes70 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes71 = new Type[] {  };
  private static Type[] swigMethodTypes72 = new Type[] {  };
  private static Type[] swigMethodTypes73 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes74 = new Type[] {  };
  private static Type[] swigMethodTypes75 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes76 = new Type[] {  };
  private static Type[] swigMethodTypes77 = new Type[] { typeof(HSelectLevel) };
  private static Type[] swigMethodTypes78 = new Type[] {  };
  private static Type[] swigMethodTypes79 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes80 = new Type[] {  };
  private static Type[] swigMethodTypes81 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes82 = new Type[] {  };
  private static Type[] swigMethodTypes83 = new Type[] { typeof(HSelectionHighlightMode) };
  private static Type[] swigMethodTypes84 = new Type[] { typeof(float) };
  private static Type[] swigMethodTypes85 = new Type[] {  };
  private static Type[] swigMethodTypes86 = new Type[] { typeof(MVO_POINTER_SIZED_INT) };
  private static Type[] swigMethodTypes87 = new Type[] {  };
  private static Type[] swigMethodTypes88 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes89 = new Type[] { typeof(HRefSelType) };
  private static Type[] swigMethodTypes90 = new Type[] {  };
  private static Type[] swigMethodTypes91 = new Type[] {  };
  private static Type[] swigMethodTypes92 = new Type[] {  };
  private static Type[] swigMethodTypes93 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes94 = new Type[] {  };
  private static Type[] swigMethodTypes95 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes96 = new Type[] {  };
  private static Type[] swigMethodTypes97 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes98 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes99 = new Type[] {  };
  private static Type[] swigMethodTypes100 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes101 = new Type[] {  };
  private static Type[] swigMethodTypes102 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes103 = new Type[] {  };
}
