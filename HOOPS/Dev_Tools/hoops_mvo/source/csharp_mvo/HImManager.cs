/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HImManager : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HImManager(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HImManager obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HImManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HImManager(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HImManager() : this(HCSMVOPINVOKE.new_HImManager(), true) {
  }

  public virtual void RegisterCallbacks() {
    HCSMVOPINVOKE.HImManager_RegisterCallbacks(swigCPtr);
  }

  public virtual void RegisterOneCallback(string callback_name, IntPtr callback) {
    HCSMVOPINVOKE.HImManager_RegisterOneCallback(swigCPtr, callback_name, callback);
  }

  public virtual void SetCallback(MVO_POINTER_SIZED_INT segment_key, string callback_type, string callback_name) {
    HCSMVOPINVOKE.HImManager_SetCallback__SWIG_0(swigCPtr, segment_key, callback_type, callback_name);
  }

  public virtual void SetCallback(string callback_type, string callback_name) {
    HCSMVOPINVOKE.HImManager_SetCallback__SWIG_1(swigCPtr, callback_type, callback_name);
  }

  public virtual void UnSetOneCallback(MVO_POINTER_SIZED_INT segment_key, string callback_type) {
    HCSMVOPINVOKE.HImManager_UnSetOneCallback__SWIG_0(swigCPtr, segment_key, callback_type);
  }

  public virtual void UnSetOneCallback(string callback_type) {
    HCSMVOPINVOKE.HImManager_UnSetOneCallback__SWIG_1(swigCPtr, callback_type);
  }

  public virtual void ShowCallback(string callback_type, System.Text.StringBuilder callback) {
    HCSMVOPINVOKE.HImManager_ShowCallback(swigCPtr, callback_type, callback);
  }

  public static HImManager GetCurrentHImManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HImManager_GetCurrentHImManager();
    HImManager ret = (cPtr == IntPtr.Zero) ? null : new HImManager(cPtr, false);
    return ret;
  }

}
