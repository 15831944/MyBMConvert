/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HSnapGrid : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HSnapGrid(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HSnapGrid obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HSnapGrid() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HSnapGrid(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HSnapGrid(HBaseView pHView) : this(HCSMVOPINVOKE.new_HSnapGrid(HBaseView.getCPtr(pHView)), true) {
  }

  public bool Create(HPoint origin, HPoint ref1, HPoint ref2, int count1, int count2) {
    bool ret = HCSMVOPINVOKE.HSnapGrid_Create__SWIG_0(swigCPtr, HPoint.getCPtr(origin), HPoint.getCPtr(ref1), HPoint.getCPtr(ref2), count1, count2);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Create(HPoint origin, HPoint ref1, HPoint ref2, int count1) {
    bool ret = HCSMVOPINVOKE.HSnapGrid_Create__SWIG_1(swigCPtr, HPoint.getCPtr(origin), HPoint.getCPtr(ref1), HPoint.getCPtr(ref2), count1);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Create(HPoint origin, HPoint ref1, HPoint ref2) {
    bool ret = HCSMVOPINVOKE.HSnapGrid_Create__SWIG_2(swigCPtr, HPoint.getCPtr(origin), HPoint.getCPtr(ref1), HPoint.getCPtr(ref2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetOnTop(bool true_false) {
    HCSMVOPINVOKE.HSnapGrid_SetOnTop(swigCPtr, true_false);
  }

  public bool GetOnTop() {
    bool ret = HCSMVOPINVOKE.HSnapGrid_GetOnTop(swigCPtr);
    return ret;
  }

  public bool GetSnappedViewpointPos(HPoint in_out) {
    bool ret = HCSMVOPINVOKE.HSnapGrid_GetSnappedViewpointPos(swigCPtr, HPoint.getCPtr(in_out));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetSnappedWorldPos(HPoint in_out) {
    bool ret = HCSMVOPINVOKE.HSnapGrid_GetSnappedWorldPos(swigCPtr, HPoint.getCPtr(in_out));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVO_POINTER_SIZED_INT GetGridSegment() {return HCSMVOPINVOKE.HSnapGrid_GetGridSegment(swigCPtr);}

  public MVO_POINTER_SIZED_INT GetGridGeometry() {return HCSMVOPINVOKE.HSnapGrid_GetGridGeometry(swigCPtr);}

}
