/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HPieChart : HBaseGraph {
  private HandleRef swigCPtr;

  public HPieChart(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HPieChartUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HPieChart obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HPieChart() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HPieChart(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HPieChart(MVO_POINTER_SIZED_INT plot_seg) : this(HCSMVOPINVOKE.new_HPieChart(plot_seg), true) {
  }

  public override void SetPlotTitle(string title) {
    HCSMVOPINVOKE.HPieChart_SetPlotTitle(swigCPtr, title);
  }

  public override void SetPlotUnicodeTitle(ushort[] title) {
    HCSMVOPINVOKE.HPieChart_SetPlotUnicodeTitle(swigCPtr, title);
  }

  public int AddPieSlice(double size) {
    int ret = HCSMVOPINVOKE.HPieChart_AddPieSlice(swigCPtr, size);
    return ret;
  }

  public void RemovePieSlice(int slice_id) {
    HCSMVOPINVOKE.HPieChart_RemovePieSlice(swigCPtr, slice_id);
  }

  public void SetPieColorMap(string map) {
    HCSMVOPINVOKE.HPieChart_SetPieColorMap(swigCPtr, map);
  }

  public void GetPieColorMap(System.Text.StringBuilder map) {
    HCSMVOPINVOKE.HPieChart_GetPieColorMap(swigCPtr, map);
  }

  public void SetPieColorMapByValue(int count, float[] values, string color_space) {
    HCSMVOPINVOKE.HPieChart_SetPieColorMapByValue__SWIG_0(swigCPtr, count, values, color_space);
  }

  public void SetPieColorMapByValue(int count, float[] values) {
    HCSMVOPINVOKE.HPieChart_SetPieColorMapByValue__SWIG_1(swigCPtr, count, values);
  }

  public void GetPieColorMapByValue(int[] count, float[] values, System.Text.StringBuilder color_space) {
    HCSMVOPINVOKE.HPieChart_GetPieColorMapByValue(swigCPtr, count, values, color_space);
  }

  public void AddPieSliceLabel(int slice_id, string str) {
    HCSMVOPINVOKE.HPieChart_AddPieSliceLabel(swigCPtr, slice_id, str);
  }

  public void AddPieSliceUnicodeLabel(int slice_id, ushort[] str) {
    HCSMVOPINVOKE.HPieChart_AddPieSliceUnicodeLabel(swigCPtr, slice_id, str);
  }

  public void RemovePieSliceLabel(int slice_id) {
    HCSMVOPINVOKE.HPieChart_RemovePieSliceLabel(swigCPtr, slice_id);
  }

  public void GetPieSliceLabelContents(int slice_id, System.Text.StringBuilder str) {
    HCSMVOPINVOKE.HPieChart_GetPieSliceLabelContents(swigCPtr, slice_id, str);
  }

  public void GetPieSliceUnicodeLabelContents(int slice_id, ushort[] str) {
    HCSMVOPINVOKE.HPieChart_GetPieSliceUnicodeLabelContents(swigCPtr, slice_id, str);
  }

  public void SetPieSliceLabelTextFont(int slice_id, string font) {
    HCSMVOPINVOKE.HPieChart_SetPieSliceLabelTextFont(swigCPtr, slice_id, font);
  }

  public void GetPieSliceLabelTextFont(int slice_id, System.Text.StringBuilder font) {
    HCSMVOPINVOKE.HPieChart_GetPieSliceLabelTextFont(swigCPtr, slice_id, font);
  }

  public bool GetPieEdgeVisibility() {
    bool ret = HCSMVOPINVOKE.HPieChart_GetPieEdgeVisibility(swigCPtr);
    return ret;
  }

  public void SetPieEdgeVisibility(bool vis) {
    HCSMVOPINVOKE.HPieChart_SetPieEdgeVisibility(swigCPtr, vis);
  }

  public void GetPieEdgeColor(System.Text.StringBuilder color) {
    HCSMVOPINVOKE.HPieChart_GetPieEdgeColor(swigCPtr, color);
  }

  public void SetPieEdgeColor(string color) {
    HCSMVOPINVOKE.HPieChart_SetPieEdgeColor(swigCPtr, color);
  }

  public double GetPieRadius() {
    double ret = HCSMVOPINVOKE.HPieChart_GetPieRadius(swigCPtr);
    return ret;
  }

  public void SetPieRadius(double radius) {
    HCSMVOPINVOKE.HPieChart_SetPieRadius(swigCPtr, radius);
  }

  public new void SetPlotOrigin(HPoint origin) {
    HCSMVOPINVOKE.HPieChart_SetPlotOrigin(swigCPtr, HPoint.getCPtr(origin));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update() {
    HCSMVOPINVOKE.HPieChart_Update(swigCPtr);
  }

}
