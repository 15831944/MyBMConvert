/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HEventListener : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HEventListener(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HEventListener obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HEventListener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HEventListener(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HEventListener() : this(HCSMVOPINVOKE.new_HEventListener(), true) {
    SwigDirectorConnect();
  }

  public void ConvertToManager() {
    HCSMVOPINVOKE.HEventListener_ConvertToManager(swigCPtr);
  }

  public virtual HEventListener CreateListenerManager() {
    IntPtr cPtr = ((this.GetType() == typeof(HEventListener)) ? HCSMVOPINVOKE.HEventListener_CreateListenerManager(swigCPtr) : HCSMVOPINVOKE.HEventListener_CreateListenerManagerSwigExplicitHEventListener(swigCPtr));
    HEventListener ret = (cPtr == IntPtr.Zero) ? null : new HEventListener(cPtr, false);
    return ret;
  }

  public HEventListenerManager GetEventListenerManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HEventListener_GetEventListenerManager(swigCPtr);
    HEventListenerManager ret = (cPtr == IntPtr.Zero) ? null : new HEventListenerManager(cPtr, false);
    return ret;
  }

  public void SetRequestedPriority(int v) {
    HCSMVOPINVOKE.HEventListener_SetRequestedPriority(swigCPtr, v);
  }

  public int GetRequestedPriority() {
    int ret = HCSMVOPINVOKE.HEventListener_GetRequestedPriority(swigCPtr);
    return ret;
  }

  protected HEventListenerManager m_pEventListenerManager {
    set {
      HCSMVOPINVOKE.HEventListener_m_pEventListenerManager_set(swigCPtr, HEventListenerManager.getCPtr(value));
    } 
    get {
      IntPtr cPtr = HCSMVOPINVOKE.HEventListener_m_pEventListenerManager_get(swigCPtr);
      HEventListenerManager ret = (cPtr == IntPtr.Zero) ? null : new HEventListenerManager(cPtr, false);
      return ret;
    } 
  }

  protected int m_RequestedPriority {
    set {
      HCSMVOPINVOKE.HEventListener_m_RequestedPriority_set(swigCPtr, value);
    } 
    get {
      int ret = HCSMVOPINVOKE.HEventListener_m_RequestedPriority_get(swigCPtr);
      return ret;
    } 
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("CreateListenerManager", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHEventListener_0(SwigDirectorCreateListenerManager);
    HCSMVOPINVOKE.HEventListener_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HEventListener));
    return hasDerivedMethod;
  }

  private IntPtr SwigDirectorCreateListenerManager() {
    return HEventListener.getCPtr(CreateListenerManager()).Handle;
  }

  public delegate IntPtr SwigDelegateHEventListener_0();

  private SwigDelegateHEventListener_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] {  };
}
