/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HDB : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HDB(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HDB obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HDB() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HDB(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public HDB() : this(HCSMVOPINVOKE.new_HDB(), true) {
    SwigDirectorConnect();
  }

  public virtual void Init() {
    if (this.GetType() == typeof(HDB)) HCSMVOPINVOKE.HDB_Init(swigCPtr); else HCSMVOPINVOKE.HDB_InitSwigExplicitHDB(swigCPtr);
  }

  public static HDB GetHDB() {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_GetHDB();
    HDB ret = (cPtr == IntPtr.Zero) ? null : new HDB(cPtr, false);
    return ret;
  }

  public static void IncrementInstanceCount() {
    HCSMVOPINVOKE.HDB_IncrementInstanceCount();
  }

  public static void DecrementInstanceCount() {
    HCSMVOPINVOKE.HDB_DecrementInstanceCount();
  }

  public static void SetInstanceBase(string s) {
    HCSMVOPINVOKE.HDB_SetInstanceBase(s);
  }

  public static string GetInstanceBase() {
    string ret = HCSMVOPINVOKE.HDB_GetInstanceBase();
    return ret;
  }

  public static void SetDriverType(string s) {
    HCSMVOPINVOKE.HDB_SetDriverType(s);
  }

  public static string GetDriverType() {
    string ret = HCSMVOPINVOKE.HDB_GetDriverType();
    return ret;
  }

  public static bool GetCleanInclude() {
    bool ret = HCSMVOPINVOKE.HDB_GetCleanInclude();
    return ret;
  }

  public static void SetCleanInclude(bool value) {
    HCSMVOPINVOKE.HDB_SetCleanInclude(value);
  }

  public static int GetInstanceCount() {
    int ret = HCSMVOPINVOKE.HDB_GetInstanceCount();
    return ret;
  }

  public static int GetUniqueID() {
    int ret = HCSMVOPINVOKE.HDB_GetUniqueID();
    return ret;
  }

  public static void SetInstanceCount(int count) {
    HCSMVOPINVOKE.HDB_SetInstanceCount(count);
  }

  public static HImManager GetHImManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_GetHImManager();
    HImManager ret = (cPtr == IntPtr.Zero) ? null : new HImManager(cPtr, false);
    return ret;
  }

  public static HImManager SetHImManager(HImManager manager) {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_SetHImManager(HImManager.getCPtr(manager));
    HImManager ret = (cPtr == IntPtr.Zero) ? null : new HImManager(cPtr, false);
    return ret;
  }

  public static HIOManager GetHIOManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_GetHIOManager();
    HIOManager ret = (cPtr == IntPtr.Zero) ? null : new HIOManager(cPtr, false);
    return ret;
  }

  public static HIOManager SetHIOManager(HIOManager manager) {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_SetHIOManager(HIOManager.getCPtr(manager));
    HIOManager ret = (cPtr == IntPtr.Zero) ? null : new HIOManager(cPtr, false);
    return ret;
  }

  public static HMaterialLibrary GetMaterialLibrary() {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_GetMaterialLibrary();
    HMaterialLibrary ret = (cPtr == IntPtr.Zero) ? null : new HMaterialLibrary(cPtr, false);
    return ret;
  }

  public static void SetMaterialLibrary(HMaterialLibrary library) {
    HCSMVOPINVOKE.HDB_SetMaterialLibrary(HMaterialLibrary.getCPtr(library));
  }

  public static HTManager GetHTManager() {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_GetHTManager();
    HTManager ret = (cPtr == IntPtr.Zero) ? null : new HTManager(cPtr, false);
    return ret;
  }

  public static HTManager SetHTManager(HTManager manager) {
    IntPtr cPtr = HCSMVOPINVOKE.HDB_SetHTManager(HTManager.getCPtr(manager));
    HTManager ret = (cPtr == IntPtr.Zero) ? null : new HTManager(cPtr, false);
    return ret;
  }

  public static MVO_POINTER_SIZED_INT GetUniqueIncludeKey() {return HCSMVOPINVOKE.HDB_GetUniqueIncludeKey();}

  public static uint GetNextCookie() {
    uint ret = HCSMVOPINVOKE.HDB_GetNextCookie();
    return ret;
  }

  public static void ReportError(string message, int severity, int category, int specific) {
    HCSMVOPINVOKE.HDB_ReportError__SWIG_0(message, severity, category, specific);
  }

  public static void ReportError(string message, int severity, int category) {
    HCSMVOPINVOKE.HDB_ReportError__SWIG_1(message, severity, category);
  }

  public static void ReportError(string message, int severity) {
    HCSMVOPINVOKE.HDB_ReportError__SWIG_2(message, severity);
  }

  public static void ReportError(string message) {
    HCSMVOPINVOKE.HDB_ReportError__SWIG_3(message);
  }

  public static void EnableErrorManager() {
    HCSMVOPINVOKE.HDB_EnableErrorManager();
  }

  public static void DisableErrorManager() {
    HCSMVOPINVOKE.HDB_DisableErrorManager();
  }

  public static void SetOwnsSystem(bool owns) {
    HCSMVOPINVOKE.HDB_SetOwnsSystem(owns);
  }

  public static bool GetOwnsSystem() {
    bool ret = HCSMVOPINVOKE.HDB_GetOwnsSystem();
    return ret;
  }

  public static void SetIsolatedDrivers(bool isolated) {
    HCSMVOPINVOKE.HDB_SetIsolatedDrivers(isolated);
  }

  public static bool GetIsolatedDrivers() {
    bool ret = HCSMVOPINVOKE.HDB_GetIsolatedDrivers();
    return ret;
  }

  public static void Lock() {
    HCSMVOPINVOKE.HDB_Lock();
  }

  public static void UnLock() {
    HCSMVOPINVOKE.HDB_UnLock();
  }

  public static bool GetPublishExchangeLicenseSet() {
    bool ret = HCSMVOPINVOKE.HDB_GetPublishExchangeLicenseSet();
    return ret;
  }

  public static void SetPublishExchangeLicenseSet(bool isSet) {
    HCSMVOPINVOKE.HDB_SetPublishExchangeLicenseSet(isSet);
  }

  public static bool GetPublishInitialized() {
    bool ret = HCSMVOPINVOKE.HDB_GetPublishInitialized();
    return ret;
  }

  public static void SetPublishInitialized(bool initialized) {
    HCSMVOPINVOKE.HDB_SetPublishInitialized(initialized);
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Init", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateHDB_0(SwigDirectorInit);
    HCSMVOPINVOKE.HDB_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(HDB));
    return hasDerivedMethod;
  }

  private void SwigDirectorInit() {
    Init();
  }

  public delegate void SwigDelegateHDB_0();

  private SwigDelegateHDB_0 swigDelegate0;

  private static Type[] swigMethodTypes0 = new Type[] {  };
}
