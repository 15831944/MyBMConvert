/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUtilityGeomHandle : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public HUtilityGeomHandle(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUtilityGeomHandle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  
  public void owns_memory(bool ownMemory) {
	swigCMemOwn = ownMemory;
  }

  ~HUtilityGeomHandle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUtilityGeomHandle(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static void RegisterCallbacks() {
    HCSMVOPINVOKE.HUtilityGeomHandle_RegisterCallbacks();
  }

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint position, bool edges, int level) {return HCSMVOPINVOKE.HUtilityGeomHandle_Insert__SWIG_0(swigCPtr, HPoint.getCPtr(position), edges, level);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint position, bool edges) {return HCSMVOPINVOKE.HUtilityGeomHandle_Insert__SWIG_1(swigCPtr, HPoint.getCPtr(position), edges);}

  public virtual MVO_POINTER_SIZED_INT Insert(HPoint position) {return HCSMVOPINVOKE.HUtilityGeomHandle_Insert__SWIG_2(swigCPtr, HPoint.getCPtr(position));}

  public virtual void SetupGeomHandleSegment(bool edges) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupGeomHandleSegment(swigCPtr, edges);
  }

  public virtual void ConstrainToPlane(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2, HPoint p3, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToPlane__SWIG_0(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2), HPoint.getCPtr(p3), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToPlane(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2, HPoint p3) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToPlane__SWIG_1(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2), HPoint.getCPtr(p3));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToViewplane(MVO_POINTER_SIZED_INT handlekey, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToViewplane__SWIG_0(swigCPtr, handlekey, HBaseView.getCPtr(view));
  }

  public virtual void ConstrainToViewplane(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToViewplane__SWIG_1(swigCPtr, handlekey);
  }

  public virtual void ConstrainToRay(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToRay__SWIG_0(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToRay(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToRay__SWIG_1(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToRotationVector(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToRotationVector__SWIG_0(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToRotationVector(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToRotationVector__SWIG_1(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToScale(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToScale__SWIG_0(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToScale(MVO_POINTER_SIZED_INT handlekey, HPoint p1, HPoint p2) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToScale__SWIG_1(swigCPtr, handlekey, HPoint.getCPtr(p1), HPoint.getCPtr(p2));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ConstrainToOnOff(MVO_POINTER_SIZED_INT handlekey, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToOnOff__SWIG_0(swigCPtr, handlekey, HBaseView.getCPtr(view));
  }

  public virtual void ConstrainToOnOff(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ConstrainToOnOff__SWIG_1(swigCPtr, handlekey);
  }

  public virtual void Move(MVO_POINTER_SIZED_INT handlekey, HPoint newposition, MVO_POINTER_SIZED_INT camerakey, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_Move__SWIG_0(swigCPtr, handlekey, HPoint.getCPtr(newposition), camerakey, HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Move(MVO_POINTER_SIZED_INT handlekey, HPoint newposition, MVO_POINTER_SIZED_INT camerakey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_Move__SWIG_1(swigCPtr, handlekey, HPoint.getCPtr(newposition), camerakey);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ShowBasePosition(MVO_POINTER_SIZED_INT handlekey, HPoint bp) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ShowBasePosition(swigCPtr, handlekey, HPoint.getCPtr(bp));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetConstraintParameters(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_GetConstraintParameters(swigCPtr, handlekey);
  }

  public void Rotate(MVO_POINTER_SIZED_INT handlekey, float rotangle) {
    HCSMVOPINVOKE.HUtilityGeomHandle_Rotate(swigCPtr, handlekey, rotangle);
  }

  public virtual float CalculatePlaneZ(MVO_POINTER_SIZED_INT handlekey, HPoint point) {
    float ret = HCSMVOPINVOKE.HUtilityGeomHandle_CalculatePlaneZ(swigCPtr, handlekey, HPoint.getCPtr(point));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AdjustPositionToRay(MVO_POINTER_SIZED_INT handlekey, HPoint C, HPoint A, HPoint B) {
    HCSMVOPINVOKE.HUtilityGeomHandle_AdjustPositionToRay(swigCPtr, handlekey, HPoint.getCPtr(C), HPoint.getCPtr(A), HPoint.getCPtr(B));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CalculatePositionOnPlane(MVO_POINTER_SIZED_INT handlekey, HPoint p, float a, float b, float c, float d) {
    HCSMVOPINVOKE.HUtilityGeomHandle_CalculatePositionOnPlane(swigCPtr, handlekey, HPoint.getCPtr(p), a, b, c, d);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AdjustPointToRay(MVO_POINTER_SIZED_INT geomhandlekey, HPoint p, MVO_POINTER_SIZED_INT camerasegment, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_AdjustPointToRay(swigCPtr, geomhandlekey, HPoint.getCPtr(p), camerasegment, HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AdjustPositionToPlane(MVO_POINTER_SIZED_INT handlekey, HPoint p, float a, float b, float c, float d, MVO_POINTER_SIZED_INT camerakey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_AdjustPositionToPlane(swigCPtr, handlekey, HPoint.getCPtr(p), a, b, c, d, camerakey);
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static MVO_POINTER_SIZED_INT IsGeomHandle(MVO_POINTER_SIZED_INT key) {return HCSMVOPINVOKE.HUtilityGeomHandle_IsGeomHandle(key);}

  public static bool ContainsGeomHandles(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HUtilityGeomHandle_ContainsGeomHandles(key);
    return ret;
  }

  public virtual void CalculateTransformedPosition(MVO_POINTER_SIZED_INT handlekey, HPoint t, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_CalculateTransformedPosition(swigCPtr, handlekey, HPoint.getCPtr(t), HBaseView.getCPtr(view));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public HConstrainType GetConstraintType(MVO_POINTER_SIZED_INT handlekey) {
    HConstrainType ret = (HConstrainType)HCSMVOPINVOKE.HUtilityGeomHandle_GetConstraintType(swigCPtr, handlekey);
    return ret;
  }

  public virtual void ShowHandle(MVO_POINTER_SIZED_INT handlekey, float sf, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ShowHandle__SWIG_0(swigCPtr, handlekey, sf, HBaseView.getCPtr(view));
  }

  public virtual void ShowHandle(MVO_POINTER_SIZED_INT handlekey, float sf) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ShowHandle__SWIG_1(swigCPtr, handlekey, sf);
  }

  public virtual void ShowHandle(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ShowHandle__SWIG_2(swigCPtr, handlekey);
  }

  public virtual void ResetHandle(MVO_POINTER_SIZED_INT handlekey, float scale, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ResetHandle__SWIG_0(swigCPtr, handlekey, scale, HBaseView.getCPtr(view));
  }

  public virtual void ResetHandle(MVO_POINTER_SIZED_INT handlekey, float scale) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ResetHandle__SWIG_1(swigCPtr, handlekey, scale);
  }

  public virtual void ResetHandle(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ResetHandle__SWIG_2(swigCPtr, handlekey);
  }

  public virtual void Scale(MVO_POINTER_SIZED_INT handlekey, float scalex, float scaley, float scalez) {
    HCSMVOPINVOKE.HUtilityGeomHandle_Scale(swigCPtr, handlekey, scalex, scaley, scalez);
  }

  public virtual void TurnOff(MVO_POINTER_SIZED_INT handlekey) {
    HCSMVOPINVOKE.HUtilityGeomHandle_TurnOff(swigCPtr, handlekey);
  }

  public virtual HPoint GetRotationAxis(MVO_POINTER_SIZED_INT handlekey) {
    IntPtr cPtr = HCSMVOPINVOKE.HUtilityGeomHandle_GetRotationAxis(swigCPtr, handlekey);
    HPoint ret = (cPtr == IntPtr.Zero) ? null : new HPoint(cPtr, false);
    return ret;
  }

  public static void ClearAllHandles(HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_ClearAllHandles(HBaseView.getCPtr(view));
  }

  public static MVO_POINTER_SIZED_INT SelectHandle(HBaseView view, HPoint pos) {return HCSMVOPINVOKE.HUtilityGeomHandle_SelectHandle(HBaseView.getCPtr(view), HPoint.getCPtr(pos));}

  public static MVO_POINTER_SIZED_INT SelectObject(HBaseView view, HPoint pos, MVO_POINTER_SIZED_INT oldkey, bool exclude, float proximity) {return HCSMVOPINVOKE.HUtilityGeomHandle_SelectObject__SWIG_0(HBaseView.getCPtr(view), HPoint.getCPtr(pos), oldkey, exclude, proximity);}

  public static MVO_POINTER_SIZED_INT SelectObject(HBaseView view, HPoint pos, MVO_POINTER_SIZED_INT oldkey, bool exclude) {return HCSMVOPINVOKE.HUtilityGeomHandle_SelectObject__SWIG_1(HBaseView.getCPtr(view), HPoint.getCPtr(pos), oldkey, exclude);}

  public static void SetupObject(MVO_POINTER_SIZED_INT key, HBaseView view, float boxzoom) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupObject__SWIG_0(key, HBaseView.getCPtr(view), boxzoom);
  }

  public static void SetupObject(MVO_POINTER_SIZED_INT key, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupObject__SWIG_1(key, HBaseView.getCPtr(view));
  }

  public static void SetupTextObject(MVO_POINTER_SIZED_INT key, HBaseView view, float boxzoom, float scale) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupTextObject__SWIG_0(key, HBaseView.getCPtr(view), boxzoom, scale);
  }

  public static void SetupTextObject(MVO_POINTER_SIZED_INT key, HBaseView view, float boxzoom) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupTextObject__SWIG_1(key, HBaseView.getCPtr(view), boxzoom);
  }

  public static void SetupTextObject(MVO_POINTER_SIZED_INT key, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupTextObject__SWIG_2(key, HBaseView.getCPtr(view));
  }

  public static void SetupCuttingPlane(MVO_POINTER_SIZED_INT key, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupCuttingPlane(key, HBaseView.getCPtr(view));
  }

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale, bool AddScale, bool AddPlane, bool AddAxismove, bool AddAxisrotate, bool AddViewplaneMove) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_0(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale, AddScale, AddPlane, AddAxismove, AddAxisrotate, AddViewplaneMove);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale, bool AddScale, bool AddPlane, bool AddAxismove, bool AddAxisrotate) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_1(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale, AddScale, AddPlane, AddAxismove, AddAxisrotate);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale, bool AddScale, bool AddPlane, bool AddAxismove) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_2(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale, AddScale, AddPlane, AddAxismove);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale, bool AddScale, bool AddPlane) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_3(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale, AddScale, AddPlane);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale, bool AddScale) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_4(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale, AddScale);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp, bool AddNonUniformScale) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_5(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp), AddNonUniformScale);}

  public static MVO_POINTER_SIZED_INT SetupManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint mp) {return HCSMVOPINVOKE.HUtilityGeomHandle_SetupManipulator__SWIG_6(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(mp));}

  public static void SetupCuttingPlaneManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint midpoint, bool omit_rotate) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_0(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(midpoint), omit_rotate);
  }

  public static void SetupCuttingPlaneManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view, HPoint midpoint) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_1(startkey, HBaseView.getCPtr(view), HPoint.getCPtr(midpoint));
  }

  public static void SetupCuttingPlaneManipulator(MVO_POINTER_SIZED_INT startkey, HBaseView view) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetupCuttingPlaneManipulator__SWIG_2(startkey, HBaseView.getCPtr(view));
  }

  public static MVO_POINTER_SIZED_INT GetMMSegment(MVO_POINTER_SIZED_INT handlekey) {return HCSMVOPINVOKE.HUtilityGeomHandle_GetMMSegment(handlekey);}

  public static void GetCenterPoint(MVO_POINTER_SIZED_INT objectkey, HPoint centerpoint) {
    HCSMVOPINVOKE.HUtilityGeomHandle_GetCenterPoint(objectkey, HPoint.getCPtr(centerpoint));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetVisibilityForAll(MVO_POINTER_SIZED_INT startkey, string visibility) {
    HCSMVOPINVOKE.HUtilityGeomHandle_SetVisibilityForAll(startkey, visibility);
  }

  public HUtilityGeomHandle() : this(HCSMVOPINVOKE.new_HUtilityGeomHandle(), true) {
  }

}
