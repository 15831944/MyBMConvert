/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

#if _M_X64
using MVO_POINTER_SIZED_INT = System.Int64;
using MVO_POINTER_SIZED_UINT = System.UInt64;
using ID_Key = System.Int64;
#else
using MVO_POINTER_SIZED_INT = System.Int32;
using MVO_POINTER_SIZED_UINT = System.UInt32;
using ID_Key = System.Int32;
#endif


public class HUtilityAnnotationMeasure : HUtilityAnnotation {
  private HandleRef swigCPtr;

  public HUtilityAnnotationMeasure(IntPtr cPtr, bool cMemoryOwn) : base(HCSMVOPINVOKE.HUtilityAnnotationMeasureUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(HUtilityAnnotationMeasure obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~HUtilityAnnotationMeasure() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          HCSMVOPINVOKE.delete_HUtilityAnnotationMeasure(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override string GetHType() {
    string ret = HCSMVOPINVOKE.HUtilityAnnotationMeasure_GetHType(swigCPtr);
    return ret;
  }

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_0(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_1(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_2(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_3(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_4(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public override MVO_POINTER_SIZED_INT Insert(HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_5(swigCPtr, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_6(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_7(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_8(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_9(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_10(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public override MVO_POINTER_SIZED_INT Insert(string text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_Insert__SWIG_11(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path, int key_path_length) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_0(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path, key_path_length);}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow, MVO_POINTER_SIZED_INT[] key_path) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_1(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow, key_path);}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type, bool useArrow) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_2(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type, useArrow);}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key, int bg_type) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_3(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key, bg_type);}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView, MVO_POINTER_SIZED_INT layer_key) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_4(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView), layer_key);}

  public override MVO_POINTER_SIZED_INT InsertWithEncoding(ushort[] text, HPoint target, HPoint position, MVO_POINTER_SIZED_INT AnnotateThis, HBaseView pView) {return HCSMVOPINVOKE.HUtilityAnnotationMeasure_InsertWithEncoding__SWIG_5(swigCPtr, text, HPoint.getCPtr(target), HPoint.getCPtr(position), AnnotateThis, HBaseView.getCPtr(pView));}

  new public virtual void MoveText(HPoint position) {
    HCSMVOPINVOKE.HUtilityAnnotationMeasure_MoveText__SWIG_0(swigCPtr, HPoint.getCPtr(position));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  new public virtual void MoveText(HPoint A, HPoint B) {
    HCSMVOPINVOKE.HUtilityAnnotationMeasure_MoveText__SWIG_1(swigCPtr, HPoint.getCPtr(A), HPoint.getCPtr(B));
    if (HCSMVOPINVOKE.SWIGPendingException.Pending) throw HCSMVOPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsMeasurement(MVO_POINTER_SIZED_INT key) {
    bool ret = HCSMVOPINVOKE.HUtilityAnnotationMeasure_IsMeasurement(key);
    return ret;
  }

  public override void SetNote(MVO_POINTER_SIZED_INT noteskey, HBaseView view) {
    HCSMVOPINVOKE.HUtilityAnnotationMeasure_SetNote(swigCPtr, noteskey, HBaseView.getCPtr(view));
  }

  public static void drawLineCallbackDummy(SWIGTYPE_p_HIC_Rendition rendition, int count, SWIGTYPE_p_HIC_DC_Point p) {
    HCSMVOPINVOKE.HUtilityAnnotationMeasure_drawLineCallbackDummy(SWIGTYPE_p_HIC_Rendition.getCPtr(rendition), count, SWIGTYPE_p_HIC_DC_Point.getCPtr(p));
  }

  public HUtilityAnnotationMeasure() : this(HCSMVOPINVOKE.new_HUtilityAnnotationMeasure(), true) {
  }

}
